
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f50  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080151f0  080151f0  000251f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080155d0  080155d0  000255d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080155d8  080155d8  000255d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080155dc  080155dc  000255dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  080155e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  080156e0  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  080156e0  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032815  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548e  00000000  00000000  00062943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a96  00000000  00000000  0006c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000309c1  00000000  00000000  000742c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019453f  00000000  00000000  000a4c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002391c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abe4  00000000  00000000  00239218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080151d8 	.word	0x080151d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080151d8 	.word	0x080151d8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d10b      	bne.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x28>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4814      	ldr	r0, [pc, #80]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80005fa:	f008 f92e 	bl	800885a <HAL_GPIO_TogglePin>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2101      	movs	r1, #1
 8000604:	4618      	mov	r0, r3
 8000606:	f010 ffb7 	bl	8011578 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 800060a:	e018      	b.n	800063e <HAL_TIM_OC_DelayElapsedCallback+0x5a>
	else if (htim == &htim2)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <HAL_TIM_OC_DelayElapsedCallback+0x3e>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f010 ffac 	bl	8011578 <osEventFlagsSet>
}
 8000620:	e00d      	b.n	800063e <HAL_TIM_OC_DelayElapsedCallback+0x5a>
	else if (htim == &htim3)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <HAL_TIM_OC_DelayElapsedCallback+0x54>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2104      	movs	r1, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f010 ffa1 	bl	8011578 <osEventFlagsSet>
}
 8000636:	e002      	b.n	800063e <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		printf("Unknown Timer Interrupt\n");
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 800063a:	f014 fa1d 	bl	8014a78 <puts>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	240004e8 	.word	0x240004e8
 800064c:	58020c00 	.word	0x58020c00
 8000650:	24000b3c 	.word	0x24000b3c
 8000654:	24000534 	.word	0x24000534
 8000658:	24000580 	.word	0x24000580
 800065c:	08015240 	.word	0x08015240

08000660 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	49f2      	ldr	r1, [pc, #968]	; (8000a34 <HAL_UART_RxCpltCallback+0x3d4>)
 800066c:	48f2      	ldr	r0, [pc, #968]	; (8000a38 <HAL_UART_RxCpltCallback+0x3d8>)
 800066e:	f00e fa77 	bl	800eb60 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000672:	4bf0      	ldr	r3, [pc, #960]	; (8000a34 <HAL_UART_RxCpltCallback+0x3d4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2be0      	cmp	r3, #224	; 0xe0
 800067c:	f200 83c6 	bhi.w	8000e0c <HAL_UART_RxCpltCallback+0x7ac>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <HAL_UART_RxCpltCallback+0x28>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	08000a21 	.word	0x08000a21
 800068c:	08000a5d 	.word	0x08000a5d
 8000690:	08000ae3 	.word	0x08000ae3
 8000694:	08000b0d 	.word	0x08000b0d
 8000698:	08000b35 	.word	0x08000b35
 800069c:	08000b5f 	.word	0x08000b5f
 80006a0:	08000b8b 	.word	0x08000b8b
 80006a4:	08000bb7 	.word	0x08000bb7
 80006a8:	08000be1 	.word	0x08000be1
 80006ac:	08000c13 	.word	0x08000c13
 80006b0:	08000c35 	.word	0x08000c35
 80006b4:	08000c51 	.word	0x08000c51
 80006b8:	08000c6d 	.word	0x08000c6d
 80006bc:	08000cb7 	.word	0x08000cb7
 80006c0:	08000db1 	.word	0x08000db1
 80006c4:	08000de1 	.word	0x08000de1
 80006c8:	08000a0d 	.word	0x08000a0d
 80006cc:	08000a49 	.word	0x08000a49
 80006d0:	08000acd 	.word	0x08000acd
 80006d4:	08000af9 	.word	0x08000af9
 80006d8:	08000b21 	.word	0x08000b21
 80006dc:	08000b49 	.word	0x08000b49
 80006e0:	08000b75 	.word	0x08000b75
 80006e4:	08000ba1 	.word	0x08000ba1
 80006e8:	08000bcd 	.word	0x08000bcd
 80006ec:	08000bf5 	.word	0x08000bf5
 80006f0:	08000c27 	.word	0x08000c27
 80006f4:	08000c43 	.word	0x08000c43
 80006f8:	08000c5f 	.word	0x08000c5f
 80006fc:	08000c7b 	.word	0x08000c7b
 8000700:	08000cf3 	.word	0x08000cf3
 8000704:	08000dd9 	.word	0x08000dd9
 8000708:	08000e0d 	.word	0x08000e0d
 800070c:	08000e0d 	.word	0x08000e0d
 8000710:	08000e0d 	.word	0x08000e0d
 8000714:	08000e0d 	.word	0x08000e0d
 8000718:	08000e0d 	.word	0x08000e0d
 800071c:	08000e0d 	.word	0x08000e0d
 8000720:	08000e0d 	.word	0x08000e0d
 8000724:	08000e0d 	.word	0x08000e0d
 8000728:	08000e0d 	.word	0x08000e0d
 800072c:	08000e0d 	.word	0x08000e0d
 8000730:	08000e0d 	.word	0x08000e0d
 8000734:	08000e0d 	.word	0x08000e0d
 8000738:	08000e0d 	.word	0x08000e0d
 800073c:	08000e0d 	.word	0x08000e0d
 8000740:	08000e0d 	.word	0x08000e0d
 8000744:	08000e0d 	.word	0x08000e0d
 8000748:	08000e0d 	.word	0x08000e0d
 800074c:	08000e0d 	.word	0x08000e0d
 8000750:	08000e0d 	.word	0x08000e0d
 8000754:	08000e0d 	.word	0x08000e0d
 8000758:	08000e0d 	.word	0x08000e0d
 800075c:	08000e0d 	.word	0x08000e0d
 8000760:	08000e0d 	.word	0x08000e0d
 8000764:	08000e0d 	.word	0x08000e0d
 8000768:	08000e0d 	.word	0x08000e0d
 800076c:	08000e0d 	.word	0x08000e0d
 8000770:	08000e0d 	.word	0x08000e0d
 8000774:	08000e0d 	.word	0x08000e0d
 8000778:	08000e0d 	.word	0x08000e0d
 800077c:	08000e0d 	.word	0x08000e0d
 8000780:	08000e0d 	.word	0x08000e0d
 8000784:	08000e0d 	.word	0x08000e0d
 8000788:	08000e0d 	.word	0x08000e0d
 800078c:	08000e0d 	.word	0x08000e0d
 8000790:	08000e0d 	.word	0x08000e0d
 8000794:	08000e0d 	.word	0x08000e0d
 8000798:	08000e0d 	.word	0x08000e0d
 800079c:	08000e0d 	.word	0x08000e0d
 80007a0:	08000e0d 	.word	0x08000e0d
 80007a4:	08000e0d 	.word	0x08000e0d
 80007a8:	08000e0d 	.word	0x08000e0d
 80007ac:	08000e0d 	.word	0x08000e0d
 80007b0:	08000e0d 	.word	0x08000e0d
 80007b4:	08000e0d 	.word	0x08000e0d
 80007b8:	08000e0d 	.word	0x08000e0d
 80007bc:	08000e0d 	.word	0x08000e0d
 80007c0:	08000e0d 	.word	0x08000e0d
 80007c4:	08000e0d 	.word	0x08000e0d
 80007c8:	08000e0d 	.word	0x08000e0d
 80007cc:	08000e0d 	.word	0x08000e0d
 80007d0:	08000e0d 	.word	0x08000e0d
 80007d4:	08000e0d 	.word	0x08000e0d
 80007d8:	08000e0d 	.word	0x08000e0d
 80007dc:	08000e0d 	.word	0x08000e0d
 80007e0:	08000e0d 	.word	0x08000e0d
 80007e4:	08000e0d 	.word	0x08000e0d
 80007e8:	08000e0d 	.word	0x08000e0d
 80007ec:	08000e0d 	.word	0x08000e0d
 80007f0:	08000e0d 	.word	0x08000e0d
 80007f4:	08000e0d 	.word	0x08000e0d
 80007f8:	08000e0d 	.word	0x08000e0d
 80007fc:	08000e0d 	.word	0x08000e0d
 8000800:	08000e0d 	.word	0x08000e0d
 8000804:	08000e0d 	.word	0x08000e0d
 8000808:	08000e0d 	.word	0x08000e0d
 800080c:	08000e0d 	.word	0x08000e0d
 8000810:	08000e0d 	.word	0x08000e0d
 8000814:	08000e0d 	.word	0x08000e0d
 8000818:	08000e0d 	.word	0x08000e0d
 800081c:	08000e0d 	.word	0x08000e0d
 8000820:	08000e0d 	.word	0x08000e0d
 8000824:	08000e0d 	.word	0x08000e0d
 8000828:	08000e0d 	.word	0x08000e0d
 800082c:	08000e0d 	.word	0x08000e0d
 8000830:	08000e0d 	.word	0x08000e0d
 8000834:	08000e0d 	.word	0x08000e0d
 8000838:	08000e0d 	.word	0x08000e0d
 800083c:	08000e0d 	.word	0x08000e0d
 8000840:	08000e0d 	.word	0x08000e0d
 8000844:	08000e0d 	.word	0x08000e0d
 8000848:	08000e0d 	.word	0x08000e0d
 800084c:	08000e0d 	.word	0x08000e0d
 8000850:	08000e0d 	.word	0x08000e0d
 8000854:	08000e0d 	.word	0x08000e0d
 8000858:	08000e0d 	.word	0x08000e0d
 800085c:	08000e0d 	.word	0x08000e0d
 8000860:	08000e0d 	.word	0x08000e0d
 8000864:	08000e0d 	.word	0x08000e0d
 8000868:	08000e0d 	.word	0x08000e0d
 800086c:	08000e0d 	.word	0x08000e0d
 8000870:	08000e0d 	.word	0x08000e0d
 8000874:	08000e0d 	.word	0x08000e0d
 8000878:	08000e0d 	.word	0x08000e0d
 800087c:	08000e0d 	.word	0x08000e0d
 8000880:	08000e0d 	.word	0x08000e0d
 8000884:	08000e0d 	.word	0x08000e0d
 8000888:	08000e0d 	.word	0x08000e0d
 800088c:	08000e0d 	.word	0x08000e0d
 8000890:	08000e0d 	.word	0x08000e0d
 8000894:	08000e0d 	.word	0x08000e0d
 8000898:	08000e0d 	.word	0x08000e0d
 800089c:	08000e0d 	.word	0x08000e0d
 80008a0:	08000e0d 	.word	0x08000e0d
 80008a4:	08000e0d 	.word	0x08000e0d
 80008a8:	08000e0d 	.word	0x08000e0d
 80008ac:	08000e0d 	.word	0x08000e0d
 80008b0:	08000e0d 	.word	0x08000e0d
 80008b4:	08000e0d 	.word	0x08000e0d
 80008b8:	08000e0d 	.word	0x08000e0d
 80008bc:	08000e0d 	.word	0x08000e0d
 80008c0:	08000e0d 	.word	0x08000e0d
 80008c4:	08000e0d 	.word	0x08000e0d
 80008c8:	08000e0d 	.word	0x08000e0d
 80008cc:	08000e0d 	.word	0x08000e0d
 80008d0:	08000e0d 	.word	0x08000e0d
 80008d4:	08000e0d 	.word	0x08000e0d
 80008d8:	08000e0d 	.word	0x08000e0d
 80008dc:	08000e0d 	.word	0x08000e0d
 80008e0:	08000e0d 	.word	0x08000e0d
 80008e4:	08000e0d 	.word	0x08000e0d
 80008e8:	08000e0d 	.word	0x08000e0d
 80008ec:	08000e0d 	.word	0x08000e0d
 80008f0:	08000e0d 	.word	0x08000e0d
 80008f4:	08000e0d 	.word	0x08000e0d
 80008f8:	08000e0d 	.word	0x08000e0d
 80008fc:	08000e0d 	.word	0x08000e0d
 8000900:	08000e0d 	.word	0x08000e0d
 8000904:	08000e0d 	.word	0x08000e0d
 8000908:	08000e0d 	.word	0x08000e0d
 800090c:	08000e0d 	.word	0x08000e0d
 8000910:	08000e0d 	.word	0x08000e0d
 8000914:	08000e0d 	.word	0x08000e0d
 8000918:	08000e0d 	.word	0x08000e0d
 800091c:	08000e0d 	.word	0x08000e0d
 8000920:	08000e0d 	.word	0x08000e0d
 8000924:	08000e0d 	.word	0x08000e0d
 8000928:	08000e0d 	.word	0x08000e0d
 800092c:	08000e0d 	.word	0x08000e0d
 8000930:	08000e0d 	.word	0x08000e0d
 8000934:	08000e0d 	.word	0x08000e0d
 8000938:	08000e0d 	.word	0x08000e0d
 800093c:	08000e0d 	.word	0x08000e0d
 8000940:	08000e0d 	.word	0x08000e0d
 8000944:	08000e0d 	.word	0x08000e0d
 8000948:	08000e0d 	.word	0x08000e0d
 800094c:	08000e0d 	.word	0x08000e0d
 8000950:	08000e0d 	.word	0x08000e0d
 8000954:	08000e0d 	.word	0x08000e0d
 8000958:	08000e0d 	.word	0x08000e0d
 800095c:	08000e0d 	.word	0x08000e0d
 8000960:	08000e0d 	.word	0x08000e0d
 8000964:	08000e0d 	.word	0x08000e0d
 8000968:	08000e0d 	.word	0x08000e0d
 800096c:	08000e0d 	.word	0x08000e0d
 8000970:	08000e0d 	.word	0x08000e0d
 8000974:	08000e0d 	.word	0x08000e0d
 8000978:	08000e0d 	.word	0x08000e0d
 800097c:	08000e0d 	.word	0x08000e0d
 8000980:	08000e0d 	.word	0x08000e0d
 8000984:	08000e0d 	.word	0x08000e0d
 8000988:	08000e0d 	.word	0x08000e0d
 800098c:	08000e0d 	.word	0x08000e0d
 8000990:	08000e0d 	.word	0x08000e0d
 8000994:	08000e0d 	.word	0x08000e0d
 8000998:	08000e0d 	.word	0x08000e0d
 800099c:	08000e0d 	.word	0x08000e0d
 80009a0:	08000e0d 	.word	0x08000e0d
 80009a4:	08000e0d 	.word	0x08000e0d
 80009a8:	08000e0d 	.word	0x08000e0d
 80009ac:	08000e0d 	.word	0x08000e0d
 80009b0:	08000e0d 	.word	0x08000e0d
 80009b4:	08000e0d 	.word	0x08000e0d
 80009b8:	08000e0d 	.word	0x08000e0d
 80009bc:	08000e0d 	.word	0x08000e0d
 80009c0:	08000e0d 	.word	0x08000e0d
 80009c4:	08000e0d 	.word	0x08000e0d
 80009c8:	08000dfb 	.word	0x08000dfb
 80009cc:	08000e0d 	.word	0x08000e0d
 80009d0:	08000e0d 	.word	0x08000e0d
 80009d4:	08000e0d 	.word	0x08000e0d
 80009d8:	08000e0d 	.word	0x08000e0d
 80009dc:	08000e0d 	.word	0x08000e0d
 80009e0:	08000e0d 	.word	0x08000e0d
 80009e4:	08000e0d 	.word	0x08000e0d
 80009e8:	08000e0d 	.word	0x08000e0d
 80009ec:	08000e0d 	.word	0x08000e0d
 80009f0:	08000e0d 	.word	0x08000e0d
 80009f4:	08000e0d 	.word	0x08000e0d
 80009f8:	08000e0d 	.word	0x08000e0d
 80009fc:	08000e0d 	.word	0x08000e0d
 8000a00:	08000e0d 	.word	0x08000e0d
 8000a04:	08000e0d 	.word	0x08000e0d
 8000a08:	08000de9 	.word	0x08000de9
	case 0x10: {
		printf("SDN1 ON\n");
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_UART_RxCpltCallback+0x3dc>)
 8000a0e:	f014 f833 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a14:	2104      	movs	r1, #4
 8000a16:	2201      	movs	r2, #1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f007 ff05 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000a1e:	e200      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a22:	f014 f829 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f007 fefb 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000a32:	e1f6      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
 8000a34:	24000b40 	.word	0x24000b40
 8000a38:	240005cc 	.word	0x240005cc
 8000a3c:	08015258 	.word	0x08015258
 8000a40:	58020400 	.word	0x58020400
 8000a44:	08015260 	.word	0x08015260
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a48:	48b4      	ldr	r0, [pc, #720]	; (8000d1c <HAL_UART_RxCpltCallback+0x6bc>)
 8000a4a:	f014 f815 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a4e:	4bb4      	ldr	r3, [pc, #720]	; (8000d20 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a50:	2120      	movs	r1, #32
 8000a52:	2201      	movs	r2, #1
 8000a54:	4618      	mov	r0, r3
 8000a56:	f007 fee7 	bl	8008828 <HAL_GPIO_WritePin>

		break;
 8000a5a:	e1e2      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a5c:	48b1      	ldr	r0, [pc, #708]	; (8000d24 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a5e:	f014 f80b 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a62:	4baf      	ldr	r3, [pc, #700]	; (8000d20 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a64:	2120      	movs	r1, #32
 8000a66:	2200      	movs	r2, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 fedd 	bl	8008828 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a6e:	4bac      	ldr	r3, [pc, #688]	; (8000d20 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	2200      	movs	r2, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f007 fed7 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a7a:	4bab      	ldr	r3, [pc, #684]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	2200      	movs	r2, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f007 fed0 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a88:	4ba7      	ldr	r3, [pc, #668]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f007 fec9 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a96:	4ba4      	ldr	r3, [pc, #656]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f007 fec2 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa4:	4ba0      	ldr	r3, [pc, #640]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 febc 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ab0:	4b9d      	ldr	r3, [pc, #628]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f007 feb6 	bl	8008828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000abc:	4b9a      	ldr	r3, [pc, #616]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f007 feaf 	bl	8008828 <HAL_GPIO_WritePin>

		break;
 8000aca:	e1aa      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000acc:	4897      	ldr	r0, [pc, #604]	; (8000d2c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ace:	f013 ffd3 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ad2:	4b95      	ldr	r3, [pc, #596]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 fea4 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000ae0:	e19f      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ae2:	4893      	ldr	r0, [pc, #588]	; (8000d30 <HAL_UART_RxCpltCallback+0x6d0>)
 8000ae4:	f013 ffc8 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae8:	4b8f      	ldr	r3, [pc, #572]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	2200      	movs	r2, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 fe99 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000af6:	e194      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000af8:	488e      	ldr	r0, [pc, #568]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d4>)
 8000afa:	f013 ffbd 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000afe:	4b8a      	ldr	r3, [pc, #552]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	2201      	movs	r2, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fe8f 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b0a:	e18a      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b0c:	488a      	ldr	r0, [pc, #552]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b0e:	f013 ffb3 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b12:	4b85      	ldr	r3, [pc, #532]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	2200      	movs	r2, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f007 fe85 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b1e:	e180      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b20:	4886      	ldr	r0, [pc, #536]	; (8000d3c <HAL_UART_RxCpltCallback+0x6dc>)
 8000b22:	f013 ffa9 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b26:	4b80      	ldr	r3, [pc, #512]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f007 fe7b 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b32:	e176      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b34:	4882      	ldr	r0, [pc, #520]	; (8000d40 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b36:	f013 ff9f 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b3a:	4b7b      	ldr	r3, [pc, #492]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f007 fe71 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b46:	e16c      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b48:	487e      	ldr	r0, [pc, #504]	; (8000d44 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b4a:	f013 ff95 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b4e:	4b76      	ldr	r3, [pc, #472]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	2201      	movs	r2, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f007 fe66 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b5c:	e161      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b5e:	487a      	ldr	r0, [pc, #488]	; (8000d48 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b60:	f013 ff8a 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b64:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f007 fe5b 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b72:	e156      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b74:	4875      	ldr	r0, [pc, #468]	; (8000d4c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b76:	f013 ff7f 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b7a:	4b6b      	ldr	r3, [pc, #428]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b80:	2201      	movs	r2, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f007 fe50 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b88:	e14b      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b8a:	4871      	ldr	r0, [pc, #452]	; (8000d50 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b8c:	f013 ff74 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b90:	4b65      	ldr	r3, [pc, #404]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	2200      	movs	r2, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f007 fe45 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000b9e:	e140      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000ba0:	486c      	ldr	r0, [pc, #432]	; (8000d54 <HAL_UART_RxCpltCallback+0x6f4>)
 8000ba2:	f013 ff69 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ba6:	4b60      	ldr	r3, [pc, #384]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	2201      	movs	r2, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 fe3a 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000bb4:	e135      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bb6:	4868      	ldr	r0, [pc, #416]	; (8000d58 <HAL_UART_RxCpltCallback+0x6f8>)
 8000bb8:	f013 ff5e 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bbc:	4b5a      	ldr	r3, [pc, #360]	; (8000d28 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 fe2f 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000bca:	e12a      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bcc:	4863      	ldr	r0, [pc, #396]	; (8000d5c <HAL_UART_RxCpltCallback+0x6fc>)
 8000bce:	f013 ff53 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bd2:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <HAL_UART_RxCpltCallback+0x6c0>)
 8000bd4:	2140      	movs	r1, #64	; 0x40
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f007 fe25 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000bde:	e120      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000be0:	485f      	ldr	r0, [pc, #380]	; (8000d60 <HAL_UART_RxCpltCallback+0x700>)
 8000be2:	f013 ff49 	bl	8014a78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000be6:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <HAL_UART_RxCpltCallback+0x6c0>)
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	2200      	movs	r2, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f007 fe1b 	bl	8008828 <HAL_GPIO_WritePin>
		break;
 8000bf2:	e116      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000bf4:	485b      	ldr	r0, [pc, #364]	; (8000d64 <HAL_UART_RxCpltCallback+0x704>)
 8000bf6:	f013 ff3f 	bl	8014a78 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000bfa:	485b      	ldr	r0, [pc, #364]	; (8000d68 <HAL_UART_RxCpltCallback+0x708>)
 8000bfc:	f00c f994 	bl	800cf28 <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2320      	movs	r3, #32
 8000c06:	4a59      	ldr	r2, [pc, #356]	; (8000d6c <HAL_UART_RxCpltCallback+0x70c>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4859      	ldr	r0, [pc, #356]	; (8000d70 <HAL_UART_RxCpltCallback+0x710>)
 8000c0c:	f004 fa7c 	bl	8005108 <HAL_DAC_Start_DMA>
		break;
 8000c10:	e107      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c12:	4858      	ldr	r0, [pc, #352]	; (8000d74 <HAL_UART_RxCpltCallback+0x714>)
 8000c14:	f013 ff30 	bl	8014a78 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000c18:	4853      	ldr	r0, [pc, #332]	; (8000d68 <HAL_UART_RxCpltCallback+0x708>)
 8000c1a:	f00c f9f5 	bl	800d008 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4853      	ldr	r0, [pc, #332]	; (8000d70 <HAL_UART_RxCpltCallback+0x710>)
 8000c22:	f004 fb31 	bl	8005288 <HAL_DAC_Stop_DMA>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c26:	4854      	ldr	r0, [pc, #336]	; (8000d78 <HAL_UART_RxCpltCallback+0x718>)
 8000c28:	f013 ff26 	bl	8014a78 <puts>
		ERPA_ON = 1;
 8000c2c:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e0f6      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c34:	4852      	ldr	r0, [pc, #328]	; (8000d80 <HAL_UART_RxCpltCallback+0x720>)
 8000c36:	f013 ff1f 	bl	8014a78 <puts>
		ERPA_ON = 0;
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
		break;
 8000c40:	e0ef      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c42:	4850      	ldr	r0, [pc, #320]	; (8000d84 <HAL_UART_RxCpltCallback+0x724>)
 8000c44:	f013 ff18 	bl	8014a78 <puts>
		PMT_ON = 1;
 8000c48:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <HAL_UART_RxCpltCallback+0x728>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e0e8      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c50:	484e      	ldr	r0, [pc, #312]	; (8000d8c <HAL_UART_RxCpltCallback+0x72c>)
 8000c52:	f013 ff11 	bl	8014a78 <puts>
		PMT_ON = 0;
 8000c56:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <HAL_UART_RxCpltCallback+0x728>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
		break;
 8000c5c:	e0e1      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c5e:	484c      	ldr	r0, [pc, #304]	; (8000d90 <HAL_UART_RxCpltCallback+0x730>)
 8000c60:	f013 ff0a 	bl	8014a78 <puts>
		HK_ON = 1;
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <HAL_UART_RxCpltCallback+0x734>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		break;
 8000c6a:	e0da      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c6c:	484a      	ldr	r0, [pc, #296]	; (8000d98 <HAL_UART_RxCpltCallback+0x738>)
 8000c6e:	f013 ff03 	bl	8014a78 <puts>
		HK_ON = 0;
 8000c72:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <HAL_UART_RxCpltCallback+0x734>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
		break;
 8000c78:	e0d3      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000c7a:	4848      	ldr	r0, [pc, #288]	; (8000d9c <HAL_UART_RxCpltCallback+0x73c>)
 8000c7c:	f013 fefc 	bl	8014a78 <puts>
		if (step < 17) {
 8000c80:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b10      	cmp	r3, #16
 8000c86:	f200 80c5 	bhi.w	8000e14 <HAL_UART_RxCpltCallback+0x7b4>
			step+=2;
 8000c8a:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000c94:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <HAL_UART_RxCpltCallback+0x70c>)
 8000c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4832      	ldr	r0, [pc, #200]	; (8000d70 <HAL_UART_RxCpltCallback+0x710>)
 8000ca8:	f004 fb91 	bl	80053ce <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cac:	2100      	movs	r1, #0
 8000cae:	4830      	ldr	r0, [pc, #192]	; (8000d70 <HAL_UART_RxCpltCallback+0x710>)
 8000cb0:	f004 f9d2 	bl	8005058 <HAL_DAC_Start>
		}
		break;
 8000cb4:	e0ae      	b.n	8000e14 <HAL_UART_RxCpltCallback+0x7b4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cb6:	483b      	ldr	r0, [pc, #236]	; (8000da4 <HAL_UART_RxCpltCallback+0x744>)
 8000cb8:	f013 fede 	bl	8014a78 <puts>
		if (step > 3) {
 8000cbc:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	f240 80a9 	bls.w	8000e18 <HAL_UART_RxCpltCallback+0x7b8>
			step-=2;
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000cd0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <HAL_UART_RxCpltCallback+0x70c>)
 8000cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4823      	ldr	r0, [pc, #140]	; (8000d70 <HAL_UART_RxCpltCallback+0x710>)
 8000ce4:	f004 fb73 	bl	80053ce <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4821      	ldr	r0, [pc, #132]	; (8000d70 <HAL_UART_RxCpltCallback+0x710>)
 8000cec:	f004 f9b4 	bl	8005058 <HAL_DAC_Start>
		}
		break;
 8000cf0:	e092      	b.n	8000e18 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000cf2:	482d      	ldr	r0, [pc, #180]	; (8000da8 <HAL_UART_RxCpltCallback+0x748>)
 8000cf4:	f013 fec0 	bl	8014a78 <puts>
		if (cadence <= 50000){
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <HAL_UART_RxCpltCallback+0x74c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d00:	4293      	cmp	r3, r2
 8000d02:	f200 808b 	bhi.w	8000e1c <HAL_UART_RxCpltCallback+0x7bc>
			cadence *= 2;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <HAL_UART_RxCpltCallback+0x74c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <HAL_UART_RxCpltCallback+0x74c>)
 8000d0e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <HAL_UART_RxCpltCallback+0x74c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000d1a:	e07f      	b.n	8000e1c <HAL_UART_RxCpltCallback+0x7bc>
 8000d1c:	0801526c 	.word	0x0801526c
 8000d20:	58020400 	.word	0x58020400
 8000d24:	08015278 	.word	0x08015278
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	08015284 	.word	0x08015284
 8000d30:	08015290 	.word	0x08015290
 8000d34:	080152a0 	.word	0x080152a0
 8000d38:	080152ac 	.word	0x080152ac
 8000d3c:	080152b8 	.word	0x080152b8
 8000d40:	080152c4 	.word	0x080152c4
 8000d44:	080152d4 	.word	0x080152d4
 8000d48:	080152e0 	.word	0x080152e0
 8000d4c:	080152ec 	.word	0x080152ec
 8000d50:	080152f8 	.word	0x080152f8
 8000d54:	08015304 	.word	0x08015304
 8000d58:	08015314 	.word	0x08015314
 8000d5c:	08015324 	.word	0x08015324
 8000d60:	08015330 	.word	0x08015330
 8000d64:	08015340 	.word	0x08015340
 8000d68:	24000534 	.word	0x24000534
 8000d6c:	24000008 	.word	0x24000008
 8000d70:	240002d4 	.word	0x240002d4
 8000d74:	08015350 	.word	0x08015350
 8000d78:	08015360 	.word	0x08015360
 8000d7c:	24000b37 	.word	0x24000b37
 8000d80:	08015368 	.word	0x08015368
 8000d84:	08015374 	.word	0x08015374
 8000d88:	24000b36 	.word	0x24000b36
 8000d8c:	0801537c 	.word	0x0801537c
 8000d90:	08015384 	.word	0x08015384
 8000d94:	24000b38 	.word	0x24000b38
 8000d98:	0801538c 	.word	0x0801538c
 8000d9c:	08015394 	.word	0x08015394
 8000da0:	24000004 	.word	0x24000004
 8000da4:	0801539c 	.word	0x0801539c
 8000da8:	080153a8 	.word	0x080153a8
 8000dac:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000db0:	481e      	ldr	r0, [pc, #120]	; (8000e2c <HAL_UART_RxCpltCallback+0x7cc>)
 8000db2:	f013 fe61 	bl	8014a78 <puts>
		if (cadence >= 6250){
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_UART_RxCpltCallback+0x7d0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f641 0269 	movw	r2, #6249	; 0x1869
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d92e      	bls.n	8000e20 <HAL_UART_RxCpltCallback+0x7c0>
			cadence /= 2;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_UART_RxCpltCallback+0x7d0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	085b      	lsrs	r3, r3, #1
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_UART_RxCpltCallback+0x7d0>)
 8000dca:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_UART_RxCpltCallback+0x7d0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dd6:	e023      	b.n	8000e20 <HAL_UART_RxCpltCallback+0x7c0>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dda:	f013 fe4d 	bl	8014a78 <puts>
		// TODO: Exit stop mode
		break;
 8000dde:	e020      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000de0:	4815      	ldr	r0, [pc, #84]	; (8000e38 <HAL_UART_RxCpltCallback+0x7d8>)
 8000de2:	f013 fe49 	bl	8014a78 <puts>
		// TODO: Enter stop mode
		break;
 8000de6:	e01c      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000de8:	4814      	ldr	r0, [pc, #80]	; (8000e3c <HAL_UART_RxCpltCallback+0x7dc>)
 8000dea:	f013 fe45 	bl	8014a78 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_UART_RxCpltCallback+0x7e0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f011 feaa 	bl	8012b4c <xTaskResumeFromISR>
		break;
 8000df8:	e013      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000dfa:	4812      	ldr	r0, [pc, #72]	; (8000e44 <HAL_UART_RxCpltCallback+0x7e4>)
 8000dfc:	f013 fe3c 	bl	8014a78 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_RxCpltCallback+0x7e8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f011 fea1 	bl	8012b4c <xTaskResumeFromISR>
		break;
 8000e0a:	e00a      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
	}
	default:{
		printf("Unknown Command\n");
 8000e0c:	480f      	ldr	r0, [pc, #60]	; (8000e4c <HAL_UART_RxCpltCallback+0x7ec>)
 8000e0e:	f013 fe33 	bl	8014a78 <puts>
		break;
 8000e12:	e006      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e14:	bf00      	nop
 8000e16:	e004      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e18:	bf00      	nop
 8000e1a:	e002      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e1c:	bf00      	nop
 8000e1e:	e000      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e20:	bf00      	nop
	}
	}
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	080153b4 	.word	0x080153b4
 8000e30:	24000000 	.word	0x24000000
 8000e34:	080153c0 	.word	0x080153c0
 8000e38:	080153d0 	.word	0x080153d0
 8000e3c:	080153e0 	.word	0x080153e0
 8000e40:	24000670 	.word	0x24000670
 8000e44:	080153ec 	.word	0x080153ec
 8000e48:	240008d0 	.word	0x240008d0
 8000e4c:	080153f8 	.word	0x080153f8

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f002 fb6c 	bl	8003530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f89e 	bl	8000f98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e5c:	f000 f94e 	bl	80010fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 fe9e 	bl	8001ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e64:	f000 fe6c 	bl	8001b40 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e68:	f000 fdd0 	bl	8001a0c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e6c:	f000 fe1c 	bl	8001aa8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e70:	f000 fb5a 	bl	8001528 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e74:	f000 fc4e 	bl	8001714 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e78:	f000 fd52 	bl	8001920 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e7c:	f000 fca2 	bl	80017c4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e80:	f000 fa8e 	bl	80013a0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000e84:	f000 f96a 	bl	800115c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e88:	f000 fb1c 	bl	80014c4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000e8c:	f000 fbea 	bl	8001664 <MX_SPI1_Init>
  MX_RTC_Init();
 8000e90:	f000 fb8a 	bl	80015a8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000e94:	f000 ff24 	bl	8001ce0 <handshake>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <main+0x52>
	{
		Error_Handler();
 8000e9e:	f001 fc6b 	bl	8002778 <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4825      	ldr	r0, [pc, #148]	; (8000f3c <main+0xec>)
 8000ea6:	f00c f94f 	bl	800d148 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4824      	ldr	r0, [pc, #144]	; (8000f40 <main+0xf0>)
 8000eae:	f00c f94b 	bl	800d148 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4823      	ldr	r0, [pc, #140]	; (8000f44 <main+0xf4>)
 8000eb6:	f00c f947 	bl	800d148 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eba:	f010 f9e5 	bl	8011288 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000ebe:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <main+0xf8>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4822      	ldr	r0, [pc, #136]	; (8000f4c <main+0xfc>)
 8000ec4:	f010 fa2a 	bl	801131c <osThreadNew>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <main+0x100>)
 8000ecc:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <main+0x104>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4821      	ldr	r0, [pc, #132]	; (8000f58 <main+0x108>)
 8000ed4:	f010 fa22 	bl	801131c <osThreadNew>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <main+0x10c>)
 8000edc:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <main+0x110>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <main+0x114>)
 8000ee4:	f010 fa1a 	bl	801131c <osThreadNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <main+0x118>)
 8000eec:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <main+0x11c>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	481f      	ldr	r0, [pc, #124]	; (8000f70 <main+0x120>)
 8000ef4:	f010 fa12 	bl	801131c <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <main+0x124>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <main+0x128>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	481e      	ldr	r0, [pc, #120]	; (8000f7c <main+0x12c>)
 8000f04:	f010 fa0a 	bl	801131c <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <main+0x130>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <main+0x134>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	481d      	ldr	r0, [pc, #116]	; (8000f88 <main+0x138>)
 8000f14:	f010 fa02 	bl	801131c <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <main+0x13c>)
 8000f1c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f010 faea 	bl	80114f8 <osEventFlagsNew>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <main+0x140>)
 8000f28:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f2a:	f000 ff67 	bl	8001dfc <system_setup>
	printf("Starting kernal...\n");
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <main+0x144>)
 8000f30:	f013 fda2 	bl	8014a78 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f34:	f010 f9cc 	bl	80112d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f38:	e7fe      	b.n	8000f38 <main+0xe8>
 8000f3a:	bf00      	nop
 8000f3c:	240004e8 	.word	0x240004e8
 8000f40:	24000534 	.word	0x24000534
 8000f44:	24000580 	.word	0x24000580
 8000f48:	08015454 	.word	0x08015454
 8000f4c:	08002515 	.word	0x08002515
 8000f50:	24000660 	.word	0x24000660
 8000f54:	08015478 	.word	0x08015478
 8000f58:	08002559 	.word	0x08002559
 8000f5c:	24000664 	.word	0x24000664
 8000f60:	0801549c 	.word	0x0801549c
 8000f64:	0800259d 	.word	0x0800259d
 8000f68:	24000668 	.word	0x24000668
 8000f6c:	080154c0 	.word	0x080154c0
 8000f70:	080025e1 	.word	0x080025e1
 8000f74:	2400066c 	.word	0x2400066c
 8000f78:	080154e4 	.word	0x080154e4
 8000f7c:	08002605 	.word	0x08002605
 8000f80:	24000670 	.word	0x24000670
 8000f84:	08015508 	.word	0x08015508
 8000f88:	080026ad 	.word	0x080026ad
 8000f8c:	240008d0 	.word	0x240008d0
 8000f90:	24000b3c 	.word	0x24000b3c
 8000f94:	08015408 	.word	0x08015408

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09e      	sub	sp, #120	; 0x78
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa2:	224c      	movs	r2, #76	; 0x4c
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f013 fc10 	bl	80147cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f013 fc09 	bl	80147cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f007 fd9c 	bl	8008af8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <SystemClock_Config+0x158>)
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	4a49      	ldr	r2, [pc, #292]	; (80010f0 <SystemClock_Config+0x158>)
 8000fca:	f023 0301 	bic.w	r3, r3, #1
 8000fce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fd0:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <SystemClock_Config+0x158>)
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <SystemClock_Config+0x15c>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a45      	ldr	r2, [pc, #276]	; (80010f4 <SystemClock_Config+0x15c>)
 8000fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <SystemClock_Config+0x15c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ff2:	bf00      	nop
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <SystemClock_Config+0x15c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001000:	d1f8      	bne.n	8000ff4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <SystemClock_Config+0x160>)
 8001004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001008:	4a3b      	ldr	r2, [pc, #236]	; (80010f8 <SystemClock_Config+0x160>)
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001012:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <SystemClock_Config+0x160>)
 8001014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <SystemClock_Config+0x15c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <SystemClock_Config+0x15c>)
 800102a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <SystemClock_Config+0x15c>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <SystemClock_Config+0x158>)
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <SystemClock_Config+0x158>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <SystemClock_Config+0x158>)
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001052:	bf00      	nop
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <SystemClock_Config+0x15c>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800105c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001060:	d1f8      	bne.n	8001054 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001062:	230a      	movs	r3, #10
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001066:	2301      	movs	r3, #1
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001076:	2300      	movs	r3, #0
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800107a:	2304      	movs	r3, #4
 800107c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800107e:	233c      	movs	r3, #60	; 0x3c
 8001080:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001086:	2314      	movs	r3, #20
 8001088:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800108e:	230c      	movs	r3, #12
 8001090:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001092:	2300      	movs	r3, #0
 8001094:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 fd64 	bl	8008b6c <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x116>
  {
    Error_Handler();
 80010aa:	f001 fb65 	bl	8002778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	233f      	movs	r3, #63	; 0x3f
 80010b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2303      	movs	r3, #3
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010ba:	2308      	movs	r3, #8
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c2:	2340      	movs	r3, #64	; 0x40
 80010c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2104      	movs	r1, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f008 f9a2 	bl	8009420 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80010e2:	f001 fb49 	bl	8002778 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3778      	adds	r7, #120	; 0x78
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	58000400 	.word	0x58000400
 80010f4:	58024800 	.word	0x58024800
 80010f8:	58024400 	.word	0x58024400

080010fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b0      	sub	sp, #192	; 0xc0
 8001100:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	22c0      	movs	r2, #192	; 0xc0
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f013 fb5f 	bl	80147cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800110e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800111a:	2304      	movs	r3, #4
 800111c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800111e:	2309      	movs	r3, #9
 8001120:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001122:	2304      	movs	r3, #4
 8001124:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800112e:	23c0      	movs	r3, #192	; 0xc0
 8001130:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001132:	2320      	movs	r3, #32
 8001134:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001136:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f008 fd39 	bl	8009bbc <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001150:	f001 fb12 	bl	8002778 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	37c0      	adds	r7, #192	; 0xc0
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001180:	4b7a      	ldr	r3, [pc, #488]	; (800136c <MX_ADC1_Init+0x210>)
 8001182:	4a7b      	ldr	r2, [pc, #492]	; (8001370 <MX_ADC1_Init+0x214>)
 8001184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001186:	4b79      	ldr	r3, [pc, #484]	; (800136c <MX_ADC1_Init+0x210>)
 8001188:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800118c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b77      	ldr	r3, [pc, #476]	; (800136c <MX_ADC1_Init+0x210>)
 8001190:	2208      	movs	r2, #8
 8001192:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001194:	4b75      	ldr	r3, [pc, #468]	; (800136c <MX_ADC1_Init+0x210>)
 8001196:	2201      	movs	r2, #1
 8001198:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b74      	ldr	r3, [pc, #464]	; (800136c <MX_ADC1_Init+0x210>)
 800119c:	2204      	movs	r2, #4
 800119e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a0:	4b72      	ldr	r3, [pc, #456]	; (800136c <MX_ADC1_Init+0x210>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011a6:	4b71      	ldr	r3, [pc, #452]	; (800136c <MX_ADC1_Init+0x210>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011ac:	4b6f      	ldr	r3, [pc, #444]	; (800136c <MX_ADC1_Init+0x210>)
 80011ae:	220b      	movs	r2, #11
 80011b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b2:	4b6e      	ldr	r3, [pc, #440]	; (800136c <MX_ADC1_Init+0x210>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b6c      	ldr	r3, [pc, #432]	; (800136c <MX_ADC1_Init+0x210>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011be:	4b6b      	ldr	r3, [pc, #428]	; (800136c <MX_ADC1_Init+0x210>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011c4:	4b69      	ldr	r3, [pc, #420]	; (800136c <MX_ADC1_Init+0x210>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ca:	4b68      	ldr	r3, [pc, #416]	; (800136c <MX_ADC1_Init+0x210>)
 80011cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011d2:	4b66      	ldr	r3, [pc, #408]	; (800136c <MX_ADC1_Init+0x210>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011d8:	4b64      	ldr	r3, [pc, #400]	; (800136c <MX_ADC1_Init+0x210>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e0:	4862      	ldr	r0, [pc, #392]	; (800136c <MX_ADC1_Init+0x210>)
 80011e2:	f002 fc31 	bl	8003a48 <HAL_ADC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011ec:	f001 fac4 	bl	8002778 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	485c      	ldr	r0, [pc, #368]	; (800136c <MX_ADC1_Init+0x210>)
 80011fc:	f003 fd4c 	bl	8004c98 <HAL_ADCEx_MultiModeConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001206:	f001 fab7 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800120a:	4b5a      	ldr	r3, [pc, #360]	; (8001374 <MX_ADC1_Init+0x218>)
 800120c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800120e:	2306      	movs	r3, #6
 8001210:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001212:	2307      	movs	r3, #7
 8001214:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001216:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800121a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800121c:	2304      	movs	r3, #4
 800121e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	484f      	ldr	r0, [pc, #316]	; (800136c <MX_ADC1_Init+0x210>)
 800122e:	f002 fe8f 	bl	8003f50 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001238:	f001 fa9e 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <MX_ADC1_Init+0x21c>)
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001240:	230c      	movs	r3, #12
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4848      	ldr	r0, [pc, #288]	; (800136c <MX_ADC1_Init+0x210>)
 800124a:	f002 fe81 	bl	8003f50 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001254:	f001 fa90 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001258:	4b48      	ldr	r3, [pc, #288]	; (800137c <MX_ADC1_Init+0x220>)
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800125c:	2312      	movs	r3, #18
 800125e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4841      	ldr	r0, [pc, #260]	; (800136c <MX_ADC1_Init+0x210>)
 8001266:	f002 fe73 	bl	8003f50 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001270:	f001 fa82 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <MX_ADC1_Init+0x224>)
 8001276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001278:	2318      	movs	r3, #24
 800127a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	483a      	ldr	r0, [pc, #232]	; (800136c <MX_ADC1_Init+0x210>)
 8001282:	f002 fe65 	bl	8003f50 <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800128c:	f001 fa74 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <MX_ADC1_Init+0x228>)
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4833      	ldr	r0, [pc, #204]	; (800136c <MX_ADC1_Init+0x210>)
 80012a0:	f002 fe56 	bl	8003f50 <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012aa:	f001 fa65 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_ADC1_Init+0x22c>)
 80012b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012b2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	482b      	ldr	r0, [pc, #172]	; (800136c <MX_ADC1_Init+0x210>)
 80012be:	f002 fe47 	bl	8003f50 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012c8:	f001 fa56 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <MX_ADC1_Init+0x230>)
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012d0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4824      	ldr	r0, [pc, #144]	; (800136c <MX_ADC1_Init+0x210>)
 80012dc:	f002 fe38 	bl	8003f50 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012e6:	f001 fa47 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_ADC1_Init+0x234>)
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012ee:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_ADC1_Init+0x210>)
 80012fa:	f002 fe29 	bl	8003f50 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001304:	f001 fa38 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_ADC1_Init+0x238>)
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800130c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001310:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4815      	ldr	r0, [pc, #84]	; (800136c <MX_ADC1_Init+0x210>)
 8001318:	f002 fe1a 	bl	8003f50 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001322:	f001 fa29 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_ADC1_Init+0x23c>)
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_ADC1_Init+0x210>)
 8001336:	f002 fe0b 	bl	8003f50 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001340:	f001 fa1a 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_ADC1_Init+0x240>)
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001348:	f240 2306 	movw	r3, #518	; 0x206
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_ADC1_Init+0x210>)
 8001354:	f002 fdfc 	bl	8003f50 <HAL_ADC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800135e:	f001 fa0b 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2400011c 	.word	0x2400011c
 8001370:	40022000 	.word	0x40022000
 8001374:	0c900008 	.word	0x0c900008
 8001378:	10c00010 	.word	0x10c00010
 800137c:	14f00020 	.word	0x14f00020
 8001380:	1d500080 	.word	0x1d500080
 8001384:	21800100 	.word	0x21800100
 8001388:	25b00200 	.word	0x25b00200
 800138c:	2a000400 	.word	0x2a000400
 8001390:	2e300800 	.word	0x2e300800
 8001394:	3ac04000 	.word	0x3ac04000
 8001398:	3ef08000 	.word	0x3ef08000
 800139c:	47520000 	.word	0x47520000

080013a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013ba:	4a3e      	ldr	r2, [pc, #248]	; (80014b4 <MX_ADC3_Init+0x114>)
 80013bc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013c0:	2208      	movs	r2, #8
 80013c2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013d8:	2201      	movs	r2, #1
 80013da:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013de:	2204      	movs	r2, #4
 80013e0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013f6:	2203      	movs	r2, #3
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <MX_ADC3_Init+0x110>)
 80013fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001404:	2200      	movs	r2, #0
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_ADC3_Init+0x110>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001410:	4827      	ldr	r0, [pc, #156]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001412:	f002 fb19 	bl	8003a48 <HAL_ADC_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800141c:	f001 f9ac 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_ADC3_Init+0x118>)
 8001422:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001424:	2306      	movs	r3, #6
 8001426:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001428:	2307      	movs	r3, #7
 800142a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001430:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001432:	2304      	movs	r3, #4
 8001434:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001444:	f002 fd84 	bl	8003f50 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800144e:	f001 f993 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_ADC3_Init+0x11c>)
 8001454:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001456:	230c      	movs	r3, #12
 8001458:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001460:	f002 fd76 	bl	8003f50 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800146a:	f001 f985 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001472:	2312      	movs	r3, #18
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_ADC3_Init+0x110>)
 800147c:	f002 fd68 	bl	8003f50 <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001486:	f001 f977 	bl	8002778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <MX_ADC3_Init+0x120>)
 800148c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800148e:	2318      	movs	r3, #24
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_ADC3_Init+0x110>)
 8001498:	f002 fd5a 	bl	8003f50 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014a2:	f001 f969 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	24000180 	.word	0x24000180
 80014b4:	58026000 	.word	0x58026000
 80014b8:	cb840000 	.word	0xcb840000
 80014bc:	cfb80000 	.word	0xcfb80000
 80014c0:	04300002 	.word	0x04300002

080014c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2224      	movs	r2, #36	; 0x24
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f013 f97b 	bl	80147cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_DAC1_Init+0x5c>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_DAC1_Init+0x60>)
 80014da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <MX_DAC1_Init+0x5c>)
 80014de:	f003 fd99 	bl	8005014 <HAL_DAC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014e8:	f001 f946 	bl	8002778 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014f0:	230a      	movs	r3, #10
 80014f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_DAC1_Init+0x5c>)
 8001508:	f003 ffb4 	bl	8005474 <HAL_DAC_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001512:	f001 f931 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240002d4 	.word	0x240002d4
 8001524:	40007400 	.word	0x40007400

08001528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_I2C1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_I2C1_Init+0x74>)
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <MX_I2C1_Init+0x7c>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_I2C1_Init+0x74>)
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_I2C1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_I2C1_Init+0x74>)
 8001564:	f007 f994 	bl	8008890 <HAL_I2C_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800156e:	f001 f903 	bl	8002778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001572:	2100      	movs	r1, #0
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <MX_I2C1_Init+0x74>)
 8001576:	f007 fa27 	bl	80089c8 <HAL_I2CEx_ConfigAnalogFilter>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001580:	f001 f8fa 	bl	8002778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_I2C1_Init+0x74>)
 8001588:	f007 fa69 	bl	8008a5e <HAL_I2CEx_ConfigDigitalFilter>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001592:	f001 f8f1 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	24000360 	.word	0x24000360
 80015a0:	40005400 	.word	0x40005400
 80015a4:	307075b1 	.word	0x307075b1

080015a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_RTC_Init+0xb4>)
 80015c2:	4a27      	ldr	r2, [pc, #156]	; (8001660 <MX_RTC_Init+0xb8>)
 80015c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_RTC_Init+0xb4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_RTC_Init+0xb4>)
 80015ce:	2220      	movs	r2, #32
 80015d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_RTC_Init+0xb4>)
 80015d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_RTC_Init+0xb4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_RTC_Init+0xb4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_RTC_Init+0xb4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_RTC_Init+0xb4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015f2:	481a      	ldr	r0, [pc, #104]	; (800165c <MX_RTC_Init+0xb4>)
 80015f4:	f00a ffe0 	bl	800c5b8 <HAL_RTC_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015fe:	f001 f8bb 	bl	8002778 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001602:	2300      	movs	r3, #0
 8001604:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001606:	2300      	movs	r3, #0
 8001608:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800160a:	2300      	movs	r3, #0
 800160c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2201      	movs	r2, #1
 800161a:	4619      	mov	r1, r3
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <MX_RTC_Init+0xb4>)
 800161e:	f00b f84d 	bl	800c6bc <HAL_RTC_SetTime>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001628:	f001 f8a6 	bl	8002778 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800162c:	2305      	movs	r3, #5
 800162e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001630:	2305      	movs	r3, #5
 8001632:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8001634:	2331      	movs	r3, #49	; 0x31
 8001636:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001638:	2324      	movs	r3, #36	; 0x24
 800163a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2201      	movs	r2, #1
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_RTC_Init+0xb4>)
 8001644:	f00b f934 	bl	800c8b0 <HAL_RTC_SetDate>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800164e:	f001 f893 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	240003b4 	.word	0x240003b4
 8001660:	58004000 	.word	0x58004000

08001664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <MX_SPI1_Init+0xa8>)
 800166a:	4a29      	ldr	r2, [pc, #164]	; (8001710 <MX_SPI1_Init+0xac>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <MX_SPI1_Init+0xa8>)
 8001670:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_SPI1_Init+0xa8>)
 8001678:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800167c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <MX_SPI1_Init+0xa8>)
 8001680:	220f      	movs	r2, #15
 8001682:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_SPI1_Init+0xa8>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_SPI1_Init+0xa8>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_SPI1_Init+0xa8>)
 8001692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001696:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_SPI1_Init+0xa8>)
 800169a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800169e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_SPI1_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_SPI1_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_SPI1_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_SPI1_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_SPI1_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_SPI1_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_SPI1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_SPI1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_SPI1_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_SPI1_Init+0xa8>)
 80016f8:	f00b fa80 	bl	800cbfc <HAL_SPI_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001702:	f001 f839 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	240003d8 	.word	0x240003d8
 8001710:	40013000 	.word	0x40013000

08001714 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <MX_SPI2_Init+0xa8>)
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <MX_SPI2_Init+0xac>)
 800171c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001720:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001724:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001728:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800172c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001730:	220f      	movs	r2, #15
 8001732:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_SPI2_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001742:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001746:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_SPI2_Init+0xa8>)
 800174a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800174e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001758:	2200      	movs	r2, #0
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI2_Init+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI2_Init+0xa8>)
 800176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI2_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI2_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI2_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_SPI2_Init+0xa8>)
 80017a8:	f00b fa28 	bl	800cbfc <HAL_SPI_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017b2:	f000 ffe1 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	24000460 	.word	0x24000460
 80017c0:	40003800 	.word	0x40003800

080017c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09a      	sub	sp, #104	; 0x68
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	222c      	movs	r2, #44	; 0x2c
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f012 ffe4 	bl	80147cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001804:	4b44      	ldr	r3, [pc, #272]	; (8001918 <MX_TIM1_Init+0x154>)
 8001806:	4a45      	ldr	r2, [pc, #276]	; (800191c <MX_TIM1_Init+0x158>)
 8001808:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <MX_TIM1_Init+0x154>)
 800180c:	22ef      	movs	r2, #239	; 0xef
 800180e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b41      	ldr	r3, [pc, #260]	; (8001918 <MX_TIM1_Init+0x154>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001816:	4b40      	ldr	r3, [pc, #256]	; (8001918 <MX_TIM1_Init+0x154>)
 8001818:	f24f 4223 	movw	r2, #62499	; 0xf423
 800181c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <MX_TIM1_Init+0x154>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <MX_TIM1_Init+0x154>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <MX_TIM1_Init+0x154>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001830:	4839      	ldr	r0, [pc, #228]	; (8001918 <MX_TIM1_Init+0x154>)
 8001832:	f00b fb22 	bl	800ce7a <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800183c:	f000 ff9c 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001846:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800184a:	4619      	mov	r1, r3
 800184c:	4832      	ldr	r0, [pc, #200]	; (8001918 <MX_TIM1_Init+0x154>)
 800184e:	f00c f961 	bl	800db14 <HAL_TIM_ConfigClockSource>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001858:	f000 ff8e 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800185c:	482e      	ldr	r0, [pc, #184]	; (8001918 <MX_TIM1_Init+0x154>)
 800185e:	f00b fdcd 	bl	800d3fc <HAL_TIM_PWM_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001868:	f000 ff86 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001878:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800187c:	4619      	mov	r1, r3
 800187e:	4826      	ldr	r0, [pc, #152]	; (8001918 <MX_TIM1_Init+0x154>)
 8001880:	f00c fe9e 	bl	800e5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800188a:	f000 ff75 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001892:	f240 13df 	movw	r3, #479	; 0x1df
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b0:	2200      	movs	r2, #0
 80018b2:	4619      	mov	r1, r3
 80018b4:	4818      	ldr	r0, [pc, #96]	; (8001918 <MX_TIM1_Init+0x154>)
 80018b6:	f00c f819 	bl	800d8ec <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018c0:	f000 ff5a 	bl	8002778 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM1_Init+0x154>)
 80018fa:	f00c feef 	bl	800e6dc <HAL_TIMEx_ConfigBreakDeadTime>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001904:	f000 ff38 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM1_Init+0x154>)
 800190a:	f001 fac3 	bl	8002e94 <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3768      	adds	r7, #104	; 0x68
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	240004e8 	.word	0x240004e8
 800191c:	40010000 	.word	0x40010000

08001920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08e      	sub	sp, #56	; 0x38
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <MX_TIM2_Init+0xe8>)
 8001954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001958:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <MX_TIM2_Init+0xe8>)
 800195c:	22ef      	movs	r2, #239	; 0xef
 800195e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <MX_TIM2_Init+0xe8>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <MX_TIM2_Init+0xe8>)
 8001968:	f640 4234 	movw	r2, #3124	; 0xc34
 800196c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MX_TIM2_Init+0xe8>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_TIM2_Init+0xe8>)
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800197a:	4823      	ldr	r0, [pc, #140]	; (8001a08 <MX_TIM2_Init+0xe8>)
 800197c:	f00b fa7d 	bl	800ce7a <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001986:	f000 fef7 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001994:	4619      	mov	r1, r3
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <MX_TIM2_Init+0xe8>)
 8001998:	f00c f8bc 	bl	800db14 <HAL_TIM_ConfigClockSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019a2:	f000 fee9 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a6:	4818      	ldr	r0, [pc, #96]	; (8001a08 <MX_TIM2_Init+0xe8>)
 80019a8:	f00b fd28 	bl	800d3fc <HAL_TIM_PWM_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019b2:	f000 fee1 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019b6:	2320      	movs	r3, #32
 80019b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4810      	ldr	r0, [pc, #64]	; (8001a08 <MX_TIM2_Init+0xe8>)
 80019c6:	f00c fdfb 	bl	800e5c0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019d0:	f000 fed2 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d4:	2360      	movs	r3, #96	; 0x60
 80019d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	220c      	movs	r2, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM2_Init+0xe8>)
 80019ec:	f00b ff7e 	bl	800d8ec <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019f6:	f000 febf 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM2_Init+0xe8>)
 80019fc:	f001 fa4a 	bl	8002e94 <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3738      	adds	r7, #56	; 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	24000534 	.word	0x24000534

08001a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <MX_TIM3_Init+0x98>)
 8001a2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a32:	22ef      	movs	r2, #239	; 0xef
 8001a34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a52:	f00b fa12 	bl	800ce7a <HAL_TIM_Base_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a5c:	f000 fe8c 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a6e:	f00c f851 	bl	800db14 <HAL_TIM_ConfigClockSource>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a78:	f000 fe7e 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_TIM3_Init+0x94>)
 8001a8a:	f00c fd99 	bl	800e5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a94:	f000 fe70 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	24000580 	.word	0x24000580
 8001aa4:	40000400 	.word	0x40000400

08001aa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <MX_USART1_UART_Init+0x94>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ab4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001ab8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001af2:	f00c fe8f 	bl	800e814 <HAL_UART_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001afc:	f000 fe3c 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b00:	2100      	movs	r1, #0
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001b04:	f00f fab1 	bl	801106a <HAL_UARTEx_SetTxFifoThreshold>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b0e:	f000 fe33 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4808      	ldr	r0, [pc, #32]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001b16:	f00f fae6 	bl	80110e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b20:	f000 fe2a 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001b26:	f00f fa67 	bl	8010ff8 <HAL_UARTEx_DisableFifoMode>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b30:	f000 fe22 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	240005cc 	.word	0x240005cc
 8001b3c:	40011000 	.word	0x40011000

08001b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_DMA_Init+0x5c>)
 8001b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <MX_DMA_Init+0x5c>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_DMA_Init+0x5c>)
 8001b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2105      	movs	r1, #5
 8001b68:	200b      	movs	r0, #11
 8001b6a:	f003 fa2b 	bl	8004fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b6e:	200b      	movs	r0, #11
 8001b70:	f003 fa42 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2105      	movs	r1, #5
 8001b78:	200c      	movs	r0, #12
 8001b7a:	f003 fa23 	bl	8004fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b7e:	200c      	movs	r0, #12
 8001b80:	f003 fa3a 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2105      	movs	r1, #5
 8001b88:	2010      	movs	r0, #16
 8001b8a:	f003 fa1b 	bl	8004fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b8e:	2010      	movs	r0, #16
 8001b90:	f003 fa32 	bl	8004ff8 <HAL_NVIC_EnableIRQ>

}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	58024400 	.word	0x58024400

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a44      	ldr	r2, [pc, #272]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a3d      	ldr	r2, [pc, #244]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	4a35      	ldr	r2, [pc, #212]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c02:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a2e      	ldr	r2, [pc, #184]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2e:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <MX_GPIO_Init+0x130>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <MX_GPIO_Init+0x134>)
 8001c54:	f006 fde8 	bl	8008828 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2164      	movs	r1, #100	; 0x64
 8001c5c:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <MX_GPIO_Init+0x138>)
 8001c5e:	f006 fde3 	bl	8008828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c68:	481c      	ldr	r0, [pc, #112]	; (8001cdc <MX_GPIO_Init+0x13c>)
 8001c6a:	f006 fddd 	bl	8008828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c6e:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4813      	ldr	r0, [pc, #76]	; (8001cd4 <MX_GPIO_Init+0x134>)
 8001c88:	f006 fc06 	bl	8008498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c8c:	2364      	movs	r3, #100	; 0x64
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_GPIO_Init+0x138>)
 8001ca4:	f006 fbf8 	bl	8008498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4806      	ldr	r0, [pc, #24]	; (8001cdc <MX_GPIO_Init+0x13c>)
 8001cc2:	f006 fbe9 	bl	8008498 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	58020800 	.word	0x58020800
 8001cd8:	58020400 	.word	0x58020400
 8001cdc:	58020c00 	.word	0x58020c00

08001ce0 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b090      	sub	sp, #64	; 0x40
 8001ce4:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001cea:	f107 011c 	add.w	r1, r7, #28
 8001cee:	2364      	movs	r3, #100	; 0x64
 8001cf0:	2209      	movs	r2, #9
 8001cf2:	4840      	ldr	r0, [pc, #256]	; (8001df4 <handshake+0x114>)
 8001cf4:	f00c fe6c 	bl	800e9d0 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001cf8:	7f3b      	ldrb	r3, [r7, #28]
 8001cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d1f1      	bne.n	8001cea <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001d06:	7f7b      	ldrb	r3, [r7, #29]
 8001d08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001d0c:	7fbb      	ldrb	r3, [r7, #30]
 8001d0e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001d12:	7ffb      	ldrb	r3, [r7, #31]
 8001d14:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001d18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001d20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001d28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001d44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d48:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001d4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d4e:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001d50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d54:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001d56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d5a:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001d5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001d60:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001d62:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d66:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001d68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d6a:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4820      	ldr	r0, [pc, #128]	; (8001df8 <handshake+0x118>)
 8001d76:	f00a fd9b 	bl	800c8b0 <HAL_RTC_SetDate>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001d80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <handshake+0xac>
	{
		Error_Handler();
 8001d88:	f000 fcf6 	bl	8002778 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4619      	mov	r1, r3
 8001d92:	4819      	ldr	r0, [pc, #100]	; (8001df8 <handshake+0x118>)
 8001d94:	f00a fc92 	bl	800c6bc <HAL_RTC_SetTime>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001d9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <handshake+0xca>
	{
		Error_Handler();
 8001da6:	f000 fce7 	bl	8002778 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001daa:	23fa      	movs	r3, #250	; 0xfa
 8001dac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dcc:	e009      	b.n	8001de2 <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001dce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001dd2:	2364      	movs	r3, #100	; 0x64
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	4807      	ldr	r0, [pc, #28]	; (8001df4 <handshake+0x114>)
 8001dd8:	f00c fd6c 	bl	800e8b4 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dde:	3301      	adds	r3, #1
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbf1      	blt.n	8001dce <handshake+0xee>
	}

	return 1;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3740      	adds	r7, #64	; 0x40
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	240005cc 	.word	0x240005cc
 8001df8:	240003b4 	.word	0x240003b4

08001dfc <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8001e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e04:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e0a:	210c      	movs	r1, #12
 8001e0c:	4818      	ldr	r0, [pc, #96]	; (8001e70 <system_setup+0x74>)
 8001e0e:	f00b fb57 	bl	800d4c0 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001e12:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e1a:	4816      	ldr	r0, [pc, #88]	; (8001e74 <system_setup+0x78>)
 8001e1c:	f002 fed8 	bl	8004bd0 <HAL_ADCEx_Calibration_Start>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001e26:	f000 fca7 	bl	8002778 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001e2a:	220b      	movs	r2, #11
 8001e2c:	4912      	ldr	r1, [pc, #72]	; (8001e78 <system_setup+0x7c>)
 8001e2e:	4811      	ldr	r0, [pc, #68]	; (8001e74 <system_setup+0x78>)
 8001e30:	f001 ffac 	bl	8003d8c <HAL_ADC_Start_DMA>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e3a:	f000 fc9d 	bl	8002778 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001e3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <system_setup+0x80>)
 8001e48:	f002 fec2 	bl	8004bd0 <HAL_ADCEx_Calibration_Start>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001e52:	f000 fc91 	bl	8002778 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001e56:	2204      	movs	r2, #4
 8001e58:	4909      	ldr	r1, [pc, #36]	; (8001e80 <system_setup+0x84>)
 8001e5a:	4808      	ldr	r0, [pc, #32]	; (8001e7c <system_setup+0x80>)
 8001e5c:	f001 ff96 	bl	8003d8c <HAL_ADC_Start_DMA>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e66:	f000 fc87 	bl	8002778 <Error_Handler>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	24000534 	.word	0x24000534
 8001e74:	2400011c 	.word	0x2400011c
 8001e78:	24000bc0 	.word	0x24000bc0
 8001e7c:	24000180 	.word	0x24000180
 8001e80:	24000be0 	.word	0x24000be0

08001e84 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	2200      	movs	r2, #0
 8001e92:	4619      	mov	r1, r3
 8001e94:	481d      	ldr	r0, [pc, #116]	; (8001f0c <getTimestamp+0x88>)
 8001e96:	f00a fcaf 	bl	800c7f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <getTimestamp+0x88>)
 8001ea4:	f00a fd8c 	bl	800c9c0 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eae:	fb03 f202 	mul.w	r2, r3, r2
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <getTimestamp+0x88>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	7b7a      	ldrb	r2, [r7, #13]
 8001ecc:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	7bba      	ldrb	r2, [r7, #14]
 8001ed4:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3303      	adds	r3, #3
 8001eda:	7c3a      	ldrb	r2, [r7, #16]
 8001edc:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	7c7a      	ldrb	r2, [r7, #17]
 8001ee4:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3305      	adds	r3, #5
 8001eea:	7cba      	ldrb	r2, [r7, #18]
 8001eec:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	0a1a      	lsrs	r2, r3, #8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3307      	adds	r3, #7
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]

}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	240003b4 	.word	0x240003b4

08001f10 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001f16:	bf00      	nop
 8001f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1c:	483c      	ldr	r0, [pc, #240]	; (8002010 <sample_pmt+0x100>)
 8001f1e:	f006 fc6b 	bl	80087f8 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f7      	bne.n	8001f18 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001f28:	200e      	movs	r0, #14
 8001f2a:	f012 fc31 	bl	8014790 <malloc>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001f32:	2002      	movs	r0, #2
 8001f34:	f012 fc2c 	bl	8014790 <malloc>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001f3c:	2008      	movs	r0, #8
 8001f3e:	f012 fc27 	bl	8014790 <malloc>
 8001f42:	4603      	mov	r3, r0
 8001f44:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff9c 	bl	8001e84 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	220e      	movs	r2, #14
 8001f50:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3301      	adds	r3, #1
 8001f56:	220d      	movs	r2, #13
 8001f58:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	22bb      	movs	r2, #187	; 0xbb
 8001f5e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	22bb      	movs	r2, #187	; 0xbb
 8001f66:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <sample_pmt+0x104>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3302      	adds	r3, #2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001f78:	4b26      	ldr	r3, [pc, #152]	; (8002014 <sample_pmt+0x104>)
 8001f7a:	881a      	ldrh	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3303      	adds	r3, #3
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3304      	adds	r3, #4
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	7812      	ldrb	r2, [r2, #0]
 8001f8c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3305      	adds	r3, #5
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	7852      	ldrb	r2, [r2, #1]
 8001f96:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3306      	adds	r3, #6
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3307      	adds	r3, #7
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	7852      	ldrb	r2, [r2, #1]
 8001faa:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	7892      	ldrb	r2, [r2, #2]
 8001fb4:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3309      	adds	r3, #9
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	78d2      	ldrb	r2, [r2, #3]
 8001fbe:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	330a      	adds	r3, #10
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	7912      	ldrb	r2, [r2, #4]
 8001fc8:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	330b      	adds	r3, #11
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	7952      	ldrb	r2, [r2, #5]
 8001fd2:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	7992      	ldrb	r2, [r2, #6]
 8001fdc:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	330d      	adds	r3, #13
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	79d2      	ldrb	r2, [r2, #7]
 8001fe6:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 1);
 8001fe8:	2301      	movs	r3, #1
 8001fea:	220e      	movs	r2, #14
 8001fec:	68f9      	ldr	r1, [r7, #12]
 8001fee:	480a      	ldr	r0, [pc, #40]	; (8002018 <sample_pmt+0x108>)
 8001ff0:	f00c fc60 	bl	800e8b4 <HAL_UART_Transmit>
	free(buffer);
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f012 fbd3 	bl	80147a0 <free>
	free(pmt_spi);
 8001ffa:	68b8      	ldr	r0, [r7, #8]
 8001ffc:	f012 fbd0 	bl	80147a0 <free>
	free(timestamp);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f012 fbcd 	bl	80147a0 <free>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	58020000 	.word	0x58020000
 8002014:	24000b30 	.word	0x24000b30
 8002018:	240005cc 	.word	0x240005cc

0800201c <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002022:	bf00      	nop
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4852      	ldr	r0, [pc, #328]	; (8002174 <sample_erpa+0x158>)
 800202a:	f006 fbe5 	bl	80087f8 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f7      	bne.n	8002024 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002034:	2012      	movs	r0, #18
 8002036:	f012 fbab 	bl	8014790 <malloc>
 800203a:	4603      	mov	r3, r0
 800203c:	60fb      	str	r3, [r7, #12]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800203e:	2002      	movs	r0, #2
 8002040:	f012 fba6 	bl	8014790 <malloc>
 8002044:	4603      	mov	r3, r0
 8002046:	60bb      	str	r3, [r7, #8]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8002048:	2004      	movs	r0, #4
 800204a:	f012 fba1 	bl	8014790 <malloc>
 800204e:	4603      	mov	r3, r0
 8002050:	607b      	str	r3, [r7, #4]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002052:	2008      	movs	r0, #8
 8002054:	f012 fb9c 	bl	8014790 <malloc>
 8002058:	4603      	mov	r3, r0
 800205a:	603b      	str	r3, [r7, #0]
	getTimestamp(timestamp);
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	f7ff ff11 	bl	8001e84 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	220e      	movs	r2, #14
 8002066:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	3301      	adds	r3, #1
 800206c:	220d      	movs	r2, #13
 800206e:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	22ee      	movs	r2, #238	; 0xee
 8002074:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3302      	adds	r3, #2
 800207a:	22dd      	movs	r2, #221	; 0xdd
 800207c:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	22aa      	movs	r2, #170	; 0xaa
 8002082:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	3301      	adds	r3, #1
 8002088:	22aa      	movs	r2, #170	; 0xaa
 800208a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <sample_erpa+0x15c>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3302      	adds	r3, #2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <sample_erpa+0x15c>)
 800209e:	881a      	ldrh	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3303      	adds	r3, #3
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3304      	adds	r3, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	881a      	ldrh	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3305      	adds	r3, #5
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3302      	adds	r3, #2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3306      	adds	r3, #6
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3302      	adds	r3, #2
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3307      	adds	r3, #7
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3308      	adds	r3, #8
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3309      	adds	r3, #9
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	7852      	ldrb	r2, [r2, #1]
 80020f6:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	330a      	adds	r3, #10
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	330b      	adds	r3, #11
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	7852      	ldrb	r2, [r2, #1]
 800210a:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	330c      	adds	r3, #12
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	7892      	ldrb	r2, [r2, #2]
 8002114:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	330d      	adds	r3, #13
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	78d2      	ldrb	r2, [r2, #3]
 800211e:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	330e      	adds	r3, #14
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	7912      	ldrb	r2, [r2, #4]
 8002128:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	330f      	adds	r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	7952      	ldrb	r2, [r2, #5]
 8002132:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3310      	adds	r3, #16
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	7992      	ldrb	r2, [r2, #6]
 800213c:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3311      	adds	r3, #17
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	79d2      	ldrb	r2, [r2, #7]
 8002146:	701a      	strb	r2, [r3, #0]



	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 1);
 8002148:	2301      	movs	r3, #1
 800214a:	2212      	movs	r2, #18
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <sample_erpa+0x160>)
 8002150:	f00c fbb0 	bl	800e8b4 <HAL_UART_Transmit>
	free(buffer);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f012 fb23 	bl	80147a0 <free>
	free(erpa_spi);
 800215a:	68b8      	ldr	r0, [r7, #8]
 800215c:	f012 fb20 	bl	80147a0 <free>
	free(erpa_adc);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f012 fb1d 	bl	80147a0 <free>
	free(timestamp);
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	f012 fb1a 	bl	80147a0 <free>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	58020400 	.word	0x58020400
 8002178:	24000b32 	.word	0x24000b32
 800217c:	240005cc 	.word	0x240005cc

08002180 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002186:	202e      	movs	r0, #46	; 0x2e
 8002188:	f012 fb02 	bl	8014790 <malloc>
 800218c:	4603      	mov	r3, r0
 800218e:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002190:	2008      	movs	r0, #8
 8002192:	f012 fafd 	bl	8014790 <malloc>
 8002196:	4603      	mov	r3, r0
 8002198:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800219a:	2012      	movs	r0, #18
 800219c:	f012 faf8 	bl	8014790 <malloc>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80021a4:	2008      	movs	r0, #8
 80021a6:	f012 faf3 	bl	8014790 <malloc>
 80021aa:	4603      	mov	r3, r0
 80021ac:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80021ae:	2008      	movs	r0, #8
 80021b0:	f012 faee 	bl	8014790 <malloc>
 80021b4:	4603      	mov	r3, r0
 80021b6:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fe63 	bl	8001e84 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2211      	movs	r2, #17
 80021c2:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	3302      	adds	r3, #2
 80021c8:	2212      	movs	r2, #18
 80021ca:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	3304      	adds	r3, #4
 80021d0:	2213      	movs	r2, #19
 80021d2:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	3306      	adds	r3, #6
 80021d8:	2214      	movs	r2, #20
 80021da:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	22a0      	movs	r2, #160	; 0xa0
 80021e0:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3302      	adds	r3, #2
 80021e6:	22a1      	movs	r2, #161	; 0xa1
 80021e8:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3304      	adds	r3, #4
 80021ee:	22a2      	movs	r2, #162	; 0xa2
 80021f0:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3306      	adds	r3, #6
 80021f6:	22a3      	movs	r2, #163	; 0xa3
 80021f8:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3308      	adds	r3, #8
 80021fe:	22a4      	movs	r2, #164	; 0xa4
 8002200:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	330a      	adds	r3, #10
 8002206:	22a5      	movs	r2, #165	; 0xa5
 8002208:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	330c      	adds	r3, #12
 800220e:	22a6      	movs	r2, #166	; 0xa6
 8002210:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	330e      	adds	r3, #14
 8002216:	22a7      	movs	r2, #167	; 0xa7
 8002218:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3310      	adds	r3, #16
 800221e:	22a8      	movs	r2, #168	; 0xa8
 8002220:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	22b0      	movs	r2, #176	; 0xb0
 8002226:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3302      	adds	r3, #2
 800222c:	22b1      	movs	r2, #177	; 0xb1
 800222e:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3304      	adds	r3, #4
 8002234:	22b2      	movs	r2, #178	; 0xb2
 8002236:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	3306      	adds	r3, #6
 800223c:	22b3      	movs	r2, #179	; 0xb3
 800223e:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	22cc      	movs	r2, #204	; 0xcc
 8002244:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	22cc      	movs	r2, #204	; 0xcc
 800224c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800224e:	4ba6      	ldr	r3, [pc, #664]	; (80024e8 <sample_hk+0x368>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	b29a      	uxth	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3302      	adds	r3, #2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800225e:	4ba2      	ldr	r3, [pc, #648]	; (80024e8 <sample_hk+0x368>)
 8002260:	881a      	ldrh	r2, [r3, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3303      	adds	r3, #3
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3302      	adds	r3, #2
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b29a      	uxth	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3304      	adds	r3, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3302      	adds	r3, #2
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3305      	adds	r3, #5
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	b29a      	uxth	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3306      	adds	r3, #6
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3307      	adds	r3, #7
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ac:	121a      	asrs	r2, r3, #8
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3308      	adds	r3, #8
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3309      	adds	r3, #9
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	3302      	adds	r3, #2
 80022c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022cc:	121a      	asrs	r2, r3, #8
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	330a      	adds	r3, #10
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3302      	adds	r3, #2
 80022da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	330b      	adds	r3, #11
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	3304      	adds	r3, #4
 80022ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ee:	121a      	asrs	r2, r3, #8
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	330c      	adds	r3, #12
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	3304      	adds	r3, #4
 80022fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	330d      	adds	r3, #13
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	3306      	adds	r3, #6
 800230c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002310:	121a      	asrs	r2, r3, #8
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	330e      	adds	r3, #14
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	3306      	adds	r3, #6
 800231e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	330f      	adds	r3, #15
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29a      	uxth	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3310      	adds	r3, #16
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	881a      	ldrh	r2, [r3, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3311      	adds	r3, #17
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3302      	adds	r3, #2
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29a      	uxth	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3312      	adds	r3, #18
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3302      	adds	r3, #2
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3313      	adds	r3, #19
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3304      	adds	r3, #4
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	b29a      	uxth	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3314      	adds	r3, #20
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3304      	adds	r3, #4
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3315      	adds	r3, #21
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3306      	adds	r3, #6
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29a      	uxth	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3316      	adds	r3, #22
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	3306      	adds	r3, #6
 800239c:	881a      	ldrh	r2, [r3, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3317      	adds	r3, #23
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	330c      	adds	r3, #12
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3318      	adds	r3, #24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	330c      	adds	r3, #12
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3319      	adds	r3, #25
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3306      	adds	r3, #6
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	331a      	adds	r3, #26
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3306      	adds	r3, #6
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	331b      	adds	r3, #27
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3304      	adds	r3, #4
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	331c      	adds	r3, #28
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3304      	adds	r3, #4
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	331d      	adds	r3, #29
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	330e      	adds	r3, #14
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29a      	uxth	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	331e      	adds	r3, #30
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	330e      	adds	r3, #14
 800241c:	881a      	ldrh	r2, [r3, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	331f      	adds	r3, #31
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3310      	adds	r3, #16
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b29a      	uxth	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3320      	adds	r3, #32
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3310      	adds	r3, #16
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3321      	adds	r3, #33	; 0x21
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3308      	adds	r3, #8
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	b29a      	uxth	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3322      	adds	r3, #34	; 0x22
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3308      	adds	r3, #8
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3323      	adds	r3, #35	; 0x23
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	330a      	adds	r3, #10
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	b29a      	uxth	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3324      	adds	r3, #36	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	330a      	adds	r3, #10
 800247c:	881a      	ldrh	r2, [r3, #0]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3325      	adds	r3, #37	; 0x25
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3326      	adds	r3, #38	; 0x26
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3327      	adds	r3, #39	; 0x27
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	7852      	ldrb	r2, [r2, #1]
 8002498:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3328      	adds	r3, #40	; 0x28
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	7892      	ldrb	r2, [r2, #2]
 80024a2:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3329      	adds	r3, #41	; 0x29
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	78d2      	ldrb	r2, [r2, #3]
 80024ac:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	332a      	adds	r3, #42	; 0x2a
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	7912      	ldrb	r2, [r2, #4]
 80024b6:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	332b      	adds	r3, #43	; 0x2b
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	7952      	ldrb	r2, [r2, #5]
 80024c0:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	332c      	adds	r3, #44	; 0x2c
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	7992      	ldrb	r2, [r2, #6]
 80024ca:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	332d      	adds	r3, #45	; 0x2d
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	79d2      	ldrb	r2, [r2, #7]
 80024d4:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 1);
 80024d6:	2301      	movs	r3, #1
 80024d8:	222e      	movs	r2, #46	; 0x2e
 80024da:	6979      	ldr	r1, [r7, #20]
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <sample_hk+0x36c>)
 80024de:	f00c f9e9 	bl	800e8b4 <HAL_UART_Transmit>
	free(buffer);
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	e004      	b.n	80024f0 <sample_hk+0x370>
 80024e6:	bf00      	nop
 80024e8:	24000b34 	.word	0x24000b34
 80024ec:	240005cc 	.word	0x240005cc
 80024f0:	f012 f956 	bl	80147a0 <free>
	free(hk_i2c);
 80024f4:	6938      	ldr	r0, [r7, #16]
 80024f6:	f012 f953 	bl	80147a0 <free>
	free(hk_adc1);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f012 f950 	bl	80147a0 <free>
	free(hk_adc3);
 8002500:	68b8      	ldr	r0, [r7, #8]
 8002502:	f012 f94d 	bl	80147a0 <free>
	free(timestamp);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f012 f94a 	bl	80147a0 <free>
}
 800250c:	bf00      	nop
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <PMT_init+0x38>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002524:	2200      	movs	r2, #0
 8002526:	2101      	movs	r1, #1
 8002528:	f00f f86a 	bl	8011600 <osEventFlagsWait>
		if(PMT_ON){
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <PMT_init+0x3c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <PMT_init+0x30>
			sample_pmt();
 8002534:	f7ff fcec 	bl	8001f10 <sample_pmt>
			pmt_seq++;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <PMT_init+0x40>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <PMT_init+0x40>)
 8002542:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002544:	f00e ff7c 	bl	8011440 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002548:	e7e8      	b.n	800251c <PMT_init+0x8>
 800254a:	bf00      	nop
 800254c:	24000b3c 	.word	0x24000b3c
 8002550:	24000b36 	.word	0x24000b36
 8002554:	24000b30 	.word	0x24000b30

08002558 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <ERPA_init+0x38>)
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002568:	2200      	movs	r2, #0
 800256a:	2102      	movs	r1, #2
 800256c:	f00f f848 	bl	8011600 <osEventFlagsWait>
		if (ERPA_ON)
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <ERPA_init+0x3c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <ERPA_init+0x30>
		{
			sample_erpa();
 8002578:	f7ff fd50 	bl	800201c <sample_erpa>
			erpa_seq++;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <ERPA_init+0x40>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <ERPA_init+0x40>)
 8002586:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002588:	f00e ff5a 	bl	8011440 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800258c:	e7e8      	b.n	8002560 <ERPA_init+0x8>
 800258e:	bf00      	nop
 8002590:	24000b3c 	.word	0x24000b3c
 8002594:	24000b37 	.word	0x24000b37
 8002598:	24000b32 	.word	0x24000b32

0800259c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HK_init+0x38>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ac:	2200      	movs	r2, #0
 80025ae:	2104      	movs	r1, #4
 80025b0:	f00f f826 	bl	8011600 <osEventFlagsWait>
		if(HK_ON)
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HK_init+0x3c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HK_init+0x30>
		{
			sample_hk();
 80025bc:	f7ff fde0 	bl	8002180 <sample_hk>
			hk_seq++;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HK_init+0x40>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <HK_init+0x40>)
 80025ca:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80025cc:	f00e ff38 	bl	8011440 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025d0:	e7e8      	b.n	80025a4 <HK_init+0x8>
 80025d2:	bf00      	nop
 80025d4:	24000b3c 	.word	0x24000b3c
 80025d8:	24000b38 	.word	0x24000b38
 80025dc:	24000b34 	.word	0x24000b34

080025e0 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80025e8:	2201      	movs	r2, #1
 80025ea:	4904      	ldr	r1, [pc, #16]	; (80025fc <UART_RX_init+0x1c>)
 80025ec:	4804      	ldr	r0, [pc, #16]	; (8002600 <UART_RX_init+0x20>)
 80025ee:	f00c fab7 	bl	800eb60 <HAL_UART_Receive_IT>
		osDelay(5);
 80025f2:	2005      	movs	r0, #5
 80025f4:	f00e ff65 	bl	80114c2 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80025f8:	e7f6      	b.n	80025e8 <UART_RX_init+0x8>
 80025fa:	bf00      	nop
 80025fc:	24000b40 	.word	0x24000b40
 8002600:	240005cc 	.word	0x240005cc

08002604 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <GPIO_on_init+0x9c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f00e ff35 	bl	8011480 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <GPIO_on_init+0xa0>)
 8002618:	2104      	movs	r1, #4
 800261a:	2201      	movs	r2, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f006 f903 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 8002622:	2064      	movs	r0, #100	; 0x64
 8002624:	f00e ff4d 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <GPIO_on_init+0xa0>)
 800262a:	2120      	movs	r1, #32
 800262c:	2201      	movs	r2, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f006 f8fa 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 8002634:	2064      	movs	r0, #100	; 0x64
 8002636:	f00e ff44 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <GPIO_on_init+0xa4>)
 800263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002640:	2201      	movs	r2, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f006 f8f0 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 8002648:	2064      	movs	r0, #100	; 0x64
 800264a:	f00e ff3a 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <GPIO_on_init+0xa4>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	2201      	movs	r2, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f006 f8e7 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	f00e ff31 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <GPIO_on_init+0xa4>)
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	2201      	movs	r2, #1
 8002666:	4618      	mov	r0, r3
 8002668:	f006 f8de 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f00e ff28 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <GPIO_on_init+0xa4>)
 8002674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002678:	2201      	movs	r2, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f006 f8d4 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	f00e ff1e 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <GPIO_on_init+0xa4>)
 8002688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800268c:	2201      	movs	r2, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f006 f8ca 	bl	8008828 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002694:	4b02      	ldr	r3, [pc, #8]	; (80026a0 <GPIO_on_init+0x9c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f00e fef1 	bl	8011480 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800269e:	e7ba      	b.n	8002616 <GPIO_on_init+0x12>
 80026a0:	24000670 	.word	0x24000670
 80026a4:	58020400 	.word	0x58020400
 80026a8:	58020800 	.word	0x58020800

080026ac <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <GPIO_off_init+0x9c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00e fee1 	bl	8011480 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <GPIO_off_init+0xa0>)
 80026c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c4:	2200      	movs	r2, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f006 f8ae 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 80026cc:	2064      	movs	r0, #100	; 0x64
 80026ce:	f00e fef8 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <GPIO_off_init+0xa0>)
 80026d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d8:	2200      	movs	r2, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f006 f8a4 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 80026e0:	2064      	movs	r0, #100	; 0x64
 80026e2:	f00e feee 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <GPIO_off_init+0xa0>)
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	2200      	movs	r2, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f006 f89b 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 80026f2:	2064      	movs	r0, #100	; 0x64
 80026f4:	f00e fee5 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <GPIO_off_init+0xa0>)
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	2200      	movs	r2, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f006 f892 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 8002704:	2064      	movs	r0, #100	; 0x64
 8002706:	f00e fedc 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <GPIO_off_init+0xa0>)
 800270c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002710:	2200      	movs	r2, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f006 f888 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f00e fed2 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <GPIO_off_init+0xa4>)
 8002720:	2120      	movs	r1, #32
 8002722:	2200      	movs	r2, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f006 f87f 	bl	8008828 <HAL_GPIO_WritePin>
		osDelay(100);
 800272a:	2064      	movs	r0, #100	; 0x64
 800272c:	f00e fec9 	bl	80114c2 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <GPIO_off_init+0xa4>)
 8002732:	2104      	movs	r1, #4
 8002734:	2200      	movs	r2, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f006 f876 	bl	8008828 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <GPIO_off_init+0x9c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f00e fe9d 	bl	8011480 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002746:	e7ba      	b.n	80026be <GPIO_off_init+0x12>
 8002748:	240008d0 	.word	0x240008d0
 800274c:	58020800 	.word	0x58020800
 8002750:	58020400 	.word	0x58020400

08002754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002766:	f000 ff1f 	bl	80035a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40001000 	.word	0x40001000

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800277c:	b672      	cpsid	i
}
 800277e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002780:	e7fe      	b.n	8002780 <Error_Handler+0x8>
	...

08002784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_MspInit+0x38>)
 800278c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_MspInit+0x38>)
 8002792:	f043 0302 	orr.w	r3, r3, #2
 8002796:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_MspInit+0x38>)
 800279c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	210f      	movs	r1, #15
 80027ac:	f06f 0001 	mvn.w	r0, #1
 80027b0:	f002 fc08 	bl	8004fc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	58024400 	.word	0x58024400

080027c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	; 0x38
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a7b      	ldr	r2, [pc, #492]	; (80029cc <HAL_ADC_MspInit+0x20c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 8091 	bne.w	8002906 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027e4:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 80027e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ea:	4a79      	ldr	r2, [pc, #484]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 80027ec:	f043 0320 	orr.w	r3, r3, #32
 80027f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027f4:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 80027f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002808:	4a71      	ldr	r2, [pc, #452]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002820:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002830:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002844:	4a62      	ldr	r2, [pc, #392]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284e:	4b60      	ldr	r3, [pc, #384]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800285c:	2333      	movs	r3, #51	; 0x33
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002860:	2303      	movs	r3, #3
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286c:	4619      	mov	r1, r3
 800286e:	4859      	ldr	r0, [pc, #356]	; (80029d4 <HAL_ADC_MspInit+0x214>)
 8002870:	f005 fe12 	bl	8008498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002874:	23ce      	movs	r3, #206	; 0xce
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002878:	2303      	movs	r3, #3
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002884:	4619      	mov	r1, r3
 8002886:	4854      	ldr	r0, [pc, #336]	; (80029d8 <HAL_ADC_MspInit+0x218>)
 8002888:	f005 fe06 	bl	8008498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800288c:	2303      	movs	r3, #3
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002890:	2303      	movs	r3, #3
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	4619      	mov	r1, r3
 800289e:	484f      	ldr	r0, [pc, #316]	; (80029dc <HAL_ADC_MspInit+0x21c>)
 80028a0:	f005 fdfa 	bl	8008498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80028a4:	4b4e      	ldr	r3, [pc, #312]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028a6:	4a4f      	ldr	r2, [pc, #316]	; (80029e4 <HAL_ADC_MspInit+0x224>)
 80028a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80028aa:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028ac:	2209      	movs	r2, #9
 80028ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028bc:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028c4:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028cc:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028dc:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028de:	2200      	movs	r2, #0
 80028e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028e8:	483d      	ldr	r0, [pc, #244]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028ea:	f002 ff99 	bl	8005820 <HAL_DMA_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80028f4:	f7ff ff40 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a39      	ldr	r2, [pc, #228]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 80028fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80028fe:	4a38      	ldr	r2, [pc, #224]	; (80029e0 <HAL_ADC_MspInit+0x220>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002904:	e05e      	b.n	80029c4 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a37      	ldr	r2, [pc, #220]	; (80029e8 <HAL_ADC_MspInit+0x228>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d159      	bne.n	80029c4 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002910:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002916:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002934:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_ADC_MspInit+0x210>)
 8002940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800294c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002950:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002954:	f000 fe54 	bl	8003600 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002958:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800295c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002960:	f000 fe4e 	bl	8003600 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_ADC_MspInit+0x230>)
 8002968:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 800296c:	2273      	movs	r2, #115	; 0x73
 800296e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 8002978:	2200      	movs	r2, #0
 800297a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 800297e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002982:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 8002986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800298a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 800298e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002992:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 8002996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80029a8:	4810      	ldr	r0, [pc, #64]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 80029aa:	f002 ff39 	bl	8005820 <HAL_DMA_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80029b4:	f7ff fee0 	bl	8002778 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80029be:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_ADC_MspInit+0x22c>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029c4:	bf00      	nop
 80029c6:	3738      	adds	r7, #56	; 0x38
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40022000 	.word	0x40022000
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020800 	.word	0x58020800
 80029d8:	58020000 	.word	0x58020000
 80029dc:	58020400 	.word	0x58020400
 80029e0:	240001e4 	.word	0x240001e4
 80029e4:	40020010 	.word	0x40020010
 80029e8:	58026000 	.word	0x58026000
 80029ec:	2400025c 	.word	0x2400025c
 80029f0:	40020028 	.word	0x40020028

080029f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <HAL_DAC_MspInit+0xf0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d161      	bne.n	8002ada <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_DAC_MspInit+0xf4>)
 8002a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <HAL_DAC_MspInit+0xf4>)
 8002a1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a26:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_DAC_MspInit+0xf4>)
 8002a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a34:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <HAL_DAC_MspInit+0xf4>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ae8 <HAL_DAC_MspInit+0xf4>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_DAC_MspInit+0xf4>)
 8002a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a52:	2310      	movs	r3, #16
 8002a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a56:	2303      	movs	r3, #3
 8002a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	4821      	ldr	r0, [pc, #132]	; (8002aec <HAL_DAC_MspInit+0xf8>)
 8002a66:	f005 fd17 	bl	8008498 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a6c:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_DAC_MspInit+0x100>)
 8002a6e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a72:	2243      	movs	r2, #67	; 0x43
 8002a74:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a90:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a98:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002aae:	4810      	ldr	r0, [pc, #64]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002ab0:	f002 feb6 	bl	8005820 <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002aba:	f7ff fe5d 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_DAC_MspInit+0xfc>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2105      	movs	r1, #5
 8002ace:	2036      	movs	r0, #54	; 0x36
 8002ad0:	f002 fa78 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ad4:	2036      	movs	r0, #54	; 0x36
 8002ad6:	f002 fa8f 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40007400 	.word	0x40007400
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	58020000 	.word	0x58020000
 8002af0:	240002e8 	.word	0x240002e8
 8002af4:	40020088 	.word	0x40020088

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0ba      	sub	sp, #232	; 0xe8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	22c0      	movs	r2, #192	; 0xc0
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f011 fe57 	bl	80147cc <memset>
  if(hi2c->Instance==I2C1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_I2C_MspInit+0xc8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d146      	bne.n	8002bb6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b28:	f04f 0208 	mov.w	r2, #8
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f007 f83c 	bl	8009bbc <HAL_RCCEx_PeriphCLKConfig>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002b4a:	f7ff fe15 	bl	8002778 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_I2C_MspInit+0xcc>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_I2C_MspInit+0xcc>)
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b5e:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_I2C_MspInit+0xcc>)
 8002b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b74:	2312      	movs	r3, #18
 8002b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b86:	2304      	movs	r3, #4
 8002b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b90:	4619      	mov	r1, r3
 8002b92:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <HAL_I2C_MspInit+0xd0>)
 8002b94:	f005 fc80 	bl	8008498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_I2C_MspInit+0xcc>)
 8002b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_I2C_MspInit+0xcc>)
 8002ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_I2C_MspInit+0xcc>)
 8002baa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	37e8      	adds	r7, #232	; 0xe8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40005400 	.word	0x40005400
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	58020400 	.word	0x58020400

08002bcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b0b2      	sub	sp, #200	; 0xc8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	22c0      	movs	r2, #192	; 0xc0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f011 fdf5 	bl	80147cc <memset>
  if(hrtc->Instance==RTC)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_RTC_MspInit+0x5c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d119      	bne.n	8002c20 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	4618      	mov	r0, r3
 8002c06:	f006 ffd9 	bl	8009bbc <HAL_RCCEx_PeriphCLKConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002c10:	f7ff fdb2 	bl	8002778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RTC_MspInit+0x60>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_RTC_MspInit+0x60>)
 8002c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c20:	bf00      	nop
 8002c22:	37c8      	adds	r7, #200	; 0xc8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	58004000 	.word	0x58004000
 8002c2c:	58024400 	.word	0x58024400

08002c30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0bc      	sub	sp, #240	; 0xf0
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c48:	f107 0318 	add.w	r3, r7, #24
 8002c4c:	22c0      	movs	r2, #192	; 0xc0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f011 fdbb 	bl	80147cc <memset>
  if(hspi->Instance==SPI1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a4c      	ldr	r2, [pc, #304]	; (8002d8c <HAL_SPI_MspInit+0x15c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d145      	bne.n	8002cec <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c70:	f107 0318 	add.w	r3, r7, #24
 8002c74:	4618      	mov	r0, r3
 8002c76:	f006 ffa1 	bl	8009bbc <HAL_RCCEx_PeriphCLKConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002c80:	f7ff fd7a 	bl	8002778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c8a:	4a41      	ldr	r2, [pc, #260]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c94:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	4a39      	ldr	r2, [pc, #228]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002cc0:	2318      	movs	r3, #24
 8002cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cd8:	2305      	movs	r3, #5
 8002cda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	482b      	ldr	r0, [pc, #172]	; (8002d94 <HAL_SPI_MspInit+0x164>)
 8002ce6:	f005 fbd7 	bl	8008498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cea:	e04a      	b.n	8002d82 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_SPI_MspInit+0x168>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d145      	bne.n	8002d82 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002cf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d06:	f107 0318 	add.w	r3, r7, #24
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f006 ff56 	bl	8009bbc <HAL_RCCEx_PeriphCLKConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002d16:	f7ff fd2f 	bl	8002778 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d20:	4a1b      	ldr	r2, [pc, #108]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3e:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_SPI_MspInit+0x160>)
 8002d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d56:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d70:	2305      	movs	r3, #5
 8002d72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <HAL_SPI_MspInit+0x164>)
 8002d7e:	f005 fb8b 	bl	8008498 <HAL_GPIO_Init>
}
 8002d82:	bf00      	nop
 8002d84:	37f0      	adds	r7, #240	; 0xf0
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40013000 	.word	0x40013000
 8002d90:	58024400 	.word	0x58024400
 8002d94:	58020400 	.word	0x58020400
 8002d98:	40003800 	.word	0x40003800

08002d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a37      	ldr	r2, [pc, #220]	; (8002e88 <HAL_TIM_Base_MspInit+0xec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d12f      	bne.n	8002e0e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db4:	4a35      	ldr	r2, [pc, #212]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2105      	movs	r1, #5
 8002dd0:	2018      	movs	r0, #24
 8002dd2:	f002 f8f7 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002dd6:	2018      	movs	r0, #24
 8002dd8:	f002 f90e 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2105      	movs	r1, #5
 8002de0:	2019      	movs	r0, #25
 8002de2:	f002 f8ef 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002de6:	2019      	movs	r0, #25
 8002de8:	f002 f906 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2105      	movs	r1, #5
 8002df0:	201a      	movs	r0, #26
 8002df2:	f002 f8e7 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002df6:	201a      	movs	r0, #26
 8002df8:	f002 f8fe 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2105      	movs	r1, #5
 8002e00:	201b      	movs	r0, #27
 8002e02:	f002 f8df 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002e06:	201b      	movs	r0, #27
 8002e08:	f002 f8f6 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e0c:	e038      	b.n	8002e80 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e16:	d117      	bne.n	8002e48 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e18:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2105      	movs	r1, #5
 8002e3a:	201c      	movs	r0, #28
 8002e3c:	f002 f8c2 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e40:	201c      	movs	r0, #28
 8002e42:	f002 f8d9 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
}
 8002e46:	e01b      	b.n	8002e80 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <HAL_TIM_Base_MspInit+0xf4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d116      	bne.n	8002e80 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e58:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_TIM_Base_MspInit+0xf0>)
 8002e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2105      	movs	r1, #5
 8002e74:	201d      	movs	r0, #29
 8002e76:	f002 f8a5 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e7a:	201d      	movs	r0, #29
 8002e7c:	f002 f8bc 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	40000400 	.word	0x40000400

08002e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <HAL_TIM_MspPostInit+0xb8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d120      	bne.n	8002ef8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_TIM_MspPostInit+0xbc>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ebc:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <HAL_TIM_MspPostInit+0xbc>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_TIM_MspPostInit+0xbc>)
 8002ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4818      	ldr	r0, [pc, #96]	; (8002f54 <HAL_TIM_MspPostInit+0xc0>)
 8002ef2:	f005 fad1 	bl	8008498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ef6:	e024      	b.n	8002f42 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d11f      	bne.n	8002f42 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_TIM_MspPostInit+0xbc>)
 8002f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f08:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <HAL_TIM_MspPostInit+0xbc>)
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_TIM_MspPostInit+0xbc>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f32:	2301      	movs	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4806      	ldr	r0, [pc, #24]	; (8002f58 <HAL_TIM_MspPostInit+0xc4>)
 8002f3e:	f005 faab 	bl	8008498 <HAL_GPIO_Init>
}
 8002f42:	bf00      	nop
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	58024400 	.word	0x58024400
 8002f54:	58020000 	.word	0x58020000
 8002f58:	58020400 	.word	0x58020400

08002f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0ba      	sub	sp, #232	; 0xe8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	22c0      	movs	r2, #192	; 0xc0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f011 fc25 	bl	80147cc <memset>
  if(huart->Instance==USART1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_UART_MspInit+0xd8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d14e      	bne.n	800302a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f8c:	f04f 0201 	mov.w	r2, #1
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f9e:	f107 0310 	add.w	r3, r7, #16
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f006 fe0a 	bl	8009bbc <HAL_RCCEx_PeriphCLKConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fae:	f7ff fbe3 	bl	8002778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fb2:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_UART_MspInit+0xdc>)
 8002fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <HAL_UART_MspInit+0xdc>)
 8002fba:	f043 0310 	orr.w	r3, r3, #16
 8002fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_UART_MspInit+0xdc>)
 8002fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_UART_MspInit+0xdc>)
 8002fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_UART_MspInit+0xdc>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_UART_MspInit+0xdc>)
 8002fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003008:	2307      	movs	r3, #7
 800300a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003012:	4619      	mov	r1, r3
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <HAL_UART_MspInit+0xe0>)
 8003016:	f005 fa3f 	bl	8008498 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2105      	movs	r1, #5
 800301e:	2025      	movs	r0, #37	; 0x25
 8003020:	f001 ffd0 	bl	8004fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003024:	2025      	movs	r0, #37	; 0x25
 8003026:	f001 ffe7 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800302a:	bf00      	nop
 800302c:	37e8      	adds	r7, #232	; 0xe8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40011000 	.word	0x40011000
 8003038:	58024400 	.word	0x58024400
 800303c:	58020000 	.word	0x58020000

08003040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b090      	sub	sp, #64	; 0x40
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	d827      	bhi.n	800309e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800304e:	2200      	movs	r2, #0
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	2036      	movs	r0, #54	; 0x36
 8003054:	f001 ffb6 	bl	8004fc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003058:	2036      	movs	r0, #54	; 0x36
 800305a:	f001 ffcd 	bl	8004ff8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800305e:	4a29      	ldr	r2, [pc, #164]	; (8003104 <HAL_InitTick+0xc4>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_InitTick+0xc8>)
 8003066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800306a:	4a27      	ldr	r2, [pc, #156]	; (8003108 <HAL_InitTick+0xc8>)
 800306c:	f043 0310 	orr.w	r3, r3, #16
 8003070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_InitTick+0xc8>)
 8003076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003082:	f107 0210 	add.w	r2, r7, #16
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f006 fd53 	bl	8009b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <HAL_InitTick+0x6a>
 800309c:	e001      	b.n	80030a2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e02b      	b.n	80030fa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030a2:	f006 fd1d 	bl	8009ae0 <HAL_RCC_GetPCLK1Freq>
 80030a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80030a8:	e004      	b.n	80030b4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030aa:	f006 fd19 	bl	8009ae0 <HAL_RCC_GetPCLK1Freq>
 80030ae:	4603      	mov	r3, r0
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_InitTick+0xcc>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	3b01      	subs	r3, #1
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <HAL_InitTick+0xd0>)
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_InitTick+0xd4>)
 80030c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_InitTick+0xd0>)
 80030ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030d0:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <HAL_InitTick+0xd0>)
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_InitTick+0xd0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_InitTick+0xd0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80030e2:	480b      	ldr	r0, [pc, #44]	; (8003110 <HAL_InitTick+0xd0>)
 80030e4:	f009 fec9 	bl	800ce7a <HAL_TIM_Base_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030ee:	4808      	ldr	r0, [pc, #32]	; (8003110 <HAL_InitTick+0xd0>)
 80030f0:	f009 ffb2 	bl	800d058 <HAL_TIM_Base_Start_IT>
 80030f4:	4603      	mov	r3, r0
 80030f6:	e000      	b.n	80030fa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3740      	adds	r7, #64	; 0x40
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	24000090 	.word	0x24000090
 8003108:	58024400 	.word	0x58024400
 800310c:	431bde83 	.word	0x431bde83
 8003110:	24000be8 	.word	0x24000be8
 8003114:	40001000 	.word	0x40001000

08003118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800311c:	e7fe      	b.n	800311c <NMI_Handler+0x4>

0800311e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <HardFault_Handler+0x4>

08003124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <MemManage_Handler+0x4>

0800312a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <BusFault_Handler+0x4>

08003130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <UsageFault_Handler+0x4>

08003136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <DMA1_Stream0_IRQHandler+0x10>)
 800314a:	f003 fe93 	bl	8006e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	240001e4 	.word	0x240001e4

08003158 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <DMA1_Stream1_IRQHandler+0x10>)
 800315e:	f003 fe89 	bl	8006e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2400025c 	.word	0x2400025c

0800316c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <DMA1_Stream5_IRQHandler+0x10>)
 8003172:	f003 fe7f 	bl	8006e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	240002e8 	.word	0x240002e8

08003180 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <TIM1_BRK_IRQHandler+0x10>)
 8003186:	f00a faa9 	bl	800d6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	240004e8 	.word	0x240004e8

08003194 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <TIM1_UP_IRQHandler+0x10>)
 800319a:	f00a fa9f 	bl	800d6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	240004e8 	.word	0x240004e8

080031a8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80031ae:	f00a fa95 	bl	800d6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	240004e8 	.word	0x240004e8

080031bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <TIM1_CC_IRQHandler+0x10>)
 80031c2:	f00a fa8b 	bl	800d6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	240004e8 	.word	0x240004e8

080031d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <TIM2_IRQHandler+0x10>)
 80031d6:	f00a fa81 	bl	800d6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	24000534 	.word	0x24000534

080031e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <TIM3_IRQHandler+0x10>)
 80031ea:	f00a fa77 	bl	800d6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	24000580 	.word	0x24000580

080031f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <USART1_IRQHandler+0x10>)
 80031fe:	f00b fcfb 	bl	800ebf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	240005cc 	.word	0x240005cc

0800320c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <TIM6_DAC_IRQHandler+0x20>)
 8003212:	791b      	ldrb	r3, [r3, #4]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800321a:	4804      	ldr	r0, [pc, #16]	; (800322c <TIM6_DAC_IRQHandler+0x20>)
 800321c:	f002 f881 	bl	8005322 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003220:	4803      	ldr	r0, [pc, #12]	; (8003230 <TIM6_DAC_IRQHandler+0x24>)
 8003222:	f00a fa5b 	bl	800d6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	240002d4 	.word	0x240002d4
 8003230:	24000be8 	.word	0x24000be8

08003234 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <ITM_SendChar+0x48>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a0e      	ldr	r2, [pc, #56]	; (800327c <ITM_SendChar+0x48>)
 8003244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003248:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <ITM_SendChar+0x4c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a0c      	ldr	r2, [pc, #48]	; (8003280 <ITM_SendChar+0x4c>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003256:	bf00      	nop
 8003258:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f8      	beq.n	8003258 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003266:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	6013      	str	r3, [r2, #0]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000edfc 	.word	0xe000edfc
 8003280:	e0000e00 	.word	0xe0000e00

08003284 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e00a      	b.n	80032ac <_read+0x28>
		*ptr++ = __io_getchar();
 8003296:	f3af 8000 	nop.w
 800329a:	4601      	mov	r1, r0
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	60ba      	str	r2, [r7, #8]
 80032a2:	b2ca      	uxtb	r2, r1
 80032a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dbf0      	blt.n	8003296 <_read+0x12>
	}

	return len;
 80032b4:	687b      	ldr	r3, [r7, #4]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e009      	b.n	80032e4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	60ba      	str	r2, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ffab 	bl	8003234 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3301      	adds	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	dbf1      	blt.n	80032d0 <_write+0x12>
	}
	return len;
 80032ec:	687b      	ldr	r3, [r7, #4]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_close>:

int _close(int file) {
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <_fstat>:

int _fstat(int file, struct stat *st) {
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800331e:	605a      	str	r2, [r3, #4]
	return 0;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <_isatty>:

int _isatty(int file) {
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003336:	2301      	movs	r3, #1
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <_sbrk+0x64>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <_sbrk+0x64>)
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <_sbrk+0x68>)
 8003380:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <_sbrk+0x64>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	429a      	cmp	r2, r3
 800338e:	d207      	bcs.n	80033a0 <_sbrk+0x40>
		errno = ENOMEM;
 8003390:	f011 f9d4 	bl	801473c <__errno>
 8003394:	4603      	mov	r3, r0
 8003396:	220c      	movs	r2, #12
 8003398:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800339e:	e009      	b.n	80033b4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <_sbrk+0x64>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <_sbrk+0x64>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <_sbrk+0x64>)
 80033b0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	24080000 	.word	0x24080000
 80033c0:	00000400 	.word	0x00000400
 80033c4:	24000c34 	.word	0x24000c34
 80033c8:	240055a0 	.word	0x240055a0

080033cc <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80033d0:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <SystemInit+0xe4>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <SystemInit+0xe4>)
 80033d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033e0:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <SystemInit+0xe8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d807      	bhi.n	80033fc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <SystemInit+0xe8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 030f 	bic.w	r3, r3, #15
 80033f4:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <SystemInit+0xe8>)
 80033f6:	f043 0307 	orr.w	r3, r3, #7
 80033fa:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <SystemInit+0xec>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <SystemInit+0xec>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <SystemInit+0xec>)
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <SystemInit+0xec>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4929      	ldr	r1, [pc, #164]	; (80034b8 <SystemInit+0xec>)
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <SystemInit+0xf0>)
 8003416:	4013      	ands	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <SystemInit+0xe8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <SystemInit+0xe8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 030f 	bic.w	r3, r3, #15
 800342e:	4a21      	ldr	r2, [pc, #132]	; (80034b4 <SystemInit+0xe8>)
 8003430:	f043 0307 	orr.w	r3, r3, #7
 8003434:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <SystemInit+0xec>)
 8003438:	2200      	movs	r2, #0
 800343a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800343c:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <SystemInit+0xec>)
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003442:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <SystemInit+0xec>)
 8003444:	2200      	movs	r2, #0
 8003446:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <SystemInit+0xec>)
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <SystemInit+0xf4>)
 800344c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <SystemInit+0xec>)
 8003450:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <SystemInit+0xf8>)
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <SystemInit+0xec>)
 8003456:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <SystemInit+0xfc>)
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <SystemInit+0xec>)
 800345c:	2200      	movs	r2, #0
 800345e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003460:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <SystemInit+0xec>)
 8003462:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <SystemInit+0xfc>)
 8003464:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <SystemInit+0xec>)
 8003468:	2200      	movs	r2, #0
 800346a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <SystemInit+0xec>)
 800346e:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <SystemInit+0xfc>)
 8003470:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <SystemInit+0xec>)
 8003474:	2200      	movs	r2, #0
 8003476:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <SystemInit+0xec>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <SystemInit+0xec>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <SystemInit+0xec>)
 8003486:	2200      	movs	r2, #0
 8003488:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <SystemInit+0x100>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <SystemInit+0x104>)
 8003490:	4013      	ands	r3, r2
 8003492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003496:	d202      	bcs.n	800349e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <SystemInit+0x108>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <SystemInit+0x10c>)
 80034a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80034a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00
 80034b4:	52002000 	.word	0x52002000
 80034b8:	58024400 	.word	0x58024400
 80034bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80034c0:	02020200 	.word	0x02020200
 80034c4:	01ff0000 	.word	0x01ff0000
 80034c8:	01010280 	.word	0x01010280
 80034cc:	5c001000 	.word	0x5c001000
 80034d0:	ffff0000 	.word	0xffff0000
 80034d4:	51008108 	.word	0x51008108
 80034d8:	52004000 	.word	0x52004000

080034dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034e0:	f7ff ff74 	bl	80033cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e4:	480c      	ldr	r0, [pc, #48]	; (8003518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034e6:	490d      	ldr	r1, [pc, #52]	; (800351c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e8:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034ec:	e002      	b.n	80034f4 <LoopCopyDataInit>

080034ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034f2:	3304      	adds	r3, #4

080034f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f8:	d3f9      	bcc.n	80034ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034fc:	4c0a      	ldr	r4, [pc, #40]	; (8003528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003500:	e001      	b.n	8003506 <LoopFillZerobss>

08003502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003504:	3204      	adds	r2, #4

08003506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003508:	d3fb      	bcc.n	8003502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800350a:	f011 f91d 	bl	8014748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800350e:	f7fd fc9f 	bl	8000e50 <main>
  bx  lr
 8003512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003514:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003518:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800351c:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003520:	080155e0 	.word	0x080155e0
  ldr r2, =_sbss
 8003524:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8003528:	2400559c 	.word	0x2400559c

0800352c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC3_IRQHandler>
	...

08003530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003536:	2003      	movs	r0, #3
 8003538:	f001 fd39 	bl	8004fae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800353c:	f006 f926 	bl	800978c <HAL_RCC_GetSysClockFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_Init+0x68>)
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	4913      	ldr	r1, [pc, #76]	; (800359c <HAL_Init+0x6c>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_Init+0x68>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <HAL_Init+0x6c>)
 8003564:	5cd3      	ldrb	r3, [r2, r3]
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_Init+0x70>)
 8003572:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <HAL_Init+0x74>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800357a:	2005      	movs	r0, #5
 800357c:	f7ff fd60 	bl	8003040 <HAL_InitTick>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e002      	b.n	8003590 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800358a:	f7ff f8fb 	bl	8002784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	58024400 	.word	0x58024400
 800359c:	0801552c 	.word	0x0801552c
 80035a0:	2400008c 	.word	0x2400008c
 80035a4:	24000088 	.word	0x24000088

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	24000094 	.word	0x24000094
 80035cc:	24000c38 	.word	0x24000c38

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	24000c38 	.word	0x24000c38

080035e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_GetREVID+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0c1b      	lsrs	r3, r3, #16
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	5c001000 	.word	0x5c001000

08003600 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	4904      	ldr	r1, [pc, #16]	; (8003628 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	58000400 	.word	0x58000400

0800362c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3360      	adds	r3, #96	; 0x60
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	611a      	str	r2, [r3, #16]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003706:	b480      	push	{r7}
 8003708:	b087      	sub	sp, #28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3360      	adds	r3, #96	; 0x60
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	431a      	orrs	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	601a      	str	r2, [r3, #0]
  }
}
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003762:	b480      	push	{r7}
 8003764:	b087      	sub	sp, #28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3330      	adds	r3, #48	; 0x30
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	4413      	add	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	211f      	movs	r1, #31
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	f003 011f 	and.w	r1, r3, #31
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	431a      	orrs	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f023 0203 	bic.w	r2, r3, #3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3314      	adds	r3, #20
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	0e5b      	lsrs	r3, r3, #25
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	0d1b      	lsrs	r3, r3, #20
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2107      	movs	r1, #7
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	401a      	ands	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	0d1b      	lsrs	r3, r3, #20
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	431a      	orrs	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0318 	and.w	r3, r3, #24
 800385a:	4908      	ldr	r1, [pc, #32]	; (800387c <LL_ADC_SetChannelSingleDiff+0x44>)
 800385c:	40d9      	lsrs	r1, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	400b      	ands	r3, r1
 8003862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	000fffff 	.word	0x000fffff

08003880 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 031f 	and.w	r3, r3, #31
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6093      	str	r3, [r2, #8]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	5fffffc0 	.word	0x5fffffc0

080038c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d4:	d101      	bne.n	80038da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <LL_ADC_EnableInternalRegulator+0x24>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	6fffffc0 	.word	0x6fffffc0

08003910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003924:	d101      	bne.n	800392a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <LL_ADC_Enable+0x24>)
 8003946:	4013      	ands	r3, r2
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	7fffffc0 	.word	0x7fffffc0

08003960 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <LL_ADC_Disable+0x24>)
 800396e:	4013      	ands	r3, r2
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	7fffffc0 	.word	0x7fffffc0

08003988 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <LL_ADC_IsEnabled+0x18>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <LL_ADC_IsEnabled+0x1a>
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d101      	bne.n	80039c6 <LL_ADC_IsDisableOngoing+0x18>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <LL_ADC_IsDisableOngoing+0x1a>
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <LL_ADC_REG_StartConversion+0x24>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	7fffffc0 	.word	0x7fffffc0

080039fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d101      	bne.n	8003a14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d101      	bne.n	8003a3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e18f      	b.n	8003d82 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fe fea5 	bl	80027c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff19 	bl	80038c0 <LL_ADC_IsDeepPowerDownEnabled>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff feff 	bl	800389c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff34 	bl	8003910 <LL_ADC_IsInternalRegulatorEnabled>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d114      	bne.n	8003ad8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff18 	bl	80038e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab8:	4b87      	ldr	r3, [pc, #540]	; (8003cd8 <HAL_ADC_Init+0x290>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	4a87      	ldr	r2, [pc, #540]	; (8003cdc <HAL_ADC_Init+0x294>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003aca:	e002      	b.n	8003ad2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f9      	bne.n	8003acc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff17 	bl	8003910 <LL_ADC_IsInternalRegulatorEnabled>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10d      	bne.n	8003b04 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f043 0210 	orr.w	r2, r3, #16
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff77 	bl	80039fc <LL_ADC_REG_IsConversionOngoing>
 8003b0e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f040 8129 	bne.w	8003d70 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 8125 	bne.w	8003d70 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff24 	bl	8003988 <LL_ADC_IsEnabled>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d136      	bne.n	8003bb4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a65      	ldr	r2, [pc, #404]	; (8003ce0 <HAL_ADC_Init+0x298>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_ADC_Init+0x112>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a63      	ldr	r2, [pc, #396]	; (8003ce4 <HAL_ADC_Init+0x29c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d10e      	bne.n	8003b78 <HAL_ADC_Init+0x130>
 8003b5a:	4861      	ldr	r0, [pc, #388]	; (8003ce0 <HAL_ADC_Init+0x298>)
 8003b5c:	f7ff ff14 	bl	8003988 <LL_ADC_IsEnabled>
 8003b60:	4604      	mov	r4, r0
 8003b62:	4860      	ldr	r0, [pc, #384]	; (8003ce4 <HAL_ADC_Init+0x29c>)
 8003b64:	f7ff ff10 	bl	8003988 <LL_ADC_IsEnabled>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4323      	orrs	r3, r4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e008      	b.n	8003b8a <HAL_ADC_Init+0x142>
 8003b78:	485b      	ldr	r0, [pc, #364]	; (8003ce8 <HAL_ADC_Init+0x2a0>)
 8003b7a:	f7ff ff05 	bl	8003988 <LL_ADC_IsEnabled>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d012      	beq.n	8003bb4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a53      	ldr	r2, [pc, #332]	; (8003ce0 <HAL_ADC_Init+0x298>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_ADC_Init+0x15a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a51      	ldr	r2, [pc, #324]	; (8003ce4 <HAL_ADC_Init+0x29c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_Init+0x15e>
 8003ba2:	4a52      	ldr	r2, [pc, #328]	; (8003cec <HAL_ADC_Init+0x2a4>)
 8003ba4:	e000      	b.n	8003ba8 <HAL_ADC_Init+0x160>
 8003ba6:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_ADC_Init+0x2a8>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f7ff fd3c 	bl	800362c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003bb4:	f7ff fd18 	bl	80035e8 <HAL_GetREVID>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d914      	bls.n	8003bec <HAL_ADC_Init+0x1a4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d110      	bne.n	8003bec <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7d5b      	ldrb	r3, [r3, #21]
 8003bce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bd4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bda:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7f1b      	ldrb	r3, [r3, #28]
 8003be0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003be2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003be4:	f043 030c 	orr.w	r3, r3, #12
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e00d      	b.n	8003c08 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7d5b      	ldrb	r3, [r3, #21]
 8003bf0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bf6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bfc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7f1b      	ldrb	r3, [r3, #28]
 8003c02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	7f1b      	ldrb	r3, [r3, #28]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d106      	bne.n	8003c1e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	045b      	lsls	r3, r3, #17
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_ADC_Init+0x2ac>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	69b9      	ldr	r1, [r7, #24]
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fed2 	bl	80039fc <LL_ADC_REG_IsConversionOngoing>
 8003c58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fedf 	bl	8003a22 <LL_ADC_INJ_IsConversionOngoing>
 8003c64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d15f      	bne.n	8003d2c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d15c      	bne.n	8003d2c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	7d1b      	ldrb	r3, [r3, #20]
 8003c76:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <HAL_ADC_Init+0x2b0>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d130      	bne.n	8003d00 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_ADC_Init+0x2b4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cb2:	3a01      	subs	r2, #1
 8003cb4:	0411      	lsls	r1, r2, #16
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	611a      	str	r2, [r3, #16]
 8003cd4:	e01c      	b.n	8003d10 <HAL_ADC_Init+0x2c8>
 8003cd6:	bf00      	nop
 8003cd8:	24000088 	.word	0x24000088
 8003cdc:	053e2d63 	.word	0x053e2d63
 8003ce0:	40022000 	.word	0x40022000
 8003ce4:	40022100 	.word	0x40022100
 8003ce8:	58026000 	.word	0x58026000
 8003cec:	40022300 	.word	0x40022300
 8003cf0:	58026300 	.word	0x58026300
 8003cf4:	fff0c003 	.word	0xfff0c003
 8003cf8:	ffffbffc 	.word	0xffffbffc
 8003cfc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fdec 	bl	8004904 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10c      	bne.n	8003d4e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f023 010f 	bic.w	r1, r3, #15
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	1e5a      	subs	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d4c:	e007      	b.n	8003d5e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 020f 	bic.w	r2, r2, #15
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
 8003d6e:	e007      	b.n	8003d80 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f043 0210 	orr.w	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	; 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop

08003d8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a55      	ldr	r2, [pc, #340]	; (8003ef4 <HAL_ADC_Start_DMA+0x168>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_ADC_Start_DMA+0x20>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a54      	ldr	r2, [pc, #336]	; (8003ef8 <HAL_ADC_Start_DMA+0x16c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_Start_DMA+0x24>
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <HAL_ADC_Start_DMA+0x170>)
 8003dae:	e000      	b.n	8003db2 <HAL_ADC_Start_DMA+0x26>
 8003db0:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_ADC_Start_DMA+0x174>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fd64 	bl	8003880 <LL_ADC_GetMultimode>
 8003db8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fe1c 	bl	80039fc <LL_ADC_REG_IsConversionOngoing>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 808c 	bne.w	8003ee4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_Start_DMA+0x4e>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e087      	b.n	8003eea <HAL_ADC_Start_DMA+0x15e>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d002      	beq.n	8003df4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b09      	cmp	r3, #9
 8003df2:	d170      	bne.n	8003ed6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fc07 	bl	8004608 <ADC_Enable>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d163      	bne.n	8003ecc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e08:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <HAL_ADC_Start_DMA+0x178>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a37      	ldr	r2, [pc, #220]	; (8003ef8 <HAL_ADC_Start_DMA+0x16c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d002      	beq.n	8003e24 <HAL_ADC_Start_DMA+0x98>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	e000      	b.n	8003e26 <HAL_ADC_Start_DMA+0x9a>
 8003e24:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <HAL_ADC_Start_DMA+0x168>)
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d002      	beq.n	8003e34 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d006      	beq.n	8003e5a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f023 0206 	bic.w	r2, r3, #6
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	659a      	str	r2, [r3, #88]	; 0x58
 8003e58:	e002      	b.n	8003e60 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <HAL_ADC_Start_DMA+0x17c>)
 8003e66:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6c:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <HAL_ADC_Start_DMA+0x180>)
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_ADC_Start_DMA+0x184>)
 8003e76:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	221c      	movs	r2, #28
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0210 	orr.w	r2, r2, #16
 8003e96:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f7ff fc89 	bl	80037ba <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3340      	adds	r3, #64	; 0x40
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f002 f80e 	bl	8005ed8 <HAL_DMA_Start_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fd85 	bl	80039d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003eca:	e00d      	b.n	8003ee8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003ed4:	e008      	b.n	8003ee8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003ee2:	e001      	b.n	8003ee8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	40022100 	.word	0x40022100
 8003efc:	40022300 	.word	0x40022300
 8003f00:	58026300 	.word	0x58026300
 8003f04:	fffff0fe 	.word	0xfffff0fe
 8003f08:	080047db 	.word	0x080047db
 8003f0c:	080048b3 	.word	0x080048b3
 8003f10:	080048cf 	.word	0x080048cf

08003f14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b0a1      	sub	sp, #132	; 0x84
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a65      	ldr	r2, [pc, #404]	; (8004100 <HAL_ADC_ConfigChannel+0x1b0>)
 8003f6a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x2a>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e32e      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x688>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fd38 	bl	80039fc <LL_ADC_REG_IsConversionOngoing>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 8313 	bne.w	80045ba <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db2c      	blt.n	8003ff6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x6a>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	e016      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x98>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fca:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	e003      	b.n	8003fde <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd8:	fab3 f383 	clz	r3, r3
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	69d1      	ldr	r1, [r2, #28]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f7ff fbad 	bl	8003762 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fcf5 	bl	80039fc <LL_ADC_REG_IsConversionOngoing>
 8004012:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fd02 	bl	8003a22 <LL_ADC_INJ_IsConversionOngoing>
 800401e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 80b8 	bne.w	8004198 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 80b4 	bne.w	8004198 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	461a      	mov	r2, r3
 800403e:	f7ff fbcf 	bl	80037e0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_ADC_ConfigChannel+0x1b4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800404a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404e:	d10b      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x118>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	e01d      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x154>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_ADC_ConfigChannel+0x13e>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	e00a      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x154>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d02c      	beq.n	8004108 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040bc:	f7ff faea 	bl	8003694 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6919      	ldr	r1, [r3, #16]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	7e5b      	ldrb	r3, [r3, #25]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d102      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x186>
 80040d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040d4:	e000      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x188>
 80040d6:	2300      	movs	r3, #0
 80040d8:	461a      	mov	r2, r3
 80040da:	f7ff fb14 	bl	8003706 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	7e1b      	ldrb	r3, [r3, #24]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d102      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x1a4>
 80040ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f2:	e000      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x1a6>
 80040f4:	2300      	movs	r3, #0
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7ff faec 	bl	80036d4 <LL_ADC_SetDataRightShift>
 80040fc:	e04c      	b.n	8004198 <HAL_ADC_ConfigChannel+0x248>
 80040fe:	bf00      	nop
 8004100:	47ff0000 	.word	0x47ff0000
 8004104:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	069b      	lsls	r3, r3, #26
 8004118:	429a      	cmp	r2, r3
 800411a:	d107      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	069b      	lsls	r3, r3, #26
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800414e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	069b      	lsls	r3, r3, #26
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004172:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004196:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fbf3 	bl	8003988 <LL_ADC_IsEnabled>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f040 8211 	bne.w	80045cc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f7ff fb3e 	bl	8003838 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4aa1      	ldr	r2, [pc, #644]	; (8004448 <HAL_ADC_ConfigChannel+0x4f8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	f040 812e 	bne.w	8004424 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x2a0>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	bf94      	ite	ls
 80041e8:	2301      	movls	r3, #1
 80041ea:	2300      	movhi	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e019      	b.n	8004224 <HAL_ADC_ConfigChannel+0x2d4>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004200:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800420c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2b09      	cmp	r3, #9
 800421c:	bf94      	ite	ls
 800421e:	2301      	movls	r3, #1
 8004220:	2300      	movhi	r3, #0
 8004222:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004224:	2b00      	cmp	r3, #0
 8004226:	d079      	beq.n	800431c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x2f4>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	3301      	adds	r3, #1
 800423c:	069b      	lsls	r3, r3, #26
 800423e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004242:	e015      	b.n	8004270 <HAL_ADC_ConfigChannel+0x320>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004254:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800425c:	2320      	movs	r3, #32
 800425e:	e003      	b.n	8004268 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	3301      	adds	r3, #1
 800426a:	069b      	lsls	r3, r3, #26
 800426c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x340>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	e017      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x370>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800429e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80042a8:	2320      	movs	r3, #32
 80042aa:	e003      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80042ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2101      	movs	r1, #1
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	ea42 0103 	orr.w	r1, r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x396>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0e9b      	lsrs	r3, r3, #26
 80042d6:	3301      	adds	r3, #1
 80042d8:	f003 021f 	and.w	r2, r3, #31
 80042dc:	4613      	mov	r3, r2
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4413      	add	r3, r2
 80042e2:	051b      	lsls	r3, r3, #20
 80042e4:	e018      	b.n	8004318 <HAL_ADC_ConfigChannel+0x3c8>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80042fe:	2320      	movs	r3, #32
 8004300:	e003      	b.n	800430a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f003 021f 	and.w	r2, r3, #31
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004318:	430b      	orrs	r3, r1
 800431a:	e07e      	b.n	800441a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x3e8>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0e9b      	lsrs	r3, r3, #26
 800432e:	3301      	adds	r3, #1
 8004330:	069b      	lsls	r3, r3, #26
 8004332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004336:	e015      	b.n	8004364 <HAL_ADC_ConfigChannel+0x414>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004350:	2320      	movs	r3, #32
 8004352:	e003      	b.n	800435c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	3301      	adds	r3, #1
 800435e:	069b      	lsls	r3, r3, #26
 8004360:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x434>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	3301      	adds	r3, #1
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	e017      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x464>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	61bb      	str	r3, [r7, #24]
  return result;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800439c:	2320      	movs	r3, #32
 800439e:	e003      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2101      	movs	r1, #1
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	ea42 0103 	orr.w	r1, r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x490>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	3301      	adds	r3, #1
 80043cc:	f003 021f 	and.w	r2, r3, #31
 80043d0:	4613      	mov	r3, r2
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4413      	add	r3, r2
 80043d6:	3b1e      	subs	r3, #30
 80043d8:	051b      	lsls	r3, r3, #20
 80043da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043de:	e01b      	b.n	8004418 <HAL_ADC_ConfigChannel+0x4c8>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	60fb      	str	r3, [r7, #12]
  return result;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80043f8:	2320      	movs	r3, #32
 80043fa:	e003      	b.n	8004404 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	3301      	adds	r3, #1
 8004406:	f003 021f 	and.w	r2, r3, #31
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	3b1e      	subs	r3, #30
 8004412:	051b      	lsls	r3, r3, #20
 8004414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004418:	430b      	orrs	r3, r1
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	6892      	ldr	r2, [r2, #8]
 800441e:	4619      	mov	r1, r3
 8004420:	f7ff f9de 	bl	80037e0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f280 80cf 	bge.w	80045cc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a06      	ldr	r2, [pc, #24]	; (800444c <HAL_ADC_ConfigChannel+0x4fc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_ADC_ConfigChannel+0x4f2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_ADC_ConfigChannel+0x500>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10a      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x508>
 8004442:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_ADC_ConfigChannel+0x504>)
 8004444:	e009      	b.n	800445a <HAL_ADC_ConfigChannel+0x50a>
 8004446:	bf00      	nop
 8004448:	47ff0000 	.word	0x47ff0000
 800444c:	40022000 	.word	0x40022000
 8004450:	40022100 	.word	0x40022100
 8004454:	40022300 	.word	0x40022300
 8004458:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <HAL_ADC_ConfigChannel+0x690>)
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff f90c 	bl	8003678 <LL_ADC_GetCommonPathInternalCh>
 8004460:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5f      	ldr	r2, [pc, #380]	; (80045e4 <HAL_ADC_ConfigChannel+0x694>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_ADC_ConfigChannel+0x526>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5d      	ldr	r2, [pc, #372]	; (80045e8 <HAL_ADC_ConfigChannel+0x698>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10e      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x544>
 8004476:	485b      	ldr	r0, [pc, #364]	; (80045e4 <HAL_ADC_ConfigChannel+0x694>)
 8004478:	f7ff fa86 	bl	8003988 <LL_ADC_IsEnabled>
 800447c:	4604      	mov	r4, r0
 800447e:	485a      	ldr	r0, [pc, #360]	; (80045e8 <HAL_ADC_ConfigChannel+0x698>)
 8004480:	f7ff fa82 	bl	8003988 <LL_ADC_IsEnabled>
 8004484:	4603      	mov	r3, r0
 8004486:	4323      	orrs	r3, r4
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e008      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x556>
 8004494:	4855      	ldr	r0, [pc, #340]	; (80045ec <HAL_ADC_ConfigChannel+0x69c>)
 8004496:	f7ff fa77 	bl	8003988 <LL_ADC_IsEnabled>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d07d      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a50      	ldr	r2, [pc, #320]	; (80045f0 <HAL_ADC_ConfigChannel+0x6a0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d130      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x5c6>
 80044b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12b      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a4a      	ldr	r2, [pc, #296]	; (80045ec <HAL_ADC_ConfigChannel+0x69c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f040 8081 	bne.w	80045cc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a45      	ldr	r2, [pc, #276]	; (80045e4 <HAL_ADC_ConfigChannel+0x694>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_ADC_ConfigChannel+0x58e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a43      	ldr	r2, [pc, #268]	; (80045e8 <HAL_ADC_ConfigChannel+0x698>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x592>
 80044de:	4a45      	ldr	r2, [pc, #276]	; (80045f4 <HAL_ADC_ConfigChannel+0x6a4>)
 80044e0:	e000      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x594>
 80044e2:	4a3f      	ldr	r2, [pc, #252]	; (80045e0 <HAL_ADC_ConfigChannel+0x690>)
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f7ff f8b0 	bl	8003652 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <HAL_ADC_ConfigChannel+0x6a8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	4a40      	ldr	r2, [pc, #256]	; (80045fc <HAL_ADC_ConfigChannel+0x6ac>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	3301      	adds	r3, #1
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004506:	e002      	b.n	800450e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3b01      	subs	r3, #1
 800450c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f9      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004514:	e05a      	b.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a39      	ldr	r2, [pc, #228]	; (8004600 <HAL_ADC_ConfigChannel+0x6b0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d11e      	bne.n	800455e <HAL_ADC_ConfigChannel+0x60e>
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d119      	bne.n	800455e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2f      	ldr	r2, [pc, #188]	; (80045ec <HAL_ADC_ConfigChannel+0x69c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d14b      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <HAL_ADC_ConfigChannel+0x694>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_ADC_ConfigChannel+0x5f8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <HAL_ADC_ConfigChannel+0x698>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x5fc>
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <HAL_ADC_ConfigChannel+0x6a4>)
 800454a:	e000      	b.n	800454e <HAL_ADC_ConfigChannel+0x5fe>
 800454c:	4a24      	ldr	r2, [pc, #144]	; (80045e0 <HAL_ADC_ConfigChannel+0x690>)
 800454e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f7ff f87b 	bl	8003652 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800455c:	e036      	b.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a28      	ldr	r2, [pc, #160]	; (8004604 <HAL_ADC_ConfigChannel+0x6b4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d131      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d12c      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <HAL_ADC_ConfigChannel+0x69c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d127      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_ADC_ConfigChannel+0x694>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_ADC_ConfigChannel+0x640>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_ADC_ConfigChannel+0x698>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x644>
 8004590:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004592:	e000      	b.n	8004596 <HAL_ADC_ConfigChannel+0x646>
 8004594:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <HAL_ADC_ConfigChannel+0x690>)
 8004596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7ff f857 	bl	8003652 <LL_ADC_SetCommonPathInternalCh>
 80045a4:	e012      	b.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f043 0220 	orr.w	r2, r3, #32
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045b8:	e008      	b.n	80045cc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3784      	adds	r7, #132	; 0x84
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd90      	pop	{r4, r7, pc}
 80045e0:	58026300 	.word	0x58026300
 80045e4:	40022000 	.word	0x40022000
 80045e8:	40022100 	.word	0x40022100
 80045ec:	58026000 	.word	0x58026000
 80045f0:	cb840000 	.word	0xcb840000
 80045f4:	40022300 	.word	0x40022300
 80045f8:	24000088 	.word	0x24000088
 80045fc:	053e2d63 	.word	0x053e2d63
 8004600:	c7520000 	.word	0xc7520000
 8004604:	cfb80000 	.word	0xcfb80000

08004608 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff f9b7 	bl	8003988 <LL_ADC_IsEnabled>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d16e      	bne.n	80046fe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	4b38      	ldr	r3, [pc, #224]	; (8004708 <ADC_Enable+0x100>)
 8004628:	4013      	ands	r3, r2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	f043 0210 	orr.w	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	f043 0201 	orr.w	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e05a      	b.n	8004700 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff f972 	bl	8003938 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004654:	f7fe ffbc 	bl	80035d0 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2b      	ldr	r2, [pc, #172]	; (800470c <ADC_Enable+0x104>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <ADC_Enable+0x66>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a29      	ldr	r2, [pc, #164]	; (8004710 <ADC_Enable+0x108>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <ADC_Enable+0x6a>
 800466e:	4b29      	ldr	r3, [pc, #164]	; (8004714 <ADC_Enable+0x10c>)
 8004670:	e000      	b.n	8004674 <ADC_Enable+0x6c>
 8004672:	4b29      	ldr	r3, [pc, #164]	; (8004718 <ADC_Enable+0x110>)
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff f903 	bl	8003880 <LL_ADC_GetMultimode>
 800467a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <ADC_Enable+0x108>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d002      	beq.n	800468c <ADC_Enable+0x84>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	e000      	b.n	800468e <ADC_Enable+0x86>
 800468c:	4b1f      	ldr	r3, [pc, #124]	; (800470c <ADC_Enable+0x104>)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	4293      	cmp	r3, r2
 8004694:	d02c      	beq.n	80046f0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d130      	bne.n	80046fe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800469c:	e028      	b.n	80046f0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff f970 	bl	8003988 <LL_ADC_IsEnabled>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff f940 	bl	8003938 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046b8:	f7fe ff8a 	bl	80035d0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d914      	bls.n	80046f0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d00d      	beq.n	80046f0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f043 0210 	orr.w	r2, r3, #16
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	f043 0201 	orr.w	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e007      	b.n	8004700 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d1cf      	bne.n	800469e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	8000003f 	.word	0x8000003f
 800470c:	40022000 	.word	0x40022000
 8004710:	40022100 	.word	0x40022100
 8004714:	40022300 	.word	0x40022300
 8004718:	58026300 	.word	0x58026300

0800471c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff f940 	bl	80039ae <LL_ADC_IsDisableOngoing>
 800472e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f927 	bl	8003988 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d047      	beq.n	80047d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d144      	bne.n	80047d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030d 	and.w	r3, r3, #13
 8004750:	2b01      	cmp	r3, #1
 8004752:	d10c      	bne.n	800476e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff f901 	bl	8003960 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2203      	movs	r2, #3
 8004764:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004766:	f7fe ff33 	bl	80035d0 <HAL_GetTick>
 800476a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800476c:	e029      	b.n	80047c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f043 0210 	orr.w	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	f043 0201 	orr.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e023      	b.n	80047d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800478a:	f7fe ff21 	bl	80035d0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d914      	bls.n	80047c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00d      	beq.n	80047c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	f043 0210 	orr.w	r2, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b6:	f043 0201 	orr.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e007      	b.n	80047d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1dc      	bne.n	800478a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d14b      	bne.n	800488c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d021      	beq.n	8004852 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe ff92 	bl	800373c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d032      	beq.n	8004884 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d12b      	bne.n	8004884 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11f      	bne.n	8004884 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
 8004850:	e018      	b.n	8004884 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d111      	bne.n	8004884 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fb45 	bl	8003f14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800488a:	e00e      	b.n	80048aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff fb4f 	bl	8003f3c <HAL_ADC_ErrorCallback>
}
 800489e:	e004      	b.n	80048aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff fb31 	bl	8003f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	f043 0204 	orr.w	r2, r3, #4
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff fb21 	bl	8003f3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a7a      	ldr	r2, [pc, #488]	; (8004afc <ADC_ConfigureBoostMode+0x1f8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <ADC_ConfigureBoostMode+0x1c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a79      	ldr	r2, [pc, #484]	; (8004b00 <ADC_ConfigureBoostMode+0x1fc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d109      	bne.n	8004934 <ADC_ConfigureBoostMode+0x30>
 8004920:	4b78      	ldr	r3, [pc, #480]	; (8004b04 <ADC_ConfigureBoostMode+0x200>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e008      	b.n	8004946 <ADC_ConfigureBoostMode+0x42>
 8004934:	4b74      	ldr	r3, [pc, #464]	; (8004b08 <ADC_ConfigureBoostMode+0x204>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01c      	beq.n	8004984 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800494a:	f005 f899 	bl	8009a80 <HAL_RCC_GetHCLKFreq>
 800494e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004958:	d010      	beq.n	800497c <ADC_ConfigureBoostMode+0x78>
 800495a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800495e:	d873      	bhi.n	8004a48 <ADC_ConfigureBoostMode+0x144>
 8004960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004964:	d002      	beq.n	800496c <ADC_ConfigureBoostMode+0x68>
 8004966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800496a:	d16d      	bne.n	8004a48 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	60fb      	str	r3, [r7, #12]
        break;
 800497a:	e068      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	60fb      	str	r3, [r7, #12]
        break;
 8004982:	e064      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004984:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f006 fb20 	bl	800afd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004990:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800499a:	d051      	beq.n	8004a40 <ADC_ConfigureBoostMode+0x13c>
 800499c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80049a0:	d854      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80049a6:	d047      	beq.n	8004a38 <ADC_ConfigureBoostMode+0x134>
 80049a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80049ac:	d84e      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049b2:	d03d      	beq.n	8004a30 <ADC_ConfigureBoostMode+0x12c>
 80049b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049b8:	d848      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049be:	d033      	beq.n	8004a28 <ADC_ConfigureBoostMode+0x124>
 80049c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049c4:	d842      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049ca:	d029      	beq.n	8004a20 <ADC_ConfigureBoostMode+0x11c>
 80049cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049d0:	d83c      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049d6:	d01a      	beq.n	8004a0e <ADC_ConfigureBoostMode+0x10a>
 80049d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049dc:	d836      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049e2:	d014      	beq.n	8004a0e <ADC_ConfigureBoostMode+0x10a>
 80049e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049e8:	d830      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ee:	d00e      	beq.n	8004a0e <ADC_ConfigureBoostMode+0x10a>
 80049f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f4:	d82a      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 80049f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049fa:	d008      	beq.n	8004a0e <ADC_ConfigureBoostMode+0x10a>
 80049fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a00:	d824      	bhi.n	8004a4c <ADC_ConfigureBoostMode+0x148>
 8004a02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a06:	d002      	beq.n	8004a0e <ADC_ConfigureBoostMode+0x10a>
 8004a08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a0c:	d11e      	bne.n	8004a4c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	0c9b      	lsrs	r3, r3, #18
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
        break;
 8004a1e:	e016      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	60fb      	str	r3, [r7, #12]
        break;
 8004a26:	e012      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	60fb      	str	r3, [r7, #12]
        break;
 8004a2e:	e00e      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	60fb      	str	r3, [r7, #12]
        break;
 8004a36:	e00a      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	09db      	lsrs	r3, r3, #7
 8004a3c:	60fb      	str	r3, [r7, #12]
        break;
 8004a3e:	e006      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	60fb      	str	r3, [r7, #12]
        break;
 8004a46:	e002      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a48:	bf00      	nop
 8004a4a:	e000      	b.n	8004a4e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a4c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004a4e:	f7fe fdcb 	bl	80035e8 <HAL_GetREVID>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d815      	bhi.n	8004a88 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <ADC_ConfigureBoostMode+0x208>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d908      	bls.n	8004a76 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a74:	e03e      	b.n	8004af4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a84:	609a      	str	r2, [r3, #8]
}
 8004a86:	e035      	b.n	8004af4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <ADC_ConfigureBoostMode+0x20c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d808      	bhi.n	8004aa8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004aa4:	609a      	str	r2, [r3, #8]
}
 8004aa6:	e025      	b.n	8004af4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <ADC_ConfigureBoostMode+0x210>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d80a      	bhi.n	8004ac6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	e016      	b.n	8004af4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <ADC_ConfigureBoostMode+0x214>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d80a      	bhi.n	8004ae4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	609a      	str	r2, [r3, #8]
}
 8004ae2:	e007      	b.n	8004af4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40022000 	.word	0x40022000
 8004b00:	40022100 	.word	0x40022100
 8004b04:	40022300 	.word	0x40022300
 8004b08:	58026300 	.word	0x58026300
 8004b0c:	01312d00 	.word	0x01312d00
 8004b10:	005f5e10 	.word	0x005f5e10
 8004b14:	00bebc20 	.word	0x00bebc20
 8004b18:	017d7840 	.word	0x017d7840

08004b1c <LL_ADC_IsEnabled>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <LL_ADC_IsEnabled+0x18>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <LL_ADC_IsEnabled+0x1a>
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <LL_ADC_StartCalibration>:
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <LL_ADC_StartCalibration+0x38>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b64:	430a      	orrs	r2, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	3ffeffc0 	.word	0x3ffeffc0

08004b80 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b94:	d101      	bne.n	8004b9a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d101      	bne.n	8004bc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_ADCEx_Calibration_Start+0x1e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e04c      	b.n	8004c88 <HAL_ADCEx_Calibration_Start+0xb8>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff fd90 	bl	800471c <ADC_Disable>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d135      	bne.n	8004c72 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	f043 0202 	orr.w	r2, r3, #2
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff90 	bl	8004b44 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c24:	e014      	b.n	8004c50 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d30d      	bcc.n	8004c50 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c38:	f023 0312 	bic.w	r3, r3, #18
 8004c3c:	f043 0210 	orr.w	r2, r3, #16
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e01b      	b.n	8004c88 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff93 	bl	8004b80 <LL_ADC_IsCalibrationOnGoing>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e2      	bne.n	8004c26 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f023 0303 	bic.w	r3, r3, #3
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
 8004c70:	e005      	b.n	8004c7e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c76:	f043 0210 	orr.w	r2, r3, #16
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	ffffeefd 	.word	0xffffeefd
 8004c94:	25c3f800 	.word	0x25c3f800

08004c98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b09f      	sub	sp, #124	; 0x7c
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e0be      	b.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a5c      	ldr	r2, [pc, #368]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d102      	bne.n	8004cd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cd0:	4b5b      	ldr	r3, [pc, #364]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	e001      	b.n	8004cda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e09d      	b.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff54 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 8004d00:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff ff4e 	bl	8004ba8 <LL_ADC_REG_IsConversionOngoing>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d17f      	bne.n	8004e12 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d17c      	bne.n	8004e12 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a47      	ldr	r2, [pc, #284]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a46      	ldr	r2, [pc, #280]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004d2c:	4b45      	ldr	r3, [pc, #276]	; (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d2e:	e000      	b.n	8004d32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d30:	4b45      	ldr	r3, [pc, #276]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d32:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d039      	beq.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a38      	ldr	r2, [pc, #224]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10e      	bne.n	8004d80 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d62:	4836      	ldr	r0, [pc, #216]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d64:	f7ff feda 	bl	8004b1c <LL_ADC_IsEnabled>
 8004d68:	4604      	mov	r4, r0
 8004d6a:	4835      	ldr	r0, [pc, #212]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d6c:	f7ff fed6 	bl	8004b1c <LL_ADC_IsEnabled>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4323      	orrs	r3, r4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e008      	b.n	8004d92 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004d80:	4832      	ldr	r0, [pc, #200]	; (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d82:	f7ff fecb 	bl	8004b1c <LL_ADC_IsEnabled>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d047      	beq.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	6892      	ldr	r2, [r2, #8]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	431a      	orrs	r2, r3
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dae:	e03a      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10e      	bne.n	8004dee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004dd0:	481a      	ldr	r0, [pc, #104]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dd2:	f7ff fea3 	bl	8004b1c <LL_ADC_IsEnabled>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4819      	ldr	r0, [pc, #100]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dda:	f7ff fe9f 	bl	8004b1c <LL_ADC_IsEnabled>
 8004dde:	4603      	mov	r3, r0
 8004de0:	4323      	orrs	r3, r4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	e008      	b.n	8004e00 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004dee:	4817      	ldr	r0, [pc, #92]	; (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004df0:	f7ff fe94 	bl	8004b1c <LL_ADC_IsEnabled>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e0e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e10:	e009      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004e24:	e000      	b.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e26:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	377c      	adds	r7, #124	; 0x7c
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd90      	pop	{r4, r7, pc}
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	40022100 	.word	0x40022100
 8004e44:	40022300 	.word	0x40022300
 8004e48:	58026300 	.word	0x58026300
 8004e4c:	58026000 	.word	0x58026000
 8004e50:	fffff0e0 	.word	0xfffff0e0

08004e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <__NVIC_SetPriorityGrouping+0x40>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e70:	4013      	ands	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <__NVIC_SetPriorityGrouping+0x44>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e82:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <__NVIC_SetPriorityGrouping+0x40>)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	60d3      	str	r3, [r2, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	e000ed00 	.word	0xe000ed00
 8004e98:	05fa0000 	.word	0x05fa0000

08004e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	f003 0307 	and.w	r3, r3, #7
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	db0b      	blt.n	8004ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	f003 021f 	and.w	r2, r3, #31
 8004ed0:	4907      	ldr	r1, [pc, #28]	; (8004ef0 <__NVIC_EnableIRQ+0x38>)
 8004ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2001      	movs	r0, #1
 8004eda:	fa00 f202 	lsl.w	r2, r0, r2
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e100 	.word	0xe000e100

08004ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	db0a      	blt.n	8004f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	490c      	ldr	r1, [pc, #48]	; (8004f40 <__NVIC_SetPriority+0x4c>)
 8004f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f12:	0112      	lsls	r2, r2, #4
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	440b      	add	r3, r1
 8004f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f1c:	e00a      	b.n	8004f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4908      	ldr	r1, [pc, #32]	; (8004f44 <__NVIC_SetPriority+0x50>)
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	0112      	lsls	r2, r2, #4
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	440b      	add	r3, r1
 8004f32:	761a      	strb	r2, [r3, #24]
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	e000e100 	.word	0xe000e100
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f1c3 0307 	rsb	r3, r3, #7
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	bf28      	it	cs
 8004f66:	2304      	movcs	r3, #4
 8004f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d902      	bls.n	8004f78 <NVIC_EncodePriority+0x30>
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3b03      	subs	r3, #3
 8004f76:	e000      	b.n	8004f7a <NVIC_EncodePriority+0x32>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43da      	mvns	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	43d9      	mvns	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa0:	4313      	orrs	r3, r2
         );
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3724      	adds	r7, #36	; 0x24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ff4c 	bl	8004e54 <__NVIC_SetPriorityGrouping>
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fd2:	f7ff ff63 	bl	8004e9c <__NVIC_GetPriorityGrouping>
 8004fd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	6978      	ldr	r0, [r7, #20]
 8004fde:	f7ff ffb3 	bl	8004f48 <NVIC_EncodePriority>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff ff82 	bl	8004ef4 <__NVIC_SetPriority>
}
 8004ff0:	bf00      	nop
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff ff56 	bl	8004eb8 <__NVIC_EnableIRQ>
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e014      	b.n	8005050 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	791b      	ldrb	r3, [r3, #4]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd fcdc 	bl	80029f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e046      	b.n	80050fa <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	795b      	ldrb	r3, [r3, #5]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_DAC_Start+0x20>
 8005074:	2302      	movs	r3, #2
 8005076:	e040      	b.n	80050fa <HAL_DAC_Start+0xa2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d11d      	bne.n	80050ec <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	e014      	b.n	80050ec <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2102      	movs	r1, #2
 80050d4:	fa01 f303 	lsl.w	r3, r1, r3
 80050d8:	429a      	cmp	r2, r3
 80050da:	d107      	bne.n	80050ec <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0202 	orr.w	r2, r2, #2
 80050ea:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0a2      	b.n	8005266 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	795b      	ldrb	r3, [r3, #5]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_DAC_Start_DMA+0x24>
 8005128:	2302      	movs	r3, #2
 800512a:	e09c      	b.n	8005266 <HAL_DAC_Start_DMA+0x15e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2202      	movs	r2, #2
 8005136:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d129      	bne.n	8005192 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4a4b      	ldr	r2, [pc, #300]	; (8005270 <HAL_DAC_Start_DMA+0x168>)
 8005144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4a4a      	ldr	r2, [pc, #296]	; (8005274 <HAL_DAC_Start_DMA+0x16c>)
 800514c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4a49      	ldr	r2, [pc, #292]	; (8005278 <HAL_DAC_Start_DMA+0x170>)
 8005154:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005164:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_DAC_Start_DMA+0x6c>
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	2b04      	cmp	r3, #4
 8005170:	d005      	beq.n	800517e <HAL_DAC_Start_DMA+0x76>
 8005172:	e009      	b.n	8005188 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3308      	adds	r3, #8
 800517a:	613b      	str	r3, [r7, #16]
        break;
 800517c:	e033      	b.n	80051e6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	613b      	str	r3, [r7, #16]
        break;
 8005186:	e02e      	b.n	80051e6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3310      	adds	r3, #16
 800518e:	613b      	str	r3, [r7, #16]
        break;
 8005190:	e029      	b.n	80051e6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	4a39      	ldr	r2, [pc, #228]	; (800527c <HAL_DAC_Start_DMA+0x174>)
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	4a38      	ldr	r2, [pc, #224]	; (8005280 <HAL_DAC_Start_DMA+0x178>)
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4a37      	ldr	r2, [pc, #220]	; (8005284 <HAL_DAC_Start_DMA+0x17c>)
 80051a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051b8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_DAC_Start_DMA+0xc0>
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d005      	beq.n	80051d2 <HAL_DAC_Start_DMA+0xca>
 80051c6:	e009      	b.n	80051dc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3314      	adds	r3, #20
 80051ce:	613b      	str	r3, [r7, #16]
        break;
 80051d0:	e009      	b.n	80051e6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3318      	adds	r3, #24
 80051d8:	613b      	str	r3, [r7, #16]
        break;
 80051da:	e004      	b.n	80051e6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	331c      	adds	r3, #28
 80051e2:	613b      	str	r3, [r7, #16]
        break;
 80051e4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d111      	bne.n	8005210 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6898      	ldr	r0, [r3, #8]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	f000 fe67 	bl	8005ed8 <HAL_DMA_Start_IT>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
 800520e:	e010      	b.n	8005232 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800521e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68d8      	ldr	r0, [r3, #12]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	f000 fe55 	bl	8005ed8 <HAL_DMA_Start_IT>
 800522e:	4603      	mov	r3, r0
 8005230:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10c      	bne.n	8005258 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2201      	movs	r2, #1
 800524c:	409a      	lsls	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e005      	b.n	8005264 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f043 0204 	orr.w	r2, r3, #4
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005264:	7dfb      	ldrb	r3, [r7, #23]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	080056f9 	.word	0x080056f9
 8005274:	0800571b 	.word	0x0800571b
 8005278:	08005737 	.word	0x08005737
 800527c:	080057b5 	.word	0x080057b5
 8005280:	080057d7 	.word	0x080057d7
 8005284:	080057f3 	.word	0x080057f3

08005288 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e03e      	b.n	800531a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	43da      	mvns	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	400a      	ands	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2201      	movs	r2, #1
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43da      	mvns	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	400a      	ands	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10d      	bne.n	80052f8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 f863 	bl	80063ac <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e00c      	b.n	8005312 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f855 	bl	80063ac <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005310:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01d      	beq.n	8005380 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d018      	beq.n	8005380 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2204      	movs	r2, #4
 8005352:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f043 0201 	orr.w	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005368:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005378:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f86f 	bl	800545e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01d      	beq.n	80053c6 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d018      	beq.n	80053c6 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2204      	movs	r2, #4
 8005398:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f043 0202 	orr.w	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053be:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9ed 	bl	80057a0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e015      	b.n	8005416 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4413      	add	r3, r2
 80053fc:	3308      	adds	r3, #8
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e004      	b.n	800540c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	3314      	adds	r3, #20
 800540a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	461a      	mov	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_DAC_ConfigChannel+0x1e>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e12a      	b.n	80056ec <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	795b      	ldrb	r3, [r3, #5]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_DAC_ConfigChannel+0x2e>
 800549e:	2302      	movs	r3, #2
 80054a0:	e124      	b.n	80056ec <HAL_DAC_ConfigChannel+0x278>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2202      	movs	r2, #2
 80054ac:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d17a      	bne.n	80055ac <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80054b6:	f7fe f88b 	bl	80035d0 <HAL_GetTick>
 80054ba:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d13d      	bne.n	800553e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054c2:	e018      	b.n	80054f6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80054c4:	f7fe f884 	bl	80035d0 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d911      	bls.n	80054f6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d8:	4b86      	ldr	r3, [pc, #536]	; (80056f4 <HAL_DAC_ConfigChannel+0x280>)
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f043 0208 	orr.w	r2, r3, #8
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2203      	movs	r2, #3
 80054f0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0fa      	b.n	80056ec <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fc:	4b7d      	ldr	r3, [pc, #500]	; (80056f4 <HAL_DAC_ConfigChannel+0x280>)
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1df      	bne.n	80054c4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	6992      	ldr	r2, [r2, #24]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
 800550e:	e020      	b.n	8005552 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005510:	f7fe f85e 	bl	80035d0 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d90f      	bls.n	800553e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	2b00      	cmp	r3, #0
 8005526:	da0a      	bge.n	800553e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f043 0208 	orr.w	r2, r3, #8
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2203      	movs	r2, #3
 8005538:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e0d6      	b.n	80056ec <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	2b00      	cmp	r3, #0
 8005546:	dbe3      	blt.n	8005510 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	6992      	ldr	r2, [r2, #24]
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005562:	fa01 f303 	lsl.w	r3, r1, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	ea02 0103 	and.w	r1, r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	409a      	lsls	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	21ff      	movs	r1, #255	; 0xff
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	ea02 0103 	and.w	r1, r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	409a      	lsls	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d11d      	bne.n	80055f0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	221f      	movs	r2, #31
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2207      	movs	r2, #7
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	43db      	mvns	r3, r3
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4013      	ands	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	e00f      	b.n	800563a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d102      	bne.n	8005628 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005622:	2301      	movs	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	e008      	b.n	800563a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005630:	2301      	movs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	e001      	b.n	800563a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	43da      	mvns	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	400a      	ands	r2, r1
 8005680:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6819      	ldr	r1, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f003 0310 	and.w	r3, r3, #16
 80056cc:	22c0      	movs	r2, #192	; 0xc0
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	400a      	ands	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80056e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20008000 	.word	0x20008000

080056f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fe8b 	bl	8005422 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	711a      	strb	r2, [r3, #4]
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff fe84 	bl	8005436 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f043 0204 	orr.w	r2, r3, #4
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff fe7a 	bl	800544a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	711a      	strb	r2, [r3, #4]
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff ffce 	bl	8005764 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	711a      	strb	r2, [r3, #4]
}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff ffc7 	bl	8005778 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f043 0204 	orr.w	r2, r3, #4
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff ffbd 	bl	800578c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	711a      	strb	r2, [r3, #4]
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005828:	f7fd fed2 	bl	80035d0 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e316      	b.n	8005e66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a66      	ldr	r2, [pc, #408]	; (80059d8 <HAL_DMA_Init+0x1b8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d04a      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a65      	ldr	r2, [pc, #404]	; (80059dc <HAL_DMA_Init+0x1bc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d045      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a63      	ldr	r2, [pc, #396]	; (80059e0 <HAL_DMA_Init+0x1c0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d040      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a62      	ldr	r2, [pc, #392]	; (80059e4 <HAL_DMA_Init+0x1c4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d03b      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a60      	ldr	r2, [pc, #384]	; (80059e8 <HAL_DMA_Init+0x1c8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d036      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a5f      	ldr	r2, [pc, #380]	; (80059ec <HAL_DMA_Init+0x1cc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d031      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a5d      	ldr	r2, [pc, #372]	; (80059f0 <HAL_DMA_Init+0x1d0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d02c      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a5c      	ldr	r2, [pc, #368]	; (80059f4 <HAL_DMA_Init+0x1d4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d027      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a5a      	ldr	r2, [pc, #360]	; (80059f8 <HAL_DMA_Init+0x1d8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a59      	ldr	r2, [pc, #356]	; (80059fc <HAL_DMA_Init+0x1dc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d01d      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_DMA_Init+0x1e0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a56      	ldr	r2, [pc, #344]	; (8005a04 <HAL_DMA_Init+0x1e4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a54      	ldr	r2, [pc, #336]	; (8005a08 <HAL_DMA_Init+0x1e8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a53      	ldr	r2, [pc, #332]	; (8005a0c <HAL_DMA_Init+0x1ec>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a51      	ldr	r2, [pc, #324]	; (8005a10 <HAL_DMA_Init+0x1f0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_DMA_Init+0xb8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a50      	ldr	r2, [pc, #320]	; (8005a14 <HAL_DMA_Init+0x1f4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <HAL_DMA_Init+0xbc>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <HAL_DMA_Init+0xbe>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 813b 	beq.w	8005b5a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a37      	ldr	r2, [pc, #220]	; (80059d8 <HAL_DMA_Init+0x1b8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d04a      	beq.n	8005994 <HAL_DMA_Init+0x174>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a36      	ldr	r2, [pc, #216]	; (80059dc <HAL_DMA_Init+0x1bc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d045      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a34      	ldr	r2, [pc, #208]	; (80059e0 <HAL_DMA_Init+0x1c0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d040      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a33      	ldr	r2, [pc, #204]	; (80059e4 <HAL_DMA_Init+0x1c4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d03b      	beq.n	8005994 <HAL_DMA_Init+0x174>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a31      	ldr	r2, [pc, #196]	; (80059e8 <HAL_DMA_Init+0x1c8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d036      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a30      	ldr	r2, [pc, #192]	; (80059ec <HAL_DMA_Init+0x1cc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d031      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2e      	ldr	r2, [pc, #184]	; (80059f0 <HAL_DMA_Init+0x1d0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d02c      	beq.n	8005994 <HAL_DMA_Init+0x174>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <HAL_DMA_Init+0x1d4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d027      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2b      	ldr	r2, [pc, #172]	; (80059f8 <HAL_DMA_Init+0x1d8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d022      	beq.n	8005994 <HAL_DMA_Init+0x174>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <HAL_DMA_Init+0x1dc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d01d      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a28      	ldr	r2, [pc, #160]	; (8005a00 <HAL_DMA_Init+0x1e0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d018      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a27      	ldr	r2, [pc, #156]	; (8005a04 <HAL_DMA_Init+0x1e4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <HAL_DMA_Init+0x174>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a25      	ldr	r2, [pc, #148]	; (8005a08 <HAL_DMA_Init+0x1e8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00e      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a24      	ldr	r2, [pc, #144]	; (8005a0c <HAL_DMA_Init+0x1ec>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d009      	beq.n	8005994 <HAL_DMA_Init+0x174>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <HAL_DMA_Init+0x1f0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_DMA_Init+0x174>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <HAL_DMA_Init+0x1f4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d108      	bne.n	80059a6 <HAL_DMA_Init+0x186>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e007      	b.n	80059b6 <HAL_DMA_Init+0x196>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059b6:	e02f      	b.n	8005a18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059b8:	f7fd fe0a 	bl	80035d0 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d928      	bls.n	8005a18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2203      	movs	r2, #3
 80059d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e246      	b.n	8005e66 <HAL_DMA_Init+0x646>
 80059d8:	40020010 	.word	0x40020010
 80059dc:	40020028 	.word	0x40020028
 80059e0:	40020040 	.word	0x40020040
 80059e4:	40020058 	.word	0x40020058
 80059e8:	40020070 	.word	0x40020070
 80059ec:	40020088 	.word	0x40020088
 80059f0:	400200a0 	.word	0x400200a0
 80059f4:	400200b8 	.word	0x400200b8
 80059f8:	40020410 	.word	0x40020410
 80059fc:	40020428 	.word	0x40020428
 8005a00:	40020440 	.word	0x40020440
 8005a04:	40020458 	.word	0x40020458
 8005a08:	40020470 	.word	0x40020470
 8005a0c:	40020488 	.word	0x40020488
 8005a10:	400204a0 	.word	0x400204a0
 8005a14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1c8      	bne.n	80059b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <HAL_DMA_Init+0x420>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d107      	bne.n	8005a7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	4313      	orrs	r3, r2
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a7c:	4b71      	ldr	r3, [pc, #452]	; (8005c44 <HAL_DMA_Init+0x424>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b71      	ldr	r3, [pc, #452]	; (8005c48 <HAL_DMA_Init+0x428>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a88:	d328      	bcc.n	8005adc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b28      	cmp	r3, #40	; 0x28
 8005a90:	d903      	bls.n	8005a9a <HAL_DMA_Init+0x27a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b2e      	cmp	r3, #46	; 0x2e
 8005a98:	d917      	bls.n	8005aca <HAL_DMA_Init+0x2aa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa0:	d903      	bls.n	8005aaa <HAL_DMA_Init+0x28a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b42      	cmp	r3, #66	; 0x42
 8005aa8:	d90f      	bls.n	8005aca <HAL_DMA_Init+0x2aa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b46      	cmp	r3, #70	; 0x46
 8005ab0:	d903      	bls.n	8005aba <HAL_DMA_Init+0x29a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b48      	cmp	r3, #72	; 0x48
 8005ab8:	d907      	bls.n	8005aca <HAL_DMA_Init+0x2aa>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b4e      	cmp	r3, #78	; 0x4e
 8005ac0:	d905      	bls.n	8005ace <HAL_DMA_Init+0x2ae>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b52      	cmp	r3, #82	; 0x52
 8005ac8:	d801      	bhi.n	8005ace <HAL_DMA_Init+0x2ae>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <HAL_DMA_Init+0x2b0>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ada:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d117      	bne.n	8005b36 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00e      	beq.n	8005b36 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f002 fb33 	bl	8008184 <DMA_CheckFifoParam>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2240      	movs	r2, #64	; 0x40
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e197      	b.n	8005e66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f002 fa6e 	bl	8008020 <DMA_CalcBaseAndBitshift>
 8005b44:	4603      	mov	r3, r0
 8005b46:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	223f      	movs	r2, #63	; 0x3f
 8005b52:	409a      	lsls	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	e0cd      	b.n	8005cf6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a3b      	ldr	r2, [pc, #236]	; (8005c4c <HAL_DMA_Init+0x42c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_DMA_Init+0x38a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a39      	ldr	r2, [pc, #228]	; (8005c50 <HAL_DMA_Init+0x430>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <HAL_DMA_Init+0x38a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a38      	ldr	r2, [pc, #224]	; (8005c54 <HAL_DMA_Init+0x434>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_Init+0x38a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a36      	ldr	r2, [pc, #216]	; (8005c58 <HAL_DMA_Init+0x438>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_DMA_Init+0x38a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <HAL_DMA_Init+0x43c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_DMA_Init+0x38a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a33      	ldr	r2, [pc, #204]	; (8005c60 <HAL_DMA_Init+0x440>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_DMA_Init+0x38a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a32      	ldr	r2, [pc, #200]	; (8005c64 <HAL_DMA_Init+0x444>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_DMA_Init+0x38a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a30      	ldr	r2, [pc, #192]	; (8005c68 <HAL_DMA_Init+0x448>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_DMA_Init+0x38e>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_DMA_Init+0x390>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8097 	beq.w	8005ce4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <HAL_DMA_Init+0x42c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d021      	beq.n	8005c04 <HAL_DMA_Init+0x3e4>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <HAL_DMA_Init+0x430>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01c      	beq.n	8005c04 <HAL_DMA_Init+0x3e4>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a21      	ldr	r2, [pc, #132]	; (8005c54 <HAL_DMA_Init+0x434>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d017      	beq.n	8005c04 <HAL_DMA_Init+0x3e4>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <HAL_DMA_Init+0x438>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d012      	beq.n	8005c04 <HAL_DMA_Init+0x3e4>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_DMA_Init+0x43c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00d      	beq.n	8005c04 <HAL_DMA_Init+0x3e4>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <HAL_DMA_Init+0x440>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d008      	beq.n	8005c04 <HAL_DMA_Init+0x3e4>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <HAL_DMA_Init+0x444>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <HAL_DMA_Init+0x3e4>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <HAL_DMA_Init+0x448>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <HAL_DMA_Init+0x44c>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d020      	beq.n	8005c70 <HAL_DMA_Init+0x450>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d102      	bne.n	8005c3c <HAL_DMA_Init+0x41c>
 8005c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c3a:	e01a      	b.n	8005c72 <HAL_DMA_Init+0x452>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e018      	b.n	8005c72 <HAL_DMA_Init+0x452>
 8005c40:	fe10803f 	.word	0xfe10803f
 8005c44:	5c001000 	.word	0x5c001000
 8005c48:	ffff0000 	.word	0xffff0000
 8005c4c:	58025408 	.word	0x58025408
 8005c50:	5802541c 	.word	0x5802541c
 8005c54:	58025430 	.word	0x58025430
 8005c58:	58025444 	.word	0x58025444
 8005c5c:	58025458 	.word	0x58025458
 8005c60:	5802546c 	.word	0x5802546c
 8005c64:	58025480 	.word	0x58025480
 8005c68:	58025494 	.word	0x58025494
 8005c6c:	fffe000f 	.word	0xfffe000f
 8005c70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68d2      	ldr	r2, [r2, #12]
 8005c76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ca0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4b6e      	ldr	r3, [pc, #440]	; (8005e70 <HAL_DMA_Init+0x650>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	4a6e      	ldr	r2, [pc, #440]	; (8005e74 <HAL_DMA_Init+0x654>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	009a      	lsls	r2, r3, #2
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f002 f9a9 	bl	8008020 <DMA_CalcBaseAndBitshift>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2201      	movs	r2, #1
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	e008      	b.n	8005cf6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e0b7      	b.n	8005e66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a5f      	ldr	r2, [pc, #380]	; (8005e78 <HAL_DMA_Init+0x658>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d072      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a5d      	ldr	r2, [pc, #372]	; (8005e7c <HAL_DMA_Init+0x65c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d06d      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a5c      	ldr	r2, [pc, #368]	; (8005e80 <HAL_DMA_Init+0x660>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d068      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a5a      	ldr	r2, [pc, #360]	; (8005e84 <HAL_DMA_Init+0x664>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d063      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a59      	ldr	r2, [pc, #356]	; (8005e88 <HAL_DMA_Init+0x668>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d05e      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a57      	ldr	r2, [pc, #348]	; (8005e8c <HAL_DMA_Init+0x66c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d059      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a56      	ldr	r2, [pc, #344]	; (8005e90 <HAL_DMA_Init+0x670>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d054      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a54      	ldr	r2, [pc, #336]	; (8005e94 <HAL_DMA_Init+0x674>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d04f      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a53      	ldr	r2, [pc, #332]	; (8005e98 <HAL_DMA_Init+0x678>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d04a      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a51      	ldr	r2, [pc, #324]	; (8005e9c <HAL_DMA_Init+0x67c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d045      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a50      	ldr	r2, [pc, #320]	; (8005ea0 <HAL_DMA_Init+0x680>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d040      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a4e      	ldr	r2, [pc, #312]	; (8005ea4 <HAL_DMA_Init+0x684>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d03b      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4d      	ldr	r2, [pc, #308]	; (8005ea8 <HAL_DMA_Init+0x688>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d036      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a4b      	ldr	r2, [pc, #300]	; (8005eac <HAL_DMA_Init+0x68c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d031      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a4a      	ldr	r2, [pc, #296]	; (8005eb0 <HAL_DMA_Init+0x690>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d02c      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a48      	ldr	r2, [pc, #288]	; (8005eb4 <HAL_DMA_Init+0x694>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a47      	ldr	r2, [pc, #284]	; (8005eb8 <HAL_DMA_Init+0x698>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a45      	ldr	r2, [pc, #276]	; (8005ebc <HAL_DMA_Init+0x69c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a44      	ldr	r2, [pc, #272]	; (8005ec0 <HAL_DMA_Init+0x6a0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a42      	ldr	r2, [pc, #264]	; (8005ec4 <HAL_DMA_Init+0x6a4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a41      	ldr	r2, [pc, #260]	; (8005ec8 <HAL_DMA_Init+0x6a8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3f      	ldr	r2, [pc, #252]	; (8005ecc <HAL_DMA_Init+0x6ac>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3e      	ldr	r2, [pc, #248]	; (8005ed0 <HAL_DMA_Init+0x6b0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_DMA_Init+0x5c6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a3c      	ldr	r2, [pc, #240]	; (8005ed4 <HAL_DMA_Init+0x6b4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_DMA_Init+0x5ca>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_DMA_Init+0x5cc>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d032      	beq.n	8005e56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f002 fa43 	bl	800827c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b80      	cmp	r3, #128	; 0x80
 8005dfc:	d102      	bne.n	8005e04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d010      	beq.n	8005e44 <HAL_DMA_Init+0x624>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d80c      	bhi.n	8005e44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f002 fac0 	bl	80083b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	e008      	b.n	8005e56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	a7fdabf8 	.word	0xa7fdabf8
 8005e74:	cccccccd 	.word	0xcccccccd
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8
 8005eb8:	58025408 	.word	0x58025408
 8005ebc:	5802541c 	.word	0x5802541c
 8005ec0:	58025430 	.word	0x58025430
 8005ec4:	58025444 	.word	0x58025444
 8005ec8:	58025458 	.word	0x58025458
 8005ecc:	5802546c 	.word	0x5802546c
 8005ed0:	58025480 	.word	0x58025480
 8005ed4:	58025494 	.word	0x58025494

08005ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e226      	b.n	8006342 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_DMA_Start_IT+0x2a>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e21f      	b.n	8006342 <HAL_DMA_Start_IT+0x46a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	f040 820a 	bne.w	800632c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a68      	ldr	r2, [pc, #416]	; (80060cc <HAL_DMA_Start_IT+0x1f4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d04a      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a66      	ldr	r2, [pc, #408]	; (80060d0 <HAL_DMA_Start_IT+0x1f8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d045      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a65      	ldr	r2, [pc, #404]	; (80060d4 <HAL_DMA_Start_IT+0x1fc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d040      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a63      	ldr	r2, [pc, #396]	; (80060d8 <HAL_DMA_Start_IT+0x200>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d03b      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a62      	ldr	r2, [pc, #392]	; (80060dc <HAL_DMA_Start_IT+0x204>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d036      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a60      	ldr	r2, [pc, #384]	; (80060e0 <HAL_DMA_Start_IT+0x208>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d031      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a5f      	ldr	r2, [pc, #380]	; (80060e4 <HAL_DMA_Start_IT+0x20c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d02c      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a5d      	ldr	r2, [pc, #372]	; (80060e8 <HAL_DMA_Start_IT+0x210>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d027      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a5c      	ldr	r2, [pc, #368]	; (80060ec <HAL_DMA_Start_IT+0x214>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a5a      	ldr	r2, [pc, #360]	; (80060f0 <HAL_DMA_Start_IT+0x218>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a59      	ldr	r2, [pc, #356]	; (80060f4 <HAL_DMA_Start_IT+0x21c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a57      	ldr	r2, [pc, #348]	; (80060f8 <HAL_DMA_Start_IT+0x220>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a56      	ldr	r2, [pc, #344]	; (80060fc <HAL_DMA_Start_IT+0x224>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a54      	ldr	r2, [pc, #336]	; (8006100 <HAL_DMA_Start_IT+0x228>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a53      	ldr	r2, [pc, #332]	; (8006104 <HAL_DMA_Start_IT+0x22c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_DMA_Start_IT+0xee>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a51      	ldr	r2, [pc, #324]	; (8006108 <HAL_DMA_Start_IT+0x230>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <HAL_DMA_Start_IT+0x100>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e007      	b.n	8005fe8 <HAL_DMA_Start_IT+0x110>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f001 fe6a 	bl	8007cc8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a34      	ldr	r2, [pc, #208]	; (80060cc <HAL_DMA_Start_IT+0x1f4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d04a      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a33      	ldr	r2, [pc, #204]	; (80060d0 <HAL_DMA_Start_IT+0x1f8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d045      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	; (80060d4 <HAL_DMA_Start_IT+0x1fc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d040      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <HAL_DMA_Start_IT+0x200>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d03b      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_DMA_Start_IT+0x204>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d036      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a2d      	ldr	r2, [pc, #180]	; (80060e0 <HAL_DMA_Start_IT+0x208>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d031      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <HAL_DMA_Start_IT+0x20c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02c      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a2a      	ldr	r2, [pc, #168]	; (80060e8 <HAL_DMA_Start_IT+0x210>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d027      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a28      	ldr	r2, [pc, #160]	; (80060ec <HAL_DMA_Start_IT+0x214>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d022      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <HAL_DMA_Start_IT+0x218>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d01d      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <HAL_DMA_Start_IT+0x21c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <HAL_DMA_Start_IT+0x220>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a22      	ldr	r2, [pc, #136]	; (80060fc <HAL_DMA_Start_IT+0x224>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a21      	ldr	r2, [pc, #132]	; (8006100 <HAL_DMA_Start_IT+0x228>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1f      	ldr	r2, [pc, #124]	; (8006104 <HAL_DMA_Start_IT+0x22c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_DMA_Start_IT+0x1bc>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <HAL_DMA_Start_IT+0x230>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d101      	bne.n	8006098 <HAL_DMA_Start_IT+0x1c0>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <HAL_DMA_Start_IT+0x1c2>
 8006098:	2300      	movs	r3, #0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d036      	beq.n	800610c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 021e 	bic.w	r2, r3, #30
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0216 	orr.w	r2, r2, #22
 80060b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d03e      	beq.n	8006138 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0208 	orr.w	r2, r2, #8
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e035      	b.n	8006138 <HAL_DMA_Start_IT+0x260>
 80060cc:	40020010 	.word	0x40020010
 80060d0:	40020028 	.word	0x40020028
 80060d4:	40020040 	.word	0x40020040
 80060d8:	40020058 	.word	0x40020058
 80060dc:	40020070 	.word	0x40020070
 80060e0:	40020088 	.word	0x40020088
 80060e4:	400200a0 	.word	0x400200a0
 80060e8:	400200b8 	.word	0x400200b8
 80060ec:	40020410 	.word	0x40020410
 80060f0:	40020428 	.word	0x40020428
 80060f4:	40020440 	.word	0x40020440
 80060f8:	40020458 	.word	0x40020458
 80060fc:	40020470 	.word	0x40020470
 8006100:	40020488 	.word	0x40020488
 8006104:	400204a0 	.word	0x400204a0
 8006108:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f023 020e 	bic.w	r2, r3, #14
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 020a 	orr.w	r2, r2, #10
 800611e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0204 	orr.w	r2, r2, #4
 8006136:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a83      	ldr	r2, [pc, #524]	; (800634c <HAL_DMA_Start_IT+0x474>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d072      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a82      	ldr	r2, [pc, #520]	; (8006350 <HAL_DMA_Start_IT+0x478>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d06d      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a80      	ldr	r2, [pc, #512]	; (8006354 <HAL_DMA_Start_IT+0x47c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d068      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a7f      	ldr	r2, [pc, #508]	; (8006358 <HAL_DMA_Start_IT+0x480>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d063      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a7d      	ldr	r2, [pc, #500]	; (800635c <HAL_DMA_Start_IT+0x484>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d05e      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7c      	ldr	r2, [pc, #496]	; (8006360 <HAL_DMA_Start_IT+0x488>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d059      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a7a      	ldr	r2, [pc, #488]	; (8006364 <HAL_DMA_Start_IT+0x48c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d054      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a79      	ldr	r2, [pc, #484]	; (8006368 <HAL_DMA_Start_IT+0x490>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d04f      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a77      	ldr	r2, [pc, #476]	; (800636c <HAL_DMA_Start_IT+0x494>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a76      	ldr	r2, [pc, #472]	; (8006370 <HAL_DMA_Start_IT+0x498>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a74      	ldr	r2, [pc, #464]	; (8006374 <HAL_DMA_Start_IT+0x49c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a73      	ldr	r2, [pc, #460]	; (8006378 <HAL_DMA_Start_IT+0x4a0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a71      	ldr	r2, [pc, #452]	; (800637c <HAL_DMA_Start_IT+0x4a4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a70      	ldr	r2, [pc, #448]	; (8006380 <HAL_DMA_Start_IT+0x4a8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a6e      	ldr	r2, [pc, #440]	; (8006384 <HAL_DMA_Start_IT+0x4ac>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a6d      	ldr	r2, [pc, #436]	; (8006388 <HAL_DMA_Start_IT+0x4b0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6b      	ldr	r2, [pc, #428]	; (800638c <HAL_DMA_Start_IT+0x4b4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6a      	ldr	r2, [pc, #424]	; (8006390 <HAL_DMA_Start_IT+0x4b8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a68      	ldr	r2, [pc, #416]	; (8006394 <HAL_DMA_Start_IT+0x4bc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a67      	ldr	r2, [pc, #412]	; (8006398 <HAL_DMA_Start_IT+0x4c0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a65      	ldr	r2, [pc, #404]	; (800639c <HAL_DMA_Start_IT+0x4c4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a64      	ldr	r2, [pc, #400]	; (80063a0 <HAL_DMA_Start_IT+0x4c8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a62      	ldr	r2, [pc, #392]	; (80063a4 <HAL_DMA_Start_IT+0x4cc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_DMA_Start_IT+0x350>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a61      	ldr	r2, [pc, #388]	; (80063a8 <HAL_DMA_Start_IT+0x4d0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <HAL_DMA_Start_IT+0x354>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <HAL_DMA_Start_IT+0x356>
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01a      	beq.n	8006268 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800624e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006266:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a37      	ldr	r2, [pc, #220]	; (800634c <HAL_DMA_Start_IT+0x474>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d04a      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a36      	ldr	r2, [pc, #216]	; (8006350 <HAL_DMA_Start_IT+0x478>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d045      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a34      	ldr	r2, [pc, #208]	; (8006354 <HAL_DMA_Start_IT+0x47c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d040      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	; (8006358 <HAL_DMA_Start_IT+0x480>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d03b      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a31      	ldr	r2, [pc, #196]	; (800635c <HAL_DMA_Start_IT+0x484>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d036      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a30      	ldr	r2, [pc, #192]	; (8006360 <HAL_DMA_Start_IT+0x488>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d031      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2e      	ldr	r2, [pc, #184]	; (8006364 <HAL_DMA_Start_IT+0x48c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02c      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	; (8006368 <HAL_DMA_Start_IT+0x490>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d027      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2b      	ldr	r2, [pc, #172]	; (800636c <HAL_DMA_Start_IT+0x494>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2a      	ldr	r2, [pc, #168]	; (8006370 <HAL_DMA_Start_IT+0x498>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d01d      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a28      	ldr	r2, [pc, #160]	; (8006374 <HAL_DMA_Start_IT+0x49c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a27      	ldr	r2, [pc, #156]	; (8006378 <HAL_DMA_Start_IT+0x4a0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	; (800637c <HAL_DMA_Start_IT+0x4a4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a24      	ldr	r2, [pc, #144]	; (8006380 <HAL_DMA_Start_IT+0x4a8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a22      	ldr	r2, [pc, #136]	; (8006384 <HAL_DMA_Start_IT+0x4ac>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_DMA_Start_IT+0x430>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a21      	ldr	r2, [pc, #132]	; (8006388 <HAL_DMA_Start_IT+0x4b0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d108      	bne.n	800631a <HAL_DMA_Start_IT+0x442>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e012      	b.n	8006340 <HAL_DMA_Start_IT+0x468>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e009      	b.n	8006340 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006332:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40020010 	.word	0x40020010
 8006350:	40020028 	.word	0x40020028
 8006354:	40020040 	.word	0x40020040
 8006358:	40020058 	.word	0x40020058
 800635c:	40020070 	.word	0x40020070
 8006360:	40020088 	.word	0x40020088
 8006364:	400200a0 	.word	0x400200a0
 8006368:	400200b8 	.word	0x400200b8
 800636c:	40020410 	.word	0x40020410
 8006370:	40020428 	.word	0x40020428
 8006374:	40020440 	.word	0x40020440
 8006378:	40020458 	.word	0x40020458
 800637c:	40020470 	.word	0x40020470
 8006380:	40020488 	.word	0x40020488
 8006384:	400204a0 	.word	0x400204a0
 8006388:	400204b8 	.word	0x400204b8
 800638c:	58025408 	.word	0x58025408
 8006390:	5802541c 	.word	0x5802541c
 8006394:	58025430 	.word	0x58025430
 8006398:	58025444 	.word	0x58025444
 800639c:	58025458 	.word	0x58025458
 80063a0:	5802546c 	.word	0x5802546c
 80063a4:	58025480 	.word	0x58025480
 80063a8:	58025494 	.word	0x58025494

080063ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063b4:	f7fd f90c 	bl	80035d0 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e2dc      	b.n	800697e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d008      	beq.n	80063e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2280      	movs	r2, #128	; 0x80
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e2cd      	b.n	800697e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a76      	ldr	r2, [pc, #472]	; (80065c0 <HAL_DMA_Abort+0x214>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a74      	ldr	r2, [pc, #464]	; (80065c4 <HAL_DMA_Abort+0x218>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a73      	ldr	r2, [pc, #460]	; (80065c8 <HAL_DMA_Abort+0x21c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a71      	ldr	r2, [pc, #452]	; (80065cc <HAL_DMA_Abort+0x220>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a70      	ldr	r2, [pc, #448]	; (80065d0 <HAL_DMA_Abort+0x224>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a6e      	ldr	r2, [pc, #440]	; (80065d4 <HAL_DMA_Abort+0x228>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a6d      	ldr	r2, [pc, #436]	; (80065d8 <HAL_DMA_Abort+0x22c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a6b      	ldr	r2, [pc, #428]	; (80065dc <HAL_DMA_Abort+0x230>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6a      	ldr	r2, [pc, #424]	; (80065e0 <HAL_DMA_Abort+0x234>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a68      	ldr	r2, [pc, #416]	; (80065e4 <HAL_DMA_Abort+0x238>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <HAL_DMA_Abort+0x23c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a65      	ldr	r2, [pc, #404]	; (80065ec <HAL_DMA_Abort+0x240>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a64      	ldr	r2, [pc, #400]	; (80065f0 <HAL_DMA_Abort+0x244>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a62      	ldr	r2, [pc, #392]	; (80065f4 <HAL_DMA_Abort+0x248>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a61      	ldr	r2, [pc, #388]	; (80065f8 <HAL_DMA_Abort+0x24c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_DMA_Abort+0xd6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a5f      	ldr	r2, [pc, #380]	; (80065fc <HAL_DMA_Abort+0x250>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_DMA_Abort+0xda>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <HAL_DMA_Abort+0xdc>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d013      	beq.n	80064b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 021e 	bic.w	r2, r2, #30
 800649a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e00a      	b.n	80064ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 020e 	bic.w	r2, r2, #14
 80064c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <HAL_DMA_Abort+0x214>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d072      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a3a      	ldr	r2, [pc, #232]	; (80065c4 <HAL_DMA_Abort+0x218>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d06d      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a39      	ldr	r2, [pc, #228]	; (80065c8 <HAL_DMA_Abort+0x21c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d068      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a37      	ldr	r2, [pc, #220]	; (80065cc <HAL_DMA_Abort+0x220>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d063      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a36      	ldr	r2, [pc, #216]	; (80065d0 <HAL_DMA_Abort+0x224>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d05e      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a34      	ldr	r2, [pc, #208]	; (80065d4 <HAL_DMA_Abort+0x228>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d059      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a33      	ldr	r2, [pc, #204]	; (80065d8 <HAL_DMA_Abort+0x22c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d054      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a31      	ldr	r2, [pc, #196]	; (80065dc <HAL_DMA_Abort+0x230>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d04f      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <HAL_DMA_Abort+0x234>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2e      	ldr	r2, [pc, #184]	; (80065e4 <HAL_DMA_Abort+0x238>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2d      	ldr	r2, [pc, #180]	; (80065e8 <HAL_DMA_Abort+0x23c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2b      	ldr	r2, [pc, #172]	; (80065ec <HAL_DMA_Abort+0x240>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <HAL_DMA_Abort+0x244>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a28      	ldr	r2, [pc, #160]	; (80065f4 <HAL_DMA_Abort+0x248>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <HAL_DMA_Abort+0x24c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a25      	ldr	r2, [pc, #148]	; (80065fc <HAL_DMA_Abort+0x250>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a24      	ldr	r2, [pc, #144]	; (8006600 <HAL_DMA_Abort+0x254>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a22      	ldr	r2, [pc, #136]	; (8006604 <HAL_DMA_Abort+0x258>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a21      	ldr	r2, [pc, #132]	; (8006608 <HAL_DMA_Abort+0x25c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1f      	ldr	r2, [pc, #124]	; (800660c <HAL_DMA_Abort+0x260>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <HAL_DMA_Abort+0x264>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <HAL_DMA_Abort+0x268>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <HAL_DMA_Abort+0x26c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_Abort+0x20e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a19      	ldr	r2, [pc, #100]	; (800661c <HAL_DMA_Abort+0x270>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d132      	bne.n	8006620 <HAL_DMA_Abort+0x274>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e031      	b.n	8006622 <HAL_DMA_Abort+0x276>
 80065be:	bf00      	nop
 80065c0:	40020010 	.word	0x40020010
 80065c4:	40020028 	.word	0x40020028
 80065c8:	40020040 	.word	0x40020040
 80065cc:	40020058 	.word	0x40020058
 80065d0:	40020070 	.word	0x40020070
 80065d4:	40020088 	.word	0x40020088
 80065d8:	400200a0 	.word	0x400200a0
 80065dc:	400200b8 	.word	0x400200b8
 80065e0:	40020410 	.word	0x40020410
 80065e4:	40020428 	.word	0x40020428
 80065e8:	40020440 	.word	0x40020440
 80065ec:	40020458 	.word	0x40020458
 80065f0:	40020470 	.word	0x40020470
 80065f4:	40020488 	.word	0x40020488
 80065f8:	400204a0 	.word	0x400204a0
 80065fc:	400204b8 	.word	0x400204b8
 8006600:	58025408 	.word	0x58025408
 8006604:	5802541c 	.word	0x5802541c
 8006608:	58025430 	.word	0x58025430
 800660c:	58025444 	.word	0x58025444
 8006610:	58025458 	.word	0x58025458
 8006614:	5802546c 	.word	0x5802546c
 8006618:	58025480 	.word	0x58025480
 800661c:	58025494 	.word	0x58025494
 8006620:	2300      	movs	r3, #0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006634:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6d      	ldr	r2, [pc, #436]	; (80067f0 <HAL_DMA_Abort+0x444>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d04a      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6b      	ldr	r2, [pc, #428]	; (80067f4 <HAL_DMA_Abort+0x448>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d045      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6a      	ldr	r2, [pc, #424]	; (80067f8 <HAL_DMA_Abort+0x44c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d040      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a68      	ldr	r2, [pc, #416]	; (80067fc <HAL_DMA_Abort+0x450>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d03b      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a67      	ldr	r2, [pc, #412]	; (8006800 <HAL_DMA_Abort+0x454>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d036      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a65      	ldr	r2, [pc, #404]	; (8006804 <HAL_DMA_Abort+0x458>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d031      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a64      	ldr	r2, [pc, #400]	; (8006808 <HAL_DMA_Abort+0x45c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d02c      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a62      	ldr	r2, [pc, #392]	; (800680c <HAL_DMA_Abort+0x460>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d027      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a61      	ldr	r2, [pc, #388]	; (8006810 <HAL_DMA_Abort+0x464>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d022      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5f      	ldr	r2, [pc, #380]	; (8006814 <HAL_DMA_Abort+0x468>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01d      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a5e      	ldr	r2, [pc, #376]	; (8006818 <HAL_DMA_Abort+0x46c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d018      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5c      	ldr	r2, [pc, #368]	; (800681c <HAL_DMA_Abort+0x470>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a5b      	ldr	r2, [pc, #364]	; (8006820 <HAL_DMA_Abort+0x474>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00e      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a59      	ldr	r2, [pc, #356]	; (8006824 <HAL_DMA_Abort+0x478>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d009      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a58      	ldr	r2, [pc, #352]	; (8006828 <HAL_DMA_Abort+0x47c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_DMA_Abort+0x32a>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a56      	ldr	r2, [pc, #344]	; (800682c <HAL_DMA_Abort+0x480>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d108      	bne.n	80066e8 <HAL_DMA_Abort+0x33c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e007      	b.n	80066f8 <HAL_DMA_Abort+0x34c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066f8:	e013      	b.n	8006722 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066fa:	f7fc ff69 	bl	80035d0 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b05      	cmp	r3, #5
 8006706:	d90c      	bls.n	8006722 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2203      	movs	r2, #3
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e12d      	b.n	800697e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e5      	bne.n	80066fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2f      	ldr	r2, [pc, #188]	; (80067f0 <HAL_DMA_Abort+0x444>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d04a      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a2d      	ldr	r2, [pc, #180]	; (80067f4 <HAL_DMA_Abort+0x448>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d045      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2c      	ldr	r2, [pc, #176]	; (80067f8 <HAL_DMA_Abort+0x44c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d040      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2a      	ldr	r2, [pc, #168]	; (80067fc <HAL_DMA_Abort+0x450>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d03b      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a29      	ldr	r2, [pc, #164]	; (8006800 <HAL_DMA_Abort+0x454>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d036      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <HAL_DMA_Abort+0x458>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d031      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a26      	ldr	r2, [pc, #152]	; (8006808 <HAL_DMA_Abort+0x45c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d02c      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a24      	ldr	r2, [pc, #144]	; (800680c <HAL_DMA_Abort+0x460>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d027      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a23      	ldr	r2, [pc, #140]	; (8006810 <HAL_DMA_Abort+0x464>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d022      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a21      	ldr	r2, [pc, #132]	; (8006814 <HAL_DMA_Abort+0x468>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d01d      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a20      	ldr	r2, [pc, #128]	; (8006818 <HAL_DMA_Abort+0x46c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d018      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1e      	ldr	r2, [pc, #120]	; (800681c <HAL_DMA_Abort+0x470>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d013      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <HAL_DMA_Abort+0x474>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <HAL_DMA_Abort+0x478>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <HAL_DMA_Abort+0x47c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_DMA_Abort+0x422>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_DMA_Abort+0x480>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d101      	bne.n	80067d2 <HAL_DMA_Abort+0x426>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <HAL_DMA_Abort+0x428>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02b      	beq.n	8006830 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	223f      	movs	r2, #63	; 0x3f
 80067e8:	409a      	lsls	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
 80067ee:	e02a      	b.n	8006846 <HAL_DMA_Abort+0x49a>
 80067f0:	40020010 	.word	0x40020010
 80067f4:	40020028 	.word	0x40020028
 80067f8:	40020040 	.word	0x40020040
 80067fc:	40020058 	.word	0x40020058
 8006800:	40020070 	.word	0x40020070
 8006804:	40020088 	.word	0x40020088
 8006808:	400200a0 	.word	0x400200a0
 800680c:	400200b8 	.word	0x400200b8
 8006810:	40020410 	.word	0x40020410
 8006814:	40020428 	.word	0x40020428
 8006818:	40020440 	.word	0x40020440
 800681c:	40020458 	.word	0x40020458
 8006820:	40020470 	.word	0x40020470
 8006824:	40020488 	.word	0x40020488
 8006828:	400204a0 	.word	0x400204a0
 800682c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006834:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2201      	movs	r2, #1
 8006840:	409a      	lsls	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a4f      	ldr	r2, [pc, #316]	; (8006988 <HAL_DMA_Abort+0x5dc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d072      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a4d      	ldr	r2, [pc, #308]	; (800698c <HAL_DMA_Abort+0x5e0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d06d      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4c      	ldr	r2, [pc, #304]	; (8006990 <HAL_DMA_Abort+0x5e4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d068      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a4a      	ldr	r2, [pc, #296]	; (8006994 <HAL_DMA_Abort+0x5e8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d063      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a49      	ldr	r2, [pc, #292]	; (8006998 <HAL_DMA_Abort+0x5ec>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d05e      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a47      	ldr	r2, [pc, #284]	; (800699c <HAL_DMA_Abort+0x5f0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d059      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a46      	ldr	r2, [pc, #280]	; (80069a0 <HAL_DMA_Abort+0x5f4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d054      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a44      	ldr	r2, [pc, #272]	; (80069a4 <HAL_DMA_Abort+0x5f8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d04f      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a43      	ldr	r2, [pc, #268]	; (80069a8 <HAL_DMA_Abort+0x5fc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d04a      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a41      	ldr	r2, [pc, #260]	; (80069ac <HAL_DMA_Abort+0x600>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d045      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a40      	ldr	r2, [pc, #256]	; (80069b0 <HAL_DMA_Abort+0x604>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d040      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a3e      	ldr	r2, [pc, #248]	; (80069b4 <HAL_DMA_Abort+0x608>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d03b      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a3d      	ldr	r2, [pc, #244]	; (80069b8 <HAL_DMA_Abort+0x60c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d036      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <HAL_DMA_Abort+0x610>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d031      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <HAL_DMA_Abort+0x614>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d02c      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a38      	ldr	r2, [pc, #224]	; (80069c4 <HAL_DMA_Abort+0x618>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d027      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a37      	ldr	r2, [pc, #220]	; (80069c8 <HAL_DMA_Abort+0x61c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d022      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a35      	ldr	r2, [pc, #212]	; (80069cc <HAL_DMA_Abort+0x620>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d01d      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a34      	ldr	r2, [pc, #208]	; (80069d0 <HAL_DMA_Abort+0x624>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d018      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a32      	ldr	r2, [pc, #200]	; (80069d4 <HAL_DMA_Abort+0x628>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a31      	ldr	r2, [pc, #196]	; (80069d8 <HAL_DMA_Abort+0x62c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d00e      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a2f      	ldr	r2, [pc, #188]	; (80069dc <HAL_DMA_Abort+0x630>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2e      	ldr	r2, [pc, #184]	; (80069e0 <HAL_DMA_Abort+0x634>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d004      	beq.n	8006936 <HAL_DMA_Abort+0x58a>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2c      	ldr	r2, [pc, #176]	; (80069e4 <HAL_DMA_Abort+0x638>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d101      	bne.n	800693a <HAL_DMA_Abort+0x58e>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <HAL_DMA_Abort+0x590>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d015      	beq.n	800696c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006948:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00c      	beq.n	800696c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006960:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800696a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
 80069c8:	58025408 	.word	0x58025408
 80069cc:	5802541c 	.word	0x5802541c
 80069d0:	58025430 	.word	0x58025430
 80069d4:	58025444 	.word	0x58025444
 80069d8:	58025458 	.word	0x58025458
 80069dc:	5802546c 	.word	0x5802546c
 80069e0:	58025480 	.word	0x58025480
 80069e4:	58025494 	.word	0x58025494

080069e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e237      	b.n	8006e6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d004      	beq.n	8006a10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2280      	movs	r2, #128	; 0x80
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e22c      	b.n	8006e6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a5c      	ldr	r2, [pc, #368]	; (8006b88 <HAL_DMA_Abort_IT+0x1a0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d04a      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a5b      	ldr	r2, [pc, #364]	; (8006b8c <HAL_DMA_Abort_IT+0x1a4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d045      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a59      	ldr	r2, [pc, #356]	; (8006b90 <HAL_DMA_Abort_IT+0x1a8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d040      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a58      	ldr	r2, [pc, #352]	; (8006b94 <HAL_DMA_Abort_IT+0x1ac>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d03b      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a56      	ldr	r2, [pc, #344]	; (8006b98 <HAL_DMA_Abort_IT+0x1b0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d036      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a55      	ldr	r2, [pc, #340]	; (8006b9c <HAL_DMA_Abort_IT+0x1b4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d031      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a53      	ldr	r2, [pc, #332]	; (8006ba0 <HAL_DMA_Abort_IT+0x1b8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d02c      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a52      	ldr	r2, [pc, #328]	; (8006ba4 <HAL_DMA_Abort_IT+0x1bc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d027      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a50      	ldr	r2, [pc, #320]	; (8006ba8 <HAL_DMA_Abort_IT+0x1c0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d022      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a4f      	ldr	r2, [pc, #316]	; (8006bac <HAL_DMA_Abort_IT+0x1c4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d01d      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a4d      	ldr	r2, [pc, #308]	; (8006bb0 <HAL_DMA_Abort_IT+0x1c8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d018      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a4c      	ldr	r2, [pc, #304]	; (8006bb4 <HAL_DMA_Abort_IT+0x1cc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d013      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a4a      	ldr	r2, [pc, #296]	; (8006bb8 <HAL_DMA_Abort_IT+0x1d0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00e      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a49      	ldr	r2, [pc, #292]	; (8006bbc <HAL_DMA_Abort_IT+0x1d4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d009      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a47      	ldr	r2, [pc, #284]	; (8006bc0 <HAL_DMA_Abort_IT+0x1d8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d004      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0xc8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a46      	ldr	r2, [pc, #280]	; (8006bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_DMA_Abort_IT+0xcc>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <HAL_DMA_Abort_IT+0xce>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 8086 	beq.w	8006bc8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2204      	movs	r2, #4
 8006ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2f      	ldr	r2, [pc, #188]	; (8006b88 <HAL_DMA_Abort_IT+0x1a0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d04a      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2e      	ldr	r2, [pc, #184]	; (8006b8c <HAL_DMA_Abort_IT+0x1a4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d045      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2c      	ldr	r2, [pc, #176]	; (8006b90 <HAL_DMA_Abort_IT+0x1a8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d040      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2b      	ldr	r2, [pc, #172]	; (8006b94 <HAL_DMA_Abort_IT+0x1ac>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d03b      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a29      	ldr	r2, [pc, #164]	; (8006b98 <HAL_DMA_Abort_IT+0x1b0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d036      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <HAL_DMA_Abort_IT+0x1b4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d031      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <HAL_DMA_Abort_IT+0x1b8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d02c      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a25      	ldr	r2, [pc, #148]	; (8006ba4 <HAL_DMA_Abort_IT+0x1bc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d027      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a23      	ldr	r2, [pc, #140]	; (8006ba8 <HAL_DMA_Abort_IT+0x1c0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d022      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a22      	ldr	r2, [pc, #136]	; (8006bac <HAL_DMA_Abort_IT+0x1c4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d01d      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <HAL_DMA_Abort_IT+0x1c8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d018      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <HAL_DMA_Abort_IT+0x1cc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <HAL_DMA_Abort_IT+0x1d0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00e      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1c      	ldr	r2, [pc, #112]	; (8006bbc <HAL_DMA_Abort_IT+0x1d4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d009      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_DMA_Abort_IT+0x1d8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d004      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d108      	bne.n	8006b76 <HAL_DMA_Abort_IT+0x18e>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	e178      	b.n	8006e68 <HAL_DMA_Abort_IT+0x480>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e16f      	b.n	8006e68 <HAL_DMA_Abort_IT+0x480>
 8006b88:	40020010 	.word	0x40020010
 8006b8c:	40020028 	.word	0x40020028
 8006b90:	40020040 	.word	0x40020040
 8006b94:	40020058 	.word	0x40020058
 8006b98:	40020070 	.word	0x40020070
 8006b9c:	40020088 	.word	0x40020088
 8006ba0:	400200a0 	.word	0x400200a0
 8006ba4:	400200b8 	.word	0x400200b8
 8006ba8:	40020410 	.word	0x40020410
 8006bac:	40020428 	.word	0x40020428
 8006bb0:	40020440 	.word	0x40020440
 8006bb4:	40020458 	.word	0x40020458
 8006bb8:	40020470 	.word	0x40020470
 8006bbc:	40020488 	.word	0x40020488
 8006bc0:	400204a0 	.word	0x400204a0
 8006bc4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 020e 	bic.w	r2, r2, #14
 8006bd6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a6c      	ldr	r2, [pc, #432]	; (8006d90 <HAL_DMA_Abort_IT+0x3a8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d04a      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a6b      	ldr	r2, [pc, #428]	; (8006d94 <HAL_DMA_Abort_IT+0x3ac>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d045      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a69      	ldr	r2, [pc, #420]	; (8006d98 <HAL_DMA_Abort_IT+0x3b0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d040      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a68      	ldr	r2, [pc, #416]	; (8006d9c <HAL_DMA_Abort_IT+0x3b4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d03b      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a66      	ldr	r2, [pc, #408]	; (8006da0 <HAL_DMA_Abort_IT+0x3b8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d036      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a65      	ldr	r2, [pc, #404]	; (8006da4 <HAL_DMA_Abort_IT+0x3bc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d031      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a63      	ldr	r2, [pc, #396]	; (8006da8 <HAL_DMA_Abort_IT+0x3c0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d02c      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a62      	ldr	r2, [pc, #392]	; (8006dac <HAL_DMA_Abort_IT+0x3c4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d027      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a60      	ldr	r2, [pc, #384]	; (8006db0 <HAL_DMA_Abort_IT+0x3c8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d022      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5f      	ldr	r2, [pc, #380]	; (8006db4 <HAL_DMA_Abort_IT+0x3cc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d01d      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a5d      	ldr	r2, [pc, #372]	; (8006db8 <HAL_DMA_Abort_IT+0x3d0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d018      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a5c      	ldr	r2, [pc, #368]	; (8006dbc <HAL_DMA_Abort_IT+0x3d4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d013      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a5a      	ldr	r2, [pc, #360]	; (8006dc0 <HAL_DMA_Abort_IT+0x3d8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00e      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a59      	ldr	r2, [pc, #356]	; (8006dc4 <HAL_DMA_Abort_IT+0x3dc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d009      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a57      	ldr	r2, [pc, #348]	; (8006dc8 <HAL_DMA_Abort_IT+0x3e0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x290>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a56      	ldr	r2, [pc, #344]	; (8006dcc <HAL_DMA_Abort_IT+0x3e4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d108      	bne.n	8006c8a <HAL_DMA_Abort_IT+0x2a2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e007      	b.n	8006c9a <HAL_DMA_Abort_IT+0x2b2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3c      	ldr	r2, [pc, #240]	; (8006d90 <HAL_DMA_Abort_IT+0x3a8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d072      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3a      	ldr	r2, [pc, #232]	; (8006d94 <HAL_DMA_Abort_IT+0x3ac>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d06d      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a39      	ldr	r2, [pc, #228]	; (8006d98 <HAL_DMA_Abort_IT+0x3b0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d068      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a37      	ldr	r2, [pc, #220]	; (8006d9c <HAL_DMA_Abort_IT+0x3b4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d063      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a36      	ldr	r2, [pc, #216]	; (8006da0 <HAL_DMA_Abort_IT+0x3b8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d05e      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a34      	ldr	r2, [pc, #208]	; (8006da4 <HAL_DMA_Abort_IT+0x3bc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d059      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a33      	ldr	r2, [pc, #204]	; (8006da8 <HAL_DMA_Abort_IT+0x3c0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d054      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a31      	ldr	r2, [pc, #196]	; (8006dac <HAL_DMA_Abort_IT+0x3c4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d04f      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a30      	ldr	r2, [pc, #192]	; (8006db0 <HAL_DMA_Abort_IT+0x3c8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d04a      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2e      	ldr	r2, [pc, #184]	; (8006db4 <HAL_DMA_Abort_IT+0x3cc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d045      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <HAL_DMA_Abort_IT+0x3d0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d040      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <HAL_DMA_Abort_IT+0x3d4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d03b      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <HAL_DMA_Abort_IT+0x3d8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d036      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a28      	ldr	r2, [pc, #160]	; (8006dc4 <HAL_DMA_Abort_IT+0x3dc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d031      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <HAL_DMA_Abort_IT+0x3e0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d02c      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <HAL_DMA_Abort_IT+0x3e4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d027      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <HAL_DMA_Abort_IT+0x3e8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d022      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <HAL_DMA_Abort_IT+0x3ec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01d      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <HAL_DMA_Abort_IT+0x3f0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d018      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <HAL_DMA_Abort_IT+0x3f4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <HAL_DMA_Abort_IT+0x3f8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <HAL_DMA_Abort_IT+0x3fc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <HAL_DMA_Abort_IT+0x400>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x3a2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_DMA_Abort_IT+0x404>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d132      	bne.n	8006df0 <HAL_DMA_Abort_IT+0x408>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e031      	b.n	8006df2 <HAL_DMA_Abort_IT+0x40a>
 8006d8e:	bf00      	nop
 8006d90:	40020010 	.word	0x40020010
 8006d94:	40020028 	.word	0x40020028
 8006d98:	40020040 	.word	0x40020040
 8006d9c:	40020058 	.word	0x40020058
 8006da0:	40020070 	.word	0x40020070
 8006da4:	40020088 	.word	0x40020088
 8006da8:	400200a0 	.word	0x400200a0
 8006dac:	400200b8 	.word	0x400200b8
 8006db0:	40020410 	.word	0x40020410
 8006db4:	40020428 	.word	0x40020428
 8006db8:	40020440 	.word	0x40020440
 8006dbc:	40020458 	.word	0x40020458
 8006dc0:	40020470 	.word	0x40020470
 8006dc4:	40020488 	.word	0x40020488
 8006dc8:	400204a0 	.word	0x400204a0
 8006dcc:	400204b8 	.word	0x400204b8
 8006dd0:	58025408 	.word	0x58025408
 8006dd4:	5802541c 	.word	0x5802541c
 8006dd8:	58025430 	.word	0x58025430
 8006ddc:	58025444 	.word	0x58025444
 8006de0:	58025458 	.word	0x58025458
 8006de4:	5802546c 	.word	0x5802546c
 8006de8:	58025480 	.word	0x58025480
 8006dec:	58025494 	.word	0x58025494
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d028      	beq.n	8006e48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	2201      	movs	r2, #1
 8006e16:	409a      	lsls	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop

08006e74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e80:	4b67      	ldr	r3, [pc, #412]	; (8007020 <HAL_DMA_IRQHandler+0x1ac>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a67      	ldr	r2, [pc, #412]	; (8007024 <HAL_DMA_IRQHandler+0x1b0>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	0a9b      	lsrs	r3, r3, #10
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a5f      	ldr	r2, [pc, #380]	; (8007028 <HAL_DMA_IRQHandler+0x1b4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d04a      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a5d      	ldr	r2, [pc, #372]	; (800702c <HAL_DMA_IRQHandler+0x1b8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d045      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a5c      	ldr	r2, [pc, #368]	; (8007030 <HAL_DMA_IRQHandler+0x1bc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d040      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a5a      	ldr	r2, [pc, #360]	; (8007034 <HAL_DMA_IRQHandler+0x1c0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d03b      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a59      	ldr	r2, [pc, #356]	; (8007038 <HAL_DMA_IRQHandler+0x1c4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d036      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a57      	ldr	r2, [pc, #348]	; (800703c <HAL_DMA_IRQHandler+0x1c8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d031      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a56      	ldr	r2, [pc, #344]	; (8007040 <HAL_DMA_IRQHandler+0x1cc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d02c      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a54      	ldr	r2, [pc, #336]	; (8007044 <HAL_DMA_IRQHandler+0x1d0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d027      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a53      	ldr	r2, [pc, #332]	; (8007048 <HAL_DMA_IRQHandler+0x1d4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d022      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a51      	ldr	r2, [pc, #324]	; (800704c <HAL_DMA_IRQHandler+0x1d8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d01d      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a50      	ldr	r2, [pc, #320]	; (8007050 <HAL_DMA_IRQHandler+0x1dc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d018      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a4e      	ldr	r2, [pc, #312]	; (8007054 <HAL_DMA_IRQHandler+0x1e0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d013      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a4d      	ldr	r2, [pc, #308]	; (8007058 <HAL_DMA_IRQHandler+0x1e4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00e      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a4b      	ldr	r2, [pc, #300]	; (800705c <HAL_DMA_IRQHandler+0x1e8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d009      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a4a      	ldr	r2, [pc, #296]	; (8007060 <HAL_DMA_IRQHandler+0x1ec>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d004      	beq.n	8006f46 <HAL_DMA_IRQHandler+0xd2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a48      	ldr	r2, [pc, #288]	; (8007064 <HAL_DMA_IRQHandler+0x1f0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d101      	bne.n	8006f4a <HAL_DMA_IRQHandler+0xd6>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <HAL_DMA_IRQHandler+0xd8>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 842b 	beq.w	80077a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	409a      	lsls	r2, r3
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 80a2 	beq.w	80070ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2e      	ldr	r2, [pc, #184]	; (8007028 <HAL_DMA_IRQHandler+0x1b4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d04a      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2d      	ldr	r2, [pc, #180]	; (800702c <HAL_DMA_IRQHandler+0x1b8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d045      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2b      	ldr	r2, [pc, #172]	; (8007030 <HAL_DMA_IRQHandler+0x1bc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d040      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2a      	ldr	r2, [pc, #168]	; (8007034 <HAL_DMA_IRQHandler+0x1c0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d03b      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a28      	ldr	r2, [pc, #160]	; (8007038 <HAL_DMA_IRQHandler+0x1c4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d036      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a27      	ldr	r2, [pc, #156]	; (800703c <HAL_DMA_IRQHandler+0x1c8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d031      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a25      	ldr	r2, [pc, #148]	; (8007040 <HAL_DMA_IRQHandler+0x1cc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d02c      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a24      	ldr	r2, [pc, #144]	; (8007044 <HAL_DMA_IRQHandler+0x1d0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d027      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a22      	ldr	r2, [pc, #136]	; (8007048 <HAL_DMA_IRQHandler+0x1d4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d022      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_DMA_IRQHandler+0x1d8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d01d      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <HAL_DMA_IRQHandler+0x1dc>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d018      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <HAL_DMA_IRQHandler+0x1e0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d013      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1c      	ldr	r2, [pc, #112]	; (8007058 <HAL_DMA_IRQHandler+0x1e4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00e      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1b      	ldr	r2, [pc, #108]	; (800705c <HAL_DMA_IRQHandler+0x1e8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a19      	ldr	r2, [pc, #100]	; (8007060 <HAL_DMA_IRQHandler+0x1ec>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_DMA_IRQHandler+0x194>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a18      	ldr	r2, [pc, #96]	; (8007064 <HAL_DMA_IRQHandler+0x1f0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d12f      	bne.n	8007068 <HAL_DMA_IRQHandler+0x1f4>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf14      	ite	ne
 8007016:	2301      	movne	r3, #1
 8007018:	2300      	moveq	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	e02e      	b.n	800707c <HAL_DMA_IRQHandler+0x208>
 800701e:	bf00      	nop
 8007020:	24000088 	.word	0x24000088
 8007024:	1b4e81b5 	.word	0x1b4e81b5
 8007028:	40020010 	.word	0x40020010
 800702c:	40020028 	.word	0x40020028
 8007030:	40020040 	.word	0x40020040
 8007034:	40020058 	.word	0x40020058
 8007038:	40020070 	.word	0x40020070
 800703c:	40020088 	.word	0x40020088
 8007040:	400200a0 	.word	0x400200a0
 8007044:	400200b8 	.word	0x400200b8
 8007048:	40020410 	.word	0x40020410
 800704c:	40020428 	.word	0x40020428
 8007050:	40020440 	.word	0x40020440
 8007054:	40020458 	.word	0x40020458
 8007058:	40020470 	.word	0x40020470
 800705c:	40020488 	.word	0x40020488
 8007060:	400204a0 	.word	0x400204a0
 8007064:	400204b8 	.word	0x400204b8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0308 	and.w	r3, r3, #8
 8007072:	2b00      	cmp	r3, #0
 8007074:	bf14      	ite	ne
 8007076:	2301      	movne	r3, #1
 8007078:	2300      	moveq	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d015      	beq.n	80070ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0204 	bic.w	r2, r2, #4
 800708e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2208      	movs	r2, #8
 800709a:	409a      	lsls	r2, r3
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a4:	f043 0201 	orr.w	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d06e      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a69      	ldr	r2, [pc, #420]	; (800726c <HAL_DMA_IRQHandler+0x3f8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d04a      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a67      	ldr	r2, [pc, #412]	; (8007270 <HAL_DMA_IRQHandler+0x3fc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d045      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a66      	ldr	r2, [pc, #408]	; (8007274 <HAL_DMA_IRQHandler+0x400>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d040      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a64      	ldr	r2, [pc, #400]	; (8007278 <HAL_DMA_IRQHandler+0x404>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d03b      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a63      	ldr	r2, [pc, #396]	; (800727c <HAL_DMA_IRQHandler+0x408>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d036      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a61      	ldr	r2, [pc, #388]	; (8007280 <HAL_DMA_IRQHandler+0x40c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d031      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a60      	ldr	r2, [pc, #384]	; (8007284 <HAL_DMA_IRQHandler+0x410>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d02c      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a5e      	ldr	r2, [pc, #376]	; (8007288 <HAL_DMA_IRQHandler+0x414>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d027      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a5d      	ldr	r2, [pc, #372]	; (800728c <HAL_DMA_IRQHandler+0x418>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d022      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a5b      	ldr	r2, [pc, #364]	; (8007290 <HAL_DMA_IRQHandler+0x41c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01d      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a5a      	ldr	r2, [pc, #360]	; (8007294 <HAL_DMA_IRQHandler+0x420>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d018      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a58      	ldr	r2, [pc, #352]	; (8007298 <HAL_DMA_IRQHandler+0x424>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a57      	ldr	r2, [pc, #348]	; (800729c <HAL_DMA_IRQHandler+0x428>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00e      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a55      	ldr	r2, [pc, #340]	; (80072a0 <HAL_DMA_IRQHandler+0x42c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d009      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a54      	ldr	r2, [pc, #336]	; (80072a4 <HAL_DMA_IRQHandler+0x430>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d004      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2ee>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a52      	ldr	r2, [pc, #328]	; (80072a8 <HAL_DMA_IRQHandler+0x434>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d10a      	bne.n	8007178 <HAL_DMA_IRQHandler+0x304>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	e003      	b.n	8007180 <HAL_DMA_IRQHandler+0x30c>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00d      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2201      	movs	r2, #1
 800718e:	409a      	lsls	r2, r3
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007198:	f043 0202 	orr.w	r2, r3, #2
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	2204      	movs	r2, #4
 80071aa:	409a      	lsls	r2, r3
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 808f 	beq.w	80072d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2c      	ldr	r2, [pc, #176]	; (800726c <HAL_DMA_IRQHandler+0x3f8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d04a      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <HAL_DMA_IRQHandler+0x3fc>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d045      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a29      	ldr	r2, [pc, #164]	; (8007274 <HAL_DMA_IRQHandler+0x400>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d040      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a27      	ldr	r2, [pc, #156]	; (8007278 <HAL_DMA_IRQHandler+0x404>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d03b      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a26      	ldr	r2, [pc, #152]	; (800727c <HAL_DMA_IRQHandler+0x408>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d036      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a24      	ldr	r2, [pc, #144]	; (8007280 <HAL_DMA_IRQHandler+0x40c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d031      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a23      	ldr	r2, [pc, #140]	; (8007284 <HAL_DMA_IRQHandler+0x410>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d02c      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a21      	ldr	r2, [pc, #132]	; (8007288 <HAL_DMA_IRQHandler+0x414>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d027      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a20      	ldr	r2, [pc, #128]	; (800728c <HAL_DMA_IRQHandler+0x418>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d022      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <HAL_DMA_IRQHandler+0x41c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01d      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <HAL_DMA_IRQHandler+0x420>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d018      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <HAL_DMA_IRQHandler+0x424>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1a      	ldr	r2, [pc, #104]	; (800729c <HAL_DMA_IRQHandler+0x428>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <HAL_DMA_IRQHandler+0x42c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a17      	ldr	r2, [pc, #92]	; (80072a4 <HAL_DMA_IRQHandler+0x430>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_DMA_IRQHandler+0x3e2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <HAL_DMA_IRQHandler+0x434>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d12a      	bne.n	80072ac <HAL_DMA_IRQHandler+0x438>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	bf14      	ite	ne
 8007264:	2301      	movne	r3, #1
 8007266:	2300      	moveq	r3, #0
 8007268:	b2db      	uxtb	r3, r3
 800726a:	e023      	b.n	80072b4 <HAL_DMA_IRQHandler+0x440>
 800726c:	40020010 	.word	0x40020010
 8007270:	40020028 	.word	0x40020028
 8007274:	40020040 	.word	0x40020040
 8007278:	40020058 	.word	0x40020058
 800727c:	40020070 	.word	0x40020070
 8007280:	40020088 	.word	0x40020088
 8007284:	400200a0 	.word	0x400200a0
 8007288:	400200b8 	.word	0x400200b8
 800728c:	40020410 	.word	0x40020410
 8007290:	40020428 	.word	0x40020428
 8007294:	40020440 	.word	0x40020440
 8007298:	40020458 	.word	0x40020458
 800729c:	40020470 	.word	0x40020470
 80072a0:	40020488 	.word	0x40020488
 80072a4:	400204a0 	.word	0x400204a0
 80072a8:	400204b8 	.word	0x400204b8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00d      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2204      	movs	r2, #4
 80072c2:	409a      	lsls	r2, r3
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	f043 0204 	orr.w	r2, r3, #4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d8:	f003 031f 	and.w	r3, r3, #31
 80072dc:	2210      	movs	r2, #16
 80072de:	409a      	lsls	r2, r3
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80a6 	beq.w	8007436 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a85      	ldr	r2, [pc, #532]	; (8007504 <HAL_DMA_IRQHandler+0x690>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a83      	ldr	r2, [pc, #524]	; (8007508 <HAL_DMA_IRQHandler+0x694>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a82      	ldr	r2, [pc, #520]	; (800750c <HAL_DMA_IRQHandler+0x698>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a80      	ldr	r2, [pc, #512]	; (8007510 <HAL_DMA_IRQHandler+0x69c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a7f      	ldr	r2, [pc, #508]	; (8007514 <HAL_DMA_IRQHandler+0x6a0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a7d      	ldr	r2, [pc, #500]	; (8007518 <HAL_DMA_IRQHandler+0x6a4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7c      	ldr	r2, [pc, #496]	; (800751c <HAL_DMA_IRQHandler+0x6a8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a7a      	ldr	r2, [pc, #488]	; (8007520 <HAL_DMA_IRQHandler+0x6ac>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a79      	ldr	r2, [pc, #484]	; (8007524 <HAL_DMA_IRQHandler+0x6b0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a77      	ldr	r2, [pc, #476]	; (8007528 <HAL_DMA_IRQHandler+0x6b4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a76      	ldr	r2, [pc, #472]	; (800752c <HAL_DMA_IRQHandler+0x6b8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a74      	ldr	r2, [pc, #464]	; (8007530 <HAL_DMA_IRQHandler+0x6bc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a73      	ldr	r2, [pc, #460]	; (8007534 <HAL_DMA_IRQHandler+0x6c0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a71      	ldr	r2, [pc, #452]	; (8007538 <HAL_DMA_IRQHandler+0x6c4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a70      	ldr	r2, [pc, #448]	; (800753c <HAL_DMA_IRQHandler+0x6c8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_IRQHandler+0x516>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a6e      	ldr	r2, [pc, #440]	; (8007540 <HAL_DMA_IRQHandler+0x6cc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d10a      	bne.n	80073a0 <HAL_DMA_IRQHandler+0x52c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	bf14      	ite	ne
 8007398:	2301      	movne	r3, #1
 800739a:	2300      	moveq	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	e009      	b.n	80073b4 <HAL_DMA_IRQHandler+0x540>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bf14      	ite	ne
 80073ae:	2301      	movne	r3, #1
 80073b0:	2300      	moveq	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d03e      	beq.n	8007436 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2210      	movs	r2, #16
 80073c2:	409a      	lsls	r2, r3
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d018      	beq.n	8007408 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d108      	bne.n	80073f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d024      	beq.n	8007436 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
 80073f4:	e01f      	b.n	8007436 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01b      	beq.n	8007436 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
 8007406:	e016      	b.n	8007436 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0208 	bic.w	r2, r2, #8
 8007424:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2220      	movs	r2, #32
 8007440:	409a      	lsls	r2, r3
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4013      	ands	r3, r2
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 8110 	beq.w	800766c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a2c      	ldr	r2, [pc, #176]	; (8007504 <HAL_DMA_IRQHandler+0x690>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d04a      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <HAL_DMA_IRQHandler+0x694>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d045      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a29      	ldr	r2, [pc, #164]	; (800750c <HAL_DMA_IRQHandler+0x698>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d040      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a28      	ldr	r2, [pc, #160]	; (8007510 <HAL_DMA_IRQHandler+0x69c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d03b      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a26      	ldr	r2, [pc, #152]	; (8007514 <HAL_DMA_IRQHandler+0x6a0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d036      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a25      	ldr	r2, [pc, #148]	; (8007518 <HAL_DMA_IRQHandler+0x6a4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d031      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a23      	ldr	r2, [pc, #140]	; (800751c <HAL_DMA_IRQHandler+0x6a8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d02c      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a22      	ldr	r2, [pc, #136]	; (8007520 <HAL_DMA_IRQHandler+0x6ac>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d027      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a20      	ldr	r2, [pc, #128]	; (8007524 <HAL_DMA_IRQHandler+0x6b0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <HAL_DMA_IRQHandler+0x6b4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d01d      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1d      	ldr	r2, [pc, #116]	; (800752c <HAL_DMA_IRQHandler+0x6b8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <HAL_DMA_IRQHandler+0x6bc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <HAL_DMA_IRQHandler+0x6c0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a19      	ldr	r2, [pc, #100]	; (8007538 <HAL_DMA_IRQHandler+0x6c4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a17      	ldr	r2, [pc, #92]	; (800753c <HAL_DMA_IRQHandler+0x6c8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_DMA_IRQHandler+0x678>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a16      	ldr	r2, [pc, #88]	; (8007540 <HAL_DMA_IRQHandler+0x6cc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d12b      	bne.n	8007544 <HAL_DMA_IRQHandler+0x6d0>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e02a      	b.n	8007558 <HAL_DMA_IRQHandler+0x6e4>
 8007502:	bf00      	nop
 8007504:	40020010 	.word	0x40020010
 8007508:	40020028 	.word	0x40020028
 800750c:	40020040 	.word	0x40020040
 8007510:	40020058 	.word	0x40020058
 8007514:	40020070 	.word	0x40020070
 8007518:	40020088 	.word	0x40020088
 800751c:	400200a0 	.word	0x400200a0
 8007520:	400200b8 	.word	0x400200b8
 8007524:	40020410 	.word	0x40020410
 8007528:	40020428 	.word	0x40020428
 800752c:	40020440 	.word	0x40020440
 8007530:	40020458 	.word	0x40020458
 8007534:	40020470 	.word	0x40020470
 8007538:	40020488 	.word	0x40020488
 800753c:	400204a0 	.word	0x400204a0
 8007540:	400204b8 	.word	0x400204b8
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	bf14      	ite	ne
 8007552:	2301      	movne	r3, #1
 8007554:	2300      	moveq	r3, #0
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8087 	beq.w	800766c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2220      	movs	r2, #32
 8007568:	409a      	lsls	r2, r3
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b04      	cmp	r3, #4
 8007578:	d139      	bne.n	80075ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0216 	bic.w	r2, r2, #22
 8007588:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695a      	ldr	r2, [r3, #20]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007598:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <HAL_DMA_IRQHandler+0x736>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0208 	bic.w	r2, r2, #8
 80075b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	223f      	movs	r2, #63	; 0x3f
 80075c4:	409a      	lsls	r2, r3
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 834a 	beq.w	8007c78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
          }
          return;
 80075ec:	e344      	b.n	8007c78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d018      	beq.n	800762e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d108      	bne.n	800761c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	2b00      	cmp	r3, #0
 8007610:	d02c      	beq.n	800766c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
 800761a:	e027      	b.n	800766c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d023      	beq.n	800766c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
 800762c:	e01e      	b.n	800766c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10f      	bne.n	800765c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0210 	bic.w	r2, r2, #16
 800764a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8306 	beq.w	8007c82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 8088 	beq.w	8007794 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a7a      	ldr	r2, [pc, #488]	; (800787c <HAL_DMA_IRQHandler+0xa08>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d04a      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a79      	ldr	r2, [pc, #484]	; (8007880 <HAL_DMA_IRQHandler+0xa0c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d045      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a77      	ldr	r2, [pc, #476]	; (8007884 <HAL_DMA_IRQHandler+0xa10>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d040      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a76      	ldr	r2, [pc, #472]	; (8007888 <HAL_DMA_IRQHandler+0xa14>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d03b      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a74      	ldr	r2, [pc, #464]	; (800788c <HAL_DMA_IRQHandler+0xa18>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d036      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a73      	ldr	r2, [pc, #460]	; (8007890 <HAL_DMA_IRQHandler+0xa1c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d031      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a71      	ldr	r2, [pc, #452]	; (8007894 <HAL_DMA_IRQHandler+0xa20>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d02c      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a70      	ldr	r2, [pc, #448]	; (8007898 <HAL_DMA_IRQHandler+0xa24>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d027      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a6e      	ldr	r2, [pc, #440]	; (800789c <HAL_DMA_IRQHandler+0xa28>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d022      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a6d      	ldr	r2, [pc, #436]	; (80078a0 <HAL_DMA_IRQHandler+0xa2c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d01d      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a6b      	ldr	r2, [pc, #428]	; (80078a4 <HAL_DMA_IRQHandler+0xa30>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d018      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6a      	ldr	r2, [pc, #424]	; (80078a8 <HAL_DMA_IRQHandler+0xa34>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a68      	ldr	r2, [pc, #416]	; (80078ac <HAL_DMA_IRQHandler+0xa38>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00e      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a67      	ldr	r2, [pc, #412]	; (80078b0 <HAL_DMA_IRQHandler+0xa3c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a65      	ldr	r2, [pc, #404]	; (80078b4 <HAL_DMA_IRQHandler+0xa40>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_DMA_IRQHandler+0x8b8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a64      	ldr	r2, [pc, #400]	; (80078b8 <HAL_DMA_IRQHandler+0xa44>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d108      	bne.n	800773e <HAL_DMA_IRQHandler+0x8ca>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e007      	b.n	800774e <HAL_DMA_IRQHandler+0x8da>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0201 	bic.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007756:	429a      	cmp	r2, r3
 8007758:	d307      	bcc.n	800776a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1f2      	bne.n	800774e <HAL_DMA_IRQHandler+0x8da>
 8007768:	e000      	b.n	800776c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800776a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2203      	movs	r2, #3
 800777e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007782:	e003      	b.n	800778c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8272 	beq.w	8007c82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	e26c      	b.n	8007c82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a43      	ldr	r2, [pc, #268]	; (80078bc <HAL_DMA_IRQHandler+0xa48>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d022      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x984>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a42      	ldr	r2, [pc, #264]	; (80078c0 <HAL_DMA_IRQHandler+0xa4c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d01d      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x984>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a40      	ldr	r2, [pc, #256]	; (80078c4 <HAL_DMA_IRQHandler+0xa50>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d018      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x984>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3f      	ldr	r2, [pc, #252]	; (80078c8 <HAL_DMA_IRQHandler+0xa54>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d013      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x984>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a3d      	ldr	r2, [pc, #244]	; (80078cc <HAL_DMA_IRQHandler+0xa58>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00e      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x984>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a3c      	ldr	r2, [pc, #240]	; (80078d0 <HAL_DMA_IRQHandler+0xa5c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d009      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x984>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a3a      	ldr	r2, [pc, #232]	; (80078d4 <HAL_DMA_IRQHandler+0xa60>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d004      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x984>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a39      	ldr	r2, [pc, #228]	; (80078d8 <HAL_DMA_IRQHandler+0xa64>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d101      	bne.n	80077fc <HAL_DMA_IRQHandler+0x988>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <HAL_DMA_IRQHandler+0x98a>
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 823f 	beq.w	8007c82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2204      	movs	r2, #4
 8007816:	409a      	lsls	r2, r3
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80cd 	beq.w	80079bc <HAL_DMA_IRQHandler+0xb48>
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80c7 	beq.w	80079bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2204      	movs	r2, #4
 8007838:	409a      	lsls	r2, r3
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d049      	beq.n	80078dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 8210 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007864:	e20a      	b.n	8007c7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8206 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007878:	e200      	b.n	8007c7c <HAL_DMA_IRQHandler+0xe08>
 800787a:	bf00      	nop
 800787c:	40020010 	.word	0x40020010
 8007880:	40020028 	.word	0x40020028
 8007884:	40020040 	.word	0x40020040
 8007888:	40020058 	.word	0x40020058
 800788c:	40020070 	.word	0x40020070
 8007890:	40020088 	.word	0x40020088
 8007894:	400200a0 	.word	0x400200a0
 8007898:	400200b8 	.word	0x400200b8
 800789c:	40020410 	.word	0x40020410
 80078a0:	40020428 	.word	0x40020428
 80078a4:	40020440 	.word	0x40020440
 80078a8:	40020458 	.word	0x40020458
 80078ac:	40020470 	.word	0x40020470
 80078b0:	40020488 	.word	0x40020488
 80078b4:	400204a0 	.word	0x400204a0
 80078b8:	400204b8 	.word	0x400204b8
 80078bc:	58025408 	.word	0x58025408
 80078c0:	5802541c 	.word	0x5802541c
 80078c4:	58025430 	.word	0x58025430
 80078c8:	58025444 	.word	0x58025444
 80078cc:	58025458 	.word	0x58025458
 80078d0:	5802546c 	.word	0x5802546c
 80078d4:	58025480 	.word	0x58025480
 80078d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d160      	bne.n	80079a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a7f      	ldr	r2, [pc, #508]	; (8007ae8 <HAL_DMA_IRQHandler+0xc74>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d04a      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a7d      	ldr	r2, [pc, #500]	; (8007aec <HAL_DMA_IRQHandler+0xc78>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d045      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a7c      	ldr	r2, [pc, #496]	; (8007af0 <HAL_DMA_IRQHandler+0xc7c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d040      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a7a      	ldr	r2, [pc, #488]	; (8007af4 <HAL_DMA_IRQHandler+0xc80>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d03b      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a79      	ldr	r2, [pc, #484]	; (8007af8 <HAL_DMA_IRQHandler+0xc84>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d036      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a77      	ldr	r2, [pc, #476]	; (8007afc <HAL_DMA_IRQHandler+0xc88>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d031      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a76      	ldr	r2, [pc, #472]	; (8007b00 <HAL_DMA_IRQHandler+0xc8c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d02c      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a74      	ldr	r2, [pc, #464]	; (8007b04 <HAL_DMA_IRQHandler+0xc90>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d027      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a73      	ldr	r2, [pc, #460]	; (8007b08 <HAL_DMA_IRQHandler+0xc94>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d022      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a71      	ldr	r2, [pc, #452]	; (8007b0c <HAL_DMA_IRQHandler+0xc98>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01d      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a70      	ldr	r2, [pc, #448]	; (8007b10 <HAL_DMA_IRQHandler+0xc9c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d018      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a6e      	ldr	r2, [pc, #440]	; (8007b14 <HAL_DMA_IRQHandler+0xca0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a6d      	ldr	r2, [pc, #436]	; (8007b18 <HAL_DMA_IRQHandler+0xca4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00e      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a6b      	ldr	r2, [pc, #428]	; (8007b1c <HAL_DMA_IRQHandler+0xca8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d009      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a6a      	ldr	r2, [pc, #424]	; (8007b20 <HAL_DMA_IRQHandler+0xcac>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d004      	beq.n	8007986 <HAL_DMA_IRQHandler+0xb12>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a68      	ldr	r2, [pc, #416]	; (8007b24 <HAL_DMA_IRQHandler+0xcb0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d108      	bne.n	8007998 <HAL_DMA_IRQHandler+0xb24>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0208 	bic.w	r2, r2, #8
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e007      	b.n	80079a8 <HAL_DMA_IRQHandler+0xb34>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0204 	bic.w	r2, r2, #4
 80079a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8165 	beq.w	8007c7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ba:	e15f      	b.n	8007c7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	2202      	movs	r2, #2
 80079c6:	409a      	lsls	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80c5 	beq.w	8007b5c <HAL_DMA_IRQHandler+0xce8>
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80bf 	beq.w	8007b5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	2202      	movs	r2, #2
 80079e8:	409a      	lsls	r2, r3
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d018      	beq.n	8007a2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 813a 	beq.w	8007c80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a14:	e134      	b.n	8007c80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 8130 	beq.w	8007c80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a28:	e12a      	b.n	8007c80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f040 8089 	bne.w	8007b48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a2b      	ldr	r2, [pc, #172]	; (8007ae8 <HAL_DMA_IRQHandler+0xc74>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d04a      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a29      	ldr	r2, [pc, #164]	; (8007aec <HAL_DMA_IRQHandler+0xc78>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d045      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a28      	ldr	r2, [pc, #160]	; (8007af0 <HAL_DMA_IRQHandler+0xc7c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d040      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a26      	ldr	r2, [pc, #152]	; (8007af4 <HAL_DMA_IRQHandler+0xc80>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d03b      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a25      	ldr	r2, [pc, #148]	; (8007af8 <HAL_DMA_IRQHandler+0xc84>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d036      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a23      	ldr	r2, [pc, #140]	; (8007afc <HAL_DMA_IRQHandler+0xc88>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d031      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a22      	ldr	r2, [pc, #136]	; (8007b00 <HAL_DMA_IRQHandler+0xc8c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d02c      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <HAL_DMA_IRQHandler+0xc90>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d027      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <HAL_DMA_IRQHandler+0xc94>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d022      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a1d      	ldr	r2, [pc, #116]	; (8007b0c <HAL_DMA_IRQHandler+0xc98>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d01d      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1c      	ldr	r2, [pc, #112]	; (8007b10 <HAL_DMA_IRQHandler+0xc9c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d018      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <HAL_DMA_IRQHandler+0xca0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d013      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <HAL_DMA_IRQHandler+0xca4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a17      	ldr	r2, [pc, #92]	; (8007b1c <HAL_DMA_IRQHandler+0xca8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d009      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a16      	ldr	r2, [pc, #88]	; (8007b20 <HAL_DMA_IRQHandler+0xcac>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0xc62>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a14      	ldr	r2, [pc, #80]	; (8007b24 <HAL_DMA_IRQHandler+0xcb0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d128      	bne.n	8007b28 <HAL_DMA_IRQHandler+0xcb4>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0214 	bic.w	r2, r2, #20
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e027      	b.n	8007b38 <HAL_DMA_IRQHandler+0xcc4>
 8007ae8:	40020010 	.word	0x40020010
 8007aec:	40020028 	.word	0x40020028
 8007af0:	40020040 	.word	0x40020040
 8007af4:	40020058 	.word	0x40020058
 8007af8:	40020070 	.word	0x40020070
 8007afc:	40020088 	.word	0x40020088
 8007b00:	400200a0 	.word	0x400200a0
 8007b04:	400200b8 	.word	0x400200b8
 8007b08:	40020410 	.word	0x40020410
 8007b0c:	40020428 	.word	0x40020428
 8007b10:	40020440 	.word	0x40020440
 8007b14:	40020458 	.word	0x40020458
 8007b18:	40020470 	.word	0x40020470
 8007b1c:	40020488 	.word	0x40020488
 8007b20:	400204a0 	.word	0x400204a0
 8007b24:	400204b8 	.word	0x400204b8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 020a 	bic.w	r2, r2, #10
 8007b36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8097 	beq.w	8007c80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b5a:	e091      	b.n	8007c80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	2208      	movs	r2, #8
 8007b66:	409a      	lsls	r2, r3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8088 	beq.w	8007c82 <HAL_DMA_IRQHandler+0xe0e>
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 8082 	beq.w	8007c82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a41      	ldr	r2, [pc, #260]	; (8007c88 <HAL_DMA_IRQHandler+0xe14>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d04a      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a3f      	ldr	r2, [pc, #252]	; (8007c8c <HAL_DMA_IRQHandler+0xe18>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d045      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a3e      	ldr	r2, [pc, #248]	; (8007c90 <HAL_DMA_IRQHandler+0xe1c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d040      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a3c      	ldr	r2, [pc, #240]	; (8007c94 <HAL_DMA_IRQHandler+0xe20>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d03b      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a3b      	ldr	r2, [pc, #236]	; (8007c98 <HAL_DMA_IRQHandler+0xe24>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d036      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a39      	ldr	r2, [pc, #228]	; (8007c9c <HAL_DMA_IRQHandler+0xe28>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d031      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a38      	ldr	r2, [pc, #224]	; (8007ca0 <HAL_DMA_IRQHandler+0xe2c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d02c      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a36      	ldr	r2, [pc, #216]	; (8007ca4 <HAL_DMA_IRQHandler+0xe30>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d027      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a35      	ldr	r2, [pc, #212]	; (8007ca8 <HAL_DMA_IRQHandler+0xe34>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d022      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a33      	ldr	r2, [pc, #204]	; (8007cac <HAL_DMA_IRQHandler+0xe38>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d01d      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a32      	ldr	r2, [pc, #200]	; (8007cb0 <HAL_DMA_IRQHandler+0xe3c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d018      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a30      	ldr	r2, [pc, #192]	; (8007cb4 <HAL_DMA_IRQHandler+0xe40>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d013      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a2f      	ldr	r2, [pc, #188]	; (8007cb8 <HAL_DMA_IRQHandler+0xe44>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00e      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a2d      	ldr	r2, [pc, #180]	; (8007cbc <HAL_DMA_IRQHandler+0xe48>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d009      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a2c      	ldr	r2, [pc, #176]	; (8007cc0 <HAL_DMA_IRQHandler+0xe4c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d004      	beq.n	8007c1e <HAL_DMA_IRQHandler+0xdaa>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a2a      	ldr	r2, [pc, #168]	; (8007cc4 <HAL_DMA_IRQHandler+0xe50>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d108      	bne.n	8007c30 <HAL_DMA_IRQHandler+0xdbc>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 021c 	bic.w	r2, r2, #28
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e007      	b.n	8007c40 <HAL_DMA_IRQHandler+0xdcc>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 020e 	bic.w	r2, r2, #14
 8007c3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	2201      	movs	r2, #1
 8007c4a:	409a      	lsls	r2, r3
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d009      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	e004      	b.n	8007c82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c78:	bf00      	nop
 8007c7a:	e002      	b.n	8007c82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c7c:	bf00      	nop
 8007c7e:	e000      	b.n	8007c82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c82:	3728      	adds	r7, #40	; 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40020010 	.word	0x40020010
 8007c8c:	40020028 	.word	0x40020028
 8007c90:	40020040 	.word	0x40020040
 8007c94:	40020058 	.word	0x40020058
 8007c98:	40020070 	.word	0x40020070
 8007c9c:	40020088 	.word	0x40020088
 8007ca0:	400200a0 	.word	0x400200a0
 8007ca4:	400200b8 	.word	0x400200b8
 8007ca8:	40020410 	.word	0x40020410
 8007cac:	40020428 	.word	0x40020428
 8007cb0:	40020440 	.word	0x40020440
 8007cb4:	40020458 	.word	0x40020458
 8007cb8:	40020470 	.word	0x40020470
 8007cbc:	40020488 	.word	0x40020488
 8007cc0:	400204a0 	.word	0x400204a0
 8007cc4:	400204b8 	.word	0x400204b8

08007cc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cda:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a7f      	ldr	r2, [pc, #508]	; (8007ee4 <DMA_SetConfig+0x21c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d072      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7d      	ldr	r2, [pc, #500]	; (8007ee8 <DMA_SetConfig+0x220>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d06d      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7c      	ldr	r2, [pc, #496]	; (8007eec <DMA_SetConfig+0x224>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d068      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a7a      	ldr	r2, [pc, #488]	; (8007ef0 <DMA_SetConfig+0x228>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d063      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a79      	ldr	r2, [pc, #484]	; (8007ef4 <DMA_SetConfig+0x22c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d05e      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a77      	ldr	r2, [pc, #476]	; (8007ef8 <DMA_SetConfig+0x230>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d059      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a76      	ldr	r2, [pc, #472]	; (8007efc <DMA_SetConfig+0x234>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d054      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a74      	ldr	r2, [pc, #464]	; (8007f00 <DMA_SetConfig+0x238>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d04f      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a73      	ldr	r2, [pc, #460]	; (8007f04 <DMA_SetConfig+0x23c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d04a      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a71      	ldr	r2, [pc, #452]	; (8007f08 <DMA_SetConfig+0x240>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d045      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a70      	ldr	r2, [pc, #448]	; (8007f0c <DMA_SetConfig+0x244>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d040      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a6e      	ldr	r2, [pc, #440]	; (8007f10 <DMA_SetConfig+0x248>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d03b      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a6d      	ldr	r2, [pc, #436]	; (8007f14 <DMA_SetConfig+0x24c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d036      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6b      	ldr	r2, [pc, #428]	; (8007f18 <DMA_SetConfig+0x250>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d031      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a6a      	ldr	r2, [pc, #424]	; (8007f1c <DMA_SetConfig+0x254>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d02c      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a68      	ldr	r2, [pc, #416]	; (8007f20 <DMA_SetConfig+0x258>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d027      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a67      	ldr	r2, [pc, #412]	; (8007f24 <DMA_SetConfig+0x25c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d022      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a65      	ldr	r2, [pc, #404]	; (8007f28 <DMA_SetConfig+0x260>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01d      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a64      	ldr	r2, [pc, #400]	; (8007f2c <DMA_SetConfig+0x264>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d018      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a62      	ldr	r2, [pc, #392]	; (8007f30 <DMA_SetConfig+0x268>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d013      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a61      	ldr	r2, [pc, #388]	; (8007f34 <DMA_SetConfig+0x26c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00e      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a5f      	ldr	r2, [pc, #380]	; (8007f38 <DMA_SetConfig+0x270>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d009      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a5e      	ldr	r2, [pc, #376]	; (8007f3c <DMA_SetConfig+0x274>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d004      	beq.n	8007dd2 <DMA_SetConfig+0x10a>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a5c      	ldr	r2, [pc, #368]	; (8007f40 <DMA_SetConfig+0x278>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d101      	bne.n	8007dd6 <DMA_SetConfig+0x10e>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e000      	b.n	8007dd8 <DMA_SetConfig+0x110>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00d      	beq.n	8007df8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007de4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007df6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a39      	ldr	r2, [pc, #228]	; (8007ee4 <DMA_SetConfig+0x21c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d04a      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a38      	ldr	r2, [pc, #224]	; (8007ee8 <DMA_SetConfig+0x220>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d045      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a36      	ldr	r2, [pc, #216]	; (8007eec <DMA_SetConfig+0x224>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d040      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a35      	ldr	r2, [pc, #212]	; (8007ef0 <DMA_SetConfig+0x228>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d03b      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a33      	ldr	r2, [pc, #204]	; (8007ef4 <DMA_SetConfig+0x22c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d036      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a32      	ldr	r2, [pc, #200]	; (8007ef8 <DMA_SetConfig+0x230>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d031      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a30      	ldr	r2, [pc, #192]	; (8007efc <DMA_SetConfig+0x234>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d02c      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2f      	ldr	r2, [pc, #188]	; (8007f00 <DMA_SetConfig+0x238>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d027      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a2d      	ldr	r2, [pc, #180]	; (8007f04 <DMA_SetConfig+0x23c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d022      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a2c      	ldr	r2, [pc, #176]	; (8007f08 <DMA_SetConfig+0x240>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d01d      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a2a      	ldr	r2, [pc, #168]	; (8007f0c <DMA_SetConfig+0x244>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d018      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a29      	ldr	r2, [pc, #164]	; (8007f10 <DMA_SetConfig+0x248>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d013      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a27      	ldr	r2, [pc, #156]	; (8007f14 <DMA_SetConfig+0x24c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00e      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a26      	ldr	r2, [pc, #152]	; (8007f18 <DMA_SetConfig+0x250>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d009      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <DMA_SetConfig+0x254>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <DMA_SetConfig+0x1d0>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a23      	ldr	r2, [pc, #140]	; (8007f20 <DMA_SetConfig+0x258>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d101      	bne.n	8007e9c <DMA_SetConfig+0x1d4>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <DMA_SetConfig+0x1d6>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d059      	beq.n	8007f56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	223f      	movs	r2, #63	; 0x3f
 8007eac:	409a      	lsls	r2, r3
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ec0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b40      	cmp	r3, #64	; 0x40
 8007ed0:	d138      	bne.n	8007f44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ee2:	e086      	b.n	8007ff2 <DMA_SetConfig+0x32a>
 8007ee4:	40020010 	.word	0x40020010
 8007ee8:	40020028 	.word	0x40020028
 8007eec:	40020040 	.word	0x40020040
 8007ef0:	40020058 	.word	0x40020058
 8007ef4:	40020070 	.word	0x40020070
 8007ef8:	40020088 	.word	0x40020088
 8007efc:	400200a0 	.word	0x400200a0
 8007f00:	400200b8 	.word	0x400200b8
 8007f04:	40020410 	.word	0x40020410
 8007f08:	40020428 	.word	0x40020428
 8007f0c:	40020440 	.word	0x40020440
 8007f10:	40020458 	.word	0x40020458
 8007f14:	40020470 	.word	0x40020470
 8007f18:	40020488 	.word	0x40020488
 8007f1c:	400204a0 	.word	0x400204a0
 8007f20:	400204b8 	.word	0x400204b8
 8007f24:	58025408 	.word	0x58025408
 8007f28:	5802541c 	.word	0x5802541c
 8007f2c:	58025430 	.word	0x58025430
 8007f30:	58025444 	.word	0x58025444
 8007f34:	58025458 	.word	0x58025458
 8007f38:	5802546c 	.word	0x5802546c
 8007f3c:	58025480 	.word	0x58025480
 8007f40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	60da      	str	r2, [r3, #12]
}
 8007f54:	e04d      	b.n	8007ff2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a29      	ldr	r2, [pc, #164]	; (8008000 <DMA_SetConfig+0x338>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d022      	beq.n	8007fa6 <DMA_SetConfig+0x2de>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a27      	ldr	r2, [pc, #156]	; (8008004 <DMA_SetConfig+0x33c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d01d      	beq.n	8007fa6 <DMA_SetConfig+0x2de>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a26      	ldr	r2, [pc, #152]	; (8008008 <DMA_SetConfig+0x340>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d018      	beq.n	8007fa6 <DMA_SetConfig+0x2de>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a24      	ldr	r2, [pc, #144]	; (800800c <DMA_SetConfig+0x344>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <DMA_SetConfig+0x2de>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a23      	ldr	r2, [pc, #140]	; (8008010 <DMA_SetConfig+0x348>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00e      	beq.n	8007fa6 <DMA_SetConfig+0x2de>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a21      	ldr	r2, [pc, #132]	; (8008014 <DMA_SetConfig+0x34c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d009      	beq.n	8007fa6 <DMA_SetConfig+0x2de>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a20      	ldr	r2, [pc, #128]	; (8008018 <DMA_SetConfig+0x350>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d004      	beq.n	8007fa6 <DMA_SetConfig+0x2de>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a1e      	ldr	r2, [pc, #120]	; (800801c <DMA_SetConfig+0x354>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d101      	bne.n	8007faa <DMA_SetConfig+0x2e2>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <DMA_SetConfig+0x2e4>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d020      	beq.n	8007ff2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2201      	movs	r2, #1
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d108      	bne.n	8007fe2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	60da      	str	r2, [r3, #12]
}
 8007fe0:	e007      	b.n	8007ff2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	60da      	str	r2, [r3, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	58025408 	.word	0x58025408
 8008004:	5802541c 	.word	0x5802541c
 8008008:	58025430 	.word	0x58025430
 800800c:	58025444 	.word	0x58025444
 8008010:	58025458 	.word	0x58025458
 8008014:	5802546c 	.word	0x5802546c
 8008018:	58025480 	.word	0x58025480
 800801c:	58025494 	.word	0x58025494

08008020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a42      	ldr	r2, [pc, #264]	; (8008138 <DMA_CalcBaseAndBitshift+0x118>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d04a      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a41      	ldr	r2, [pc, #260]	; (800813c <DMA_CalcBaseAndBitshift+0x11c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d045      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a3f      	ldr	r2, [pc, #252]	; (8008140 <DMA_CalcBaseAndBitshift+0x120>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d040      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a3e      	ldr	r2, [pc, #248]	; (8008144 <DMA_CalcBaseAndBitshift+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d03b      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a3c      	ldr	r2, [pc, #240]	; (8008148 <DMA_CalcBaseAndBitshift+0x128>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d036      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a3b      	ldr	r2, [pc, #236]	; (800814c <DMA_CalcBaseAndBitshift+0x12c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d031      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a39      	ldr	r2, [pc, #228]	; (8008150 <DMA_CalcBaseAndBitshift+0x130>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d02c      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a38      	ldr	r2, [pc, #224]	; (8008154 <DMA_CalcBaseAndBitshift+0x134>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d027      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a36      	ldr	r2, [pc, #216]	; (8008158 <DMA_CalcBaseAndBitshift+0x138>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d022      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a35      	ldr	r2, [pc, #212]	; (800815c <DMA_CalcBaseAndBitshift+0x13c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d01d      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a33      	ldr	r2, [pc, #204]	; (8008160 <DMA_CalcBaseAndBitshift+0x140>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d018      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a32      	ldr	r2, [pc, #200]	; (8008164 <DMA_CalcBaseAndBitshift+0x144>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d013      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a30      	ldr	r2, [pc, #192]	; (8008168 <DMA_CalcBaseAndBitshift+0x148>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00e      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a2f      	ldr	r2, [pc, #188]	; (800816c <DMA_CalcBaseAndBitshift+0x14c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d009      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a2d      	ldr	r2, [pc, #180]	; (8008170 <DMA_CalcBaseAndBitshift+0x150>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d004      	beq.n	80080c8 <DMA_CalcBaseAndBitshift+0xa8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a2c      	ldr	r2, [pc, #176]	; (8008174 <DMA_CalcBaseAndBitshift+0x154>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d101      	bne.n	80080cc <DMA_CalcBaseAndBitshift+0xac>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <DMA_CalcBaseAndBitshift+0xae>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d024      	beq.n	800811c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	3b10      	subs	r3, #16
 80080da:	4a27      	ldr	r2, [pc, #156]	; (8008178 <DMA_CalcBaseAndBitshift+0x158>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	4a24      	ldr	r2, [pc, #144]	; (800817c <DMA_CalcBaseAndBitshift+0x15c>)
 80080ec:	5cd3      	ldrb	r3, [r2, r3]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d908      	bls.n	800810c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	4b1f      	ldr	r3, [pc, #124]	; (8008180 <DMA_CalcBaseAndBitshift+0x160>)
 8008102:	4013      	ands	r3, r2
 8008104:	1d1a      	adds	r2, r3, #4
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	659a      	str	r2, [r3, #88]	; 0x58
 800810a:	e00d      	b.n	8008128 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <DMA_CalcBaseAndBitshift+0x160>)
 8008114:	4013      	ands	r3, r2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6593      	str	r3, [r2, #88]	; 0x58
 800811a:	e005      	b.n	8008128 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	40020010 	.word	0x40020010
 800813c:	40020028 	.word	0x40020028
 8008140:	40020040 	.word	0x40020040
 8008144:	40020058 	.word	0x40020058
 8008148:	40020070 	.word	0x40020070
 800814c:	40020088 	.word	0x40020088
 8008150:	400200a0 	.word	0x400200a0
 8008154:	400200b8 	.word	0x400200b8
 8008158:	40020410 	.word	0x40020410
 800815c:	40020428 	.word	0x40020428
 8008160:	40020440 	.word	0x40020440
 8008164:	40020458 	.word	0x40020458
 8008168:	40020470 	.word	0x40020470
 800816c:	40020488 	.word	0x40020488
 8008170:	400204a0 	.word	0x400204a0
 8008174:	400204b8 	.word	0x400204b8
 8008178:	aaaaaaab 	.word	0xaaaaaaab
 800817c:	0801553c 	.word	0x0801553c
 8008180:	fffffc00 	.word	0xfffffc00

08008184 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d120      	bne.n	80081da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819c:	2b03      	cmp	r3, #3
 800819e:	d858      	bhi.n	8008252 <DMA_CheckFifoParam+0xce>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <DMA_CheckFifoParam+0x24>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081b9 	.word	0x080081b9
 80081ac:	080081cb 	.word	0x080081cb
 80081b0:	080081b9 	.word	0x080081b9
 80081b4:	08008253 	.word	0x08008253
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d048      	beq.n	8008256 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081c8:	e045      	b.n	8008256 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081d2:	d142      	bne.n	800825a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081d8:	e03f      	b.n	800825a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e2:	d123      	bne.n	800822c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d838      	bhi.n	800825e <DMA_CheckFifoParam+0xda>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <DMA_CheckFifoParam+0x70>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008205 	.word	0x08008205
 80081f8:	0800820b 	.word	0x0800820b
 80081fc:	08008205 	.word	0x08008205
 8008200:	0800821d 	.word	0x0800821d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
        break;
 8008208:	e030      	b.n	800826c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d025      	beq.n	8008262 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800821a:	e022      	b.n	8008262 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008224:	d11f      	bne.n	8008266 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800822a:	e01c      	b.n	8008266 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	2b02      	cmp	r3, #2
 8008232:	d902      	bls.n	800823a <DMA_CheckFifoParam+0xb6>
 8008234:	2b03      	cmp	r3, #3
 8008236:	d003      	beq.n	8008240 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008238:	e018      	b.n	800826c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
        break;
 800823e:	e015      	b.n	800826c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00e      	beq.n	800826a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
    break;
 8008250:	e00b      	b.n	800826a <DMA_CheckFifoParam+0xe6>
        break;
 8008252:	bf00      	nop
 8008254:	e00a      	b.n	800826c <DMA_CheckFifoParam+0xe8>
        break;
 8008256:	bf00      	nop
 8008258:	e008      	b.n	800826c <DMA_CheckFifoParam+0xe8>
        break;
 800825a:	bf00      	nop
 800825c:	e006      	b.n	800826c <DMA_CheckFifoParam+0xe8>
        break;
 800825e:	bf00      	nop
 8008260:	e004      	b.n	800826c <DMA_CheckFifoParam+0xe8>
        break;
 8008262:	bf00      	nop
 8008264:	e002      	b.n	800826c <DMA_CheckFifoParam+0xe8>
        break;
 8008266:	bf00      	nop
 8008268:	e000      	b.n	800826c <DMA_CheckFifoParam+0xe8>
    break;
 800826a:	bf00      	nop
    }
  }

  return status;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop

0800827c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a38      	ldr	r2, [pc, #224]	; (8008370 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d022      	beq.n	80082da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a36      	ldr	r2, [pc, #216]	; (8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d01d      	beq.n	80082da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a35      	ldr	r2, [pc, #212]	; (8008378 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d018      	beq.n	80082da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a33      	ldr	r2, [pc, #204]	; (800837c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d013      	beq.n	80082da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a32      	ldr	r2, [pc, #200]	; (8008380 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d00e      	beq.n	80082da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a30      	ldr	r2, [pc, #192]	; (8008384 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d009      	beq.n	80082da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a2f      	ldr	r2, [pc, #188]	; (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d004      	beq.n	80082da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a2d      	ldr	r2, [pc, #180]	; (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d101      	bne.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01a      	beq.n	800831a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	3b08      	subs	r3, #8
 80082ec:	4a28      	ldr	r2, [pc, #160]	; (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082ee:	fba2 2303 	umull	r2, r3, r2, r3
 80082f2:	091b      	lsrs	r3, r3, #4
 80082f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4b26      	ldr	r3, [pc, #152]	; (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a24      	ldr	r2, [pc, #144]	; (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008308:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f003 031f 	and.w	r3, r3, #31
 8008310:	2201      	movs	r2, #1
 8008312:	409a      	lsls	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008318:	e024      	b.n	8008364 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	3b10      	subs	r3, #16
 8008322:	4a1e      	ldr	r2, [pc, #120]	; (800839c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008324:	fba2 2303 	umull	r2, r3, r2, r3
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4a1c      	ldr	r2, [pc, #112]	; (80083a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d806      	bhi.n	8008342 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d902      	bls.n	8008342 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3308      	adds	r3, #8
 8008340:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4b18      	ldr	r3, [pc, #96]	; (80083a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	461a      	mov	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a16      	ldr	r2, [pc, #88]	; (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008354:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	2201      	movs	r2, #1
 800835e:	409a      	lsls	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	58025408 	.word	0x58025408
 8008374:	5802541c 	.word	0x5802541c
 8008378:	58025430 	.word	0x58025430
 800837c:	58025444 	.word	0x58025444
 8008380:	58025458 	.word	0x58025458
 8008384:	5802546c 	.word	0x5802546c
 8008388:	58025480 	.word	0x58025480
 800838c:	58025494 	.word	0x58025494
 8008390:	cccccccd 	.word	0xcccccccd
 8008394:	16009600 	.word	0x16009600
 8008398:	58025880 	.word	0x58025880
 800839c:	aaaaaaab 	.word	0xaaaaaaab
 80083a0:	400204b8 	.word	0x400204b8
 80083a4:	4002040f 	.word	0x4002040f
 80083a8:	10008200 	.word	0x10008200
 80083ac:	40020880 	.word	0x40020880

080083b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d04a      	beq.n	800845c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d847      	bhi.n	800845c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a25      	ldr	r2, [pc, #148]	; (8008468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d022      	beq.n	800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a24      	ldr	r2, [pc, #144]	; (800846c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d01d      	beq.n	800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a22      	ldr	r2, [pc, #136]	; (8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d018      	beq.n	800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a21      	ldr	r2, [pc, #132]	; (8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d013      	beq.n	800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1f      	ldr	r2, [pc, #124]	; (8008478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00e      	beq.n	800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d009      	beq.n	800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1c      	ldr	r2, [pc, #112]	; (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d004      	beq.n	800841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1b      	ldr	r2, [pc, #108]	; (8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d101      	bne.n	8008420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4b17      	ldr	r3, [pc, #92]	; (8008488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	461a      	mov	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a15      	ldr	r2, [pc, #84]	; (800848c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008438:	671a      	str	r2, [r3, #112]	; 0x70
 800843a:	e009      	b.n	8008450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4b14      	ldr	r3, [pc, #80]	; (8008490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	461a      	mov	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a11      	ldr	r2, [pc, #68]	; (8008494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800844e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3b01      	subs	r3, #1
 8008454:	2201      	movs	r2, #1
 8008456:	409a      	lsls	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800845c:	bf00      	nop
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	58025408 	.word	0x58025408
 800846c:	5802541c 	.word	0x5802541c
 8008470:	58025430 	.word	0x58025430
 8008474:	58025444 	.word	0x58025444
 8008478:	58025458 	.word	0x58025458
 800847c:	5802546c 	.word	0x5802546c
 8008480:	58025480 	.word	0x58025480
 8008484:	58025494 	.word	0x58025494
 8008488:	1600963f 	.word	0x1600963f
 800848c:	58025940 	.word	0x58025940
 8008490:	1000823f 	.word	0x1000823f
 8008494:	40020940 	.word	0x40020940

08008498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008498:	b480      	push	{r7}
 800849a:	b089      	sub	sp, #36	; 0x24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084a6:	4b89      	ldr	r3, [pc, #548]	; (80086cc <HAL_GPIO_Init+0x234>)
 80084a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084aa:	e194      	b.n	80087d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	2101      	movs	r1, #1
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	fa01 f303 	lsl.w	r3, r1, r3
 80084b8:	4013      	ands	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8186 	beq.w	80087d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f003 0303 	and.w	r3, r3, #3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d005      	beq.n	80084dc <HAL_GPIO_Init+0x44>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f003 0303 	and.w	r3, r3, #3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d130      	bne.n	800853e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	2203      	movs	r2, #3
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	43db      	mvns	r3, r3
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	4013      	ands	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	4313      	orrs	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008512:	2201      	movs	r2, #1
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	fa02 f303 	lsl.w	r3, r2, r3
 800851a:	43db      	mvns	r3, r3
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	4013      	ands	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	091b      	lsrs	r3, r3, #4
 8008528:	f003 0201 	and.w	r2, r3, #1
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	fa02 f303 	lsl.w	r3, r2, r3
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	4313      	orrs	r3, r2
 8008536:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	2b03      	cmp	r3, #3
 8008548:	d017      	beq.n	800857a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	2203      	movs	r2, #3
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	43db      	mvns	r3, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4013      	ands	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	4313      	orrs	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d123      	bne.n	80085ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	08da      	lsrs	r2, r3, #3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3208      	adds	r2, #8
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	220f      	movs	r2, #15
 800859e:	fa02 f303 	lsl.w	r3, r2, r3
 80085a2:	43db      	mvns	r3, r3
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	4013      	ands	r3, r2
 80085a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	4313      	orrs	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	08da      	lsrs	r2, r3, #3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3208      	adds	r2, #8
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	2203      	movs	r2, #3
 80085da:	fa02 f303 	lsl.w	r3, r2, r3
 80085de:	43db      	mvns	r3, r3
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	4013      	ands	r3, r2
 80085e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f003 0203 	and.w	r2, r3, #3
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 80e0 	beq.w	80087d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008610:	4b2f      	ldr	r3, [pc, #188]	; (80086d0 <HAL_GPIO_Init+0x238>)
 8008612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008616:	4a2e      	ldr	r2, [pc, #184]	; (80086d0 <HAL_GPIO_Init+0x238>)
 8008618:	f043 0302 	orr.w	r3, r3, #2
 800861c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008620:	4b2b      	ldr	r3, [pc, #172]	; (80086d0 <HAL_GPIO_Init+0x238>)
 8008622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800862e:	4a29      	ldr	r2, [pc, #164]	; (80086d4 <HAL_GPIO_Init+0x23c>)
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	089b      	lsrs	r3, r3, #2
 8008634:	3302      	adds	r3, #2
 8008636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800863a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	220f      	movs	r2, #15
 8008646:	fa02 f303 	lsl.w	r3, r2, r3
 800864a:	43db      	mvns	r3, r3
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	4013      	ands	r3, r2
 8008650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a20      	ldr	r2, [pc, #128]	; (80086d8 <HAL_GPIO_Init+0x240>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d052      	beq.n	8008700 <HAL_GPIO_Init+0x268>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a1f      	ldr	r2, [pc, #124]	; (80086dc <HAL_GPIO_Init+0x244>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d031      	beq.n	80086c6 <HAL_GPIO_Init+0x22e>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a1e      	ldr	r2, [pc, #120]	; (80086e0 <HAL_GPIO_Init+0x248>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d02b      	beq.n	80086c2 <HAL_GPIO_Init+0x22a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <HAL_GPIO_Init+0x24c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d025      	beq.n	80086be <HAL_GPIO_Init+0x226>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a1c      	ldr	r2, [pc, #112]	; (80086e8 <HAL_GPIO_Init+0x250>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d01f      	beq.n	80086ba <HAL_GPIO_Init+0x222>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1b      	ldr	r2, [pc, #108]	; (80086ec <HAL_GPIO_Init+0x254>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d019      	beq.n	80086b6 <HAL_GPIO_Init+0x21e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1a      	ldr	r2, [pc, #104]	; (80086f0 <HAL_GPIO_Init+0x258>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_GPIO_Init+0x21a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a19      	ldr	r2, [pc, #100]	; (80086f4 <HAL_GPIO_Init+0x25c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00d      	beq.n	80086ae <HAL_GPIO_Init+0x216>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a18      	ldr	r2, [pc, #96]	; (80086f8 <HAL_GPIO_Init+0x260>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d007      	beq.n	80086aa <HAL_GPIO_Init+0x212>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a17      	ldr	r2, [pc, #92]	; (80086fc <HAL_GPIO_Init+0x264>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d101      	bne.n	80086a6 <HAL_GPIO_Init+0x20e>
 80086a2:	2309      	movs	r3, #9
 80086a4:	e02d      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086a6:	230a      	movs	r3, #10
 80086a8:	e02b      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086aa:	2308      	movs	r3, #8
 80086ac:	e029      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086ae:	2307      	movs	r3, #7
 80086b0:	e027      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086b2:	2306      	movs	r3, #6
 80086b4:	e025      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086b6:	2305      	movs	r3, #5
 80086b8:	e023      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086ba:	2304      	movs	r3, #4
 80086bc:	e021      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086be:	2303      	movs	r3, #3
 80086c0:	e01f      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e01d      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e01b      	b.n	8008702 <HAL_GPIO_Init+0x26a>
 80086ca:	bf00      	nop
 80086cc:	58000080 	.word	0x58000080
 80086d0:	58024400 	.word	0x58024400
 80086d4:	58000400 	.word	0x58000400
 80086d8:	58020000 	.word	0x58020000
 80086dc:	58020400 	.word	0x58020400
 80086e0:	58020800 	.word	0x58020800
 80086e4:	58020c00 	.word	0x58020c00
 80086e8:	58021000 	.word	0x58021000
 80086ec:	58021400 	.word	0x58021400
 80086f0:	58021800 	.word	0x58021800
 80086f4:	58021c00 	.word	0x58021c00
 80086f8:	58022000 	.word	0x58022000
 80086fc:	58022400 	.word	0x58022400
 8008700:	2300      	movs	r3, #0
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	f002 0203 	and.w	r2, r2, #3
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	4093      	lsls	r3, r2
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	4313      	orrs	r3, r2
 8008710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008712:	4938      	ldr	r1, [pc, #224]	; (80087f4 <HAL_GPIO_Init+0x35c>)
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	089b      	lsrs	r3, r3, #2
 8008718:	3302      	adds	r3, #2
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	43db      	mvns	r3, r3
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	4013      	ands	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800874e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	43db      	mvns	r3, r3
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	4013      	ands	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	43db      	mvns	r3, r3
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	4013      	ands	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	43db      	mvns	r3, r3
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	4013      	ands	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	3301      	adds	r3, #1
 80087d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	fa22 f303 	lsr.w	r3, r2, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f ae63 	bne.w	80084ac <HAL_GPIO_Init+0x14>
  }
}
 80087e6:	bf00      	nop
 80087e8:	bf00      	nop
 80087ea:	3724      	adds	r7, #36	; 0x24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	58000400 	.word	0x58000400

080087f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	887b      	ldrh	r3, [r7, #2]
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
 8008814:	e001      	b.n	800881a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	807b      	strh	r3, [r7, #2]
 8008834:	4613      	mov	r3, r2
 8008836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008838:	787b      	ldrb	r3, [r7, #1]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800883e:	887a      	ldrh	r2, [r7, #2]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008844:	e003      	b.n	800884e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008846:	887b      	ldrh	r3, [r7, #2]
 8008848:	041a      	lsls	r2, r3, #16
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	619a      	str	r2, [r3, #24]
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800886c:	887a      	ldrh	r2, [r7, #2]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4013      	ands	r3, r2
 8008872:	041a      	lsls	r2, r3, #16
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	43d9      	mvns	r1, r3
 8008878:	887b      	ldrh	r3, [r7, #2]
 800887a:	400b      	ands	r3, r1
 800887c:	431a      	orrs	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	619a      	str	r2, [r3, #24]
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e08b      	b.n	80089ba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d106      	bne.n	80088bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7fa f91e 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2224      	movs	r2, #36	; 0x24
 80088c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0201 	bic.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689a      	ldr	r2, [r3, #8]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d107      	bne.n	800890a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008906:	609a      	str	r2, [r3, #8]
 8008908:	e006      	b.n	8008918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d108      	bne.n	8008932 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	e007      	b.n	8008942 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6859      	ldr	r1, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <HAL_I2C_Init+0x134>)
 800894e:	430b      	orrs	r3, r1
 8008950:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008960:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	69d9      	ldr	r1, [r3, #28]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1a      	ldr	r2, [r3, #32]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	02008000 	.word	0x02008000

080089c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b20      	cmp	r3, #32
 80089dc:	d138      	bne.n	8008a50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e032      	b.n	8008a52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2224      	movs	r2, #36	; 0x24
 80089f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0201 	bic.w	r2, r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6819      	ldr	r1, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0201 	orr.w	r2, r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e000      	b.n	8008a52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a50:	2302      	movs	r3, #2
  }
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d139      	bne.n	8008ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d101      	bne.n	8008a82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e033      	b.n	8008aea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2224      	movs	r2, #36	; 0x24
 8008a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0201 	bic.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008ab0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	e000      	b.n	8008aea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ae8:	2302      	movs	r3, #2
  }
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b00:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <HAL_PWREx_ConfigSupply+0x70>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d00a      	beq.n	8008b22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b0c:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <HAL_PWREx_ConfigSupply+0x70>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d001      	beq.n	8008b1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e01f      	b.n	8008b5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e01d      	b.n	8008b5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b22:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <HAL_PWREx_ConfigSupply+0x70>)
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f023 0207 	bic.w	r2, r3, #7
 8008b2a:	490f      	ldr	r1, [pc, #60]	; (8008b68 <HAL_PWREx_ConfigSupply+0x70>)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b32:	f7fa fd4d 	bl	80035d0 <HAL_GetTick>
 8008b36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b38:	e009      	b.n	8008b4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b3a:	f7fa fd49 	bl	80035d0 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b48:	d901      	bls.n	8008b4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e007      	b.n	8008b5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b4e:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <HAL_PWREx_ConfigSupply+0x70>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b5a:	d1ee      	bne.n	8008b3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	58024800 	.word	0x58024800

08008b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08c      	sub	sp, #48	; 0x30
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f000 bc48 	b.w	8009410 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 8088 	beq.w	8008c9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b8e:	4b99      	ldr	r3, [pc, #612]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b98:	4b96      	ldr	r3, [pc, #600]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	2b10      	cmp	r3, #16
 8008ba2:	d007      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x48>
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	2b18      	cmp	r3, #24
 8008ba8:	d111      	bne.n	8008bce <HAL_RCC_OscConfig+0x62>
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d10c      	bne.n	8008bce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb4:	4b8f      	ldr	r3, [pc, #572]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d06d      	beq.n	8008c9c <HAL_RCC_OscConfig+0x130>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d169      	bne.n	8008c9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f000 bc21 	b.w	8009410 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bd6:	d106      	bne.n	8008be6 <HAL_RCC_OscConfig+0x7a>
 8008bd8:	4b86      	ldr	r3, [pc, #536]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a85      	ldr	r2, [pc, #532]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	e02e      	b.n	8008c44 <HAL_RCC_OscConfig+0xd8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10c      	bne.n	8008c08 <HAL_RCC_OscConfig+0x9c>
 8008bee:	4b81      	ldr	r3, [pc, #516]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a80      	ldr	r2, [pc, #512]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	4b7e      	ldr	r3, [pc, #504]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a7d      	ldr	r2, [pc, #500]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	e01d      	b.n	8008c44 <HAL_RCC_OscConfig+0xd8>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c10:	d10c      	bne.n	8008c2c <HAL_RCC_OscConfig+0xc0>
 8008c12:	4b78      	ldr	r3, [pc, #480]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a77      	ldr	r2, [pc, #476]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	4b75      	ldr	r3, [pc, #468]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a74      	ldr	r2, [pc, #464]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	e00b      	b.n	8008c44 <HAL_RCC_OscConfig+0xd8>
 8008c2c:	4b71      	ldr	r3, [pc, #452]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a70      	ldr	r2, [pc, #448]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	4b6e      	ldr	r3, [pc, #440]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a6d      	ldr	r2, [pc, #436]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d013      	beq.n	8008c74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c4c:	f7fa fcc0 	bl	80035d0 <HAL_GetTick>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c52:	e008      	b.n	8008c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c54:	f7fa fcbc 	bl	80035d0 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b64      	cmp	r3, #100	; 0x64
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e3d4      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c66:	4b63      	ldr	r3, [pc, #396]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0f0      	beq.n	8008c54 <HAL_RCC_OscConfig+0xe8>
 8008c72:	e014      	b.n	8008c9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7fa fcac 	bl	80035d0 <HAL_GetTick>
 8008c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c7c:	f7fa fca8 	bl	80035d0 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b64      	cmp	r3, #100	; 0x64
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e3c0      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c8e:	4b59      	ldr	r3, [pc, #356]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1f0      	bne.n	8008c7c <HAL_RCC_OscConfig+0x110>
 8008c9a:	e000      	b.n	8008c9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80ca 	beq.w	8008e40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cac:	4b51      	ldr	r3, [pc, #324]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cb6:	4b4f      	ldr	r3, [pc, #316]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x166>
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	2b18      	cmp	r3, #24
 8008cc6:	d156      	bne.n	8008d76 <HAL_RCC_OscConfig+0x20a>
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d151      	bne.n	8008d76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cd2:	4b48      	ldr	r3, [pc, #288]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <HAL_RCC_OscConfig+0x17e>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e392      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cea:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f023 0219 	bic.w	r2, r3, #25
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	493f      	ldr	r1, [pc, #252]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cfc:	f7fa fc68 	bl	80035d0 <HAL_GetTick>
 8008d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d04:	f7fa fc64 	bl	80035d0 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e37c      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d16:	4b37      	ldr	r3, [pc, #220]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0f0      	beq.n	8008d04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d22:	f7fa fc61 	bl	80035e8 <HAL_GetREVID>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d817      	bhi.n	8008d60 <HAL_RCC_OscConfig+0x1f4>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b40      	cmp	r3, #64	; 0x40
 8008d36:	d108      	bne.n	8008d4a <HAL_RCC_OscConfig+0x1de>
 8008d38:	4b2e      	ldr	r3, [pc, #184]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d40:	4a2c      	ldr	r2, [pc, #176]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d48:	e07a      	b.n	8008e40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d4a:	4b2a      	ldr	r3, [pc, #168]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	031b      	lsls	r3, r3, #12
 8008d58:	4926      	ldr	r1, [pc, #152]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d5e:	e06f      	b.n	8008e40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d60:	4b24      	ldr	r3, [pc, #144]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	061b      	lsls	r3, r3, #24
 8008d6e:	4921      	ldr	r1, [pc, #132]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d74:	e064      	b.n	8008e40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d047      	beq.n	8008e0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f023 0219 	bic.w	r2, r3, #25
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	491a      	ldr	r1, [pc, #104]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d90:	f7fa fc1e 	bl	80035d0 <HAL_GetTick>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d98:	f7fa fc1a 	bl	80035d0 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e332      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008daa:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f0      	beq.n	8008d98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008db6:	f7fa fc17 	bl	80035e8 <HAL_GetREVID>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d819      	bhi.n	8008df8 <HAL_RCC_OscConfig+0x28c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	d108      	bne.n	8008dde <HAL_RCC_OscConfig+0x272>
 8008dcc:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008dd4:	4a07      	ldr	r2, [pc, #28]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dda:	6053      	str	r3, [r2, #4]
 8008ddc:	e030      	b.n	8008e40 <HAL_RCC_OscConfig+0x2d4>
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	031b      	lsls	r3, r3, #12
 8008dec:	4901      	ldr	r1, [pc, #4]	; (8008df4 <HAL_RCC_OscConfig+0x288>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	604b      	str	r3, [r1, #4]
 8008df2:	e025      	b.n	8008e40 <HAL_RCC_OscConfig+0x2d4>
 8008df4:	58024400 	.word	0x58024400
 8008df8:	4b9a      	ldr	r3, [pc, #616]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	061b      	lsls	r3, r3, #24
 8008e06:	4997      	ldr	r1, [pc, #604]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	604b      	str	r3, [r1, #4]
 8008e0c:	e018      	b.n	8008e40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e0e:	4b95      	ldr	r3, [pc, #596]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a94      	ldr	r2, [pc, #592]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1a:	f7fa fbd9 	bl	80035d0 <HAL_GetTick>
 8008e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e20:	e008      	b.n	8008e34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e22:	f7fa fbd5 	bl	80035d0 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e2ed      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e34:	4b8b      	ldr	r3, [pc, #556]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1f0      	bne.n	8008e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0310 	and.w	r3, r3, #16
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 80a9 	beq.w	8008fa0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e4e:	4b85      	ldr	r3, [pc, #532]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e58:	4b82      	ldr	r3, [pc, #520]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d007      	beq.n	8008e74 <HAL_RCC_OscConfig+0x308>
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2b18      	cmp	r3, #24
 8008e68:	d13a      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x374>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d135      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e74:	4b7b      	ldr	r3, [pc, #492]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_RCC_OscConfig+0x320>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	2b80      	cmp	r3, #128	; 0x80
 8008e86:	d001      	beq.n	8008e8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e2c1      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e8c:	f7fa fbac 	bl	80035e8 <HAL_GetREVID>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d817      	bhi.n	8008eca <HAL_RCC_OscConfig+0x35e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d108      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x348>
 8008ea2:	4b70      	ldr	r3, [pc, #448]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008eaa:	4a6e      	ldr	r2, [pc, #440]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eb0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eb2:	e075      	b.n	8008fa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008eb4:	4b6b      	ldr	r3, [pc, #428]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	069b      	lsls	r3, r3, #26
 8008ec2:	4968      	ldr	r1, [pc, #416]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ec8:	e06a      	b.n	8008fa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008eca:	4b66      	ldr	r3, [pc, #408]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	061b      	lsls	r3, r3, #24
 8008ed8:	4962      	ldr	r1, [pc, #392]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ede:	e05f      	b.n	8008fa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d042      	beq.n	8008f6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ee8:	4b5e      	ldr	r3, [pc, #376]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a5d      	ldr	r2, [pc, #372]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef4:	f7fa fb6c 	bl	80035d0 <HAL_GetTick>
 8008ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008efa:	e008      	b.n	8008f0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008efc:	f7fa fb68 	bl	80035d0 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e280      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f0e:	4b55      	ldr	r3, [pc, #340]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0f0      	beq.n	8008efc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f1a:	f7fa fb65 	bl	80035e8 <HAL_GetREVID>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d817      	bhi.n	8008f58 <HAL_RCC_OscConfig+0x3ec>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d108      	bne.n	8008f42 <HAL_RCC_OscConfig+0x3d6>
 8008f30:	4b4c      	ldr	r3, [pc, #304]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f38:	4a4a      	ldr	r2, [pc, #296]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f3e:	6053      	str	r3, [r2, #4]
 8008f40:	e02e      	b.n	8008fa0 <HAL_RCC_OscConfig+0x434>
 8008f42:	4b48      	ldr	r3, [pc, #288]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	069b      	lsls	r3, r3, #26
 8008f50:	4944      	ldr	r1, [pc, #272]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	604b      	str	r3, [r1, #4]
 8008f56:	e023      	b.n	8008fa0 <HAL_RCC_OscConfig+0x434>
 8008f58:	4b42      	ldr	r3, [pc, #264]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	061b      	lsls	r3, r3, #24
 8008f66:	493f      	ldr	r1, [pc, #252]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60cb      	str	r3, [r1, #12]
 8008f6c:	e018      	b.n	8008fa0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f6e:	4b3d      	ldr	r3, [pc, #244]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a3c      	ldr	r2, [pc, #240]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7a:	f7fa fb29 	bl	80035d0 <HAL_GetTick>
 8008f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f80:	e008      	b.n	8008f94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f82:	f7fa fb25 	bl	80035d0 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e23d      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f94:	4b33      	ldr	r3, [pc, #204]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1f0      	bne.n	8008f82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d036      	beq.n	800901a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d019      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fb4:	4b2b      	ldr	r3, [pc, #172]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb8:	4a2a      	ldr	r2, [pc, #168]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc0:	f7fa fb06 	bl	80035d0 <HAL_GetTick>
 8008fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fc8:	f7fa fb02 	bl	80035d0 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e21a      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fda:	4b22      	ldr	r3, [pc, #136]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0f0      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x45c>
 8008fe6:	e018      	b.n	800901a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fec:	4a1d      	ldr	r2, [pc, #116]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff4:	f7fa faec 	bl	80035d0 <HAL_GetTick>
 8008ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ffc:	f7fa fae8 	bl	80035d0 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e200      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800900e:	4b15      	ldr	r3, [pc, #84]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8009010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f0      	bne.n	8008ffc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d039      	beq.n	800909a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d01c      	beq.n	8009068 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800902e:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a0c      	ldr	r2, [pc, #48]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8009034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009038:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800903a:	f7fa fac9 	bl	80035d0 <HAL_GetTick>
 800903e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009040:	e008      	b.n	8009054 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009042:	f7fa fac5 	bl	80035d0 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d901      	bls.n	8009054 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e1dd      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009054:	4b03      	ldr	r3, [pc, #12]	; (8009064 <HAL_RCC_OscConfig+0x4f8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0f0      	beq.n	8009042 <HAL_RCC_OscConfig+0x4d6>
 8009060:	e01b      	b.n	800909a <HAL_RCC_OscConfig+0x52e>
 8009062:	bf00      	nop
 8009064:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009068:	4b9b      	ldr	r3, [pc, #620]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a9a      	ldr	r2, [pc, #616]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800906e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009072:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009074:	f7fa faac 	bl	80035d0 <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800907c:	f7fa faa8 	bl	80035d0 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e1c0      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800908e:	4b92      	ldr	r3, [pc, #584]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f0      	bne.n	800907c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0304 	and.w	r3, r3, #4
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 8081 	beq.w	80091aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090a8:	4b8c      	ldr	r3, [pc, #560]	; (80092dc <HAL_RCC_OscConfig+0x770>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a8b      	ldr	r2, [pc, #556]	; (80092dc <HAL_RCC_OscConfig+0x770>)
 80090ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090b4:	f7fa fa8c 	bl	80035d0 <HAL_GetTick>
 80090b8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090ba:	e008      	b.n	80090ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090bc:	f7fa fa88 	bl	80035d0 <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	2b64      	cmp	r3, #100	; 0x64
 80090c8:	d901      	bls.n	80090ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e1a0      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090ce:	4b83      	ldr	r3, [pc, #524]	; (80092dc <HAL_RCC_OscConfig+0x770>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0f0      	beq.n	80090bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d106      	bne.n	80090f0 <HAL_RCC_OscConfig+0x584>
 80090e2:	4b7d      	ldr	r3, [pc, #500]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80090e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e6:	4a7c      	ldr	r2, [pc, #496]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80090e8:	f043 0301 	orr.w	r3, r3, #1
 80090ec:	6713      	str	r3, [r2, #112]	; 0x70
 80090ee:	e02d      	b.n	800914c <HAL_RCC_OscConfig+0x5e0>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10c      	bne.n	8009112 <HAL_RCC_OscConfig+0x5a6>
 80090f8:	4b77      	ldr	r3, [pc, #476]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80090fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fc:	4a76      	ldr	r2, [pc, #472]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80090fe:	f023 0301 	bic.w	r3, r3, #1
 8009102:	6713      	str	r3, [r2, #112]	; 0x70
 8009104:	4b74      	ldr	r3, [pc, #464]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	4a73      	ldr	r2, [pc, #460]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800910a:	f023 0304 	bic.w	r3, r3, #4
 800910e:	6713      	str	r3, [r2, #112]	; 0x70
 8009110:	e01c      	b.n	800914c <HAL_RCC_OscConfig+0x5e0>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b05      	cmp	r3, #5
 8009118:	d10c      	bne.n	8009134 <HAL_RCC_OscConfig+0x5c8>
 800911a:	4b6f      	ldr	r3, [pc, #444]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	4a6e      	ldr	r2, [pc, #440]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009120:	f043 0304 	orr.w	r3, r3, #4
 8009124:	6713      	str	r3, [r2, #112]	; 0x70
 8009126:	4b6c      	ldr	r3, [pc, #432]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	4a6b      	ldr	r2, [pc, #428]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	6713      	str	r3, [r2, #112]	; 0x70
 8009132:	e00b      	b.n	800914c <HAL_RCC_OscConfig+0x5e0>
 8009134:	4b68      	ldr	r3, [pc, #416]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009138:	4a67      	ldr	r2, [pc, #412]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800913a:	f023 0301 	bic.w	r3, r3, #1
 800913e:	6713      	str	r3, [r2, #112]	; 0x70
 8009140:	4b65      	ldr	r3, [pc, #404]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009144:	4a64      	ldr	r2, [pc, #400]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009146:	f023 0304 	bic.w	r3, r3, #4
 800914a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d015      	beq.n	8009180 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009154:	f7fa fa3c 	bl	80035d0 <HAL_GetTick>
 8009158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800915a:	e00a      	b.n	8009172 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800915c:	f7fa fa38 	bl	80035d0 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	f241 3288 	movw	r2, #5000	; 0x1388
 800916a:	4293      	cmp	r3, r2
 800916c:	d901      	bls.n	8009172 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e14e      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009172:	4b59      	ldr	r3, [pc, #356]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0ee      	beq.n	800915c <HAL_RCC_OscConfig+0x5f0>
 800917e:	e014      	b.n	80091aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009180:	f7fa fa26 	bl	80035d0 <HAL_GetTick>
 8009184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009186:	e00a      	b.n	800919e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009188:	f7fa fa22 	bl	80035d0 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f241 3288 	movw	r2, #5000	; 0x1388
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e138      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800919e:	4b4e      	ldr	r3, [pc, #312]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1ee      	bne.n	8009188 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 812d 	beq.w	800940e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091b4:	4b48      	ldr	r3, [pc, #288]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091bc:	2b18      	cmp	r3, #24
 80091be:	f000 80bd 	beq.w	800933c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	f040 809e 	bne.w	8009308 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091cc:	4b42      	ldr	r3, [pc, #264]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a41      	ldr	r2, [pc, #260]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80091d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d8:	f7fa f9fa 	bl	80035d0 <HAL_GetTick>
 80091dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091de:	e008      	b.n	80091f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091e0:	f7fa f9f6 	bl	80035d0 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d901      	bls.n	80091f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e10e      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091f2:	4b39      	ldr	r3, [pc, #228]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1f0      	bne.n	80091e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091fe:	4b36      	ldr	r3, [pc, #216]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009202:	4b37      	ldr	r3, [pc, #220]	; (80092e0 <HAL_RCC_OscConfig+0x774>)
 8009204:	4013      	ands	r3, r2
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800920e:	0112      	lsls	r2, r2, #4
 8009210:	430a      	orrs	r2, r1
 8009212:	4931      	ldr	r1, [pc, #196]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009214:	4313      	orrs	r3, r2
 8009216:	628b      	str	r3, [r1, #40]	; 0x28
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921c:	3b01      	subs	r3, #1
 800921e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009226:	3b01      	subs	r3, #1
 8009228:	025b      	lsls	r3, r3, #9
 800922a:	b29b      	uxth	r3, r3
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009232:	3b01      	subs	r3, #1
 8009234:	041b      	lsls	r3, r3, #16
 8009236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800923a:	431a      	orrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009240:	3b01      	subs	r3, #1
 8009242:	061b      	lsls	r3, r3, #24
 8009244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009248:	4923      	ldr	r1, [pc, #140]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800924a:	4313      	orrs	r3, r2
 800924c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800924e:	4b22      	ldr	r3, [pc, #136]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	4a21      	ldr	r2, [pc, #132]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800925a:	4b1f      	ldr	r3, [pc, #124]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800925c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800925e:	4b21      	ldr	r3, [pc, #132]	; (80092e4 <HAL_RCC_OscConfig+0x778>)
 8009260:	4013      	ands	r3, r2
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009266:	00d2      	lsls	r2, r2, #3
 8009268:	491b      	ldr	r1, [pc, #108]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800926a:	4313      	orrs	r3, r2
 800926c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800926e:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009272:	f023 020c 	bic.w	r2, r3, #12
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	4917      	ldr	r1, [pc, #92]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800927c:	4313      	orrs	r3, r2
 800927e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009280:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	f023 0202 	bic.w	r2, r3, #2
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928c:	4912      	ldr	r1, [pc, #72]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 800928e:	4313      	orrs	r3, r2
 8009290:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009292:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	4a10      	ldr	r2, [pc, #64]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 8009298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800929c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929e:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	4a0d      	ldr	r2, [pc, #52]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092aa:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	4a0a      	ldr	r2, [pc, #40]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	4a07      	ldr	r2, [pc, #28]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a04      	ldr	r2, [pc, #16]	; (80092d8 <HAL_RCC_OscConfig+0x76c>)
 80092c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ce:	f7fa f97f 	bl	80035d0 <HAL_GetTick>
 80092d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092d4:	e011      	b.n	80092fa <HAL_RCC_OscConfig+0x78e>
 80092d6:	bf00      	nop
 80092d8:	58024400 	.word	0x58024400
 80092dc:	58024800 	.word	0x58024800
 80092e0:	fffffc0c 	.word	0xfffffc0c
 80092e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092e8:	f7fa f972 	bl	80035d0 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e08a      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092fa:	4b47      	ldr	r3, [pc, #284]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0f0      	beq.n	80092e8 <HAL_RCC_OscConfig+0x77c>
 8009306:	e082      	b.n	800940e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009308:	4b43      	ldr	r3, [pc, #268]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a42      	ldr	r2, [pc, #264]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 800930e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009314:	f7fa f95c 	bl	80035d0 <HAL_GetTick>
 8009318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800931a:	e008      	b.n	800932e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800931c:	f7fa f958 	bl	80035d0 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b02      	cmp	r3, #2
 8009328:	d901      	bls.n	800932e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e070      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800932e:	4b3a      	ldr	r3, [pc, #232]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1f0      	bne.n	800931c <HAL_RCC_OscConfig+0x7b0>
 800933a:	e068      	b.n	800940e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800933c:	4b36      	ldr	r3, [pc, #216]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 800933e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009340:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009342:	4b35      	ldr	r3, [pc, #212]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	2b01      	cmp	r3, #1
 800934e:	d031      	beq.n	80093b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f003 0203 	and.w	r2, r3, #3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800935a:	429a      	cmp	r2, r3
 800935c:	d12a      	bne.n	80093b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	091b      	lsrs	r3, r3, #4
 8009362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800936a:	429a      	cmp	r2, r3
 800936c:	d122      	bne.n	80093b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800937a:	429a      	cmp	r2, r3
 800937c:	d11a      	bne.n	80093b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	0a5b      	lsrs	r3, r3, #9
 8009382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800938c:	429a      	cmp	r2, r3
 800938e:	d111      	bne.n	80093b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	0c1b      	lsrs	r3, r3, #16
 8009394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800939e:	429a      	cmp	r2, r3
 80093a0:	d108      	bne.n	80093b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	0e1b      	lsrs	r3, r3, #24
 80093a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d001      	beq.n	80093b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e02b      	b.n	8009410 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80093b8:	4b17      	ldr	r3, [pc, #92]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 80093ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093bc:	08db      	lsrs	r3, r3, #3
 80093be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d01f      	beq.n	800940e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80093ce:	4b12      	ldr	r3, [pc, #72]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	4a11      	ldr	r2, [pc, #68]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 80093d4:	f023 0301 	bic.w	r3, r3, #1
 80093d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093da:	f7fa f8f9 	bl	80035d0 <HAL_GetTick>
 80093de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80093e0:	bf00      	nop
 80093e2:	f7fa f8f5 	bl	80035d0 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d0f9      	beq.n	80093e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 80093f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <HAL_RCC_OscConfig+0x8b0>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093fa:	00d2      	lsls	r2, r2, #3
 80093fc:	4906      	ldr	r1, [pc, #24]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	4a04      	ldr	r2, [pc, #16]	; (8009418 <HAL_RCC_OscConfig+0x8ac>)
 8009408:	f043 0301 	orr.w	r3, r3, #1
 800940c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3730      	adds	r7, #48	; 0x30
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	58024400 	.word	0x58024400
 800941c:	ffff0007 	.word	0xffff0007

08009420 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e19c      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009434:	4b8a      	ldr	r3, [pc, #552]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d910      	bls.n	8009464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009442:	4b87      	ldr	r3, [pc, #540]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f023 020f 	bic.w	r2, r3, #15
 800944a:	4985      	ldr	r1, [pc, #532]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	4313      	orrs	r3, r2
 8009450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009452:	4b83      	ldr	r3, [pc, #524]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 030f 	and.w	r3, r3, #15
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d001      	beq.n	8009464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e184      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d010      	beq.n	8009492 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	4b7b      	ldr	r3, [pc, #492]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800947c:	429a      	cmp	r2, r3
 800947e:	d908      	bls.n	8009492 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009480:	4b78      	ldr	r3, [pc, #480]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	4975      	ldr	r1, [pc, #468]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 800948e:	4313      	orrs	r3, r2
 8009490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d010      	beq.n	80094c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	695a      	ldr	r2, [r3, #20]
 80094a2:	4b70      	ldr	r3, [pc, #448]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d908      	bls.n	80094c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094ae:	4b6d      	ldr	r3, [pc, #436]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	496a      	ldr	r1, [pc, #424]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d010      	beq.n	80094ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	4b64      	ldr	r3, [pc, #400]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094d8:	429a      	cmp	r2, r3
 80094da:	d908      	bls.n	80094ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094dc:	4b61      	ldr	r3, [pc, #388]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	495e      	ldr	r1, [pc, #376]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0320 	and.w	r3, r3, #32
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d010      	beq.n	800951c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69da      	ldr	r2, [r3, #28]
 80094fe:	4b59      	ldr	r3, [pc, #356]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009506:	429a      	cmp	r2, r3
 8009508:	d908      	bls.n	800951c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800950a:	4b56      	ldr	r3, [pc, #344]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	4953      	ldr	r1, [pc, #332]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009518:	4313      	orrs	r3, r2
 800951a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d010      	beq.n	800954a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	4b4d      	ldr	r3, [pc, #308]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	429a      	cmp	r2, r3
 8009536:	d908      	bls.n	800954a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009538:	4b4a      	ldr	r3, [pc, #296]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f023 020f 	bic.w	r2, r3, #15
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4947      	ldr	r1, [pc, #284]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009546:	4313      	orrs	r3, r2
 8009548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	d055      	beq.n	8009602 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009556:	4b43      	ldr	r3, [pc, #268]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	4940      	ldr	r1, [pc, #256]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009564:	4313      	orrs	r3, r2
 8009566:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d107      	bne.n	8009580 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009570:	4b3c      	ldr	r3, [pc, #240]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d121      	bne.n	80095c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0f6      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b03      	cmp	r3, #3
 8009586:	d107      	bne.n	8009598 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009588:	4b36      	ldr	r3, [pc, #216]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d115      	bne.n	80095c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e0ea      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d107      	bne.n	80095b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095a0:	4b30      	ldr	r3, [pc, #192]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e0de      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095b0:	4b2c      	ldr	r3, [pc, #176]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e0d6      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095c0:	4b28      	ldr	r3, [pc, #160]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f023 0207 	bic.w	r2, r3, #7
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	4925      	ldr	r1, [pc, #148]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095d2:	f7f9 fffd 	bl	80035d0 <HAL_GetTick>
 80095d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095d8:	e00a      	b.n	80095f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095da:	f7f9 fff9 	bl	80035d0 <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d901      	bls.n	80095f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e0be      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f0:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	429a      	cmp	r2, r3
 8009600:	d1eb      	bne.n	80095da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d010      	beq.n	8009630 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	f003 030f 	and.w	r3, r3, #15
 800961a:	429a      	cmp	r2, r3
 800961c:	d208      	bcs.n	8009630 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800961e:	4b11      	ldr	r3, [pc, #68]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	f023 020f 	bic.w	r2, r3, #15
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	490e      	ldr	r1, [pc, #56]	; (8009664 <HAL_RCC_ClockConfig+0x244>)
 800962c:	4313      	orrs	r3, r2
 800962e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009630:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d214      	bcs.n	8009668 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800963e:	4b08      	ldr	r3, [pc, #32]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f023 020f 	bic.w	r2, r3, #15
 8009646:	4906      	ldr	r1, [pc, #24]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	4313      	orrs	r3, r2
 800964c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800964e:	4b04      	ldr	r3, [pc, #16]	; (8009660 <HAL_RCC_ClockConfig+0x240>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d005      	beq.n	8009668 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e086      	b.n	800976e <HAL_RCC_ClockConfig+0x34e>
 8009660:	52002000 	.word	0x52002000
 8009664:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d010      	beq.n	8009696 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	691a      	ldr	r2, [r3, #16]
 8009678:	4b3f      	ldr	r3, [pc, #252]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009680:	429a      	cmp	r2, r3
 8009682:	d208      	bcs.n	8009696 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009684:	4b3c      	ldr	r3, [pc, #240]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	4939      	ldr	r1, [pc, #228]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 8009692:	4313      	orrs	r3, r2
 8009694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0308 	and.w	r3, r3, #8
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d010      	beq.n	80096c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695a      	ldr	r2, [r3, #20]
 80096a6:	4b34      	ldr	r3, [pc, #208]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d208      	bcs.n	80096c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096b2:	4b31      	ldr	r3, [pc, #196]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	492e      	ldr	r1, [pc, #184]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0310 	and.w	r3, r3, #16
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d010      	beq.n	80096f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	699a      	ldr	r2, [r3, #24]
 80096d4:	4b28      	ldr	r3, [pc, #160]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096dc:	429a      	cmp	r2, r3
 80096de:	d208      	bcs.n	80096f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096e0:	4b25      	ldr	r3, [pc, #148]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	4922      	ldr	r1, [pc, #136]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d010      	beq.n	8009720 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69da      	ldr	r2, [r3, #28]
 8009702:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800970a:	429a      	cmp	r2, r3
 800970c:	d208      	bcs.n	8009720 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800970e:	4b1a      	ldr	r3, [pc, #104]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	4917      	ldr	r1, [pc, #92]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 800971c:	4313      	orrs	r3, r2
 800971e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009720:	f000 f834 	bl	800978c <HAL_RCC_GetSysClockFreq>
 8009724:	4602      	mov	r2, r0
 8009726:	4b14      	ldr	r3, [pc, #80]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	0a1b      	lsrs	r3, r3, #8
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	4912      	ldr	r1, [pc, #72]	; (800977c <HAL_RCC_ClockConfig+0x35c>)
 8009732:	5ccb      	ldrb	r3, [r1, r3]
 8009734:	f003 031f 	and.w	r3, r3, #31
 8009738:	fa22 f303 	lsr.w	r3, r2, r3
 800973c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800973e:	4b0e      	ldr	r3, [pc, #56]	; (8009778 <HAL_RCC_ClockConfig+0x358>)
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	4a0d      	ldr	r2, [pc, #52]	; (800977c <HAL_RCC_ClockConfig+0x35c>)
 8009748:	5cd3      	ldrb	r3, [r2, r3]
 800974a:	f003 031f 	and.w	r3, r3, #31
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	fa22 f303 	lsr.w	r3, r2, r3
 8009754:	4a0a      	ldr	r2, [pc, #40]	; (8009780 <HAL_RCC_ClockConfig+0x360>)
 8009756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009758:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <HAL_RCC_ClockConfig+0x364>)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800975e:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <HAL_RCC_ClockConfig+0x368>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7f9 fc6c 	bl	8003040 <HAL_InitTick>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	58024400 	.word	0x58024400
 800977c:	0801552c 	.word	0x0801552c
 8009780:	2400008c 	.word	0x2400008c
 8009784:	24000088 	.word	0x24000088
 8009788:	24000090 	.word	0x24000090

0800978c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800978c:	b480      	push	{r7}
 800978e:	b089      	sub	sp, #36	; 0x24
 8009790:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009792:	4bb3      	ldr	r3, [pc, #716]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800979a:	2b18      	cmp	r3, #24
 800979c:	f200 8155 	bhi.w	8009a4a <HAL_RCC_GetSysClockFreq+0x2be>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	0800980d 	.word	0x0800980d
 80097ac:	08009a4b 	.word	0x08009a4b
 80097b0:	08009a4b 	.word	0x08009a4b
 80097b4:	08009a4b 	.word	0x08009a4b
 80097b8:	08009a4b 	.word	0x08009a4b
 80097bc:	08009a4b 	.word	0x08009a4b
 80097c0:	08009a4b 	.word	0x08009a4b
 80097c4:	08009a4b 	.word	0x08009a4b
 80097c8:	08009833 	.word	0x08009833
 80097cc:	08009a4b 	.word	0x08009a4b
 80097d0:	08009a4b 	.word	0x08009a4b
 80097d4:	08009a4b 	.word	0x08009a4b
 80097d8:	08009a4b 	.word	0x08009a4b
 80097dc:	08009a4b 	.word	0x08009a4b
 80097e0:	08009a4b 	.word	0x08009a4b
 80097e4:	08009a4b 	.word	0x08009a4b
 80097e8:	08009839 	.word	0x08009839
 80097ec:	08009a4b 	.word	0x08009a4b
 80097f0:	08009a4b 	.word	0x08009a4b
 80097f4:	08009a4b 	.word	0x08009a4b
 80097f8:	08009a4b 	.word	0x08009a4b
 80097fc:	08009a4b 	.word	0x08009a4b
 8009800:	08009a4b 	.word	0x08009a4b
 8009804:	08009a4b 	.word	0x08009a4b
 8009808:	0800983f 	.word	0x0800983f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800980c:	4b94      	ldr	r3, [pc, #592]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009818:	4b91      	ldr	r3, [pc, #580]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	08db      	lsrs	r3, r3, #3
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	4a90      	ldr	r2, [pc, #576]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009824:	fa22 f303 	lsr.w	r3, r2, r3
 8009828:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800982a:	e111      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800982c:	4b8d      	ldr	r3, [pc, #564]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800982e:	61bb      	str	r3, [r7, #24]
      break;
 8009830:	e10e      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009832:	4b8d      	ldr	r3, [pc, #564]	; (8009a68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009834:	61bb      	str	r3, [r7, #24]
      break;
 8009836:	e10b      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009838:	4b8c      	ldr	r3, [pc, #560]	; (8009a6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800983a:	61bb      	str	r3, [r7, #24]
      break;
 800983c:	e108      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800983e:	4b88      	ldr	r3, [pc, #544]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009848:	4b85      	ldr	r3, [pc, #532]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800984a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984c:	091b      	lsrs	r3, r3, #4
 800984e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009852:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009854:	4b82      	ldr	r3, [pc, #520]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800985e:	4b80      	ldr	r3, [pc, #512]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009862:	08db      	lsrs	r3, r3, #3
 8009864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	fb02 f303 	mul.w	r3, r2, r3
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009876:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 80e1 	beq.w	8009a44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b02      	cmp	r3, #2
 8009886:	f000 8083 	beq.w	8009990 <HAL_RCC_GetSysClockFreq+0x204>
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b02      	cmp	r3, #2
 800988e:	f200 80a1 	bhi.w	80099d4 <HAL_RCC_GetSysClockFreq+0x248>
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <HAL_RCC_GetSysClockFreq+0x114>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d056      	beq.n	800994c <HAL_RCC_GetSysClockFreq+0x1c0>
 800989e:	e099      	b.n	80099d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a0:	4b6f      	ldr	r3, [pc, #444]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d02d      	beq.n	8009908 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ac:	4b6c      	ldr	r3, [pc, #432]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	08db      	lsrs	r3, r3, #3
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	4a6b      	ldr	r2, [pc, #428]	; (8009a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098b8:	fa22 f303 	lsr.w	r3, r2, r3
 80098bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d6:	4b62      	ldr	r3, [pc, #392]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009902:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009906:	e087      	b.n	8009a18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991a:	4b51      	ldr	r3, [pc, #324]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992a:	ed97 6a02 	vldr	s12, [r7, #8]
 800992e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800993e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800994a:	e065      	b.n	8009a18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800995a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995e:	4b40      	ldr	r3, [pc, #256]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009972:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800997e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800998e:	e043      	b.n	8009a18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a7c <HAL_RCC_GetSysClockFreq+0x2f0>
 800999e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a2:	4b2f      	ldr	r3, [pc, #188]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099d2:	e021      	b.n	8009a18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a78 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e6:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a18:	4b11      	ldr	r3, [pc, #68]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	0a5b      	lsrs	r3, r3, #9
 8009a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a22:	3301      	adds	r3, #1
 8009a24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	ee07 3a90 	vmov	s15, r3
 8009a2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3c:	ee17 3a90 	vmov	r3, s15
 8009a40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a42:	e005      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	61bb      	str	r3, [r7, #24]
      break;
 8009a48:	e002      	b.n	8009a50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a4c:	61bb      	str	r3, [r7, #24]
      break;
 8009a4e:	bf00      	nop
  }

  return sysclockfreq;
 8009a50:	69bb      	ldr	r3, [r7, #24]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3724      	adds	r7, #36	; 0x24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	58024400 	.word	0x58024400
 8009a64:	03d09000 	.word	0x03d09000
 8009a68:	003d0900 	.word	0x003d0900
 8009a6c:	017d7840 	.word	0x017d7840
 8009a70:	46000000 	.word	0x46000000
 8009a74:	4c742400 	.word	0x4c742400
 8009a78:	4a742400 	.word	0x4a742400
 8009a7c:	4bbebc20 	.word	0x4bbebc20

08009a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a86:	f7ff fe81 	bl	800978c <HAL_RCC_GetSysClockFreq>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	0a1b      	lsrs	r3, r3, #8
 8009a92:	f003 030f 	and.w	r3, r3, #15
 8009a96:	490f      	ldr	r1, [pc, #60]	; (8009ad4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a98:	5ccb      	ldrb	r3, [r1, r3]
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	f003 030f 	and.w	r3, r3, #15
 8009aac:	4a09      	ldr	r2, [pc, #36]	; (8009ad4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009aae:	5cd3      	ldrb	r3, [r2, r3]
 8009ab0:	f003 031f 	and.w	r3, r3, #31
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aba:	4a07      	ldr	r2, [pc, #28]	; (8009ad8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009abc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009abe:	4a07      	ldr	r2, [pc, #28]	; (8009adc <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ac4:	4b04      	ldr	r3, [pc, #16]	; (8009ad8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	58024400 	.word	0x58024400
 8009ad4:	0801552c 	.word	0x0801552c
 8009ad8:	2400008c 	.word	0x2400008c
 8009adc:	24000088 	.word	0x24000088

08009ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ae4:	f7ff ffcc 	bl	8009a80 <HAL_RCC_GetHCLKFreq>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	091b      	lsrs	r3, r3, #4
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	4904      	ldr	r1, [pc, #16]	; (8009b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009af6:	5ccb      	ldrb	r3, [r1, r3]
 8009af8:	f003 031f 	and.w	r3, r3, #31
 8009afc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	58024400 	.word	0x58024400
 8009b08:	0801552c 	.word	0x0801552c

08009b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b10:	f7ff ffb6 	bl	8009a80 <HAL_RCC_GetHCLKFreq>
 8009b14:	4602      	mov	r2, r0
 8009b16:	4b06      	ldr	r3, [pc, #24]	; (8009b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	4904      	ldr	r1, [pc, #16]	; (8009b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b22:	5ccb      	ldrb	r3, [r1, r3]
 8009b24:	f003 031f 	and.w	r3, r3, #31
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	58024400 	.word	0x58024400
 8009b34:	0801552c 	.word	0x0801552c

08009b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	223f      	movs	r2, #63	; 0x3f
 8009b46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b48:	4b1a      	ldr	r3, [pc, #104]	; (8009bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	f003 0207 	and.w	r2, r3, #7
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009b54:	4b17      	ldr	r3, [pc, #92]	; (8009bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009b60:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	f003 020f 	and.w	r2, r3, #15
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009b6c:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009b78:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009b84:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009b90:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b9c:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <HAL_RCC_GetClockConfig+0x80>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 020f 	and.w	r2, r3, #15
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	601a      	str	r2, [r3, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	58024400 	.word	0x58024400
 8009bb8:	52002000 	.word	0x52002000

08009bbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bc0:	b0ca      	sub	sp, #296	; 0x128
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009be0:	2500      	movs	r5, #0
 8009be2:	ea54 0305 	orrs.w	r3, r4, r5
 8009be6:	d049      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bf2:	d02f      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009bf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bf8:	d828      	bhi.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bfe:	d01a      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c04:	d822      	bhi.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c0e:	d007      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c10:	e01c      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c12:	4bb8      	ldr	r3, [pc, #736]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	4ab7      	ldr	r2, [pc, #732]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c1e:	e01a      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c24:	3308      	adds	r3, #8
 8009c26:	2102      	movs	r1, #2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f002 fb61 	bl	800c2f0 <RCCEx_PLL2_Config>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c34:	e00f      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3a:	3328      	adds	r3, #40	; 0x28
 8009c3c:	2102      	movs	r1, #2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f002 fc08 	bl	800c454 <RCCEx_PLL3_Config>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c4a:	e004      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c52:	e000      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c5e:	4ba5      	ldr	r3, [pc, #660]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c6c:	4aa1      	ldr	r2, [pc, #644]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	6513      	str	r3, [r2, #80]	; 0x50
 8009c72:	e003      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009c88:	f04f 0900 	mov.w	r9, #0
 8009c8c:	ea58 0309 	orrs.w	r3, r8, r9
 8009c90:	d047      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d82a      	bhi.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cb9 	.word	0x08009cb9
 8009ca8:	08009cc7 	.word	0x08009cc7
 8009cac:	08009cdd 	.word	0x08009cdd
 8009cb0:	08009cfb 	.word	0x08009cfb
 8009cb4:	08009cfb 	.word	0x08009cfb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cb8:	4b8e      	ldr	r3, [pc, #568]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbc:	4a8d      	ldr	r2, [pc, #564]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cc4:	e01a      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cca:	3308      	adds	r3, #8
 8009ccc:	2100      	movs	r1, #0
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f002 fb0e 	bl	800c2f0 <RCCEx_PLL2_Config>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cda:	e00f      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce0:	3328      	adds	r3, #40	; 0x28
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f002 fbb5 	bl	800c454 <RCCEx_PLL3_Config>
 8009cea:	4603      	mov	r3, r0
 8009cec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cf0:	e004      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cf8:	e000      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d04:	4b7b      	ldr	r3, [pc, #492]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d08:	f023 0107 	bic.w	r1, r3, #7
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d12:	4a78      	ldr	r2, [pc, #480]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6513      	str	r3, [r2, #80]	; 0x50
 8009d18:	e003      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009d2e:	f04f 0b00 	mov.w	fp, #0
 8009d32:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d36:	d04c      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d42:	d030      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d48:	d829      	bhi.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8009d4c:	d02d      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8009d50:	d825      	bhi.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d52:	2b80      	cmp	r3, #128	; 0x80
 8009d54:	d018      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009d56:	2b80      	cmp	r3, #128	; 0x80
 8009d58:	d821      	bhi.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009d5e:	2b40      	cmp	r3, #64	; 0x40
 8009d60:	d007      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009d62:	e01c      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d64:	4b63      	ldr	r3, [pc, #396]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	4a62      	ldr	r2, [pc, #392]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d70:	e01c      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d76:	3308      	adds	r3, #8
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f002 fab8 	bl	800c2f0 <RCCEx_PLL2_Config>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d86:	e011      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8c:	3328      	adds	r3, #40	; 0x28
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f002 fb5f 	bl	800c454 <RCCEx_PLL3_Config>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d9c:	e006      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009da4:	e002      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009db4:	4b4f      	ldr	r3, [pc, #316]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc2:	4a4c      	ldr	r2, [pc, #304]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc4:	430b      	orrs	r3, r1
 8009dc6:	6513      	str	r3, [r2, #80]	; 0x50
 8009dc8:	e003      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009dde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009de2:	2300      	movs	r3, #0
 8009de4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009de8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009dec:	460b      	mov	r3, r1
 8009dee:	4313      	orrs	r3, r2
 8009df0:	d053      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dfe:	d035      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009e00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e04:	d82e      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e0a:	d031      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009e0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e10:	d828      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e16:	d01a      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e1c:	d822      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e26:	d007      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009e28:	e01c      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2a:	4b32      	ldr	r3, [pc, #200]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	4a31      	ldr	r2, [pc, #196]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e36:	e01c      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f002 fa55 	bl	800c2f0 <RCCEx_PLL2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e4c:	e011      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e52:	3328      	adds	r3, #40	; 0x28
 8009e54:	2100      	movs	r1, #0
 8009e56:	4618      	mov	r0, r3
 8009e58:	f002 fafc 	bl	800c454 <RCCEx_PLL3_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e62:	e006      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e6a:	e002      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e6c:	bf00      	nop
 8009e6e:	e000      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10b      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e7a:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e8a:	4a1a      	ldr	r2, [pc, #104]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8009e90:	e003      	b.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009ea6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009eb0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	d056      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ebe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ec6:	d038      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ecc:	d831      	bhi.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ece:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ed2:	d034      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009ed4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ed8:	d82b      	bhi.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ede:	d01d      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ee4:	d825      	bhi.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d006      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009eea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eee:	d00a      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009ef0:	e01f      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ef2:	bf00      	nop
 8009ef4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ef8:	4ba2      	ldr	r3, [pc, #648]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	4aa1      	ldr	r2, [pc, #644]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f04:	e01c      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f002 f9ee 	bl	800c2f0 <RCCEx_PLL2_Config>
 8009f14:	4603      	mov	r3, r0
 8009f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f1a:	e011      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f20:	3328      	adds	r3, #40	; 0x28
 8009f22:	2100      	movs	r1, #0
 8009f24:	4618      	mov	r0, r3
 8009f26:	f002 fa95 	bl	800c454 <RCCEx_PLL3_Config>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f30:	e006      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f38:	e002      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f3a:	bf00      	nop
 8009f3c:	e000      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f48:	4b8e      	ldr	r3, [pc, #568]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f58:	4a8a      	ldr	r2, [pc, #552]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8009f5e:	e003      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009f7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009f82:	460b      	mov	r3, r1
 8009f84:	4313      	orrs	r3, r2
 8009f86:	d03a      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8e:	2b30      	cmp	r3, #48	; 0x30
 8009f90:	d01f      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f92:	2b30      	cmp	r3, #48	; 0x30
 8009f94:	d819      	bhi.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f96:	2b20      	cmp	r3, #32
 8009f98:	d00c      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009f9a:	2b20      	cmp	r3, #32
 8009f9c:	d815      	bhi.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d019      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009fa2:	2b10      	cmp	r3, #16
 8009fa4:	d111      	bne.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa6:	4b77      	ldr	r3, [pc, #476]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	4a76      	ldr	r2, [pc, #472]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009fb2:	e011      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb8:	3308      	adds	r3, #8
 8009fba:	2102      	movs	r1, #2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 f997 	bl	800c2f0 <RCCEx_PLL2_Config>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009fc8:	e006      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fd0:	e002      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fd2:	bf00      	nop
 8009fd4:	e000      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10a      	bne.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009fe0:	4b68      	ldr	r3, [pc, #416]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fee:	4a65      	ldr	r2, [pc, #404]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ff4:	e003      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a00a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a00e:	2300      	movs	r3, #0
 800a010:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a014:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a018:	460b      	mov	r3, r1
 800a01a:	4313      	orrs	r3, r2
 800a01c:	d051      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a028:	d035      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a02a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a02e:	d82e      	bhi.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a030:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a034:	d031      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a036:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a03a:	d828      	bhi.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a03c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a040:	d01a      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a046:	d822      	bhi.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a04c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a050:	d007      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a052:	e01c      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a054:	4b4b      	ldr	r3, [pc, #300]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	4a4a      	ldr	r2, [pc, #296]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a05e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a060:	e01c      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a066:	3308      	adds	r3, #8
 800a068:	2100      	movs	r1, #0
 800a06a:	4618      	mov	r0, r3
 800a06c:	f002 f940 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a076:	e011      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07c:	3328      	adds	r3, #40	; 0x28
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f002 f9e7 	bl	800c454 <RCCEx_PLL3_Config>
 800a086:	4603      	mov	r3, r0
 800a088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a08c:	e006      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a094:	e002      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a096:	bf00      	nop
 800a098:	e000      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a09a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a09c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a0a4:	4b37      	ldr	r3, [pc, #220]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b2:	4a34      	ldr	r2, [pc, #208]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0b4:	430b      	orrs	r3, r1
 800a0b6:	6513      	str	r3, [r2, #80]	; 0x50
 800a0b8:	e003      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a0ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	d056      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0ec:	d033      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a0ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0f2:	d82c      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0f8:	d02f      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a0fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0fe:	d826      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a100:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a104:	d02b      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a106:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a10a:	d820      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a10c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a110:	d012      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a116:	d81a      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d022      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a120:	d115      	bne.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a126:	3308      	adds	r3, #8
 800a128:	2101      	movs	r1, #1
 800a12a:	4618      	mov	r0, r3
 800a12c:	f002 f8e0 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a136:	e015      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a13c:	3328      	adds	r3, #40	; 0x28
 800a13e:	2101      	movs	r1, #1
 800a140:	4618      	mov	r0, r3
 800a142:	f002 f987 	bl	800c454 <RCCEx_PLL3_Config>
 800a146:	4603      	mov	r3, r0
 800a148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a14c:	e00a      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a154:	e006      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a156:	bf00      	nop
 800a158:	e004      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a15a:	bf00      	nop
 800a15c:	e002      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a162:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10d      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a170:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a17a:	4a02      	ldr	r2, [pc, #8]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a17c:	430b      	orrs	r3, r1
 800a17e:	6513      	str	r3, [r2, #80]	; 0x50
 800a180:	e006      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a182:	bf00      	nop
 800a184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a188:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a18c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a19c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	d055      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1bc:	d033      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a1be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1c2:	d82c      	bhi.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c8:	d02f      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ce:	d826      	bhi.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1d4:	d02b      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a1d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1da:	d820      	bhi.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e0:	d012      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e6:	d81a      	bhi.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d022      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a1ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1f0:	d115      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f002 f878 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a200:	4603      	mov	r3, r0
 800a202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a206:	e015      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20c:	3328      	adds	r3, #40	; 0x28
 800a20e:	2101      	movs	r1, #1
 800a210:	4618      	mov	r0, r3
 800a212:	f002 f91f 	bl	800c454 <RCCEx_PLL3_Config>
 800a216:	4603      	mov	r3, r0
 800a218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a21c:	e00a      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a224:	e006      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a226:	bf00      	nop
 800a228:	e004      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a22a:	bf00      	nop
 800a22c:	e002      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a22e:	bf00      	nop
 800a230:	e000      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a232:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10b      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a23c:	4ba3      	ldr	r3, [pc, #652]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a23e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a240:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a24c:	4a9f      	ldr	r2, [pc, #636]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a24e:	430b      	orrs	r3, r1
 800a250:	6593      	str	r3, [r2, #88]	; 0x58
 800a252:	e003      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a258:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a26c:	2300      	movs	r3, #0
 800a26e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a276:	460b      	mov	r3, r1
 800a278:	4313      	orrs	r3, r2
 800a27a:	d037      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a286:	d00e      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28c:	d816      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d018      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a296:	d111      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a298:	4b8c      	ldr	r3, [pc, #560]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	4a8b      	ldr	r2, [pc, #556]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a29e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2a4:	e00f      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f002 f81e 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2ba:	e004      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2c2:	e000      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a2c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2ce:	4b7f      	ldr	r3, [pc, #508]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2dc:	4a7b      	ldr	r2, [pc, #492]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2de:	430b      	orrs	r3, r1
 800a2e0:	6513      	str	r3, [r2, #80]	; 0x50
 800a2e2:	e003      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a2f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a302:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a306:	460b      	mov	r3, r1
 800a308:	4313      	orrs	r3, r2
 800a30a:	d039      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a312:	2b03      	cmp	r3, #3
 800a314:	d81c      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a316:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a359 	.word	0x0800a359
 800a320:	0800a32d 	.word	0x0800a32d
 800a324:	0800a33b 	.word	0x0800a33b
 800a328:	0800a359 	.word	0x0800a359
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a32c:	4b67      	ldr	r3, [pc, #412]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	4a66      	ldr	r2, [pc, #408]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a338:	e00f      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33e:	3308      	adds	r3, #8
 800a340:	2102      	movs	r1, #2
 800a342:	4618      	mov	r0, r3
 800a344:	f001 ffd4 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a34e:	e004      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a356:	e000      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10a      	bne.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a362:	4b5a      	ldr	r3, [pc, #360]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a366:	f023 0103 	bic.w	r1, r3, #3
 800a36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a370:	4a56      	ldr	r2, [pc, #344]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a372:	430b      	orrs	r3, r1
 800a374:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a376:	e003      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a37c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a38c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a390:	2300      	movs	r3, #0
 800a392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a396:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a39a:	460b      	mov	r3, r1
 800a39c:	4313      	orrs	r3, r2
 800a39e:	f000 809f 	beq.w	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3a2:	4b4b      	ldr	r3, [pc, #300]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a4a      	ldr	r2, [pc, #296]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3ae:	f7f9 f90f 	bl	80035d0 <HAL_GetTick>
 800a3b2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3b6:	e00b      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3b8:	f7f9 f90a 	bl	80035d0 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	2b64      	cmp	r3, #100	; 0x64
 800a3c6:	d903      	bls.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3ce:	e005      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3d0:	4b3f      	ldr	r3, [pc, #252]	; (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0ed      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a3dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d179      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3e4:	4b39      	ldr	r3, [pc, #228]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3f0:	4053      	eors	r3, r2
 800a3f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d015      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3fa:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a402:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a406:	4b31      	ldr	r3, [pc, #196]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a40a:	4a30      	ldr	r2, [pc, #192]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a40c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a410:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a412:	4b2e      	ldr	r3, [pc, #184]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a416:	4a2d      	ldr	r2, [pc, #180]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a41c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a41e:	4a2b      	ldr	r2, [pc, #172]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a424:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a42a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a432:	d118      	bne.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a434:	f7f9 f8cc 	bl	80035d0 <HAL_GetTick>
 800a438:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a43c:	e00d      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a43e:	f7f9 f8c7 	bl	80035d0 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a448:	1ad2      	subs	r2, r2, r3
 800a44a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a44e:	429a      	cmp	r2, r3
 800a450:	d903      	bls.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a458:	e005      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a45a:	4b1c      	ldr	r3, [pc, #112]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d0eb      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d129      	bne.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a47e:	d10e      	bne.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a480:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a48c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a490:	091a      	lsrs	r2, r3, #4
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a494:	4013      	ands	r3, r2
 800a496:	4a0d      	ldr	r2, [pc, #52]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a498:	430b      	orrs	r3, r1
 800a49a:	6113      	str	r3, [r2, #16]
 800a49c:	e005      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a49e:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	4a0a      	ldr	r2, [pc, #40]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a4a8:	6113      	str	r3, [r2, #16]
 800a4aa:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4ba:	4a04      	ldr	r2, [pc, #16]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4bc:	430b      	orrs	r3, r1
 800a4be:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c0:	e00e      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a4ca:	e009      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a4cc:	58024400 	.word	0x58024400
 800a4d0:	58024800 	.word	0x58024800
 800a4d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f002 0301 	and.w	r3, r2, #1
 800a4ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f000 8089 	beq.w	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a508:	2b28      	cmp	r3, #40	; 0x28
 800a50a:	d86b      	bhi.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a50c:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a512:	bf00      	nop
 800a514:	0800a5ed 	.word	0x0800a5ed
 800a518:	0800a5e5 	.word	0x0800a5e5
 800a51c:	0800a5e5 	.word	0x0800a5e5
 800a520:	0800a5e5 	.word	0x0800a5e5
 800a524:	0800a5e5 	.word	0x0800a5e5
 800a528:	0800a5e5 	.word	0x0800a5e5
 800a52c:	0800a5e5 	.word	0x0800a5e5
 800a530:	0800a5e5 	.word	0x0800a5e5
 800a534:	0800a5b9 	.word	0x0800a5b9
 800a538:	0800a5e5 	.word	0x0800a5e5
 800a53c:	0800a5e5 	.word	0x0800a5e5
 800a540:	0800a5e5 	.word	0x0800a5e5
 800a544:	0800a5e5 	.word	0x0800a5e5
 800a548:	0800a5e5 	.word	0x0800a5e5
 800a54c:	0800a5e5 	.word	0x0800a5e5
 800a550:	0800a5e5 	.word	0x0800a5e5
 800a554:	0800a5cf 	.word	0x0800a5cf
 800a558:	0800a5e5 	.word	0x0800a5e5
 800a55c:	0800a5e5 	.word	0x0800a5e5
 800a560:	0800a5e5 	.word	0x0800a5e5
 800a564:	0800a5e5 	.word	0x0800a5e5
 800a568:	0800a5e5 	.word	0x0800a5e5
 800a56c:	0800a5e5 	.word	0x0800a5e5
 800a570:	0800a5e5 	.word	0x0800a5e5
 800a574:	0800a5ed 	.word	0x0800a5ed
 800a578:	0800a5e5 	.word	0x0800a5e5
 800a57c:	0800a5e5 	.word	0x0800a5e5
 800a580:	0800a5e5 	.word	0x0800a5e5
 800a584:	0800a5e5 	.word	0x0800a5e5
 800a588:	0800a5e5 	.word	0x0800a5e5
 800a58c:	0800a5e5 	.word	0x0800a5e5
 800a590:	0800a5e5 	.word	0x0800a5e5
 800a594:	0800a5ed 	.word	0x0800a5ed
 800a598:	0800a5e5 	.word	0x0800a5e5
 800a59c:	0800a5e5 	.word	0x0800a5e5
 800a5a0:	0800a5e5 	.word	0x0800a5e5
 800a5a4:	0800a5e5 	.word	0x0800a5e5
 800a5a8:	0800a5e5 	.word	0x0800a5e5
 800a5ac:	0800a5e5 	.word	0x0800a5e5
 800a5b0:	0800a5e5 	.word	0x0800a5e5
 800a5b4:	0800a5ed 	.word	0x0800a5ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5bc:	3308      	adds	r3, #8
 800a5be:	2101      	movs	r1, #1
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f001 fe95 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5cc:	e00f      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d2:	3328      	adds	r3, #40	; 0x28
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f001 ff3c 	bl	800c454 <RCCEx_PLL3_Config>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5e2:	e004      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5ea:	e000      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a5ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5f6:	4bbf      	ldr	r3, [pc, #764]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a604:	4abb      	ldr	r2, [pc, #748]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a606:	430b      	orrs	r3, r1
 800a608:	6553      	str	r3, [r2, #84]	; 0x54
 800a60a:	e003      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a60c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a610:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	f002 0302 	and.w	r3, r2, #2
 800a620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a624:	2300      	movs	r3, #0
 800a626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a62a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a62e:	460b      	mov	r3, r1
 800a630:	4313      	orrs	r3, r2
 800a632:	d041      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a63a:	2b05      	cmp	r3, #5
 800a63c:	d824      	bhi.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a63e:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a691 	.word	0x0800a691
 800a648:	0800a65d 	.word	0x0800a65d
 800a64c:	0800a673 	.word	0x0800a673
 800a650:	0800a691 	.word	0x0800a691
 800a654:	0800a691 	.word	0x0800a691
 800a658:	0800a691 	.word	0x0800a691
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a660:	3308      	adds	r3, #8
 800a662:	2101      	movs	r1, #1
 800a664:	4618      	mov	r0, r3
 800a666:	f001 fe43 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a670:	e00f      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a676:	3328      	adds	r3, #40	; 0x28
 800a678:	2101      	movs	r1, #1
 800a67a:	4618      	mov	r0, r3
 800a67c:	f001 feea 	bl	800c454 <RCCEx_PLL3_Config>
 800a680:	4603      	mov	r3, r0
 800a682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a686:	e004      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a68e:	e000      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a690:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10a      	bne.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a69a:	4b96      	ldr	r3, [pc, #600]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69e:	f023 0107 	bic.w	r1, r3, #7
 800a6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6a8:	4a92      	ldr	r2, [pc, #584]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6aa:	430b      	orrs	r3, r1
 800a6ac:	6553      	str	r3, [r2, #84]	; 0x54
 800a6ae:	e003      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f002 0304 	and.w	r3, r2, #4
 800a6c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	d044      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6e0:	2b05      	cmp	r3, #5
 800a6e2:	d825      	bhi.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a6e4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ea:	bf00      	nop
 800a6ec:	0800a739 	.word	0x0800a739
 800a6f0:	0800a705 	.word	0x0800a705
 800a6f4:	0800a71b 	.word	0x0800a71b
 800a6f8:	0800a739 	.word	0x0800a739
 800a6fc:	0800a739 	.word	0x0800a739
 800a700:	0800a739 	.word	0x0800a739
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a708:	3308      	adds	r3, #8
 800a70a:	2101      	movs	r1, #1
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 fdef 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a718:	e00f      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71e:	3328      	adds	r3, #40	; 0x28
 800a720:	2101      	movs	r1, #1
 800a722:	4618      	mov	r0, r3
 800a724:	f001 fe96 	bl	800c454 <RCCEx_PLL3_Config>
 800a728:	4603      	mov	r3, r0
 800a72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a72e:	e004      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a736:	e000      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a73a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10b      	bne.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a742:	4b6c      	ldr	r3, [pc, #432]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a746:	f023 0107 	bic.w	r1, r3, #7
 800a74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a752:	4a68      	ldr	r2, [pc, #416]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a754:	430b      	orrs	r3, r1
 800a756:	6593      	str	r3, [r2, #88]	; 0x58
 800a758:	e003      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a75e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	f002 0320 	and.w	r3, r2, #32
 800a76e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a772:	2300      	movs	r3, #0
 800a774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a77c:	460b      	mov	r3, r1
 800a77e:	4313      	orrs	r3, r2
 800a780:	d055      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a78a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a78e:	d033      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a794:	d82c      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a79a:	d02f      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a0:	d826      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7a6:	d02b      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a7a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7ac:	d820      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b2:	d012      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b8:	d81a      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d022      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a7be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c2:	d115      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c8:	3308      	adds	r3, #8
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f001 fd8f 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7d8:	e015      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7de:	3328      	adds	r3, #40	; 0x28
 800a7e0:	2102      	movs	r1, #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fe36 	bl	800c454 <RCCEx_PLL3_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7ee:	e00a      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7f6:	e006      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7f8:	bf00      	nop
 800a7fa:	e004      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7fc:	bf00      	nop
 800a7fe:	e002      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a800:	bf00      	nop
 800a802:	e000      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a804:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10b      	bne.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a80e:	4b39      	ldr	r3, [pc, #228]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a812:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a81e:	4a35      	ldr	r2, [pc, #212]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a820:	430b      	orrs	r3, r1
 800a822:	6553      	str	r3, [r2, #84]	; 0x54
 800a824:	e003      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a82a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a83a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a83e:	2300      	movs	r3, #0
 800a840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a844:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a848:	460b      	mov	r3, r1
 800a84a:	4313      	orrs	r3, r2
 800a84c:	d058      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a856:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a85a:	d033      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a85c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a860:	d82c      	bhi.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a866:	d02f      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a86c:	d826      	bhi.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a86e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a872:	d02b      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a878:	d820      	bhi.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a87e:	d012      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a884:	d81a      	bhi.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d022      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a88a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a88e:	d115      	bne.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a894:	3308      	adds	r3, #8
 800a896:	2100      	movs	r1, #0
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 fd29 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8a4:	e015      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8aa:	3328      	adds	r3, #40	; 0x28
 800a8ac:	2102      	movs	r1, #2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 fdd0 	bl	800c454 <RCCEx_PLL3_Config>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8ba:	e00a      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8c2:	e006      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8c4:	bf00      	nop
 800a8c6:	e004      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8c8:	bf00      	nop
 800a8ca:	e002      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8cc:	bf00      	nop
 800a8ce:	e000      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10e      	bne.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8da:	4b06      	ldr	r3, [pc, #24]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8de:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8ea:	4a02      	ldr	r2, [pc, #8]	; (800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8ec:	430b      	orrs	r3, r1
 800a8ee:	6593      	str	r3, [r2, #88]	; 0x58
 800a8f0:	e006      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a8f2:	bf00      	nop
 800a8f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a90c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a910:	2300      	movs	r3, #0
 800a912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a916:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a91a:	460b      	mov	r3, r1
 800a91c:	4313      	orrs	r3, r2
 800a91e:	d055      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a928:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a92c:	d033      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a92e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a932:	d82c      	bhi.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a938:	d02f      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a93a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a93e:	d826      	bhi.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a940:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a944:	d02b      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a946:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a94a:	d820      	bhi.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a94c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a950:	d012      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a956:	d81a      	bhi.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d022      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a95c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a960:	d115      	bne.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a966:	3308      	adds	r3, #8
 800a968:	2100      	movs	r1, #0
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 fcc0 	bl	800c2f0 <RCCEx_PLL2_Config>
 800a970:	4603      	mov	r3, r0
 800a972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a976:	e015      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97c:	3328      	adds	r3, #40	; 0x28
 800a97e:	2102      	movs	r1, #2
 800a980:	4618      	mov	r0, r3
 800a982:	f001 fd67 	bl	800c454 <RCCEx_PLL3_Config>
 800a986:	4603      	mov	r3, r0
 800a988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a98c:	e00a      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a994:	e006      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a996:	bf00      	nop
 800a998:	e004      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a99a:	bf00      	nop
 800a99c:	e002      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a99e:	bf00      	nop
 800a9a0:	e000      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a9a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10b      	bne.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a9ac:	4ba1      	ldr	r3, [pc, #644]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a9bc:	4a9d      	ldr	r2, [pc, #628]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9be:	430b      	orrs	r3, r1
 800a9c0:	6593      	str	r3, [r2, #88]	; 0x58
 800a9c2:	e003      	b.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f002 0308 	and.w	r3, r2, #8
 800a9d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	d01e      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f8:	d10c      	bne.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fe:	3328      	adds	r3, #40	; 0x28
 800aa00:	2102      	movs	r1, #2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 fd26 	bl	800c454 <RCCEx_PLL3_Config>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aa14:	4b87      	ldr	r3, [pc, #540]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa24:	4a83      	ldr	r2, [pc, #524]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa26:	430b      	orrs	r3, r1
 800aa28:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f002 0310 	and.w	r3, r2, #16
 800aa36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aa44:	460b      	mov	r3, r1
 800aa46:	4313      	orrs	r3, r2
 800aa48:	d01e      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa56:	d10c      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa5c:	3328      	adds	r3, #40	; 0x28
 800aa5e:	2102      	movs	r1, #2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 fcf7 	bl	800c454 <RCCEx_PLL3_Config>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa72:	4b70      	ldr	r3, [pc, #448]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aa7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa82:	4a6c      	ldr	r2, [pc, #432]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa84:	430b      	orrs	r3, r1
 800aa86:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aa94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	d03e      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aaa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aab4:	d022      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaba:	d81b      	bhi.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d003      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac4:	d00b      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aac6:	e015      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aacc:	3308      	adds	r3, #8
 800aace:	2100      	movs	r1, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f001 fc0d 	bl	800c2f0 <RCCEx_PLL2_Config>
 800aad6:	4603      	mov	r3, r0
 800aad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aadc:	e00f      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae2:	3328      	adds	r3, #40	; 0x28
 800aae4:	2102      	movs	r1, #2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f001 fcb4 	bl	800c454 <RCCEx_PLL3_Config>
 800aaec:	4603      	mov	r3, r0
 800aaee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aaf2:	e004      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aafa:	e000      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800aafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aafe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10b      	bne.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab06:	4b4b      	ldr	r3, [pc, #300]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ab0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab16:	4a47      	ldr	r2, [pc, #284]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	6593      	str	r3, [r2, #88]	; 0x58
 800ab1c:	e003      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ab32:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab34:	2300      	movs	r3, #0
 800ab36:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab38:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	d03b      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab4e:	d01f      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ab50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab54:	d818      	bhi.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ab56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab5a:	d003      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ab5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab60:	d007      	beq.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ab62:	e011      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab64:	4b33      	ldr	r3, [pc, #204]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab68:	4a32      	ldr	r2, [pc, #200]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab70:	e00f      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab76:	3328      	adds	r3, #40	; 0x28
 800ab78:	2101      	movs	r1, #1
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f001 fc6a 	bl	800c454 <RCCEx_PLL3_Config>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab86:	e004      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab8e:	e000      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10b      	bne.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab9a:	4b26      	ldr	r3, [pc, #152]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abaa:	4a22      	ldr	r2, [pc, #136]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abac:	430b      	orrs	r3, r1
 800abae:	6553      	str	r3, [r2, #84]	; 0x54
 800abb0:	e003      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800abc6:	673b      	str	r3, [r7, #112]	; 0x70
 800abc8:	2300      	movs	r3, #0
 800abca:	677b      	str	r3, [r7, #116]	; 0x74
 800abcc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800abd0:	460b      	mov	r3, r1
 800abd2:	4313      	orrs	r3, r2
 800abd4:	d034      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800abd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d003      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800abe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe4:	d007      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800abe6:	e011      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe8:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	4a11      	ldr	r2, [pc, #68]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abf4:	e00e      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfa:	3308      	adds	r3, #8
 800abfc:	2102      	movs	r1, #2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f001 fb76 	bl	800c2f0 <RCCEx_PLL2_Config>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac0a:	e003      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10d      	bne.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac2a:	4a02      	ldr	r2, [pc, #8]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac2c:	430b      	orrs	r3, r1
 800ac2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac30:	e006      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ac32:	bf00      	nop
 800ac34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ac4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac4e:	2300      	movs	r3, #0
 800ac50:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ac56:	460b      	mov	r3, r1
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	d00c      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac60:	3328      	adds	r3, #40	; 0x28
 800ac62:	2102      	movs	r1, #2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 fbf5 	bl	800c454 <RCCEx_PLL3_Config>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ac82:	663b      	str	r3, [r7, #96]	; 0x60
 800ac84:	2300      	movs	r3, #0
 800ac86:	667b      	str	r3, [r7, #100]	; 0x64
 800ac88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	d038      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac9e:	d018      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800aca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aca4:	d811      	bhi.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acaa:	d014      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800acac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acb0:	d80b      	bhi.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d011      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800acb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acba:	d106      	bne.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acbc:	4bc3      	ldr	r3, [pc, #780]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	4ac2      	ldr	r2, [pc, #776]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800acc8:	e008      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acd0:	e004      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acd2:	bf00      	nop
 800acd4:	e002      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acd6:	bf00      	nop
 800acd8:	e000      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10b      	bne.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ace4:	4bb9      	ldr	r3, [pc, #740]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ace6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf4:	4ab5      	ldr	r2, [pc, #724]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acf6:	430b      	orrs	r3, r1
 800acf8:	6553      	str	r3, [r2, #84]	; 0x54
 800acfa:	e003      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ad10:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad12:	2300      	movs	r3, #0
 800ad14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	d009      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad20:	4baa      	ldr	r3, [pc, #680]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad2e:	4aa7      	ldr	r2, [pc, #668]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad30:	430b      	orrs	r3, r1
 800ad32:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ad40:	653b      	str	r3, [r7, #80]	; 0x50
 800ad42:	2300      	movs	r3, #0
 800ad44:	657b      	str	r3, [r7, #84]	; 0x54
 800ad46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	d00a      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ad50:	4b9e      	ldr	r3, [pc, #632]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ad58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ad60:	4a9a      	ldr	r2, [pc, #616]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad62:	430b      	orrs	r3, r1
 800ad64:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ad72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad74:	2300      	movs	r3, #0
 800ad76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad78:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	d009      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad82:	4b92      	ldr	r3, [pc, #584]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad86:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ad8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad90:	4a8e      	ldr	r2, [pc, #568]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad92:	430b      	orrs	r3, r1
 800ad94:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ada2:	643b      	str	r3, [r7, #64]	; 0x40
 800ada4:	2300      	movs	r3, #0
 800ada6:	647b      	str	r3, [r7, #68]	; 0x44
 800ada8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800adac:	460b      	mov	r3, r1
 800adae:	4313      	orrs	r3, r2
 800adb0:	d00e      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adb2:	4b86      	ldr	r3, [pc, #536]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	4a85      	ldr	r2, [pc, #532]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adbc:	6113      	str	r3, [r2, #16]
 800adbe:	4b83      	ldr	r3, [pc, #524]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc0:	6919      	ldr	r1, [r3, #16]
 800adc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800adca:	4a80      	ldr	r2, [pc, #512]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adcc:	430b      	orrs	r3, r1
 800adce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800add0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800addc:	63bb      	str	r3, [r7, #56]	; 0x38
 800adde:	2300      	movs	r3, #0
 800ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ade2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ade6:	460b      	mov	r3, r1
 800ade8:	4313      	orrs	r3, r2
 800adea:	d009      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800adec:	4b77      	ldr	r3, [pc, #476]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adf0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfa:	4a74      	ldr	r2, [pc, #464]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adfc:	430b      	orrs	r3, r1
 800adfe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ae0c:	633b      	str	r3, [r7, #48]	; 0x30
 800ae0e:	2300      	movs	r3, #0
 800ae10:	637b      	str	r3, [r7, #52]	; 0x34
 800ae12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ae16:	460b      	mov	r3, r1
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	d00a      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae1c:	4b6b      	ldr	r3, [pc, #428]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae20:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ae24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2c:	4a67      	ldr	r2, [pc, #412]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae2e:	430b      	orrs	r3, r1
 800ae30:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	d011      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae52:	3308      	adds	r3, #8
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f001 fa4a 	bl	800c2f0 <RCCEx_PLL2_Config>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	6239      	str	r1, [r7, #32]
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	627b      	str	r3, [r7, #36]	; 0x24
 800ae84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	d011      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae92:	3308      	adds	r3, #8
 800ae94:	2101      	movs	r1, #1
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 fa2a 	bl	800c2f0 <RCCEx_PLL2_Config>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aeb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	2100      	movs	r1, #0
 800aebc:	61b9      	str	r1, [r7, #24]
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	61fb      	str	r3, [r7, #28]
 800aec4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aec8:	460b      	mov	r3, r1
 800aeca:	4313      	orrs	r3, r2
 800aecc:	d011      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed2:	3308      	adds	r3, #8
 800aed4:	2102      	movs	r1, #2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f001 fa0a 	bl	800c2f0 <RCCEx_PLL2_Config>
 800aedc:	4603      	mov	r3, r0
 800aede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d003      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	2100      	movs	r1, #0
 800aefc:	6139      	str	r1, [r7, #16]
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	617b      	str	r3, [r7, #20]
 800af04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af08:	460b      	mov	r3, r1
 800af0a:	4313      	orrs	r3, r2
 800af0c:	d011      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af12:	3328      	adds	r3, #40	; 0x28
 800af14:	2100      	movs	r1, #0
 800af16:	4618      	mov	r0, r3
 800af18:	f001 fa9c 	bl	800c454 <RCCEx_PLL3_Config>
 800af1c:	4603      	mov	r3, r0
 800af1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800af22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800af32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	2100      	movs	r1, #0
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	f003 0310 	and.w	r3, r3, #16
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af48:	460b      	mov	r3, r1
 800af4a:	4313      	orrs	r3, r2
 800af4c:	d011      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af52:	3328      	adds	r3, #40	; 0x28
 800af54:	2101      	movs	r1, #1
 800af56:	4618      	mov	r0, r3
 800af58:	f001 fa7c 	bl	800c454 <RCCEx_PLL3_Config>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	2100      	movs	r1, #0
 800af7c:	6039      	str	r1, [r7, #0]
 800af7e:	f003 0320 	and.w	r3, r3, #32
 800af82:	607b      	str	r3, [r7, #4]
 800af84:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af88:	460b      	mov	r3, r1
 800af8a:	4313      	orrs	r3, r2
 800af8c:	d011      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af92:	3328      	adds	r3, #40	; 0x28
 800af94:	2102      	movs	r1, #2
 800af96:	4618      	mov	r0, r3
 800af98:	f001 fa5c 	bl	800c454 <RCCEx_PLL3_Config>
 800af9c:	4603      	mov	r3, r0
 800af9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800afa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800afb2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	e000      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800afc6:	46bd      	mov	sp, r7
 800afc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afcc:	58024400 	.word	0x58024400

0800afd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b090      	sub	sp, #64	; 0x40
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800afda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afde:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800afe2:	430b      	orrs	r3, r1
 800afe4:	f040 8094 	bne.w	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800afe8:	4b9e      	ldr	r3, [pc, #632]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afec:	f003 0307 	and.w	r3, r3, #7
 800aff0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	f200 8087 	bhi.w	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b015 	.word	0x0800b015
 800b004:	0800b03d 	.word	0x0800b03d
 800b008:	0800b065 	.word	0x0800b065
 800b00c:	0800b101 	.word	0x0800b101
 800b010:	0800b08d 	.word	0x0800b08d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b014:	4b93      	ldr	r3, [pc, #588]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b01c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b020:	d108      	bne.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b026:	4618      	mov	r0, r3
 800b028:	f001 f810 	bl	800c04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b030:	f000 bd45 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b038:	f000 bd41 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b03c:	4b89      	ldr	r3, [pc, #548]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b048:	d108      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b04a:	f107 0318 	add.w	r3, r7, #24
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 fd54 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b058:	f000 bd31 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b05c:	2300      	movs	r3, #0
 800b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b060:	f000 bd2d 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b064:	4b7f      	ldr	r3, [pc, #508]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b070:	d108      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b072:	f107 030c 	add.w	r3, r7, #12
 800b076:	4618      	mov	r0, r3
 800b078:	f000 fe94 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b080:	f000 bd1d 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b088:	f000 bd19 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b08c:	4b75      	ldr	r3, [pc, #468]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b094:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b096:	4b73      	ldr	r3, [pc, #460]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0304 	and.w	r3, r3, #4
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	d10c      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d109      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0a8:	4b6e      	ldr	r3, [pc, #440]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	08db      	lsrs	r3, r3, #3
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	4a6d      	ldr	r2, [pc, #436]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ba:	e01f      	b.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0bc:	4b69      	ldr	r3, [pc, #420]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0c8:	d106      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0d0:	d102      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0d2:	4b66      	ldr	r3, [pc, #408]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0d6:	e011      	b.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0d8:	4b62      	ldr	r3, [pc, #392]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e4:	d106      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0ec:	d102      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0ee:	4b60      	ldr	r3, [pc, #384]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f2:	e003      	b.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0f8:	f000 bce1 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0fc:	f000 bcdf 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b100:	4b5c      	ldr	r3, [pc, #368]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b104:	f000 bcdb 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b10c:	f000 bcd7 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b114:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b118:	430b      	orrs	r3, r1
 800b11a:	f040 80ad 	bne.w	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b11e:	4b51      	ldr	r3, [pc, #324]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b122:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b126:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b12e:	d056      	beq.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b136:	f200 8090 	bhi.w	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	2bc0      	cmp	r3, #192	; 0xc0
 800b13e:	f000 8088 	beq.w	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	2bc0      	cmp	r3, #192	; 0xc0
 800b146:	f200 8088 	bhi.w	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	2b80      	cmp	r3, #128	; 0x80
 800b14e:	d032      	beq.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	2b80      	cmp	r3, #128	; 0x80
 800b154:	f200 8081 	bhi.w	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	2b40      	cmp	r3, #64	; 0x40
 800b162:	d014      	beq.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b164:	e079      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b166:	4b3f      	ldr	r3, [pc, #252]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b16e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b172:	d108      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 ff67 	bl	800c04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b182:	f000 bc9c 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b18a:	f000 bc98 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b18e:	4b35      	ldr	r3, [pc, #212]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b19a:	d108      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19c:	f107 0318 	add.w	r3, r7, #24
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fcab 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1aa:	f000 bc88 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1b2:	f000 bc84 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1b6:	4b2b      	ldr	r3, [pc, #172]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c2:	d108      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c4:	f107 030c 	add.w	r3, r7, #12
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 fdeb 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d2:	f000 bc74 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1da:	f000 bc70 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1de:	4b21      	ldr	r3, [pc, #132]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1e8:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d10c      	bne.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1fa:	4b1a      	ldr	r3, [pc, #104]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	08db      	lsrs	r3, r3, #3
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	4a18      	ldr	r2, [pc, #96]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b206:	fa22 f303 	lsr.w	r3, r2, r3
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b20c:	e01f      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b20e:	4b15      	ldr	r3, [pc, #84]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21a:	d106      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b222:	d102      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b224:	4b11      	ldr	r3, [pc, #68]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b228:	e011      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b22a:	4b0e      	ldr	r3, [pc, #56]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b236:	d106      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b23e:	d102      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b242:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b244:	e003      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b24a:	f000 bc38 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b24e:	f000 bc36 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b252:	4b08      	ldr	r3, [pc, #32]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b256:	f000 bc32 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b25e:	f000 bc2e 	b.w	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b262:	bf00      	nop
 800b264:	58024400 	.word	0x58024400
 800b268:	03d09000 	.word	0x03d09000
 800b26c:	003d0900 	.word	0x003d0900
 800b270:	017d7840 	.word	0x017d7840
 800b274:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b27c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b280:	430b      	orrs	r3, r1
 800b282:	f040 809c 	bne.w	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b286:	4b9e      	ldr	r3, [pc, #632]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b28a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b28e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b296:	d054      	beq.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b29e:	f200 808b 	bhi.w	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2a8:	f000 8083 	beq.w	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2b2:	f200 8081 	bhi.w	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2bc:	d02f      	beq.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2c4:	d878      	bhi.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d004      	beq.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2d2:	d012      	beq.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b2d4:	e070      	b.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2d6:	4b8a      	ldr	r3, [pc, #552]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2e2:	d107      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 feaf 	bl	800c04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f2:	e3e4      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2f8:	e3e1      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2fa:	4b81      	ldr	r3, [pc, #516]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b306:	d107      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b308:	f107 0318 	add.w	r3, r7, #24
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 fbf5 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b316:	e3d2      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b31c:	e3cf      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b31e:	4b78      	ldr	r3, [pc, #480]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b32a:	d107      	bne.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b32c:	f107 030c 	add.w	r3, r7, #12
 800b330:	4618      	mov	r0, r3
 800b332:	f000 fd37 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b33a:	e3c0      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b340:	e3bd      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b342:	4b6f      	ldr	r3, [pc, #444]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b34a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b34c:	4b6c      	ldr	r3, [pc, #432]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b04      	cmp	r3, #4
 800b356:	d10c      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d109      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b35e:	4b68      	ldr	r3, [pc, #416]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	08db      	lsrs	r3, r3, #3
 800b364:	f003 0303 	and.w	r3, r3, #3
 800b368:	4a66      	ldr	r2, [pc, #408]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b36a:	fa22 f303 	lsr.w	r3, r2, r3
 800b36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b370:	e01e      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b372:	4b63      	ldr	r3, [pc, #396]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b37e:	d106      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b386:	d102      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b388:	4b5f      	ldr	r3, [pc, #380]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b38c:	e010      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b38e:	4b5c      	ldr	r3, [pc, #368]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b39a:	d106      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a2:	d102      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3a4:	4b59      	ldr	r3, [pc, #356]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3a8:	e002      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b3ae:	e386      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3b0:	e385      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3b2:	4b57      	ldr	r3, [pc, #348]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b6:	e382      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3bc:	e37f      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3c2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	f040 80a7 	bne.w	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b3cc:	4b4c      	ldr	r3, [pc, #304]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b3d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3dc:	d055      	beq.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3e4:	f200 8096 	bhi.w	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3ee:	f000 8084 	beq.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3f8:	f200 808c 	bhi.w	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b402:	d030      	beq.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b40a:	f200 8083 	bhi.w	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	2b00      	cmp	r3, #0
 800b412:	d004      	beq.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b41a:	d012      	beq.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b41c:	e07a      	b.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b41e:	4b38      	ldr	r3, [pc, #224]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b42a:	d107      	bne.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b430:	4618      	mov	r0, r3
 800b432:	f000 fe0b 	bl	800c04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b43a:	e340      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b440:	e33d      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b442:	4b2f      	ldr	r3, [pc, #188]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b44a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b44e:	d107      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b450:	f107 0318 	add.w	r3, r7, #24
 800b454:	4618      	mov	r0, r3
 800b456:	f000 fb51 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b45e:	e32e      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b464:	e32b      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b466:	4b26      	ldr	r3, [pc, #152]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b472:	d107      	bne.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b474:	f107 030c 	add.w	r3, r7, #12
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 fc93 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b482:	e31c      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b488:	e319      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b48a:	4b1d      	ldr	r3, [pc, #116]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b492:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b494:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d10c      	bne.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d109      	bne.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4a6:	4b16      	ldr	r3, [pc, #88]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	08db      	lsrs	r3, r3, #3
 800b4ac:	f003 0303 	and.w	r3, r3, #3
 800b4b0:	4a14      	ldr	r2, [pc, #80]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b8:	e01e      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4ba:	4b11      	ldr	r3, [pc, #68]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c6:	d106      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ce:	d102      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4d0:	4b0d      	ldr	r3, [pc, #52]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d4:	e010      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4e2:	d106      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ea:	d102      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4ec:	4b07      	ldr	r3, [pc, #28]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f0:	e002      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4f6:	e2e2      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4f8:	e2e1      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4fa:	4b05      	ldr	r3, [pc, #20]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4fe:	e2de      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b500:	58024400 	.word	0x58024400
 800b504:	03d09000 	.word	0x03d09000
 800b508:	003d0900 	.word	0x003d0900
 800b50c:	017d7840 	.word	0x017d7840
 800b510:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b518:	e2d1      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b51e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b522:	430b      	orrs	r3, r1
 800b524:	f040 809c 	bne.w	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b528:	4b93      	ldr	r3, [pc, #588]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b530:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b538:	d054      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b540:	f200 808b 	bhi.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b546:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b54a:	f000 8083 	beq.w	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b554:	f200 8081 	bhi.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b55e:	d02f      	beq.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b566:	d878      	bhi.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d004      	beq.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b574:	d012      	beq.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b576:	e070      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b578:	4b7f      	ldr	r3, [pc, #508]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b584:	d107      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 fd5e 	bl	800c04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b594:	e293      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b59a:	e290      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b59c:	4b76      	ldr	r3, [pc, #472]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5a8:	d107      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5aa:	f107 0318 	add.w	r3, r7, #24
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 faa4 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b8:	e281      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5be:	e27e      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5c0:	4b6d      	ldr	r3, [pc, #436]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5cc:	d107      	bne.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5ce:	f107 030c 	add.w	r3, r7, #12
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 fbe6 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5dc:	e26f      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e2:	e26c      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5e4:	4b64      	ldr	r3, [pc, #400]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5ec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5ee:	4b62      	ldr	r3, [pc, #392]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 0304 	and.w	r3, r3, #4
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d10c      	bne.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d109      	bne.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b600:	4b5d      	ldr	r3, [pc, #372]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	08db      	lsrs	r3, r3, #3
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	4a5c      	ldr	r2, [pc, #368]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b60c:	fa22 f303 	lsr.w	r3, r2, r3
 800b610:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b612:	e01e      	b.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b614:	4b58      	ldr	r3, [pc, #352]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b61c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b620:	d106      	bne.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b628:	d102      	bne.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b62a:	4b55      	ldr	r3, [pc, #340]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b62c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b62e:	e010      	b.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b630:	4b51      	ldr	r3, [pc, #324]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b63c:	d106      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b644:	d102      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b646:	4b4f      	ldr	r3, [pc, #316]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b64a:	e002      	b.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b650:	e235      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b652:	e234      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b654:	4b4c      	ldr	r3, [pc, #304]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b658:	e231      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65e:	e22e      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b664:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b668:	430b      	orrs	r3, r1
 800b66a:	f040 808f 	bne.w	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b66e:	4b42      	ldr	r3, [pc, #264]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b672:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b676:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b67e:	d06b      	beq.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b686:	d874      	bhi.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b68e:	d056      	beq.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b696:	d86c      	bhi.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b69e:	d03b      	beq.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b6a6:	d864      	bhi.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6ae:	d021      	beq.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6b6:	d85c      	bhi.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d004      	beq.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c4:	d004      	beq.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b6c6:	e054      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b6c8:	f7fe fa0a 	bl	8009ae0 <HAL_RCC_GetPCLK1Freq>
 800b6cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b6ce:	e1f6      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6d0:	4b29      	ldr	r3, [pc, #164]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6dc:	d107      	bne.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6de:	f107 0318 	add.w	r3, r7, #24
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 fa0a 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ec:	e1e7      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6f2:	e1e4      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6f4:	4b20      	ldr	r3, [pc, #128]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b700:	d107      	bne.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b702:	f107 030c 	add.w	r3, r7, #12
 800b706:	4618      	mov	r0, r3
 800b708:	f000 fb4c 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b710:	e1d5      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b716:	e1d2      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b718:	4b17      	ldr	r3, [pc, #92]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b04      	cmp	r3, #4
 800b722:	d109      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b724:	4b14      	ldr	r3, [pc, #80]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	08db      	lsrs	r3, r3, #3
 800b72a:	f003 0303 	and.w	r3, r3, #3
 800b72e:	4a13      	ldr	r2, [pc, #76]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
 800b734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b736:	e1c2      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b73c:	e1bf      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b73e:	4b0e      	ldr	r3, [pc, #56]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b74a:	d102      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b74c:	4b0c      	ldr	r3, [pc, #48]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b750:	e1b5      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b756:	e1b2      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b758:	4b07      	ldr	r3, [pc, #28]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b764:	d102      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b766:	4b07      	ldr	r3, [pc, #28]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b76a:	e1a8      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b770:	e1a5      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b776:	e1a2      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b778:	58024400 	.word	0x58024400
 800b77c:	03d09000 	.word	0x03d09000
 800b780:	003d0900 	.word	0x003d0900
 800b784:	017d7840 	.word	0x017d7840
 800b788:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b78c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b790:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b794:	430b      	orrs	r3, r1
 800b796:	d173      	bne.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b798:	4b9c      	ldr	r3, [pc, #624]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b7a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7a8:	d02f      	beq.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7b0:	d863      	bhi.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d004      	beq.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7be:	d012      	beq.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b7c0:	e05b      	b.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7c2:	4b92      	ldr	r3, [pc, #584]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7ce:	d107      	bne.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7d0:	f107 0318 	add.w	r3, r7, #24
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 f991 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7de:	e16e      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e4:	e16b      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7e6:	4b89      	ldr	r3, [pc, #548]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f2:	d107      	bne.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f4:	f107 030c 	add.w	r3, r7, #12
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 fad3 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b802:	e15c      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b808:	e159      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b80a:	4b80      	ldr	r3, [pc, #512]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b80c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b80e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b812:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b814:	4b7d      	ldr	r3, [pc, #500]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d10c      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b826:	4b79      	ldr	r3, [pc, #484]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	08db      	lsrs	r3, r3, #3
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	4a77      	ldr	r2, [pc, #476]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b832:	fa22 f303 	lsr.w	r3, r2, r3
 800b836:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b838:	e01e      	b.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b83a:	4b74      	ldr	r3, [pc, #464]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b846:	d106      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b84e:	d102      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b850:	4b70      	ldr	r3, [pc, #448]	; (800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b854:	e010      	b.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b856:	4b6d      	ldr	r3, [pc, #436]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b862:	d106      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b86a:	d102      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b86c:	4b6a      	ldr	r3, [pc, #424]	; (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b870:	e002      	b.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b876:	e122      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b878:	e121      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b87e:	e11e      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b880:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b884:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b888:	430b      	orrs	r3, r1
 800b88a:	d133      	bne.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b88c:	4b5f      	ldr	r3, [pc, #380]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b894:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d004      	beq.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a2:	d012      	beq.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b8a4:	e023      	b.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8a6:	4b59      	ldr	r3, [pc, #356]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8b2:	d107      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 fbc7 	bl	800c04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c2:	e0fc      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8c8:	e0f9      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8ca:	4b50      	ldr	r3, [pc, #320]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8d6:	d107      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d8:	f107 0318 	add.w	r3, r7, #24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 f90d 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8e6:	e0ea      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ec:	e0e7      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f2:	e0e4      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8f8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b8fc:	430b      	orrs	r3, r1
 800b8fe:	f040 808d 	bne.w	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b902:	4b42      	ldr	r3, [pc, #264]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b906:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b90a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b912:	d06b      	beq.n	800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b91a:	d874      	bhi.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b922:	d056      	beq.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b92a:	d86c      	bhi.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b932:	d03b      	beq.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b93a:	d864      	bhi.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b942:	d021      	beq.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b94a:	d85c      	bhi.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d004      	beq.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b958:	d004      	beq.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b95a:	e054      	b.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b95c:	f000 f8b8 	bl	800bad0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b960:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b962:	e0ac      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b964:	4b29      	ldr	r3, [pc, #164]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b96c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b970:	d107      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b972:	f107 0318 	add.w	r3, r7, #24
 800b976:	4618      	mov	r0, r3
 800b978:	f000 f8c0 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b980:	e09d      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b986:	e09a      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b988:	4b20      	ldr	r3, [pc, #128]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b994:	d107      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b996:	f107 030c 	add.w	r3, r7, #12
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 fa02 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9a4:	e08b      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9aa:	e088      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9ac:	4b17      	ldr	r3, [pc, #92]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b04      	cmp	r3, #4
 800b9b6:	d109      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9b8:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	08db      	lsrs	r3, r3, #3
 800b9be:	f003 0303 	and.w	r3, r3, #3
 800b9c2:	4a13      	ldr	r2, [pc, #76]	; (800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ca:	e078      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d0:	e075      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9d2:	4b0e      	ldr	r3, [pc, #56]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9de:	d102      	bne.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b9e0:	4b0c      	ldr	r3, [pc, #48]	; (800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e4:	e06b      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ea:	e068      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9ec:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9f8:	d102      	bne.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b9fa:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9fe:	e05e      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba04:	e05b      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba0a:	e058      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba0c:	58024400 	.word	0x58024400
 800ba10:	03d09000 	.word	0x03d09000
 800ba14:	003d0900 	.word	0x003d0900
 800ba18:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ba1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba20:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ba24:	430b      	orrs	r3, r1
 800ba26:	d148      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ba28:	4b27      	ldr	r3, [pc, #156]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba38:	d02a      	beq.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba40:	d838      	bhi.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba4e:	d00d      	beq.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ba50:	e030      	b.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba52:	4b1d      	ldr	r3, [pc, #116]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba5e:	d102      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ba60:	4b1a      	ldr	r3, [pc, #104]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ba62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba64:	e02b      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6a:	e028      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba6c:	4b16      	ldr	r3, [pc, #88]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba78:	d107      	bne.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 fae4 	bl	800c04c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba88:	e019      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba8e:	e016      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba90:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba9c:	d107      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba9e:	f107 0318 	add.w	r3, r7, #24
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 f82a 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baac:	e007      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bab2:	e004      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bab8:	e001      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800babe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3740      	adds	r7, #64	; 0x40
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	58024400 	.word	0x58024400
 800bacc:	017d7840 	.word	0x017d7840

0800bad0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bad4:	f7fd ffd4 	bl	8009a80 <HAL_RCC_GetHCLKFreq>
 800bad8:	4602      	mov	r2, r0
 800bada:	4b06      	ldr	r3, [pc, #24]	; (800baf4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	091b      	lsrs	r3, r3, #4
 800bae0:	f003 0307 	and.w	r3, r3, #7
 800bae4:	4904      	ldr	r1, [pc, #16]	; (800baf8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bae6:	5ccb      	ldrb	r3, [r1, r3]
 800bae8:	f003 031f 	and.w	r3, r3, #31
 800baec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	58024400 	.word	0x58024400
 800baf8:	0801552c 	.word	0x0801552c

0800bafc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b089      	sub	sp, #36	; 0x24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb04:	4ba1      	ldr	r3, [pc, #644]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb08:	f003 0303 	and.w	r3, r3, #3
 800bb0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bb0e:	4b9f      	ldr	r3, [pc, #636]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	0b1b      	lsrs	r3, r3, #12
 800bb14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb1a:	4b9c      	ldr	r3, [pc, #624]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	091b      	lsrs	r3, r3, #4
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bb26:	4b99      	ldr	r3, [pc, #612]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2a:	08db      	lsrs	r3, r3, #3
 800bb2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	fb02 f303 	mul.w	r3, r2, r3
 800bb36:	ee07 3a90 	vmov	s15, r3
 800bb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 8111 	beq.w	800bd6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	f000 8083 	beq.w	800bc58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	f200 80a1 	bhi.w	800bc9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d056      	beq.n	800bc14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb66:	e099      	b.n	800bc9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb68:	4b88      	ldr	r3, [pc, #544]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0320 	and.w	r3, r3, #32
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d02d      	beq.n	800bbd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb74:	4b85      	ldr	r3, [pc, #532]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	08db      	lsrs	r3, r3, #3
 800bb7a:	f003 0303 	and.w	r3, r3, #3
 800bb7e:	4a84      	ldr	r2, [pc, #528]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb80:	fa22 f303 	lsr.w	r3, r2, r3
 800bb84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb9e:	4b7b      	ldr	r3, [pc, #492]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbae:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bbce:	e087      	b.n	800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bbde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe2:	4b6a      	ldr	r3, [pc, #424]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbea:	ee07 3a90 	vmov	s15, r3
 800bbee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbf6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc12:	e065      	b.n	800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	ee07 3a90 	vmov	s15, r3
 800bc1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bd9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc26:	4b59      	ldr	r3, [pc, #356]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc56:	e043      	b.n	800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6a:	4b48      	ldr	r3, [pc, #288]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc9a:	e021      	b.n	800bce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bd9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcae:	4b37      	ldr	r3, [pc, #220]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bce0:	4b2a      	ldr	r3, [pc, #168]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce4:	0a5b      	lsrs	r3, r3, #9
 800bce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd06:	ee17 2a90 	vmov	r2, s15
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bd0e:	4b1f      	ldr	r3, [pc, #124]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	0c1b      	lsrs	r3, r3, #16
 800bd14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd18:	ee07 3a90 	vmov	s15, r3
 800bd1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd34:	ee17 2a90 	vmov	r2, s15
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bd3c:	4b13      	ldr	r3, [pc, #76]	; (800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd40:	0e1b      	lsrs	r3, r3, #24
 800bd42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd62:	ee17 2a90 	vmov	r2, s15
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd6a:	e008      	b.n	800bd7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	609a      	str	r2, [r3, #8]
}
 800bd7e:	bf00      	nop
 800bd80:	3724      	adds	r7, #36	; 0x24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	58024400 	.word	0x58024400
 800bd90:	03d09000 	.word	0x03d09000
 800bd94:	46000000 	.word	0x46000000
 800bd98:	4c742400 	.word	0x4c742400
 800bd9c:	4a742400 	.word	0x4a742400
 800bda0:	4bbebc20 	.word	0x4bbebc20

0800bda4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b089      	sub	sp, #36	; 0x24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdac:	4ba1      	ldr	r3, [pc, #644]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb0:	f003 0303 	and.w	r3, r3, #3
 800bdb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bdb6:	4b9f      	ldr	r3, [pc, #636]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdba:	0d1b      	lsrs	r3, r3, #20
 800bdbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bdc2:	4b9c      	ldr	r3, [pc, #624]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc6:	0a1b      	lsrs	r3, r3, #8
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bdce:	4b99      	ldr	r3, [pc, #612]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd2:	08db      	lsrs	r3, r3, #3
 800bdd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	fb02 f303 	mul.w	r3, r2, r3
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 8111 	beq.w	800c014 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	f000 8083 	beq.w	800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	f200 80a1 	bhi.w	800bf44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d056      	beq.n	800bebc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be0e:	e099      	b.n	800bf44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be10:	4b88      	ldr	r3, [pc, #544]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d02d      	beq.n	800be78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be1c:	4b85      	ldr	r3, [pc, #532]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	08db      	lsrs	r3, r3, #3
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	4a84      	ldr	r2, [pc, #528]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be28:	fa22 f303 	lsr.w	r3, r2, r3
 800be2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	ee07 3a90 	vmov	s15, r3
 800be34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be46:	4b7b      	ldr	r3, [pc, #492]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be56:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be76:	e087      	b.n	800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	ee07 3a90 	vmov	s15, r3
 800be7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8a:	4b6a      	ldr	r3, [pc, #424]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beba:	e065      	b.n	800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c044 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800beca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bece:	4b59      	ldr	r3, [pc, #356]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bede:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800befe:	e043      	b.n	800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf12:	4b48      	ldr	r3, [pc, #288]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf26:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf42:	e021      	b.n	800bf88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c044 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf56:	4b37      	ldr	r3, [pc, #220]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bf88:	4b2a      	ldr	r3, [pc, #168]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	0a5b      	lsrs	r3, r3, #9
 800bf8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf92:	ee07 3a90 	vmov	s15, r3
 800bf96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfae:	ee17 2a90 	vmov	r2, s15
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bfb6:	4b1f      	ldr	r3, [pc, #124]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfba:	0c1b      	lsrs	r3, r3, #16
 800bfbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc0:	ee07 3a90 	vmov	s15, r3
 800bfc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfdc:	ee17 2a90 	vmov	r2, s15
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bfe4:	4b13      	ldr	r3, [pc, #76]	; (800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe8:	0e1b      	lsrs	r3, r3, #24
 800bfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bffe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00a:	ee17 2a90 	vmov	r2, s15
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c012:	e008      	b.n	800c026 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	609a      	str	r2, [r3, #8]
}
 800c026:	bf00      	nop
 800c028:	3724      	adds	r7, #36	; 0x24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	58024400 	.word	0x58024400
 800c038:	03d09000 	.word	0x03d09000
 800c03c:	46000000 	.word	0x46000000
 800c040:	4c742400 	.word	0x4c742400
 800c044:	4a742400 	.word	0x4a742400
 800c048:	4bbebc20 	.word	0x4bbebc20

0800c04c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b089      	sub	sp, #36	; 0x24
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c054:	4ba0      	ldr	r3, [pc, #640]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c058:	f003 0303 	and.w	r3, r3, #3
 800c05c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c05e:	4b9e      	ldr	r3, [pc, #632]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c062:	091b      	lsrs	r3, r3, #4
 800c064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c068:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c06a:	4b9b      	ldr	r3, [pc, #620]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c074:	4b98      	ldr	r3, [pc, #608]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c078:	08db      	lsrs	r3, r3, #3
 800c07a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	fb02 f303 	mul.w	r3, r2, r3
 800c084:	ee07 3a90 	vmov	s15, r3
 800c088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 8111 	beq.w	800c2ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	f000 8083 	beq.w	800c1a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	f200 80a1 	bhi.w	800c1ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d056      	beq.n	800c162 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c0b4:	e099      	b.n	800c1ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0b6:	4b88      	ldr	r3, [pc, #544]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0320 	and.w	r3, r3, #32
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d02d      	beq.n	800c11e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0c2:	4b85      	ldr	r3, [pc, #532]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	08db      	lsrs	r3, r3, #3
 800c0c8:	f003 0303 	and.w	r3, r3, #3
 800c0cc:	4a83      	ldr	r2, [pc, #524]	; (800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ec:	4b7a      	ldr	r3, [pc, #488]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f4:	ee07 3a90 	vmov	s15, r3
 800c0f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c100:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c10c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c114:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c118:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c11c:	e087      	b.n	800c22e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	ee07 3a90 	vmov	s15, r3
 800c124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c128:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c12c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c130:	4b69      	ldr	r3, [pc, #420]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c138:	ee07 3a90 	vmov	s15, r3
 800c13c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c140:	ed97 6a03 	vldr	s12, [r7, #12]
 800c144:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c14c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c15c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c160:	e065      	b.n	800c22e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	ee07 3a90 	vmov	s15, r3
 800c168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c174:	4b58      	ldr	r3, [pc, #352]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c184:	ed97 6a03 	vldr	s12, [r7, #12]
 800c188:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c18c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1a4:	e043      	b.n	800c22e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	ee07 3a90 	vmov	s15, r3
 800c1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c2ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c1b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1b8:	4b47      	ldr	r3, [pc, #284]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1e8:	e021      	b.n	800c22e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	ee07 3a90 	vmov	s15, r3
 800c1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fc:	4b36      	ldr	r3, [pc, #216]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c204:	ee07 3a90 	vmov	s15, r3
 800c208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c210:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c224:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c22c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c22e:	4b2a      	ldr	r3, [pc, #168]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c232:	0a5b      	lsrs	r3, r3, #9
 800c234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c238:	ee07 3a90 	vmov	s15, r3
 800c23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c244:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c248:	edd7 6a07 	vldr	s13, [r7, #28]
 800c24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c254:	ee17 2a90 	vmov	r2, s15
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c25c:	4b1e      	ldr	r3, [pc, #120]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	0c1b      	lsrs	r3, r3, #16
 800c262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c272:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c276:	edd7 6a07 	vldr	s13, [r7, #28]
 800c27a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c27e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c282:	ee17 2a90 	vmov	r2, s15
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c28a:	4b13      	ldr	r3, [pc, #76]	; (800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28e:	0e1b      	lsrs	r3, r3, #24
 800c290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c294:	ee07 3a90 	vmov	s15, r3
 800c298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b0:	ee17 2a90 	vmov	r2, s15
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c2b8:	e008      	b.n	800c2cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	609a      	str	r2, [r3, #8]
}
 800c2cc:	bf00      	nop
 800c2ce:	3724      	adds	r7, #36	; 0x24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	58024400 	.word	0x58024400
 800c2dc:	03d09000 	.word	0x03d09000
 800c2e0:	46000000 	.word	0x46000000
 800c2e4:	4c742400 	.word	0x4c742400
 800c2e8:	4a742400 	.word	0x4a742400
 800c2ec:	4bbebc20 	.word	0x4bbebc20

0800c2f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2fe:	4b53      	ldr	r3, [pc, #332]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c302:	f003 0303 	and.w	r3, r3, #3
 800c306:	2b03      	cmp	r3, #3
 800c308:	d101      	bne.n	800c30e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e099      	b.n	800c442 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c30e:	4b4f      	ldr	r3, [pc, #316]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a4e      	ldr	r2, [pc, #312]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c31a:	f7f7 f959 	bl	80035d0 <HAL_GetTick>
 800c31e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c320:	e008      	b.n	800c334 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c322:	f7f7 f955 	bl	80035d0 <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d901      	bls.n	800c334 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e086      	b.n	800c442 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c334:	4b45      	ldr	r3, [pc, #276]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1f0      	bne.n	800c322 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c340:	4b42      	ldr	r3, [pc, #264]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c344:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	031b      	lsls	r3, r3, #12
 800c34e:	493f      	ldr	r1, [pc, #252]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c350:	4313      	orrs	r3, r2
 800c352:	628b      	str	r3, [r1, #40]	; 0x28
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	3b01      	subs	r3, #1
 800c35a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	3b01      	subs	r3, #1
 800c364:	025b      	lsls	r3, r3, #9
 800c366:	b29b      	uxth	r3, r3
 800c368:	431a      	orrs	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	3b01      	subs	r3, #1
 800c370:	041b      	lsls	r3, r3, #16
 800c372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c376:	431a      	orrs	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	061b      	lsls	r3, r3, #24
 800c380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c384:	4931      	ldr	r1, [pc, #196]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c386:	4313      	orrs	r3, r2
 800c388:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c38a:	4b30      	ldr	r3, [pc, #192]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	492d      	ldr	r1, [pc, #180]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c398:	4313      	orrs	r3, r2
 800c39a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c39c:	4b2b      	ldr	r3, [pc, #172]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	f023 0220 	bic.w	r2, r3, #32
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	699b      	ldr	r3, [r3, #24]
 800c3a8:	4928      	ldr	r1, [pc, #160]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c3ae:	4b27      	ldr	r3, [pc, #156]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b2:	4a26      	ldr	r2, [pc, #152]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3b4:	f023 0310 	bic.w	r3, r3, #16
 800c3b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c3ba:	4b24      	ldr	r3, [pc, #144]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3be:	4b24      	ldr	r3, [pc, #144]	; (800c450 <RCCEx_PLL2_Config+0x160>)
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	69d2      	ldr	r2, [r2, #28]
 800c3c6:	00d2      	lsls	r2, r2, #3
 800c3c8:	4920      	ldr	r1, [pc, #128]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c3ce:	4b1f      	ldr	r3, [pc, #124]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d2:	4a1e      	ldr	r2, [pc, #120]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3d4:	f043 0310 	orr.w	r3, r3, #16
 800c3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c3e0:	4b1a      	ldr	r3, [pc, #104]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e4:	4a19      	ldr	r2, [pc, #100]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3ec:	e00f      	b.n	800c40e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d106      	bne.n	800c402 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c3f4:	4b15      	ldr	r3, [pc, #84]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	4a14      	ldr	r2, [pc, #80]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c3fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c400:	e005      	b.n	800c40e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c402:	4b12      	ldr	r3, [pc, #72]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c406:	4a11      	ldr	r2, [pc, #68]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c40c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c40e:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a0e      	ldr	r2, [pc, #56]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c41a:	f7f7 f8d9 	bl	80035d0 <HAL_GetTick>
 800c41e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c420:	e008      	b.n	800c434 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c422:	f7f7 f8d5 	bl	80035d0 <HAL_GetTick>
 800c426:	4602      	mov	r2, r0
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d901      	bls.n	800c434 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c430:	2303      	movs	r3, #3
 800c432:	e006      	b.n	800c442 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c434:	4b05      	ldr	r3, [pc, #20]	; (800c44c <RCCEx_PLL2_Config+0x15c>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0f0      	beq.n	800c422 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c440:	7bfb      	ldrb	r3, [r7, #15]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	58024400 	.word	0x58024400
 800c450:	ffff0007 	.word	0xffff0007

0800c454 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c462:	4b53      	ldr	r3, [pc, #332]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c466:	f003 0303 	and.w	r3, r3, #3
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d101      	bne.n	800c472 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	e099      	b.n	800c5a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c472:	4b4f      	ldr	r3, [pc, #316]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a4e      	ldr	r2, [pc, #312]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c47c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c47e:	f7f7 f8a7 	bl	80035d0 <HAL_GetTick>
 800c482:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c484:	e008      	b.n	800c498 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c486:	f7f7 f8a3 	bl	80035d0 <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	2b02      	cmp	r3, #2
 800c492:	d901      	bls.n	800c498 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e086      	b.n	800c5a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c498:	4b45      	ldr	r3, [pc, #276]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f0      	bne.n	800c486 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c4a4:	4b42      	ldr	r3, [pc, #264]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	051b      	lsls	r3, r3, #20
 800c4b2:	493f      	ldr	r1, [pc, #252]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	628b      	str	r3, [r1, #40]	; 0x28
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	025b      	lsls	r3, r3, #9
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	431a      	orrs	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	041b      	lsls	r3, r3, #16
 800c4d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c4da:	431a      	orrs	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	061b      	lsls	r3, r3, #24
 800c4e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c4e8:	4931      	ldr	r1, [pc, #196]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c4ee:	4b30      	ldr	r3, [pc, #192]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	492d      	ldr	r1, [pc, #180]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c500:	4b2b      	ldr	r3, [pc, #172]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c504:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	4928      	ldr	r1, [pc, #160]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c50e:	4313      	orrs	r3, r2
 800c510:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c512:	4b27      	ldr	r3, [pc, #156]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c516:	4a26      	ldr	r2, [pc, #152]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c51c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c51e:	4b24      	ldr	r3, [pc, #144]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c522:	4b24      	ldr	r3, [pc, #144]	; (800c5b4 <RCCEx_PLL3_Config+0x160>)
 800c524:	4013      	ands	r3, r2
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	69d2      	ldr	r2, [r2, #28]
 800c52a:	00d2      	lsls	r2, r2, #3
 800c52c:	4920      	ldr	r1, [pc, #128]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c52e:	4313      	orrs	r3, r2
 800c530:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c532:	4b1f      	ldr	r3, [pc, #124]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	4a1e      	ldr	r2, [pc, #120]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c53c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d106      	bne.n	800c552 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c544:	4b1a      	ldr	r3, [pc, #104]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c548:	4a19      	ldr	r2, [pc, #100]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c54a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c54e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c550:	e00f      	b.n	800c572 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d106      	bne.n	800c566 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c558:	4b15      	ldr	r3, [pc, #84]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55c:	4a14      	ldr	r2, [pc, #80]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c55e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c562:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c564:	e005      	b.n	800c572 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c566:	4b12      	ldr	r3, [pc, #72]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56a:	4a11      	ldr	r2, [pc, #68]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c56c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c570:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c572:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a0e      	ldr	r2, [pc, #56]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c57c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c57e:	f7f7 f827 	bl	80035d0 <HAL_GetTick>
 800c582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c584:	e008      	b.n	800c598 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c586:	f7f7 f823 	bl	80035d0 <HAL_GetTick>
 800c58a:	4602      	mov	r2, r0
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	2b02      	cmp	r3, #2
 800c592:	d901      	bls.n	800c598 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c594:	2303      	movs	r3, #3
 800c596:	e006      	b.n	800c5a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c598:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <RCCEx_PLL3_Config+0x15c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d0f0      	beq.n	800c586 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	58024400 	.word	0x58024400
 800c5b4:	ffff0007 	.word	0xffff0007

0800c5b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d071      	beq.n	800c6ae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7f6 faf4 	bl	8002bcc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	f003 0310 	and.w	r3, r3, #16
 800c5f6:	2b10      	cmp	r3, #16
 800c5f8:	d050      	beq.n	800c69c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	22ca      	movs	r2, #202	; 0xca
 800c600:	625a      	str	r2, [r3, #36]	; 0x24
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2253      	movs	r2, #83	; 0x53
 800c608:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fa4a 	bl	800caa4 <RTC_EnterInitMode>
 800c610:	4603      	mov	r3, r0
 800c612:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d124      	bne.n	800c664 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6899      	ldr	r1, [r3, #8]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	4b24      	ldr	r3, [pc, #144]	; (800c6b8 <HAL_RTC_Init+0x100>)
 800c626:	400b      	ands	r3, r1
 800c628:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6899      	ldr	r1, [r3, #8]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	431a      	orrs	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	431a      	orrs	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	430a      	orrs	r2, r1
 800c646:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	0419      	lsls	r1, r3, #16
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68da      	ldr	r2, [r3, #12]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fa56 	bl	800cb0c <RTC_ExitInitMode>
 800c660:	4603      	mov	r3, r0
 800c662:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d113      	bne.n	800c692 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 0203 	bic.w	r2, r2, #3
 800c678:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	69da      	ldr	r2, [r3, #28]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	431a      	orrs	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	430a      	orrs	r2, r1
 800c690:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	22ff      	movs	r2, #255	; 0xff
 800c698:	625a      	str	r2, [r3, #36]	; 0x24
 800c69a:	e001      	b.n	800c6a0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c6a0:	7bfb      	ldrb	r3, [r7, #15]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d103      	bne.n	800c6ae <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	ff8fffbf 	.word	0xff8fffbf

0800c6bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6bc:	b590      	push	{r4, r7, lr}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d101      	bne.n	800c6d6 <HAL_RTC_SetTime+0x1a>
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	e089      	b.n	800c7ea <HAL_RTC_SetTime+0x12e>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	22ca      	movs	r2, #202	; 0xca
 800c6ec:	625a      	str	r2, [r3, #36]	; 0x24
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2253      	movs	r2, #83	; 0x53
 800c6f4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f000 f9d4 	bl	800caa4 <RTC_EnterInitMode>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c700:	7cfb      	ldrb	r3, [r7, #19]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d161      	bne.n	800c7ca <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d126      	bne.n	800c75a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	2200      	movs	r2, #0
 800c71e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fa2f 	bl	800cb88 <RTC_ByteToBcd2>
 800c72a:	4603      	mov	r3, r0
 800c72c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	785b      	ldrb	r3, [r3, #1]
 800c732:	4618      	mov	r0, r3
 800c734:	f000 fa28 	bl	800cb88 <RTC_ByteToBcd2>
 800c738:	4603      	mov	r3, r0
 800c73a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c73c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	789b      	ldrb	r3, [r3, #2]
 800c742:	4618      	mov	r0, r3
 800c744:	f000 fa20 	bl	800cb88 <RTC_ByteToBcd2>
 800c748:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c74a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	78db      	ldrb	r3, [r3, #3]
 800c752:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c754:	4313      	orrs	r3, r2
 800c756:	617b      	str	r3, [r7, #20]
 800c758:	e018      	b.n	800c78c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c764:	2b00      	cmp	r3, #0
 800c766:	d102      	bne.n	800c76e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2200      	movs	r2, #0
 800c76c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	785b      	ldrb	r3, [r3, #1]
 800c778:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c77a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c780:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	78db      	ldrb	r3, [r3, #3]
 800c786:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c788:	4313      	orrs	r3, r2
 800c78a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	6979      	ldr	r1, [r7, #20]
 800c792:	4b18      	ldr	r3, [pc, #96]	; (800c7f4 <HAL_RTC_SetTime+0x138>)
 800c794:	400b      	ands	r3, r1
 800c796:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689a      	ldr	r2, [r3, #8]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c7a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6899      	ldr	r1, [r3, #8]
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	431a      	orrs	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	430a      	orrs	r2, r1
 800c7be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 f9a3 	bl	800cb0c <RTC_ExitInitMode>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	22ff      	movs	r2, #255	; 0xff
 800c7d0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c7d2:	7cfb      	ldrb	r3, [r7, #19]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d103      	bne.n	800c7e0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c7e8:	7cfb      	ldrb	r3, [r7, #19]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	371c      	adds	r7, #28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd90      	pop	{r4, r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	007f7f7f 	.word	0x007f7f7f

0800c7f8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	4b22      	ldr	r3, [pc, #136]	; (800c8ac <HAL_RTC_GetTime+0xb4>)
 800c824:	4013      	ands	r3, r2
 800c826:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	0c1b      	lsrs	r3, r3, #16
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c832:	b2da      	uxtb	r2, r3
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	0a1b      	lsrs	r3, r3, #8
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c842:	b2da      	uxtb	r2, r3
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c850:	b2da      	uxtb	r2, r3
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	0d9b      	lsrs	r3, r3, #22
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	b2da      	uxtb	r2, r3
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d11a      	bne.n	800c8a2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	4618      	mov	r0, r3
 800c872:	f000 f9a9 	bl	800cbc8 <RTC_Bcd2ToByte>
 800c876:	4603      	mov	r3, r0
 800c878:	461a      	mov	r2, r3
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	785b      	ldrb	r3, [r3, #1]
 800c882:	4618      	mov	r0, r3
 800c884:	f000 f9a0 	bl	800cbc8 <RTC_Bcd2ToByte>
 800c888:	4603      	mov	r3, r0
 800c88a:	461a      	mov	r2, r3
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	789b      	ldrb	r3, [r3, #2]
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f997 	bl	800cbc8 <RTC_Bcd2ToByte>
 800c89a:	4603      	mov	r3, r0
 800c89c:	461a      	mov	r2, r3
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	007f7f7f 	.word	0x007f7f7f

0800c8b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8b0:	b590      	push	{r4, r7, lr}
 800c8b2:	b087      	sub	sp, #28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d101      	bne.n	800c8ca <HAL_RTC_SetDate+0x1a>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e073      	b.n	800c9b2 <HAL_RTC_SetDate+0x102>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10e      	bne.n	800c8fe <HAL_RTC_SetDate+0x4e>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	785b      	ldrb	r3, [r3, #1]
 800c8e4:	f003 0310 	and.w	r3, r3, #16
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d008      	beq.n	800c8fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	785b      	ldrb	r3, [r3, #1]
 800c8f0:	f023 0310 	bic.w	r3, r3, #16
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	330a      	adds	r3, #10
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d11c      	bne.n	800c93e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	78db      	ldrb	r3, [r3, #3]
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 f93d 	bl	800cb88 <RTC_ByteToBcd2>
 800c90e:	4603      	mov	r3, r0
 800c910:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	785b      	ldrb	r3, [r3, #1]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 f936 	bl	800cb88 <RTC_ByteToBcd2>
 800c91c:	4603      	mov	r3, r0
 800c91e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c920:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	789b      	ldrb	r3, [r3, #2]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f92e 	bl	800cb88 <RTC_ByteToBcd2>
 800c92c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c92e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c938:	4313      	orrs	r3, r2
 800c93a:	617b      	str	r3, [r7, #20]
 800c93c:	e00e      	b.n	800c95c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	78db      	ldrb	r3, [r3, #3]
 800c942:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	785b      	ldrb	r3, [r3, #1]
 800c948:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c94a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c950:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c958:	4313      	orrs	r3, r2
 800c95a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	22ca      	movs	r2, #202	; 0xca
 800c962:	625a      	str	r2, [r3, #36]	; 0x24
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2253      	movs	r2, #83	; 0x53
 800c96a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 f899 	bl	800caa4 <RTC_EnterInitMode>
 800c972:	4603      	mov	r3, r0
 800c974:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c976:	7cfb      	ldrb	r3, [r7, #19]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	6979      	ldr	r1, [r7, #20]
 800c982:	4b0e      	ldr	r3, [pc, #56]	; (800c9bc <HAL_RTC_SetDate+0x10c>)
 800c984:	400b      	ands	r3, r1
 800c986:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 f8bf 	bl	800cb0c <RTC_ExitInitMode>
 800c98e:	4603      	mov	r3, r0
 800c990:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	22ff      	movs	r2, #255	; 0xff
 800c998:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c99a:	7cfb      	ldrb	r3, [r7, #19]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d103      	bne.n	800c9a8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c9b0:	7cfb      	ldrb	r3, [r7, #19]


}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	371c      	adds	r7, #28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd90      	pop	{r4, r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	00ffff3f 	.word	0x00ffff3f

0800c9c0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	4b21      	ldr	r3, [pc, #132]	; (800ca58 <HAL_RTC_GetDate+0x98>)
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	0c1b      	lsrs	r3, r3, #16
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	0a1b      	lsrs	r3, r3, #8
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	f003 031f 	and.w	r3, r3, #31
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	0b5b      	lsrs	r3, r3, #13
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	f003 0307 	and.w	r3, r3, #7
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d11a      	bne.n	800ca4c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	78db      	ldrb	r3, [r3, #3]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 f8d4 	bl	800cbc8 <RTC_Bcd2ToByte>
 800ca20:	4603      	mov	r3, r0
 800ca22:	461a      	mov	r2, r3
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	785b      	ldrb	r3, [r3, #1]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 f8cb 	bl	800cbc8 <RTC_Bcd2ToByte>
 800ca32:	4603      	mov	r3, r0
 800ca34:	461a      	mov	r2, r3
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	789b      	ldrb	r3, [r3, #2]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 f8c2 	bl	800cbc8 <RTC_Bcd2ToByte>
 800ca44:	4603      	mov	r3, r0
 800ca46:	461a      	mov	r2, r3
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3718      	adds	r7, #24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	00ffff3f 	.word	0x00ffff3f

0800ca5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a0d      	ldr	r2, [pc, #52]	; (800caa0 <HAL_RTC_WaitForSynchro+0x44>)
 800ca6a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800ca6c:	f7f6 fdb0 	bl	80035d0 <HAL_GetTick>
 800ca70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca72:	e009      	b.n	800ca88 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ca74:	f7f6 fdac 	bl	80035d0 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca82:	d901      	bls.n	800ca88 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800ca84:	2303      	movs	r3, #3
 800ca86:	e007      	b.n	800ca98 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	f003 0320 	and.w	r3, r3, #32
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0ee      	beq.n	800ca74 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	0003ff5f 	.word	0x0003ff5f

0800caa4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d120      	bne.n	800cb00 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cac6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cac8:	f7f6 fd82 	bl	80035d0 <HAL_GetTick>
 800cacc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cace:	e00d      	b.n	800caec <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cad0:	f7f6 fd7e 	bl	80035d0 <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cade:	d905      	bls.n	800caec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cae0:	2303      	movs	r3, #3
 800cae2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2203      	movs	r2, #3
 800cae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d102      	bne.n	800cb00 <RTC_EnterInitMode+0x5c>
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	d1e7      	bne.n	800cad0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cb18:	4b1a      	ldr	r3, [pc, #104]	; (800cb84 <RTC_ExitInitMode+0x78>)
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	4a19      	ldr	r2, [pc, #100]	; (800cb84 <RTC_ExitInitMode+0x78>)
 800cb1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb22:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cb24:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <RTC_ExitInitMode+0x78>)
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	f003 0320 	and.w	r3, r3, #32
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10c      	bne.n	800cb4a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff ff93 	bl	800ca5c <HAL_RTC_WaitForSynchro>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d01e      	beq.n	800cb7a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2203      	movs	r2, #3
 800cb40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cb44:	2303      	movs	r3, #3
 800cb46:	73fb      	strb	r3, [r7, #15]
 800cb48:	e017      	b.n	800cb7a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb4a:	4b0e      	ldr	r3, [pc, #56]	; (800cb84 <RTC_ExitInitMode+0x78>)
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	4a0d      	ldr	r2, [pc, #52]	; (800cb84 <RTC_ExitInitMode+0x78>)
 800cb50:	f023 0320 	bic.w	r3, r3, #32
 800cb54:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7ff ff80 	bl	800ca5c <HAL_RTC_WaitForSynchro>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d005      	beq.n	800cb6e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2203      	movs	r2, #3
 800cb66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb6e:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <RTC_ExitInitMode+0x78>)
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	4a04      	ldr	r2, [pc, #16]	; (800cb84 <RTC_ExitInitMode+0x78>)
 800cb74:	f043 0320 	orr.w	r3, r3, #32
 800cb78:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	58004000 	.word	0x58004000

0800cb88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800cb9a:	e005      	b.n	800cba8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800cba2:	7afb      	ldrb	r3, [r7, #11]
 800cba4:	3b0a      	subs	r3, #10
 800cba6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800cba8:	7afb      	ldrb	r3, [r7, #11]
 800cbaa:	2b09      	cmp	r3, #9
 800cbac:	d8f6      	bhi.n	800cb9c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	011b      	lsls	r3, r3, #4
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	7afb      	ldrb	r3, [r7, #11]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	b2db      	uxtb	r3, r3
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3714      	adds	r7, #20
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cbd2:	79fb      	ldrb	r3, [r7, #7]
 800cbd4:	091b      	lsrs	r3, r3, #4
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	461a      	mov	r2, r3
 800cbda:	0092      	lsls	r2, r2, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cbe2:	79fb      	ldrb	r3, [r7, #7]
 800cbe4:	f003 030f 	and.w	r3, r3, #15
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	4413      	add	r3, r2
 800cbee:	b2db      	uxtb	r3, r3
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d101      	bne.n	800cc0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e10f      	b.n	800ce2e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a87      	ldr	r2, [pc, #540]	; (800ce38 <HAL_SPI_Init+0x23c>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d00f      	beq.n	800cc3e <HAL_SPI_Init+0x42>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a86      	ldr	r2, [pc, #536]	; (800ce3c <HAL_SPI_Init+0x240>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d00a      	beq.n	800cc3e <HAL_SPI_Init+0x42>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a84      	ldr	r2, [pc, #528]	; (800ce40 <HAL_SPI_Init+0x244>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d005      	beq.n	800cc3e <HAL_SPI_Init+0x42>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	2b0f      	cmp	r3, #15
 800cc38:	d901      	bls.n	800cc3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e0f7      	b.n	800ce2e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f900 	bl	800ce44 <SPI_GetPacketSize>
 800cc44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a7b      	ldr	r2, [pc, #492]	; (800ce38 <HAL_SPI_Init+0x23c>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d00c      	beq.n	800cc6a <HAL_SPI_Init+0x6e>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a79      	ldr	r2, [pc, #484]	; (800ce3c <HAL_SPI_Init+0x240>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d007      	beq.n	800cc6a <HAL_SPI_Init+0x6e>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a78      	ldr	r2, [pc, #480]	; (800ce40 <HAL_SPI_Init+0x244>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d002      	beq.n	800cc6a <HAL_SPI_Init+0x6e>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b08      	cmp	r3, #8
 800cc68:	d811      	bhi.n	800cc8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc6e:	4a72      	ldr	r2, [pc, #456]	; (800ce38 <HAL_SPI_Init+0x23c>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d009      	beq.n	800cc88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a70      	ldr	r2, [pc, #448]	; (800ce3c <HAL_SPI_Init+0x240>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d004      	beq.n	800cc88 <HAL_SPI_Init+0x8c>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a6f      	ldr	r2, [pc, #444]	; (800ce40 <HAL_SPI_Init+0x244>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d104      	bne.n	800cc92 <HAL_SPI_Init+0x96>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b10      	cmp	r3, #16
 800cc8c:	d901      	bls.n	800cc92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e0cd      	b.n	800ce2e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7f5 ffc2 	bl	8002c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f022 0201 	bic.w	r2, r2, #1
 800ccc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ccce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ccd8:	d119      	bne.n	800cd0e <HAL_SPI_Init+0x112>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cce2:	d103      	bne.n	800ccec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d008      	beq.n	800ccfe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10c      	bne.n	800cd0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccfc:	d107      	bne.n	800cd0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00f      	beq.n	800cd3a <HAL_SPI_Init+0x13e>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	2b06      	cmp	r3, #6
 800cd20:	d90b      	bls.n	800cd3a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	e007      	b.n	800cd4a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	69da      	ldr	r2, [r3, #28]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd52:	431a      	orrs	r2, r3
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	431a      	orrs	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5c:	ea42 0103 	orr.w	r1, r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68da      	ldr	r2, [r3, #12]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	430a      	orrs	r2, r1
 800cd6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd74:	431a      	orrs	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	431a      	orrs	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	431a      	orrs	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	431a      	orrs	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	431a      	orrs	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	431a      	orrs	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdaa:	ea42 0103 	orr.w	r1, r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d113      	bne.n	800cdea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdd4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cde8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f022 0201 	bic.w	r2, r2, #1
 800cdf8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00a      	beq.n	800ce1c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	430a      	orrs	r2, r1
 800ce1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	40013000 	.word	0x40013000
 800ce3c:	40003800 	.word	0x40003800
 800ce40:	40003c00 	.word	0x40003c00

0800ce44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce50:	095b      	lsrs	r3, r3, #5
 800ce52:	3301      	adds	r3, #1
 800ce54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	3307      	adds	r3, #7
 800ce62:	08db      	lsrs	r3, r3, #3
 800ce64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d101      	bne.n	800ce8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e049      	b.n	800cf20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d106      	bne.n	800cea6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7f5 ff7b 	bl	8002d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2202      	movs	r2, #2
 800ceaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4610      	mov	r0, r2
 800ceba:	f000 ff41 	bl	800dd40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2201      	movs	r2, #1
 800cee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d001      	beq.n	800cf40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e04c      	b.n	800cfda <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2202      	movs	r2, #2
 800cf44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a26      	ldr	r2, [pc, #152]	; (800cfe8 <HAL_TIM_Base_Start+0xc0>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d022      	beq.n	800cf98 <HAL_TIM_Base_Start+0x70>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf5a:	d01d      	beq.n	800cf98 <HAL_TIM_Base_Start+0x70>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a22      	ldr	r2, [pc, #136]	; (800cfec <HAL_TIM_Base_Start+0xc4>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d018      	beq.n	800cf98 <HAL_TIM_Base_Start+0x70>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a21      	ldr	r2, [pc, #132]	; (800cff0 <HAL_TIM_Base_Start+0xc8>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d013      	beq.n	800cf98 <HAL_TIM_Base_Start+0x70>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a1f      	ldr	r2, [pc, #124]	; (800cff4 <HAL_TIM_Base_Start+0xcc>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d00e      	beq.n	800cf98 <HAL_TIM_Base_Start+0x70>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a1e      	ldr	r2, [pc, #120]	; (800cff8 <HAL_TIM_Base_Start+0xd0>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d009      	beq.n	800cf98 <HAL_TIM_Base_Start+0x70>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a1c      	ldr	r2, [pc, #112]	; (800cffc <HAL_TIM_Base_Start+0xd4>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d004      	beq.n	800cf98 <HAL_TIM_Base_Start+0x70>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a1b      	ldr	r2, [pc, #108]	; (800d000 <HAL_TIM_Base_Start+0xd8>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d115      	bne.n	800cfc4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	689a      	ldr	r2, [r3, #8]
 800cf9e:	4b19      	ldr	r3, [pc, #100]	; (800d004 <HAL_TIM_Base_Start+0xdc>)
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b06      	cmp	r3, #6
 800cfa8:	d015      	beq.n	800cfd6 <HAL_TIM_Base_Start+0xae>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfb0:	d011      	beq.n	800cfd6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f042 0201 	orr.w	r2, r2, #1
 800cfc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfc2:	e008      	b.n	800cfd6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f042 0201 	orr.w	r2, r2, #1
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	e000      	b.n	800cfd8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	40010000 	.word	0x40010000
 800cfec:	40000400 	.word	0x40000400
 800cff0:	40000800 	.word	0x40000800
 800cff4:	40000c00 	.word	0x40000c00
 800cff8:	40010400 	.word	0x40010400
 800cffc:	40001800 	.word	0x40001800
 800d000:	40014000 	.word	0x40014000
 800d004:	00010007 	.word	0x00010007

0800d008 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6a1a      	ldr	r2, [r3, #32]
 800d016:	f241 1311 	movw	r3, #4369	; 0x1111
 800d01a:	4013      	ands	r3, r2
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10f      	bne.n	800d040 <HAL_TIM_Base_Stop+0x38>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	6a1a      	ldr	r2, [r3, #32]
 800d026:	f240 4344 	movw	r3, #1092	; 0x444
 800d02a:	4013      	ands	r3, r2
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d107      	bne.n	800d040 <HAL_TIM_Base_Stop+0x38>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f022 0201 	bic.w	r2, r2, #1
 800d03e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
	...

0800d058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d001      	beq.n	800d070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	e054      	b.n	800d11a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2202      	movs	r2, #2
 800d074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68da      	ldr	r2, [r3, #12]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f042 0201 	orr.w	r2, r2, #1
 800d086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a26      	ldr	r2, [pc, #152]	; (800d128 <HAL_TIM_Base_Start_IT+0xd0>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d022      	beq.n	800d0d8 <HAL_TIM_Base_Start_IT+0x80>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d09a:	d01d      	beq.n	800d0d8 <HAL_TIM_Base_Start_IT+0x80>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a22      	ldr	r2, [pc, #136]	; (800d12c <HAL_TIM_Base_Start_IT+0xd4>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d018      	beq.n	800d0d8 <HAL_TIM_Base_Start_IT+0x80>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a21      	ldr	r2, [pc, #132]	; (800d130 <HAL_TIM_Base_Start_IT+0xd8>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d013      	beq.n	800d0d8 <HAL_TIM_Base_Start_IT+0x80>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a1f      	ldr	r2, [pc, #124]	; (800d134 <HAL_TIM_Base_Start_IT+0xdc>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d00e      	beq.n	800d0d8 <HAL_TIM_Base_Start_IT+0x80>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a1e      	ldr	r2, [pc, #120]	; (800d138 <HAL_TIM_Base_Start_IT+0xe0>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d009      	beq.n	800d0d8 <HAL_TIM_Base_Start_IT+0x80>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a1c      	ldr	r2, [pc, #112]	; (800d13c <HAL_TIM_Base_Start_IT+0xe4>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d004      	beq.n	800d0d8 <HAL_TIM_Base_Start_IT+0x80>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a1b      	ldr	r2, [pc, #108]	; (800d140 <HAL_TIM_Base_Start_IT+0xe8>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d115      	bne.n	800d104 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689a      	ldr	r2, [r3, #8]
 800d0de:	4b19      	ldr	r3, [pc, #100]	; (800d144 <HAL_TIM_Base_Start_IT+0xec>)
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b06      	cmp	r3, #6
 800d0e8:	d015      	beq.n	800d116 <HAL_TIM_Base_Start_IT+0xbe>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0f0:	d011      	beq.n	800d116 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f042 0201 	orr.w	r2, r2, #1
 800d100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d102:	e008      	b.n	800d116 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f042 0201 	orr.w	r2, r2, #1
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	e000      	b.n	800d118 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	40010000 	.word	0x40010000
 800d12c:	40000400 	.word	0x40000400
 800d130:	40000800 	.word	0x40000800
 800d134:	40000c00 	.word	0x40000c00
 800d138:	40010400 	.word	0x40010400
 800d13c:	40001800 	.word	0x40001800
 800d140:	40014000 	.word	0x40014000
 800d144:	00010007 	.word	0x00010007

0800d148 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d109      	bne.n	800d170 <HAL_TIM_OC_Start_IT+0x28>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b01      	cmp	r3, #1
 800d166:	bf14      	ite	ne
 800d168:	2301      	movne	r3, #1
 800d16a:	2300      	moveq	r3, #0
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	e03c      	b.n	800d1ea <HAL_TIM_OC_Start_IT+0xa2>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b04      	cmp	r3, #4
 800d174:	d109      	bne.n	800d18a <HAL_TIM_OC_Start_IT+0x42>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b01      	cmp	r3, #1
 800d180:	bf14      	ite	ne
 800d182:	2301      	movne	r3, #1
 800d184:	2300      	moveq	r3, #0
 800d186:	b2db      	uxtb	r3, r3
 800d188:	e02f      	b.n	800d1ea <HAL_TIM_OC_Start_IT+0xa2>
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2b08      	cmp	r3, #8
 800d18e:	d109      	bne.n	800d1a4 <HAL_TIM_OC_Start_IT+0x5c>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b01      	cmp	r3, #1
 800d19a:	bf14      	ite	ne
 800d19c:	2301      	movne	r3, #1
 800d19e:	2300      	moveq	r3, #0
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	e022      	b.n	800d1ea <HAL_TIM_OC_Start_IT+0xa2>
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b0c      	cmp	r3, #12
 800d1a8:	d109      	bne.n	800d1be <HAL_TIM_OC_Start_IT+0x76>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	bf14      	ite	ne
 800d1b6:	2301      	movne	r3, #1
 800d1b8:	2300      	moveq	r3, #0
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	e015      	b.n	800d1ea <HAL_TIM_OC_Start_IT+0xa2>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b10      	cmp	r3, #16
 800d1c2:	d109      	bne.n	800d1d8 <HAL_TIM_OC_Start_IT+0x90>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	bf14      	ite	ne
 800d1d0:	2301      	movne	r3, #1
 800d1d2:	2300      	moveq	r3, #0
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	e008      	b.n	800d1ea <HAL_TIM_OC_Start_IT+0xa2>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	bf14      	ite	ne
 800d1e4:	2301      	movne	r3, #1
 800d1e6:	2300      	moveq	r3, #0
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e0ec      	b.n	800d3cc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d104      	bne.n	800d202 <HAL_TIM_OC_Start_IT+0xba>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d200:	e023      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x102>
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b04      	cmp	r3, #4
 800d206:	d104      	bne.n	800d212 <HAL_TIM_OC_Start_IT+0xca>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2202      	movs	r2, #2
 800d20c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d210:	e01b      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x102>
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b08      	cmp	r3, #8
 800d216:	d104      	bne.n	800d222 <HAL_TIM_OC_Start_IT+0xda>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2202      	movs	r2, #2
 800d21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d220:	e013      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x102>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2b0c      	cmp	r3, #12
 800d226:	d104      	bne.n	800d232 <HAL_TIM_OC_Start_IT+0xea>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d230:	e00b      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x102>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2b10      	cmp	r3, #16
 800d236:	d104      	bne.n	800d242 <HAL_TIM_OC_Start_IT+0xfa>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d240:	e003      	b.n	800d24a <HAL_TIM_OC_Start_IT+0x102>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2202      	movs	r2, #2
 800d246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b0c      	cmp	r3, #12
 800d24e:	d841      	bhi.n	800d2d4 <HAL_TIM_OC_Start_IT+0x18c>
 800d250:	a201      	add	r2, pc, #4	; (adr r2, 800d258 <HAL_TIM_OC_Start_IT+0x110>)
 800d252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d256:	bf00      	nop
 800d258:	0800d28d 	.word	0x0800d28d
 800d25c:	0800d2d5 	.word	0x0800d2d5
 800d260:	0800d2d5 	.word	0x0800d2d5
 800d264:	0800d2d5 	.word	0x0800d2d5
 800d268:	0800d29f 	.word	0x0800d29f
 800d26c:	0800d2d5 	.word	0x0800d2d5
 800d270:	0800d2d5 	.word	0x0800d2d5
 800d274:	0800d2d5 	.word	0x0800d2d5
 800d278:	0800d2b1 	.word	0x0800d2b1
 800d27c:	0800d2d5 	.word	0x0800d2d5
 800d280:	0800d2d5 	.word	0x0800d2d5
 800d284:	0800d2d5 	.word	0x0800d2d5
 800d288:	0800d2c3 	.word	0x0800d2c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68da      	ldr	r2, [r3, #12]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f042 0202 	orr.w	r2, r2, #2
 800d29a:	60da      	str	r2, [r3, #12]
      break;
 800d29c:	e01d      	b.n	800d2da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68da      	ldr	r2, [r3, #12]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f042 0204 	orr.w	r2, r2, #4
 800d2ac:	60da      	str	r2, [r3, #12]
      break;
 800d2ae:	e014      	b.n	800d2da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68da      	ldr	r2, [r3, #12]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f042 0208 	orr.w	r2, r2, #8
 800d2be:	60da      	str	r2, [r3, #12]
      break;
 800d2c0:	e00b      	b.n	800d2da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68da      	ldr	r2, [r3, #12]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f042 0210 	orr.w	r2, r2, #16
 800d2d0:	60da      	str	r2, [r3, #12]
      break;
 800d2d2:	e002      	b.n	800d2da <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d8:	bf00      	nop
  }

  if (status == HAL_OK)
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d174      	bne.n	800d3ca <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f001 f943 	bl	800e574 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a38      	ldr	r2, [pc, #224]	; (800d3d4 <HAL_TIM_OC_Start_IT+0x28c>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d013      	beq.n	800d320 <HAL_TIM_OC_Start_IT+0x1d8>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a36      	ldr	r2, [pc, #216]	; (800d3d8 <HAL_TIM_OC_Start_IT+0x290>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d00e      	beq.n	800d320 <HAL_TIM_OC_Start_IT+0x1d8>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a35      	ldr	r2, [pc, #212]	; (800d3dc <HAL_TIM_OC_Start_IT+0x294>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d009      	beq.n	800d320 <HAL_TIM_OC_Start_IT+0x1d8>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a33      	ldr	r2, [pc, #204]	; (800d3e0 <HAL_TIM_OC_Start_IT+0x298>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d004      	beq.n	800d320 <HAL_TIM_OC_Start_IT+0x1d8>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a32      	ldr	r2, [pc, #200]	; (800d3e4 <HAL_TIM_OC_Start_IT+0x29c>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d101      	bne.n	800d324 <HAL_TIM_OC_Start_IT+0x1dc>
 800d320:	2301      	movs	r3, #1
 800d322:	e000      	b.n	800d326 <HAL_TIM_OC_Start_IT+0x1de>
 800d324:	2300      	movs	r3, #0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d007      	beq.n	800d33a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a25      	ldr	r2, [pc, #148]	; (800d3d4 <HAL_TIM_OC_Start_IT+0x28c>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d022      	beq.n	800d38a <HAL_TIM_OC_Start_IT+0x242>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d34c:	d01d      	beq.n	800d38a <HAL_TIM_OC_Start_IT+0x242>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a25      	ldr	r2, [pc, #148]	; (800d3e8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d018      	beq.n	800d38a <HAL_TIM_OC_Start_IT+0x242>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a23      	ldr	r2, [pc, #140]	; (800d3ec <HAL_TIM_OC_Start_IT+0x2a4>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d013      	beq.n	800d38a <HAL_TIM_OC_Start_IT+0x242>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a22      	ldr	r2, [pc, #136]	; (800d3f0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d00e      	beq.n	800d38a <HAL_TIM_OC_Start_IT+0x242>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a19      	ldr	r2, [pc, #100]	; (800d3d8 <HAL_TIM_OC_Start_IT+0x290>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d009      	beq.n	800d38a <HAL_TIM_OC_Start_IT+0x242>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a1e      	ldr	r2, [pc, #120]	; (800d3f4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d004      	beq.n	800d38a <HAL_TIM_OC_Start_IT+0x242>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a15      	ldr	r2, [pc, #84]	; (800d3dc <HAL_TIM_OC_Start_IT+0x294>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d115      	bne.n	800d3b6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	689a      	ldr	r2, [r3, #8]
 800d390:	4b19      	ldr	r3, [pc, #100]	; (800d3f8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800d392:	4013      	ands	r3, r2
 800d394:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b06      	cmp	r3, #6
 800d39a:	d015      	beq.n	800d3c8 <HAL_TIM_OC_Start_IT+0x280>
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3a2:	d011      	beq.n	800d3c8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0201 	orr.w	r2, r2, #1
 800d3b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3b4:	e008      	b.n	800d3c8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f042 0201 	orr.w	r2, r2, #1
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	e000      	b.n	800d3ca <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	40010000 	.word	0x40010000
 800d3d8:	40010400 	.word	0x40010400
 800d3dc:	40014000 	.word	0x40014000
 800d3e0:	40014400 	.word	0x40014400
 800d3e4:	40014800 	.word	0x40014800
 800d3e8:	40000400 	.word	0x40000400
 800d3ec:	40000800 	.word	0x40000800
 800d3f0:	40000c00 	.word	0x40000c00
 800d3f4:	40001800 	.word	0x40001800
 800d3f8:	00010007 	.word	0x00010007

0800d3fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e049      	b.n	800d4a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d106      	bne.n	800d428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f841 	bl	800d4aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2202      	movs	r2, #2
 800d42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	3304      	adds	r3, #4
 800d438:	4619      	mov	r1, r3
 800d43a:	4610      	mov	r0, r2
 800d43c:	f000 fc80 	bl	800dd40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2201      	movs	r2, #1
 800d454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b083      	sub	sp, #12
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d4b2:	bf00      	nop
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
	...

0800d4c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d109      	bne.n	800d4e4 <HAL_TIM_PWM_Start+0x24>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	bf14      	ite	ne
 800d4dc:	2301      	movne	r3, #1
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	e03c      	b.n	800d55e <HAL_TIM_PWM_Start+0x9e>
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2b04      	cmp	r3, #4
 800d4e8:	d109      	bne.n	800d4fe <HAL_TIM_PWM_Start+0x3e>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	bf14      	ite	ne
 800d4f6:	2301      	movne	r3, #1
 800d4f8:	2300      	moveq	r3, #0
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	e02f      	b.n	800d55e <HAL_TIM_PWM_Start+0x9e>
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b08      	cmp	r3, #8
 800d502:	d109      	bne.n	800d518 <HAL_TIM_PWM_Start+0x58>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	bf14      	ite	ne
 800d510:	2301      	movne	r3, #1
 800d512:	2300      	moveq	r3, #0
 800d514:	b2db      	uxtb	r3, r3
 800d516:	e022      	b.n	800d55e <HAL_TIM_PWM_Start+0x9e>
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	2b0c      	cmp	r3, #12
 800d51c:	d109      	bne.n	800d532 <HAL_TIM_PWM_Start+0x72>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d524:	b2db      	uxtb	r3, r3
 800d526:	2b01      	cmp	r3, #1
 800d528:	bf14      	ite	ne
 800d52a:	2301      	movne	r3, #1
 800d52c:	2300      	moveq	r3, #0
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	e015      	b.n	800d55e <HAL_TIM_PWM_Start+0x9e>
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	2b10      	cmp	r3, #16
 800d536:	d109      	bne.n	800d54c <HAL_TIM_PWM_Start+0x8c>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b01      	cmp	r3, #1
 800d542:	bf14      	ite	ne
 800d544:	2301      	movne	r3, #1
 800d546:	2300      	moveq	r3, #0
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	e008      	b.n	800d55e <HAL_TIM_PWM_Start+0x9e>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b01      	cmp	r3, #1
 800d556:	bf14      	ite	ne
 800d558:	2301      	movne	r3, #1
 800d55a:	2300      	moveq	r3, #0
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e0a1      	b.n	800d6aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d104      	bne.n	800d576 <HAL_TIM_PWM_Start+0xb6>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2202      	movs	r2, #2
 800d570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d574:	e023      	b.n	800d5be <HAL_TIM_PWM_Start+0xfe>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b04      	cmp	r3, #4
 800d57a:	d104      	bne.n	800d586 <HAL_TIM_PWM_Start+0xc6>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2202      	movs	r2, #2
 800d580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d584:	e01b      	b.n	800d5be <HAL_TIM_PWM_Start+0xfe>
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b08      	cmp	r3, #8
 800d58a:	d104      	bne.n	800d596 <HAL_TIM_PWM_Start+0xd6>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d594:	e013      	b.n	800d5be <HAL_TIM_PWM_Start+0xfe>
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2b0c      	cmp	r3, #12
 800d59a:	d104      	bne.n	800d5a6 <HAL_TIM_PWM_Start+0xe6>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2202      	movs	r2, #2
 800d5a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5a4:	e00b      	b.n	800d5be <HAL_TIM_PWM_Start+0xfe>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b10      	cmp	r3, #16
 800d5aa:	d104      	bne.n	800d5b6 <HAL_TIM_PWM_Start+0xf6>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5b4:	e003      	b.n	800d5be <HAL_TIM_PWM_Start+0xfe>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2202      	movs	r2, #2
 800d5ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f000 ffd4 	bl	800e574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a38      	ldr	r2, [pc, #224]	; (800d6b4 <HAL_TIM_PWM_Start+0x1f4>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d013      	beq.n	800d5fe <HAL_TIM_PWM_Start+0x13e>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a37      	ldr	r2, [pc, #220]	; (800d6b8 <HAL_TIM_PWM_Start+0x1f8>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d00e      	beq.n	800d5fe <HAL_TIM_PWM_Start+0x13e>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a35      	ldr	r2, [pc, #212]	; (800d6bc <HAL_TIM_PWM_Start+0x1fc>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d009      	beq.n	800d5fe <HAL_TIM_PWM_Start+0x13e>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a34      	ldr	r2, [pc, #208]	; (800d6c0 <HAL_TIM_PWM_Start+0x200>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d004      	beq.n	800d5fe <HAL_TIM_PWM_Start+0x13e>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a32      	ldr	r2, [pc, #200]	; (800d6c4 <HAL_TIM_PWM_Start+0x204>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d101      	bne.n	800d602 <HAL_TIM_PWM_Start+0x142>
 800d5fe:	2301      	movs	r3, #1
 800d600:	e000      	b.n	800d604 <HAL_TIM_PWM_Start+0x144>
 800d602:	2300      	movs	r3, #0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d007      	beq.n	800d618 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d616:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a25      	ldr	r2, [pc, #148]	; (800d6b4 <HAL_TIM_PWM_Start+0x1f4>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d022      	beq.n	800d668 <HAL_TIM_PWM_Start+0x1a8>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d62a:	d01d      	beq.n	800d668 <HAL_TIM_PWM_Start+0x1a8>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a25      	ldr	r2, [pc, #148]	; (800d6c8 <HAL_TIM_PWM_Start+0x208>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d018      	beq.n	800d668 <HAL_TIM_PWM_Start+0x1a8>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a24      	ldr	r2, [pc, #144]	; (800d6cc <HAL_TIM_PWM_Start+0x20c>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d013      	beq.n	800d668 <HAL_TIM_PWM_Start+0x1a8>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a22      	ldr	r2, [pc, #136]	; (800d6d0 <HAL_TIM_PWM_Start+0x210>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d00e      	beq.n	800d668 <HAL_TIM_PWM_Start+0x1a8>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a1a      	ldr	r2, [pc, #104]	; (800d6b8 <HAL_TIM_PWM_Start+0x1f8>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d009      	beq.n	800d668 <HAL_TIM_PWM_Start+0x1a8>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a1e      	ldr	r2, [pc, #120]	; (800d6d4 <HAL_TIM_PWM_Start+0x214>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d004      	beq.n	800d668 <HAL_TIM_PWM_Start+0x1a8>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a16      	ldr	r2, [pc, #88]	; (800d6bc <HAL_TIM_PWM_Start+0x1fc>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d115      	bne.n	800d694 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	689a      	ldr	r2, [r3, #8]
 800d66e:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <HAL_TIM_PWM_Start+0x218>)
 800d670:	4013      	ands	r3, r2
 800d672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b06      	cmp	r3, #6
 800d678:	d015      	beq.n	800d6a6 <HAL_TIM_PWM_Start+0x1e6>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d680:	d011      	beq.n	800d6a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f042 0201 	orr.w	r2, r2, #1
 800d690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d692:	e008      	b.n	800d6a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f042 0201 	orr.w	r2, r2, #1
 800d6a2:	601a      	str	r2, [r3, #0]
 800d6a4:	e000      	b.n	800d6a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	40010000 	.word	0x40010000
 800d6b8:	40010400 	.word	0x40010400
 800d6bc:	40014000 	.word	0x40014000
 800d6c0:	40014400 	.word	0x40014400
 800d6c4:	40014800 	.word	0x40014800
 800d6c8:	40000400 	.word	0x40000400
 800d6cc:	40000800 	.word	0x40000800
 800d6d0:	40000c00 	.word	0x40000c00
 800d6d4:	40001800 	.word	0x40001800
 800d6d8:	00010007 	.word	0x00010007

0800d6dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f003 0302 	and.w	r3, r3, #2
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d020      	beq.n	800d740 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f003 0302 	and.w	r3, r3, #2
 800d704:	2b00      	cmp	r3, #0
 800d706:	d01b      	beq.n	800d740 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f06f 0202 	mvn.w	r2, #2
 800d710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	699b      	ldr	r3, [r3, #24]
 800d71e:	f003 0303 	and.w	r3, r3, #3
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 faec 	bl	800dd04 <HAL_TIM_IC_CaptureCallback>
 800d72c:	e005      	b.n	800d73a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7f2 ff58 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 faef 	bl	800dd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	f003 0304 	and.w	r3, r3, #4
 800d746:	2b00      	cmp	r3, #0
 800d748:	d020      	beq.n	800d78c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f003 0304 	and.w	r3, r3, #4
 800d750:	2b00      	cmp	r3, #0
 800d752:	d01b      	beq.n	800d78c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f06f 0204 	mvn.w	r2, #4
 800d75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2202      	movs	r2, #2
 800d762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d003      	beq.n	800d77a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 fac6 	bl	800dd04 <HAL_TIM_IC_CaptureCallback>
 800d778:	e005      	b.n	800d786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7f2 ff32 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fac9 	bl	800dd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f003 0308 	and.w	r3, r3, #8
 800d792:	2b00      	cmp	r3, #0
 800d794:	d020      	beq.n	800d7d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f003 0308 	and.w	r3, r3, #8
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d01b      	beq.n	800d7d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f06f 0208 	mvn.w	r2, #8
 800d7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2204      	movs	r2, #4
 800d7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	f003 0303 	and.w	r3, r3, #3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 faa0 	bl	800dd04 <HAL_TIM_IC_CaptureCallback>
 800d7c4:	e005      	b.n	800d7d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7f2 ff0c 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 faa3 	bl	800dd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	f003 0310 	and.w	r3, r3, #16
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d020      	beq.n	800d824 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f003 0310 	and.w	r3, r3, #16
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d01b      	beq.n	800d824 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f06f 0210 	mvn.w	r2, #16
 800d7f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2208      	movs	r2, #8
 800d7fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	69db      	ldr	r3, [r3, #28]
 800d802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d806:	2b00      	cmp	r3, #0
 800d808:	d003      	beq.n	800d812 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fa7a 	bl	800dd04 <HAL_TIM_IC_CaptureCallback>
 800d810:	e005      	b.n	800d81e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7f2 fee6 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fa7d 	bl	800dd18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00c      	beq.n	800d848 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d007      	beq.n	800d848 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f06f 0201 	mvn.w	r2, #1
 800d840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7f4 ff86 	bl	8002754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d104      	bne.n	800d85c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00c      	beq.n	800d876 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d862:	2b00      	cmp	r3, #0
 800d864:	d007      	beq.n	800d876 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 ffbb 	bl	800e7ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00c      	beq.n	800d89a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d886:	2b00      	cmp	r3, #0
 800d888:	d007      	beq.n	800d89a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 ffb3 	bl	800e800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00c      	beq.n	800d8be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d007      	beq.n	800d8be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d8b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 fa37 	bl	800dd2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	f003 0320 	and.w	r3, r3, #32
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00c      	beq.n	800d8e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f003 0320 	and.w	r3, r3, #32
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d007      	beq.n	800d8e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f06f 0220 	mvn.w	r2, #32
 800d8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 ff7b 	bl	800e7d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d902:	2b01      	cmp	r3, #1
 800d904:	d101      	bne.n	800d90a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d906:	2302      	movs	r3, #2
 800d908:	e0ff      	b.n	800db0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2201      	movs	r2, #1
 800d90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b14      	cmp	r3, #20
 800d916:	f200 80f0 	bhi.w	800dafa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d91a:	a201      	add	r2, pc, #4	; (adr r2, 800d920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d920:	0800d975 	.word	0x0800d975
 800d924:	0800dafb 	.word	0x0800dafb
 800d928:	0800dafb 	.word	0x0800dafb
 800d92c:	0800dafb 	.word	0x0800dafb
 800d930:	0800d9b5 	.word	0x0800d9b5
 800d934:	0800dafb 	.word	0x0800dafb
 800d938:	0800dafb 	.word	0x0800dafb
 800d93c:	0800dafb 	.word	0x0800dafb
 800d940:	0800d9f7 	.word	0x0800d9f7
 800d944:	0800dafb 	.word	0x0800dafb
 800d948:	0800dafb 	.word	0x0800dafb
 800d94c:	0800dafb 	.word	0x0800dafb
 800d950:	0800da37 	.word	0x0800da37
 800d954:	0800dafb 	.word	0x0800dafb
 800d958:	0800dafb 	.word	0x0800dafb
 800d95c:	0800dafb 	.word	0x0800dafb
 800d960:	0800da79 	.word	0x0800da79
 800d964:	0800dafb 	.word	0x0800dafb
 800d968:	0800dafb 	.word	0x0800dafb
 800d96c:	0800dafb 	.word	0x0800dafb
 800d970:	0800dab9 	.word	0x0800dab9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68b9      	ldr	r1, [r7, #8]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 fa86 	bl	800de8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	699a      	ldr	r2, [r3, #24]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f042 0208 	orr.w	r2, r2, #8
 800d98e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	699a      	ldr	r2, [r3, #24]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f022 0204 	bic.w	r2, r2, #4
 800d99e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6999      	ldr	r1, [r3, #24]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	691a      	ldr	r2, [r3, #16]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	430a      	orrs	r2, r1
 800d9b0:	619a      	str	r2, [r3, #24]
      break;
 800d9b2:	e0a5      	b.n	800db00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 faf6 	bl	800dfac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	699a      	ldr	r2, [r3, #24]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	699a      	ldr	r2, [r3, #24]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6999      	ldr	r1, [r3, #24]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	021a      	lsls	r2, r3, #8
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	430a      	orrs	r2, r1
 800d9f2:	619a      	str	r2, [r3, #24]
      break;
 800d9f4:	e084      	b.n	800db00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68b9      	ldr	r1, [r7, #8]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f000 fb5f 	bl	800e0c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	69da      	ldr	r2, [r3, #28]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f042 0208 	orr.w	r2, r2, #8
 800da10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69da      	ldr	r2, [r3, #28]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f022 0204 	bic.w	r2, r2, #4
 800da20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	69d9      	ldr	r1, [r3, #28]
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	691a      	ldr	r2, [r3, #16]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	430a      	orrs	r2, r1
 800da32:	61da      	str	r2, [r3, #28]
      break;
 800da34:	e064      	b.n	800db00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68b9      	ldr	r1, [r7, #8]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f000 fbc7 	bl	800e1d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	69da      	ldr	r2, [r3, #28]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	69da      	ldr	r2, [r3, #28]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	69d9      	ldr	r1, [r3, #28]
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	021a      	lsls	r2, r3, #8
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	430a      	orrs	r2, r1
 800da74:	61da      	str	r2, [r3, #28]
      break;
 800da76:	e043      	b.n	800db00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 fc10 	bl	800e2a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f042 0208 	orr.w	r2, r2, #8
 800da92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f022 0204 	bic.w	r2, r2, #4
 800daa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	691a      	ldr	r2, [r3, #16]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	430a      	orrs	r2, r1
 800dab4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dab6:	e023      	b.n	800db00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	68b9      	ldr	r1, [r7, #8]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 fc54 	bl	800e36c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dad2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dae2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	021a      	lsls	r2, r3, #8
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	430a      	orrs	r2, r1
 800daf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800daf8:	e002      	b.n	800db00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dafa:	2301      	movs	r3, #1
 800dafc:	75fb      	strb	r3, [r7, #23]
      break;
 800dafe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800db08:	7dfb      	ldrb	r3, [r7, #23]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop

0800db14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db1e:	2300      	movs	r3, #0
 800db20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d101      	bne.n	800db30 <HAL_TIM_ConfigClockSource+0x1c>
 800db2c:	2302      	movs	r3, #2
 800db2e:	e0dc      	b.n	800dcea <HAL_TIM_ConfigClockSource+0x1d6>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2202      	movs	r2, #2
 800db3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	4b6a      	ldr	r3, [pc, #424]	; (800dcf4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800db4c:	4013      	ands	r3, r2
 800db4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a64      	ldr	r2, [pc, #400]	; (800dcf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db66:	4293      	cmp	r3, r2
 800db68:	f000 80a9 	beq.w	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800db6c:	4a62      	ldr	r2, [pc, #392]	; (800dcf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	f200 80ae 	bhi.w	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db74:	4a61      	ldr	r2, [pc, #388]	; (800dcfc <HAL_TIM_ConfigClockSource+0x1e8>)
 800db76:	4293      	cmp	r3, r2
 800db78:	f000 80a1 	beq.w	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800db7c:	4a5f      	ldr	r2, [pc, #380]	; (800dcfc <HAL_TIM_ConfigClockSource+0x1e8>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	f200 80a6 	bhi.w	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db84:	4a5e      	ldr	r2, [pc, #376]	; (800dd00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db86:	4293      	cmp	r3, r2
 800db88:	f000 8099 	beq.w	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800db8c:	4a5c      	ldr	r2, [pc, #368]	; (800dd00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	f200 809e 	bhi.w	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db98:	f000 8091 	beq.w	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800db9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dba0:	f200 8096 	bhi.w	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dba8:	f000 8089 	beq.w	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800dbac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbb0:	f200 808e 	bhi.w	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbb8:	d03e      	beq.n	800dc38 <HAL_TIM_ConfigClockSource+0x124>
 800dbba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbbe:	f200 8087 	bhi.w	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbc6:	f000 8086 	beq.w	800dcd6 <HAL_TIM_ConfigClockSource+0x1c2>
 800dbca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbce:	d87f      	bhi.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbd0:	2b70      	cmp	r3, #112	; 0x70
 800dbd2:	d01a      	beq.n	800dc0a <HAL_TIM_ConfigClockSource+0xf6>
 800dbd4:	2b70      	cmp	r3, #112	; 0x70
 800dbd6:	d87b      	bhi.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbd8:	2b60      	cmp	r3, #96	; 0x60
 800dbda:	d050      	beq.n	800dc7e <HAL_TIM_ConfigClockSource+0x16a>
 800dbdc:	2b60      	cmp	r3, #96	; 0x60
 800dbde:	d877      	bhi.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbe0:	2b50      	cmp	r3, #80	; 0x50
 800dbe2:	d03c      	beq.n	800dc5e <HAL_TIM_ConfigClockSource+0x14a>
 800dbe4:	2b50      	cmp	r3, #80	; 0x50
 800dbe6:	d873      	bhi.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbe8:	2b40      	cmp	r3, #64	; 0x40
 800dbea:	d058      	beq.n	800dc9e <HAL_TIM_ConfigClockSource+0x18a>
 800dbec:	2b40      	cmp	r3, #64	; 0x40
 800dbee:	d86f      	bhi.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbf0:	2b30      	cmp	r3, #48	; 0x30
 800dbf2:	d064      	beq.n	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800dbf4:	2b30      	cmp	r3, #48	; 0x30
 800dbf6:	d86b      	bhi.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbf8:	2b20      	cmp	r3, #32
 800dbfa:	d060      	beq.n	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800dbfc:	2b20      	cmp	r3, #32
 800dbfe:	d867      	bhi.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d05c      	beq.n	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800dc04:	2b10      	cmp	r3, #16
 800dc06:	d05a      	beq.n	800dcbe <HAL_TIM_ConfigClockSource+0x1aa>
 800dc08:	e062      	b.n	800dcd0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	6899      	ldr	r1, [r3, #8]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	685a      	ldr	r2, [r3, #4]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f000 fc8b 	bl	800e534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dc2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	609a      	str	r2, [r3, #8]
      break;
 800dc36:	e04f      	b.n	800dcd8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6818      	ldr	r0, [r3, #0]
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	6899      	ldr	r1, [r3, #8]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	f000 fc74 	bl	800e534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	689a      	ldr	r2, [r3, #8]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc5a:	609a      	str	r2, [r3, #8]
      break;
 800dc5c:	e03c      	b.n	800dcd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6818      	ldr	r0, [r3, #0]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	6859      	ldr	r1, [r3, #4]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	f000 fbe4 	bl	800e438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2150      	movs	r1, #80	; 0x50
 800dc76:	4618      	mov	r0, r3
 800dc78:	f000 fc3e 	bl	800e4f8 <TIM_ITRx_SetConfig>
      break;
 800dc7c:	e02c      	b.n	800dcd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6818      	ldr	r0, [r3, #0]
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	6859      	ldr	r1, [r3, #4]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f000 fc03 	bl	800e496 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2160      	movs	r1, #96	; 0x60
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 fc2e 	bl	800e4f8 <TIM_ITRx_SetConfig>
      break;
 800dc9c:	e01c      	b.n	800dcd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6818      	ldr	r0, [r3, #0]
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	6859      	ldr	r1, [r3, #4]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	f000 fbc4 	bl	800e438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2140      	movs	r1, #64	; 0x40
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 fc1e 	bl	800e4f8 <TIM_ITRx_SetConfig>
      break;
 800dcbc:	e00c      	b.n	800dcd8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4610      	mov	r0, r2
 800dcca:	f000 fc15 	bl	800e4f8 <TIM_ITRx_SetConfig>
      break;
 800dcce:	e003      	b.n	800dcd8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	73fb      	strb	r3, [r7, #15]
      break;
 800dcd4:	e000      	b.n	800dcd8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dcd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	ffceff88 	.word	0xffceff88
 800dcf8:	00100040 	.word	0x00100040
 800dcfc:	00100030 	.word	0x00100030
 800dd00:	00100020 	.word	0x00100020

0800dd04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a46      	ldr	r2, [pc, #280]	; (800de6c <TIM_Base_SetConfig+0x12c>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d013      	beq.n	800dd80 <TIM_Base_SetConfig+0x40>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd5e:	d00f      	beq.n	800dd80 <TIM_Base_SetConfig+0x40>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a43      	ldr	r2, [pc, #268]	; (800de70 <TIM_Base_SetConfig+0x130>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d00b      	beq.n	800dd80 <TIM_Base_SetConfig+0x40>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a42      	ldr	r2, [pc, #264]	; (800de74 <TIM_Base_SetConfig+0x134>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d007      	beq.n	800dd80 <TIM_Base_SetConfig+0x40>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a41      	ldr	r2, [pc, #260]	; (800de78 <TIM_Base_SetConfig+0x138>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d003      	beq.n	800dd80 <TIM_Base_SetConfig+0x40>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4a40      	ldr	r2, [pc, #256]	; (800de7c <TIM_Base_SetConfig+0x13c>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d108      	bne.n	800dd92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4a35      	ldr	r2, [pc, #212]	; (800de6c <TIM_Base_SetConfig+0x12c>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d01f      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dda0:	d01b      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4a32      	ldr	r2, [pc, #200]	; (800de70 <TIM_Base_SetConfig+0x130>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d017      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4a31      	ldr	r2, [pc, #196]	; (800de74 <TIM_Base_SetConfig+0x134>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d013      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a30      	ldr	r2, [pc, #192]	; (800de78 <TIM_Base_SetConfig+0x138>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d00f      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a2f      	ldr	r2, [pc, #188]	; (800de7c <TIM_Base_SetConfig+0x13c>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d00b      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a2e      	ldr	r2, [pc, #184]	; (800de80 <TIM_Base_SetConfig+0x140>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d007      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a2d      	ldr	r2, [pc, #180]	; (800de84 <TIM_Base_SetConfig+0x144>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d003      	beq.n	800ddda <TIM_Base_SetConfig+0x9a>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a2c      	ldr	r2, [pc, #176]	; (800de88 <TIM_Base_SetConfig+0x148>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d108      	bne.n	800ddec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dde0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a16      	ldr	r2, [pc, #88]	; (800de6c <TIM_Base_SetConfig+0x12c>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d00f      	beq.n	800de38 <TIM_Base_SetConfig+0xf8>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a18      	ldr	r2, [pc, #96]	; (800de7c <TIM_Base_SetConfig+0x13c>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d00b      	beq.n	800de38 <TIM_Base_SetConfig+0xf8>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4a17      	ldr	r2, [pc, #92]	; (800de80 <TIM_Base_SetConfig+0x140>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d007      	beq.n	800de38 <TIM_Base_SetConfig+0xf8>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a16      	ldr	r2, [pc, #88]	; (800de84 <TIM_Base_SetConfig+0x144>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d003      	beq.n	800de38 <TIM_Base_SetConfig+0xf8>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a15      	ldr	r2, [pc, #84]	; (800de88 <TIM_Base_SetConfig+0x148>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d103      	bne.n	800de40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	691a      	ldr	r2, [r3, #16]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	691b      	ldr	r3, [r3, #16]
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d105      	bne.n	800de5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	f023 0201 	bic.w	r2, r3, #1
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	611a      	str	r2, [r3, #16]
  }
}
 800de5e:	bf00      	nop
 800de60:	3714      	adds	r7, #20
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	40010000 	.word	0x40010000
 800de70:	40000400 	.word	0x40000400
 800de74:	40000800 	.word	0x40000800
 800de78:	40000c00 	.word	0x40000c00
 800de7c:	40010400 	.word	0x40010400
 800de80:	40014000 	.word	0x40014000
 800de84:	40014400 	.word	0x40014400
 800de88:	40014800 	.word	0x40014800

0800de8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a1b      	ldr	r3, [r3, #32]
 800dea0:	f023 0201 	bic.w	r2, r3, #1
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	4b37      	ldr	r3, [pc, #220]	; (800df94 <TIM_OC1_SetConfig+0x108>)
 800deb8:	4013      	ands	r3, r2
 800deba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f023 0303 	bic.w	r3, r3, #3
 800dec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4313      	orrs	r3, r2
 800decc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	f023 0302 	bic.w	r3, r3, #2
 800ded4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	697a      	ldr	r2, [r7, #20]
 800dedc:	4313      	orrs	r3, r2
 800dede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4a2d      	ldr	r2, [pc, #180]	; (800df98 <TIM_OC1_SetConfig+0x10c>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d00f      	beq.n	800df08 <TIM_OC1_SetConfig+0x7c>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4a2c      	ldr	r2, [pc, #176]	; (800df9c <TIM_OC1_SetConfig+0x110>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d00b      	beq.n	800df08 <TIM_OC1_SetConfig+0x7c>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	4a2b      	ldr	r2, [pc, #172]	; (800dfa0 <TIM_OC1_SetConfig+0x114>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d007      	beq.n	800df08 <TIM_OC1_SetConfig+0x7c>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a2a      	ldr	r2, [pc, #168]	; (800dfa4 <TIM_OC1_SetConfig+0x118>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d003      	beq.n	800df08 <TIM_OC1_SetConfig+0x7c>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4a29      	ldr	r2, [pc, #164]	; (800dfa8 <TIM_OC1_SetConfig+0x11c>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d10c      	bne.n	800df22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	f023 0308 	bic.w	r3, r3, #8
 800df0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	4313      	orrs	r3, r2
 800df18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	f023 0304 	bic.w	r3, r3, #4
 800df20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a1c      	ldr	r2, [pc, #112]	; (800df98 <TIM_OC1_SetConfig+0x10c>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d00f      	beq.n	800df4a <TIM_OC1_SetConfig+0xbe>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4a1b      	ldr	r2, [pc, #108]	; (800df9c <TIM_OC1_SetConfig+0x110>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d00b      	beq.n	800df4a <TIM_OC1_SetConfig+0xbe>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	4a1a      	ldr	r2, [pc, #104]	; (800dfa0 <TIM_OC1_SetConfig+0x114>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d007      	beq.n	800df4a <TIM_OC1_SetConfig+0xbe>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4a19      	ldr	r2, [pc, #100]	; (800dfa4 <TIM_OC1_SetConfig+0x118>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d003      	beq.n	800df4a <TIM_OC1_SetConfig+0xbe>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4a18      	ldr	r2, [pc, #96]	; (800dfa8 <TIM_OC1_SetConfig+0x11c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d111      	bne.n	800df6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	695b      	ldr	r3, [r3, #20]
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	4313      	orrs	r3, r2
 800df62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	4313      	orrs	r3, r2
 800df6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	685a      	ldr	r2, [r3, #4]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	697a      	ldr	r2, [r7, #20]
 800df86:	621a      	str	r2, [r3, #32]
}
 800df88:	bf00      	nop
 800df8a:	371c      	adds	r7, #28
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr
 800df94:	fffeff8f 	.word	0xfffeff8f
 800df98:	40010000 	.word	0x40010000
 800df9c:	40010400 	.word	0x40010400
 800dfa0:	40014000 	.word	0x40014000
 800dfa4:	40014400 	.word	0x40014400
 800dfa8:	40014800 	.word	0x40014800

0800dfac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b087      	sub	sp, #28
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a1b      	ldr	r3, [r3, #32]
 800dfc0:	f023 0210 	bic.w	r2, r3, #16
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	4b34      	ldr	r3, [pc, #208]	; (800e0a8 <TIM_OC2_SetConfig+0xfc>)
 800dfd8:	4013      	ands	r3, r2
 800dfda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	021b      	lsls	r3, r3, #8
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f023 0320 	bic.w	r3, r3, #32
 800dff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	011b      	lsls	r3, r3, #4
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	4313      	orrs	r3, r2
 800e002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a29      	ldr	r2, [pc, #164]	; (800e0ac <TIM_OC2_SetConfig+0x100>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d003      	beq.n	800e014 <TIM_OC2_SetConfig+0x68>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a28      	ldr	r2, [pc, #160]	; (800e0b0 <TIM_OC2_SetConfig+0x104>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d10d      	bne.n	800e030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e01a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	011b      	lsls	r3, r3, #4
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	4313      	orrs	r3, r2
 800e026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e02e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a1e      	ldr	r2, [pc, #120]	; (800e0ac <TIM_OC2_SetConfig+0x100>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d00f      	beq.n	800e058 <TIM_OC2_SetConfig+0xac>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a1d      	ldr	r2, [pc, #116]	; (800e0b0 <TIM_OC2_SetConfig+0x104>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d00b      	beq.n	800e058 <TIM_OC2_SetConfig+0xac>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a1c      	ldr	r2, [pc, #112]	; (800e0b4 <TIM_OC2_SetConfig+0x108>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d007      	beq.n	800e058 <TIM_OC2_SetConfig+0xac>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a1b      	ldr	r2, [pc, #108]	; (800e0b8 <TIM_OC2_SetConfig+0x10c>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d003      	beq.n	800e058 <TIM_OC2_SetConfig+0xac>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a1a      	ldr	r2, [pc, #104]	; (800e0bc <TIM_OC2_SetConfig+0x110>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d113      	bne.n	800e080 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e05e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	4313      	orrs	r3, r2
 800e072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	693a      	ldr	r2, [r7, #16]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	693a      	ldr	r2, [r7, #16]
 800e084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	621a      	str	r2, [r3, #32]
}
 800e09a:	bf00      	nop
 800e09c:	371c      	adds	r7, #28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	feff8fff 	.word	0xfeff8fff
 800e0ac:	40010000 	.word	0x40010000
 800e0b0:	40010400 	.word	0x40010400
 800e0b4:	40014000 	.word	0x40014000
 800e0b8:	40014400 	.word	0x40014400
 800e0bc:	40014800 	.word	0x40014800

0800e0c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b087      	sub	sp, #28
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a1b      	ldr	r3, [r3, #32]
 800e0d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	69db      	ldr	r3, [r3, #28]
 800e0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	4b33      	ldr	r3, [pc, #204]	; (800e1b8 <TIM_OC3_SetConfig+0xf8>)
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f023 0303 	bic.w	r3, r3, #3
 800e0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	021b      	lsls	r3, r3, #8
 800e110:	697a      	ldr	r2, [r7, #20]
 800e112:	4313      	orrs	r3, r2
 800e114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4a28      	ldr	r2, [pc, #160]	; (800e1bc <TIM_OC3_SetConfig+0xfc>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d003      	beq.n	800e126 <TIM_OC3_SetConfig+0x66>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a27      	ldr	r2, [pc, #156]	; (800e1c0 <TIM_OC3_SetConfig+0x100>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d10d      	bne.n	800e142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e12c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	021b      	lsls	r3, r3, #8
 800e134:	697a      	ldr	r2, [r7, #20]
 800e136:	4313      	orrs	r3, r2
 800e138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4a1d      	ldr	r2, [pc, #116]	; (800e1bc <TIM_OC3_SetConfig+0xfc>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d00f      	beq.n	800e16a <TIM_OC3_SetConfig+0xaa>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4a1c      	ldr	r2, [pc, #112]	; (800e1c0 <TIM_OC3_SetConfig+0x100>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d00b      	beq.n	800e16a <TIM_OC3_SetConfig+0xaa>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4a1b      	ldr	r2, [pc, #108]	; (800e1c4 <TIM_OC3_SetConfig+0x104>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d007      	beq.n	800e16a <TIM_OC3_SetConfig+0xaa>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4a1a      	ldr	r2, [pc, #104]	; (800e1c8 <TIM_OC3_SetConfig+0x108>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d003      	beq.n	800e16a <TIM_OC3_SetConfig+0xaa>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	4a19      	ldr	r2, [pc, #100]	; (800e1cc <TIM_OC3_SetConfig+0x10c>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d113      	bne.n	800e192 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	011b      	lsls	r3, r3, #4
 800e180:	693a      	ldr	r2, [r7, #16]
 800e182:	4313      	orrs	r3, r2
 800e184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	699b      	ldr	r3, [r3, #24]
 800e18a:	011b      	lsls	r3, r3, #4
 800e18c:	693a      	ldr	r2, [r7, #16]
 800e18e:	4313      	orrs	r3, r2
 800e190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	693a      	ldr	r2, [r7, #16]
 800e196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	697a      	ldr	r2, [r7, #20]
 800e1aa:	621a      	str	r2, [r3, #32]
}
 800e1ac:	bf00      	nop
 800e1ae:	371c      	adds	r7, #28
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	fffeff8f 	.word	0xfffeff8f
 800e1bc:	40010000 	.word	0x40010000
 800e1c0:	40010400 	.word	0x40010400
 800e1c4:	40014000 	.word	0x40014000
 800e1c8:	40014400 	.word	0x40014400
 800e1cc:	40014800 	.word	0x40014800

0800e1d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	69db      	ldr	r3, [r3, #28]
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	4b24      	ldr	r3, [pc, #144]	; (800e28c <TIM_OC4_SetConfig+0xbc>)
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	021b      	lsls	r3, r3, #8
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	4313      	orrs	r3, r2
 800e212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e21a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	031b      	lsls	r3, r3, #12
 800e222:	693a      	ldr	r2, [r7, #16]
 800e224:	4313      	orrs	r3, r2
 800e226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4a19      	ldr	r2, [pc, #100]	; (800e290 <TIM_OC4_SetConfig+0xc0>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d00f      	beq.n	800e250 <TIM_OC4_SetConfig+0x80>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a18      	ldr	r2, [pc, #96]	; (800e294 <TIM_OC4_SetConfig+0xc4>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d00b      	beq.n	800e250 <TIM_OC4_SetConfig+0x80>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a17      	ldr	r2, [pc, #92]	; (800e298 <TIM_OC4_SetConfig+0xc8>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d007      	beq.n	800e250 <TIM_OC4_SetConfig+0x80>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4a16      	ldr	r2, [pc, #88]	; (800e29c <TIM_OC4_SetConfig+0xcc>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d003      	beq.n	800e250 <TIM_OC4_SetConfig+0x80>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a15      	ldr	r2, [pc, #84]	; (800e2a0 <TIM_OC4_SetConfig+0xd0>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d109      	bne.n	800e264 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	695b      	ldr	r3, [r3, #20]
 800e25c:	019b      	lsls	r3, r3, #6
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	4313      	orrs	r3, r2
 800e262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	621a      	str	r2, [r3, #32]
}
 800e27e:	bf00      	nop
 800e280:	371c      	adds	r7, #28
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	feff8fff 	.word	0xfeff8fff
 800e290:	40010000 	.word	0x40010000
 800e294:	40010400 	.word	0x40010400
 800e298:	40014000 	.word	0x40014000
 800e29c:	40014400 	.word	0x40014400
 800e2a0:	40014800 	.word	0x40014800

0800e2a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	4b21      	ldr	r3, [pc, #132]	; (800e354 <TIM_OC5_SetConfig+0xb0>)
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e2e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	041b      	lsls	r3, r3, #16
 800e2ec:	693a      	ldr	r2, [r7, #16]
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a18      	ldr	r2, [pc, #96]	; (800e358 <TIM_OC5_SetConfig+0xb4>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d00f      	beq.n	800e31a <TIM_OC5_SetConfig+0x76>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4a17      	ldr	r2, [pc, #92]	; (800e35c <TIM_OC5_SetConfig+0xb8>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d00b      	beq.n	800e31a <TIM_OC5_SetConfig+0x76>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a16      	ldr	r2, [pc, #88]	; (800e360 <TIM_OC5_SetConfig+0xbc>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d007      	beq.n	800e31a <TIM_OC5_SetConfig+0x76>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	4a15      	ldr	r2, [pc, #84]	; (800e364 <TIM_OC5_SetConfig+0xc0>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d003      	beq.n	800e31a <TIM_OC5_SetConfig+0x76>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	4a14      	ldr	r2, [pc, #80]	; (800e368 <TIM_OC5_SetConfig+0xc4>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d109      	bne.n	800e32e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e320:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	695b      	ldr	r3, [r3, #20]
 800e326:	021b      	lsls	r3, r3, #8
 800e328:	697a      	ldr	r2, [r7, #20]
 800e32a:	4313      	orrs	r3, r2
 800e32c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	697a      	ldr	r2, [r7, #20]
 800e332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	685a      	ldr	r2, [r3, #4]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	621a      	str	r2, [r3, #32]
}
 800e348:	bf00      	nop
 800e34a:	371c      	adds	r7, #28
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr
 800e354:	fffeff8f 	.word	0xfffeff8f
 800e358:	40010000 	.word	0x40010000
 800e35c:	40010400 	.word	0x40010400
 800e360:	40014000 	.word	0x40014000
 800e364:	40014400 	.word	0x40014400
 800e368:	40014800 	.word	0x40014800

0800e36c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b087      	sub	sp, #28
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a1b      	ldr	r3, [r3, #32]
 800e380:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	4b22      	ldr	r3, [pc, #136]	; (800e420 <TIM_OC6_SetConfig+0xb4>)
 800e398:	4013      	ands	r3, r2
 800e39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	021b      	lsls	r3, r3, #8
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e3ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	051b      	lsls	r3, r3, #20
 800e3b6:	693a      	ldr	r2, [r7, #16]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4a19      	ldr	r2, [pc, #100]	; (800e424 <TIM_OC6_SetConfig+0xb8>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d00f      	beq.n	800e3e4 <TIM_OC6_SetConfig+0x78>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4a18      	ldr	r2, [pc, #96]	; (800e428 <TIM_OC6_SetConfig+0xbc>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d00b      	beq.n	800e3e4 <TIM_OC6_SetConfig+0x78>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a17      	ldr	r2, [pc, #92]	; (800e42c <TIM_OC6_SetConfig+0xc0>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d007      	beq.n	800e3e4 <TIM_OC6_SetConfig+0x78>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	4a16      	ldr	r2, [pc, #88]	; (800e430 <TIM_OC6_SetConfig+0xc4>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d003      	beq.n	800e3e4 <TIM_OC6_SetConfig+0x78>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a15      	ldr	r2, [pc, #84]	; (800e434 <TIM_OC6_SetConfig+0xc8>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d109      	bne.n	800e3f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	029b      	lsls	r3, r3, #10
 800e3f2:	697a      	ldr	r2, [r7, #20]
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	693a      	ldr	r2, [r7, #16]
 800e410:	621a      	str	r2, [r3, #32]
}
 800e412:	bf00      	nop
 800e414:	371c      	adds	r7, #28
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	feff8fff 	.word	0xfeff8fff
 800e424:	40010000 	.word	0x40010000
 800e428:	40010400 	.word	0x40010400
 800e42c:	40014000 	.word	0x40014000
 800e430:	40014400 	.word	0x40014400
 800e434:	40014800 	.word	0x40014800

0800e438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e438:	b480      	push	{r7}
 800e43a:	b087      	sub	sp, #28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6a1b      	ldr	r3, [r3, #32]
 800e448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6a1b      	ldr	r3, [r3, #32]
 800e44e:	f023 0201 	bic.w	r2, r3, #1
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	011b      	lsls	r3, r3, #4
 800e468:	693a      	ldr	r2, [r7, #16]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f023 030a 	bic.w	r3, r3, #10
 800e474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e476:	697a      	ldr	r2, [r7, #20]
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	693a      	ldr	r2, [r7, #16]
 800e482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	621a      	str	r2, [r3, #32]
}
 800e48a:	bf00      	nop
 800e48c:	371c      	adds	r7, #28
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e496:	b480      	push	{r7}
 800e498:	b087      	sub	sp, #28
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	60f8      	str	r0, [r7, #12]
 800e49e:	60b9      	str	r1, [r7, #8]
 800e4a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6a1b      	ldr	r3, [r3, #32]
 800e4ac:	f023 0210 	bic.w	r2, r3, #16
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e4c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	031b      	lsls	r3, r3, #12
 800e4c6:	693a      	ldr	r2, [r7, #16]
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e4d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	011b      	lsls	r3, r3, #4
 800e4d8:	697a      	ldr	r2, [r7, #20]
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	697a      	ldr	r2, [r7, #20]
 800e4e8:	621a      	str	r2, [r3, #32]
}
 800e4ea:	bf00      	nop
 800e4ec:	371c      	adds	r7, #28
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
	...

0800e4f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	4b09      	ldr	r3, [pc, #36]	; (800e530 <TIM_ITRx_SetConfig+0x38>)
 800e50c:	4013      	ands	r3, r2
 800e50e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e510:	683a      	ldr	r2, [r7, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	4313      	orrs	r3, r2
 800e516:	f043 0307 	orr.w	r3, r3, #7
 800e51a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	609a      	str	r2, [r3, #8]
}
 800e522:	bf00      	nop
 800e524:	3714      	adds	r7, #20
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	ffcfff8f 	.word	0xffcfff8f

0800e534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e534:	b480      	push	{r7}
 800e536:	b087      	sub	sp, #28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
 800e540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e54e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	021a      	lsls	r2, r3, #8
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	431a      	orrs	r2, r3
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	4313      	orrs	r3, r2
 800e560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	697a      	ldr	r2, [r7, #20]
 800e566:	609a      	str	r2, [r3, #8]
}
 800e568:	bf00      	nop
 800e56a:	371c      	adds	r7, #28
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr

0800e574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e574:	b480      	push	{r7}
 800e576:	b087      	sub	sp, #28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f003 031f 	and.w	r3, r3, #31
 800e586:	2201      	movs	r2, #1
 800e588:	fa02 f303 	lsl.w	r3, r2, r3
 800e58c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6a1a      	ldr	r2, [r3, #32]
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	43db      	mvns	r3, r3
 800e596:	401a      	ands	r2, r3
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6a1a      	ldr	r2, [r3, #32]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	f003 031f 	and.w	r3, r3, #31
 800e5a6:	6879      	ldr	r1, [r7, #4]
 800e5a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ac:	431a      	orrs	r2, r3
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	621a      	str	r2, [r3, #32]
}
 800e5b2:	bf00      	nop
 800e5b4:	371c      	adds	r7, #28
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
	...

0800e5c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d101      	bne.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	e06d      	b.n	800e6b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2202      	movs	r2, #2
 800e5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a30      	ldr	r2, [pc, #192]	; (800e6c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d004      	beq.n	800e60c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4a2f      	ldr	r2, [pc, #188]	; (800e6c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	d108      	bne.n	800e61e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	4313      	orrs	r3, r2
 800e62e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a20      	ldr	r2, [pc, #128]	; (800e6c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d022      	beq.n	800e688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e64a:	d01d      	beq.n	800e688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a1d      	ldr	r2, [pc, #116]	; (800e6c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d018      	beq.n	800e688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a1c      	ldr	r2, [pc, #112]	; (800e6cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d013      	beq.n	800e688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a1a      	ldr	r2, [pc, #104]	; (800e6d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d00e      	beq.n	800e688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a15      	ldr	r2, [pc, #84]	; (800e6c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d009      	beq.n	800e688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a16      	ldr	r2, [pc, #88]	; (800e6d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d004      	beq.n	800e688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a15      	ldr	r2, [pc, #84]	; (800e6d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d10c      	bne.n	800e6a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e68e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	4313      	orrs	r3, r2
 800e698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68ba      	ldr	r2, [r7, #8]
 800e6a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	40010000 	.word	0x40010000
 800e6c4:	40010400 	.word	0x40010400
 800e6c8:	40000400 	.word	0x40000400
 800e6cc:	40000800 	.word	0x40000800
 800e6d0:	40000c00 	.word	0x40000c00
 800e6d4:	40001800 	.word	0x40001800
 800e6d8:	40014000 	.word	0x40014000

0800e6dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d101      	bne.n	800e6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	e065      	b.n	800e7c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	4313      	orrs	r3, r2
 800e71a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	4313      	orrs	r3, r2
 800e728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4313      	orrs	r3, r2
 800e736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	4313      	orrs	r3, r2
 800e744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	4313      	orrs	r3, r2
 800e752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75e:	4313      	orrs	r3, r2
 800e760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	699b      	ldr	r3, [r3, #24]
 800e76c:	041b      	lsls	r3, r3, #16
 800e76e:	4313      	orrs	r3, r2
 800e770:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a16      	ldr	r2, [pc, #88]	; (800e7d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d004      	beq.n	800e786 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a14      	ldr	r2, [pc, #80]	; (800e7d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d115      	bne.n	800e7b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e790:	051b      	lsls	r3, r3, #20
 800e792:	4313      	orrs	r3, r2
 800e794:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	69db      	ldr	r3, [r3, #28]
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	6a1b      	ldr	r3, [r3, #32]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3714      	adds	r7, #20
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	40010000 	.word	0x40010000
 800e7d4:	40010400 	.word	0x40010400

0800e7d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7e0:	bf00      	nop
 800e7e2:	370c      	adds	r7, #12
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e7f4:	bf00      	nop
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e808:	bf00      	nop
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	e042      	b.n	800e8ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d106      	bne.n	800e83e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7f4 fb8f 	bl	8002f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2224      	movs	r2, #36	; 0x24
 800e842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f022 0201 	bic.w	r2, r2, #1
 800e854:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d002      	beq.n	800e864 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f001 fb0c 	bl	800fe7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 fda1 	bl	800f3ac <UART_SetConfig>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d101      	bne.n	800e874 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	e01b      	b.n	800e8ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	689a      	ldr	r2, [r3, #8]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f042 0201 	orr.w	r2, r2, #1
 800e8a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f001 fb8b 	bl	800ffc0 <UART_CheckIdleState>
 800e8aa:	4603      	mov	r3, r0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08a      	sub	sp, #40	; 0x28
 800e8b8:	af02      	add	r7, sp, #8
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8ca:	2b20      	cmp	r3, #32
 800e8cc:	d17b      	bne.n	800e9c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <HAL_UART_Transmit+0x26>
 800e8d4:	88fb      	ldrh	r3, [r7, #6]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d101      	bne.n	800e8de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e074      	b.n	800e9c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2221      	movs	r2, #33	; 0x21
 800e8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e8ee:	f7f4 fe6f 	bl	80035d0 <HAL_GetTick>
 800e8f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	88fa      	ldrh	r2, [r7, #6]
 800e8f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	88fa      	ldrh	r2, [r7, #6]
 800e900:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e90c:	d108      	bne.n	800e920 <HAL_UART_Transmit+0x6c>
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d104      	bne.n	800e920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	61bb      	str	r3, [r7, #24]
 800e91e:	e003      	b.n	800e928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e924:	2300      	movs	r3, #0
 800e926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e928:	e030      	b.n	800e98c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2200      	movs	r2, #0
 800e932:	2180      	movs	r1, #128	; 0x80
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f001 fbed 	bl	8010114 <UART_WaitOnFlagUntilTimeout>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d005      	beq.n	800e94c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2220      	movs	r2, #32
 800e944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e948:	2303      	movs	r3, #3
 800e94a:	e03d      	b.n	800e9c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10b      	bne.n	800e96a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	461a      	mov	r2, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e960:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	3302      	adds	r3, #2
 800e966:	61bb      	str	r3, [r7, #24]
 800e968:	e007      	b.n	800e97a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	781a      	ldrb	r2, [r3, #0]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	3301      	adds	r3, #1
 800e978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e980:	b29b      	uxth	r3, r3
 800e982:	3b01      	subs	r3, #1
 800e984:	b29a      	uxth	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e992:	b29b      	uxth	r3, r3
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1c8      	bne.n	800e92a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	2140      	movs	r1, #64	; 0x40
 800e9a2:	68f8      	ldr	r0, [r7, #12]
 800e9a4:	f001 fbb6 	bl	8010114 <UART_WaitOnFlagUntilTimeout>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d005      	beq.n	800e9ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2220      	movs	r2, #32
 800e9b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	e006      	b.n	800e9c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2220      	movs	r2, #32
 800e9be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	e000      	b.n	800e9c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e9c6:	2302      	movs	r3, #2
  }
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3720      	adds	r7, #32
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b08a      	sub	sp, #40	; 0x28
 800e9d4:	af02      	add	r7, sp, #8
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	603b      	str	r3, [r7, #0]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9e6:	2b20      	cmp	r3, #32
 800e9e8:	f040 80b5 	bne.w	800eb56 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <HAL_UART_Receive+0x28>
 800e9f2:	88fb      	ldrh	r3, [r7, #6]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d101      	bne.n	800e9fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e0ad      	b.n	800eb58 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2222      	movs	r2, #34	; 0x22
 800ea08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea12:	f7f4 fddd 	bl	80035d0 <HAL_GetTick>
 800ea16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	88fa      	ldrh	r2, [r7, #6]
 800ea1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	88fa      	ldrh	r2, [r7, #6]
 800ea24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea30:	d10e      	bne.n	800ea50 <HAL_UART_Receive+0x80>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	691b      	ldr	r3, [r3, #16]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d105      	bne.n	800ea46 <HAL_UART_Receive+0x76>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ea40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea44:	e02d      	b.n	800eaa2 <HAL_UART_Receive+0xd2>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	22ff      	movs	r2, #255	; 0xff
 800ea4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea4e:	e028      	b.n	800eaa2 <HAL_UART_Receive+0xd2>
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10d      	bne.n	800ea74 <HAL_UART_Receive+0xa4>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d104      	bne.n	800ea6a <HAL_UART_Receive+0x9a>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	22ff      	movs	r2, #255	; 0xff
 800ea64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea68:	e01b      	b.n	800eaa2 <HAL_UART_Receive+0xd2>
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	227f      	movs	r2, #127	; 0x7f
 800ea6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea72:	e016      	b.n	800eaa2 <HAL_UART_Receive+0xd2>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea7c:	d10d      	bne.n	800ea9a <HAL_UART_Receive+0xca>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d104      	bne.n	800ea90 <HAL_UART_Receive+0xc0>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	227f      	movs	r2, #127	; 0x7f
 800ea8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea8e:	e008      	b.n	800eaa2 <HAL_UART_Receive+0xd2>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	223f      	movs	r2, #63	; 0x3f
 800ea94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea98:	e003      	b.n	800eaa2 <HAL_UART_Receive+0xd2>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eaa8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eab2:	d108      	bne.n	800eac6 <HAL_UART_Receive+0xf6>
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d104      	bne.n	800eac6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800eabc:	2300      	movs	r3, #0
 800eabe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	61bb      	str	r3, [r7, #24]
 800eac4:	e003      	b.n	800eace <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800eace:	e036      	b.n	800eb3e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	9300      	str	r3, [sp, #0]
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	2200      	movs	r2, #0
 800ead8:	2120      	movs	r1, #32
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f001 fb1a 	bl	8010114 <UART_WaitOnFlagUntilTimeout>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d005      	beq.n	800eaf2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2220      	movs	r2, #32
 800eaea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e032      	b.n	800eb58 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d10c      	bne.n	800eb12 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	8a7b      	ldrh	r3, [r7, #18]
 800eb02:	4013      	ands	r3, r2
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	3302      	adds	r3, #2
 800eb0e:	61bb      	str	r3, [r7, #24]
 800eb10:	e00c      	b.n	800eb2c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	8a7b      	ldrh	r3, [r7, #18]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	4013      	ands	r3, r2
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	3b01      	subs	r3, #1
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1c2      	bne.n	800ead0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2220      	movs	r2, #32
 800eb4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800eb52:	2300      	movs	r3, #0
 800eb54:	e000      	b.n	800eb58 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800eb56:	2302      	movs	r3, #2
  }
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3720      	adds	r7, #32
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b08a      	sub	sp, #40	; 0x28
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb74:	2b20      	cmp	r3, #32
 800eb76:	d137      	bne.n	800ebe8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d002      	beq.n	800eb84 <HAL_UART_Receive_IT+0x24>
 800eb7e:	88fb      	ldrh	r3, [r7, #6]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	e030      	b.n	800ebea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a18      	ldr	r2, [pc, #96]	; (800ebf4 <HAL_UART_Receive_IT+0x94>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d01f      	beq.n	800ebd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d018      	beq.n	800ebd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	e853 3f00 	ldrex	r3, [r3]
 800ebb2:	613b      	str	r3, [r7, #16]
   return(result);
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ebba:	627b      	str	r3, [r7, #36]	; 0x24
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	623b      	str	r3, [r7, #32]
 800ebc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc8:	69f9      	ldr	r1, [r7, #28]
 800ebca:	6a3a      	ldr	r2, [r7, #32]
 800ebcc:	e841 2300 	strex	r3, r2, [r1]
 800ebd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1e6      	bne.n	800eba6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ebd8:	88fb      	ldrh	r3, [r7, #6]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	68b9      	ldr	r1, [r7, #8]
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f001 fb06 	bl	80101f0 <UART_Start_Receive_IT>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	e000      	b.n	800ebea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ebe8:	2302      	movs	r3, #2
  }
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3728      	adds	r7, #40	; 0x28
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	58000c00 	.word	0x58000c00

0800ebf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b0ba      	sub	sp, #232	; 0xe8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	69db      	ldr	r3, [r3, #28]
 800ec06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec22:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec26:	4013      	ands	r3, r2
 800ec28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ec2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d11b      	bne.n	800ec6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec38:	f003 0320 	and.w	r3, r3, #32
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d015      	beq.n	800ec6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec44:	f003 0320 	and.w	r3, r3, #32
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d105      	bne.n	800ec58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d009      	beq.n	800ec6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 8377 	beq.w	800f350 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	4798      	blx	r3
      }
      return;
 800ec6a:	e371      	b.n	800f350 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ec6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 8123 	beq.w	800eebc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ec76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ec7a:	4b8d      	ldr	r3, [pc, #564]	; (800eeb0 <HAL_UART_IRQHandler+0x2b8>)
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d106      	bne.n	800ec90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ec82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ec86:	4b8b      	ldr	r3, [pc, #556]	; (800eeb4 <HAL_UART_IRQHandler+0x2bc>)
 800ec88:	4013      	ands	r3, r2
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f000 8116 	beq.w	800eebc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec94:	f003 0301 	and.w	r3, r3, #1
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d011      	beq.n	800ecc0 <HAL_UART_IRQHandler+0xc8>
 800ec9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00b      	beq.n	800ecc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2201      	movs	r2, #1
 800ecae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecb6:	f043 0201 	orr.w	r2, r3, #1
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecc4:	f003 0302 	and.w	r3, r3, #2
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d011      	beq.n	800ecf0 <HAL_UART_IRQHandler+0xf8>
 800eccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecd0:	f003 0301 	and.w	r3, r3, #1
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00b      	beq.n	800ecf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2202      	movs	r2, #2
 800ecde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ece6:	f043 0204 	orr.w	r2, r3, #4
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d011      	beq.n	800ed20 <HAL_UART_IRQHandler+0x128>
 800ecfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed00:	f003 0301 	and.w	r3, r3, #1
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00b      	beq.n	800ed20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2204      	movs	r2, #4
 800ed0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed16:	f043 0202 	orr.w	r2, r3, #2
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed24:	f003 0308 	and.w	r3, r3, #8
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d017      	beq.n	800ed5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed30:	f003 0320 	and.w	r3, r3, #32
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d105      	bne.n	800ed44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ed38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed3c:	4b5c      	ldr	r3, [pc, #368]	; (800eeb0 <HAL_UART_IRQHandler+0x2b8>)
 800ed3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00b      	beq.n	800ed5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2208      	movs	r2, #8
 800ed4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed52:	f043 0208 	orr.w	r2, r3, #8
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ed5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d012      	beq.n	800ed8e <HAL_UART_IRQHandler+0x196>
 800ed68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00c      	beq.n	800ed8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed84:	f043 0220 	orr.w	r2, r3, #32
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f000 82dd 	beq.w	800f354 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed9e:	f003 0320 	and.w	r3, r3, #32
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d013      	beq.n	800edce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eda6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edaa:	f003 0320 	and.w	r3, r3, #32
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800edb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d007      	beq.n	800edce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d003      	beq.n	800edce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede2:	2b40      	cmp	r3, #64	; 0x40
 800ede4:	d005      	beq.n	800edf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ede6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800edea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d054      	beq.n	800ee9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f001 fb1e 	bl	8010434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee02:	2b40      	cmp	r3, #64	; 0x40
 800ee04:	d146      	bne.n	800ee94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	3308      	adds	r3, #8
 800ee0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee14:	e853 3f00 	ldrex	r3, [r3]
 800ee18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ee1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3308      	adds	r3, #8
 800ee2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ee32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ee36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee42:	e841 2300 	strex	r3, r2, [r1]
 800ee46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ee4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1d9      	bne.n	800ee06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d017      	beq.n	800ee8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee62:	4a15      	ldr	r2, [pc, #84]	; (800eeb8 <HAL_UART_IRQHandler+0x2c0>)
 800ee64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7f7 fdbb 	bl	80069e8 <HAL_DMA_Abort_IT>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d019      	beq.n	800eeac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ee86:	4610      	mov	r0, r2
 800ee88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee8a:	e00f      	b.n	800eeac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fa77 	bl	800f380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee92:	e00b      	b.n	800eeac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fa73 	bl	800f380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee9a:	e007      	b.n	800eeac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 fa6f 	bl	800f380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800eeaa:	e253      	b.n	800f354 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeac:	bf00      	nop
    return;
 800eeae:	e251      	b.n	800f354 <HAL_UART_IRQHandler+0x75c>
 800eeb0:	10000001 	.word	0x10000001
 800eeb4:	04000120 	.word	0x04000120
 800eeb8:	08010501 	.word	0x08010501

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	f040 81e7 	bne.w	800f294 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eeca:	f003 0310 	and.w	r3, r3, #16
 800eece:	2b00      	cmp	r3, #0
 800eed0:	f000 81e0 	beq.w	800f294 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eed8:	f003 0310 	and.w	r3, r3, #16
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f000 81d9 	beq.w	800f294 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2210      	movs	r2, #16
 800eee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef4:	2b40      	cmp	r3, #64	; 0x40
 800eef6:	f040 8151 	bne.w	800f19c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a96      	ldr	r2, [pc, #600]	; (800f15c <HAL_UART_IRQHandler+0x564>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d068      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a93      	ldr	r2, [pc, #588]	; (800f160 <HAL_UART_IRQHandler+0x568>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d061      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a91      	ldr	r2, [pc, #580]	; (800f164 <HAL_UART_IRQHandler+0x56c>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d05a      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a8e      	ldr	r2, [pc, #568]	; (800f168 <HAL_UART_IRQHandler+0x570>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d053      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4a8c      	ldr	r2, [pc, #560]	; (800f16c <HAL_UART_IRQHandler+0x574>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d04c      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a89      	ldr	r2, [pc, #548]	; (800f170 <HAL_UART_IRQHandler+0x578>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d045      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4a87      	ldr	r2, [pc, #540]	; (800f174 <HAL_UART_IRQHandler+0x57c>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d03e      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a84      	ldr	r2, [pc, #528]	; (800f178 <HAL_UART_IRQHandler+0x580>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d037      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a82      	ldr	r2, [pc, #520]	; (800f17c <HAL_UART_IRQHandler+0x584>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d030      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a7f      	ldr	r2, [pc, #508]	; (800f180 <HAL_UART_IRQHandler+0x588>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d029      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a7d      	ldr	r2, [pc, #500]	; (800f184 <HAL_UART_IRQHandler+0x58c>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d022      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a7a      	ldr	r2, [pc, #488]	; (800f188 <HAL_UART_IRQHandler+0x590>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d01b      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a78      	ldr	r2, [pc, #480]	; (800f18c <HAL_UART_IRQHandler+0x594>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d014      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a75      	ldr	r2, [pc, #468]	; (800f190 <HAL_UART_IRQHandler+0x598>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d00d      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a73      	ldr	r2, [pc, #460]	; (800f194 <HAL_UART_IRQHandler+0x59c>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d006      	beq.n	800efda <HAL_UART_IRQHandler+0x3e2>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a70      	ldr	r2, [pc, #448]	; (800f198 <HAL_UART_IRQHandler+0x5a0>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d106      	bne.n	800efe8 <HAL_UART_IRQHandler+0x3f0>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	e005      	b.n	800eff4 <HAL_UART_IRQHandler+0x3fc>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800effc:	2b00      	cmp	r3, #0
 800effe:	f000 81ab 	beq.w	800f358 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f008:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f00c:	429a      	cmp	r2, r3
 800f00e:	f080 81a3 	bcs.w	800f358 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f022:	69db      	ldr	r3, [r3, #28]
 800f024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f028:	f000 8087 	beq.w	800f13a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f038:	e853 3f00 	ldrex	r3, [r3]
 800f03c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	461a      	mov	r2, r3
 800f052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f05a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f062:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f066:	e841 2300 	strex	r3, r2, [r1]
 800f06a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f06e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1da      	bne.n	800f02c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	3308      	adds	r3, #8
 800f07c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f080:	e853 3f00 	ldrex	r3, [r3]
 800f084:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f088:	f023 0301 	bic.w	r3, r3, #1
 800f08c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	3308      	adds	r3, #8
 800f096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f09a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f09e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f0a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f0a6:	e841 2300 	strex	r3, r2, [r1]
 800f0aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f0ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1e1      	bne.n	800f076 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	3308      	adds	r3, #8
 800f0b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0bc:	e853 3f00 	ldrex	r3, [r3]
 800f0c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f0c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	3308      	adds	r3, #8
 800f0d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f0d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f0d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f0dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f0de:	e841 2300 	strex	r3, r2, [r1]
 800f0e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d1e3      	bne.n	800f0b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2220      	movs	r2, #32
 800f0ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f100:	e853 3f00 	ldrex	r3, [r3]
 800f104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f108:	f023 0310 	bic.w	r3, r3, #16
 800f10c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	461a      	mov	r2, r3
 800f116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f11a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f11c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f122:	e841 2300 	strex	r3, r2, [r1]
 800f126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1e4      	bne.n	800f0f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f134:	4618      	mov	r0, r3
 800f136:	f7f7 f939 	bl	80063ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2202      	movs	r2, #2
 800f13e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	b29b      	uxth	r3, r3
 800f152:	4619      	mov	r1, r3
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f91d 	bl	800f394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f15a:	e0fd      	b.n	800f358 <HAL_UART_IRQHandler+0x760>
 800f15c:	40020010 	.word	0x40020010
 800f160:	40020028 	.word	0x40020028
 800f164:	40020040 	.word	0x40020040
 800f168:	40020058 	.word	0x40020058
 800f16c:	40020070 	.word	0x40020070
 800f170:	40020088 	.word	0x40020088
 800f174:	400200a0 	.word	0x400200a0
 800f178:	400200b8 	.word	0x400200b8
 800f17c:	40020410 	.word	0x40020410
 800f180:	40020428 	.word	0x40020428
 800f184:	40020440 	.word	0x40020440
 800f188:	40020458 	.word	0x40020458
 800f18c:	40020470 	.word	0x40020470
 800f190:	40020488 	.word	0x40020488
 800f194:	400204a0 	.word	0x400204a0
 800f198:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f000 80cf 	beq.w	800f35c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f1be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f000 80ca 	beq.w	800f35c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d0:	e853 3f00 	ldrex	r3, [r3]
 800f1d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1ea:	647b      	str	r3, [r7, #68]	; 0x44
 800f1ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1f2:	e841 2300 	strex	r3, r2, [r1]
 800f1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1e4      	bne.n	800f1c8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3308      	adds	r3, #8
 800f204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	e853 3f00 	ldrex	r3, [r3]
 800f20c:	623b      	str	r3, [r7, #32]
   return(result);
 800f20e:	6a3a      	ldr	r2, [r7, #32]
 800f210:	4b55      	ldr	r3, [pc, #340]	; (800f368 <HAL_UART_IRQHandler+0x770>)
 800f212:	4013      	ands	r3, r2
 800f214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	3308      	adds	r3, #8
 800f21e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f222:	633a      	str	r2, [r7, #48]	; 0x30
 800f224:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f22a:	e841 2300 	strex	r3, r2, [r1]
 800f22e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1e3      	bne.n	800f1fe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2220      	movs	r2, #32
 800f23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	e853 3f00 	ldrex	r3, [r3]
 800f256:	60fb      	str	r3, [r7, #12]
   return(result);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f023 0310 	bic.w	r3, r3, #16
 800f25e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	461a      	mov	r2, r3
 800f268:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f26c:	61fb      	str	r3, [r7, #28]
 800f26e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f270:	69b9      	ldr	r1, [r7, #24]
 800f272:	69fa      	ldr	r2, [r7, #28]
 800f274:	e841 2300 	strex	r3, r2, [r1]
 800f278:	617b      	str	r3, [r7, #20]
   return(result);
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1e4      	bne.n	800f24a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2202      	movs	r2, #2
 800f284:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f881 	bl	800f394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f292:	e063      	b.n	800f35c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00e      	beq.n	800f2be <HAL_UART_IRQHandler+0x6c6>
 800f2a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d008      	beq.n	800f2be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f2b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f001 fe80 	bl	8010fbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2bc:	e051      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d014      	beq.n	800f2f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d105      	bne.n	800f2e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f2d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d008      	beq.n	800f2f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d03a      	beq.n	800f360 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	4798      	blx	r3
    }
    return;
 800f2f2:	e035      	b.n	800f360 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d009      	beq.n	800f314 <HAL_UART_IRQHandler+0x71c>
 800f300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d003      	beq.n	800f314 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f001 f90d 	bl	801052c <UART_EndTransmit_IT>
    return;
 800f312:	e026      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d009      	beq.n	800f334 <HAL_UART_IRQHandler+0x73c>
 800f320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f001 fe59 	bl	8010fe4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f332:	e016      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d010      	beq.n	800f362 <HAL_UART_IRQHandler+0x76a>
 800f340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f344:	2b00      	cmp	r3, #0
 800f346:	da0c      	bge.n	800f362 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f001 fe41 	bl	8010fd0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f34e:	e008      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
      return;
 800f350:	bf00      	nop
 800f352:	e006      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
    return;
 800f354:	bf00      	nop
 800f356:	e004      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
      return;
 800f358:	bf00      	nop
 800f35a:	e002      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
      return;
 800f35c:	bf00      	nop
 800f35e:	e000      	b.n	800f362 <HAL_UART_IRQHandler+0x76a>
    return;
 800f360:	bf00      	nop
  }
}
 800f362:	37e8      	adds	r7, #232	; 0xe8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	effffffe 	.word	0xeffffffe

0800f36c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f3a0:	bf00      	nop
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3b0:	b092      	sub	sp, #72	; 0x48
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	689a      	ldr	r2, [r3, #8]
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	431a      	orrs	r2, r3
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	431a      	orrs	r2, r3
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	69db      	ldr	r3, [r3, #28]
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	4bbe      	ldr	r3, [pc, #760]	; (800f6d4 <UART_SetConfig+0x328>)
 800f3dc:	4013      	ands	r3, r2
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	6812      	ldr	r2, [r2, #0]
 800f3e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3e4:	430b      	orrs	r3, r1
 800f3e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	68da      	ldr	r2, [r3, #12]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	430a      	orrs	r2, r1
 800f3fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	699b      	ldr	r3, [r3, #24]
 800f402:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4ab3      	ldr	r2, [pc, #716]	; (800f6d8 <UART_SetConfig+0x32c>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d004      	beq.n	800f418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	6a1b      	ldr	r3, [r3, #32]
 800f412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f414:	4313      	orrs	r3, r2
 800f416:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	689a      	ldr	r2, [r3, #8]
 800f41e:	4baf      	ldr	r3, [pc, #700]	; (800f6dc <UART_SetConfig+0x330>)
 800f420:	4013      	ands	r3, r2
 800f422:	697a      	ldr	r2, [r7, #20]
 800f424:	6812      	ldr	r2, [r2, #0]
 800f426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f428:	430b      	orrs	r3, r1
 800f42a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f432:	f023 010f 	bic.w	r1, r3, #15
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	430a      	orrs	r2, r1
 800f440:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4aa6      	ldr	r2, [pc, #664]	; (800f6e0 <UART_SetConfig+0x334>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d177      	bne.n	800f53c <UART_SetConfig+0x190>
 800f44c:	4ba5      	ldr	r3, [pc, #660]	; (800f6e4 <UART_SetConfig+0x338>)
 800f44e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f454:	2b28      	cmp	r3, #40	; 0x28
 800f456:	d86d      	bhi.n	800f534 <UART_SetConfig+0x188>
 800f458:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <UART_SetConfig+0xb4>)
 800f45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45e:	bf00      	nop
 800f460:	0800f505 	.word	0x0800f505
 800f464:	0800f535 	.word	0x0800f535
 800f468:	0800f535 	.word	0x0800f535
 800f46c:	0800f535 	.word	0x0800f535
 800f470:	0800f535 	.word	0x0800f535
 800f474:	0800f535 	.word	0x0800f535
 800f478:	0800f535 	.word	0x0800f535
 800f47c:	0800f535 	.word	0x0800f535
 800f480:	0800f50d 	.word	0x0800f50d
 800f484:	0800f535 	.word	0x0800f535
 800f488:	0800f535 	.word	0x0800f535
 800f48c:	0800f535 	.word	0x0800f535
 800f490:	0800f535 	.word	0x0800f535
 800f494:	0800f535 	.word	0x0800f535
 800f498:	0800f535 	.word	0x0800f535
 800f49c:	0800f535 	.word	0x0800f535
 800f4a0:	0800f515 	.word	0x0800f515
 800f4a4:	0800f535 	.word	0x0800f535
 800f4a8:	0800f535 	.word	0x0800f535
 800f4ac:	0800f535 	.word	0x0800f535
 800f4b0:	0800f535 	.word	0x0800f535
 800f4b4:	0800f535 	.word	0x0800f535
 800f4b8:	0800f535 	.word	0x0800f535
 800f4bc:	0800f535 	.word	0x0800f535
 800f4c0:	0800f51d 	.word	0x0800f51d
 800f4c4:	0800f535 	.word	0x0800f535
 800f4c8:	0800f535 	.word	0x0800f535
 800f4cc:	0800f535 	.word	0x0800f535
 800f4d0:	0800f535 	.word	0x0800f535
 800f4d4:	0800f535 	.word	0x0800f535
 800f4d8:	0800f535 	.word	0x0800f535
 800f4dc:	0800f535 	.word	0x0800f535
 800f4e0:	0800f525 	.word	0x0800f525
 800f4e4:	0800f535 	.word	0x0800f535
 800f4e8:	0800f535 	.word	0x0800f535
 800f4ec:	0800f535 	.word	0x0800f535
 800f4f0:	0800f535 	.word	0x0800f535
 800f4f4:	0800f535 	.word	0x0800f535
 800f4f8:	0800f535 	.word	0x0800f535
 800f4fc:	0800f535 	.word	0x0800f535
 800f500:	0800f52d 	.word	0x0800f52d
 800f504:	2301      	movs	r3, #1
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50a:	e222      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f50c:	2304      	movs	r3, #4
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f512:	e21e      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f514:	2308      	movs	r3, #8
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f51a:	e21a      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f51c:	2310      	movs	r3, #16
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f522:	e216      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f524:	2320      	movs	r3, #32
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52a:	e212      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f52c:	2340      	movs	r3, #64	; 0x40
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f532:	e20e      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f534:	2380      	movs	r3, #128	; 0x80
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53a:	e20a      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a69      	ldr	r2, [pc, #420]	; (800f6e8 <UART_SetConfig+0x33c>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d130      	bne.n	800f5a8 <UART_SetConfig+0x1fc>
 800f546:	4b67      	ldr	r3, [pc, #412]	; (800f6e4 <UART_SetConfig+0x338>)
 800f548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f54a:	f003 0307 	and.w	r3, r3, #7
 800f54e:	2b05      	cmp	r3, #5
 800f550:	d826      	bhi.n	800f5a0 <UART_SetConfig+0x1f4>
 800f552:	a201      	add	r2, pc, #4	; (adr r2, 800f558 <UART_SetConfig+0x1ac>)
 800f554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f558:	0800f571 	.word	0x0800f571
 800f55c:	0800f579 	.word	0x0800f579
 800f560:	0800f581 	.word	0x0800f581
 800f564:	0800f589 	.word	0x0800f589
 800f568:	0800f591 	.word	0x0800f591
 800f56c:	0800f599 	.word	0x0800f599
 800f570:	2300      	movs	r3, #0
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f576:	e1ec      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f578:	2304      	movs	r3, #4
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57e:	e1e8      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f580:	2308      	movs	r3, #8
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f586:	e1e4      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f588:	2310      	movs	r3, #16
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58e:	e1e0      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f590:	2320      	movs	r3, #32
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f596:	e1dc      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f598:	2340      	movs	r3, #64	; 0x40
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59e:	e1d8      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f5a0:	2380      	movs	r3, #128	; 0x80
 800f5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a6:	e1d4      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4a4f      	ldr	r2, [pc, #316]	; (800f6ec <UART_SetConfig+0x340>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d130      	bne.n	800f614 <UART_SetConfig+0x268>
 800f5b2:	4b4c      	ldr	r3, [pc, #304]	; (800f6e4 <UART_SetConfig+0x338>)
 800f5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5b6:	f003 0307 	and.w	r3, r3, #7
 800f5ba:	2b05      	cmp	r3, #5
 800f5bc:	d826      	bhi.n	800f60c <UART_SetConfig+0x260>
 800f5be:	a201      	add	r2, pc, #4	; (adr r2, 800f5c4 <UART_SetConfig+0x218>)
 800f5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c4:	0800f5dd 	.word	0x0800f5dd
 800f5c8:	0800f5e5 	.word	0x0800f5e5
 800f5cc:	0800f5ed 	.word	0x0800f5ed
 800f5d0:	0800f5f5 	.word	0x0800f5f5
 800f5d4:	0800f5fd 	.word	0x0800f5fd
 800f5d8:	0800f605 	.word	0x0800f605
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e2:	e1b6      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f5e4:	2304      	movs	r3, #4
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ea:	e1b2      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f2:	e1ae      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f5f4:	2310      	movs	r3, #16
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fa:	e1aa      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f5fc:	2320      	movs	r3, #32
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f602:	e1a6      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f604:	2340      	movs	r3, #64	; 0x40
 800f606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60a:	e1a2      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f60c:	2380      	movs	r3, #128	; 0x80
 800f60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f612:	e19e      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a35      	ldr	r2, [pc, #212]	; (800f6f0 <UART_SetConfig+0x344>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d130      	bne.n	800f680 <UART_SetConfig+0x2d4>
 800f61e:	4b31      	ldr	r3, [pc, #196]	; (800f6e4 <UART_SetConfig+0x338>)
 800f620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f622:	f003 0307 	and.w	r3, r3, #7
 800f626:	2b05      	cmp	r3, #5
 800f628:	d826      	bhi.n	800f678 <UART_SetConfig+0x2cc>
 800f62a:	a201      	add	r2, pc, #4	; (adr r2, 800f630 <UART_SetConfig+0x284>)
 800f62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f630:	0800f649 	.word	0x0800f649
 800f634:	0800f651 	.word	0x0800f651
 800f638:	0800f659 	.word	0x0800f659
 800f63c:	0800f661 	.word	0x0800f661
 800f640:	0800f669 	.word	0x0800f669
 800f644:	0800f671 	.word	0x0800f671
 800f648:	2300      	movs	r3, #0
 800f64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64e:	e180      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f650:	2304      	movs	r3, #4
 800f652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f656:	e17c      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f658:	2308      	movs	r3, #8
 800f65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65e:	e178      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f660:	2310      	movs	r3, #16
 800f662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f666:	e174      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f668:	2320      	movs	r3, #32
 800f66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66e:	e170      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f670:	2340      	movs	r3, #64	; 0x40
 800f672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f676:	e16c      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f678:	2380      	movs	r3, #128	; 0x80
 800f67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67e:	e168      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a1b      	ldr	r2, [pc, #108]	; (800f6f4 <UART_SetConfig+0x348>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d142      	bne.n	800f710 <UART_SetConfig+0x364>
 800f68a:	4b16      	ldr	r3, [pc, #88]	; (800f6e4 <UART_SetConfig+0x338>)
 800f68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f68e:	f003 0307 	and.w	r3, r3, #7
 800f692:	2b05      	cmp	r3, #5
 800f694:	d838      	bhi.n	800f708 <UART_SetConfig+0x35c>
 800f696:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <UART_SetConfig+0x2f0>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f6b5 	.word	0x0800f6b5
 800f6a0:	0800f6bd 	.word	0x0800f6bd
 800f6a4:	0800f6c5 	.word	0x0800f6c5
 800f6a8:	0800f6cd 	.word	0x0800f6cd
 800f6ac:	0800f6f9 	.word	0x0800f6f9
 800f6b0:	0800f701 	.word	0x0800f701
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ba:	e14a      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f6bc:	2304      	movs	r3, #4
 800f6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c2:	e146      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f6c4:	2308      	movs	r3, #8
 800f6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ca:	e142      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f6cc:	2310      	movs	r3, #16
 800f6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d2:	e13e      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f6d4:	cfff69f3 	.word	0xcfff69f3
 800f6d8:	58000c00 	.word	0x58000c00
 800f6dc:	11fff4ff 	.word	0x11fff4ff
 800f6e0:	40011000 	.word	0x40011000
 800f6e4:	58024400 	.word	0x58024400
 800f6e8:	40004400 	.word	0x40004400
 800f6ec:	40004800 	.word	0x40004800
 800f6f0:	40004c00 	.word	0x40004c00
 800f6f4:	40005000 	.word	0x40005000
 800f6f8:	2320      	movs	r3, #32
 800f6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6fe:	e128      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f700:	2340      	movs	r3, #64	; 0x40
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f706:	e124      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f708:	2380      	movs	r3, #128	; 0x80
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70e:	e120      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4acb      	ldr	r2, [pc, #812]	; (800fa44 <UART_SetConfig+0x698>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d176      	bne.n	800f808 <UART_SetConfig+0x45c>
 800f71a:	4bcb      	ldr	r3, [pc, #812]	; (800fa48 <UART_SetConfig+0x69c>)
 800f71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f71e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f722:	2b28      	cmp	r3, #40	; 0x28
 800f724:	d86c      	bhi.n	800f800 <UART_SetConfig+0x454>
 800f726:	a201      	add	r2, pc, #4	; (adr r2, 800f72c <UART_SetConfig+0x380>)
 800f728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f72c:	0800f7d1 	.word	0x0800f7d1
 800f730:	0800f801 	.word	0x0800f801
 800f734:	0800f801 	.word	0x0800f801
 800f738:	0800f801 	.word	0x0800f801
 800f73c:	0800f801 	.word	0x0800f801
 800f740:	0800f801 	.word	0x0800f801
 800f744:	0800f801 	.word	0x0800f801
 800f748:	0800f801 	.word	0x0800f801
 800f74c:	0800f7d9 	.word	0x0800f7d9
 800f750:	0800f801 	.word	0x0800f801
 800f754:	0800f801 	.word	0x0800f801
 800f758:	0800f801 	.word	0x0800f801
 800f75c:	0800f801 	.word	0x0800f801
 800f760:	0800f801 	.word	0x0800f801
 800f764:	0800f801 	.word	0x0800f801
 800f768:	0800f801 	.word	0x0800f801
 800f76c:	0800f7e1 	.word	0x0800f7e1
 800f770:	0800f801 	.word	0x0800f801
 800f774:	0800f801 	.word	0x0800f801
 800f778:	0800f801 	.word	0x0800f801
 800f77c:	0800f801 	.word	0x0800f801
 800f780:	0800f801 	.word	0x0800f801
 800f784:	0800f801 	.word	0x0800f801
 800f788:	0800f801 	.word	0x0800f801
 800f78c:	0800f7e9 	.word	0x0800f7e9
 800f790:	0800f801 	.word	0x0800f801
 800f794:	0800f801 	.word	0x0800f801
 800f798:	0800f801 	.word	0x0800f801
 800f79c:	0800f801 	.word	0x0800f801
 800f7a0:	0800f801 	.word	0x0800f801
 800f7a4:	0800f801 	.word	0x0800f801
 800f7a8:	0800f801 	.word	0x0800f801
 800f7ac:	0800f7f1 	.word	0x0800f7f1
 800f7b0:	0800f801 	.word	0x0800f801
 800f7b4:	0800f801 	.word	0x0800f801
 800f7b8:	0800f801 	.word	0x0800f801
 800f7bc:	0800f801 	.word	0x0800f801
 800f7c0:	0800f801 	.word	0x0800f801
 800f7c4:	0800f801 	.word	0x0800f801
 800f7c8:	0800f801 	.word	0x0800f801
 800f7cc:	0800f7f9 	.word	0x0800f7f9
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d6:	e0bc      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f7d8:	2304      	movs	r3, #4
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7de:	e0b8      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f7e0:	2308      	movs	r3, #8
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e6:	e0b4      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f7e8:	2310      	movs	r3, #16
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ee:	e0b0      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f7f0:	2320      	movs	r3, #32
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f6:	e0ac      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f7f8:	2340      	movs	r3, #64	; 0x40
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fe:	e0a8      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f800:	2380      	movs	r3, #128	; 0x80
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f806:	e0a4      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a8f      	ldr	r2, [pc, #572]	; (800fa4c <UART_SetConfig+0x6a0>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d130      	bne.n	800f874 <UART_SetConfig+0x4c8>
 800f812:	4b8d      	ldr	r3, [pc, #564]	; (800fa48 <UART_SetConfig+0x69c>)
 800f814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	2b05      	cmp	r3, #5
 800f81c:	d826      	bhi.n	800f86c <UART_SetConfig+0x4c0>
 800f81e:	a201      	add	r2, pc, #4	; (adr r2, 800f824 <UART_SetConfig+0x478>)
 800f820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f824:	0800f83d 	.word	0x0800f83d
 800f828:	0800f845 	.word	0x0800f845
 800f82c:	0800f84d 	.word	0x0800f84d
 800f830:	0800f855 	.word	0x0800f855
 800f834:	0800f85d 	.word	0x0800f85d
 800f838:	0800f865 	.word	0x0800f865
 800f83c:	2300      	movs	r3, #0
 800f83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f842:	e086      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f844:	2304      	movs	r3, #4
 800f846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84a:	e082      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f84c:	2308      	movs	r3, #8
 800f84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f852:	e07e      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f854:	2310      	movs	r3, #16
 800f856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85a:	e07a      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f85c:	2320      	movs	r3, #32
 800f85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f862:	e076      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f864:	2340      	movs	r3, #64	; 0x40
 800f866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86a:	e072      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f86c:	2380      	movs	r3, #128	; 0x80
 800f86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f872:	e06e      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a75      	ldr	r2, [pc, #468]	; (800fa50 <UART_SetConfig+0x6a4>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d130      	bne.n	800f8e0 <UART_SetConfig+0x534>
 800f87e:	4b72      	ldr	r3, [pc, #456]	; (800fa48 <UART_SetConfig+0x69c>)
 800f880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f882:	f003 0307 	and.w	r3, r3, #7
 800f886:	2b05      	cmp	r3, #5
 800f888:	d826      	bhi.n	800f8d8 <UART_SetConfig+0x52c>
 800f88a:	a201      	add	r2, pc, #4	; (adr r2, 800f890 <UART_SetConfig+0x4e4>)
 800f88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f890:	0800f8a9 	.word	0x0800f8a9
 800f894:	0800f8b1 	.word	0x0800f8b1
 800f898:	0800f8b9 	.word	0x0800f8b9
 800f89c:	0800f8c1 	.word	0x0800f8c1
 800f8a0:	0800f8c9 	.word	0x0800f8c9
 800f8a4:	0800f8d1 	.word	0x0800f8d1
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ae:	e050      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f8b0:	2304      	movs	r3, #4
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b6:	e04c      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f8b8:	2308      	movs	r3, #8
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8be:	e048      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f8c0:	2310      	movs	r3, #16
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c6:	e044      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f8c8:	2320      	movs	r3, #32
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ce:	e040      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f8d0:	2340      	movs	r3, #64	; 0x40
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d6:	e03c      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f8d8:	2380      	movs	r3, #128	; 0x80
 800f8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8de:	e038      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a5b      	ldr	r2, [pc, #364]	; (800fa54 <UART_SetConfig+0x6a8>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d130      	bne.n	800f94c <UART_SetConfig+0x5a0>
 800f8ea:	4b57      	ldr	r3, [pc, #348]	; (800fa48 <UART_SetConfig+0x69c>)
 800f8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ee:	f003 0307 	and.w	r3, r3, #7
 800f8f2:	2b05      	cmp	r3, #5
 800f8f4:	d826      	bhi.n	800f944 <UART_SetConfig+0x598>
 800f8f6:	a201      	add	r2, pc, #4	; (adr r2, 800f8fc <UART_SetConfig+0x550>)
 800f8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fc:	0800f915 	.word	0x0800f915
 800f900:	0800f91d 	.word	0x0800f91d
 800f904:	0800f925 	.word	0x0800f925
 800f908:	0800f92d 	.word	0x0800f92d
 800f90c:	0800f935 	.word	0x0800f935
 800f910:	0800f93d 	.word	0x0800f93d
 800f914:	2302      	movs	r3, #2
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91a:	e01a      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f91c:	2304      	movs	r3, #4
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e016      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f924:	2308      	movs	r3, #8
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e012      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f92c:	2310      	movs	r3, #16
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f932:	e00e      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f934:	2320      	movs	r3, #32
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93a:	e00a      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f93c:	2340      	movs	r3, #64	; 0x40
 800f93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f942:	e006      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f944:	2380      	movs	r3, #128	; 0x80
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f94a:	e002      	b.n	800f952 <UART_SetConfig+0x5a6>
 800f94c:	2380      	movs	r3, #128	; 0x80
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a3f      	ldr	r2, [pc, #252]	; (800fa54 <UART_SetConfig+0x6a8>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	f040 80f8 	bne.w	800fb4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f95e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f962:	2b20      	cmp	r3, #32
 800f964:	dc46      	bgt.n	800f9f4 <UART_SetConfig+0x648>
 800f966:	2b02      	cmp	r3, #2
 800f968:	f2c0 8082 	blt.w	800fa70 <UART_SetConfig+0x6c4>
 800f96c:	3b02      	subs	r3, #2
 800f96e:	2b1e      	cmp	r3, #30
 800f970:	d87e      	bhi.n	800fa70 <UART_SetConfig+0x6c4>
 800f972:	a201      	add	r2, pc, #4	; (adr r2, 800f978 <UART_SetConfig+0x5cc>)
 800f974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f978:	0800f9fb 	.word	0x0800f9fb
 800f97c:	0800fa71 	.word	0x0800fa71
 800f980:	0800fa03 	.word	0x0800fa03
 800f984:	0800fa71 	.word	0x0800fa71
 800f988:	0800fa71 	.word	0x0800fa71
 800f98c:	0800fa71 	.word	0x0800fa71
 800f990:	0800fa13 	.word	0x0800fa13
 800f994:	0800fa71 	.word	0x0800fa71
 800f998:	0800fa71 	.word	0x0800fa71
 800f99c:	0800fa71 	.word	0x0800fa71
 800f9a0:	0800fa71 	.word	0x0800fa71
 800f9a4:	0800fa71 	.word	0x0800fa71
 800f9a8:	0800fa71 	.word	0x0800fa71
 800f9ac:	0800fa71 	.word	0x0800fa71
 800f9b0:	0800fa23 	.word	0x0800fa23
 800f9b4:	0800fa71 	.word	0x0800fa71
 800f9b8:	0800fa71 	.word	0x0800fa71
 800f9bc:	0800fa71 	.word	0x0800fa71
 800f9c0:	0800fa71 	.word	0x0800fa71
 800f9c4:	0800fa71 	.word	0x0800fa71
 800f9c8:	0800fa71 	.word	0x0800fa71
 800f9cc:	0800fa71 	.word	0x0800fa71
 800f9d0:	0800fa71 	.word	0x0800fa71
 800f9d4:	0800fa71 	.word	0x0800fa71
 800f9d8:	0800fa71 	.word	0x0800fa71
 800f9dc:	0800fa71 	.word	0x0800fa71
 800f9e0:	0800fa71 	.word	0x0800fa71
 800f9e4:	0800fa71 	.word	0x0800fa71
 800f9e8:	0800fa71 	.word	0x0800fa71
 800f9ec:	0800fa71 	.word	0x0800fa71
 800f9f0:	0800fa63 	.word	0x0800fa63
 800f9f4:	2b40      	cmp	r3, #64	; 0x40
 800f9f6:	d037      	beq.n	800fa68 <UART_SetConfig+0x6bc>
 800f9f8:	e03a      	b.n	800fa70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f9fa:	f7fc f869 	bl	800bad0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f9fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa00:	e03c      	b.n	800fa7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fc f878 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa10:	e034      	b.n	800fa7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa12:	f107 0318 	add.w	r3, r7, #24
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fc f9c4 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa20:	e02c      	b.n	800fa7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa22:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <UART_SetConfig+0x69c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f003 0320 	and.w	r3, r3, #32
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d016      	beq.n	800fa5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa2e:	4b06      	ldr	r3, [pc, #24]	; (800fa48 <UART_SetConfig+0x69c>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	08db      	lsrs	r3, r3, #3
 800fa34:	f003 0303 	and.w	r3, r3, #3
 800fa38:	4a07      	ldr	r2, [pc, #28]	; (800fa58 <UART_SetConfig+0x6ac>)
 800fa3a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa40:	e01c      	b.n	800fa7c <UART_SetConfig+0x6d0>
 800fa42:	bf00      	nop
 800fa44:	40011400 	.word	0x40011400
 800fa48:	58024400 	.word	0x58024400
 800fa4c:	40007800 	.word	0x40007800
 800fa50:	40007c00 	.word	0x40007c00
 800fa54:	58000c00 	.word	0x58000c00
 800fa58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fa5c:	4b9d      	ldr	r3, [pc, #628]	; (800fcd4 <UART_SetConfig+0x928>)
 800fa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa60:	e00c      	b.n	800fa7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa62:	4b9d      	ldr	r3, [pc, #628]	; (800fcd8 <UART_SetConfig+0x92c>)
 800fa64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa66:	e009      	b.n	800fa7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa6e:	e005      	b.n	800fa7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fa70:	2300      	movs	r3, #0
 800fa72:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa74:	2301      	movs	r3, #1
 800fa76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f000 81de 	beq.w	800fe40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa88:	4a94      	ldr	r2, [pc, #592]	; (800fcdc <UART_SetConfig+0x930>)
 800fa8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa92:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa96:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	685a      	ldr	r2, [r3, #4]
 800fa9c:	4613      	mov	r3, r2
 800fa9e:	005b      	lsls	r3, r3, #1
 800faa0:	4413      	add	r3, r2
 800faa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d305      	bcc.n	800fab4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800faae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d903      	bls.n	800fabc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800faba:	e1c1      	b.n	800fe40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fabe:	2200      	movs	r2, #0
 800fac0:	60bb      	str	r3, [r7, #8]
 800fac2:	60fa      	str	r2, [r7, #12]
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	4a84      	ldr	r2, [pc, #528]	; (800fcdc <UART_SetConfig+0x930>)
 800faca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800face:	b29b      	uxth	r3, r3
 800fad0:	2200      	movs	r2, #0
 800fad2:	603b      	str	r3, [r7, #0]
 800fad4:	607a      	str	r2, [r7, #4]
 800fad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fade:	f7f0 fbff 	bl	80002e0 <__aeabi_uldivmod>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	4610      	mov	r0, r2
 800fae8:	4619      	mov	r1, r3
 800faea:	f04f 0200 	mov.w	r2, #0
 800faee:	f04f 0300 	mov.w	r3, #0
 800faf2:	020b      	lsls	r3, r1, #8
 800faf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800faf8:	0202      	lsls	r2, r0, #8
 800fafa:	6979      	ldr	r1, [r7, #20]
 800fafc:	6849      	ldr	r1, [r1, #4]
 800fafe:	0849      	lsrs	r1, r1, #1
 800fb00:	2000      	movs	r0, #0
 800fb02:	460c      	mov	r4, r1
 800fb04:	4605      	mov	r5, r0
 800fb06:	eb12 0804 	adds.w	r8, r2, r4
 800fb0a:	eb43 0905 	adc.w	r9, r3, r5
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	469a      	mov	sl, r3
 800fb16:	4693      	mov	fp, r2
 800fb18:	4652      	mov	r2, sl
 800fb1a:	465b      	mov	r3, fp
 800fb1c:	4640      	mov	r0, r8
 800fb1e:	4649      	mov	r1, r9
 800fb20:	f7f0 fbde 	bl	80002e0 <__aeabi_uldivmod>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	4613      	mov	r3, r2
 800fb2a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb32:	d308      	bcc.n	800fb46 <UART_SetConfig+0x79a>
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb3a:	d204      	bcs.n	800fb46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb42:	60da      	str	r2, [r3, #12]
 800fb44:	e17c      	b.n	800fe40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fb46:	2301      	movs	r3, #1
 800fb48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb4c:	e178      	b.n	800fe40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	69db      	ldr	r3, [r3, #28]
 800fb52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb56:	f040 80c5 	bne.w	800fce4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fb5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb5e:	2b20      	cmp	r3, #32
 800fb60:	dc48      	bgt.n	800fbf4 <UART_SetConfig+0x848>
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	db7b      	blt.n	800fc5e <UART_SetConfig+0x8b2>
 800fb66:	2b20      	cmp	r3, #32
 800fb68:	d879      	bhi.n	800fc5e <UART_SetConfig+0x8b2>
 800fb6a:	a201      	add	r2, pc, #4	; (adr r2, 800fb70 <UART_SetConfig+0x7c4>)
 800fb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb70:	0800fbfb 	.word	0x0800fbfb
 800fb74:	0800fc03 	.word	0x0800fc03
 800fb78:	0800fc5f 	.word	0x0800fc5f
 800fb7c:	0800fc5f 	.word	0x0800fc5f
 800fb80:	0800fc0b 	.word	0x0800fc0b
 800fb84:	0800fc5f 	.word	0x0800fc5f
 800fb88:	0800fc5f 	.word	0x0800fc5f
 800fb8c:	0800fc5f 	.word	0x0800fc5f
 800fb90:	0800fc1b 	.word	0x0800fc1b
 800fb94:	0800fc5f 	.word	0x0800fc5f
 800fb98:	0800fc5f 	.word	0x0800fc5f
 800fb9c:	0800fc5f 	.word	0x0800fc5f
 800fba0:	0800fc5f 	.word	0x0800fc5f
 800fba4:	0800fc5f 	.word	0x0800fc5f
 800fba8:	0800fc5f 	.word	0x0800fc5f
 800fbac:	0800fc5f 	.word	0x0800fc5f
 800fbb0:	0800fc2b 	.word	0x0800fc2b
 800fbb4:	0800fc5f 	.word	0x0800fc5f
 800fbb8:	0800fc5f 	.word	0x0800fc5f
 800fbbc:	0800fc5f 	.word	0x0800fc5f
 800fbc0:	0800fc5f 	.word	0x0800fc5f
 800fbc4:	0800fc5f 	.word	0x0800fc5f
 800fbc8:	0800fc5f 	.word	0x0800fc5f
 800fbcc:	0800fc5f 	.word	0x0800fc5f
 800fbd0:	0800fc5f 	.word	0x0800fc5f
 800fbd4:	0800fc5f 	.word	0x0800fc5f
 800fbd8:	0800fc5f 	.word	0x0800fc5f
 800fbdc:	0800fc5f 	.word	0x0800fc5f
 800fbe0:	0800fc5f 	.word	0x0800fc5f
 800fbe4:	0800fc5f 	.word	0x0800fc5f
 800fbe8:	0800fc5f 	.word	0x0800fc5f
 800fbec:	0800fc5f 	.word	0x0800fc5f
 800fbf0:	0800fc51 	.word	0x0800fc51
 800fbf4:	2b40      	cmp	r3, #64	; 0x40
 800fbf6:	d02e      	beq.n	800fc56 <UART_SetConfig+0x8aa>
 800fbf8:	e031      	b.n	800fc5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbfa:	f7f9 ff71 	bl	8009ae0 <HAL_RCC_GetPCLK1Freq>
 800fbfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc00:	e033      	b.n	800fc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc02:	f7f9 ff83 	bl	8009b0c <HAL_RCC_GetPCLK2Freq>
 800fc06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc08:	e02f      	b.n	800fc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fb ff74 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc18:	e027      	b.n	800fc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc1a:	f107 0318 	add.w	r3, r7, #24
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fc f8c0 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc28:	e01f      	b.n	800fc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc2a:	4b2d      	ldr	r3, [pc, #180]	; (800fce0 <UART_SetConfig+0x934>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f003 0320 	and.w	r3, r3, #32
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d009      	beq.n	800fc4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc36:	4b2a      	ldr	r3, [pc, #168]	; (800fce0 <UART_SetConfig+0x934>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	08db      	lsrs	r3, r3, #3
 800fc3c:	f003 0303 	and.w	r3, r3, #3
 800fc40:	4a24      	ldr	r2, [pc, #144]	; (800fcd4 <UART_SetConfig+0x928>)
 800fc42:	fa22 f303 	lsr.w	r3, r2, r3
 800fc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc48:	e00f      	b.n	800fc6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc4a:	4b22      	ldr	r3, [pc, #136]	; (800fcd4 <UART_SetConfig+0x928>)
 800fc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc4e:	e00c      	b.n	800fc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc50:	4b21      	ldr	r3, [pc, #132]	; (800fcd8 <UART_SetConfig+0x92c>)
 800fc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc54:	e009      	b.n	800fc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc5c:	e005      	b.n	800fc6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc62:	2301      	movs	r3, #1
 800fc64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f000 80e7 	beq.w	800fe40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc76:	4a19      	ldr	r2, [pc, #100]	; (800fcdc <UART_SetConfig+0x930>)
 800fc78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc80:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc84:	005a      	lsls	r2, r3, #1
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	085b      	lsrs	r3, r3, #1
 800fc8c:	441a      	add	r2, r3
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	2b0f      	cmp	r3, #15
 800fc9c:	d916      	bls.n	800fccc <UART_SetConfig+0x920>
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fca4:	d212      	bcs.n	800fccc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	f023 030f 	bic.w	r3, r3, #15
 800fcae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	085b      	lsrs	r3, r3, #1
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	f003 0307 	and.w	r3, r3, #7
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcc8:	60da      	str	r2, [r3, #12]
 800fcca:	e0b9      	b.n	800fe40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fccc:	2301      	movs	r3, #1
 800fcce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcd2:	e0b5      	b.n	800fe40 <UART_SetConfig+0xa94>
 800fcd4:	03d09000 	.word	0x03d09000
 800fcd8:	003d0900 	.word	0x003d0900
 800fcdc:	08015544 	.word	0x08015544
 800fce0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fce4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fce8:	2b20      	cmp	r3, #32
 800fcea:	dc49      	bgt.n	800fd80 <UART_SetConfig+0x9d4>
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	db7c      	blt.n	800fdea <UART_SetConfig+0xa3e>
 800fcf0:	2b20      	cmp	r3, #32
 800fcf2:	d87a      	bhi.n	800fdea <UART_SetConfig+0xa3e>
 800fcf4:	a201      	add	r2, pc, #4	; (adr r2, 800fcfc <UART_SetConfig+0x950>)
 800fcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcfa:	bf00      	nop
 800fcfc:	0800fd87 	.word	0x0800fd87
 800fd00:	0800fd8f 	.word	0x0800fd8f
 800fd04:	0800fdeb 	.word	0x0800fdeb
 800fd08:	0800fdeb 	.word	0x0800fdeb
 800fd0c:	0800fd97 	.word	0x0800fd97
 800fd10:	0800fdeb 	.word	0x0800fdeb
 800fd14:	0800fdeb 	.word	0x0800fdeb
 800fd18:	0800fdeb 	.word	0x0800fdeb
 800fd1c:	0800fda7 	.word	0x0800fda7
 800fd20:	0800fdeb 	.word	0x0800fdeb
 800fd24:	0800fdeb 	.word	0x0800fdeb
 800fd28:	0800fdeb 	.word	0x0800fdeb
 800fd2c:	0800fdeb 	.word	0x0800fdeb
 800fd30:	0800fdeb 	.word	0x0800fdeb
 800fd34:	0800fdeb 	.word	0x0800fdeb
 800fd38:	0800fdeb 	.word	0x0800fdeb
 800fd3c:	0800fdb7 	.word	0x0800fdb7
 800fd40:	0800fdeb 	.word	0x0800fdeb
 800fd44:	0800fdeb 	.word	0x0800fdeb
 800fd48:	0800fdeb 	.word	0x0800fdeb
 800fd4c:	0800fdeb 	.word	0x0800fdeb
 800fd50:	0800fdeb 	.word	0x0800fdeb
 800fd54:	0800fdeb 	.word	0x0800fdeb
 800fd58:	0800fdeb 	.word	0x0800fdeb
 800fd5c:	0800fdeb 	.word	0x0800fdeb
 800fd60:	0800fdeb 	.word	0x0800fdeb
 800fd64:	0800fdeb 	.word	0x0800fdeb
 800fd68:	0800fdeb 	.word	0x0800fdeb
 800fd6c:	0800fdeb 	.word	0x0800fdeb
 800fd70:	0800fdeb 	.word	0x0800fdeb
 800fd74:	0800fdeb 	.word	0x0800fdeb
 800fd78:	0800fdeb 	.word	0x0800fdeb
 800fd7c:	0800fddd 	.word	0x0800fddd
 800fd80:	2b40      	cmp	r3, #64	; 0x40
 800fd82:	d02e      	beq.n	800fde2 <UART_SetConfig+0xa36>
 800fd84:	e031      	b.n	800fdea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd86:	f7f9 feab 	bl	8009ae0 <HAL_RCC_GetPCLK1Freq>
 800fd8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd8c:	e033      	b.n	800fdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd8e:	f7f9 febd 	bl	8009b0c <HAL_RCC_GetPCLK2Freq>
 800fd92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd94:	e02f      	b.n	800fdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fb feae 	bl	800bafc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fda4:	e027      	b.n	800fdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fda6:	f107 0318 	add.w	r3, r7, #24
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fb fffa 	bl	800bda4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdb4:	e01f      	b.n	800fdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdb6:	4b2d      	ldr	r3, [pc, #180]	; (800fe6c <UART_SetConfig+0xac0>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f003 0320 	and.w	r3, r3, #32
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d009      	beq.n	800fdd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdc2:	4b2a      	ldr	r3, [pc, #168]	; (800fe6c <UART_SetConfig+0xac0>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	08db      	lsrs	r3, r3, #3
 800fdc8:	f003 0303 	and.w	r3, r3, #3
 800fdcc:	4a28      	ldr	r2, [pc, #160]	; (800fe70 <UART_SetConfig+0xac4>)
 800fdce:	fa22 f303 	lsr.w	r3, r2, r3
 800fdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fdd4:	e00f      	b.n	800fdf6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fdd6:	4b26      	ldr	r3, [pc, #152]	; (800fe70 <UART_SetConfig+0xac4>)
 800fdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdda:	e00c      	b.n	800fdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fddc:	4b25      	ldr	r3, [pc, #148]	; (800fe74 <UART_SetConfig+0xac8>)
 800fdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde0:	e009      	b.n	800fdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fde2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde8:	e005      	b.n	800fdf6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fdea:	2300      	movs	r3, #0
 800fdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fdf4:	bf00      	nop
    }

    if (pclk != 0U)
 800fdf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d021      	beq.n	800fe40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe00:	4a1d      	ldr	r2, [pc, #116]	; (800fe78 <UART_SetConfig+0xacc>)
 800fe02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe06:	461a      	mov	r2, r3
 800fe08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	085b      	lsrs	r3, r3, #1
 800fe14:	441a      	add	r2, r3
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe22:	2b0f      	cmp	r3, #15
 800fe24:	d909      	bls.n	800fe3a <UART_SetConfig+0xa8e>
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe2c:	d205      	bcs.n	800fe3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	60da      	str	r2, [r3, #12]
 800fe38:	e002      	b.n	800fe40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	2200      	movs	r2, #0
 800fe54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fe5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3748      	adds	r7, #72	; 0x48
 800fe64:	46bd      	mov	sp, r7
 800fe66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe6a:	bf00      	nop
 800fe6c:	58024400 	.word	0x58024400
 800fe70:	03d09000 	.word	0x03d09000
 800fe74:	003d0900 	.word	0x003d0900
 800fe78:	08015544 	.word	0x08015544

0800fe7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe88:	f003 0308 	and.w	r3, r3, #8
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00a      	beq.n	800fea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	430a      	orrs	r2, r1
 800fea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00a      	beq.n	800fec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	430a      	orrs	r2, r1
 800fec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fecc:	f003 0302 	and.w	r3, r3, #2
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00a      	beq.n	800feea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	430a      	orrs	r2, r1
 800fee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feee:	f003 0304 	and.w	r3, r3, #4
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00a      	beq.n	800ff0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	430a      	orrs	r2, r1
 800ff0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff10:	f003 0310 	and.w	r3, r3, #16
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00a      	beq.n	800ff2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	430a      	orrs	r2, r1
 800ff2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff32:	f003 0320 	and.w	r3, r3, #32
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00a      	beq.n	800ff50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	689b      	ldr	r3, [r3, #8]
 800ff40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	430a      	orrs	r2, r1
 800ff4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d01a      	beq.n	800ff92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	430a      	orrs	r2, r1
 800ff70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff7a:	d10a      	bne.n	800ff92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	430a      	orrs	r2, r1
 800ff90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00a      	beq.n	800ffb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	430a      	orrs	r2, r1
 800ffb2:	605a      	str	r2, [r3, #4]
  }
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b098      	sub	sp, #96	; 0x60
 800ffc4:	af02      	add	r7, sp, #8
 800ffc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ffd0:	f7f3 fafe 	bl	80035d0 <HAL_GetTick>
 800ffd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f003 0308 	and.w	r3, r3, #8
 800ffe0:	2b08      	cmp	r3, #8
 800ffe2:	d12f      	bne.n	8010044 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffec:	2200      	movs	r2, #0
 800ffee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f88e 	bl	8010114 <UART_WaitOnFlagUntilTimeout>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d022      	beq.n	8010044 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010006:	e853 3f00 	ldrex	r3, [r3]
 801000a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801000c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801000e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010012:	653b      	str	r3, [r7, #80]	; 0x50
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	461a      	mov	r2, r3
 801001a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801001c:	647b      	str	r3, [r7, #68]	; 0x44
 801001e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010024:	e841 2300 	strex	r3, r2, [r1]
 8010028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801002a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002c:	2b00      	cmp	r3, #0
 801002e:	d1e6      	bne.n	800fffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2220      	movs	r2, #32
 8010034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2200      	movs	r2, #0
 801003c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010040:	2303      	movs	r3, #3
 8010042:	e063      	b.n	801010c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f003 0304 	and.w	r3, r3, #4
 801004e:	2b04      	cmp	r3, #4
 8010050:	d149      	bne.n	80100e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010052:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801005a:	2200      	movs	r2, #0
 801005c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 f857 	bl	8010114 <UART_WaitOnFlagUntilTimeout>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d03c      	beq.n	80100e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010074:	e853 3f00 	ldrex	r3, [r3]
 8010078:	623b      	str	r3, [r7, #32]
   return(result);
 801007a:	6a3b      	ldr	r3, [r7, #32]
 801007c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010080:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801008a:	633b      	str	r3, [r7, #48]	; 0x30
 801008c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010092:	e841 2300 	strex	r3, r2, [r1]
 8010096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1e6      	bne.n	801006c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	3308      	adds	r3, #8
 80100a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	e853 3f00 	ldrex	r3, [r3]
 80100ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f023 0301 	bic.w	r3, r3, #1
 80100b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	3308      	adds	r3, #8
 80100bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100be:	61fa      	str	r2, [r7, #28]
 80100c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c2:	69b9      	ldr	r1, [r7, #24]
 80100c4:	69fa      	ldr	r2, [r7, #28]
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	617b      	str	r3, [r7, #20]
   return(result);
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e5      	bne.n	801009e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2220      	movs	r2, #32
 80100d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100e2:	2303      	movs	r3, #3
 80100e4:	e012      	b.n	801010c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2220      	movs	r2, #32
 80100ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2220      	movs	r2, #32
 80100f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2200      	movs	r2, #0
 80100fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3758      	adds	r7, #88	; 0x58
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	603b      	str	r3, [r7, #0]
 8010120:	4613      	mov	r3, r2
 8010122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010124:	e04f      	b.n	80101c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010126:	69bb      	ldr	r3, [r7, #24]
 8010128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801012c:	d04b      	beq.n	80101c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801012e:	f7f3 fa4f 	bl	80035d0 <HAL_GetTick>
 8010132:	4602      	mov	r2, r0
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	69ba      	ldr	r2, [r7, #24]
 801013a:	429a      	cmp	r2, r3
 801013c:	d302      	bcc.n	8010144 <UART_WaitOnFlagUntilTimeout+0x30>
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d101      	bne.n	8010148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010144:	2303      	movs	r3, #3
 8010146:	e04e      	b.n	80101e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	f003 0304 	and.w	r3, r3, #4
 8010152:	2b00      	cmp	r3, #0
 8010154:	d037      	beq.n	80101c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	2b80      	cmp	r3, #128	; 0x80
 801015a:	d034      	beq.n	80101c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	2b40      	cmp	r3, #64	; 0x40
 8010160:	d031      	beq.n	80101c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	f003 0308 	and.w	r3, r3, #8
 801016c:	2b08      	cmp	r3, #8
 801016e:	d110      	bne.n	8010192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2208      	movs	r2, #8
 8010176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f000 f95b 	bl	8010434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2208      	movs	r2, #8
 8010182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2200      	movs	r2, #0
 801018a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801018e:	2301      	movs	r3, #1
 8010190:	e029      	b.n	80101e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	69db      	ldr	r3, [r3, #28]
 8010198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801019c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80101a0:	d111      	bne.n	80101c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80101aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f000 f941 	bl	8010434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2220      	movs	r2, #32
 80101b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80101c2:	2303      	movs	r3, #3
 80101c4:	e00f      	b.n	80101e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	69da      	ldr	r2, [r3, #28]
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	4013      	ands	r3, r2
 80101d0:	68ba      	ldr	r2, [r7, #8]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	bf0c      	ite	eq
 80101d6:	2301      	moveq	r3, #1
 80101d8:	2300      	movne	r3, #0
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	461a      	mov	r2, r3
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d0a0      	beq.n	8010126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
	...

080101f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b0a3      	sub	sp, #140	; 0x8c
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	4613      	mov	r3, r2
 80101fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	68ba      	ldr	r2, [r7, #8]
 8010202:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	88fa      	ldrh	r2, [r7, #6]
 8010208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	88fa      	ldrh	r2, [r7, #6]
 8010210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2200      	movs	r2, #0
 8010218:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010222:	d10e      	bne.n	8010242 <UART_Start_Receive_IT+0x52>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	691b      	ldr	r3, [r3, #16]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d105      	bne.n	8010238 <UART_Start_Receive_IT+0x48>
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010236:	e02d      	b.n	8010294 <UART_Start_Receive_IT+0xa4>
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	22ff      	movs	r2, #255	; 0xff
 801023c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010240:	e028      	b.n	8010294 <UART_Start_Receive_IT+0xa4>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10d      	bne.n	8010266 <UART_Start_Receive_IT+0x76>
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d104      	bne.n	801025c <UART_Start_Receive_IT+0x6c>
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	22ff      	movs	r2, #255	; 0xff
 8010256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801025a:	e01b      	b.n	8010294 <UART_Start_Receive_IT+0xa4>
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	227f      	movs	r2, #127	; 0x7f
 8010260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010264:	e016      	b.n	8010294 <UART_Start_Receive_IT+0xa4>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801026e:	d10d      	bne.n	801028c <UART_Start_Receive_IT+0x9c>
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	691b      	ldr	r3, [r3, #16]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d104      	bne.n	8010282 <UART_Start_Receive_IT+0x92>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	227f      	movs	r2, #127	; 0x7f
 801027c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010280:	e008      	b.n	8010294 <UART_Start_Receive_IT+0xa4>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	223f      	movs	r2, #63	; 0x3f
 8010286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801028a:	e003      	b.n	8010294 <UART_Start_Receive_IT+0xa4>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2200      	movs	r2, #0
 8010290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2222      	movs	r2, #34	; 0x22
 80102a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	3308      	adds	r3, #8
 80102aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102ae:	e853 3f00 	ldrex	r3, [r3]
 80102b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80102b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102b6:	f043 0301 	orr.w	r3, r3, #1
 80102ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	3308      	adds	r3, #8
 80102c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80102c8:	673a      	str	r2, [r7, #112]	; 0x70
 80102ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80102ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80102d0:	e841 2300 	strex	r3, r2, [r1]
 80102d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80102d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1e3      	bne.n	80102a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102e4:	d14f      	bne.n	8010386 <UART_Start_Receive_IT+0x196>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102ec:	88fa      	ldrh	r2, [r7, #6]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d349      	bcc.n	8010386 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102fa:	d107      	bne.n	801030c <UART_Start_Receive_IT+0x11c>
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d103      	bne.n	801030c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	4a47      	ldr	r2, [pc, #284]	; (8010424 <UART_Start_Receive_IT+0x234>)
 8010308:	675a      	str	r2, [r3, #116]	; 0x74
 801030a:	e002      	b.n	8010312 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	4a46      	ldr	r2, [pc, #280]	; (8010428 <UART_Start_Receive_IT+0x238>)
 8010310:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d01a      	beq.n	8010350 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010322:	e853 3f00 	ldrex	r3, [r3]
 8010326:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801032a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801032e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	461a      	mov	r2, r3
 8010338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801033c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801033e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010340:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010342:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010344:	e841 2300 	strex	r3, r2, [r1]
 8010348:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801034a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1e4      	bne.n	801031a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3308      	adds	r3, #8
 8010356:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801035a:	e853 3f00 	ldrex	r3, [r3]
 801035e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010366:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	3308      	adds	r3, #8
 801036e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010370:	64ba      	str	r2, [r7, #72]	; 0x48
 8010372:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010374:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010378:	e841 2300 	strex	r3, r2, [r1]
 801037c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801037e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1e5      	bne.n	8010350 <UART_Start_Receive_IT+0x160>
 8010384:	e046      	b.n	8010414 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801038e:	d107      	bne.n	80103a0 <UART_Start_Receive_IT+0x1b0>
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	691b      	ldr	r3, [r3, #16]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d103      	bne.n	80103a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	4a24      	ldr	r2, [pc, #144]	; (801042c <UART_Start_Receive_IT+0x23c>)
 801039c:	675a      	str	r2, [r3, #116]	; 0x74
 801039e:	e002      	b.n	80103a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	4a23      	ldr	r2, [pc, #140]	; (8010430 <UART_Start_Receive_IT+0x240>)
 80103a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	691b      	ldr	r3, [r3, #16]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d019      	beq.n	80103e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b6:	e853 3f00 	ldrex	r3, [r3]
 80103ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80103c2:	677b      	str	r3, [r7, #116]	; 0x74
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	461a      	mov	r2, r3
 80103ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103cc:	637b      	str	r3, [r7, #52]	; 0x34
 80103ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103d4:	e841 2300 	strex	r3, r2, [r1]
 80103d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d1e6      	bne.n	80103ae <UART_Start_Receive_IT+0x1be>
 80103e0:	e018      	b.n	8010414 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	e853 3f00 	ldrex	r3, [r3]
 80103ee:	613b      	str	r3, [r7, #16]
   return(result);
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	f043 0320 	orr.w	r3, r3, #32
 80103f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	461a      	mov	r2, r3
 80103fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010400:	623b      	str	r3, [r7, #32]
 8010402:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010404:	69f9      	ldr	r1, [r7, #28]
 8010406:	6a3a      	ldr	r2, [r7, #32]
 8010408:	e841 2300 	strex	r3, r2, [r1]
 801040c:	61bb      	str	r3, [r7, #24]
   return(result);
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1e6      	bne.n	80103e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	378c      	adds	r7, #140	; 0x8c
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	08010c55 	.word	0x08010c55
 8010428:	080108f5 	.word	0x080108f5
 801042c:	0801073d 	.word	0x0801073d
 8010430:	08010585 	.word	0x08010585

08010434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010434:	b480      	push	{r7}
 8010436:	b095      	sub	sp, #84	; 0x54
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010444:	e853 3f00 	ldrex	r3, [r3]
 8010448:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	461a      	mov	r2, r3
 8010458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801045a:	643b      	str	r3, [r7, #64]	; 0x40
 801045c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801045e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010462:	e841 2300 	strex	r3, r2, [r1]
 8010466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1e6      	bne.n	801043c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	3308      	adds	r3, #8
 8010474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010476:	6a3b      	ldr	r3, [r7, #32]
 8010478:	e853 3f00 	ldrex	r3, [r3]
 801047c:	61fb      	str	r3, [r7, #28]
   return(result);
 801047e:	69fa      	ldr	r2, [r7, #28]
 8010480:	4b1e      	ldr	r3, [pc, #120]	; (80104fc <UART_EndRxTransfer+0xc8>)
 8010482:	4013      	ands	r3, r2
 8010484:	64bb      	str	r3, [r7, #72]	; 0x48
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	3308      	adds	r3, #8
 801048c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801048e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010496:	e841 2300 	strex	r3, r2, [r1]
 801049a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1e5      	bne.n	801046e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d118      	bne.n	80104dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	e853 3f00 	ldrex	r3, [r3]
 80104b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	f023 0310 	bic.w	r3, r3, #16
 80104be:	647b      	str	r3, [r7, #68]	; 0x44
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	461a      	mov	r2, r3
 80104c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104c8:	61bb      	str	r3, [r7, #24]
 80104ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104cc:	6979      	ldr	r1, [r7, #20]
 80104ce:	69ba      	ldr	r2, [r7, #24]
 80104d0:	e841 2300 	strex	r3, r2, [r1]
 80104d4:	613b      	str	r3, [r7, #16]
   return(result);
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1e6      	bne.n	80104aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2220      	movs	r2, #32
 80104e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2200      	movs	r2, #0
 80104ee:	675a      	str	r2, [r3, #116]	; 0x74
}
 80104f0:	bf00      	nop
 80104f2:	3754      	adds	r7, #84	; 0x54
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	effffffe 	.word	0xeffffffe

08010500 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801050c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2200      	movs	r2, #0
 8010512:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2200      	movs	r2, #0
 801051a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f7fe ff2e 	bl	800f380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010524:	bf00      	nop
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b088      	sub	sp, #32
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	e853 3f00 	ldrex	r3, [r3]
 8010540:	60bb      	str	r3, [r7, #8]
   return(result);
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010548:	61fb      	str	r3, [r7, #28]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	61bb      	str	r3, [r7, #24]
 8010554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010556:	6979      	ldr	r1, [r7, #20]
 8010558:	69ba      	ldr	r2, [r7, #24]
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	613b      	str	r3, [r7, #16]
   return(result);
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e6      	bne.n	8010534 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2220      	movs	r2, #32
 801056a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7fe fef9 	bl	800f36c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801057a:	bf00      	nop
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
	...

08010584 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b09c      	sub	sp, #112	; 0x70
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010592:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801059c:	2b22      	cmp	r3, #34	; 0x22
 801059e:	f040 80be 	bne.w	801071e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80105ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80105b0:	b2d9      	uxtb	r1, r3
 80105b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105bc:	400a      	ands	r2, r1
 80105be:	b2d2      	uxtb	r2, r2
 80105c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105c6:	1c5a      	adds	r2, r3, #1
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	3b01      	subs	r3, #1
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f040 80a1 	bne.w	801072e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105f4:	e853 3f00 	ldrex	r3, [r3]
 80105f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010600:	66bb      	str	r3, [r7, #104]	; 0x68
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	461a      	mov	r2, r3
 8010608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801060a:	65bb      	str	r3, [r7, #88]	; 0x58
 801060c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010612:	e841 2300 	strex	r3, r2, [r1]
 8010616:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061a:	2b00      	cmp	r3, #0
 801061c:	d1e6      	bne.n	80105ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3308      	adds	r3, #8
 8010624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010628:	e853 3f00 	ldrex	r3, [r3]
 801062c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801062e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010630:	f023 0301 	bic.w	r3, r3, #1
 8010634:	667b      	str	r3, [r7, #100]	; 0x64
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3308      	adds	r3, #8
 801063c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801063e:	647a      	str	r2, [r7, #68]	; 0x44
 8010640:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010642:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010646:	e841 2300 	strex	r3, r2, [r1]
 801064a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801064c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801064e:	2b00      	cmp	r3, #0
 8010650:	d1e5      	bne.n	801061e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2220      	movs	r2, #32
 8010656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a33      	ldr	r2, [pc, #204]	; (8010738 <UART_RxISR_8BIT+0x1b4>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d01f      	beq.n	80106b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801067a:	2b00      	cmp	r3, #0
 801067c:	d018      	beq.n	80106b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	e853 3f00 	ldrex	r3, [r3]
 801068a:	623b      	str	r3, [r7, #32]
   return(result);
 801068c:	6a3b      	ldr	r3, [r7, #32]
 801068e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010692:	663b      	str	r3, [r7, #96]	; 0x60
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	461a      	mov	r2, r3
 801069a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801069c:	633b      	str	r3, [r7, #48]	; 0x30
 801069e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106a4:	e841 2300 	strex	r3, r2, [r1]
 80106a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e6      	bne.n	801067e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d12e      	bne.n	8010716 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	e853 3f00 	ldrex	r3, [r3]
 80106ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f023 0310 	bic.w	r3, r3, #16
 80106d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106dc:	61fb      	str	r3, [r7, #28]
 80106de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e0:	69b9      	ldr	r1, [r7, #24]
 80106e2:	69fa      	ldr	r2, [r7, #28]
 80106e4:	e841 2300 	strex	r3, r2, [r1]
 80106e8:	617b      	str	r3, [r7, #20]
   return(result);
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1e6      	bne.n	80106be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	69db      	ldr	r3, [r3, #28]
 80106f6:	f003 0310 	and.w	r3, r3, #16
 80106fa:	2b10      	cmp	r3, #16
 80106fc:	d103      	bne.n	8010706 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2210      	movs	r2, #16
 8010704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801070c:	4619      	mov	r1, r3
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f7fe fe40 	bl	800f394 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010714:	e00b      	b.n	801072e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7ef ffa2 	bl	8000660 <HAL_UART_RxCpltCallback>
}
 801071c:	e007      	b.n	801072e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	699a      	ldr	r2, [r3, #24]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f042 0208 	orr.w	r2, r2, #8
 801072c:	619a      	str	r2, [r3, #24]
}
 801072e:	bf00      	nop
 8010730:	3770      	adds	r7, #112	; 0x70
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	58000c00 	.word	0x58000c00

0801073c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b09c      	sub	sp, #112	; 0x70
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801074a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010754:	2b22      	cmp	r3, #34	; 0x22
 8010756:	f040 80be 	bne.w	80108d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010760:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010768:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801076a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801076e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010772:	4013      	ands	r3, r2
 8010774:	b29a      	uxth	r2, r3
 8010776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010778:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801077e:	1c9a      	adds	r2, r3, #2
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801078a:	b29b      	uxth	r3, r3
 801078c:	3b01      	subs	r3, #1
 801078e:	b29a      	uxth	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801079c:	b29b      	uxth	r3, r3
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f040 80a1 	bne.w	80108e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107ac:	e853 3f00 	ldrex	r3, [r3]
 80107b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80107b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80107b8:	667b      	str	r3, [r7, #100]	; 0x64
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	461a      	mov	r2, r3
 80107c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107c2:	657b      	str	r3, [r7, #84]	; 0x54
 80107c4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80107ca:	e841 2300 	strex	r3, r2, [r1]
 80107ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80107d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1e6      	bne.n	80107a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	3308      	adds	r3, #8
 80107dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e0:	e853 3f00 	ldrex	r3, [r3]
 80107e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	f023 0301 	bic.w	r3, r3, #1
 80107ec:	663b      	str	r3, [r7, #96]	; 0x60
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	3308      	adds	r3, #8
 80107f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107f6:	643a      	str	r2, [r7, #64]	; 0x40
 80107f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107fe:	e841 2300 	strex	r3, r2, [r1]
 8010802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1e5      	bne.n	80107d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2220      	movs	r2, #32
 801080e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4a33      	ldr	r2, [pc, #204]	; (80108f0 <UART_RxISR_16BIT+0x1b4>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d01f      	beq.n	8010868 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010832:	2b00      	cmp	r3, #0
 8010834:	d018      	beq.n	8010868 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801083c:	6a3b      	ldr	r3, [r7, #32]
 801083e:	e853 3f00 	ldrex	r3, [r3]
 8010842:	61fb      	str	r3, [r7, #28]
   return(result);
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801084a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	461a      	mov	r2, r3
 8010852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010856:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801085a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801085c:	e841 2300 	strex	r3, r2, [r1]
 8010860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1e6      	bne.n	8010836 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086c:	2b01      	cmp	r3, #1
 801086e:	d12e      	bne.n	80108ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	e853 3f00 	ldrex	r3, [r3]
 8010882:	60bb      	str	r3, [r7, #8]
   return(result);
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	f023 0310 	bic.w	r3, r3, #16
 801088a:	65bb      	str	r3, [r7, #88]	; 0x58
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	461a      	mov	r2, r3
 8010892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010894:	61bb      	str	r3, [r7, #24]
 8010896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010898:	6979      	ldr	r1, [r7, #20]
 801089a:	69ba      	ldr	r2, [r7, #24]
 801089c:	e841 2300 	strex	r3, r2, [r1]
 80108a0:	613b      	str	r3, [r7, #16]
   return(result);
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1e6      	bne.n	8010876 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	69db      	ldr	r3, [r3, #28]
 80108ae:	f003 0310 	and.w	r3, r3, #16
 80108b2:	2b10      	cmp	r3, #16
 80108b4:	d103      	bne.n	80108be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2210      	movs	r2, #16
 80108bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108c4:	4619      	mov	r1, r3
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7fe fd64 	bl	800f394 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108cc:	e00b      	b.n	80108e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ef fec6 	bl	8000660 <HAL_UART_RxCpltCallback>
}
 80108d4:	e007      	b.n	80108e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	699a      	ldr	r2, [r3, #24]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f042 0208 	orr.w	r2, r2, #8
 80108e4:	619a      	str	r2, [r3, #24]
}
 80108e6:	bf00      	nop
 80108e8:	3770      	adds	r7, #112	; 0x70
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	58000c00 	.word	0x58000c00

080108f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b0ac      	sub	sp, #176	; 0xb0
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010902:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	69db      	ldr	r3, [r3, #28]
 801090c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801092a:	2b22      	cmp	r3, #34	; 0x22
 801092c:	f040 8180 	bne.w	8010c30 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010936:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801093a:	e123      	b.n	8010b84 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010942:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010946:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801094a:	b2d9      	uxtb	r1, r3
 801094c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010950:	b2da      	uxtb	r2, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010956:	400a      	ands	r2, r1
 8010958:	b2d2      	uxtb	r2, r2
 801095a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801096c:	b29b      	uxth	r3, r3
 801096e:	3b01      	subs	r3, #1
 8010970:	b29a      	uxth	r2, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	69db      	ldr	r3, [r3, #28]
 801097e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010986:	f003 0307 	and.w	r3, r3, #7
 801098a:	2b00      	cmp	r3, #0
 801098c:	d053      	beq.n	8010a36 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801098e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010992:	f003 0301 	and.w	r3, r3, #1
 8010996:	2b00      	cmp	r3, #0
 8010998:	d011      	beq.n	80109be <UART_RxISR_8BIT_FIFOEN+0xca>
 801099a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801099e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d00b      	beq.n	80109be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2201      	movs	r2, #1
 80109ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109b4:	f043 0201 	orr.w	r2, r3, #1
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109c2:	f003 0302 	and.w	r3, r3, #2
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d011      	beq.n	80109ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80109ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109ce:	f003 0301 	and.w	r3, r3, #1
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d00b      	beq.n	80109ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2202      	movs	r2, #2
 80109dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109e4:	f043 0204 	orr.w	r2, r3, #4
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109f2:	f003 0304 	and.w	r3, r3, #4
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d011      	beq.n	8010a1e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80109fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109fe:	f003 0301 	and.w	r3, r3, #1
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00b      	beq.n	8010a1e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2204      	movs	r2, #4
 8010a0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a14:	f043 0202 	orr.w	r2, r3, #2
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d006      	beq.n	8010a36 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7fe fca9 	bl	800f380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	f040 80a0 	bne.w	8010b84 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a4c:	e853 3f00 	ldrex	r3, [r3]
 8010a50:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	461a      	mov	r2, r3
 8010a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010a68:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010a6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010a6e:	e841 2300 	strex	r3, r2, [r1]
 8010a72:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1e4      	bne.n	8010a44 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	3308      	adds	r3, #8
 8010a80:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a84:	e853 3f00 	ldrex	r3, [r3]
 8010a88:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a8c:	4b6e      	ldr	r3, [pc, #440]	; (8010c48 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010a8e:	4013      	ands	r3, r2
 8010a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	3308      	adds	r3, #8
 8010a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a9e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010aa0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010aa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010aa6:	e841 2300 	strex	r3, r2, [r1]
 8010aaa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1e3      	bne.n	8010a7a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2220      	movs	r2, #32
 8010ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2200      	movs	r2, #0
 8010abe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4a60      	ldr	r2, [pc, #384]	; (8010c4c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d021      	beq.n	8010b14 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d01a      	beq.n	8010b14 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ae6:	e853 3f00 	ldrex	r3, [r3]
 8010aea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	461a      	mov	r2, r3
 8010afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b00:	657b      	str	r3, [r7, #84]	; 0x54
 8010b02:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b08:	e841 2300 	strex	r3, r2, [r1]
 8010b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1e4      	bne.n	8010ade <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d130      	bne.n	8010b7e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2a:	e853 3f00 	ldrex	r3, [r3]
 8010b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b32:	f023 0310 	bic.w	r3, r3, #16
 8010b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	461a      	mov	r2, r3
 8010b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b44:	643b      	str	r3, [r7, #64]	; 0x40
 8010b46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b4c:	e841 2300 	strex	r3, r2, [r1]
 8010b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1e4      	bne.n	8010b22 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	69db      	ldr	r3, [r3, #28]
 8010b5e:	f003 0310 	and.w	r3, r3, #16
 8010b62:	2b10      	cmp	r3, #16
 8010b64:	d103      	bne.n	8010b6e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2210      	movs	r2, #16
 8010b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b74:	4619      	mov	r1, r3
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7fe fc0c 	bl	800f394 <HAL_UARTEx_RxEventCallback>
 8010b7c:	e002      	b.n	8010b84 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7ef fd6e 	bl	8000660 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010b84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d006      	beq.n	8010b9a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b90:	f003 0320 	and.w	r3, r3, #32
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f47f aed1 	bne.w	801093c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ba0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010ba4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d049      	beq.n	8010c40 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010bb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d242      	bcs.n	8010c40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3308      	adds	r3, #8
 8010bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	e853 3f00 	ldrex	r3, [r3]
 8010bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3308      	adds	r3, #8
 8010bda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010be6:	e841 2300 	strex	r3, r2, [r1]
 8010bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d1e3      	bne.n	8010bba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4a16      	ldr	r2, [pc, #88]	; (8010c50 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010bf6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	e853 3f00 	ldrex	r3, [r3]
 8010c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	f043 0320 	orr.w	r3, r3, #32
 8010c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	461a      	mov	r2, r3
 8010c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c1a:	61bb      	str	r3, [r7, #24]
 8010c1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c1e:	6979      	ldr	r1, [r7, #20]
 8010c20:	69ba      	ldr	r2, [r7, #24]
 8010c22:	e841 2300 	strex	r3, r2, [r1]
 8010c26:	613b      	str	r3, [r7, #16]
   return(result);
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1e4      	bne.n	8010bf8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010c2e:	e007      	b.n	8010c40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	699a      	ldr	r2, [r3, #24]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f042 0208 	orr.w	r2, r2, #8
 8010c3e:	619a      	str	r2, [r3, #24]
}
 8010c40:	bf00      	nop
 8010c42:	37b0      	adds	r7, #176	; 0xb0
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	effffffe 	.word	0xeffffffe
 8010c4c:	58000c00 	.word	0x58000c00
 8010c50:	08010585 	.word	0x08010585

08010c54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b0ae      	sub	sp, #184	; 0xb8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c62:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	69db      	ldr	r3, [r3, #28]
 8010c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c8a:	2b22      	cmp	r3, #34	; 0x22
 8010c8c:	f040 8184 	bne.w	8010f98 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c96:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c9a:	e127      	b.n	8010eec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010cae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010cb2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010cb6:	4013      	ands	r3, r2
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010cbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cc4:	1c9a      	adds	r2, r3, #2
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	69db      	ldr	r3, [r3, #28]
 8010ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cea:	f003 0307 	and.w	r3, r3, #7
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d053      	beq.n	8010d9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010cf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d011      	beq.n	8010d22 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00b      	beq.n	8010d22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d18:	f043 0201 	orr.w	r2, r3, #1
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d26:	f003 0302 	and.w	r3, r3, #2
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d011      	beq.n	8010d52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d32:	f003 0301 	and.w	r3, r3, #1
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00b      	beq.n	8010d52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2202      	movs	r2, #2
 8010d40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d48:	f043 0204 	orr.w	r2, r3, #4
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d56:	f003 0304 	and.w	r3, r3, #4
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d011      	beq.n	8010d82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d62:	f003 0301 	and.w	r3, r3, #1
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00b      	beq.n	8010d82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2204      	movs	r2, #4
 8010d70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d78:	f043 0202 	orr.w	r2, r3, #2
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d006      	beq.n	8010d9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7fe faf7 	bl	800f380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2200      	movs	r2, #0
 8010d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f040 80a2 	bne.w	8010eec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010db0:	e853 3f00 	ldrex	r3, [r3]
 8010db4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010dca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010dce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010dd6:	e841 2300 	strex	r3, r2, [r1]
 8010dda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1e2      	bne.n	8010da8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	3308      	adds	r3, #8
 8010de8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dec:	e853 3f00 	ldrex	r3, [r3]
 8010df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010df2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010df4:	4b6e      	ldr	r3, [pc, #440]	; (8010fb0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010df6:	4013      	ands	r3, r2
 8010df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	3308      	adds	r3, #8
 8010e02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010e0e:	e841 2300 	strex	r3, r2, [r1]
 8010e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1e3      	bne.n	8010de2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2220      	movs	r2, #32
 8010e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2200      	movs	r2, #0
 8010e26:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a60      	ldr	r2, [pc, #384]	; (8010fb4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d021      	beq.n	8010e7c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d01a      	beq.n	8010e7c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e4e:	e853 3f00 	ldrex	r3, [r3]
 8010e52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	461a      	mov	r2, r3
 8010e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e70:	e841 2300 	strex	r3, r2, [r1]
 8010e74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d1e4      	bne.n	8010e46 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d130      	bne.n	8010ee6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e92:	e853 3f00 	ldrex	r3, [r3]
 8010e96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9a:	f023 0310 	bic.w	r3, r3, #16
 8010e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010eac:	647b      	str	r3, [r7, #68]	; 0x44
 8010eae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eb4:	e841 2300 	strex	r3, r2, [r1]
 8010eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d1e4      	bne.n	8010e8a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	f003 0310 	and.w	r3, r3, #16
 8010eca:	2b10      	cmp	r3, #16
 8010ecc:	d103      	bne.n	8010ed6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2210      	movs	r2, #16
 8010ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010edc:	4619      	mov	r1, r3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7fe fa58 	bl	800f394 <HAL_UARTEx_RxEventCallback>
 8010ee4:	e002      	b.n	8010eec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7ef fbba 	bl	8000660 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010eec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d006      	beq.n	8010f02 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ef8:	f003 0320 	and.w	r3, r3, #32
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f47f aecd 	bne.w	8010c9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f08:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010f0c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d049      	beq.n	8010fa8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f1a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d242      	bcs.n	8010fa8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	3308      	adds	r3, #8
 8010f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	e853 3f00 	ldrex	r3, [r3]
 8010f30:	623b      	str	r3, [r7, #32]
   return(result);
 8010f32:	6a3b      	ldr	r3, [r7, #32]
 8010f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	3308      	adds	r3, #8
 8010f42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010f46:	633a      	str	r2, [r7, #48]	; 0x30
 8010f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f4e:	e841 2300 	strex	r3, r2, [r1]
 8010f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1e3      	bne.n	8010f22 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4a16      	ldr	r2, [pc, #88]	; (8010fb8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010f5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	e853 3f00 	ldrex	r3, [r3]
 8010f6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f043 0320 	orr.w	r3, r3, #32
 8010f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f82:	61fb      	str	r3, [r7, #28]
 8010f84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f86:	69b9      	ldr	r1, [r7, #24]
 8010f88:	69fa      	ldr	r2, [r7, #28]
 8010f8a:	e841 2300 	strex	r3, r2, [r1]
 8010f8e:	617b      	str	r3, [r7, #20]
   return(result);
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d1e4      	bne.n	8010f60 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010f96:	e007      	b.n	8010fa8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	699a      	ldr	r2, [r3, #24]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f042 0208 	orr.w	r2, r2, #8
 8010fa6:	619a      	str	r2, [r3, #24]
}
 8010fa8:	bf00      	nop
 8010faa:	37b8      	adds	r7, #184	; 0xb8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	effffffe 	.word	0xeffffffe
 8010fb4:	58000c00 	.word	0x58000c00
 8010fb8:	0801073d 	.word	0x0801073d

08010fbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010fc4:	bf00      	nop
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010fd8:	bf00      	nop
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010fec:	bf00      	nop
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011006:	2b01      	cmp	r3, #1
 8011008:	d101      	bne.n	801100e <HAL_UARTEx_DisableFifoMode+0x16>
 801100a:	2302      	movs	r3, #2
 801100c:	e027      	b.n	801105e <HAL_UARTEx_DisableFifoMode+0x66>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2201      	movs	r2, #1
 8011012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2224      	movs	r2, #36	; 0x24
 801101a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f022 0201 	bic.w	r2, r2, #1
 8011034:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801103c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2200      	movs	r2, #0
 8011042:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2220      	movs	r2, #32
 8011050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2200      	movs	r2, #0
 8011058:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3714      	adds	r7, #20
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr

0801106a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801106a:	b580      	push	{r7, lr}
 801106c:	b084      	sub	sp, #16
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
 8011072:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801107a:	2b01      	cmp	r3, #1
 801107c:	d101      	bne.n	8011082 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801107e:	2302      	movs	r3, #2
 8011080:	e02d      	b.n	80110de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2201      	movs	r2, #1
 8011086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2224      	movs	r2, #36	; 0x24
 801108e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f022 0201 	bic.w	r2, r2, #1
 80110a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	689b      	ldr	r3, [r3, #8]
 80110b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	683a      	ldr	r2, [r7, #0]
 80110ba:	430a      	orrs	r2, r1
 80110bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f000 f850 	bl	8011164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2220      	movs	r2, #32
 80110d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}

080110e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b084      	sub	sp, #16
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
 80110ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d101      	bne.n	80110fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80110fa:	2302      	movs	r3, #2
 80110fc:	e02d      	b.n	801115a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2201      	movs	r2, #1
 8011102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2224      	movs	r2, #36	; 0x24
 801110a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f022 0201 	bic.w	r2, r2, #1
 8011124:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	689b      	ldr	r3, [r3, #8]
 801112c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	683a      	ldr	r2, [r7, #0]
 8011136:	430a      	orrs	r2, r1
 8011138:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f812 	bl	8011164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2220      	movs	r2, #32
 801114c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2200      	movs	r2, #0
 8011154:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
	...

08011164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011164:	b480      	push	{r7}
 8011166:	b085      	sub	sp, #20
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011170:	2b00      	cmp	r3, #0
 8011172:	d108      	bne.n	8011186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2201      	movs	r2, #1
 8011178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2201      	movs	r2, #1
 8011180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011184:	e031      	b.n	80111ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011186:	2310      	movs	r3, #16
 8011188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801118a:	2310      	movs	r3, #16
 801118c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	0e5b      	lsrs	r3, r3, #25
 8011196:	b2db      	uxtb	r3, r3
 8011198:	f003 0307 	and.w	r3, r3, #7
 801119c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	0f5b      	lsrs	r3, r3, #29
 80111a6:	b2db      	uxtb	r3, r3
 80111a8:	f003 0307 	and.w	r3, r3, #7
 80111ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111ae:	7bbb      	ldrb	r3, [r7, #14]
 80111b0:	7b3a      	ldrb	r2, [r7, #12]
 80111b2:	4911      	ldr	r1, [pc, #68]	; (80111f8 <UARTEx_SetNbDataToProcess+0x94>)
 80111b4:	5c8a      	ldrb	r2, [r1, r2]
 80111b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111ba:	7b3a      	ldrb	r2, [r7, #12]
 80111bc:	490f      	ldr	r1, [pc, #60]	; (80111fc <UARTEx_SetNbDataToProcess+0x98>)
 80111be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111cc:	7bfb      	ldrb	r3, [r7, #15]
 80111ce:	7b7a      	ldrb	r2, [r7, #13]
 80111d0:	4909      	ldr	r1, [pc, #36]	; (80111f8 <UARTEx_SetNbDataToProcess+0x94>)
 80111d2:	5c8a      	ldrb	r2, [r1, r2]
 80111d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111d8:	7b7a      	ldrb	r2, [r7, #13]
 80111da:	4908      	ldr	r1, [pc, #32]	; (80111fc <UARTEx_SetNbDataToProcess+0x98>)
 80111dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111de:	fb93 f3f2 	sdiv	r3, r3, r2
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80111ea:	bf00      	nop
 80111ec:	3714      	adds	r7, #20
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	0801555c 	.word	0x0801555c
 80111fc:	08015564 	.word	0x08015564

08011200 <__NVIC_SetPriority>:
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	4603      	mov	r3, r0
 8011208:	6039      	str	r1, [r7, #0]
 801120a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801120c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011210:	2b00      	cmp	r3, #0
 8011212:	db0a      	blt.n	801122a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	b2da      	uxtb	r2, r3
 8011218:	490c      	ldr	r1, [pc, #48]	; (801124c <__NVIC_SetPriority+0x4c>)
 801121a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801121e:	0112      	lsls	r2, r2, #4
 8011220:	b2d2      	uxtb	r2, r2
 8011222:	440b      	add	r3, r1
 8011224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011228:	e00a      	b.n	8011240 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	b2da      	uxtb	r2, r3
 801122e:	4908      	ldr	r1, [pc, #32]	; (8011250 <__NVIC_SetPriority+0x50>)
 8011230:	88fb      	ldrh	r3, [r7, #6]
 8011232:	f003 030f 	and.w	r3, r3, #15
 8011236:	3b04      	subs	r3, #4
 8011238:	0112      	lsls	r2, r2, #4
 801123a:	b2d2      	uxtb	r2, r2
 801123c:	440b      	add	r3, r1
 801123e:	761a      	strb	r2, [r3, #24]
}
 8011240:	bf00      	nop
 8011242:	370c      	adds	r7, #12
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr
 801124c:	e000e100 	.word	0xe000e100
 8011250:	e000ed00 	.word	0xe000ed00

08011254 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011254:	b580      	push	{r7, lr}
 8011256:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011258:	4b05      	ldr	r3, [pc, #20]	; (8011270 <SysTick_Handler+0x1c>)
 801125a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801125c:	f002 f9ce 	bl	80135fc <xTaskGetSchedulerState>
 8011260:	4603      	mov	r3, r0
 8011262:	2b01      	cmp	r3, #1
 8011264:	d001      	beq.n	801126a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011266:	f002 ffef 	bl	8014248 <xPortSysTickHandler>
  }
}
 801126a:	bf00      	nop
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	e000e010 	.word	0xe000e010

08011274 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011274:	b580      	push	{r7, lr}
 8011276:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011278:	2100      	movs	r1, #0
 801127a:	f06f 0004 	mvn.w	r0, #4
 801127e:	f7ff ffbf 	bl	8011200 <__NVIC_SetPriority>
#endif
}
 8011282:	bf00      	nop
 8011284:	bd80      	pop	{r7, pc}
	...

08011288 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801128e:	f3ef 8305 	mrs	r3, IPSR
 8011292:	603b      	str	r3, [r7, #0]
  return(result);
 8011294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011296:	2b00      	cmp	r3, #0
 8011298:	d003      	beq.n	80112a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801129a:	f06f 0305 	mvn.w	r3, #5
 801129e:	607b      	str	r3, [r7, #4]
 80112a0:	e00c      	b.n	80112bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80112a2:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <osKernelInitialize+0x44>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d105      	bne.n	80112b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80112aa:	4b08      	ldr	r3, [pc, #32]	; (80112cc <osKernelInitialize+0x44>)
 80112ac:	2201      	movs	r2, #1
 80112ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	607b      	str	r3, [r7, #4]
 80112b4:	e002      	b.n	80112bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80112b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80112bc:	687b      	ldr	r3, [r7, #4]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	370c      	adds	r7, #12
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	24000c3c 	.word	0x24000c3c

080112d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112d6:	f3ef 8305 	mrs	r3, IPSR
 80112da:	603b      	str	r3, [r7, #0]
  return(result);
 80112dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d003      	beq.n	80112ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80112e2:	f06f 0305 	mvn.w	r3, #5
 80112e6:	607b      	str	r3, [r7, #4]
 80112e8:	e010      	b.n	801130c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80112ea:	4b0b      	ldr	r3, [pc, #44]	; (8011318 <osKernelStart+0x48>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d109      	bne.n	8011306 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80112f2:	f7ff ffbf 	bl	8011274 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80112f6:	4b08      	ldr	r3, [pc, #32]	; (8011318 <osKernelStart+0x48>)
 80112f8:	2202      	movs	r2, #2
 80112fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80112fc:	f001 fc98 	bl	8012c30 <vTaskStartScheduler>
      stat = osOK;
 8011300:	2300      	movs	r3, #0
 8011302:	607b      	str	r3, [r7, #4]
 8011304:	e002      	b.n	801130c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801130a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801130c:	687b      	ldr	r3, [r7, #4]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	24000c3c 	.word	0x24000c3c

0801131c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801131c:	b580      	push	{r7, lr}
 801131e:	b08e      	sub	sp, #56	; 0x38
 8011320:	af04      	add	r7, sp, #16
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011328:	2300      	movs	r3, #0
 801132a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801132c:	f3ef 8305 	mrs	r3, IPSR
 8011330:	617b      	str	r3, [r7, #20]
  return(result);
 8011332:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011334:	2b00      	cmp	r3, #0
 8011336:	d17e      	bne.n	8011436 <osThreadNew+0x11a>
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d07b      	beq.n	8011436 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801133e:	2380      	movs	r3, #128	; 0x80
 8011340:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011342:	2318      	movs	r3, #24
 8011344:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011346:	2300      	movs	r3, #0
 8011348:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801134a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801134e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d045      	beq.n	80113e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d002      	beq.n	8011364 <osThreadNew+0x48>
        name = attr->name;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	699b      	ldr	r3, [r3, #24]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d002      	beq.n	8011372 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	699b      	ldr	r3, [r3, #24]
 8011370:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d008      	beq.n	801138a <osThreadNew+0x6e>
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	2b38      	cmp	r3, #56	; 0x38
 801137c:	d805      	bhi.n	801138a <osThreadNew+0x6e>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	f003 0301 	and.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	d001      	beq.n	801138e <osThreadNew+0x72>
        return (NULL);
 801138a:	2300      	movs	r3, #0
 801138c:	e054      	b.n	8011438 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	695b      	ldr	r3, [r3, #20]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d003      	beq.n	801139e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	089b      	lsrs	r3, r3, #2
 801139c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00e      	beq.n	80113c4 <osThreadNew+0xa8>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	2b5b      	cmp	r3, #91	; 0x5b
 80113ac:	d90a      	bls.n	80113c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d006      	beq.n	80113c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	695b      	ldr	r3, [r3, #20]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d002      	beq.n	80113c4 <osThreadNew+0xa8>
        mem = 1;
 80113be:	2301      	movs	r3, #1
 80113c0:	61bb      	str	r3, [r7, #24]
 80113c2:	e010      	b.n	80113e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d10c      	bne.n	80113e6 <osThreadNew+0xca>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d108      	bne.n	80113e6 <osThreadNew+0xca>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	691b      	ldr	r3, [r3, #16]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d104      	bne.n	80113e6 <osThreadNew+0xca>
          mem = 0;
 80113dc:	2300      	movs	r3, #0
 80113de:	61bb      	str	r3, [r7, #24]
 80113e0:	e001      	b.n	80113e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d110      	bne.n	801140e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80113f0:	687a      	ldr	r2, [r7, #4]
 80113f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80113f4:	9202      	str	r2, [sp, #8]
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	6a3a      	ldr	r2, [r7, #32]
 8011400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f001 f924 	bl	8012650 <xTaskCreateStatic>
 8011408:	4603      	mov	r3, r0
 801140a:	613b      	str	r3, [r7, #16]
 801140c:	e013      	b.n	8011436 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d110      	bne.n	8011436 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011414:	6a3b      	ldr	r3, [r7, #32]
 8011416:	b29a      	uxth	r2, r3
 8011418:	f107 0310 	add.w	r3, r7, #16
 801141c:	9301      	str	r3, [sp, #4]
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	9300      	str	r3, [sp, #0]
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011426:	68f8      	ldr	r0, [r7, #12]
 8011428:	f001 f96f 	bl	801270a <xTaskCreate>
 801142c:	4603      	mov	r3, r0
 801142e:	2b01      	cmp	r3, #1
 8011430:	d001      	beq.n	8011436 <osThreadNew+0x11a>
            hTask = NULL;
 8011432:	2300      	movs	r3, #0
 8011434:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011436:	693b      	ldr	r3, [r7, #16]
}
 8011438:	4618      	mov	r0, r3
 801143a:	3728      	adds	r7, #40	; 0x28
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011440:	b480      	push	{r7}
 8011442:	b083      	sub	sp, #12
 8011444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011446:	f3ef 8305 	mrs	r3, IPSR
 801144a:	603b      	str	r3, [r7, #0]
  return(result);
 801144c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801144e:	2b00      	cmp	r3, #0
 8011450:	d003      	beq.n	801145a <osThreadYield+0x1a>
    stat = osErrorISR;
 8011452:	f06f 0305 	mvn.w	r3, #5
 8011456:	607b      	str	r3, [r7, #4]
 8011458:	e009      	b.n	801146e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801145a:	2300      	movs	r3, #0
 801145c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801145e:	4b07      	ldr	r3, [pc, #28]	; (801147c <osThreadYield+0x3c>)
 8011460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011464:	601a      	str	r2, [r3, #0]
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801146e:	687b      	ldr	r3, [r7, #4]
}
 8011470:	4618      	mov	r0, r3
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr
 801147c:	e000ed04 	.word	0xe000ed04

08011480 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801148c:	f3ef 8305 	mrs	r3, IPSR
 8011490:	60fb      	str	r3, [r7, #12]
  return(result);
 8011492:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011494:	2b00      	cmp	r3, #0
 8011496:	d003      	beq.n	80114a0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8011498:	f06f 0305 	mvn.w	r3, #5
 801149c:	617b      	str	r3, [r7, #20]
 801149e:	e00b      	b.n	80114b8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d103      	bne.n	80114ae <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80114a6:	f06f 0303 	mvn.w	r3, #3
 80114aa:	617b      	str	r3, [r7, #20]
 80114ac:	e004      	b.n	80114b8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80114ae:	2300      	movs	r3, #0
 80114b0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80114b2:	6938      	ldr	r0, [r7, #16]
 80114b4:	f001 faa2 	bl	80129fc <vTaskSuspend>
  }

  return (stat);
 80114b8:	697b      	ldr	r3, [r7, #20]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3718      	adds	r7, #24
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b084      	sub	sp, #16
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114ca:	f3ef 8305 	mrs	r3, IPSR
 80114ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80114d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d003      	beq.n	80114de <osDelay+0x1c>
    stat = osErrorISR;
 80114d6:	f06f 0305 	mvn.w	r3, #5
 80114da:	60fb      	str	r3, [r7, #12]
 80114dc:	e007      	b.n	80114ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80114de:	2300      	movs	r3, #0
 80114e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d002      	beq.n	80114ee <osDelay+0x2c>
      vTaskDelay(ticks);
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f001 fa53 	bl	8012994 <vTaskDelay>
    }
  }

  return (stat);
 80114ee:	68fb      	ldr	r3, [r7, #12]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3710      	adds	r7, #16
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011500:	2300      	movs	r3, #0
 8011502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011504:	f3ef 8305 	mrs	r3, IPSR
 8011508:	60fb      	str	r3, [r7, #12]
  return(result);
 801150a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801150c:	2b00      	cmp	r3, #0
 801150e:	d12d      	bne.n	801156c <osEventFlagsNew+0x74>
    mem = -1;
 8011510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011514:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d015      	beq.n	8011548 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d006      	beq.n	8011532 <osEventFlagsNew+0x3a>
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	2b1f      	cmp	r3, #31
 801152a:	d902      	bls.n	8011532 <osEventFlagsNew+0x3a>
        mem = 1;
 801152c:	2301      	movs	r3, #1
 801152e:	613b      	str	r3, [r7, #16]
 8011530:	e00c      	b.n	801154c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d108      	bne.n	801154c <osEventFlagsNew+0x54>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d104      	bne.n	801154c <osEventFlagsNew+0x54>
          mem = 0;
 8011542:	2300      	movs	r3, #0
 8011544:	613b      	str	r3, [r7, #16]
 8011546:	e001      	b.n	801154c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8011548:	2300      	movs	r3, #0
 801154a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	2b01      	cmp	r3, #1
 8011550:	d106      	bne.n	8011560 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	4618      	mov	r0, r3
 8011558:	f000 f8ec 	bl	8011734 <xEventGroupCreateStatic>
 801155c:	6178      	str	r0, [r7, #20]
 801155e:	e005      	b.n	801156c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d102      	bne.n	801156c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8011566:	f000 f91c 	bl	80117a2 <xEventGroupCreate>
 801156a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801156c:	697b      	ldr	r3, [r7, #20]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3718      	adds	r7, #24
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
	...

08011578 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8011578:	b580      	push	{r7, lr}
 801157a:	b086      	sub	sp, #24
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
 8011580:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d004      	beq.n	8011596 <osEventFlagsSet+0x1e>
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011592:	2b00      	cmp	r3, #0
 8011594:	d003      	beq.n	801159e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8011596:	f06f 0303 	mvn.w	r3, #3
 801159a:	617b      	str	r3, [r7, #20]
 801159c:	e028      	b.n	80115f0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801159e:	f3ef 8305 	mrs	r3, IPSR
 80115a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80115a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d01d      	beq.n	80115e6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80115aa:	2300      	movs	r3, #0
 80115ac:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80115ae:	f107 0308 	add.w	r3, r7, #8
 80115b2:	461a      	mov	r2, r3
 80115b4:	6839      	ldr	r1, [r7, #0]
 80115b6:	6938      	ldr	r0, [r7, #16]
 80115b8:	f000 fa96 	bl	8011ae8 <xEventGroupSetBitsFromISR>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d103      	bne.n	80115ca <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80115c2:	f06f 0302 	mvn.w	r3, #2
 80115c6:	617b      	str	r3, [r7, #20]
 80115c8:	e012      	b.n	80115f0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00d      	beq.n	80115f0 <osEventFlagsSet+0x78>
 80115d4:	4b09      	ldr	r3, [pc, #36]	; (80115fc <osEventFlagsSet+0x84>)
 80115d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115da:	601a      	str	r2, [r3, #0]
 80115dc:	f3bf 8f4f 	dsb	sy
 80115e0:	f3bf 8f6f 	isb	sy
 80115e4:	e004      	b.n	80115f0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80115e6:	6839      	ldr	r1, [r7, #0]
 80115e8:	6938      	ldr	r0, [r7, #16]
 80115ea:	f000 f9c3 	bl	8011974 <xEventGroupSetBits>
 80115ee:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80115f0:	697b      	ldr	r3, [r7, #20]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3718      	adds	r7, #24
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	e000ed04 	.word	0xe000ed04

08011600 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011600:	b580      	push	{r7, lr}
 8011602:	b08c      	sub	sp, #48	; 0x30
 8011604:	af02      	add	r7, sp, #8
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
 801160c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d004      	beq.n	8011622 <osEventFlagsWait+0x22>
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801161e:	2b00      	cmp	r3, #0
 8011620:	d003      	beq.n	801162a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8011622:	f06f 0303 	mvn.w	r3, #3
 8011626:	61fb      	str	r3, [r7, #28]
 8011628:	e04b      	b.n	80116c2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801162a:	f3ef 8305 	mrs	r3, IPSR
 801162e:	617b      	str	r3, [r7, #20]
  return(result);
 8011630:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011632:	2b00      	cmp	r3, #0
 8011634:	d003      	beq.n	801163e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8011636:	f06f 0305 	mvn.w	r3, #5
 801163a:	61fb      	str	r3, [r7, #28]
 801163c:	e041      	b.n	80116c2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f003 0301 	and.w	r3, r3, #1
 8011644:	2b00      	cmp	r3, #0
 8011646:	d002      	beq.n	801164e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8011648:	2301      	movs	r3, #1
 801164a:	627b      	str	r3, [r7, #36]	; 0x24
 801164c:	e001      	b.n	8011652 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801164e:	2300      	movs	r3, #0
 8011650:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f003 0302 	and.w	r3, r3, #2
 8011658:	2b00      	cmp	r3, #0
 801165a:	d002      	beq.n	8011662 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801165c:	2300      	movs	r3, #0
 801165e:	623b      	str	r3, [r7, #32]
 8011660:	e001      	b.n	8011666 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8011662:	2301      	movs	r3, #1
 8011664:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	9300      	str	r3, [sp, #0]
 801166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166c:	6a3a      	ldr	r2, [r7, #32]
 801166e:	68b9      	ldr	r1, [r7, #8]
 8011670:	69b8      	ldr	r0, [r7, #24]
 8011672:	f000 f8b1 	bl	80117d8 <xEventGroupWaitBits>
 8011676:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f003 0301 	and.w	r3, r3, #1
 801167e:	2b00      	cmp	r3, #0
 8011680:	d010      	beq.n	80116a4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8011682:	68ba      	ldr	r2, [r7, #8]
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	4013      	ands	r3, r2
 8011688:	68ba      	ldr	r2, [r7, #8]
 801168a:	429a      	cmp	r2, r3
 801168c:	d019      	beq.n	80116c2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d003      	beq.n	801169c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011694:	f06f 0301 	mvn.w	r3, #1
 8011698:	61fb      	str	r3, [r7, #28]
 801169a:	e012      	b.n	80116c2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801169c:	f06f 0302 	mvn.w	r3, #2
 80116a0:	61fb      	str	r3, [r7, #28]
 80116a2:	e00e      	b.n	80116c2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	4013      	ands	r3, r2
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d109      	bne.n	80116c2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d003      	beq.n	80116bc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80116b4:	f06f 0301 	mvn.w	r3, #1
 80116b8:	61fb      	str	r3, [r7, #28]
 80116ba:	e002      	b.n	80116c2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80116bc:	f06f 0302 	mvn.w	r3, #2
 80116c0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80116c2:	69fb      	ldr	r3, [r7, #28]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3728      	adds	r7, #40	; 0x28
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	60f8      	str	r0, [r7, #12]
 80116d4:	60b9      	str	r1, [r7, #8]
 80116d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	4a07      	ldr	r2, [pc, #28]	; (80116f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80116dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	4a06      	ldr	r2, [pc, #24]	; (80116fc <vApplicationGetIdleTaskMemory+0x30>)
 80116e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2280      	movs	r2, #128	; 0x80
 80116e8:	601a      	str	r2, [r3, #0]
}
 80116ea:	bf00      	nop
 80116ec:	3714      	adds	r7, #20
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop
 80116f8:	24000c40 	.word	0x24000c40
 80116fc:	24000c9c 	.word	0x24000c9c

08011700 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011700:	b480      	push	{r7}
 8011702:	b085      	sub	sp, #20
 8011704:	af00      	add	r7, sp, #0
 8011706:	60f8      	str	r0, [r7, #12]
 8011708:	60b9      	str	r1, [r7, #8]
 801170a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	4a07      	ldr	r2, [pc, #28]	; (801172c <vApplicationGetTimerTaskMemory+0x2c>)
 8011710:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	4a06      	ldr	r2, [pc, #24]	; (8011730 <vApplicationGetTimerTaskMemory+0x30>)
 8011716:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801171e:	601a      	str	r2, [r3, #0]
}
 8011720:	bf00      	nop
 8011722:	3714      	adds	r7, #20
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	24000e9c 	.word	0x24000e9c
 8011730:	24000ef8 	.word	0x24000ef8

08011734 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d10a      	bne.n	8011758 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011746:	f383 8811 	msr	BASEPRI, r3
 801174a:	f3bf 8f6f 	isb	sy
 801174e:	f3bf 8f4f 	dsb	sy
 8011752:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011754:	bf00      	nop
 8011756:	e7fe      	b.n	8011756 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011758:	2320      	movs	r3, #32
 801175a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	2b20      	cmp	r3, #32
 8011760:	d00a      	beq.n	8011778 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011766:	f383 8811 	msr	BASEPRI, r3
 801176a:	f3bf 8f6f 	isb	sy
 801176e:	f3bf 8f4f 	dsb	sy
 8011772:	60fb      	str	r3, [r7, #12]
}
 8011774:	bf00      	nop
 8011776:	e7fe      	b.n	8011776 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00a      	beq.n	8011798 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	2200      	movs	r2, #0
 8011786:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	3304      	adds	r3, #4
 801178c:	4618      	mov	r0, r3
 801178e:	f000 f9bf 	bl	8011b10 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2201      	movs	r2, #1
 8011796:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011798:	697b      	ldr	r3, [r7, #20]
	}
 801179a:	4618      	mov	r0, r3
 801179c:	3718      	adds	r7, #24
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}

080117a2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80117a2:	b580      	push	{r7, lr}
 80117a4:	b082      	sub	sp, #8
 80117a6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80117a8:	2020      	movs	r0, #32
 80117aa:	f002 fddd 	bl	8014368 <pvPortMalloc>
 80117ae:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d00a      	beq.n	80117cc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2200      	movs	r2, #0
 80117ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	3304      	adds	r3, #4
 80117c0:	4618      	mov	r0, r3
 80117c2:	f000 f9a5 	bl	8011b10 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80117cc:	687b      	ldr	r3, [r7, #4]
	}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3708      	adds	r7, #8
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
	...

080117d8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b090      	sub	sp, #64	; 0x40
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
 80117e4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80117ea:	2300      	movs	r3, #0
 80117ec:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80117ee:	2300      	movs	r3, #0
 80117f0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d10a      	bne.n	801180e <xEventGroupWaitBits+0x36>
	__asm volatile
 80117f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fc:	f383 8811 	msr	BASEPRI, r3
 8011800:	f3bf 8f6f 	isb	sy
 8011804:	f3bf 8f4f 	dsb	sy
 8011808:	623b      	str	r3, [r7, #32]
}
 801180a:	bf00      	nop
 801180c:	e7fe      	b.n	801180c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00a      	beq.n	801182e <xEventGroupWaitBits+0x56>
	__asm volatile
 8011818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181c:	f383 8811 	msr	BASEPRI, r3
 8011820:	f3bf 8f6f 	isb	sy
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	61fb      	str	r3, [r7, #28]
}
 801182a:	bf00      	nop
 801182c:	e7fe      	b.n	801182c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d10a      	bne.n	801184a <xEventGroupWaitBits+0x72>
	__asm volatile
 8011834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011838:	f383 8811 	msr	BASEPRI, r3
 801183c:	f3bf 8f6f 	isb	sy
 8011840:	f3bf 8f4f 	dsb	sy
 8011844:	61bb      	str	r3, [r7, #24]
}
 8011846:	bf00      	nop
 8011848:	e7fe      	b.n	8011848 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801184a:	f001 fed7 	bl	80135fc <xTaskGetSchedulerState>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d102      	bne.n	801185a <xEventGroupWaitBits+0x82>
 8011854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011856:	2b00      	cmp	r3, #0
 8011858:	d101      	bne.n	801185e <xEventGroupWaitBits+0x86>
 801185a:	2301      	movs	r3, #1
 801185c:	e000      	b.n	8011860 <xEventGroupWaitBits+0x88>
 801185e:	2300      	movs	r3, #0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d10a      	bne.n	801187a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011868:	f383 8811 	msr	BASEPRI, r3
 801186c:	f3bf 8f6f 	isb	sy
 8011870:	f3bf 8f4f 	dsb	sy
 8011874:	617b      	str	r3, [r7, #20]
}
 8011876:	bf00      	nop
 8011878:	e7fe      	b.n	8011878 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801187a:	f001 fa3f 	bl	8012cfc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011884:	683a      	ldr	r2, [r7, #0]
 8011886:	68b9      	ldr	r1, [r7, #8]
 8011888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801188a:	f000 f90b 	bl	8011aa4 <prvTestWaitCondition>
 801188e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00e      	beq.n	80118b4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011898:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801189a:	2300      	movs	r3, #0
 801189c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d028      	beq.n	80118f6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80118a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	43db      	mvns	r3, r3
 80118ac:	401a      	ands	r2, r3
 80118ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b0:	601a      	str	r2, [r3, #0]
 80118b2:	e020      	b.n	80118f6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80118b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d104      	bne.n	80118c4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80118ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80118be:	2301      	movs	r3, #1
 80118c0:	633b      	str	r3, [r7, #48]	; 0x30
 80118c2:	e018      	b.n	80118f6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d003      	beq.n	80118d2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80118ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80118d0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d003      	beq.n	80118e0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80118d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80118de:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80118e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e2:	1d18      	adds	r0, r3, #4
 80118e4:	68ba      	ldr	r2, [r7, #8]
 80118e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e8:	4313      	orrs	r3, r2
 80118ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118ec:	4619      	mov	r1, r3
 80118ee:	f001 fbfd 	bl	80130ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80118f2:	2300      	movs	r3, #0
 80118f4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80118f6:	f001 fa0f 	bl	8012d18 <xTaskResumeAll>
 80118fa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80118fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d031      	beq.n	8011966 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011904:	2b00      	cmp	r3, #0
 8011906:	d107      	bne.n	8011918 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011908:	4b19      	ldr	r3, [pc, #100]	; (8011970 <xEventGroupWaitBits+0x198>)
 801190a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801190e:	601a      	str	r2, [r3, #0]
 8011910:	f3bf 8f4f 	dsb	sy
 8011914:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011918:	f001 fefc 	bl	8013714 <uxTaskResetEventItemValue>
 801191c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801191e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011924:	2b00      	cmp	r3, #0
 8011926:	d11a      	bne.n	801195e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011928:	f002 fbfc 	bl	8014124 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011932:	683a      	ldr	r2, [r7, #0]
 8011934:	68b9      	ldr	r1, [r7, #8]
 8011936:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011938:	f000 f8b4 	bl	8011aa4 <prvTestWaitCondition>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d009      	beq.n	8011956 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d006      	beq.n	8011956 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	43db      	mvns	r3, r3
 8011950:	401a      	ands	r2, r3
 8011952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011954:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011956:	2301      	movs	r3, #1
 8011958:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801195a:	f002 fc13 	bl	8014184 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801195e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011964:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011968:	4618      	mov	r0, r3
 801196a:	3740      	adds	r7, #64	; 0x40
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	e000ed04 	.word	0xe000ed04

08011974 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b08e      	sub	sp, #56	; 0x38
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801197e:	2300      	movs	r3, #0
 8011980:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011986:	2300      	movs	r3, #0
 8011988:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d10a      	bne.n	80119a6 <xEventGroupSetBits+0x32>
	__asm volatile
 8011990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011994:	f383 8811 	msr	BASEPRI, r3
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	613b      	str	r3, [r7, #16]
}
 80119a2:	bf00      	nop
 80119a4:	e7fe      	b.n	80119a4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d00a      	beq.n	80119c6 <xEventGroupSetBits+0x52>
	__asm volatile
 80119b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	60fb      	str	r3, [r7, #12]
}
 80119c2:	bf00      	nop
 80119c4:	e7fe      	b.n	80119c4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c8:	3304      	adds	r3, #4
 80119ca:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ce:	3308      	adds	r3, #8
 80119d0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80119d2:	f001 f993 	bl	8012cfc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80119d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d8:	68db      	ldr	r3, [r3, #12]
 80119da:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80119dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	431a      	orrs	r2, r3
 80119e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80119e8:	e03c      	b.n	8011a64 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80119ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80119f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80119f6:	2300      	movs	r3, #0
 80119f8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80119fa:	69bb      	ldr	r3, [r7, #24]
 80119fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011a00:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011a08:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d108      	bne.n	8011a26 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	69bb      	ldr	r3, [r7, #24]
 8011a1a:	4013      	ands	r3, r2
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00b      	beq.n	8011a38 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011a20:	2301      	movs	r3, #1
 8011a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a24:	e008      	b.n	8011a38 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	4013      	ands	r3, r2
 8011a2e:	69ba      	ldr	r2, [r7, #24]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d101      	bne.n	8011a38 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011a34:	2301      	movs	r3, #1
 8011a36:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d010      	beq.n	8011a60 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d003      	beq.n	8011a50 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011a58:	4619      	mov	r1, r3
 8011a5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a5c:	f001 fc12 	bl	8013284 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a66:	6a3b      	ldr	r3, [r7, #32]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d1be      	bne.n	80119ea <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a72:	43db      	mvns	r3, r3
 8011a74:	401a      	ands	r2, r3
 8011a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a78:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011a7a:	f001 f94d 	bl	8012d18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a80:	681b      	ldr	r3, [r3, #0]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3738      	adds	r7, #56	; 0x38
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b082      	sub	sp, #8
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	6078      	str	r0, [r7, #4]
 8011a92:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011a94:	6839      	ldr	r1, [r7, #0]
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f7ff ff6c 	bl	8011974 <xEventGroupSetBits>
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b087      	sub	sp, #28
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d107      	bne.n	8011aca <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011aba:	68fa      	ldr	r2, [r7, #12]
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	4013      	ands	r3, r2
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d00a      	beq.n	8011ada <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	617b      	str	r3, [r7, #20]
 8011ac8:	e007      	b.n	8011ada <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	4013      	ands	r3, r2
 8011ad0:	68ba      	ldr	r2, [r7, #8]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d101      	bne.n	8011ada <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011ada:	697b      	ldr	r3, [r7, #20]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	371c      	adds	r7, #28
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr

08011ae8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b086      	sub	sp, #24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	68ba      	ldr	r2, [r7, #8]
 8011af8:	68f9      	ldr	r1, [r7, #12]
 8011afa:	4804      	ldr	r0, [pc, #16]	; (8011b0c <xEventGroupSetBitsFromISR+0x24>)
 8011afc:	f002 f9c4 	bl	8013e88 <xTimerPendFunctionCallFromISR>
 8011b00:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011b02:	697b      	ldr	r3, [r7, #20]
	}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3718      	adds	r7, #24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	08011a8b 	.word	0x08011a8b

08011b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f103 0208 	add.w	r2, r3, #8
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f103 0208 	add.w	r2, r3, #8
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f103 0208 	add.w	r2, r3, #8
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011b44:	bf00      	nop
 8011b46:	370c      	adds	r7, #12
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4e:	4770      	bx	lr

08011b50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011b5e:	bf00      	nop
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011b6a:	b480      	push	{r7}
 8011b6c:	b085      	sub	sp, #20
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	689a      	ldr	r2, [r3, #8]
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	683a      	ldr	r2, [r7, #0]
 8011b94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	1c5a      	adds	r2, r3, #1
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	601a      	str	r2, [r3, #0]
}
 8011ba6:	bf00      	nop
 8011ba8:	3714      	adds	r7, #20
 8011baa:	46bd      	mov	sp, r7
 8011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb0:	4770      	bx	lr

08011bb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b085      	sub	sp, #20
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
 8011bba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bc8:	d103      	bne.n	8011bd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	691b      	ldr	r3, [r3, #16]
 8011bce:	60fb      	str	r3, [r7, #12]
 8011bd0:	e00c      	b.n	8011bec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	3308      	adds	r3, #8
 8011bd6:	60fb      	str	r3, [r7, #12]
 8011bd8:	e002      	b.n	8011be0 <vListInsert+0x2e>
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	60fb      	str	r3, [r7, #12]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	68ba      	ldr	r2, [r7, #8]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d2f6      	bcs.n	8011bda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	685a      	ldr	r2, [r3, #4]
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	683a      	ldr	r2, [r7, #0]
 8011bfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	1c5a      	adds	r2, r3, #1
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	601a      	str	r2, [r3, #0]
}
 8011c18:	bf00      	nop
 8011c1a:	3714      	adds	r7, #20
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011c24:	b480      	push	{r7}
 8011c26:	b085      	sub	sp, #20
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	691b      	ldr	r3, [r3, #16]
 8011c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	687a      	ldr	r2, [r7, #4]
 8011c38:	6892      	ldr	r2, [r2, #8]
 8011c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	6852      	ldr	r2, [r2, #4]
 8011c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d103      	bne.n	8011c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	689a      	ldr	r2, [r3, #8]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	1e5a      	subs	r2, r3, #1
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3714      	adds	r7, #20
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr

08011c78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d10a      	bne.n	8011ca2 <xQueueGenericReset+0x2a>
	__asm volatile
 8011c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c90:	f383 8811 	msr	BASEPRI, r3
 8011c94:	f3bf 8f6f 	isb	sy
 8011c98:	f3bf 8f4f 	dsb	sy
 8011c9c:	60bb      	str	r3, [r7, #8]
}
 8011c9e:	bf00      	nop
 8011ca0:	e7fe      	b.n	8011ca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011ca2:	f002 fa3f 	bl	8014124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cae:	68f9      	ldr	r1, [r7, #12]
 8011cb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011cb2:	fb01 f303 	mul.w	r3, r1, r3
 8011cb6:	441a      	add	r2, r3
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	68f9      	ldr	r1, [r7, #12]
 8011cd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011cd8:	fb01 f303 	mul.w	r3, r1, r3
 8011cdc:	441a      	add	r2, r3
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	22ff      	movs	r2, #255	; 0xff
 8011ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	22ff      	movs	r2, #255	; 0xff
 8011cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d114      	bne.n	8011d22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	691b      	ldr	r3, [r3, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d01a      	beq.n	8011d36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	3310      	adds	r3, #16
 8011d04:	4618      	mov	r0, r3
 8011d06:	f001 fa59 	bl	80131bc <xTaskRemoveFromEventList>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d012      	beq.n	8011d36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011d10:	4b0c      	ldr	r3, [pc, #48]	; (8011d44 <xQueueGenericReset+0xcc>)
 8011d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d16:	601a      	str	r2, [r3, #0]
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	f3bf 8f6f 	isb	sy
 8011d20:	e009      	b.n	8011d36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	3310      	adds	r3, #16
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7ff fef2 	bl	8011b10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	3324      	adds	r3, #36	; 0x24
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7ff feed 	bl	8011b10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011d36:	f002 fa25 	bl	8014184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011d3a:	2301      	movs	r3, #1
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3710      	adds	r7, #16
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	e000ed04 	.word	0xe000ed04

08011d48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b08e      	sub	sp, #56	; 0x38
 8011d4c:	af02      	add	r7, sp, #8
 8011d4e:	60f8      	str	r0, [r7, #12]
 8011d50:	60b9      	str	r1, [r7, #8]
 8011d52:	607a      	str	r2, [r7, #4]
 8011d54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10a      	bne.n	8011d72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d60:	f383 8811 	msr	BASEPRI, r3
 8011d64:	f3bf 8f6f 	isb	sy
 8011d68:	f3bf 8f4f 	dsb	sy
 8011d6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011d6e:	bf00      	nop
 8011d70:	e7fe      	b.n	8011d70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d10a      	bne.n	8011d8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d7c:	f383 8811 	msr	BASEPRI, r3
 8011d80:	f3bf 8f6f 	isb	sy
 8011d84:	f3bf 8f4f 	dsb	sy
 8011d88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d8a:	bf00      	nop
 8011d8c:	e7fe      	b.n	8011d8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d002      	beq.n	8011d9a <xQueueGenericCreateStatic+0x52>
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <xQueueGenericCreateStatic+0x56>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e000      	b.n	8011da0 <xQueueGenericCreateStatic+0x58>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d10a      	bne.n	8011dba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da8:	f383 8811 	msr	BASEPRI, r3
 8011dac:	f3bf 8f6f 	isb	sy
 8011db0:	f3bf 8f4f 	dsb	sy
 8011db4:	623b      	str	r3, [r7, #32]
}
 8011db6:	bf00      	nop
 8011db8:	e7fe      	b.n	8011db8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d102      	bne.n	8011dc6 <xQueueGenericCreateStatic+0x7e>
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d101      	bne.n	8011dca <xQueueGenericCreateStatic+0x82>
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e000      	b.n	8011dcc <xQueueGenericCreateStatic+0x84>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10a      	bne.n	8011de6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd4:	f383 8811 	msr	BASEPRI, r3
 8011dd8:	f3bf 8f6f 	isb	sy
 8011ddc:	f3bf 8f4f 	dsb	sy
 8011de0:	61fb      	str	r3, [r7, #28]
}
 8011de2:	bf00      	nop
 8011de4:	e7fe      	b.n	8011de4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011de6:	2350      	movs	r3, #80	; 0x50
 8011de8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	2b50      	cmp	r3, #80	; 0x50
 8011dee:	d00a      	beq.n	8011e06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df4:	f383 8811 	msr	BASEPRI, r3
 8011df8:	f3bf 8f6f 	isb	sy
 8011dfc:	f3bf 8f4f 	dsb	sy
 8011e00:	61bb      	str	r3, [r7, #24]
}
 8011e02:	bf00      	nop
 8011e04:	e7fe      	b.n	8011e04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011e06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d00d      	beq.n	8011e2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e14:	2201      	movs	r2, #1
 8011e16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011e1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e20:	9300      	str	r3, [sp, #0]
 8011e22:	4613      	mov	r3, r2
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	68b9      	ldr	r1, [r7, #8]
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 f805 	bl	8011e38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3730      	adds	r7, #48	; 0x30
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	607a      	str	r2, [r7, #4]
 8011e44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d103      	bne.n	8011e54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e4c:	69bb      	ldr	r3, [r7, #24]
 8011e4e:	69ba      	ldr	r2, [r7, #24]
 8011e50:	601a      	str	r2, [r3, #0]
 8011e52:	e002      	b.n	8011e5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	68fa      	ldr	r2, [r7, #12]
 8011e5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	68ba      	ldr	r2, [r7, #8]
 8011e64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011e66:	2101      	movs	r1, #1
 8011e68:	69b8      	ldr	r0, [r7, #24]
 8011e6a:	f7ff ff05 	bl	8011c78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	78fa      	ldrb	r2, [r7, #3]
 8011e72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011e76:	bf00      	nop
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
	...

08011e80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b08e      	sub	sp, #56	; 0x38
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
 8011e8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10a      	bne.n	8011eb2 <xQueueGenericSend+0x32>
	__asm volatile
 8011e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011eae:	bf00      	nop
 8011eb0:	e7fe      	b.n	8011eb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d103      	bne.n	8011ec0 <xQueueGenericSend+0x40>
 8011eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <xQueueGenericSend+0x44>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e000      	b.n	8011ec6 <xQueueGenericSend+0x46>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d10a      	bne.n	8011ee0 <xQueueGenericSend+0x60>
	__asm volatile
 8011eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ece:	f383 8811 	msr	BASEPRI, r3
 8011ed2:	f3bf 8f6f 	isb	sy
 8011ed6:	f3bf 8f4f 	dsb	sy
 8011eda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011edc:	bf00      	nop
 8011ede:	e7fe      	b.n	8011ede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	2b02      	cmp	r3, #2
 8011ee4:	d103      	bne.n	8011eee <xQueueGenericSend+0x6e>
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d101      	bne.n	8011ef2 <xQueueGenericSend+0x72>
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e000      	b.n	8011ef4 <xQueueGenericSend+0x74>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d10a      	bne.n	8011f0e <xQueueGenericSend+0x8e>
	__asm volatile
 8011ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efc:	f383 8811 	msr	BASEPRI, r3
 8011f00:	f3bf 8f6f 	isb	sy
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	623b      	str	r3, [r7, #32]
}
 8011f0a:	bf00      	nop
 8011f0c:	e7fe      	b.n	8011f0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f0e:	f001 fb75 	bl	80135fc <xTaskGetSchedulerState>
 8011f12:	4603      	mov	r3, r0
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d102      	bne.n	8011f1e <xQueueGenericSend+0x9e>
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d101      	bne.n	8011f22 <xQueueGenericSend+0xa2>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e000      	b.n	8011f24 <xQueueGenericSend+0xa4>
 8011f22:	2300      	movs	r3, #0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d10a      	bne.n	8011f3e <xQueueGenericSend+0xbe>
	__asm volatile
 8011f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2c:	f383 8811 	msr	BASEPRI, r3
 8011f30:	f3bf 8f6f 	isb	sy
 8011f34:	f3bf 8f4f 	dsb	sy
 8011f38:	61fb      	str	r3, [r7, #28]
}
 8011f3a:	bf00      	nop
 8011f3c:	e7fe      	b.n	8011f3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f3e:	f002 f8f1 	bl	8014124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d302      	bcc.n	8011f54 <xQueueGenericSend+0xd4>
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d129      	bne.n	8011fa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f54:	683a      	ldr	r2, [r7, #0]
 8011f56:	68b9      	ldr	r1, [r7, #8]
 8011f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f5a:	f000 fa0b 	bl	8012374 <prvCopyDataToQueue>
 8011f5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d010      	beq.n	8011f8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6a:	3324      	adds	r3, #36	; 0x24
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f001 f925 	bl	80131bc <xTaskRemoveFromEventList>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d013      	beq.n	8011fa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f78:	4b3f      	ldr	r3, [pc, #252]	; (8012078 <xQueueGenericSend+0x1f8>)
 8011f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f7e:	601a      	str	r2, [r3, #0]
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	f3bf 8f6f 	isb	sy
 8011f88:	e00a      	b.n	8011fa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d007      	beq.n	8011fa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f90:	4b39      	ldr	r3, [pc, #228]	; (8012078 <xQueueGenericSend+0x1f8>)
 8011f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f96:	601a      	str	r2, [r3, #0]
 8011f98:	f3bf 8f4f 	dsb	sy
 8011f9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011fa0:	f002 f8f0 	bl	8014184 <vPortExitCritical>
				return pdPASS;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e063      	b.n	8012070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d103      	bne.n	8011fb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011fae:	f002 f8e9 	bl	8014184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e05c      	b.n	8012070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d106      	bne.n	8011fca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011fbc:	f107 0314 	add.w	r3, r7, #20
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f001 f9c1 	bl	8013348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011fca:	f002 f8db 	bl	8014184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011fce:	f000 fe95 	bl	8012cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011fd2:	f002 f8a7 	bl	8014124 <vPortEnterCritical>
 8011fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fdc:	b25b      	sxtb	r3, r3
 8011fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fe2:	d103      	bne.n	8011fec <xQueueGenericSend+0x16c>
 8011fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ff2:	b25b      	sxtb	r3, r3
 8011ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ff8:	d103      	bne.n	8012002 <xQueueGenericSend+0x182>
 8011ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012002:	f002 f8bf 	bl	8014184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012006:	1d3a      	adds	r2, r7, #4
 8012008:	f107 0314 	add.w	r3, r7, #20
 801200c:	4611      	mov	r1, r2
 801200e:	4618      	mov	r0, r3
 8012010:	f001 f9b0 	bl	8013374 <xTaskCheckForTimeOut>
 8012014:	4603      	mov	r3, r0
 8012016:	2b00      	cmp	r3, #0
 8012018:	d124      	bne.n	8012064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801201a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801201c:	f000 faa2 	bl	8012564 <prvIsQueueFull>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d018      	beq.n	8012058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	3310      	adds	r3, #16
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	4611      	mov	r1, r2
 801202e:	4618      	mov	r0, r3
 8012030:	f001 f838 	bl	80130a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012036:	f000 fa2d 	bl	8012494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801203a:	f000 fe6d 	bl	8012d18 <xTaskResumeAll>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	f47f af7c 	bne.w	8011f3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012046:	4b0c      	ldr	r3, [pc, #48]	; (8012078 <xQueueGenericSend+0x1f8>)
 8012048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801204c:	601a      	str	r2, [r3, #0]
 801204e:	f3bf 8f4f 	dsb	sy
 8012052:	f3bf 8f6f 	isb	sy
 8012056:	e772      	b.n	8011f3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801205a:	f000 fa1b 	bl	8012494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801205e:	f000 fe5b 	bl	8012d18 <xTaskResumeAll>
 8012062:	e76c      	b.n	8011f3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012066:	f000 fa15 	bl	8012494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801206a:	f000 fe55 	bl	8012d18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801206e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012070:	4618      	mov	r0, r3
 8012072:	3738      	adds	r7, #56	; 0x38
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	e000ed04 	.word	0xe000ed04

0801207c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b090      	sub	sp, #64	; 0x40
 8012080:	af00      	add	r7, sp, #0
 8012082:	60f8      	str	r0, [r7, #12]
 8012084:	60b9      	str	r1, [r7, #8]
 8012086:	607a      	str	r2, [r7, #4]
 8012088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012090:	2b00      	cmp	r3, #0
 8012092:	d10a      	bne.n	80120aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012098:	f383 8811 	msr	BASEPRI, r3
 801209c:	f3bf 8f6f 	isb	sy
 80120a0:	f3bf 8f4f 	dsb	sy
 80120a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80120a6:	bf00      	nop
 80120a8:	e7fe      	b.n	80120a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d103      	bne.n	80120b8 <xQueueGenericSendFromISR+0x3c>
 80120b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d101      	bne.n	80120bc <xQueueGenericSendFromISR+0x40>
 80120b8:	2301      	movs	r3, #1
 80120ba:	e000      	b.n	80120be <xQueueGenericSendFromISR+0x42>
 80120bc:	2300      	movs	r3, #0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10a      	bne.n	80120d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c6:	f383 8811 	msr	BASEPRI, r3
 80120ca:	f3bf 8f6f 	isb	sy
 80120ce:	f3bf 8f4f 	dsb	sy
 80120d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80120d4:	bf00      	nop
 80120d6:	e7fe      	b.n	80120d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2b02      	cmp	r3, #2
 80120dc:	d103      	bne.n	80120e6 <xQueueGenericSendFromISR+0x6a>
 80120de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d101      	bne.n	80120ea <xQueueGenericSendFromISR+0x6e>
 80120e6:	2301      	movs	r3, #1
 80120e8:	e000      	b.n	80120ec <xQueueGenericSendFromISR+0x70>
 80120ea:	2300      	movs	r3, #0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d10a      	bne.n	8012106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80120f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	f3bf 8f6f 	isb	sy
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	623b      	str	r3, [r7, #32]
}
 8012102:	bf00      	nop
 8012104:	e7fe      	b.n	8012104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012106:	f002 f8ef 	bl	80142e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801210a:	f3ef 8211 	mrs	r2, BASEPRI
 801210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012112:	f383 8811 	msr	BASEPRI, r3
 8012116:	f3bf 8f6f 	isb	sy
 801211a:	f3bf 8f4f 	dsb	sy
 801211e:	61fa      	str	r2, [r7, #28]
 8012120:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012122:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012124:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801212e:	429a      	cmp	r2, r3
 8012130:	d302      	bcc.n	8012138 <xQueueGenericSendFromISR+0xbc>
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	2b02      	cmp	r3, #2
 8012136:	d12f      	bne.n	8012198 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801213e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012146:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012148:	683a      	ldr	r2, [r7, #0]
 801214a:	68b9      	ldr	r1, [r7, #8]
 801214c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801214e:	f000 f911 	bl	8012374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012152:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801215a:	d112      	bne.n	8012182 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012160:	2b00      	cmp	r3, #0
 8012162:	d016      	beq.n	8012192 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012166:	3324      	adds	r3, #36	; 0x24
 8012168:	4618      	mov	r0, r3
 801216a:	f001 f827 	bl	80131bc <xTaskRemoveFromEventList>
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d00e      	beq.n	8012192 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00b      	beq.n	8012192 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2201      	movs	r2, #1
 801217e:	601a      	str	r2, [r3, #0]
 8012180:	e007      	b.n	8012192 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012186:	3301      	adds	r3, #1
 8012188:	b2db      	uxtb	r3, r3
 801218a:	b25a      	sxtb	r2, r3
 801218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012192:	2301      	movs	r3, #1
 8012194:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012196:	e001      	b.n	801219c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012198:	2300      	movs	r3, #0
 801219a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80121a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80121a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3740      	adds	r7, #64	; 0x40
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
	...

080121b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b08c      	sub	sp, #48	; 0x30
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80121c0:	2300      	movs	r3, #0
 80121c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80121c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d10a      	bne.n	80121e4 <xQueueReceive+0x30>
	__asm volatile
 80121ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d2:	f383 8811 	msr	BASEPRI, r3
 80121d6:	f3bf 8f6f 	isb	sy
 80121da:	f3bf 8f4f 	dsb	sy
 80121de:	623b      	str	r3, [r7, #32]
}
 80121e0:	bf00      	nop
 80121e2:	e7fe      	b.n	80121e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d103      	bne.n	80121f2 <xQueueReceive+0x3e>
 80121ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d101      	bne.n	80121f6 <xQueueReceive+0x42>
 80121f2:	2301      	movs	r3, #1
 80121f4:	e000      	b.n	80121f8 <xQueueReceive+0x44>
 80121f6:	2300      	movs	r3, #0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d10a      	bne.n	8012212 <xQueueReceive+0x5e>
	__asm volatile
 80121fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012200:	f383 8811 	msr	BASEPRI, r3
 8012204:	f3bf 8f6f 	isb	sy
 8012208:	f3bf 8f4f 	dsb	sy
 801220c:	61fb      	str	r3, [r7, #28]
}
 801220e:	bf00      	nop
 8012210:	e7fe      	b.n	8012210 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012212:	f001 f9f3 	bl	80135fc <xTaskGetSchedulerState>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d102      	bne.n	8012222 <xQueueReceive+0x6e>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d101      	bne.n	8012226 <xQueueReceive+0x72>
 8012222:	2301      	movs	r3, #1
 8012224:	e000      	b.n	8012228 <xQueueReceive+0x74>
 8012226:	2300      	movs	r3, #0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d10a      	bne.n	8012242 <xQueueReceive+0x8e>
	__asm volatile
 801222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012230:	f383 8811 	msr	BASEPRI, r3
 8012234:	f3bf 8f6f 	isb	sy
 8012238:	f3bf 8f4f 	dsb	sy
 801223c:	61bb      	str	r3, [r7, #24]
}
 801223e:	bf00      	nop
 8012240:	e7fe      	b.n	8012240 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012242:	f001 ff6f 	bl	8014124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801224a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224e:	2b00      	cmp	r3, #0
 8012250:	d01f      	beq.n	8012292 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012252:	68b9      	ldr	r1, [r7, #8]
 8012254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012256:	f000 f8f7 	bl	8012448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225c:	1e5a      	subs	r2, r3, #1
 801225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012260:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012264:	691b      	ldr	r3, [r3, #16]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00f      	beq.n	801228a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226c:	3310      	adds	r3, #16
 801226e:	4618      	mov	r0, r3
 8012270:	f000 ffa4 	bl	80131bc <xTaskRemoveFromEventList>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d007      	beq.n	801228a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801227a:	4b3d      	ldr	r3, [pc, #244]	; (8012370 <xQueueReceive+0x1bc>)
 801227c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012280:	601a      	str	r2, [r3, #0]
 8012282:	f3bf 8f4f 	dsb	sy
 8012286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801228a:	f001 ff7b 	bl	8014184 <vPortExitCritical>
				return pdPASS;
 801228e:	2301      	movs	r3, #1
 8012290:	e069      	b.n	8012366 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d103      	bne.n	80122a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012298:	f001 ff74 	bl	8014184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801229c:	2300      	movs	r3, #0
 801229e:	e062      	b.n	8012366 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80122a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d106      	bne.n	80122b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80122a6:	f107 0310 	add.w	r3, r7, #16
 80122aa:	4618      	mov	r0, r3
 80122ac:	f001 f84c 	bl	8013348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80122b0:	2301      	movs	r3, #1
 80122b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80122b4:	f001 ff66 	bl	8014184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80122b8:	f000 fd20 	bl	8012cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80122bc:	f001 ff32 	bl	8014124 <vPortEnterCritical>
 80122c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122c6:	b25b      	sxtb	r3, r3
 80122c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122cc:	d103      	bne.n	80122d6 <xQueueReceive+0x122>
 80122ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d0:	2200      	movs	r2, #0
 80122d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122dc:	b25b      	sxtb	r3, r3
 80122de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122e2:	d103      	bne.n	80122ec <xQueueReceive+0x138>
 80122e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e6:	2200      	movs	r2, #0
 80122e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122ec:	f001 ff4a 	bl	8014184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80122f0:	1d3a      	adds	r2, r7, #4
 80122f2:	f107 0310 	add.w	r3, r7, #16
 80122f6:	4611      	mov	r1, r2
 80122f8:	4618      	mov	r0, r3
 80122fa:	f001 f83b 	bl	8013374 <xTaskCheckForTimeOut>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d123      	bne.n	801234c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012306:	f000 f917 	bl	8012538 <prvIsQueueEmpty>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d017      	beq.n	8012340 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012312:	3324      	adds	r3, #36	; 0x24
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	4611      	mov	r1, r2
 8012318:	4618      	mov	r0, r3
 801231a:	f000 fec3 	bl	80130a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801231e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012320:	f000 f8b8 	bl	8012494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012324:	f000 fcf8 	bl	8012d18 <xTaskResumeAll>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d189      	bne.n	8012242 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801232e:	4b10      	ldr	r3, [pc, #64]	; (8012370 <xQueueReceive+0x1bc>)
 8012330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	f3bf 8f4f 	dsb	sy
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	e780      	b.n	8012242 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012342:	f000 f8a7 	bl	8012494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012346:	f000 fce7 	bl	8012d18 <xTaskResumeAll>
 801234a:	e77a      	b.n	8012242 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801234c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801234e:	f000 f8a1 	bl	8012494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012352:	f000 fce1 	bl	8012d18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012358:	f000 f8ee 	bl	8012538 <prvIsQueueEmpty>
 801235c:	4603      	mov	r3, r0
 801235e:	2b00      	cmp	r3, #0
 8012360:	f43f af6f 	beq.w	8012242 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012366:	4618      	mov	r0, r3
 8012368:	3730      	adds	r7, #48	; 0x30
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	e000ed04 	.word	0xe000ed04

08012374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b086      	sub	sp, #24
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012380:	2300      	movs	r3, #0
 8012382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10d      	bne.n	80123ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d14d      	bne.n	8012436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	4618      	mov	r0, r3
 80123a0:	f001 f94a 	bl	8013638 <xTaskPriorityDisinherit>
 80123a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2200      	movs	r2, #0
 80123aa:	609a      	str	r2, [r3, #8]
 80123ac:	e043      	b.n	8012436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d119      	bne.n	80123e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	6858      	ldr	r0, [r3, #4]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123bc:	461a      	mov	r2, r3
 80123be:	68b9      	ldr	r1, [r7, #8]
 80123c0:	f002 f9f6 	bl	80147b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	685a      	ldr	r2, [r3, #4]
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123cc:	441a      	add	r2, r3
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	685a      	ldr	r2, [r3, #4]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d32b      	bcc.n	8012436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	605a      	str	r2, [r3, #4]
 80123e6:	e026      	b.n	8012436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	68d8      	ldr	r0, [r3, #12]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f0:	461a      	mov	r2, r3
 80123f2:	68b9      	ldr	r1, [r7, #8]
 80123f4:	f002 f9dc 	bl	80147b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	68da      	ldr	r2, [r3, #12]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012400:	425b      	negs	r3, r3
 8012402:	441a      	add	r2, r3
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	68da      	ldr	r2, [r3, #12]
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	429a      	cmp	r2, r3
 8012412:	d207      	bcs.n	8012424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	689a      	ldr	r2, [r3, #8]
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801241c:	425b      	negs	r3, r3
 801241e:	441a      	add	r2, r3
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b02      	cmp	r3, #2
 8012428:	d105      	bne.n	8012436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d002      	beq.n	8012436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	3b01      	subs	r3, #1
 8012434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	1c5a      	adds	r2, r3, #1
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801243e:	697b      	ldr	r3, [r7, #20]
}
 8012440:	4618      	mov	r0, r3
 8012442:	3718      	adds	r7, #24
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012456:	2b00      	cmp	r3, #0
 8012458:	d018      	beq.n	801248c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	68da      	ldr	r2, [r3, #12]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012462:	441a      	add	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	68da      	ldr	r2, [r3, #12]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	689b      	ldr	r3, [r3, #8]
 8012470:	429a      	cmp	r2, r3
 8012472:	d303      	bcc.n	801247c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	68d9      	ldr	r1, [r3, #12]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012484:	461a      	mov	r2, r3
 8012486:	6838      	ldr	r0, [r7, #0]
 8012488:	f002 f992 	bl	80147b0 <memcpy>
	}
}
 801248c:	bf00      	nop
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801249c:	f001 fe42 	bl	8014124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124a8:	e011      	b.n	80124ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d012      	beq.n	80124d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	3324      	adds	r3, #36	; 0x24
 80124b6:	4618      	mov	r0, r3
 80124b8:	f000 fe80 	bl	80131bc <xTaskRemoveFromEventList>
 80124bc:	4603      	mov	r3, r0
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d001      	beq.n	80124c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80124c2:	f000 ffb9 	bl	8013438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80124c6:	7bfb      	ldrb	r3, [r7, #15]
 80124c8:	3b01      	subs	r3, #1
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	dce9      	bgt.n	80124aa <prvUnlockQueue+0x16>
 80124d6:	e000      	b.n	80124da <prvUnlockQueue+0x46>
					break;
 80124d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	22ff      	movs	r2, #255	; 0xff
 80124de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80124e2:	f001 fe4f 	bl	8014184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80124e6:	f001 fe1d 	bl	8014124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124f2:	e011      	b.n	8012518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	691b      	ldr	r3, [r3, #16]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d012      	beq.n	8012522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	3310      	adds	r3, #16
 8012500:	4618      	mov	r0, r3
 8012502:	f000 fe5b 	bl	80131bc <xTaskRemoveFromEventList>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d001      	beq.n	8012510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801250c:	f000 ff94 	bl	8013438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012510:	7bbb      	ldrb	r3, [r7, #14]
 8012512:	3b01      	subs	r3, #1
 8012514:	b2db      	uxtb	r3, r3
 8012516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801251c:	2b00      	cmp	r3, #0
 801251e:	dce9      	bgt.n	80124f4 <prvUnlockQueue+0x60>
 8012520:	e000      	b.n	8012524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	22ff      	movs	r2, #255	; 0xff
 8012528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801252c:	f001 fe2a 	bl	8014184 <vPortExitCritical>
}
 8012530:	bf00      	nop
 8012532:	3710      	adds	r7, #16
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b084      	sub	sp, #16
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012540:	f001 fdf0 	bl	8014124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012548:	2b00      	cmp	r3, #0
 801254a:	d102      	bne.n	8012552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801254c:	2301      	movs	r3, #1
 801254e:	60fb      	str	r3, [r7, #12]
 8012550:	e001      	b.n	8012556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012552:	2300      	movs	r3, #0
 8012554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012556:	f001 fe15 	bl	8014184 <vPortExitCritical>

	return xReturn;
 801255a:	68fb      	ldr	r3, [r7, #12]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3710      	adds	r7, #16
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801256c:	f001 fdda 	bl	8014124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012578:	429a      	cmp	r2, r3
 801257a:	d102      	bne.n	8012582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801257c:	2301      	movs	r3, #1
 801257e:	60fb      	str	r3, [r7, #12]
 8012580:	e001      	b.n	8012586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012582:	2300      	movs	r3, #0
 8012584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012586:	f001 fdfd 	bl	8014184 <vPortExitCritical>

	return xReturn;
 801258a:	68fb      	ldr	r3, [r7, #12]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3710      	adds	r7, #16
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012594:	b480      	push	{r7}
 8012596:	b085      	sub	sp, #20
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801259e:	2300      	movs	r3, #0
 80125a0:	60fb      	str	r3, [r7, #12]
 80125a2:	e014      	b.n	80125ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80125a4:	4a0f      	ldr	r2, [pc, #60]	; (80125e4 <vQueueAddToRegistry+0x50>)
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d10b      	bne.n	80125c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80125b0:	490c      	ldr	r1, [pc, #48]	; (80125e4 <vQueueAddToRegistry+0x50>)
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	683a      	ldr	r2, [r7, #0]
 80125b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80125ba:	4a0a      	ldr	r2, [pc, #40]	; (80125e4 <vQueueAddToRegistry+0x50>)
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	00db      	lsls	r3, r3, #3
 80125c0:	4413      	add	r3, r2
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80125c6:	e006      	b.n	80125d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	3301      	adds	r3, #1
 80125cc:	60fb      	str	r3, [r7, #12]
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2b07      	cmp	r3, #7
 80125d2:	d9e7      	bls.n	80125a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80125d4:	bf00      	nop
 80125d6:	bf00      	nop
 80125d8:	3714      	adds	r7, #20
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	240012f8 	.word	0x240012f8

080125e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80125f8:	f001 fd94 	bl	8014124 <vPortEnterCritical>
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012602:	b25b      	sxtb	r3, r3
 8012604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012608:	d103      	bne.n	8012612 <vQueueWaitForMessageRestricted+0x2a>
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	2200      	movs	r2, #0
 801260e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012618:	b25b      	sxtb	r3, r3
 801261a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801261e:	d103      	bne.n	8012628 <vQueueWaitForMessageRestricted+0x40>
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	2200      	movs	r2, #0
 8012624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012628:	f001 fdac 	bl	8014184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012630:	2b00      	cmp	r3, #0
 8012632:	d106      	bne.n	8012642 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	3324      	adds	r3, #36	; 0x24
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	68b9      	ldr	r1, [r7, #8]
 801263c:	4618      	mov	r0, r3
 801263e:	f000 fd91 	bl	8013164 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012642:	6978      	ldr	r0, [r7, #20]
 8012644:	f7ff ff26 	bl	8012494 <prvUnlockQueue>
	}
 8012648:	bf00      	nop
 801264a:	3718      	adds	r7, #24
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012650:	b580      	push	{r7, lr}
 8012652:	b08e      	sub	sp, #56	; 0x38
 8012654:	af04      	add	r7, sp, #16
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801265e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012660:	2b00      	cmp	r3, #0
 8012662:	d10a      	bne.n	801267a <xTaskCreateStatic+0x2a>
	__asm volatile
 8012664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012668:	f383 8811 	msr	BASEPRI, r3
 801266c:	f3bf 8f6f 	isb	sy
 8012670:	f3bf 8f4f 	dsb	sy
 8012674:	623b      	str	r3, [r7, #32]
}
 8012676:	bf00      	nop
 8012678:	e7fe      	b.n	8012678 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267c:	2b00      	cmp	r3, #0
 801267e:	d10a      	bne.n	8012696 <xTaskCreateStatic+0x46>
	__asm volatile
 8012680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012684:	f383 8811 	msr	BASEPRI, r3
 8012688:	f3bf 8f6f 	isb	sy
 801268c:	f3bf 8f4f 	dsb	sy
 8012690:	61fb      	str	r3, [r7, #28]
}
 8012692:	bf00      	nop
 8012694:	e7fe      	b.n	8012694 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012696:	235c      	movs	r3, #92	; 0x5c
 8012698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	2b5c      	cmp	r3, #92	; 0x5c
 801269e:	d00a      	beq.n	80126b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80126a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a4:	f383 8811 	msr	BASEPRI, r3
 80126a8:	f3bf 8f6f 	isb	sy
 80126ac:	f3bf 8f4f 	dsb	sy
 80126b0:	61bb      	str	r3, [r7, #24]
}
 80126b2:	bf00      	nop
 80126b4:	e7fe      	b.n	80126b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80126b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80126b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d01e      	beq.n	80126fc <xTaskCreateStatic+0xac>
 80126be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d01b      	beq.n	80126fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80126c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	2202      	movs	r2, #2
 80126d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80126d6:	2300      	movs	r3, #0
 80126d8:	9303      	str	r3, [sp, #12]
 80126da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126dc:	9302      	str	r3, [sp, #8]
 80126de:	f107 0314 	add.w	r3, r7, #20
 80126e2:	9301      	str	r3, [sp, #4]
 80126e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	68b9      	ldr	r1, [r7, #8]
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	f000 f850 	bl	8012794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80126f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126f6:	f000 f8dd 	bl	80128b4 <prvAddNewTaskToReadyList>
 80126fa:	e001      	b.n	8012700 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80126fc:	2300      	movs	r3, #0
 80126fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012700:	697b      	ldr	r3, [r7, #20]
	}
 8012702:	4618      	mov	r0, r3
 8012704:	3728      	adds	r7, #40	; 0x28
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801270a:	b580      	push	{r7, lr}
 801270c:	b08c      	sub	sp, #48	; 0x30
 801270e:	af04      	add	r7, sp, #16
 8012710:	60f8      	str	r0, [r7, #12]
 8012712:	60b9      	str	r1, [r7, #8]
 8012714:	603b      	str	r3, [r7, #0]
 8012716:	4613      	mov	r3, r2
 8012718:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801271a:	88fb      	ldrh	r3, [r7, #6]
 801271c:	009b      	lsls	r3, r3, #2
 801271e:	4618      	mov	r0, r3
 8012720:	f001 fe22 	bl	8014368 <pvPortMalloc>
 8012724:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00e      	beq.n	801274a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801272c:	205c      	movs	r0, #92	; 0x5c
 801272e:	f001 fe1b 	bl	8014368 <pvPortMalloc>
 8012732:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d003      	beq.n	8012742 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	697a      	ldr	r2, [r7, #20]
 801273e:	631a      	str	r2, [r3, #48]	; 0x30
 8012740:	e005      	b.n	801274e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012742:	6978      	ldr	r0, [r7, #20]
 8012744:	f001 fedc 	bl	8014500 <vPortFree>
 8012748:	e001      	b.n	801274e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801274a:	2300      	movs	r3, #0
 801274c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d017      	beq.n	8012784 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	2200      	movs	r2, #0
 8012758:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801275c:	88fa      	ldrh	r2, [r7, #6]
 801275e:	2300      	movs	r3, #0
 8012760:	9303      	str	r3, [sp, #12]
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	9302      	str	r3, [sp, #8]
 8012766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012768:	9301      	str	r3, [sp, #4]
 801276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	68b9      	ldr	r1, [r7, #8]
 8012772:	68f8      	ldr	r0, [r7, #12]
 8012774:	f000 f80e 	bl	8012794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012778:	69f8      	ldr	r0, [r7, #28]
 801277a:	f000 f89b 	bl	80128b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801277e:	2301      	movs	r3, #1
 8012780:	61bb      	str	r3, [r7, #24]
 8012782:	e002      	b.n	801278a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012788:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801278a:	69bb      	ldr	r3, [r7, #24]
	}
 801278c:	4618      	mov	r0, r3
 801278e:	3720      	adds	r7, #32
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b088      	sub	sp, #32
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
 80127a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80127a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	009b      	lsls	r3, r3, #2
 80127aa:	461a      	mov	r2, r3
 80127ac:	21a5      	movs	r1, #165	; 0xa5
 80127ae:	f002 f80d 	bl	80147cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80127b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80127b6:	6879      	ldr	r1, [r7, #4]
 80127b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80127bc:	440b      	add	r3, r1
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	4413      	add	r3, r2
 80127c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	f023 0307 	bic.w	r3, r3, #7
 80127ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	f003 0307 	and.w	r3, r3, #7
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00a      	beq.n	80127ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80127d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127da:	f383 8811 	msr	BASEPRI, r3
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	f3bf 8f4f 	dsb	sy
 80127e6:	617b      	str	r3, [r7, #20]
}
 80127e8:	bf00      	nop
 80127ea:	e7fe      	b.n	80127ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d01f      	beq.n	8012832 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80127f2:	2300      	movs	r3, #0
 80127f4:	61fb      	str	r3, [r7, #28]
 80127f6:	e012      	b.n	801281e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80127f8:	68ba      	ldr	r2, [r7, #8]
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	4413      	add	r3, r2
 80127fe:	7819      	ldrb	r1, [r3, #0]
 8012800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	4413      	add	r3, r2
 8012806:	3334      	adds	r3, #52	; 0x34
 8012808:	460a      	mov	r2, r1
 801280a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	4413      	add	r3, r2
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d006      	beq.n	8012826 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	3301      	adds	r3, #1
 801281c:	61fb      	str	r3, [r7, #28]
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	2b0f      	cmp	r3, #15
 8012822:	d9e9      	bls.n	80127f8 <prvInitialiseNewTask+0x64>
 8012824:	e000      	b.n	8012828 <prvInitialiseNewTask+0x94>
			{
				break;
 8012826:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801282a:	2200      	movs	r2, #0
 801282c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012830:	e003      	b.n	801283a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012834:	2200      	movs	r2, #0
 8012836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283c:	2b37      	cmp	r3, #55	; 0x37
 801283e:	d901      	bls.n	8012844 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012840:	2337      	movs	r3, #55	; 0x37
 8012842:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012848:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801284e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012852:	2200      	movs	r2, #0
 8012854:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012858:	3304      	adds	r3, #4
 801285a:	4618      	mov	r0, r3
 801285c:	f7ff f978 	bl	8011b50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012862:	3318      	adds	r3, #24
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff f973 	bl	8011b50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801286e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012872:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012878:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801287e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012882:	2200      	movs	r2, #0
 8012884:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012888:	2200      	movs	r2, #0
 801288a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801288e:	683a      	ldr	r2, [r7, #0]
 8012890:	68f9      	ldr	r1, [r7, #12]
 8012892:	69b8      	ldr	r0, [r7, #24]
 8012894:	f001 fb18 	bl	8013ec8 <pxPortInitialiseStack>
 8012898:	4602      	mov	r2, r0
 801289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d002      	beq.n	80128aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80128a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128aa:	bf00      	nop
 80128ac:	3720      	adds	r7, #32
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
	...

080128b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80128bc:	f001 fc32 	bl	8014124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80128c0:	4b2d      	ldr	r3, [pc, #180]	; (8012978 <prvAddNewTaskToReadyList+0xc4>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	3301      	adds	r3, #1
 80128c6:	4a2c      	ldr	r2, [pc, #176]	; (8012978 <prvAddNewTaskToReadyList+0xc4>)
 80128c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80128ca:	4b2c      	ldr	r3, [pc, #176]	; (801297c <prvAddNewTaskToReadyList+0xc8>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d109      	bne.n	80128e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80128d2:	4a2a      	ldr	r2, [pc, #168]	; (801297c <prvAddNewTaskToReadyList+0xc8>)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80128d8:	4b27      	ldr	r3, [pc, #156]	; (8012978 <prvAddNewTaskToReadyList+0xc4>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2b01      	cmp	r3, #1
 80128de:	d110      	bne.n	8012902 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80128e0:	f000 fdce 	bl	8013480 <prvInitialiseTaskLists>
 80128e4:	e00d      	b.n	8012902 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80128e6:	4b26      	ldr	r3, [pc, #152]	; (8012980 <prvAddNewTaskToReadyList+0xcc>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d109      	bne.n	8012902 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80128ee:	4b23      	ldr	r3, [pc, #140]	; (801297c <prvAddNewTaskToReadyList+0xc8>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d802      	bhi.n	8012902 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80128fc:	4a1f      	ldr	r2, [pc, #124]	; (801297c <prvAddNewTaskToReadyList+0xc8>)
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012902:	4b20      	ldr	r3, [pc, #128]	; (8012984 <prvAddNewTaskToReadyList+0xd0>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	3301      	adds	r3, #1
 8012908:	4a1e      	ldr	r2, [pc, #120]	; (8012984 <prvAddNewTaskToReadyList+0xd0>)
 801290a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801290c:	4b1d      	ldr	r3, [pc, #116]	; (8012984 <prvAddNewTaskToReadyList+0xd0>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012918:	4b1b      	ldr	r3, [pc, #108]	; (8012988 <prvAddNewTaskToReadyList+0xd4>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	429a      	cmp	r2, r3
 801291e:	d903      	bls.n	8012928 <prvAddNewTaskToReadyList+0x74>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012924:	4a18      	ldr	r2, [pc, #96]	; (8012988 <prvAddNewTaskToReadyList+0xd4>)
 8012926:	6013      	str	r3, [r2, #0]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801292c:	4613      	mov	r3, r2
 801292e:	009b      	lsls	r3, r3, #2
 8012930:	4413      	add	r3, r2
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	4a15      	ldr	r2, [pc, #84]	; (801298c <prvAddNewTaskToReadyList+0xd8>)
 8012936:	441a      	add	r2, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	3304      	adds	r3, #4
 801293c:	4619      	mov	r1, r3
 801293e:	4610      	mov	r0, r2
 8012940:	f7ff f913 	bl	8011b6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012944:	f001 fc1e 	bl	8014184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012948:	4b0d      	ldr	r3, [pc, #52]	; (8012980 <prvAddNewTaskToReadyList+0xcc>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d00e      	beq.n	801296e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012950:	4b0a      	ldr	r3, [pc, #40]	; (801297c <prvAddNewTaskToReadyList+0xc8>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801295a:	429a      	cmp	r2, r3
 801295c:	d207      	bcs.n	801296e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801295e:	4b0c      	ldr	r3, [pc, #48]	; (8012990 <prvAddNewTaskToReadyList+0xdc>)
 8012960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012964:	601a      	str	r2, [r3, #0]
 8012966:	f3bf 8f4f 	dsb	sy
 801296a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801296e:	bf00      	nop
 8012970:	3708      	adds	r7, #8
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	2400180c 	.word	0x2400180c
 801297c:	24001338 	.word	0x24001338
 8012980:	24001818 	.word	0x24001818
 8012984:	24001828 	.word	0x24001828
 8012988:	24001814 	.word	0x24001814
 801298c:	2400133c 	.word	0x2400133c
 8012990:	e000ed04 	.word	0xe000ed04

08012994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012994:	b580      	push	{r7, lr}
 8012996:	b084      	sub	sp, #16
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801299c:	2300      	movs	r3, #0
 801299e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d017      	beq.n	80129d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80129a6:	4b13      	ldr	r3, [pc, #76]	; (80129f4 <vTaskDelay+0x60>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00a      	beq.n	80129c4 <vTaskDelay+0x30>
	__asm volatile
 80129ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	60bb      	str	r3, [r7, #8]
}
 80129c0:	bf00      	nop
 80129c2:	e7fe      	b.n	80129c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80129c4:	f000 f99a 	bl	8012cfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80129c8:	2100      	movs	r1, #0
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f000 feba 	bl	8013744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80129d0:	f000 f9a2 	bl	8012d18 <xTaskResumeAll>
 80129d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d107      	bne.n	80129ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80129dc:	4b06      	ldr	r3, [pc, #24]	; (80129f8 <vTaskDelay+0x64>)
 80129de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129e2:	601a      	str	r2, [r3, #0]
 80129e4:	f3bf 8f4f 	dsb	sy
 80129e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80129ec:	bf00      	nop
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	24001834 	.word	0x24001834
 80129f8:	e000ed04 	.word	0xe000ed04

080129fc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012a04:	f001 fb8e 	bl	8014124 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d102      	bne.n	8012a14 <vTaskSuspend+0x18>
 8012a0e:	4b30      	ldr	r3, [pc, #192]	; (8012ad0 <vTaskSuspend+0xd4>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	e000      	b.n	8012a16 <vTaskSuspend+0x1a>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7ff f901 	bl	8011c24 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d004      	beq.n	8012a34 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	3318      	adds	r3, #24
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7ff f8f8 	bl	8011c24 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	3304      	adds	r3, #4
 8012a38:	4619      	mov	r1, r3
 8012a3a:	4826      	ldr	r0, [pc, #152]	; (8012ad4 <vTaskSuspend+0xd8>)
 8012a3c:	f7ff f895 	bl	8011b6a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d103      	bne.n	8012a54 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012a54:	f001 fb96 	bl	8014184 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012a58:	4b1f      	ldr	r3, [pc, #124]	; (8012ad8 <vTaskSuspend+0xdc>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d005      	beq.n	8012a6c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012a60:	f001 fb60 	bl	8014124 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012a64:	f000 fdaa 	bl	80135bc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012a68:	f001 fb8c 	bl	8014184 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012a6c:	4b18      	ldr	r3, [pc, #96]	; (8012ad0 <vTaskSuspend+0xd4>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	68fa      	ldr	r2, [r7, #12]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d127      	bne.n	8012ac6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8012a76:	4b18      	ldr	r3, [pc, #96]	; (8012ad8 <vTaskSuspend+0xdc>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d017      	beq.n	8012aae <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012a7e:	4b17      	ldr	r3, [pc, #92]	; (8012adc <vTaskSuspend+0xe0>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d00a      	beq.n	8012a9c <vTaskSuspend+0xa0>
	__asm volatile
 8012a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a8a:	f383 8811 	msr	BASEPRI, r3
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f3bf 8f4f 	dsb	sy
 8012a96:	60bb      	str	r3, [r7, #8]
}
 8012a98:	bf00      	nop
 8012a9a:	e7fe      	b.n	8012a9a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8012a9c:	4b10      	ldr	r3, [pc, #64]	; (8012ae0 <vTaskSuspend+0xe4>)
 8012a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aa2:	601a      	str	r2, [r3, #0]
 8012aa4:	f3bf 8f4f 	dsb	sy
 8012aa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012aac:	e00b      	b.n	8012ac6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012aae:	4b09      	ldr	r3, [pc, #36]	; (8012ad4 <vTaskSuspend+0xd8>)
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	4b0c      	ldr	r3, [pc, #48]	; (8012ae4 <vTaskSuspend+0xe8>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d103      	bne.n	8012ac2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8012aba:	4b05      	ldr	r3, [pc, #20]	; (8012ad0 <vTaskSuspend+0xd4>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	601a      	str	r2, [r3, #0]
	}
 8012ac0:	e001      	b.n	8012ac6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8012ac2:	f000 fa91 	bl	8012fe8 <vTaskSwitchContext>
	}
 8012ac6:	bf00      	nop
 8012ac8:	3710      	adds	r7, #16
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	24001338 	.word	0x24001338
 8012ad4:	240017f8 	.word	0x240017f8
 8012ad8:	24001818 	.word	0x24001818
 8012adc:	24001834 	.word	0x24001834
 8012ae0:	e000ed04 	.word	0xe000ed04
 8012ae4:	2400180c 	.word	0x2400180c

08012ae8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012ae8:	b480      	push	{r7}
 8012aea:	b087      	sub	sp, #28
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012af0:	2300      	movs	r3, #0
 8012af2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d10a      	bne.n	8012b14 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	60fb      	str	r3, [r7, #12]
}
 8012b10:	bf00      	nop
 8012b12:	e7fe      	b.n	8012b12 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	695b      	ldr	r3, [r3, #20]
 8012b18:	4a0a      	ldr	r2, [pc, #40]	; (8012b44 <prvTaskIsTaskSuspended+0x5c>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d10a      	bne.n	8012b34 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b22:	4a09      	ldr	r2, [pc, #36]	; (8012b48 <prvTaskIsTaskSuspended+0x60>)
 8012b24:	4293      	cmp	r3, r2
 8012b26:	d005      	beq.n	8012b34 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d101      	bne.n	8012b34 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8012b30:	2301      	movs	r3, #1
 8012b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b34:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012b36:	4618      	mov	r0, r3
 8012b38:	371c      	adds	r7, #28
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	240017f8 	.word	0x240017f8
 8012b48:	240017cc 	.word	0x240017cc

08012b4c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b08a      	sub	sp, #40	; 0x28
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8012b54:	2300      	movs	r3, #0
 8012b56:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d10a      	bne.n	8012b78 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8012b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b66:	f383 8811 	msr	BASEPRI, r3
 8012b6a:	f3bf 8f6f 	isb	sy
 8012b6e:	f3bf 8f4f 	dsb	sy
 8012b72:	61bb      	str	r3, [r7, #24]
}
 8012b74:	bf00      	nop
 8012b76:	e7fe      	b.n	8012b76 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b78:	f001 fbb6 	bl	80142e8 <vPortValidateInterruptPriority>
	__asm volatile
 8012b7c:	f3ef 8211 	mrs	r2, BASEPRI
 8012b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b84:	f383 8811 	msr	BASEPRI, r3
 8012b88:	f3bf 8f6f 	isb	sy
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	617a      	str	r2, [r7, #20]
 8012b92:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b94:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b96:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012b98:	6a38      	ldr	r0, [r7, #32]
 8012b9a:	f7ff ffa5 	bl	8012ae8 <prvTaskIsTaskSuspended>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d030      	beq.n	8012c06 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ba4:	4b1d      	ldr	r3, [pc, #116]	; (8012c1c <xTaskResumeFromISR+0xd0>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d126      	bne.n	8012bfa <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012bac:	6a3b      	ldr	r3, [r7, #32]
 8012bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bb0:	4b1b      	ldr	r3, [pc, #108]	; (8012c20 <xTaskResumeFromISR+0xd4>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d301      	bcc.n	8012bbe <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bbe:	6a3b      	ldr	r3, [r7, #32]
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7ff f82e 	bl	8011c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bcc:	4b15      	ldr	r3, [pc, #84]	; (8012c24 <xTaskResumeFromISR+0xd8>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d903      	bls.n	8012bdc <xTaskResumeFromISR+0x90>
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd8:	4a12      	ldr	r2, [pc, #72]	; (8012c24 <xTaskResumeFromISR+0xd8>)
 8012bda:	6013      	str	r3, [r2, #0]
 8012bdc:	6a3b      	ldr	r3, [r7, #32]
 8012bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be0:	4613      	mov	r3, r2
 8012be2:	009b      	lsls	r3, r3, #2
 8012be4:	4413      	add	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4a0f      	ldr	r2, [pc, #60]	; (8012c28 <xTaskResumeFromISR+0xdc>)
 8012bea:	441a      	add	r2, r3
 8012bec:	6a3b      	ldr	r3, [r7, #32]
 8012bee:	3304      	adds	r3, #4
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	4610      	mov	r0, r2
 8012bf4:	f7fe ffb9 	bl	8011b6a <vListInsertEnd>
 8012bf8:	e005      	b.n	8012c06 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012bfa:	6a3b      	ldr	r3, [r7, #32]
 8012bfc:	3318      	adds	r3, #24
 8012bfe:	4619      	mov	r1, r3
 8012c00:	480a      	ldr	r0, [pc, #40]	; (8012c2c <xTaskResumeFromISR+0xe0>)
 8012c02:	f7fe ffb2 	bl	8011b6a <vListInsertEnd>
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f383 8811 	msr	BASEPRI, r3
}
 8012c10:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3728      	adds	r7, #40	; 0x28
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	24001834 	.word	0x24001834
 8012c20:	24001338 	.word	0x24001338
 8012c24:	24001814 	.word	0x24001814
 8012c28:	2400133c 	.word	0x2400133c
 8012c2c:	240017cc 	.word	0x240017cc

08012c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b08a      	sub	sp, #40	; 0x28
 8012c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012c36:	2300      	movs	r3, #0
 8012c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012c3e:	463a      	mov	r2, r7
 8012c40:	1d39      	adds	r1, r7, #4
 8012c42:	f107 0308 	add.w	r3, r7, #8
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7fe fd40 	bl	80116cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012c4c:	6839      	ldr	r1, [r7, #0]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	68ba      	ldr	r2, [r7, #8]
 8012c52:	9202      	str	r2, [sp, #8]
 8012c54:	9301      	str	r3, [sp, #4]
 8012c56:	2300      	movs	r3, #0
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	460a      	mov	r2, r1
 8012c5e:	4921      	ldr	r1, [pc, #132]	; (8012ce4 <vTaskStartScheduler+0xb4>)
 8012c60:	4821      	ldr	r0, [pc, #132]	; (8012ce8 <vTaskStartScheduler+0xb8>)
 8012c62:	f7ff fcf5 	bl	8012650 <xTaskCreateStatic>
 8012c66:	4603      	mov	r3, r0
 8012c68:	4a20      	ldr	r2, [pc, #128]	; (8012cec <vTaskStartScheduler+0xbc>)
 8012c6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012c6c:	4b1f      	ldr	r3, [pc, #124]	; (8012cec <vTaskStartScheduler+0xbc>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012c74:	2301      	movs	r3, #1
 8012c76:	617b      	str	r3, [r7, #20]
 8012c78:	e001      	b.n	8012c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d102      	bne.n	8012c8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012c84:	f000 fdb2 	bl	80137ec <xTimerCreateTimerTask>
 8012c88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	2b01      	cmp	r3, #1
 8012c8e:	d116      	bne.n	8012cbe <vTaskStartScheduler+0x8e>
	__asm volatile
 8012c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c94:	f383 8811 	msr	BASEPRI, r3
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	f3bf 8f4f 	dsb	sy
 8012ca0:	613b      	str	r3, [r7, #16]
}
 8012ca2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012ca4:	4b12      	ldr	r3, [pc, #72]	; (8012cf0 <vTaskStartScheduler+0xc0>)
 8012ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012caa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012cac:	4b11      	ldr	r3, [pc, #68]	; (8012cf4 <vTaskStartScheduler+0xc4>)
 8012cae:	2201      	movs	r2, #1
 8012cb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012cb2:	4b11      	ldr	r3, [pc, #68]	; (8012cf8 <vTaskStartScheduler+0xc8>)
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012cb8:	f001 f992 	bl	8013fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012cbc:	e00e      	b.n	8012cdc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cc4:	d10a      	bne.n	8012cdc <vTaskStartScheduler+0xac>
	__asm volatile
 8012cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cca:	f383 8811 	msr	BASEPRI, r3
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	60fb      	str	r3, [r7, #12]
}
 8012cd8:	bf00      	nop
 8012cda:	e7fe      	b.n	8012cda <vTaskStartScheduler+0xaa>
}
 8012cdc:	bf00      	nop
 8012cde:	3718      	adds	r7, #24
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	0801543c 	.word	0x0801543c
 8012ce8:	08013451 	.word	0x08013451
 8012cec:	24001830 	.word	0x24001830
 8012cf0:	2400182c 	.word	0x2400182c
 8012cf4:	24001818 	.word	0x24001818
 8012cf8:	24001810 	.word	0x24001810

08012cfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012d00:	4b04      	ldr	r3, [pc, #16]	; (8012d14 <vTaskSuspendAll+0x18>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	3301      	adds	r3, #1
 8012d06:	4a03      	ldr	r2, [pc, #12]	; (8012d14 <vTaskSuspendAll+0x18>)
 8012d08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012d0a:	bf00      	nop
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr
 8012d14:	24001834 	.word	0x24001834

08012d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b084      	sub	sp, #16
 8012d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012d22:	2300      	movs	r3, #0
 8012d24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012d26:	4b42      	ldr	r3, [pc, #264]	; (8012e30 <xTaskResumeAll+0x118>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d10a      	bne.n	8012d44 <xTaskResumeAll+0x2c>
	__asm volatile
 8012d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d32:	f383 8811 	msr	BASEPRI, r3
 8012d36:	f3bf 8f6f 	isb	sy
 8012d3a:	f3bf 8f4f 	dsb	sy
 8012d3e:	603b      	str	r3, [r7, #0]
}
 8012d40:	bf00      	nop
 8012d42:	e7fe      	b.n	8012d42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012d44:	f001 f9ee 	bl	8014124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012d48:	4b39      	ldr	r3, [pc, #228]	; (8012e30 <xTaskResumeAll+0x118>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	4a38      	ldr	r2, [pc, #224]	; (8012e30 <xTaskResumeAll+0x118>)
 8012d50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d52:	4b37      	ldr	r3, [pc, #220]	; (8012e30 <xTaskResumeAll+0x118>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d162      	bne.n	8012e20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012d5a:	4b36      	ldr	r3, [pc, #216]	; (8012e34 <xTaskResumeAll+0x11c>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d05e      	beq.n	8012e20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d62:	e02f      	b.n	8012dc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d64:	4b34      	ldr	r3, [pc, #208]	; (8012e38 <xTaskResumeAll+0x120>)
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	3318      	adds	r3, #24
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe ff57 	bl	8011c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	3304      	adds	r3, #4
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fe ff52 	bl	8011c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d84:	4b2d      	ldr	r3, [pc, #180]	; (8012e3c <xTaskResumeAll+0x124>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d903      	bls.n	8012d94 <xTaskResumeAll+0x7c>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d90:	4a2a      	ldr	r2, [pc, #168]	; (8012e3c <xTaskResumeAll+0x124>)
 8012d92:	6013      	str	r3, [r2, #0]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d98:	4613      	mov	r3, r2
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	4413      	add	r3, r2
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4a27      	ldr	r2, [pc, #156]	; (8012e40 <xTaskResumeAll+0x128>)
 8012da2:	441a      	add	r2, r3
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	3304      	adds	r3, #4
 8012da8:	4619      	mov	r1, r3
 8012daa:	4610      	mov	r0, r2
 8012dac:	f7fe fedd 	bl	8011b6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012db4:	4b23      	ldr	r3, [pc, #140]	; (8012e44 <xTaskResumeAll+0x12c>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d302      	bcc.n	8012dc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012dbe:	4b22      	ldr	r3, [pc, #136]	; (8012e48 <xTaskResumeAll+0x130>)
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012dc4:	4b1c      	ldr	r3, [pc, #112]	; (8012e38 <xTaskResumeAll+0x120>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1cb      	bne.n	8012d64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d001      	beq.n	8012dd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012dd2:	f000 fbf3 	bl	80135bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012dd6:	4b1d      	ldr	r3, [pc, #116]	; (8012e4c <xTaskResumeAll+0x134>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d010      	beq.n	8012e04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012de2:	f000 f847 	bl	8012e74 <xTaskIncrementTick>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012dec:	4b16      	ldr	r3, [pc, #88]	; (8012e48 <xTaskResumeAll+0x130>)
 8012dee:	2201      	movs	r2, #1
 8012df0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	3b01      	subs	r3, #1
 8012df6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d1f1      	bne.n	8012de2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012dfe:	4b13      	ldr	r3, [pc, #76]	; (8012e4c <xTaskResumeAll+0x134>)
 8012e00:	2200      	movs	r2, #0
 8012e02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012e04:	4b10      	ldr	r3, [pc, #64]	; (8012e48 <xTaskResumeAll+0x130>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d009      	beq.n	8012e20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012e10:	4b0f      	ldr	r3, [pc, #60]	; (8012e50 <xTaskResumeAll+0x138>)
 8012e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e16:	601a      	str	r2, [r3, #0]
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012e20:	f001 f9b0 	bl	8014184 <vPortExitCritical>

	return xAlreadyYielded;
 8012e24:	68bb      	ldr	r3, [r7, #8]
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3710      	adds	r7, #16
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	24001834 	.word	0x24001834
 8012e34:	2400180c 	.word	0x2400180c
 8012e38:	240017cc 	.word	0x240017cc
 8012e3c:	24001814 	.word	0x24001814
 8012e40:	2400133c 	.word	0x2400133c
 8012e44:	24001338 	.word	0x24001338
 8012e48:	24001820 	.word	0x24001820
 8012e4c:	2400181c 	.word	0x2400181c
 8012e50:	e000ed04 	.word	0xe000ed04

08012e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012e5a:	4b05      	ldr	r3, [pc, #20]	; (8012e70 <xTaskGetTickCount+0x1c>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012e60:	687b      	ldr	r3, [r7, #4]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	370c      	adds	r7, #12
 8012e66:	46bd      	mov	sp, r7
 8012e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6c:	4770      	bx	lr
 8012e6e:	bf00      	nop
 8012e70:	24001810 	.word	0x24001810

08012e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b086      	sub	sp, #24
 8012e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e7e:	4b4f      	ldr	r3, [pc, #316]	; (8012fbc <xTaskIncrementTick+0x148>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	f040 808f 	bne.w	8012fa6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012e88:	4b4d      	ldr	r3, [pc, #308]	; (8012fc0 <xTaskIncrementTick+0x14c>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012e90:	4a4b      	ldr	r2, [pc, #300]	; (8012fc0 <xTaskIncrementTick+0x14c>)
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d120      	bne.n	8012ede <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012e9c:	4b49      	ldr	r3, [pc, #292]	; (8012fc4 <xTaskIncrementTick+0x150>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d00a      	beq.n	8012ebc <xTaskIncrementTick+0x48>
	__asm volatile
 8012ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eaa:	f383 8811 	msr	BASEPRI, r3
 8012eae:	f3bf 8f6f 	isb	sy
 8012eb2:	f3bf 8f4f 	dsb	sy
 8012eb6:	603b      	str	r3, [r7, #0]
}
 8012eb8:	bf00      	nop
 8012eba:	e7fe      	b.n	8012eba <xTaskIncrementTick+0x46>
 8012ebc:	4b41      	ldr	r3, [pc, #260]	; (8012fc4 <xTaskIncrementTick+0x150>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	60fb      	str	r3, [r7, #12]
 8012ec2:	4b41      	ldr	r3, [pc, #260]	; (8012fc8 <xTaskIncrementTick+0x154>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	4a3f      	ldr	r2, [pc, #252]	; (8012fc4 <xTaskIncrementTick+0x150>)
 8012ec8:	6013      	str	r3, [r2, #0]
 8012eca:	4a3f      	ldr	r2, [pc, #252]	; (8012fc8 <xTaskIncrementTick+0x154>)
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6013      	str	r3, [r2, #0]
 8012ed0:	4b3e      	ldr	r3, [pc, #248]	; (8012fcc <xTaskIncrementTick+0x158>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	3301      	adds	r3, #1
 8012ed6:	4a3d      	ldr	r2, [pc, #244]	; (8012fcc <xTaskIncrementTick+0x158>)
 8012ed8:	6013      	str	r3, [r2, #0]
 8012eda:	f000 fb6f 	bl	80135bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012ede:	4b3c      	ldr	r3, [pc, #240]	; (8012fd0 <xTaskIncrementTick+0x15c>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	693a      	ldr	r2, [r7, #16]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d349      	bcc.n	8012f7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ee8:	4b36      	ldr	r3, [pc, #216]	; (8012fc4 <xTaskIncrementTick+0x150>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d104      	bne.n	8012efc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ef2:	4b37      	ldr	r3, [pc, #220]	; (8012fd0 <xTaskIncrementTick+0x15c>)
 8012ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ef8:	601a      	str	r2, [r3, #0]
					break;
 8012efa:	e03f      	b.n	8012f7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012efc:	4b31      	ldr	r3, [pc, #196]	; (8012fc4 <xTaskIncrementTick+0x150>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	68db      	ldr	r3, [r3, #12]
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012f0c:	693a      	ldr	r2, [r7, #16]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d203      	bcs.n	8012f1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012f14:	4a2e      	ldr	r2, [pc, #184]	; (8012fd0 <xTaskIncrementTick+0x15c>)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012f1a:	e02f      	b.n	8012f7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	3304      	adds	r3, #4
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe fe7f 	bl	8011c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d004      	beq.n	8012f38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	3318      	adds	r3, #24
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7fe fe76 	bl	8011c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f3c:	4b25      	ldr	r3, [pc, #148]	; (8012fd4 <xTaskIncrementTick+0x160>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d903      	bls.n	8012f4c <xTaskIncrementTick+0xd8>
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f48:	4a22      	ldr	r2, [pc, #136]	; (8012fd4 <xTaskIncrementTick+0x160>)
 8012f4a:	6013      	str	r3, [r2, #0]
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f50:	4613      	mov	r3, r2
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	4413      	add	r3, r2
 8012f56:	009b      	lsls	r3, r3, #2
 8012f58:	4a1f      	ldr	r2, [pc, #124]	; (8012fd8 <xTaskIncrementTick+0x164>)
 8012f5a:	441a      	add	r2, r3
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	3304      	adds	r3, #4
 8012f60:	4619      	mov	r1, r3
 8012f62:	4610      	mov	r0, r2
 8012f64:	f7fe fe01 	bl	8011b6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f6c:	4b1b      	ldr	r3, [pc, #108]	; (8012fdc <xTaskIncrementTick+0x168>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d3b8      	bcc.n	8012ee8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012f76:	2301      	movs	r3, #1
 8012f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f7a:	e7b5      	b.n	8012ee8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012f7c:	4b17      	ldr	r3, [pc, #92]	; (8012fdc <xTaskIncrementTick+0x168>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f82:	4915      	ldr	r1, [pc, #84]	; (8012fd8 <xTaskIncrementTick+0x164>)
 8012f84:	4613      	mov	r3, r2
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	4413      	add	r3, r2
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	440b      	add	r3, r1
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d901      	bls.n	8012f98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012f94:	2301      	movs	r3, #1
 8012f96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012f98:	4b11      	ldr	r3, [pc, #68]	; (8012fe0 <xTaskIncrementTick+0x16c>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d007      	beq.n	8012fb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	617b      	str	r3, [r7, #20]
 8012fa4:	e004      	b.n	8012fb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012fa6:	4b0f      	ldr	r3, [pc, #60]	; (8012fe4 <xTaskIncrementTick+0x170>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	3301      	adds	r3, #1
 8012fac:	4a0d      	ldr	r2, [pc, #52]	; (8012fe4 <xTaskIncrementTick+0x170>)
 8012fae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012fb0:	697b      	ldr	r3, [r7, #20]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3718      	adds	r7, #24
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	24001834 	.word	0x24001834
 8012fc0:	24001810 	.word	0x24001810
 8012fc4:	240017c4 	.word	0x240017c4
 8012fc8:	240017c8 	.word	0x240017c8
 8012fcc:	24001824 	.word	0x24001824
 8012fd0:	2400182c 	.word	0x2400182c
 8012fd4:	24001814 	.word	0x24001814
 8012fd8:	2400133c 	.word	0x2400133c
 8012fdc:	24001338 	.word	0x24001338
 8012fe0:	24001820 	.word	0x24001820
 8012fe4:	2400181c 	.word	0x2400181c

08012fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012fee:	4b28      	ldr	r3, [pc, #160]	; (8013090 <vTaskSwitchContext+0xa8>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d003      	beq.n	8012ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012ff6:	4b27      	ldr	r3, [pc, #156]	; (8013094 <vTaskSwitchContext+0xac>)
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ffc:	e041      	b.n	8013082 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012ffe:	4b25      	ldr	r3, [pc, #148]	; (8013094 <vTaskSwitchContext+0xac>)
 8013000:	2200      	movs	r2, #0
 8013002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013004:	4b24      	ldr	r3, [pc, #144]	; (8013098 <vTaskSwitchContext+0xb0>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	60fb      	str	r3, [r7, #12]
 801300a:	e010      	b.n	801302e <vTaskSwitchContext+0x46>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d10a      	bne.n	8013028 <vTaskSwitchContext+0x40>
	__asm volatile
 8013012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013016:	f383 8811 	msr	BASEPRI, r3
 801301a:	f3bf 8f6f 	isb	sy
 801301e:	f3bf 8f4f 	dsb	sy
 8013022:	607b      	str	r3, [r7, #4]
}
 8013024:	bf00      	nop
 8013026:	e7fe      	b.n	8013026 <vTaskSwitchContext+0x3e>
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	3b01      	subs	r3, #1
 801302c:	60fb      	str	r3, [r7, #12]
 801302e:	491b      	ldr	r1, [pc, #108]	; (801309c <vTaskSwitchContext+0xb4>)
 8013030:	68fa      	ldr	r2, [r7, #12]
 8013032:	4613      	mov	r3, r2
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	4413      	add	r3, r2
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	440b      	add	r3, r1
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d0e4      	beq.n	801300c <vTaskSwitchContext+0x24>
 8013042:	68fa      	ldr	r2, [r7, #12]
 8013044:	4613      	mov	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	4413      	add	r3, r2
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	4a13      	ldr	r2, [pc, #76]	; (801309c <vTaskSwitchContext+0xb4>)
 801304e:	4413      	add	r3, r2
 8013050:	60bb      	str	r3, [r7, #8]
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	685a      	ldr	r2, [r3, #4]
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	605a      	str	r2, [r3, #4]
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	685a      	ldr	r2, [r3, #4]
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	3308      	adds	r3, #8
 8013064:	429a      	cmp	r2, r3
 8013066:	d104      	bne.n	8013072 <vTaskSwitchContext+0x8a>
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	685a      	ldr	r2, [r3, #4]
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	605a      	str	r2, [r3, #4]
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	4a09      	ldr	r2, [pc, #36]	; (80130a0 <vTaskSwitchContext+0xb8>)
 801307a:	6013      	str	r3, [r2, #0]
 801307c:	4a06      	ldr	r2, [pc, #24]	; (8013098 <vTaskSwitchContext+0xb0>)
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6013      	str	r3, [r2, #0]
}
 8013082:	bf00      	nop
 8013084:	3714      	adds	r7, #20
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop
 8013090:	24001834 	.word	0x24001834
 8013094:	24001820 	.word	0x24001820
 8013098:	24001814 	.word	0x24001814
 801309c:	2400133c 	.word	0x2400133c
 80130a0:	24001338 	.word	0x24001338

080130a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d10a      	bne.n	80130ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80130b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	60fb      	str	r3, [r7, #12]
}
 80130c6:	bf00      	nop
 80130c8:	e7fe      	b.n	80130c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130ca:	4b07      	ldr	r3, [pc, #28]	; (80130e8 <vTaskPlaceOnEventList+0x44>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	3318      	adds	r3, #24
 80130d0:	4619      	mov	r1, r3
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7fe fd6d 	bl	8011bb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80130d8:	2101      	movs	r1, #1
 80130da:	6838      	ldr	r0, [r7, #0]
 80130dc:	f000 fb32 	bl	8013744 <prvAddCurrentTaskToDelayedList>
}
 80130e0:	bf00      	nop
 80130e2:	3710      	adds	r7, #16
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	24001338 	.word	0x24001338

080130ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10a      	bne.n	8013114 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80130fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013102:	f383 8811 	msr	BASEPRI, r3
 8013106:	f3bf 8f6f 	isb	sy
 801310a:	f3bf 8f4f 	dsb	sy
 801310e:	617b      	str	r3, [r7, #20]
}
 8013110:	bf00      	nop
 8013112:	e7fe      	b.n	8013112 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013114:	4b11      	ldr	r3, [pc, #68]	; (801315c <vTaskPlaceOnUnorderedEventList+0x70>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d10a      	bne.n	8013132 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013120:	f383 8811 	msr	BASEPRI, r3
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	613b      	str	r3, [r7, #16]
}
 801312e:	bf00      	nop
 8013130:	e7fe      	b.n	8013130 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013132:	4b0b      	ldr	r3, [pc, #44]	; (8013160 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68ba      	ldr	r2, [r7, #8]
 8013138:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801313c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801313e:	4b08      	ldr	r3, [pc, #32]	; (8013160 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	3318      	adds	r3, #24
 8013144:	4619      	mov	r1, r3
 8013146:	68f8      	ldr	r0, [r7, #12]
 8013148:	f7fe fd0f 	bl	8011b6a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801314c:	2101      	movs	r1, #1
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 faf8 	bl	8013744 <prvAddCurrentTaskToDelayedList>
}
 8013154:	bf00      	nop
 8013156:	3718      	adds	r7, #24
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	24001834 	.word	0x24001834
 8013160:	24001338 	.word	0x24001338

08013164 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d10a      	bne.n	801318c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317a:	f383 8811 	msr	BASEPRI, r3
 801317e:	f3bf 8f6f 	isb	sy
 8013182:	f3bf 8f4f 	dsb	sy
 8013186:	617b      	str	r3, [r7, #20]
}
 8013188:	bf00      	nop
 801318a:	e7fe      	b.n	801318a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801318c:	4b0a      	ldr	r3, [pc, #40]	; (80131b8 <vTaskPlaceOnEventListRestricted+0x54>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	3318      	adds	r3, #24
 8013192:	4619      	mov	r1, r3
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7fe fce8 	bl	8011b6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d002      	beq.n	80131a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80131a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80131a6:	6879      	ldr	r1, [r7, #4]
 80131a8:	68b8      	ldr	r0, [r7, #8]
 80131aa:	f000 facb 	bl	8013744 <prvAddCurrentTaskToDelayedList>
	}
 80131ae:	bf00      	nop
 80131b0:	3718      	adds	r7, #24
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	24001338 	.word	0x24001338

080131bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b086      	sub	sp, #24
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	68db      	ldr	r3, [r3, #12]
 80131ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d10a      	bne.n	80131e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80131d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d6:	f383 8811 	msr	BASEPRI, r3
 80131da:	f3bf 8f6f 	isb	sy
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	60fb      	str	r3, [r7, #12]
}
 80131e4:	bf00      	nop
 80131e6:	e7fe      	b.n	80131e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	3318      	adds	r3, #24
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7fe fd19 	bl	8011c24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131f2:	4b1e      	ldr	r3, [pc, #120]	; (801326c <xTaskRemoveFromEventList+0xb0>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d11d      	bne.n	8013236 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	3304      	adds	r3, #4
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fe fd10 	bl	8011c24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013208:	4b19      	ldr	r3, [pc, #100]	; (8013270 <xTaskRemoveFromEventList+0xb4>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	429a      	cmp	r2, r3
 801320e:	d903      	bls.n	8013218 <xTaskRemoveFromEventList+0x5c>
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013214:	4a16      	ldr	r2, [pc, #88]	; (8013270 <xTaskRemoveFromEventList+0xb4>)
 8013216:	6013      	str	r3, [r2, #0]
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801321c:	4613      	mov	r3, r2
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	4413      	add	r3, r2
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	4a13      	ldr	r2, [pc, #76]	; (8013274 <xTaskRemoveFromEventList+0xb8>)
 8013226:	441a      	add	r2, r3
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	3304      	adds	r3, #4
 801322c:	4619      	mov	r1, r3
 801322e:	4610      	mov	r0, r2
 8013230:	f7fe fc9b 	bl	8011b6a <vListInsertEnd>
 8013234:	e005      	b.n	8013242 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	3318      	adds	r3, #24
 801323a:	4619      	mov	r1, r3
 801323c:	480e      	ldr	r0, [pc, #56]	; (8013278 <xTaskRemoveFromEventList+0xbc>)
 801323e:	f7fe fc94 	bl	8011b6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013246:	4b0d      	ldr	r3, [pc, #52]	; (801327c <xTaskRemoveFromEventList+0xc0>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801324c:	429a      	cmp	r2, r3
 801324e:	d905      	bls.n	801325c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013250:	2301      	movs	r3, #1
 8013252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013254:	4b0a      	ldr	r3, [pc, #40]	; (8013280 <xTaskRemoveFromEventList+0xc4>)
 8013256:	2201      	movs	r2, #1
 8013258:	601a      	str	r2, [r3, #0]
 801325a:	e001      	b.n	8013260 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801325c:	2300      	movs	r3, #0
 801325e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013260:	697b      	ldr	r3, [r7, #20]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3718      	adds	r7, #24
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	24001834 	.word	0x24001834
 8013270:	24001814 	.word	0x24001814
 8013274:	2400133c 	.word	0x2400133c
 8013278:	240017cc 	.word	0x240017cc
 801327c:	24001338 	.word	0x24001338
 8013280:	24001820 	.word	0x24001820

08013284 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801328e:	4b29      	ldr	r3, [pc, #164]	; (8013334 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d10a      	bne.n	80132ac <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801329a:	f383 8811 	msr	BASEPRI, r3
 801329e:	f3bf 8f6f 	isb	sy
 80132a2:	f3bf 8f4f 	dsb	sy
 80132a6:	613b      	str	r3, [r7, #16]
}
 80132a8:	bf00      	nop
 80132aa:	e7fe      	b.n	80132aa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d10a      	bne.n	80132d8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80132c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c6:	f383 8811 	msr	BASEPRI, r3
 80132ca:	f3bf 8f6f 	isb	sy
 80132ce:	f3bf 8f4f 	dsb	sy
 80132d2:	60fb      	str	r3, [r7, #12]
}
 80132d4:	bf00      	nop
 80132d6:	e7fe      	b.n	80132d6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7fe fca3 	bl	8011c24 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	3304      	adds	r3, #4
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fe fc9e 	bl	8011c24 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ec:	4b12      	ldr	r3, [pc, #72]	; (8013338 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d903      	bls.n	80132fc <vTaskRemoveFromUnorderedEventList+0x78>
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132f8:	4a0f      	ldr	r2, [pc, #60]	; (8013338 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80132fa:	6013      	str	r3, [r2, #0]
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013300:	4613      	mov	r3, r2
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	4413      	add	r3, r2
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	4a0c      	ldr	r2, [pc, #48]	; (801333c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801330a:	441a      	add	r2, r3
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	3304      	adds	r3, #4
 8013310:	4619      	mov	r1, r3
 8013312:	4610      	mov	r0, r2
 8013314:	f7fe fc29 	bl	8011b6a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801331c:	4b08      	ldr	r3, [pc, #32]	; (8013340 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013322:	429a      	cmp	r2, r3
 8013324:	d902      	bls.n	801332c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8013326:	4b07      	ldr	r3, [pc, #28]	; (8013344 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013328:	2201      	movs	r2, #1
 801332a:	601a      	str	r2, [r3, #0]
	}
}
 801332c:	bf00      	nop
 801332e:	3718      	adds	r7, #24
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	24001834 	.word	0x24001834
 8013338:	24001814 	.word	0x24001814
 801333c:	2400133c 	.word	0x2400133c
 8013340:	24001338 	.word	0x24001338
 8013344:	24001820 	.word	0x24001820

08013348 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013350:	4b06      	ldr	r3, [pc, #24]	; (801336c <vTaskInternalSetTimeOutState+0x24>)
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013358:	4b05      	ldr	r3, [pc, #20]	; (8013370 <vTaskInternalSetTimeOutState+0x28>)
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	605a      	str	r2, [r3, #4]
}
 8013360:	bf00      	nop
 8013362:	370c      	adds	r7, #12
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr
 801336c:	24001824 	.word	0x24001824
 8013370:	24001810 	.word	0x24001810

08013374 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b088      	sub	sp, #32
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10a      	bne.n	801339a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013388:	f383 8811 	msr	BASEPRI, r3
 801338c:	f3bf 8f6f 	isb	sy
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	613b      	str	r3, [r7, #16]
}
 8013396:	bf00      	nop
 8013398:	e7fe      	b.n	8013398 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10a      	bne.n	80133b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80133a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a4:	f383 8811 	msr	BASEPRI, r3
 80133a8:	f3bf 8f6f 	isb	sy
 80133ac:	f3bf 8f4f 	dsb	sy
 80133b0:	60fb      	str	r3, [r7, #12]
}
 80133b2:	bf00      	nop
 80133b4:	e7fe      	b.n	80133b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80133b6:	f000 feb5 	bl	8014124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80133ba:	4b1d      	ldr	r3, [pc, #116]	; (8013430 <xTaskCheckForTimeOut+0xbc>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	69ba      	ldr	r2, [r7, #24]
 80133c6:	1ad3      	subs	r3, r2, r3
 80133c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133d2:	d102      	bne.n	80133da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80133d4:	2300      	movs	r3, #0
 80133d6:	61fb      	str	r3, [r7, #28]
 80133d8:	e023      	b.n	8013422 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	4b15      	ldr	r3, [pc, #84]	; (8013434 <xTaskCheckForTimeOut+0xc0>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d007      	beq.n	80133f6 <xTaskCheckForTimeOut+0x82>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	69ba      	ldr	r2, [r7, #24]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d302      	bcc.n	80133f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80133f0:	2301      	movs	r3, #1
 80133f2:	61fb      	str	r3, [r7, #28]
 80133f4:	e015      	b.n	8013422 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	697a      	ldr	r2, [r7, #20]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d20b      	bcs.n	8013418 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	1ad2      	subs	r2, r2, r3
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f7ff ff9b 	bl	8013348 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013412:	2300      	movs	r3, #0
 8013414:	61fb      	str	r3, [r7, #28]
 8013416:	e004      	b.n	8013422 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	2200      	movs	r2, #0
 801341c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801341e:	2301      	movs	r3, #1
 8013420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013422:	f000 feaf 	bl	8014184 <vPortExitCritical>

	return xReturn;
 8013426:	69fb      	ldr	r3, [r7, #28]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3720      	adds	r7, #32
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	24001810 	.word	0x24001810
 8013434:	24001824 	.word	0x24001824

08013438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013438:	b480      	push	{r7}
 801343a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801343c:	4b03      	ldr	r3, [pc, #12]	; (801344c <vTaskMissedYield+0x14>)
 801343e:	2201      	movs	r2, #1
 8013440:	601a      	str	r2, [r3, #0]
}
 8013442:	bf00      	nop
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr
 801344c:	24001820 	.word	0x24001820

08013450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013458:	f000 f852 	bl	8013500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801345c:	4b06      	ldr	r3, [pc, #24]	; (8013478 <prvIdleTask+0x28>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b01      	cmp	r3, #1
 8013462:	d9f9      	bls.n	8013458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013464:	4b05      	ldr	r3, [pc, #20]	; (801347c <prvIdleTask+0x2c>)
 8013466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801346a:	601a      	str	r2, [r3, #0]
 801346c:	f3bf 8f4f 	dsb	sy
 8013470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013474:	e7f0      	b.n	8013458 <prvIdleTask+0x8>
 8013476:	bf00      	nop
 8013478:	2400133c 	.word	0x2400133c
 801347c:	e000ed04 	.word	0xe000ed04

08013480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013486:	2300      	movs	r3, #0
 8013488:	607b      	str	r3, [r7, #4]
 801348a:	e00c      	b.n	80134a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	4613      	mov	r3, r2
 8013490:	009b      	lsls	r3, r3, #2
 8013492:	4413      	add	r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	4a12      	ldr	r2, [pc, #72]	; (80134e0 <prvInitialiseTaskLists+0x60>)
 8013498:	4413      	add	r3, r2
 801349a:	4618      	mov	r0, r3
 801349c:	f7fe fb38 	bl	8011b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	3301      	adds	r3, #1
 80134a4:	607b      	str	r3, [r7, #4]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2b37      	cmp	r3, #55	; 0x37
 80134aa:	d9ef      	bls.n	801348c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80134ac:	480d      	ldr	r0, [pc, #52]	; (80134e4 <prvInitialiseTaskLists+0x64>)
 80134ae:	f7fe fb2f 	bl	8011b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80134b2:	480d      	ldr	r0, [pc, #52]	; (80134e8 <prvInitialiseTaskLists+0x68>)
 80134b4:	f7fe fb2c 	bl	8011b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80134b8:	480c      	ldr	r0, [pc, #48]	; (80134ec <prvInitialiseTaskLists+0x6c>)
 80134ba:	f7fe fb29 	bl	8011b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80134be:	480c      	ldr	r0, [pc, #48]	; (80134f0 <prvInitialiseTaskLists+0x70>)
 80134c0:	f7fe fb26 	bl	8011b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80134c4:	480b      	ldr	r0, [pc, #44]	; (80134f4 <prvInitialiseTaskLists+0x74>)
 80134c6:	f7fe fb23 	bl	8011b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80134ca:	4b0b      	ldr	r3, [pc, #44]	; (80134f8 <prvInitialiseTaskLists+0x78>)
 80134cc:	4a05      	ldr	r2, [pc, #20]	; (80134e4 <prvInitialiseTaskLists+0x64>)
 80134ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80134d0:	4b0a      	ldr	r3, [pc, #40]	; (80134fc <prvInitialiseTaskLists+0x7c>)
 80134d2:	4a05      	ldr	r2, [pc, #20]	; (80134e8 <prvInitialiseTaskLists+0x68>)
 80134d4:	601a      	str	r2, [r3, #0]
}
 80134d6:	bf00      	nop
 80134d8:	3708      	adds	r7, #8
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	2400133c 	.word	0x2400133c
 80134e4:	2400179c 	.word	0x2400179c
 80134e8:	240017b0 	.word	0x240017b0
 80134ec:	240017cc 	.word	0x240017cc
 80134f0:	240017e0 	.word	0x240017e0
 80134f4:	240017f8 	.word	0x240017f8
 80134f8:	240017c4 	.word	0x240017c4
 80134fc:	240017c8 	.word	0x240017c8

08013500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013506:	e019      	b.n	801353c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013508:	f000 fe0c 	bl	8014124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801350c:	4b10      	ldr	r3, [pc, #64]	; (8013550 <prvCheckTasksWaitingTermination+0x50>)
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	3304      	adds	r3, #4
 8013518:	4618      	mov	r0, r3
 801351a:	f7fe fb83 	bl	8011c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801351e:	4b0d      	ldr	r3, [pc, #52]	; (8013554 <prvCheckTasksWaitingTermination+0x54>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	3b01      	subs	r3, #1
 8013524:	4a0b      	ldr	r2, [pc, #44]	; (8013554 <prvCheckTasksWaitingTermination+0x54>)
 8013526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013528:	4b0b      	ldr	r3, [pc, #44]	; (8013558 <prvCheckTasksWaitingTermination+0x58>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	3b01      	subs	r3, #1
 801352e:	4a0a      	ldr	r2, [pc, #40]	; (8013558 <prvCheckTasksWaitingTermination+0x58>)
 8013530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013532:	f000 fe27 	bl	8014184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f000 f810 	bl	801355c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801353c:	4b06      	ldr	r3, [pc, #24]	; (8013558 <prvCheckTasksWaitingTermination+0x58>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d1e1      	bne.n	8013508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013544:	bf00      	nop
 8013546:	bf00      	nop
 8013548:	3708      	adds	r7, #8
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	240017e0 	.word	0x240017e0
 8013554:	2400180c 	.word	0x2400180c
 8013558:	240017f4 	.word	0x240017f4

0801355c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801355c:	b580      	push	{r7, lr}
 801355e:	b084      	sub	sp, #16
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801356a:	2b00      	cmp	r3, #0
 801356c:	d108      	bne.n	8013580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013572:	4618      	mov	r0, r3
 8013574:	f000 ffc4 	bl	8014500 <vPortFree>
				vPortFree( pxTCB );
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f000 ffc1 	bl	8014500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801357e:	e018      	b.n	80135b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013586:	2b01      	cmp	r3, #1
 8013588:	d103      	bne.n	8013592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f000 ffb8 	bl	8014500 <vPortFree>
	}
 8013590:	e00f      	b.n	80135b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013598:	2b02      	cmp	r3, #2
 801359a:	d00a      	beq.n	80135b2 <prvDeleteTCB+0x56>
	__asm volatile
 801359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a0:	f383 8811 	msr	BASEPRI, r3
 80135a4:	f3bf 8f6f 	isb	sy
 80135a8:	f3bf 8f4f 	dsb	sy
 80135ac:	60fb      	str	r3, [r7, #12]
}
 80135ae:	bf00      	nop
 80135b0:	e7fe      	b.n	80135b0 <prvDeleteTCB+0x54>
	}
 80135b2:	bf00      	nop
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
	...

080135bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80135bc:	b480      	push	{r7}
 80135be:	b083      	sub	sp, #12
 80135c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80135c2:	4b0c      	ldr	r3, [pc, #48]	; (80135f4 <prvResetNextTaskUnblockTime+0x38>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d104      	bne.n	80135d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80135cc:	4b0a      	ldr	r3, [pc, #40]	; (80135f8 <prvResetNextTaskUnblockTime+0x3c>)
 80135ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80135d4:	e008      	b.n	80135e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135d6:	4b07      	ldr	r3, [pc, #28]	; (80135f4 <prvResetNextTaskUnblockTime+0x38>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	4a04      	ldr	r2, [pc, #16]	; (80135f8 <prvResetNextTaskUnblockTime+0x3c>)
 80135e6:	6013      	str	r3, [r2, #0]
}
 80135e8:	bf00      	nop
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr
 80135f4:	240017c4 	.word	0x240017c4
 80135f8:	2400182c 	.word	0x2400182c

080135fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80135fc:	b480      	push	{r7}
 80135fe:	b083      	sub	sp, #12
 8013600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013602:	4b0b      	ldr	r3, [pc, #44]	; (8013630 <xTaskGetSchedulerState+0x34>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d102      	bne.n	8013610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801360a:	2301      	movs	r3, #1
 801360c:	607b      	str	r3, [r7, #4]
 801360e:	e008      	b.n	8013622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013610:	4b08      	ldr	r3, [pc, #32]	; (8013634 <xTaskGetSchedulerState+0x38>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013618:	2302      	movs	r3, #2
 801361a:	607b      	str	r3, [r7, #4]
 801361c:	e001      	b.n	8013622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801361e:	2300      	movs	r3, #0
 8013620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013622:	687b      	ldr	r3, [r7, #4]
	}
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr
 8013630:	24001818 	.word	0x24001818
 8013634:	24001834 	.word	0x24001834

08013638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013638:	b580      	push	{r7, lr}
 801363a:	b086      	sub	sp, #24
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013644:	2300      	movs	r3, #0
 8013646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d056      	beq.n	80136fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801364e:	4b2e      	ldr	r3, [pc, #184]	; (8013708 <xTaskPriorityDisinherit+0xd0>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	693a      	ldr	r2, [r7, #16]
 8013654:	429a      	cmp	r2, r3
 8013656:	d00a      	beq.n	801366e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365c:	f383 8811 	msr	BASEPRI, r3
 8013660:	f3bf 8f6f 	isb	sy
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	60fb      	str	r3, [r7, #12]
}
 801366a:	bf00      	nop
 801366c:	e7fe      	b.n	801366c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013672:	2b00      	cmp	r3, #0
 8013674:	d10a      	bne.n	801368c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367a:	f383 8811 	msr	BASEPRI, r3
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f3bf 8f4f 	dsb	sy
 8013686:	60bb      	str	r3, [r7, #8]
}
 8013688:	bf00      	nop
 801368a:	e7fe      	b.n	801368a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013690:	1e5a      	subs	r2, r3, #1
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801369e:	429a      	cmp	r2, r3
 80136a0:	d02c      	beq.n	80136fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d128      	bne.n	80136fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	3304      	adds	r3, #4
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fe fab8 	bl	8011c24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136cc:	4b0f      	ldr	r3, [pc, #60]	; (801370c <xTaskPriorityDisinherit+0xd4>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d903      	bls.n	80136dc <xTaskPriorityDisinherit+0xa4>
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d8:	4a0c      	ldr	r2, [pc, #48]	; (801370c <xTaskPriorityDisinherit+0xd4>)
 80136da:	6013      	str	r3, [r2, #0]
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136e0:	4613      	mov	r3, r2
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	4413      	add	r3, r2
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	4a09      	ldr	r2, [pc, #36]	; (8013710 <xTaskPriorityDisinherit+0xd8>)
 80136ea:	441a      	add	r2, r3
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	3304      	adds	r3, #4
 80136f0:	4619      	mov	r1, r3
 80136f2:	4610      	mov	r0, r2
 80136f4:	f7fe fa39 	bl	8011b6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80136f8:	2301      	movs	r3, #1
 80136fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136fc:	697b      	ldr	r3, [r7, #20]
	}
 80136fe:	4618      	mov	r0, r3
 8013700:	3718      	adds	r7, #24
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
 8013706:	bf00      	nop
 8013708:	24001338 	.word	0x24001338
 801370c:	24001814 	.word	0x24001814
 8013710:	2400133c 	.word	0x2400133c

08013714 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013714:	b480      	push	{r7}
 8013716:	b083      	sub	sp, #12
 8013718:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801371a:	4b09      	ldr	r3, [pc, #36]	; (8013740 <uxTaskResetEventItemValue+0x2c>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	699b      	ldr	r3, [r3, #24]
 8013720:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013722:	4b07      	ldr	r3, [pc, #28]	; (8013740 <uxTaskResetEventItemValue+0x2c>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013728:	4b05      	ldr	r3, [pc, #20]	; (8013740 <uxTaskResetEventItemValue+0x2c>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013730:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8013732:	687b      	ldr	r3, [r7, #4]
}
 8013734:	4618      	mov	r0, r3
 8013736:	370c      	adds	r7, #12
 8013738:	46bd      	mov	sp, r7
 801373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373e:	4770      	bx	lr
 8013740:	24001338 	.word	0x24001338

08013744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801374e:	4b21      	ldr	r3, [pc, #132]	; (80137d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013754:	4b20      	ldr	r3, [pc, #128]	; (80137d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	3304      	adds	r3, #4
 801375a:	4618      	mov	r0, r3
 801375c:	f7fe fa62 	bl	8011c24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013766:	d10a      	bne.n	801377e <prvAddCurrentTaskToDelayedList+0x3a>
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d007      	beq.n	801377e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801376e:	4b1a      	ldr	r3, [pc, #104]	; (80137d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	3304      	adds	r3, #4
 8013774:	4619      	mov	r1, r3
 8013776:	4819      	ldr	r0, [pc, #100]	; (80137dc <prvAddCurrentTaskToDelayedList+0x98>)
 8013778:	f7fe f9f7 	bl	8011b6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801377c:	e026      	b.n	80137cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801377e:	68fa      	ldr	r2, [r7, #12]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	4413      	add	r3, r2
 8013784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013786:	4b14      	ldr	r3, [pc, #80]	; (80137d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	68ba      	ldr	r2, [r7, #8]
 801378c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801378e:	68ba      	ldr	r2, [r7, #8]
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	429a      	cmp	r2, r3
 8013794:	d209      	bcs.n	80137aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013796:	4b12      	ldr	r3, [pc, #72]	; (80137e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	4b0f      	ldr	r3, [pc, #60]	; (80137d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	3304      	adds	r3, #4
 80137a0:	4619      	mov	r1, r3
 80137a2:	4610      	mov	r0, r2
 80137a4:	f7fe fa05 	bl	8011bb2 <vListInsert>
}
 80137a8:	e010      	b.n	80137cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137aa:	4b0e      	ldr	r3, [pc, #56]	; (80137e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	4b0a      	ldr	r3, [pc, #40]	; (80137d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	3304      	adds	r3, #4
 80137b4:	4619      	mov	r1, r3
 80137b6:	4610      	mov	r0, r2
 80137b8:	f7fe f9fb 	bl	8011bb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80137bc:	4b0a      	ldr	r3, [pc, #40]	; (80137e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	68ba      	ldr	r2, [r7, #8]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d202      	bcs.n	80137cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80137c6:	4a08      	ldr	r2, [pc, #32]	; (80137e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	6013      	str	r3, [r2, #0]
}
 80137cc:	bf00      	nop
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	24001810 	.word	0x24001810
 80137d8:	24001338 	.word	0x24001338
 80137dc:	240017f8 	.word	0x240017f8
 80137e0:	240017c8 	.word	0x240017c8
 80137e4:	240017c4 	.word	0x240017c4
 80137e8:	2400182c 	.word	0x2400182c

080137ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b08a      	sub	sp, #40	; 0x28
 80137f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80137f2:	2300      	movs	r3, #0
 80137f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80137f6:	f000 fb07 	bl	8013e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80137fa:	4b1c      	ldr	r3, [pc, #112]	; (801386c <xTimerCreateTimerTask+0x80>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d021      	beq.n	8013846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013802:	2300      	movs	r3, #0
 8013804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013806:	2300      	movs	r3, #0
 8013808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801380a:	1d3a      	adds	r2, r7, #4
 801380c:	f107 0108 	add.w	r1, r7, #8
 8013810:	f107 030c 	add.w	r3, r7, #12
 8013814:	4618      	mov	r0, r3
 8013816:	f7fd ff73 	bl	8011700 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801381a:	6879      	ldr	r1, [r7, #4]
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	68fa      	ldr	r2, [r7, #12]
 8013820:	9202      	str	r2, [sp, #8]
 8013822:	9301      	str	r3, [sp, #4]
 8013824:	2302      	movs	r3, #2
 8013826:	9300      	str	r3, [sp, #0]
 8013828:	2300      	movs	r3, #0
 801382a:	460a      	mov	r2, r1
 801382c:	4910      	ldr	r1, [pc, #64]	; (8013870 <xTimerCreateTimerTask+0x84>)
 801382e:	4811      	ldr	r0, [pc, #68]	; (8013874 <xTimerCreateTimerTask+0x88>)
 8013830:	f7fe ff0e 	bl	8012650 <xTaskCreateStatic>
 8013834:	4603      	mov	r3, r0
 8013836:	4a10      	ldr	r2, [pc, #64]	; (8013878 <xTimerCreateTimerTask+0x8c>)
 8013838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <xTimerCreateTimerTask+0x8c>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013842:	2301      	movs	r3, #1
 8013844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d10a      	bne.n	8013862 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	f383 8811 	msr	BASEPRI, r3
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	613b      	str	r3, [r7, #16]
}
 801385e:	bf00      	nop
 8013860:	e7fe      	b.n	8013860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013862:	697b      	ldr	r3, [r7, #20]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3718      	adds	r7, #24
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	24001868 	.word	0x24001868
 8013870:	08015444 	.word	0x08015444
 8013874:	080139b1 	.word	0x080139b1
 8013878:	2400186c 	.word	0x2400186c

0801387c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b08a      	sub	sp, #40	; 0x28
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
 8013888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801388a:	2300      	movs	r3, #0
 801388c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d10a      	bne.n	80138aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8013894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013898:	f383 8811 	msr	BASEPRI, r3
 801389c:	f3bf 8f6f 	isb	sy
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	623b      	str	r3, [r7, #32]
}
 80138a6:	bf00      	nop
 80138a8:	e7fe      	b.n	80138a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80138aa:	4b1a      	ldr	r3, [pc, #104]	; (8013914 <xTimerGenericCommand+0x98>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d02a      	beq.n	8013908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	2b05      	cmp	r3, #5
 80138c2:	dc18      	bgt.n	80138f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80138c4:	f7ff fe9a 	bl	80135fc <xTaskGetSchedulerState>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b02      	cmp	r3, #2
 80138cc:	d109      	bne.n	80138e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80138ce:	4b11      	ldr	r3, [pc, #68]	; (8013914 <xTimerGenericCommand+0x98>)
 80138d0:	6818      	ldr	r0, [r3, #0]
 80138d2:	f107 0110 	add.w	r1, r7, #16
 80138d6:	2300      	movs	r3, #0
 80138d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138da:	f7fe fad1 	bl	8011e80 <xQueueGenericSend>
 80138de:	6278      	str	r0, [r7, #36]	; 0x24
 80138e0:	e012      	b.n	8013908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80138e2:	4b0c      	ldr	r3, [pc, #48]	; (8013914 <xTimerGenericCommand+0x98>)
 80138e4:	6818      	ldr	r0, [r3, #0]
 80138e6:	f107 0110 	add.w	r1, r7, #16
 80138ea:	2300      	movs	r3, #0
 80138ec:	2200      	movs	r2, #0
 80138ee:	f7fe fac7 	bl	8011e80 <xQueueGenericSend>
 80138f2:	6278      	str	r0, [r7, #36]	; 0x24
 80138f4:	e008      	b.n	8013908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80138f6:	4b07      	ldr	r3, [pc, #28]	; (8013914 <xTimerGenericCommand+0x98>)
 80138f8:	6818      	ldr	r0, [r3, #0]
 80138fa:	f107 0110 	add.w	r1, r7, #16
 80138fe:	2300      	movs	r3, #0
 8013900:	683a      	ldr	r2, [r7, #0]
 8013902:	f7fe fbbb 	bl	801207c <xQueueGenericSendFromISR>
 8013906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801390a:	4618      	mov	r0, r3
 801390c:	3728      	adds	r7, #40	; 0x28
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	24001868 	.word	0x24001868

08013918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b088      	sub	sp, #32
 801391c:	af02      	add	r7, sp, #8
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013922:	4b22      	ldr	r3, [pc, #136]	; (80139ac <prvProcessExpiredTimer+0x94>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	68db      	ldr	r3, [r3, #12]
 801392a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	3304      	adds	r3, #4
 8013930:	4618      	mov	r0, r3
 8013932:	f7fe f977 	bl	8011c24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801393c:	f003 0304 	and.w	r3, r3, #4
 8013940:	2b00      	cmp	r3, #0
 8013942:	d022      	beq.n	801398a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	699a      	ldr	r2, [r3, #24]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	18d1      	adds	r1, r2, r3
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	683a      	ldr	r2, [r7, #0]
 8013950:	6978      	ldr	r0, [r7, #20]
 8013952:	f000 f8d1 	bl	8013af8 <prvInsertTimerInActiveList>
 8013956:	4603      	mov	r3, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d01f      	beq.n	801399c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801395c:	2300      	movs	r3, #0
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	2300      	movs	r3, #0
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	2100      	movs	r1, #0
 8013966:	6978      	ldr	r0, [r7, #20]
 8013968:	f7ff ff88 	bl	801387c <xTimerGenericCommand>
 801396c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d113      	bne.n	801399c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013978:	f383 8811 	msr	BASEPRI, r3
 801397c:	f3bf 8f6f 	isb	sy
 8013980:	f3bf 8f4f 	dsb	sy
 8013984:	60fb      	str	r3, [r7, #12]
}
 8013986:	bf00      	nop
 8013988:	e7fe      	b.n	8013988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013990:	f023 0301 	bic.w	r3, r3, #1
 8013994:	b2da      	uxtb	r2, r3
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	6a1b      	ldr	r3, [r3, #32]
 80139a0:	6978      	ldr	r0, [r7, #20]
 80139a2:	4798      	blx	r3
}
 80139a4:	bf00      	nop
 80139a6:	3718      	adds	r7, #24
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	24001860 	.word	0x24001860

080139b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139b8:	f107 0308 	add.w	r3, r7, #8
 80139bc:	4618      	mov	r0, r3
 80139be:	f000 f857 	bl	8013a70 <prvGetNextExpireTime>
 80139c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	4619      	mov	r1, r3
 80139c8:	68f8      	ldr	r0, [r7, #12]
 80139ca:	f000 f803 	bl	80139d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80139ce:	f000 f8d5 	bl	8013b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139d2:	e7f1      	b.n	80139b8 <prvTimerTask+0x8>

080139d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80139de:	f7ff f98d 	bl	8012cfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80139e2:	f107 0308 	add.w	r3, r7, #8
 80139e6:	4618      	mov	r0, r3
 80139e8:	f000 f866 	bl	8013ab8 <prvSampleTimeNow>
 80139ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d130      	bne.n	8013a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d10a      	bne.n	8013a10 <prvProcessTimerOrBlockTask+0x3c>
 80139fa:	687a      	ldr	r2, [r7, #4]
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d806      	bhi.n	8013a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013a02:	f7ff f989 	bl	8012d18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013a06:	68f9      	ldr	r1, [r7, #12]
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f7ff ff85 	bl	8013918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013a0e:	e024      	b.n	8013a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d008      	beq.n	8013a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013a16:	4b13      	ldr	r3, [pc, #76]	; (8013a64 <prvProcessTimerOrBlockTask+0x90>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d101      	bne.n	8013a24 <prvProcessTimerOrBlockTask+0x50>
 8013a20:	2301      	movs	r3, #1
 8013a22:	e000      	b.n	8013a26 <prvProcessTimerOrBlockTask+0x52>
 8013a24:	2300      	movs	r3, #0
 8013a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013a28:	4b0f      	ldr	r3, [pc, #60]	; (8013a68 <prvProcessTimerOrBlockTask+0x94>)
 8013a2a:	6818      	ldr	r0, [r3, #0]
 8013a2c:	687a      	ldr	r2, [r7, #4]
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	683a      	ldr	r2, [r7, #0]
 8013a34:	4619      	mov	r1, r3
 8013a36:	f7fe fdd7 	bl	80125e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013a3a:	f7ff f96d 	bl	8012d18 <xTaskResumeAll>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d10a      	bne.n	8013a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013a44:	4b09      	ldr	r3, [pc, #36]	; (8013a6c <prvProcessTimerOrBlockTask+0x98>)
 8013a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a4a:	601a      	str	r2, [r3, #0]
 8013a4c:	f3bf 8f4f 	dsb	sy
 8013a50:	f3bf 8f6f 	isb	sy
}
 8013a54:	e001      	b.n	8013a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013a56:	f7ff f95f 	bl	8012d18 <xTaskResumeAll>
}
 8013a5a:	bf00      	nop
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	24001864 	.word	0x24001864
 8013a68:	24001868 	.word	0x24001868
 8013a6c:	e000ed04 	.word	0xe000ed04

08013a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013a70:	b480      	push	{r7}
 8013a72:	b085      	sub	sp, #20
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013a78:	4b0e      	ldr	r3, [pc, #56]	; (8013ab4 <prvGetNextExpireTime+0x44>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d101      	bne.n	8013a86 <prvGetNextExpireTime+0x16>
 8013a82:	2201      	movs	r2, #1
 8013a84:	e000      	b.n	8013a88 <prvGetNextExpireTime+0x18>
 8013a86:	2200      	movs	r2, #0
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d105      	bne.n	8013aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a94:	4b07      	ldr	r3, [pc, #28]	; (8013ab4 <prvGetNextExpireTime+0x44>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	68db      	ldr	r3, [r3, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	60fb      	str	r3, [r7, #12]
 8013a9e:	e001      	b.n	8013aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3714      	adds	r7, #20
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop
 8013ab4:	24001860 	.word	0x24001860

08013ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b084      	sub	sp, #16
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ac0:	f7ff f9c8 	bl	8012e54 <xTaskGetTickCount>
 8013ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013ac6:	4b0b      	ldr	r3, [pc, #44]	; (8013af4 <prvSampleTimeNow+0x3c>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	68fa      	ldr	r2, [r7, #12]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d205      	bcs.n	8013adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013ad0:	f000 f936 	bl	8013d40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	601a      	str	r2, [r3, #0]
 8013ada:	e002      	b.n	8013ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013ae2:	4a04      	ldr	r2, [pc, #16]	; (8013af4 <prvSampleTimeNow+0x3c>)
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3710      	adds	r7, #16
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	24001870 	.word	0x24001870

08013af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b086      	sub	sp, #24
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	607a      	str	r2, [r7, #4]
 8013b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013b06:	2300      	movs	r3, #0
 8013b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	68ba      	ldr	r2, [r7, #8]
 8013b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	68fa      	ldr	r2, [r7, #12]
 8013b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013b16:	68ba      	ldr	r2, [r7, #8]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d812      	bhi.n	8013b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b1e:	687a      	ldr	r2, [r7, #4]
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	1ad2      	subs	r2, r2, r3
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	699b      	ldr	r3, [r3, #24]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d302      	bcc.n	8013b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	617b      	str	r3, [r7, #20]
 8013b30:	e01b      	b.n	8013b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013b32:	4b10      	ldr	r3, [pc, #64]	; (8013b74 <prvInsertTimerInActiveList+0x7c>)
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	3304      	adds	r3, #4
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	4610      	mov	r0, r2
 8013b3e:	f7fe f838 	bl	8011bb2 <vListInsert>
 8013b42:	e012      	b.n	8013b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d206      	bcs.n	8013b5a <prvInsertTimerInActiveList+0x62>
 8013b4c:	68ba      	ldr	r2, [r7, #8]
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d302      	bcc.n	8013b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013b54:	2301      	movs	r3, #1
 8013b56:	617b      	str	r3, [r7, #20]
 8013b58:	e007      	b.n	8013b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b5a:	4b07      	ldr	r3, [pc, #28]	; (8013b78 <prvInsertTimerInActiveList+0x80>)
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	3304      	adds	r3, #4
 8013b62:	4619      	mov	r1, r3
 8013b64:	4610      	mov	r0, r2
 8013b66:	f7fe f824 	bl	8011bb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013b6a:	697b      	ldr	r3, [r7, #20]
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3718      	adds	r7, #24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	24001864 	.word	0x24001864
 8013b78:	24001860 	.word	0x24001860

08013b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08e      	sub	sp, #56	; 0x38
 8013b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b82:	e0ca      	b.n	8013d1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	da18      	bge.n	8013bbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013b8a:	1d3b      	adds	r3, r7, #4
 8013b8c:	3304      	adds	r3, #4
 8013b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d10a      	bne.n	8013bac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9a:	f383 8811 	msr	BASEPRI, r3
 8013b9e:	f3bf 8f6f 	isb	sy
 8013ba2:	f3bf 8f4f 	dsb	sy
 8013ba6:	61fb      	str	r3, [r7, #28]
}
 8013ba8:	bf00      	nop
 8013baa:	e7fe      	b.n	8013baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bb2:	6850      	ldr	r0, [r2, #4]
 8013bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bb6:	6892      	ldr	r2, [r2, #8]
 8013bb8:	4611      	mov	r1, r2
 8013bba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	f2c0 80aa 	blt.w	8013d18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bca:	695b      	ldr	r3, [r3, #20]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d004      	beq.n	8013bda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd2:	3304      	adds	r3, #4
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fe f825 	bl	8011c24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013bda:	463b      	mov	r3, r7
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7ff ff6b 	bl	8013ab8 <prvSampleTimeNow>
 8013be2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2b09      	cmp	r3, #9
 8013be8:	f200 8097 	bhi.w	8013d1a <prvProcessReceivedCommands+0x19e>
 8013bec:	a201      	add	r2, pc, #4	; (adr r2, 8013bf4 <prvProcessReceivedCommands+0x78>)
 8013bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bf2:	bf00      	nop
 8013bf4:	08013c1d 	.word	0x08013c1d
 8013bf8:	08013c1d 	.word	0x08013c1d
 8013bfc:	08013c1d 	.word	0x08013c1d
 8013c00:	08013c91 	.word	0x08013c91
 8013c04:	08013ca5 	.word	0x08013ca5
 8013c08:	08013cef 	.word	0x08013cef
 8013c0c:	08013c1d 	.word	0x08013c1d
 8013c10:	08013c1d 	.word	0x08013c1d
 8013c14:	08013c91 	.word	0x08013c91
 8013c18:	08013ca5 	.word	0x08013ca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c22:	f043 0301 	orr.w	r3, r3, #1
 8013c26:	b2da      	uxtb	r2, r3
 8013c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013c2e:	68ba      	ldr	r2, [r7, #8]
 8013c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c32:	699b      	ldr	r3, [r3, #24]
 8013c34:	18d1      	adds	r1, r2, r3
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c3c:	f7ff ff5c 	bl	8013af8 <prvInsertTimerInActiveList>
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d069      	beq.n	8013d1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	6a1b      	ldr	r3, [r3, #32]
 8013c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c54:	f003 0304 	and.w	r3, r3, #4
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d05e      	beq.n	8013d1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013c5c:	68ba      	ldr	r2, [r7, #8]
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	699b      	ldr	r3, [r3, #24]
 8013c62:	441a      	add	r2, r3
 8013c64:	2300      	movs	r3, #0
 8013c66:	9300      	str	r3, [sp, #0]
 8013c68:	2300      	movs	r3, #0
 8013c6a:	2100      	movs	r1, #0
 8013c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c6e:	f7ff fe05 	bl	801387c <xTimerGenericCommand>
 8013c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013c74:	6a3b      	ldr	r3, [r7, #32]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d14f      	bne.n	8013d1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c7e:	f383 8811 	msr	BASEPRI, r3
 8013c82:	f3bf 8f6f 	isb	sy
 8013c86:	f3bf 8f4f 	dsb	sy
 8013c8a:	61bb      	str	r3, [r7, #24]
}
 8013c8c:	bf00      	nop
 8013c8e:	e7fe      	b.n	8013c8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c96:	f023 0301 	bic.w	r3, r3, #1
 8013c9a:	b2da      	uxtb	r2, r3
 8013c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013ca2:	e03a      	b.n	8013d1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013caa:	f043 0301 	orr.w	r3, r3, #1
 8013cae:	b2da      	uxtb	r2, r3
 8013cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013cb6:	68ba      	ldr	r2, [r7, #8]
 8013cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbe:	699b      	ldr	r3, [r3, #24]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d10a      	bne.n	8013cda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc8:	f383 8811 	msr	BASEPRI, r3
 8013ccc:	f3bf 8f6f 	isb	sy
 8013cd0:	f3bf 8f4f 	dsb	sy
 8013cd4:	617b      	str	r3, [r7, #20]
}
 8013cd6:	bf00      	nop
 8013cd8:	e7fe      	b.n	8013cd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cdc:	699a      	ldr	r2, [r3, #24]
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	18d1      	adds	r1, r2, r3
 8013ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ce8:	f7ff ff06 	bl	8013af8 <prvInsertTimerInActiveList>
					break;
 8013cec:	e015      	b.n	8013d1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf4:	f003 0302 	and.w	r3, r3, #2
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d103      	bne.n	8013d04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cfe:	f000 fbff 	bl	8014500 <vPortFree>
 8013d02:	e00a      	b.n	8013d1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d0a:	f023 0301 	bic.w	r3, r3, #1
 8013d0e:	b2da      	uxtb	r2, r3
 8013d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013d16:	e000      	b.n	8013d1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013d1a:	4b08      	ldr	r3, [pc, #32]	; (8013d3c <prvProcessReceivedCommands+0x1c0>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	1d39      	adds	r1, r7, #4
 8013d20:	2200      	movs	r2, #0
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fe fa46 	bl	80121b4 <xQueueReceive>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	f47f af2a 	bne.w	8013b84 <prvProcessReceivedCommands+0x8>
	}
}
 8013d30:	bf00      	nop
 8013d32:	bf00      	nop
 8013d34:	3730      	adds	r7, #48	; 0x30
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	24001868 	.word	0x24001868

08013d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b088      	sub	sp, #32
 8013d44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d46:	e048      	b.n	8013dda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d48:	4b2d      	ldr	r3, [pc, #180]	; (8013e00 <prvSwitchTimerLists+0xc0>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d52:	4b2b      	ldr	r3, [pc, #172]	; (8013e00 <prvSwitchTimerLists+0xc0>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	68db      	ldr	r3, [r3, #12]
 8013d58:	68db      	ldr	r3, [r3, #12]
 8013d5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	3304      	adds	r3, #4
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fd ff5f 	bl	8011c24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	6a1b      	ldr	r3, [r3, #32]
 8013d6a:	68f8      	ldr	r0, [r7, #12]
 8013d6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d74:	f003 0304 	and.w	r3, r3, #4
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d02e      	beq.n	8013dda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	699b      	ldr	r3, [r3, #24]
 8013d80:	693a      	ldr	r2, [r7, #16]
 8013d82:	4413      	add	r3, r2
 8013d84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013d86:	68ba      	ldr	r2, [r7, #8]
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d90e      	bls.n	8013dac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	68fa      	ldr	r2, [r7, #12]
 8013d98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d9a:	4b19      	ldr	r3, [pc, #100]	; (8013e00 <prvSwitchTimerLists+0xc0>)
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	3304      	adds	r3, #4
 8013da2:	4619      	mov	r1, r3
 8013da4:	4610      	mov	r0, r2
 8013da6:	f7fd ff04 	bl	8011bb2 <vListInsert>
 8013daa:	e016      	b.n	8013dda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013dac:	2300      	movs	r3, #0
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	2300      	movs	r3, #0
 8013db2:	693a      	ldr	r2, [r7, #16]
 8013db4:	2100      	movs	r1, #0
 8013db6:	68f8      	ldr	r0, [r7, #12]
 8013db8:	f7ff fd60 	bl	801387c <xTimerGenericCommand>
 8013dbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d10a      	bne.n	8013dda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc8:	f383 8811 	msr	BASEPRI, r3
 8013dcc:	f3bf 8f6f 	isb	sy
 8013dd0:	f3bf 8f4f 	dsb	sy
 8013dd4:	603b      	str	r3, [r7, #0]
}
 8013dd6:	bf00      	nop
 8013dd8:	e7fe      	b.n	8013dd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013dda:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <prvSwitchTimerLists+0xc0>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d1b1      	bne.n	8013d48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013de4:	4b06      	ldr	r3, [pc, #24]	; (8013e00 <prvSwitchTimerLists+0xc0>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013dea:	4b06      	ldr	r3, [pc, #24]	; (8013e04 <prvSwitchTimerLists+0xc4>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	4a04      	ldr	r2, [pc, #16]	; (8013e00 <prvSwitchTimerLists+0xc0>)
 8013df0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013df2:	4a04      	ldr	r2, [pc, #16]	; (8013e04 <prvSwitchTimerLists+0xc4>)
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	6013      	str	r3, [r2, #0]
}
 8013df8:	bf00      	nop
 8013dfa:	3718      	adds	r7, #24
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	24001860 	.word	0x24001860
 8013e04:	24001864 	.word	0x24001864

08013e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013e0e:	f000 f989 	bl	8014124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013e12:	4b15      	ldr	r3, [pc, #84]	; (8013e68 <prvCheckForValidListAndQueue+0x60>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d120      	bne.n	8013e5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013e1a:	4814      	ldr	r0, [pc, #80]	; (8013e6c <prvCheckForValidListAndQueue+0x64>)
 8013e1c:	f7fd fe78 	bl	8011b10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013e20:	4813      	ldr	r0, [pc, #76]	; (8013e70 <prvCheckForValidListAndQueue+0x68>)
 8013e22:	f7fd fe75 	bl	8011b10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013e26:	4b13      	ldr	r3, [pc, #76]	; (8013e74 <prvCheckForValidListAndQueue+0x6c>)
 8013e28:	4a10      	ldr	r2, [pc, #64]	; (8013e6c <prvCheckForValidListAndQueue+0x64>)
 8013e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013e2c:	4b12      	ldr	r3, [pc, #72]	; (8013e78 <prvCheckForValidListAndQueue+0x70>)
 8013e2e:	4a10      	ldr	r2, [pc, #64]	; (8013e70 <prvCheckForValidListAndQueue+0x68>)
 8013e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013e32:	2300      	movs	r3, #0
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	4b11      	ldr	r3, [pc, #68]	; (8013e7c <prvCheckForValidListAndQueue+0x74>)
 8013e38:	4a11      	ldr	r2, [pc, #68]	; (8013e80 <prvCheckForValidListAndQueue+0x78>)
 8013e3a:	2110      	movs	r1, #16
 8013e3c:	200a      	movs	r0, #10
 8013e3e:	f7fd ff83 	bl	8011d48 <xQueueGenericCreateStatic>
 8013e42:	4603      	mov	r3, r0
 8013e44:	4a08      	ldr	r2, [pc, #32]	; (8013e68 <prvCheckForValidListAndQueue+0x60>)
 8013e46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013e48:	4b07      	ldr	r3, [pc, #28]	; (8013e68 <prvCheckForValidListAndQueue+0x60>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d005      	beq.n	8013e5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013e50:	4b05      	ldr	r3, [pc, #20]	; (8013e68 <prvCheckForValidListAndQueue+0x60>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	490b      	ldr	r1, [pc, #44]	; (8013e84 <prvCheckForValidListAndQueue+0x7c>)
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fe fb9c 	bl	8012594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e5c:	f000 f992 	bl	8014184 <vPortExitCritical>
}
 8013e60:	bf00      	nop
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	24001868 	.word	0x24001868
 8013e6c:	24001838 	.word	0x24001838
 8013e70:	2400184c 	.word	0x2400184c
 8013e74:	24001860 	.word	0x24001860
 8013e78:	24001864 	.word	0x24001864
 8013e7c:	24001914 	.word	0x24001914
 8013e80:	24001874 	.word	0x24001874
 8013e84:	0801544c 	.word	0x0801544c

08013e88 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b08a      	sub	sp, #40	; 0x28
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	60b9      	str	r1, [r7, #8]
 8013e92:	607a      	str	r2, [r7, #4]
 8013e94:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8013e96:	f06f 0301 	mvn.w	r3, #1
 8013e9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013ea8:	4b06      	ldr	r3, [pc, #24]	; (8013ec4 <xTimerPendFunctionCallFromISR+0x3c>)
 8013eaa:	6818      	ldr	r0, [r3, #0]
 8013eac:	f107 0114 	add.w	r1, r7, #20
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	683a      	ldr	r2, [r7, #0]
 8013eb4:	f7fe f8e2 	bl	801207c <xQueueGenericSendFromISR>
 8013eb8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8013eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3728      	adds	r7, #40	; 0x28
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	24001868 	.word	0x24001868

08013ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b085      	sub	sp, #20
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	60b9      	str	r1, [r7, #8]
 8013ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	3b04      	subs	r3, #4
 8013ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	3b04      	subs	r3, #4
 8013ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	f023 0201 	bic.w	r2, r3, #1
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	3b04      	subs	r3, #4
 8013ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013ef8:	4a0c      	ldr	r2, [pc, #48]	; (8013f2c <pxPortInitialiseStack+0x64>)
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	3b14      	subs	r3, #20
 8013f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	3b04      	subs	r3, #4
 8013f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f06f 0202 	mvn.w	r2, #2
 8013f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	3b20      	subs	r3, #32
 8013f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3714      	adds	r7, #20
 8013f24:	46bd      	mov	sp, r7
 8013f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2a:	4770      	bx	lr
 8013f2c:	08013f31 	.word	0x08013f31

08013f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013f30:	b480      	push	{r7}
 8013f32:	b085      	sub	sp, #20
 8013f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013f36:	2300      	movs	r3, #0
 8013f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013f3a:	4b12      	ldr	r3, [pc, #72]	; (8013f84 <prvTaskExitError+0x54>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f42:	d00a      	beq.n	8013f5a <prvTaskExitError+0x2a>
	__asm volatile
 8013f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f48:	f383 8811 	msr	BASEPRI, r3
 8013f4c:	f3bf 8f6f 	isb	sy
 8013f50:	f3bf 8f4f 	dsb	sy
 8013f54:	60fb      	str	r3, [r7, #12]
}
 8013f56:	bf00      	nop
 8013f58:	e7fe      	b.n	8013f58 <prvTaskExitError+0x28>
	__asm volatile
 8013f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5e:	f383 8811 	msr	BASEPRI, r3
 8013f62:	f3bf 8f6f 	isb	sy
 8013f66:	f3bf 8f4f 	dsb	sy
 8013f6a:	60bb      	str	r3, [r7, #8]
}
 8013f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013f6e:	bf00      	nop
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d0fc      	beq.n	8013f70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013f76:	bf00      	nop
 8013f78:	bf00      	nop
 8013f7a:	3714      	adds	r7, #20
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr
 8013f84:	24000098 	.word	0x24000098
	...

08013f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013f90:	4b07      	ldr	r3, [pc, #28]	; (8013fb0 <pxCurrentTCBConst2>)
 8013f92:	6819      	ldr	r1, [r3, #0]
 8013f94:	6808      	ldr	r0, [r1, #0]
 8013f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9a:	f380 8809 	msr	PSP, r0
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f04f 0000 	mov.w	r0, #0
 8013fa6:	f380 8811 	msr	BASEPRI, r0
 8013faa:	4770      	bx	lr
 8013fac:	f3af 8000 	nop.w

08013fb0 <pxCurrentTCBConst2>:
 8013fb0:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013fb4:	bf00      	nop
 8013fb6:	bf00      	nop

08013fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013fb8:	4808      	ldr	r0, [pc, #32]	; (8013fdc <prvPortStartFirstTask+0x24>)
 8013fba:	6800      	ldr	r0, [r0, #0]
 8013fbc:	6800      	ldr	r0, [r0, #0]
 8013fbe:	f380 8808 	msr	MSP, r0
 8013fc2:	f04f 0000 	mov.w	r0, #0
 8013fc6:	f380 8814 	msr	CONTROL, r0
 8013fca:	b662      	cpsie	i
 8013fcc:	b661      	cpsie	f
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	f3bf 8f6f 	isb	sy
 8013fd6:	df00      	svc	0
 8013fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013fda:	bf00      	nop
 8013fdc:	e000ed08 	.word	0xe000ed08

08013fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013fe6:	4b46      	ldr	r3, [pc, #280]	; (8014100 <xPortStartScheduler+0x120>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	4a46      	ldr	r2, [pc, #280]	; (8014104 <xPortStartScheduler+0x124>)
 8013fec:	4293      	cmp	r3, r2
 8013fee:	d10a      	bne.n	8014006 <xPortStartScheduler+0x26>
	__asm volatile
 8013ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff4:	f383 8811 	msr	BASEPRI, r3
 8013ff8:	f3bf 8f6f 	isb	sy
 8013ffc:	f3bf 8f4f 	dsb	sy
 8014000:	613b      	str	r3, [r7, #16]
}
 8014002:	bf00      	nop
 8014004:	e7fe      	b.n	8014004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014006:	4b3e      	ldr	r3, [pc, #248]	; (8014100 <xPortStartScheduler+0x120>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4a3f      	ldr	r2, [pc, #252]	; (8014108 <xPortStartScheduler+0x128>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d10a      	bne.n	8014026 <xPortStartScheduler+0x46>
	__asm volatile
 8014010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014014:	f383 8811 	msr	BASEPRI, r3
 8014018:	f3bf 8f6f 	isb	sy
 801401c:	f3bf 8f4f 	dsb	sy
 8014020:	60fb      	str	r3, [r7, #12]
}
 8014022:	bf00      	nop
 8014024:	e7fe      	b.n	8014024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014026:	4b39      	ldr	r3, [pc, #228]	; (801410c <xPortStartScheduler+0x12c>)
 8014028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	b2db      	uxtb	r3, r3
 8014030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	22ff      	movs	r2, #255	; 0xff
 8014036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	b2db      	uxtb	r3, r3
 801403e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014040:	78fb      	ldrb	r3, [r7, #3]
 8014042:	b2db      	uxtb	r3, r3
 8014044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014048:	b2da      	uxtb	r2, r3
 801404a:	4b31      	ldr	r3, [pc, #196]	; (8014110 <xPortStartScheduler+0x130>)
 801404c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801404e:	4b31      	ldr	r3, [pc, #196]	; (8014114 <xPortStartScheduler+0x134>)
 8014050:	2207      	movs	r2, #7
 8014052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014054:	e009      	b.n	801406a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014056:	4b2f      	ldr	r3, [pc, #188]	; (8014114 <xPortStartScheduler+0x134>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	3b01      	subs	r3, #1
 801405c:	4a2d      	ldr	r2, [pc, #180]	; (8014114 <xPortStartScheduler+0x134>)
 801405e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014060:	78fb      	ldrb	r3, [r7, #3]
 8014062:	b2db      	uxtb	r3, r3
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	b2db      	uxtb	r3, r3
 8014068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801406a:	78fb      	ldrb	r3, [r7, #3]
 801406c:	b2db      	uxtb	r3, r3
 801406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014072:	2b80      	cmp	r3, #128	; 0x80
 8014074:	d0ef      	beq.n	8014056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014076:	4b27      	ldr	r3, [pc, #156]	; (8014114 <xPortStartScheduler+0x134>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f1c3 0307 	rsb	r3, r3, #7
 801407e:	2b04      	cmp	r3, #4
 8014080:	d00a      	beq.n	8014098 <xPortStartScheduler+0xb8>
	__asm volatile
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	60bb      	str	r3, [r7, #8]
}
 8014094:	bf00      	nop
 8014096:	e7fe      	b.n	8014096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014098:	4b1e      	ldr	r3, [pc, #120]	; (8014114 <xPortStartScheduler+0x134>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	021b      	lsls	r3, r3, #8
 801409e:	4a1d      	ldr	r2, [pc, #116]	; (8014114 <xPortStartScheduler+0x134>)
 80140a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80140a2:	4b1c      	ldr	r3, [pc, #112]	; (8014114 <xPortStartScheduler+0x134>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80140aa:	4a1a      	ldr	r2, [pc, #104]	; (8014114 <xPortStartScheduler+0x134>)
 80140ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	b2da      	uxtb	r2, r3
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80140b6:	4b18      	ldr	r3, [pc, #96]	; (8014118 <xPortStartScheduler+0x138>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	4a17      	ldr	r2, [pc, #92]	; (8014118 <xPortStartScheduler+0x138>)
 80140bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80140c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80140c2:	4b15      	ldr	r3, [pc, #84]	; (8014118 <xPortStartScheduler+0x138>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a14      	ldr	r2, [pc, #80]	; (8014118 <xPortStartScheduler+0x138>)
 80140c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80140cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80140ce:	f000 f8dd 	bl	801428c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80140d2:	4b12      	ldr	r3, [pc, #72]	; (801411c <xPortStartScheduler+0x13c>)
 80140d4:	2200      	movs	r2, #0
 80140d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80140d8:	f000 f8fc 	bl	80142d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80140dc:	4b10      	ldr	r3, [pc, #64]	; (8014120 <xPortStartScheduler+0x140>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	4a0f      	ldr	r2, [pc, #60]	; (8014120 <xPortStartScheduler+0x140>)
 80140e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80140e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80140e8:	f7ff ff66 	bl	8013fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80140ec:	f7fe ff7c 	bl	8012fe8 <vTaskSwitchContext>
	prvTaskExitError();
 80140f0:	f7ff ff1e 	bl	8013f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80140f4:	2300      	movs	r3, #0
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	e000ed00 	.word	0xe000ed00
 8014104:	410fc271 	.word	0x410fc271
 8014108:	410fc270 	.word	0x410fc270
 801410c:	e000e400 	.word	0xe000e400
 8014110:	24001964 	.word	0x24001964
 8014114:	24001968 	.word	0x24001968
 8014118:	e000ed20 	.word	0xe000ed20
 801411c:	24000098 	.word	0x24000098
 8014120:	e000ef34 	.word	0xe000ef34

08014124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
	__asm volatile
 801412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412e:	f383 8811 	msr	BASEPRI, r3
 8014132:	f3bf 8f6f 	isb	sy
 8014136:	f3bf 8f4f 	dsb	sy
 801413a:	607b      	str	r3, [r7, #4]
}
 801413c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801413e:	4b0f      	ldr	r3, [pc, #60]	; (801417c <vPortEnterCritical+0x58>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	4a0d      	ldr	r2, [pc, #52]	; (801417c <vPortEnterCritical+0x58>)
 8014146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014148:	4b0c      	ldr	r3, [pc, #48]	; (801417c <vPortEnterCritical+0x58>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d10f      	bne.n	8014170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014150:	4b0b      	ldr	r3, [pc, #44]	; (8014180 <vPortEnterCritical+0x5c>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	b2db      	uxtb	r3, r3
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00a      	beq.n	8014170 <vPortEnterCritical+0x4c>
	__asm volatile
 801415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801415e:	f383 8811 	msr	BASEPRI, r3
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	f3bf 8f4f 	dsb	sy
 801416a:	603b      	str	r3, [r7, #0]
}
 801416c:	bf00      	nop
 801416e:	e7fe      	b.n	801416e <vPortEnterCritical+0x4a>
	}
}
 8014170:	bf00      	nop
 8014172:	370c      	adds	r7, #12
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr
 801417c:	24000098 	.word	0x24000098
 8014180:	e000ed04 	.word	0xe000ed04

08014184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801418a:	4b12      	ldr	r3, [pc, #72]	; (80141d4 <vPortExitCritical+0x50>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d10a      	bne.n	80141a8 <vPortExitCritical+0x24>
	__asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014196:	f383 8811 	msr	BASEPRI, r3
 801419a:	f3bf 8f6f 	isb	sy
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	607b      	str	r3, [r7, #4]
}
 80141a4:	bf00      	nop
 80141a6:	e7fe      	b.n	80141a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80141a8:	4b0a      	ldr	r3, [pc, #40]	; (80141d4 <vPortExitCritical+0x50>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	3b01      	subs	r3, #1
 80141ae:	4a09      	ldr	r2, [pc, #36]	; (80141d4 <vPortExitCritical+0x50>)
 80141b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80141b2:	4b08      	ldr	r3, [pc, #32]	; (80141d4 <vPortExitCritical+0x50>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d105      	bne.n	80141c6 <vPortExitCritical+0x42>
 80141ba:	2300      	movs	r3, #0
 80141bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	f383 8811 	msr	BASEPRI, r3
}
 80141c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80141c6:	bf00      	nop
 80141c8:	370c      	adds	r7, #12
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	24000098 	.word	0x24000098
	...

080141e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80141e0:	f3ef 8009 	mrs	r0, PSP
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	4b15      	ldr	r3, [pc, #84]	; (8014240 <pxCurrentTCBConst>)
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	f01e 0f10 	tst.w	lr, #16
 80141f0:	bf08      	it	eq
 80141f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80141f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141fa:	6010      	str	r0, [r2, #0]
 80141fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014204:	f380 8811 	msr	BASEPRI, r0
 8014208:	f3bf 8f4f 	dsb	sy
 801420c:	f3bf 8f6f 	isb	sy
 8014210:	f7fe feea 	bl	8012fe8 <vTaskSwitchContext>
 8014214:	f04f 0000 	mov.w	r0, #0
 8014218:	f380 8811 	msr	BASEPRI, r0
 801421c:	bc09      	pop	{r0, r3}
 801421e:	6819      	ldr	r1, [r3, #0]
 8014220:	6808      	ldr	r0, [r1, #0]
 8014222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014226:	f01e 0f10 	tst.w	lr, #16
 801422a:	bf08      	it	eq
 801422c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014230:	f380 8809 	msr	PSP, r0
 8014234:	f3bf 8f6f 	isb	sy
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	f3af 8000 	nop.w

08014240 <pxCurrentTCBConst>:
 8014240:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014244:	bf00      	nop
 8014246:	bf00      	nop

08014248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
	__asm volatile
 801424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014252:	f383 8811 	msr	BASEPRI, r3
 8014256:	f3bf 8f6f 	isb	sy
 801425a:	f3bf 8f4f 	dsb	sy
 801425e:	607b      	str	r3, [r7, #4]
}
 8014260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014262:	f7fe fe07 	bl	8012e74 <xTaskIncrementTick>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d003      	beq.n	8014274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801426c:	4b06      	ldr	r3, [pc, #24]	; (8014288 <xPortSysTickHandler+0x40>)
 801426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014272:	601a      	str	r2, [r3, #0]
 8014274:	2300      	movs	r3, #0
 8014276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	f383 8811 	msr	BASEPRI, r3
}
 801427e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014280:	bf00      	nop
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	e000ed04 	.word	0xe000ed04

0801428c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801428c:	b480      	push	{r7}
 801428e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014290:	4b0b      	ldr	r3, [pc, #44]	; (80142c0 <vPortSetupTimerInterrupt+0x34>)
 8014292:	2200      	movs	r2, #0
 8014294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014296:	4b0b      	ldr	r3, [pc, #44]	; (80142c4 <vPortSetupTimerInterrupt+0x38>)
 8014298:	2200      	movs	r2, #0
 801429a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801429c:	4b0a      	ldr	r3, [pc, #40]	; (80142c8 <vPortSetupTimerInterrupt+0x3c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4a0a      	ldr	r2, [pc, #40]	; (80142cc <vPortSetupTimerInterrupt+0x40>)
 80142a2:	fba2 2303 	umull	r2, r3, r2, r3
 80142a6:	099b      	lsrs	r3, r3, #6
 80142a8:	4a09      	ldr	r2, [pc, #36]	; (80142d0 <vPortSetupTimerInterrupt+0x44>)
 80142aa:	3b01      	subs	r3, #1
 80142ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80142ae:	4b04      	ldr	r3, [pc, #16]	; (80142c0 <vPortSetupTimerInterrupt+0x34>)
 80142b0:	2207      	movs	r2, #7
 80142b2:	601a      	str	r2, [r3, #0]
}
 80142b4:	bf00      	nop
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr
 80142be:	bf00      	nop
 80142c0:	e000e010 	.word	0xe000e010
 80142c4:	e000e018 	.word	0xe000e018
 80142c8:	24000088 	.word	0x24000088
 80142cc:	10624dd3 	.word	0x10624dd3
 80142d0:	e000e014 	.word	0xe000e014

080142d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80142d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80142e4 <vPortEnableVFP+0x10>
 80142d8:	6801      	ldr	r1, [r0, #0]
 80142da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80142de:	6001      	str	r1, [r0, #0]
 80142e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80142e2:	bf00      	nop
 80142e4:	e000ed88 	.word	0xe000ed88

080142e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80142e8:	b480      	push	{r7}
 80142ea:	b085      	sub	sp, #20
 80142ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80142ee:	f3ef 8305 	mrs	r3, IPSR
 80142f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2b0f      	cmp	r3, #15
 80142f8:	d914      	bls.n	8014324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80142fa:	4a17      	ldr	r2, [pc, #92]	; (8014358 <vPortValidateInterruptPriority+0x70>)
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	4413      	add	r3, r2
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014304:	4b15      	ldr	r3, [pc, #84]	; (801435c <vPortValidateInterruptPriority+0x74>)
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	7afa      	ldrb	r2, [r7, #11]
 801430a:	429a      	cmp	r2, r3
 801430c:	d20a      	bcs.n	8014324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	607b      	str	r3, [r7, #4]
}
 8014320:	bf00      	nop
 8014322:	e7fe      	b.n	8014322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014324:	4b0e      	ldr	r3, [pc, #56]	; (8014360 <vPortValidateInterruptPriority+0x78>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801432c:	4b0d      	ldr	r3, [pc, #52]	; (8014364 <vPortValidateInterruptPriority+0x7c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	429a      	cmp	r2, r3
 8014332:	d90a      	bls.n	801434a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	f383 8811 	msr	BASEPRI, r3
 801433c:	f3bf 8f6f 	isb	sy
 8014340:	f3bf 8f4f 	dsb	sy
 8014344:	603b      	str	r3, [r7, #0]
}
 8014346:	bf00      	nop
 8014348:	e7fe      	b.n	8014348 <vPortValidateInterruptPriority+0x60>
	}
 801434a:	bf00      	nop
 801434c:	3714      	adds	r7, #20
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	e000e3f0 	.word	0xe000e3f0
 801435c:	24001964 	.word	0x24001964
 8014360:	e000ed0c 	.word	0xe000ed0c
 8014364:	24001968 	.word	0x24001968

08014368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b08a      	sub	sp, #40	; 0x28
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014370:	2300      	movs	r3, #0
 8014372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014374:	f7fe fcc2 	bl	8012cfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014378:	4b5b      	ldr	r3, [pc, #364]	; (80144e8 <pvPortMalloc+0x180>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d101      	bne.n	8014384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014380:	f000 f920 	bl	80145c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014384:	4b59      	ldr	r3, [pc, #356]	; (80144ec <pvPortMalloc+0x184>)
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	4013      	ands	r3, r2
 801438c:	2b00      	cmp	r3, #0
 801438e:	f040 8093 	bne.w	80144b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d01d      	beq.n	80143d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014398:	2208      	movs	r2, #8
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	4413      	add	r3, r2
 801439e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f003 0307 	and.w	r3, r3, #7
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d014      	beq.n	80143d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f023 0307 	bic.w	r3, r3, #7
 80143b0:	3308      	adds	r3, #8
 80143b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f003 0307 	and.w	r3, r3, #7
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00a      	beq.n	80143d4 <pvPortMalloc+0x6c>
	__asm volatile
 80143be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	617b      	str	r3, [r7, #20]
}
 80143d0:	bf00      	nop
 80143d2:	e7fe      	b.n	80143d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d06e      	beq.n	80144b8 <pvPortMalloc+0x150>
 80143da:	4b45      	ldr	r3, [pc, #276]	; (80144f0 <pvPortMalloc+0x188>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d869      	bhi.n	80144b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80143e4:	4b43      	ldr	r3, [pc, #268]	; (80144f4 <pvPortMalloc+0x18c>)
 80143e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80143e8:	4b42      	ldr	r3, [pc, #264]	; (80144f4 <pvPortMalloc+0x18c>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143ee:	e004      	b.n	80143fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80143f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80143f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	429a      	cmp	r2, r3
 8014402:	d903      	bls.n	801440c <pvPortMalloc+0xa4>
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d1f1      	bne.n	80143f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801440c:	4b36      	ldr	r3, [pc, #216]	; (80144e8 <pvPortMalloc+0x180>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014412:	429a      	cmp	r2, r3
 8014414:	d050      	beq.n	80144b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014416:	6a3b      	ldr	r3, [r7, #32]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2208      	movs	r2, #8
 801441c:	4413      	add	r3, r2
 801441e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	6a3b      	ldr	r3, [r7, #32]
 8014426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442a:	685a      	ldr	r2, [r3, #4]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	1ad2      	subs	r2, r2, r3
 8014430:	2308      	movs	r3, #8
 8014432:	005b      	lsls	r3, r3, #1
 8014434:	429a      	cmp	r2, r3
 8014436:	d91f      	bls.n	8014478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4413      	add	r3, r2
 801443e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	f003 0307 	and.w	r3, r3, #7
 8014446:	2b00      	cmp	r3, #0
 8014448:	d00a      	beq.n	8014460 <pvPortMalloc+0xf8>
	__asm volatile
 801444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444e:	f383 8811 	msr	BASEPRI, r3
 8014452:	f3bf 8f6f 	isb	sy
 8014456:	f3bf 8f4f 	dsb	sy
 801445a:	613b      	str	r3, [r7, #16]
}
 801445c:	bf00      	nop
 801445e:	e7fe      	b.n	801445e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014462:	685a      	ldr	r2, [r3, #4]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	1ad2      	subs	r2, r2, r3
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014472:	69b8      	ldr	r0, [r7, #24]
 8014474:	f000 f908 	bl	8014688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014478:	4b1d      	ldr	r3, [pc, #116]	; (80144f0 <pvPortMalloc+0x188>)
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	4a1b      	ldr	r2, [pc, #108]	; (80144f0 <pvPortMalloc+0x188>)
 8014484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014486:	4b1a      	ldr	r3, [pc, #104]	; (80144f0 <pvPortMalloc+0x188>)
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	4b1b      	ldr	r3, [pc, #108]	; (80144f8 <pvPortMalloc+0x190>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	429a      	cmp	r2, r3
 8014490:	d203      	bcs.n	801449a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014492:	4b17      	ldr	r3, [pc, #92]	; (80144f0 <pvPortMalloc+0x188>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4a18      	ldr	r2, [pc, #96]	; (80144f8 <pvPortMalloc+0x190>)
 8014498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449c:	685a      	ldr	r2, [r3, #4]
 801449e:	4b13      	ldr	r3, [pc, #76]	; (80144ec <pvPortMalloc+0x184>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	431a      	orrs	r2, r3
 80144a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80144a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144aa:	2200      	movs	r2, #0
 80144ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80144ae:	4b13      	ldr	r3, [pc, #76]	; (80144fc <pvPortMalloc+0x194>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	3301      	adds	r3, #1
 80144b4:	4a11      	ldr	r2, [pc, #68]	; (80144fc <pvPortMalloc+0x194>)
 80144b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80144b8:	f7fe fc2e 	bl	8012d18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	f003 0307 	and.w	r3, r3, #7
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00a      	beq.n	80144dc <pvPortMalloc+0x174>
	__asm volatile
 80144c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ca:	f383 8811 	msr	BASEPRI, r3
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	f3bf 8f4f 	dsb	sy
 80144d6:	60fb      	str	r3, [r7, #12]
}
 80144d8:	bf00      	nop
 80144da:	e7fe      	b.n	80144da <pvPortMalloc+0x172>
	return pvReturn;
 80144dc:	69fb      	ldr	r3, [r7, #28]
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3728      	adds	r7, #40	; 0x28
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	24005574 	.word	0x24005574
 80144ec:	24005588 	.word	0x24005588
 80144f0:	24005578 	.word	0x24005578
 80144f4:	2400556c 	.word	0x2400556c
 80144f8:	2400557c 	.word	0x2400557c
 80144fc:	24005580 	.word	0x24005580

08014500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d04d      	beq.n	80145ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014512:	2308      	movs	r3, #8
 8014514:	425b      	negs	r3, r3
 8014516:	697a      	ldr	r2, [r7, #20]
 8014518:	4413      	add	r3, r2
 801451a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801451c:	697b      	ldr	r3, [r7, #20]
 801451e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	685a      	ldr	r2, [r3, #4]
 8014524:	4b24      	ldr	r3, [pc, #144]	; (80145b8 <vPortFree+0xb8>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4013      	ands	r3, r2
 801452a:	2b00      	cmp	r3, #0
 801452c:	d10a      	bne.n	8014544 <vPortFree+0x44>
	__asm volatile
 801452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	60fb      	str	r3, [r7, #12]
}
 8014540:	bf00      	nop
 8014542:	e7fe      	b.n	8014542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00a      	beq.n	8014562 <vPortFree+0x62>
	__asm volatile
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	f383 8811 	msr	BASEPRI, r3
 8014554:	f3bf 8f6f 	isb	sy
 8014558:	f3bf 8f4f 	dsb	sy
 801455c:	60bb      	str	r3, [r7, #8]
}
 801455e:	bf00      	nop
 8014560:	e7fe      	b.n	8014560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	685a      	ldr	r2, [r3, #4]
 8014566:	4b14      	ldr	r3, [pc, #80]	; (80145b8 <vPortFree+0xb8>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4013      	ands	r3, r2
 801456c:	2b00      	cmp	r3, #0
 801456e:	d01e      	beq.n	80145ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d11a      	bne.n	80145ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	685a      	ldr	r2, [r3, #4]
 801457c:	4b0e      	ldr	r3, [pc, #56]	; (80145b8 <vPortFree+0xb8>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	43db      	mvns	r3, r3
 8014582:	401a      	ands	r2, r3
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014588:	f7fe fbb8 	bl	8012cfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	685a      	ldr	r2, [r3, #4]
 8014590:	4b0a      	ldr	r3, [pc, #40]	; (80145bc <vPortFree+0xbc>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	4413      	add	r3, r2
 8014596:	4a09      	ldr	r2, [pc, #36]	; (80145bc <vPortFree+0xbc>)
 8014598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801459a:	6938      	ldr	r0, [r7, #16]
 801459c:	f000 f874 	bl	8014688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80145a0:	4b07      	ldr	r3, [pc, #28]	; (80145c0 <vPortFree+0xc0>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	3301      	adds	r3, #1
 80145a6:	4a06      	ldr	r2, [pc, #24]	; (80145c0 <vPortFree+0xc0>)
 80145a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80145aa:	f7fe fbb5 	bl	8012d18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80145ae:	bf00      	nop
 80145b0:	3718      	adds	r7, #24
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	24005588 	.word	0x24005588
 80145bc:	24005578 	.word	0x24005578
 80145c0:	24005584 	.word	0x24005584

080145c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80145c4:	b480      	push	{r7}
 80145c6:	b085      	sub	sp, #20
 80145c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80145ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80145ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80145d0:	4b27      	ldr	r3, [pc, #156]	; (8014670 <prvHeapInit+0xac>)
 80145d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f003 0307 	and.w	r3, r3, #7
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d00c      	beq.n	80145f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	3307      	adds	r3, #7
 80145e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f023 0307 	bic.w	r3, r3, #7
 80145ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	1ad3      	subs	r3, r2, r3
 80145f2:	4a1f      	ldr	r2, [pc, #124]	; (8014670 <prvHeapInit+0xac>)
 80145f4:	4413      	add	r3, r2
 80145f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80145fc:	4a1d      	ldr	r2, [pc, #116]	; (8014674 <prvHeapInit+0xb0>)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014602:	4b1c      	ldr	r3, [pc, #112]	; (8014674 <prvHeapInit+0xb0>)
 8014604:	2200      	movs	r2, #0
 8014606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68ba      	ldr	r2, [r7, #8]
 801460c:	4413      	add	r3, r2
 801460e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014610:	2208      	movs	r2, #8
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	1a9b      	subs	r3, r3, r2
 8014616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f023 0307 	bic.w	r3, r3, #7
 801461e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	4a15      	ldr	r2, [pc, #84]	; (8014678 <prvHeapInit+0xb4>)
 8014624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014626:	4b14      	ldr	r3, [pc, #80]	; (8014678 <prvHeapInit+0xb4>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2200      	movs	r2, #0
 801462c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801462e:	4b12      	ldr	r3, [pc, #72]	; (8014678 <prvHeapInit+0xb4>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	2200      	movs	r2, #0
 8014634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	68fa      	ldr	r2, [r7, #12]
 801463e:	1ad2      	subs	r2, r2, r3
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014644:	4b0c      	ldr	r3, [pc, #48]	; (8014678 <prvHeapInit+0xb4>)
 8014646:	681a      	ldr	r2, [r3, #0]
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	4a0a      	ldr	r2, [pc, #40]	; (801467c <prvHeapInit+0xb8>)
 8014652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4a09      	ldr	r2, [pc, #36]	; (8014680 <prvHeapInit+0xbc>)
 801465a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801465c:	4b09      	ldr	r3, [pc, #36]	; (8014684 <prvHeapInit+0xc0>)
 801465e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014662:	601a      	str	r2, [r3, #0]
}
 8014664:	bf00      	nop
 8014666:	3714      	adds	r7, #20
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr
 8014670:	2400196c 	.word	0x2400196c
 8014674:	2400556c 	.word	0x2400556c
 8014678:	24005574 	.word	0x24005574
 801467c:	2400557c 	.word	0x2400557c
 8014680:	24005578 	.word	0x24005578
 8014684:	24005588 	.word	0x24005588

08014688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014688:	b480      	push	{r7}
 801468a:	b085      	sub	sp, #20
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014690:	4b28      	ldr	r3, [pc, #160]	; (8014734 <prvInsertBlockIntoFreeList+0xac>)
 8014692:	60fb      	str	r3, [r7, #12]
 8014694:	e002      	b.n	801469c <prvInsertBlockIntoFreeList+0x14>
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	60fb      	str	r3, [r7, #12]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d8f7      	bhi.n	8014696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	68ba      	ldr	r2, [r7, #8]
 80146b0:	4413      	add	r3, r2
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d108      	bne.n	80146ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	685a      	ldr	r2, [r3, #4]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	441a      	add	r2, r3
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	68ba      	ldr	r2, [r7, #8]
 80146d4:	441a      	add	r2, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d118      	bne.n	8014710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	4b15      	ldr	r3, [pc, #84]	; (8014738 <prvInsertBlockIntoFreeList+0xb0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d00d      	beq.n	8014706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	685a      	ldr	r2, [r3, #4]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	441a      	add	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	e008      	b.n	8014718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014706:	4b0c      	ldr	r3, [pc, #48]	; (8014738 <prvInsertBlockIntoFreeList+0xb0>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	e003      	b.n	8014718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681a      	ldr	r2, [r3, #0]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	429a      	cmp	r2, r3
 801471e:	d002      	beq.n	8014726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014726:	bf00      	nop
 8014728:	3714      	adds	r7, #20
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	2400556c 	.word	0x2400556c
 8014738:	24005574 	.word	0x24005574

0801473c <__errno>:
 801473c:	4b01      	ldr	r3, [pc, #4]	; (8014744 <__errno+0x8>)
 801473e:	6818      	ldr	r0, [r3, #0]
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	2400009c 	.word	0x2400009c

08014748 <__libc_init_array>:
 8014748:	b570      	push	{r4, r5, r6, lr}
 801474a:	4d0d      	ldr	r5, [pc, #52]	; (8014780 <__libc_init_array+0x38>)
 801474c:	4c0d      	ldr	r4, [pc, #52]	; (8014784 <__libc_init_array+0x3c>)
 801474e:	1b64      	subs	r4, r4, r5
 8014750:	10a4      	asrs	r4, r4, #2
 8014752:	2600      	movs	r6, #0
 8014754:	42a6      	cmp	r6, r4
 8014756:	d109      	bne.n	801476c <__libc_init_array+0x24>
 8014758:	4d0b      	ldr	r5, [pc, #44]	; (8014788 <__libc_init_array+0x40>)
 801475a:	4c0c      	ldr	r4, [pc, #48]	; (801478c <__libc_init_array+0x44>)
 801475c:	f000 fd3c 	bl	80151d8 <_init>
 8014760:	1b64      	subs	r4, r4, r5
 8014762:	10a4      	asrs	r4, r4, #2
 8014764:	2600      	movs	r6, #0
 8014766:	42a6      	cmp	r6, r4
 8014768:	d105      	bne.n	8014776 <__libc_init_array+0x2e>
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014770:	4798      	blx	r3
 8014772:	3601      	adds	r6, #1
 8014774:	e7ee      	b.n	8014754 <__libc_init_array+0xc>
 8014776:	f855 3b04 	ldr.w	r3, [r5], #4
 801477a:	4798      	blx	r3
 801477c:	3601      	adds	r6, #1
 801477e:	e7f2      	b.n	8014766 <__libc_init_array+0x1e>
 8014780:	080155d8 	.word	0x080155d8
 8014784:	080155d8 	.word	0x080155d8
 8014788:	080155d8 	.word	0x080155d8
 801478c:	080155dc 	.word	0x080155dc

08014790 <malloc>:
 8014790:	4b02      	ldr	r3, [pc, #8]	; (801479c <malloc+0xc>)
 8014792:	4601      	mov	r1, r0
 8014794:	6818      	ldr	r0, [r3, #0]
 8014796:	f000 b88d 	b.w	80148b4 <_malloc_r>
 801479a:	bf00      	nop
 801479c:	2400009c 	.word	0x2400009c

080147a0 <free>:
 80147a0:	4b02      	ldr	r3, [pc, #8]	; (80147ac <free+0xc>)
 80147a2:	4601      	mov	r1, r0
 80147a4:	6818      	ldr	r0, [r3, #0]
 80147a6:	f000 b819 	b.w	80147dc <_free_r>
 80147aa:	bf00      	nop
 80147ac:	2400009c 	.word	0x2400009c

080147b0 <memcpy>:
 80147b0:	440a      	add	r2, r1
 80147b2:	4291      	cmp	r1, r2
 80147b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80147b8:	d100      	bne.n	80147bc <memcpy+0xc>
 80147ba:	4770      	bx	lr
 80147bc:	b510      	push	{r4, lr}
 80147be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147c6:	4291      	cmp	r1, r2
 80147c8:	d1f9      	bne.n	80147be <memcpy+0xe>
 80147ca:	bd10      	pop	{r4, pc}

080147cc <memset>:
 80147cc:	4402      	add	r2, r0
 80147ce:	4603      	mov	r3, r0
 80147d0:	4293      	cmp	r3, r2
 80147d2:	d100      	bne.n	80147d6 <memset+0xa>
 80147d4:	4770      	bx	lr
 80147d6:	f803 1b01 	strb.w	r1, [r3], #1
 80147da:	e7f9      	b.n	80147d0 <memset+0x4>

080147dc <_free_r>:
 80147dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147de:	2900      	cmp	r1, #0
 80147e0:	d044      	beq.n	801486c <_free_r+0x90>
 80147e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147e6:	9001      	str	r0, [sp, #4]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	f1a1 0404 	sub.w	r4, r1, #4
 80147ee:	bfb8      	it	lt
 80147f0:	18e4      	addlt	r4, r4, r3
 80147f2:	f000 fc39 	bl	8015068 <__malloc_lock>
 80147f6:	4a1e      	ldr	r2, [pc, #120]	; (8014870 <_free_r+0x94>)
 80147f8:	9801      	ldr	r0, [sp, #4]
 80147fa:	6813      	ldr	r3, [r2, #0]
 80147fc:	b933      	cbnz	r3, 801480c <_free_r+0x30>
 80147fe:	6063      	str	r3, [r4, #4]
 8014800:	6014      	str	r4, [r2, #0]
 8014802:	b003      	add	sp, #12
 8014804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014808:	f000 bc34 	b.w	8015074 <__malloc_unlock>
 801480c:	42a3      	cmp	r3, r4
 801480e:	d908      	bls.n	8014822 <_free_r+0x46>
 8014810:	6825      	ldr	r5, [r4, #0]
 8014812:	1961      	adds	r1, r4, r5
 8014814:	428b      	cmp	r3, r1
 8014816:	bf01      	itttt	eq
 8014818:	6819      	ldreq	r1, [r3, #0]
 801481a:	685b      	ldreq	r3, [r3, #4]
 801481c:	1949      	addeq	r1, r1, r5
 801481e:	6021      	streq	r1, [r4, #0]
 8014820:	e7ed      	b.n	80147fe <_free_r+0x22>
 8014822:	461a      	mov	r2, r3
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	b10b      	cbz	r3, 801482c <_free_r+0x50>
 8014828:	42a3      	cmp	r3, r4
 801482a:	d9fa      	bls.n	8014822 <_free_r+0x46>
 801482c:	6811      	ldr	r1, [r2, #0]
 801482e:	1855      	adds	r5, r2, r1
 8014830:	42a5      	cmp	r5, r4
 8014832:	d10b      	bne.n	801484c <_free_r+0x70>
 8014834:	6824      	ldr	r4, [r4, #0]
 8014836:	4421      	add	r1, r4
 8014838:	1854      	adds	r4, r2, r1
 801483a:	42a3      	cmp	r3, r4
 801483c:	6011      	str	r1, [r2, #0]
 801483e:	d1e0      	bne.n	8014802 <_free_r+0x26>
 8014840:	681c      	ldr	r4, [r3, #0]
 8014842:	685b      	ldr	r3, [r3, #4]
 8014844:	6053      	str	r3, [r2, #4]
 8014846:	4421      	add	r1, r4
 8014848:	6011      	str	r1, [r2, #0]
 801484a:	e7da      	b.n	8014802 <_free_r+0x26>
 801484c:	d902      	bls.n	8014854 <_free_r+0x78>
 801484e:	230c      	movs	r3, #12
 8014850:	6003      	str	r3, [r0, #0]
 8014852:	e7d6      	b.n	8014802 <_free_r+0x26>
 8014854:	6825      	ldr	r5, [r4, #0]
 8014856:	1961      	adds	r1, r4, r5
 8014858:	428b      	cmp	r3, r1
 801485a:	bf04      	itt	eq
 801485c:	6819      	ldreq	r1, [r3, #0]
 801485e:	685b      	ldreq	r3, [r3, #4]
 8014860:	6063      	str	r3, [r4, #4]
 8014862:	bf04      	itt	eq
 8014864:	1949      	addeq	r1, r1, r5
 8014866:	6021      	streq	r1, [r4, #0]
 8014868:	6054      	str	r4, [r2, #4]
 801486a:	e7ca      	b.n	8014802 <_free_r+0x26>
 801486c:	b003      	add	sp, #12
 801486e:	bd30      	pop	{r4, r5, pc}
 8014870:	2400558c 	.word	0x2400558c

08014874 <sbrk_aligned>:
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	4e0e      	ldr	r6, [pc, #56]	; (80148b0 <sbrk_aligned+0x3c>)
 8014878:	460c      	mov	r4, r1
 801487a:	6831      	ldr	r1, [r6, #0]
 801487c:	4605      	mov	r5, r0
 801487e:	b911      	cbnz	r1, 8014886 <sbrk_aligned+0x12>
 8014880:	f000 f902 	bl	8014a88 <_sbrk_r>
 8014884:	6030      	str	r0, [r6, #0]
 8014886:	4621      	mov	r1, r4
 8014888:	4628      	mov	r0, r5
 801488a:	f000 f8fd 	bl	8014a88 <_sbrk_r>
 801488e:	1c43      	adds	r3, r0, #1
 8014890:	d00a      	beq.n	80148a8 <sbrk_aligned+0x34>
 8014892:	1cc4      	adds	r4, r0, #3
 8014894:	f024 0403 	bic.w	r4, r4, #3
 8014898:	42a0      	cmp	r0, r4
 801489a:	d007      	beq.n	80148ac <sbrk_aligned+0x38>
 801489c:	1a21      	subs	r1, r4, r0
 801489e:	4628      	mov	r0, r5
 80148a0:	f000 f8f2 	bl	8014a88 <_sbrk_r>
 80148a4:	3001      	adds	r0, #1
 80148a6:	d101      	bne.n	80148ac <sbrk_aligned+0x38>
 80148a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80148ac:	4620      	mov	r0, r4
 80148ae:	bd70      	pop	{r4, r5, r6, pc}
 80148b0:	24005590 	.word	0x24005590

080148b4 <_malloc_r>:
 80148b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148b8:	1ccd      	adds	r5, r1, #3
 80148ba:	f025 0503 	bic.w	r5, r5, #3
 80148be:	3508      	adds	r5, #8
 80148c0:	2d0c      	cmp	r5, #12
 80148c2:	bf38      	it	cc
 80148c4:	250c      	movcc	r5, #12
 80148c6:	2d00      	cmp	r5, #0
 80148c8:	4607      	mov	r7, r0
 80148ca:	db01      	blt.n	80148d0 <_malloc_r+0x1c>
 80148cc:	42a9      	cmp	r1, r5
 80148ce:	d905      	bls.n	80148dc <_malloc_r+0x28>
 80148d0:	230c      	movs	r3, #12
 80148d2:	603b      	str	r3, [r7, #0]
 80148d4:	2600      	movs	r6, #0
 80148d6:	4630      	mov	r0, r6
 80148d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148dc:	4e2e      	ldr	r6, [pc, #184]	; (8014998 <_malloc_r+0xe4>)
 80148de:	f000 fbc3 	bl	8015068 <__malloc_lock>
 80148e2:	6833      	ldr	r3, [r6, #0]
 80148e4:	461c      	mov	r4, r3
 80148e6:	bb34      	cbnz	r4, 8014936 <_malloc_r+0x82>
 80148e8:	4629      	mov	r1, r5
 80148ea:	4638      	mov	r0, r7
 80148ec:	f7ff ffc2 	bl	8014874 <sbrk_aligned>
 80148f0:	1c43      	adds	r3, r0, #1
 80148f2:	4604      	mov	r4, r0
 80148f4:	d14d      	bne.n	8014992 <_malloc_r+0xde>
 80148f6:	6834      	ldr	r4, [r6, #0]
 80148f8:	4626      	mov	r6, r4
 80148fa:	2e00      	cmp	r6, #0
 80148fc:	d140      	bne.n	8014980 <_malloc_r+0xcc>
 80148fe:	6823      	ldr	r3, [r4, #0]
 8014900:	4631      	mov	r1, r6
 8014902:	4638      	mov	r0, r7
 8014904:	eb04 0803 	add.w	r8, r4, r3
 8014908:	f000 f8be 	bl	8014a88 <_sbrk_r>
 801490c:	4580      	cmp	r8, r0
 801490e:	d13a      	bne.n	8014986 <_malloc_r+0xd2>
 8014910:	6821      	ldr	r1, [r4, #0]
 8014912:	3503      	adds	r5, #3
 8014914:	1a6d      	subs	r5, r5, r1
 8014916:	f025 0503 	bic.w	r5, r5, #3
 801491a:	3508      	adds	r5, #8
 801491c:	2d0c      	cmp	r5, #12
 801491e:	bf38      	it	cc
 8014920:	250c      	movcc	r5, #12
 8014922:	4629      	mov	r1, r5
 8014924:	4638      	mov	r0, r7
 8014926:	f7ff ffa5 	bl	8014874 <sbrk_aligned>
 801492a:	3001      	adds	r0, #1
 801492c:	d02b      	beq.n	8014986 <_malloc_r+0xd2>
 801492e:	6823      	ldr	r3, [r4, #0]
 8014930:	442b      	add	r3, r5
 8014932:	6023      	str	r3, [r4, #0]
 8014934:	e00e      	b.n	8014954 <_malloc_r+0xa0>
 8014936:	6822      	ldr	r2, [r4, #0]
 8014938:	1b52      	subs	r2, r2, r5
 801493a:	d41e      	bmi.n	801497a <_malloc_r+0xc6>
 801493c:	2a0b      	cmp	r2, #11
 801493e:	d916      	bls.n	801496e <_malloc_r+0xba>
 8014940:	1961      	adds	r1, r4, r5
 8014942:	42a3      	cmp	r3, r4
 8014944:	6025      	str	r5, [r4, #0]
 8014946:	bf18      	it	ne
 8014948:	6059      	strne	r1, [r3, #4]
 801494a:	6863      	ldr	r3, [r4, #4]
 801494c:	bf08      	it	eq
 801494e:	6031      	streq	r1, [r6, #0]
 8014950:	5162      	str	r2, [r4, r5]
 8014952:	604b      	str	r3, [r1, #4]
 8014954:	4638      	mov	r0, r7
 8014956:	f104 060b 	add.w	r6, r4, #11
 801495a:	f000 fb8b 	bl	8015074 <__malloc_unlock>
 801495e:	f026 0607 	bic.w	r6, r6, #7
 8014962:	1d23      	adds	r3, r4, #4
 8014964:	1af2      	subs	r2, r6, r3
 8014966:	d0b6      	beq.n	80148d6 <_malloc_r+0x22>
 8014968:	1b9b      	subs	r3, r3, r6
 801496a:	50a3      	str	r3, [r4, r2]
 801496c:	e7b3      	b.n	80148d6 <_malloc_r+0x22>
 801496e:	6862      	ldr	r2, [r4, #4]
 8014970:	42a3      	cmp	r3, r4
 8014972:	bf0c      	ite	eq
 8014974:	6032      	streq	r2, [r6, #0]
 8014976:	605a      	strne	r2, [r3, #4]
 8014978:	e7ec      	b.n	8014954 <_malloc_r+0xa0>
 801497a:	4623      	mov	r3, r4
 801497c:	6864      	ldr	r4, [r4, #4]
 801497e:	e7b2      	b.n	80148e6 <_malloc_r+0x32>
 8014980:	4634      	mov	r4, r6
 8014982:	6876      	ldr	r6, [r6, #4]
 8014984:	e7b9      	b.n	80148fa <_malloc_r+0x46>
 8014986:	230c      	movs	r3, #12
 8014988:	603b      	str	r3, [r7, #0]
 801498a:	4638      	mov	r0, r7
 801498c:	f000 fb72 	bl	8015074 <__malloc_unlock>
 8014990:	e7a1      	b.n	80148d6 <_malloc_r+0x22>
 8014992:	6025      	str	r5, [r4, #0]
 8014994:	e7de      	b.n	8014954 <_malloc_r+0xa0>
 8014996:	bf00      	nop
 8014998:	2400558c 	.word	0x2400558c

0801499c <_puts_r>:
 801499c:	b570      	push	{r4, r5, r6, lr}
 801499e:	460e      	mov	r6, r1
 80149a0:	4605      	mov	r5, r0
 80149a2:	b118      	cbz	r0, 80149ac <_puts_r+0x10>
 80149a4:	6983      	ldr	r3, [r0, #24]
 80149a6:	b90b      	cbnz	r3, 80149ac <_puts_r+0x10>
 80149a8:	f000 fa58 	bl	8014e5c <__sinit>
 80149ac:	69ab      	ldr	r3, [r5, #24]
 80149ae:	68ac      	ldr	r4, [r5, #8]
 80149b0:	b913      	cbnz	r3, 80149b8 <_puts_r+0x1c>
 80149b2:	4628      	mov	r0, r5
 80149b4:	f000 fa52 	bl	8014e5c <__sinit>
 80149b8:	4b2c      	ldr	r3, [pc, #176]	; (8014a6c <_puts_r+0xd0>)
 80149ba:	429c      	cmp	r4, r3
 80149bc:	d120      	bne.n	8014a00 <_puts_r+0x64>
 80149be:	686c      	ldr	r4, [r5, #4]
 80149c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149c2:	07db      	lsls	r3, r3, #31
 80149c4:	d405      	bmi.n	80149d2 <_puts_r+0x36>
 80149c6:	89a3      	ldrh	r3, [r4, #12]
 80149c8:	0598      	lsls	r0, r3, #22
 80149ca:	d402      	bmi.n	80149d2 <_puts_r+0x36>
 80149cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149ce:	f000 fae3 	bl	8014f98 <__retarget_lock_acquire_recursive>
 80149d2:	89a3      	ldrh	r3, [r4, #12]
 80149d4:	0719      	lsls	r1, r3, #28
 80149d6:	d51d      	bpl.n	8014a14 <_puts_r+0x78>
 80149d8:	6923      	ldr	r3, [r4, #16]
 80149da:	b1db      	cbz	r3, 8014a14 <_puts_r+0x78>
 80149dc:	3e01      	subs	r6, #1
 80149de:	68a3      	ldr	r3, [r4, #8]
 80149e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80149e4:	3b01      	subs	r3, #1
 80149e6:	60a3      	str	r3, [r4, #8]
 80149e8:	bb39      	cbnz	r1, 8014a3a <_puts_r+0x9e>
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	da38      	bge.n	8014a60 <_puts_r+0xc4>
 80149ee:	4622      	mov	r2, r4
 80149f0:	210a      	movs	r1, #10
 80149f2:	4628      	mov	r0, r5
 80149f4:	f000 f858 	bl	8014aa8 <__swbuf_r>
 80149f8:	3001      	adds	r0, #1
 80149fa:	d011      	beq.n	8014a20 <_puts_r+0x84>
 80149fc:	250a      	movs	r5, #10
 80149fe:	e011      	b.n	8014a24 <_puts_r+0x88>
 8014a00:	4b1b      	ldr	r3, [pc, #108]	; (8014a70 <_puts_r+0xd4>)
 8014a02:	429c      	cmp	r4, r3
 8014a04:	d101      	bne.n	8014a0a <_puts_r+0x6e>
 8014a06:	68ac      	ldr	r4, [r5, #8]
 8014a08:	e7da      	b.n	80149c0 <_puts_r+0x24>
 8014a0a:	4b1a      	ldr	r3, [pc, #104]	; (8014a74 <_puts_r+0xd8>)
 8014a0c:	429c      	cmp	r4, r3
 8014a0e:	bf08      	it	eq
 8014a10:	68ec      	ldreq	r4, [r5, #12]
 8014a12:	e7d5      	b.n	80149c0 <_puts_r+0x24>
 8014a14:	4621      	mov	r1, r4
 8014a16:	4628      	mov	r0, r5
 8014a18:	f000 f898 	bl	8014b4c <__swsetup_r>
 8014a1c:	2800      	cmp	r0, #0
 8014a1e:	d0dd      	beq.n	80149dc <_puts_r+0x40>
 8014a20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a26:	07da      	lsls	r2, r3, #31
 8014a28:	d405      	bmi.n	8014a36 <_puts_r+0x9a>
 8014a2a:	89a3      	ldrh	r3, [r4, #12]
 8014a2c:	059b      	lsls	r3, r3, #22
 8014a2e:	d402      	bmi.n	8014a36 <_puts_r+0x9a>
 8014a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a32:	f000 fab2 	bl	8014f9a <__retarget_lock_release_recursive>
 8014a36:	4628      	mov	r0, r5
 8014a38:	bd70      	pop	{r4, r5, r6, pc}
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	da04      	bge.n	8014a48 <_puts_r+0xac>
 8014a3e:	69a2      	ldr	r2, [r4, #24]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	dc06      	bgt.n	8014a52 <_puts_r+0xb6>
 8014a44:	290a      	cmp	r1, #10
 8014a46:	d004      	beq.n	8014a52 <_puts_r+0xb6>
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	1c5a      	adds	r2, r3, #1
 8014a4c:	6022      	str	r2, [r4, #0]
 8014a4e:	7019      	strb	r1, [r3, #0]
 8014a50:	e7c5      	b.n	80149de <_puts_r+0x42>
 8014a52:	4622      	mov	r2, r4
 8014a54:	4628      	mov	r0, r5
 8014a56:	f000 f827 	bl	8014aa8 <__swbuf_r>
 8014a5a:	3001      	adds	r0, #1
 8014a5c:	d1bf      	bne.n	80149de <_puts_r+0x42>
 8014a5e:	e7df      	b.n	8014a20 <_puts_r+0x84>
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	250a      	movs	r5, #10
 8014a64:	1c5a      	adds	r2, r3, #1
 8014a66:	6022      	str	r2, [r4, #0]
 8014a68:	701d      	strb	r5, [r3, #0]
 8014a6a:	e7db      	b.n	8014a24 <_puts_r+0x88>
 8014a6c:	08015590 	.word	0x08015590
 8014a70:	080155b0 	.word	0x080155b0
 8014a74:	08015570 	.word	0x08015570

08014a78 <puts>:
 8014a78:	4b02      	ldr	r3, [pc, #8]	; (8014a84 <puts+0xc>)
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	6818      	ldr	r0, [r3, #0]
 8014a7e:	f7ff bf8d 	b.w	801499c <_puts_r>
 8014a82:	bf00      	nop
 8014a84:	2400009c 	.word	0x2400009c

08014a88 <_sbrk_r>:
 8014a88:	b538      	push	{r3, r4, r5, lr}
 8014a8a:	4d06      	ldr	r5, [pc, #24]	; (8014aa4 <_sbrk_r+0x1c>)
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	4604      	mov	r4, r0
 8014a90:	4608      	mov	r0, r1
 8014a92:	602b      	str	r3, [r5, #0]
 8014a94:	f7ee fc64 	bl	8003360 <_sbrk>
 8014a98:	1c43      	adds	r3, r0, #1
 8014a9a:	d102      	bne.n	8014aa2 <_sbrk_r+0x1a>
 8014a9c:	682b      	ldr	r3, [r5, #0]
 8014a9e:	b103      	cbz	r3, 8014aa2 <_sbrk_r+0x1a>
 8014aa0:	6023      	str	r3, [r4, #0]
 8014aa2:	bd38      	pop	{r3, r4, r5, pc}
 8014aa4:	24005598 	.word	0x24005598

08014aa8 <__swbuf_r>:
 8014aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aaa:	460e      	mov	r6, r1
 8014aac:	4614      	mov	r4, r2
 8014aae:	4605      	mov	r5, r0
 8014ab0:	b118      	cbz	r0, 8014aba <__swbuf_r+0x12>
 8014ab2:	6983      	ldr	r3, [r0, #24]
 8014ab4:	b90b      	cbnz	r3, 8014aba <__swbuf_r+0x12>
 8014ab6:	f000 f9d1 	bl	8014e5c <__sinit>
 8014aba:	4b21      	ldr	r3, [pc, #132]	; (8014b40 <__swbuf_r+0x98>)
 8014abc:	429c      	cmp	r4, r3
 8014abe:	d12b      	bne.n	8014b18 <__swbuf_r+0x70>
 8014ac0:	686c      	ldr	r4, [r5, #4]
 8014ac2:	69a3      	ldr	r3, [r4, #24]
 8014ac4:	60a3      	str	r3, [r4, #8]
 8014ac6:	89a3      	ldrh	r3, [r4, #12]
 8014ac8:	071a      	lsls	r2, r3, #28
 8014aca:	d52f      	bpl.n	8014b2c <__swbuf_r+0x84>
 8014acc:	6923      	ldr	r3, [r4, #16]
 8014ace:	b36b      	cbz	r3, 8014b2c <__swbuf_r+0x84>
 8014ad0:	6923      	ldr	r3, [r4, #16]
 8014ad2:	6820      	ldr	r0, [r4, #0]
 8014ad4:	1ac0      	subs	r0, r0, r3
 8014ad6:	6963      	ldr	r3, [r4, #20]
 8014ad8:	b2f6      	uxtb	r6, r6
 8014ada:	4283      	cmp	r3, r0
 8014adc:	4637      	mov	r7, r6
 8014ade:	dc04      	bgt.n	8014aea <__swbuf_r+0x42>
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	f000 f926 	bl	8014d34 <_fflush_r>
 8014ae8:	bb30      	cbnz	r0, 8014b38 <__swbuf_r+0x90>
 8014aea:	68a3      	ldr	r3, [r4, #8]
 8014aec:	3b01      	subs	r3, #1
 8014aee:	60a3      	str	r3, [r4, #8]
 8014af0:	6823      	ldr	r3, [r4, #0]
 8014af2:	1c5a      	adds	r2, r3, #1
 8014af4:	6022      	str	r2, [r4, #0]
 8014af6:	701e      	strb	r6, [r3, #0]
 8014af8:	6963      	ldr	r3, [r4, #20]
 8014afa:	3001      	adds	r0, #1
 8014afc:	4283      	cmp	r3, r0
 8014afe:	d004      	beq.n	8014b0a <__swbuf_r+0x62>
 8014b00:	89a3      	ldrh	r3, [r4, #12]
 8014b02:	07db      	lsls	r3, r3, #31
 8014b04:	d506      	bpl.n	8014b14 <__swbuf_r+0x6c>
 8014b06:	2e0a      	cmp	r6, #10
 8014b08:	d104      	bne.n	8014b14 <__swbuf_r+0x6c>
 8014b0a:	4621      	mov	r1, r4
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	f000 f911 	bl	8014d34 <_fflush_r>
 8014b12:	b988      	cbnz	r0, 8014b38 <__swbuf_r+0x90>
 8014b14:	4638      	mov	r0, r7
 8014b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b18:	4b0a      	ldr	r3, [pc, #40]	; (8014b44 <__swbuf_r+0x9c>)
 8014b1a:	429c      	cmp	r4, r3
 8014b1c:	d101      	bne.n	8014b22 <__swbuf_r+0x7a>
 8014b1e:	68ac      	ldr	r4, [r5, #8]
 8014b20:	e7cf      	b.n	8014ac2 <__swbuf_r+0x1a>
 8014b22:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <__swbuf_r+0xa0>)
 8014b24:	429c      	cmp	r4, r3
 8014b26:	bf08      	it	eq
 8014b28:	68ec      	ldreq	r4, [r5, #12]
 8014b2a:	e7ca      	b.n	8014ac2 <__swbuf_r+0x1a>
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	4628      	mov	r0, r5
 8014b30:	f000 f80c 	bl	8014b4c <__swsetup_r>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d0cb      	beq.n	8014ad0 <__swbuf_r+0x28>
 8014b38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014b3c:	e7ea      	b.n	8014b14 <__swbuf_r+0x6c>
 8014b3e:	bf00      	nop
 8014b40:	08015590 	.word	0x08015590
 8014b44:	080155b0 	.word	0x080155b0
 8014b48:	08015570 	.word	0x08015570

08014b4c <__swsetup_r>:
 8014b4c:	4b32      	ldr	r3, [pc, #200]	; (8014c18 <__swsetup_r+0xcc>)
 8014b4e:	b570      	push	{r4, r5, r6, lr}
 8014b50:	681d      	ldr	r5, [r3, #0]
 8014b52:	4606      	mov	r6, r0
 8014b54:	460c      	mov	r4, r1
 8014b56:	b125      	cbz	r5, 8014b62 <__swsetup_r+0x16>
 8014b58:	69ab      	ldr	r3, [r5, #24]
 8014b5a:	b913      	cbnz	r3, 8014b62 <__swsetup_r+0x16>
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f000 f97d 	bl	8014e5c <__sinit>
 8014b62:	4b2e      	ldr	r3, [pc, #184]	; (8014c1c <__swsetup_r+0xd0>)
 8014b64:	429c      	cmp	r4, r3
 8014b66:	d10f      	bne.n	8014b88 <__swsetup_r+0x3c>
 8014b68:	686c      	ldr	r4, [r5, #4]
 8014b6a:	89a3      	ldrh	r3, [r4, #12]
 8014b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b70:	0719      	lsls	r1, r3, #28
 8014b72:	d42c      	bmi.n	8014bce <__swsetup_r+0x82>
 8014b74:	06dd      	lsls	r5, r3, #27
 8014b76:	d411      	bmi.n	8014b9c <__swsetup_r+0x50>
 8014b78:	2309      	movs	r3, #9
 8014b7a:	6033      	str	r3, [r6, #0]
 8014b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b80:	81a3      	strh	r3, [r4, #12]
 8014b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b86:	e03e      	b.n	8014c06 <__swsetup_r+0xba>
 8014b88:	4b25      	ldr	r3, [pc, #148]	; (8014c20 <__swsetup_r+0xd4>)
 8014b8a:	429c      	cmp	r4, r3
 8014b8c:	d101      	bne.n	8014b92 <__swsetup_r+0x46>
 8014b8e:	68ac      	ldr	r4, [r5, #8]
 8014b90:	e7eb      	b.n	8014b6a <__swsetup_r+0x1e>
 8014b92:	4b24      	ldr	r3, [pc, #144]	; (8014c24 <__swsetup_r+0xd8>)
 8014b94:	429c      	cmp	r4, r3
 8014b96:	bf08      	it	eq
 8014b98:	68ec      	ldreq	r4, [r5, #12]
 8014b9a:	e7e6      	b.n	8014b6a <__swsetup_r+0x1e>
 8014b9c:	0758      	lsls	r0, r3, #29
 8014b9e:	d512      	bpl.n	8014bc6 <__swsetup_r+0x7a>
 8014ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ba2:	b141      	cbz	r1, 8014bb6 <__swsetup_r+0x6a>
 8014ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ba8:	4299      	cmp	r1, r3
 8014baa:	d002      	beq.n	8014bb2 <__swsetup_r+0x66>
 8014bac:	4630      	mov	r0, r6
 8014bae:	f7ff fe15 	bl	80147dc <_free_r>
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8014bb6:	89a3      	ldrh	r3, [r4, #12]
 8014bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014bbc:	81a3      	strh	r3, [r4, #12]
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	6063      	str	r3, [r4, #4]
 8014bc2:	6923      	ldr	r3, [r4, #16]
 8014bc4:	6023      	str	r3, [r4, #0]
 8014bc6:	89a3      	ldrh	r3, [r4, #12]
 8014bc8:	f043 0308 	orr.w	r3, r3, #8
 8014bcc:	81a3      	strh	r3, [r4, #12]
 8014bce:	6923      	ldr	r3, [r4, #16]
 8014bd0:	b94b      	cbnz	r3, 8014be6 <__swsetup_r+0x9a>
 8014bd2:	89a3      	ldrh	r3, [r4, #12]
 8014bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bdc:	d003      	beq.n	8014be6 <__swsetup_r+0x9a>
 8014bde:	4621      	mov	r1, r4
 8014be0:	4630      	mov	r0, r6
 8014be2:	f000 fa01 	bl	8014fe8 <__smakebuf_r>
 8014be6:	89a0      	ldrh	r0, [r4, #12]
 8014be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bec:	f010 0301 	ands.w	r3, r0, #1
 8014bf0:	d00a      	beq.n	8014c08 <__swsetup_r+0xbc>
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	60a3      	str	r3, [r4, #8]
 8014bf6:	6963      	ldr	r3, [r4, #20]
 8014bf8:	425b      	negs	r3, r3
 8014bfa:	61a3      	str	r3, [r4, #24]
 8014bfc:	6923      	ldr	r3, [r4, #16]
 8014bfe:	b943      	cbnz	r3, 8014c12 <__swsetup_r+0xc6>
 8014c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c04:	d1ba      	bne.n	8014b7c <__swsetup_r+0x30>
 8014c06:	bd70      	pop	{r4, r5, r6, pc}
 8014c08:	0781      	lsls	r1, r0, #30
 8014c0a:	bf58      	it	pl
 8014c0c:	6963      	ldrpl	r3, [r4, #20]
 8014c0e:	60a3      	str	r3, [r4, #8]
 8014c10:	e7f4      	b.n	8014bfc <__swsetup_r+0xb0>
 8014c12:	2000      	movs	r0, #0
 8014c14:	e7f7      	b.n	8014c06 <__swsetup_r+0xba>
 8014c16:	bf00      	nop
 8014c18:	2400009c 	.word	0x2400009c
 8014c1c:	08015590 	.word	0x08015590
 8014c20:	080155b0 	.word	0x080155b0
 8014c24:	08015570 	.word	0x08015570

08014c28 <__sflush_r>:
 8014c28:	898a      	ldrh	r2, [r1, #12]
 8014c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2e:	4605      	mov	r5, r0
 8014c30:	0710      	lsls	r0, r2, #28
 8014c32:	460c      	mov	r4, r1
 8014c34:	d458      	bmi.n	8014ce8 <__sflush_r+0xc0>
 8014c36:	684b      	ldr	r3, [r1, #4]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	dc05      	bgt.n	8014c48 <__sflush_r+0x20>
 8014c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	dc02      	bgt.n	8014c48 <__sflush_r+0x20>
 8014c42:	2000      	movs	r0, #0
 8014c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c4a:	2e00      	cmp	r6, #0
 8014c4c:	d0f9      	beq.n	8014c42 <__sflush_r+0x1a>
 8014c4e:	2300      	movs	r3, #0
 8014c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c54:	682f      	ldr	r7, [r5, #0]
 8014c56:	602b      	str	r3, [r5, #0]
 8014c58:	d032      	beq.n	8014cc0 <__sflush_r+0x98>
 8014c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c5c:	89a3      	ldrh	r3, [r4, #12]
 8014c5e:	075a      	lsls	r2, r3, #29
 8014c60:	d505      	bpl.n	8014c6e <__sflush_r+0x46>
 8014c62:	6863      	ldr	r3, [r4, #4]
 8014c64:	1ac0      	subs	r0, r0, r3
 8014c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c68:	b10b      	cbz	r3, 8014c6e <__sflush_r+0x46>
 8014c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c6c:	1ac0      	subs	r0, r0, r3
 8014c6e:	2300      	movs	r3, #0
 8014c70:	4602      	mov	r2, r0
 8014c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c74:	6a21      	ldr	r1, [r4, #32]
 8014c76:	4628      	mov	r0, r5
 8014c78:	47b0      	blx	r6
 8014c7a:	1c43      	adds	r3, r0, #1
 8014c7c:	89a3      	ldrh	r3, [r4, #12]
 8014c7e:	d106      	bne.n	8014c8e <__sflush_r+0x66>
 8014c80:	6829      	ldr	r1, [r5, #0]
 8014c82:	291d      	cmp	r1, #29
 8014c84:	d82c      	bhi.n	8014ce0 <__sflush_r+0xb8>
 8014c86:	4a2a      	ldr	r2, [pc, #168]	; (8014d30 <__sflush_r+0x108>)
 8014c88:	40ca      	lsrs	r2, r1
 8014c8a:	07d6      	lsls	r6, r2, #31
 8014c8c:	d528      	bpl.n	8014ce0 <__sflush_r+0xb8>
 8014c8e:	2200      	movs	r2, #0
 8014c90:	6062      	str	r2, [r4, #4]
 8014c92:	04d9      	lsls	r1, r3, #19
 8014c94:	6922      	ldr	r2, [r4, #16]
 8014c96:	6022      	str	r2, [r4, #0]
 8014c98:	d504      	bpl.n	8014ca4 <__sflush_r+0x7c>
 8014c9a:	1c42      	adds	r2, r0, #1
 8014c9c:	d101      	bne.n	8014ca2 <__sflush_r+0x7a>
 8014c9e:	682b      	ldr	r3, [r5, #0]
 8014ca0:	b903      	cbnz	r3, 8014ca4 <__sflush_r+0x7c>
 8014ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8014ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ca6:	602f      	str	r7, [r5, #0]
 8014ca8:	2900      	cmp	r1, #0
 8014caa:	d0ca      	beq.n	8014c42 <__sflush_r+0x1a>
 8014cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cb0:	4299      	cmp	r1, r3
 8014cb2:	d002      	beq.n	8014cba <__sflush_r+0x92>
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	f7ff fd91 	bl	80147dc <_free_r>
 8014cba:	2000      	movs	r0, #0
 8014cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8014cbe:	e7c1      	b.n	8014c44 <__sflush_r+0x1c>
 8014cc0:	6a21      	ldr	r1, [r4, #32]
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	47b0      	blx	r6
 8014cc8:	1c41      	adds	r1, r0, #1
 8014cca:	d1c7      	bne.n	8014c5c <__sflush_r+0x34>
 8014ccc:	682b      	ldr	r3, [r5, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d0c4      	beq.n	8014c5c <__sflush_r+0x34>
 8014cd2:	2b1d      	cmp	r3, #29
 8014cd4:	d001      	beq.n	8014cda <__sflush_r+0xb2>
 8014cd6:	2b16      	cmp	r3, #22
 8014cd8:	d101      	bne.n	8014cde <__sflush_r+0xb6>
 8014cda:	602f      	str	r7, [r5, #0]
 8014cdc:	e7b1      	b.n	8014c42 <__sflush_r+0x1a>
 8014cde:	89a3      	ldrh	r3, [r4, #12]
 8014ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ce4:	81a3      	strh	r3, [r4, #12]
 8014ce6:	e7ad      	b.n	8014c44 <__sflush_r+0x1c>
 8014ce8:	690f      	ldr	r7, [r1, #16]
 8014cea:	2f00      	cmp	r7, #0
 8014cec:	d0a9      	beq.n	8014c42 <__sflush_r+0x1a>
 8014cee:	0793      	lsls	r3, r2, #30
 8014cf0:	680e      	ldr	r6, [r1, #0]
 8014cf2:	bf08      	it	eq
 8014cf4:	694b      	ldreq	r3, [r1, #20]
 8014cf6:	600f      	str	r7, [r1, #0]
 8014cf8:	bf18      	it	ne
 8014cfa:	2300      	movne	r3, #0
 8014cfc:	eba6 0807 	sub.w	r8, r6, r7
 8014d00:	608b      	str	r3, [r1, #8]
 8014d02:	f1b8 0f00 	cmp.w	r8, #0
 8014d06:	dd9c      	ble.n	8014c42 <__sflush_r+0x1a>
 8014d08:	6a21      	ldr	r1, [r4, #32]
 8014d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d0c:	4643      	mov	r3, r8
 8014d0e:	463a      	mov	r2, r7
 8014d10:	4628      	mov	r0, r5
 8014d12:	47b0      	blx	r6
 8014d14:	2800      	cmp	r0, #0
 8014d16:	dc06      	bgt.n	8014d26 <__sflush_r+0xfe>
 8014d18:	89a3      	ldrh	r3, [r4, #12]
 8014d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d1e:	81a3      	strh	r3, [r4, #12]
 8014d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d24:	e78e      	b.n	8014c44 <__sflush_r+0x1c>
 8014d26:	4407      	add	r7, r0
 8014d28:	eba8 0800 	sub.w	r8, r8, r0
 8014d2c:	e7e9      	b.n	8014d02 <__sflush_r+0xda>
 8014d2e:	bf00      	nop
 8014d30:	20400001 	.word	0x20400001

08014d34 <_fflush_r>:
 8014d34:	b538      	push	{r3, r4, r5, lr}
 8014d36:	690b      	ldr	r3, [r1, #16]
 8014d38:	4605      	mov	r5, r0
 8014d3a:	460c      	mov	r4, r1
 8014d3c:	b913      	cbnz	r3, 8014d44 <_fflush_r+0x10>
 8014d3e:	2500      	movs	r5, #0
 8014d40:	4628      	mov	r0, r5
 8014d42:	bd38      	pop	{r3, r4, r5, pc}
 8014d44:	b118      	cbz	r0, 8014d4e <_fflush_r+0x1a>
 8014d46:	6983      	ldr	r3, [r0, #24]
 8014d48:	b90b      	cbnz	r3, 8014d4e <_fflush_r+0x1a>
 8014d4a:	f000 f887 	bl	8014e5c <__sinit>
 8014d4e:	4b14      	ldr	r3, [pc, #80]	; (8014da0 <_fflush_r+0x6c>)
 8014d50:	429c      	cmp	r4, r3
 8014d52:	d11b      	bne.n	8014d8c <_fflush_r+0x58>
 8014d54:	686c      	ldr	r4, [r5, #4]
 8014d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d0ef      	beq.n	8014d3e <_fflush_r+0xa>
 8014d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d60:	07d0      	lsls	r0, r2, #31
 8014d62:	d404      	bmi.n	8014d6e <_fflush_r+0x3a>
 8014d64:	0599      	lsls	r1, r3, #22
 8014d66:	d402      	bmi.n	8014d6e <_fflush_r+0x3a>
 8014d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d6a:	f000 f915 	bl	8014f98 <__retarget_lock_acquire_recursive>
 8014d6e:	4628      	mov	r0, r5
 8014d70:	4621      	mov	r1, r4
 8014d72:	f7ff ff59 	bl	8014c28 <__sflush_r>
 8014d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d78:	07da      	lsls	r2, r3, #31
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	d4e0      	bmi.n	8014d40 <_fflush_r+0xc>
 8014d7e:	89a3      	ldrh	r3, [r4, #12]
 8014d80:	059b      	lsls	r3, r3, #22
 8014d82:	d4dd      	bmi.n	8014d40 <_fflush_r+0xc>
 8014d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d86:	f000 f908 	bl	8014f9a <__retarget_lock_release_recursive>
 8014d8a:	e7d9      	b.n	8014d40 <_fflush_r+0xc>
 8014d8c:	4b05      	ldr	r3, [pc, #20]	; (8014da4 <_fflush_r+0x70>)
 8014d8e:	429c      	cmp	r4, r3
 8014d90:	d101      	bne.n	8014d96 <_fflush_r+0x62>
 8014d92:	68ac      	ldr	r4, [r5, #8]
 8014d94:	e7df      	b.n	8014d56 <_fflush_r+0x22>
 8014d96:	4b04      	ldr	r3, [pc, #16]	; (8014da8 <_fflush_r+0x74>)
 8014d98:	429c      	cmp	r4, r3
 8014d9a:	bf08      	it	eq
 8014d9c:	68ec      	ldreq	r4, [r5, #12]
 8014d9e:	e7da      	b.n	8014d56 <_fflush_r+0x22>
 8014da0:	08015590 	.word	0x08015590
 8014da4:	080155b0 	.word	0x080155b0
 8014da8:	08015570 	.word	0x08015570

08014dac <std>:
 8014dac:	2300      	movs	r3, #0
 8014dae:	b510      	push	{r4, lr}
 8014db0:	4604      	mov	r4, r0
 8014db2:	e9c0 3300 	strd	r3, r3, [r0]
 8014db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dba:	6083      	str	r3, [r0, #8]
 8014dbc:	8181      	strh	r1, [r0, #12]
 8014dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8014dc0:	81c2      	strh	r2, [r0, #14]
 8014dc2:	6183      	str	r3, [r0, #24]
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	2208      	movs	r2, #8
 8014dc8:	305c      	adds	r0, #92	; 0x5c
 8014dca:	f7ff fcff 	bl	80147cc <memset>
 8014dce:	4b05      	ldr	r3, [pc, #20]	; (8014de4 <std+0x38>)
 8014dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8014dd2:	4b05      	ldr	r3, [pc, #20]	; (8014de8 <std+0x3c>)
 8014dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014dd6:	4b05      	ldr	r3, [pc, #20]	; (8014dec <std+0x40>)
 8014dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014dda:	4b05      	ldr	r3, [pc, #20]	; (8014df0 <std+0x44>)
 8014ddc:	6224      	str	r4, [r4, #32]
 8014dde:	6323      	str	r3, [r4, #48]	; 0x30
 8014de0:	bd10      	pop	{r4, pc}
 8014de2:	bf00      	nop
 8014de4:	08015081 	.word	0x08015081
 8014de8:	080150a3 	.word	0x080150a3
 8014dec:	080150db 	.word	0x080150db
 8014df0:	080150ff 	.word	0x080150ff

08014df4 <_cleanup_r>:
 8014df4:	4901      	ldr	r1, [pc, #4]	; (8014dfc <_cleanup_r+0x8>)
 8014df6:	f000 b8af 	b.w	8014f58 <_fwalk_reent>
 8014dfa:	bf00      	nop
 8014dfc:	08014d35 	.word	0x08014d35

08014e00 <__sfmoreglue>:
 8014e00:	b570      	push	{r4, r5, r6, lr}
 8014e02:	2268      	movs	r2, #104	; 0x68
 8014e04:	1e4d      	subs	r5, r1, #1
 8014e06:	4355      	muls	r5, r2
 8014e08:	460e      	mov	r6, r1
 8014e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e0e:	f7ff fd51 	bl	80148b4 <_malloc_r>
 8014e12:	4604      	mov	r4, r0
 8014e14:	b140      	cbz	r0, 8014e28 <__sfmoreglue+0x28>
 8014e16:	2100      	movs	r1, #0
 8014e18:	e9c0 1600 	strd	r1, r6, [r0]
 8014e1c:	300c      	adds	r0, #12
 8014e1e:	60a0      	str	r0, [r4, #8]
 8014e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e24:	f7ff fcd2 	bl	80147cc <memset>
 8014e28:	4620      	mov	r0, r4
 8014e2a:	bd70      	pop	{r4, r5, r6, pc}

08014e2c <__sfp_lock_acquire>:
 8014e2c:	4801      	ldr	r0, [pc, #4]	; (8014e34 <__sfp_lock_acquire+0x8>)
 8014e2e:	f000 b8b3 	b.w	8014f98 <__retarget_lock_acquire_recursive>
 8014e32:	bf00      	nop
 8014e34:	24005595 	.word	0x24005595

08014e38 <__sfp_lock_release>:
 8014e38:	4801      	ldr	r0, [pc, #4]	; (8014e40 <__sfp_lock_release+0x8>)
 8014e3a:	f000 b8ae 	b.w	8014f9a <__retarget_lock_release_recursive>
 8014e3e:	bf00      	nop
 8014e40:	24005595 	.word	0x24005595

08014e44 <__sinit_lock_acquire>:
 8014e44:	4801      	ldr	r0, [pc, #4]	; (8014e4c <__sinit_lock_acquire+0x8>)
 8014e46:	f000 b8a7 	b.w	8014f98 <__retarget_lock_acquire_recursive>
 8014e4a:	bf00      	nop
 8014e4c:	24005596 	.word	0x24005596

08014e50 <__sinit_lock_release>:
 8014e50:	4801      	ldr	r0, [pc, #4]	; (8014e58 <__sinit_lock_release+0x8>)
 8014e52:	f000 b8a2 	b.w	8014f9a <__retarget_lock_release_recursive>
 8014e56:	bf00      	nop
 8014e58:	24005596 	.word	0x24005596

08014e5c <__sinit>:
 8014e5c:	b510      	push	{r4, lr}
 8014e5e:	4604      	mov	r4, r0
 8014e60:	f7ff fff0 	bl	8014e44 <__sinit_lock_acquire>
 8014e64:	69a3      	ldr	r3, [r4, #24]
 8014e66:	b11b      	cbz	r3, 8014e70 <__sinit+0x14>
 8014e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e6c:	f7ff bff0 	b.w	8014e50 <__sinit_lock_release>
 8014e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014e74:	6523      	str	r3, [r4, #80]	; 0x50
 8014e76:	4b13      	ldr	r3, [pc, #76]	; (8014ec4 <__sinit+0x68>)
 8014e78:	4a13      	ldr	r2, [pc, #76]	; (8014ec8 <__sinit+0x6c>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8014e7e:	42a3      	cmp	r3, r4
 8014e80:	bf04      	itt	eq
 8014e82:	2301      	moveq	r3, #1
 8014e84:	61a3      	streq	r3, [r4, #24]
 8014e86:	4620      	mov	r0, r4
 8014e88:	f000 f820 	bl	8014ecc <__sfp>
 8014e8c:	6060      	str	r0, [r4, #4]
 8014e8e:	4620      	mov	r0, r4
 8014e90:	f000 f81c 	bl	8014ecc <__sfp>
 8014e94:	60a0      	str	r0, [r4, #8]
 8014e96:	4620      	mov	r0, r4
 8014e98:	f000 f818 	bl	8014ecc <__sfp>
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	60e0      	str	r0, [r4, #12]
 8014ea0:	2104      	movs	r1, #4
 8014ea2:	6860      	ldr	r0, [r4, #4]
 8014ea4:	f7ff ff82 	bl	8014dac <std>
 8014ea8:	68a0      	ldr	r0, [r4, #8]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	2109      	movs	r1, #9
 8014eae:	f7ff ff7d 	bl	8014dac <std>
 8014eb2:	68e0      	ldr	r0, [r4, #12]
 8014eb4:	2202      	movs	r2, #2
 8014eb6:	2112      	movs	r1, #18
 8014eb8:	f7ff ff78 	bl	8014dac <std>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	61a3      	str	r3, [r4, #24]
 8014ec0:	e7d2      	b.n	8014e68 <__sinit+0xc>
 8014ec2:	bf00      	nop
 8014ec4:	0801556c 	.word	0x0801556c
 8014ec8:	08014df5 	.word	0x08014df5

08014ecc <__sfp>:
 8014ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ece:	4607      	mov	r7, r0
 8014ed0:	f7ff ffac 	bl	8014e2c <__sfp_lock_acquire>
 8014ed4:	4b1e      	ldr	r3, [pc, #120]	; (8014f50 <__sfp+0x84>)
 8014ed6:	681e      	ldr	r6, [r3, #0]
 8014ed8:	69b3      	ldr	r3, [r6, #24]
 8014eda:	b913      	cbnz	r3, 8014ee2 <__sfp+0x16>
 8014edc:	4630      	mov	r0, r6
 8014ede:	f7ff ffbd 	bl	8014e5c <__sinit>
 8014ee2:	3648      	adds	r6, #72	; 0x48
 8014ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ee8:	3b01      	subs	r3, #1
 8014eea:	d503      	bpl.n	8014ef4 <__sfp+0x28>
 8014eec:	6833      	ldr	r3, [r6, #0]
 8014eee:	b30b      	cbz	r3, 8014f34 <__sfp+0x68>
 8014ef0:	6836      	ldr	r6, [r6, #0]
 8014ef2:	e7f7      	b.n	8014ee4 <__sfp+0x18>
 8014ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014ef8:	b9d5      	cbnz	r5, 8014f30 <__sfp+0x64>
 8014efa:	4b16      	ldr	r3, [pc, #88]	; (8014f54 <__sfp+0x88>)
 8014efc:	60e3      	str	r3, [r4, #12]
 8014efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f02:	6665      	str	r5, [r4, #100]	; 0x64
 8014f04:	f000 f847 	bl	8014f96 <__retarget_lock_init_recursive>
 8014f08:	f7ff ff96 	bl	8014e38 <__sfp_lock_release>
 8014f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f14:	6025      	str	r5, [r4, #0]
 8014f16:	61a5      	str	r5, [r4, #24]
 8014f18:	2208      	movs	r2, #8
 8014f1a:	4629      	mov	r1, r5
 8014f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f20:	f7ff fc54 	bl	80147cc <memset>
 8014f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f30:	3468      	adds	r4, #104	; 0x68
 8014f32:	e7d9      	b.n	8014ee8 <__sfp+0x1c>
 8014f34:	2104      	movs	r1, #4
 8014f36:	4638      	mov	r0, r7
 8014f38:	f7ff ff62 	bl	8014e00 <__sfmoreglue>
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	6030      	str	r0, [r6, #0]
 8014f40:	2800      	cmp	r0, #0
 8014f42:	d1d5      	bne.n	8014ef0 <__sfp+0x24>
 8014f44:	f7ff ff78 	bl	8014e38 <__sfp_lock_release>
 8014f48:	230c      	movs	r3, #12
 8014f4a:	603b      	str	r3, [r7, #0]
 8014f4c:	e7ee      	b.n	8014f2c <__sfp+0x60>
 8014f4e:	bf00      	nop
 8014f50:	0801556c 	.word	0x0801556c
 8014f54:	ffff0001 	.word	0xffff0001

08014f58 <_fwalk_reent>:
 8014f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f5c:	4606      	mov	r6, r0
 8014f5e:	4688      	mov	r8, r1
 8014f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f64:	2700      	movs	r7, #0
 8014f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8014f6e:	d505      	bpl.n	8014f7c <_fwalk_reent+0x24>
 8014f70:	6824      	ldr	r4, [r4, #0]
 8014f72:	2c00      	cmp	r4, #0
 8014f74:	d1f7      	bne.n	8014f66 <_fwalk_reent+0xe>
 8014f76:	4638      	mov	r0, r7
 8014f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f7c:	89ab      	ldrh	r3, [r5, #12]
 8014f7e:	2b01      	cmp	r3, #1
 8014f80:	d907      	bls.n	8014f92 <_fwalk_reent+0x3a>
 8014f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f86:	3301      	adds	r3, #1
 8014f88:	d003      	beq.n	8014f92 <_fwalk_reent+0x3a>
 8014f8a:	4629      	mov	r1, r5
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	47c0      	blx	r8
 8014f90:	4307      	orrs	r7, r0
 8014f92:	3568      	adds	r5, #104	; 0x68
 8014f94:	e7e9      	b.n	8014f6a <_fwalk_reent+0x12>

08014f96 <__retarget_lock_init_recursive>:
 8014f96:	4770      	bx	lr

08014f98 <__retarget_lock_acquire_recursive>:
 8014f98:	4770      	bx	lr

08014f9a <__retarget_lock_release_recursive>:
 8014f9a:	4770      	bx	lr

08014f9c <__swhatbuf_r>:
 8014f9c:	b570      	push	{r4, r5, r6, lr}
 8014f9e:	460e      	mov	r6, r1
 8014fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fa4:	2900      	cmp	r1, #0
 8014fa6:	b096      	sub	sp, #88	; 0x58
 8014fa8:	4614      	mov	r4, r2
 8014faa:	461d      	mov	r5, r3
 8014fac:	da08      	bge.n	8014fc0 <__swhatbuf_r+0x24>
 8014fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	602a      	str	r2, [r5, #0]
 8014fb6:	061a      	lsls	r2, r3, #24
 8014fb8:	d410      	bmi.n	8014fdc <__swhatbuf_r+0x40>
 8014fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fbe:	e00e      	b.n	8014fde <__swhatbuf_r+0x42>
 8014fc0:	466a      	mov	r2, sp
 8014fc2:	f000 f8c3 	bl	801514c <_fstat_r>
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	dbf1      	blt.n	8014fae <__swhatbuf_r+0x12>
 8014fca:	9a01      	ldr	r2, [sp, #4]
 8014fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014fd4:	425a      	negs	r2, r3
 8014fd6:	415a      	adcs	r2, r3
 8014fd8:	602a      	str	r2, [r5, #0]
 8014fda:	e7ee      	b.n	8014fba <__swhatbuf_r+0x1e>
 8014fdc:	2340      	movs	r3, #64	; 0x40
 8014fde:	2000      	movs	r0, #0
 8014fe0:	6023      	str	r3, [r4, #0]
 8014fe2:	b016      	add	sp, #88	; 0x58
 8014fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014fe8 <__smakebuf_r>:
 8014fe8:	898b      	ldrh	r3, [r1, #12]
 8014fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014fec:	079d      	lsls	r5, r3, #30
 8014fee:	4606      	mov	r6, r0
 8014ff0:	460c      	mov	r4, r1
 8014ff2:	d507      	bpl.n	8015004 <__smakebuf_r+0x1c>
 8014ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014ff8:	6023      	str	r3, [r4, #0]
 8014ffa:	6123      	str	r3, [r4, #16]
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	6163      	str	r3, [r4, #20]
 8015000:	b002      	add	sp, #8
 8015002:	bd70      	pop	{r4, r5, r6, pc}
 8015004:	ab01      	add	r3, sp, #4
 8015006:	466a      	mov	r2, sp
 8015008:	f7ff ffc8 	bl	8014f9c <__swhatbuf_r>
 801500c:	9900      	ldr	r1, [sp, #0]
 801500e:	4605      	mov	r5, r0
 8015010:	4630      	mov	r0, r6
 8015012:	f7ff fc4f 	bl	80148b4 <_malloc_r>
 8015016:	b948      	cbnz	r0, 801502c <__smakebuf_r+0x44>
 8015018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801501c:	059a      	lsls	r2, r3, #22
 801501e:	d4ef      	bmi.n	8015000 <__smakebuf_r+0x18>
 8015020:	f023 0303 	bic.w	r3, r3, #3
 8015024:	f043 0302 	orr.w	r3, r3, #2
 8015028:	81a3      	strh	r3, [r4, #12]
 801502a:	e7e3      	b.n	8014ff4 <__smakebuf_r+0xc>
 801502c:	4b0d      	ldr	r3, [pc, #52]	; (8015064 <__smakebuf_r+0x7c>)
 801502e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015030:	89a3      	ldrh	r3, [r4, #12]
 8015032:	6020      	str	r0, [r4, #0]
 8015034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015038:	81a3      	strh	r3, [r4, #12]
 801503a:	9b00      	ldr	r3, [sp, #0]
 801503c:	6163      	str	r3, [r4, #20]
 801503e:	9b01      	ldr	r3, [sp, #4]
 8015040:	6120      	str	r0, [r4, #16]
 8015042:	b15b      	cbz	r3, 801505c <__smakebuf_r+0x74>
 8015044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015048:	4630      	mov	r0, r6
 801504a:	f000 f891 	bl	8015170 <_isatty_r>
 801504e:	b128      	cbz	r0, 801505c <__smakebuf_r+0x74>
 8015050:	89a3      	ldrh	r3, [r4, #12]
 8015052:	f023 0303 	bic.w	r3, r3, #3
 8015056:	f043 0301 	orr.w	r3, r3, #1
 801505a:	81a3      	strh	r3, [r4, #12]
 801505c:	89a0      	ldrh	r0, [r4, #12]
 801505e:	4305      	orrs	r5, r0
 8015060:	81a5      	strh	r5, [r4, #12]
 8015062:	e7cd      	b.n	8015000 <__smakebuf_r+0x18>
 8015064:	08014df5 	.word	0x08014df5

08015068 <__malloc_lock>:
 8015068:	4801      	ldr	r0, [pc, #4]	; (8015070 <__malloc_lock+0x8>)
 801506a:	f7ff bf95 	b.w	8014f98 <__retarget_lock_acquire_recursive>
 801506e:	bf00      	nop
 8015070:	24005594 	.word	0x24005594

08015074 <__malloc_unlock>:
 8015074:	4801      	ldr	r0, [pc, #4]	; (801507c <__malloc_unlock+0x8>)
 8015076:	f7ff bf90 	b.w	8014f9a <__retarget_lock_release_recursive>
 801507a:	bf00      	nop
 801507c:	24005594 	.word	0x24005594

08015080 <__sread>:
 8015080:	b510      	push	{r4, lr}
 8015082:	460c      	mov	r4, r1
 8015084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015088:	f000 f894 	bl	80151b4 <_read_r>
 801508c:	2800      	cmp	r0, #0
 801508e:	bfab      	itete	ge
 8015090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015092:	89a3      	ldrhlt	r3, [r4, #12]
 8015094:	181b      	addge	r3, r3, r0
 8015096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801509a:	bfac      	ite	ge
 801509c:	6563      	strge	r3, [r4, #84]	; 0x54
 801509e:	81a3      	strhlt	r3, [r4, #12]
 80150a0:	bd10      	pop	{r4, pc}

080150a2 <__swrite>:
 80150a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a6:	461f      	mov	r7, r3
 80150a8:	898b      	ldrh	r3, [r1, #12]
 80150aa:	05db      	lsls	r3, r3, #23
 80150ac:	4605      	mov	r5, r0
 80150ae:	460c      	mov	r4, r1
 80150b0:	4616      	mov	r6, r2
 80150b2:	d505      	bpl.n	80150c0 <__swrite+0x1e>
 80150b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150b8:	2302      	movs	r3, #2
 80150ba:	2200      	movs	r2, #0
 80150bc:	f000 f868 	bl	8015190 <_lseek_r>
 80150c0:	89a3      	ldrh	r3, [r4, #12]
 80150c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150ca:	81a3      	strh	r3, [r4, #12]
 80150cc:	4632      	mov	r2, r6
 80150ce:	463b      	mov	r3, r7
 80150d0:	4628      	mov	r0, r5
 80150d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150d6:	f000 b817 	b.w	8015108 <_write_r>

080150da <__sseek>:
 80150da:	b510      	push	{r4, lr}
 80150dc:	460c      	mov	r4, r1
 80150de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150e2:	f000 f855 	bl	8015190 <_lseek_r>
 80150e6:	1c43      	adds	r3, r0, #1
 80150e8:	89a3      	ldrh	r3, [r4, #12]
 80150ea:	bf15      	itete	ne
 80150ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80150ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150f6:	81a3      	strheq	r3, [r4, #12]
 80150f8:	bf18      	it	ne
 80150fa:	81a3      	strhne	r3, [r4, #12]
 80150fc:	bd10      	pop	{r4, pc}

080150fe <__sclose>:
 80150fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015102:	f000 b813 	b.w	801512c <_close_r>
	...

08015108 <_write_r>:
 8015108:	b538      	push	{r3, r4, r5, lr}
 801510a:	4d07      	ldr	r5, [pc, #28]	; (8015128 <_write_r+0x20>)
 801510c:	4604      	mov	r4, r0
 801510e:	4608      	mov	r0, r1
 8015110:	4611      	mov	r1, r2
 8015112:	2200      	movs	r2, #0
 8015114:	602a      	str	r2, [r5, #0]
 8015116:	461a      	mov	r2, r3
 8015118:	f7ee f8d1 	bl	80032be <_write>
 801511c:	1c43      	adds	r3, r0, #1
 801511e:	d102      	bne.n	8015126 <_write_r+0x1e>
 8015120:	682b      	ldr	r3, [r5, #0]
 8015122:	b103      	cbz	r3, 8015126 <_write_r+0x1e>
 8015124:	6023      	str	r3, [r4, #0]
 8015126:	bd38      	pop	{r3, r4, r5, pc}
 8015128:	24005598 	.word	0x24005598

0801512c <_close_r>:
 801512c:	b538      	push	{r3, r4, r5, lr}
 801512e:	4d06      	ldr	r5, [pc, #24]	; (8015148 <_close_r+0x1c>)
 8015130:	2300      	movs	r3, #0
 8015132:	4604      	mov	r4, r0
 8015134:	4608      	mov	r0, r1
 8015136:	602b      	str	r3, [r5, #0]
 8015138:	f7ee f8dd 	bl	80032f6 <_close>
 801513c:	1c43      	adds	r3, r0, #1
 801513e:	d102      	bne.n	8015146 <_close_r+0x1a>
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	b103      	cbz	r3, 8015146 <_close_r+0x1a>
 8015144:	6023      	str	r3, [r4, #0]
 8015146:	bd38      	pop	{r3, r4, r5, pc}
 8015148:	24005598 	.word	0x24005598

0801514c <_fstat_r>:
 801514c:	b538      	push	{r3, r4, r5, lr}
 801514e:	4d07      	ldr	r5, [pc, #28]	; (801516c <_fstat_r+0x20>)
 8015150:	2300      	movs	r3, #0
 8015152:	4604      	mov	r4, r0
 8015154:	4608      	mov	r0, r1
 8015156:	4611      	mov	r1, r2
 8015158:	602b      	str	r3, [r5, #0]
 801515a:	f7ee f8d8 	bl	800330e <_fstat>
 801515e:	1c43      	adds	r3, r0, #1
 8015160:	d102      	bne.n	8015168 <_fstat_r+0x1c>
 8015162:	682b      	ldr	r3, [r5, #0]
 8015164:	b103      	cbz	r3, 8015168 <_fstat_r+0x1c>
 8015166:	6023      	str	r3, [r4, #0]
 8015168:	bd38      	pop	{r3, r4, r5, pc}
 801516a:	bf00      	nop
 801516c:	24005598 	.word	0x24005598

08015170 <_isatty_r>:
 8015170:	b538      	push	{r3, r4, r5, lr}
 8015172:	4d06      	ldr	r5, [pc, #24]	; (801518c <_isatty_r+0x1c>)
 8015174:	2300      	movs	r3, #0
 8015176:	4604      	mov	r4, r0
 8015178:	4608      	mov	r0, r1
 801517a:	602b      	str	r3, [r5, #0]
 801517c:	f7ee f8d7 	bl	800332e <_isatty>
 8015180:	1c43      	adds	r3, r0, #1
 8015182:	d102      	bne.n	801518a <_isatty_r+0x1a>
 8015184:	682b      	ldr	r3, [r5, #0]
 8015186:	b103      	cbz	r3, 801518a <_isatty_r+0x1a>
 8015188:	6023      	str	r3, [r4, #0]
 801518a:	bd38      	pop	{r3, r4, r5, pc}
 801518c:	24005598 	.word	0x24005598

08015190 <_lseek_r>:
 8015190:	b538      	push	{r3, r4, r5, lr}
 8015192:	4d07      	ldr	r5, [pc, #28]	; (80151b0 <_lseek_r+0x20>)
 8015194:	4604      	mov	r4, r0
 8015196:	4608      	mov	r0, r1
 8015198:	4611      	mov	r1, r2
 801519a:	2200      	movs	r2, #0
 801519c:	602a      	str	r2, [r5, #0]
 801519e:	461a      	mov	r2, r3
 80151a0:	f7ee f8d0 	bl	8003344 <_lseek>
 80151a4:	1c43      	adds	r3, r0, #1
 80151a6:	d102      	bne.n	80151ae <_lseek_r+0x1e>
 80151a8:	682b      	ldr	r3, [r5, #0]
 80151aa:	b103      	cbz	r3, 80151ae <_lseek_r+0x1e>
 80151ac:	6023      	str	r3, [r4, #0]
 80151ae:	bd38      	pop	{r3, r4, r5, pc}
 80151b0:	24005598 	.word	0x24005598

080151b4 <_read_r>:
 80151b4:	b538      	push	{r3, r4, r5, lr}
 80151b6:	4d07      	ldr	r5, [pc, #28]	; (80151d4 <_read_r+0x20>)
 80151b8:	4604      	mov	r4, r0
 80151ba:	4608      	mov	r0, r1
 80151bc:	4611      	mov	r1, r2
 80151be:	2200      	movs	r2, #0
 80151c0:	602a      	str	r2, [r5, #0]
 80151c2:	461a      	mov	r2, r3
 80151c4:	f7ee f85e 	bl	8003284 <_read>
 80151c8:	1c43      	adds	r3, r0, #1
 80151ca:	d102      	bne.n	80151d2 <_read_r+0x1e>
 80151cc:	682b      	ldr	r3, [r5, #0]
 80151ce:	b103      	cbz	r3, 80151d2 <_read_r+0x1e>
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	bd38      	pop	{r3, r4, r5, pc}
 80151d4:	24005598 	.word	0x24005598

080151d8 <_init>:
 80151d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151da:	bf00      	nop
 80151dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151de:	bc08      	pop	{r3}
 80151e0:	469e      	mov	lr, r3
 80151e2:	4770      	bx	lr

080151e4 <_fini>:
 80151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e6:	bf00      	nop
 80151e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151ea:	bc08      	pop	{r3}
 80151ec:	469e      	mov	lr, r3
 80151ee:	4770      	bx	lr
