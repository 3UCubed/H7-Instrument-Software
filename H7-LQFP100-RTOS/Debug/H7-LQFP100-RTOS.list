
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aeb0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801b150  0801b150  0002b150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b5e8  0801b5e8  0002b5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b5f0  0801b5f0  0002b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b5f4  0801b5f4  0002b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801b5f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b730  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b730  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041135  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d76  00000000  00000000  0007129b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  00079018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002878  00000000  00000000  0007bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004334c  00000000  00000000  000c4ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196b6e  00000000  00000000  00107ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029eb5f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd08  00000000  00000000  0029ebb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b138 	.word	0x0801b138

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801b138 	.word	0x0801b138

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fec9 	bl	8006400 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa14 	bl	8003aa0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 ffe4 	bl	8007650 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fa07 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 f927 	bl	8006908 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f9ee 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 f919 	bl	8006908 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f9e0 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 f90b 	bl	8006908 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f9d2 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 f8fd 	bl	8006908 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f9c4 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 f8ee 	bl	8006908 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f9b5 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 f8df 	bl	8006908 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f9a6 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 f8d0 	bl	8006908 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f997 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 f8c1 	bl	8006908 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f988 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 f8b2 	bl	8006908 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f979 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 f8a3 	bl	8006908 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f96a 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 f894 	bl	8006908 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f95b 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fdb1 	bl	8006400 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f8fc 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 f81c 	bl	8006908 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f8e3 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f006 f80e 	bl	8006908 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f8d5 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f006 f800 	bl	8006908 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f8c7 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fff2 	bl	8006908 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f8b9 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fd1c 	bl	800b438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fd10 	bl	800b438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fd04 	bl	800b438 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fbaf 	bl	80081d8 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f80e 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 fa6a 	bl	8005fb8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 fa64 	bl	8005fb8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 fb4f 	bl	80081d8 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ffae 	bl	8003aa0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fdcd 	bl	801a72c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 ff17 	bl	80079cc <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff7c 	bl	8003aa0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 f932 	bl	8007e2c <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff67 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fbef 	bl	800b438 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 fa9a 	bl	80081d8 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fef9 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fe5c 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fe73 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fe33 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fe4a 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fe2b 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fe42 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fe23 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fe3a 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fe1b 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fe32 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fe13 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fe2a 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fe0b 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fe22 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fe03 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fe1a 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fdfb 	bl	800797c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fe12 	bl	80079b0 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fcae 	bl	801a72c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a f972 	bl	800b154 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a f917 	bl	800b154 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 ff64 	bl	800ae84 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 feb8 	bl	800ae84 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 ffc4 	bl	800b154 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 ff61 	bl	800b154 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fdae 	bl	800ae84 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fe8c 	bl	800b154 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fc97 	bl	800ae84 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fda4 	bl	800b154 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 ff9a 	bl	801a72c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fc7f 	bl	800b154 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 facd 	bl	800ae84 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fbe1 	bl	800b154 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fe35 	bl	801a72c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fe2c 	bl	801a72c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 f999 	bl	800ae84 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 f986 	bl	800ae84 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fd77 	bl	801a72c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fd70 	bl	801a72c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 f8df 	bl	800ae84 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 f8f7 	bl	800afa8 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f99f 	bl	800b154 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 ffeb 	bl	800ae84 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]
#ifdef ERROR_HANDLING_ENABLED
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <handle_error+0x54>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f015 fa16 	bl	801739c <osEventFlagsSet>
	increment_error_counter(error);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f84f 	bl	8002014 <increment_error_counter>
	set_previous_error(error);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8b0 	bl	80020dc <set_previous_error>
	send_current_error_packet(error);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fa59 	bl	8002434 <send_current_error_packet>
	send_junk_packet();
 8001f82:	f000 fa71 	bl	8002468 <send_junk_packet>

	switch (error.category) {
 8001f86:	793b      	ldrb	r3, [r7, #4]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d008      	beq.n	8001f9e <handle_error+0x42>
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	dc08      	bgt.n	8001fa2 <handle_error+0x46>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <handle_error+0x3e>
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d006      	beq.n	8001fa6 <handle_error+0x4a>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001f98:	e003      	b.n	8001fa2 <handle_error+0x46>
		NVIC_SystemReset();
 8001f9a:	f7ff ffc9 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001f9e:	f7ff ffc7 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001fa2:	bf00      	nop
 8001fa4:	e000      	b.n	8001fa8 <handle_error+0x4c>
		break;
 8001fa6:	bf00      	nop
	}
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	24001a98 	.word	0x24001a98

08001fb4 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fba:	f008 fff5 	bl	800afa8 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fbe:	f7fe feeb 	bl	8000d98 <EE_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <error_counter_init+0x18>
		Error_Handler();
 8001fc8:	f001 fd6a 	bl	8003aa0 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	e013      	b.n	8001ffa <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <error_counter_init+0x58>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <error_counter_init+0x5c>)
 8001fe0:	440b      	add	r3, r1
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7ff fb8f 	bl	8001708 <EE_ReadVariable>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <error_counter_init+0x40>
			Error_Handler();
 8001ff0:	f001 fd56 	bl	8003aa0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b1a      	cmp	r3, #26
 8001ffe:	dde8      	ble.n	8001fd2 <error_counter_init+0x1e>
		}
	}
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	24000000 	.word	0x24000000
 8002010:	240003a4 	.word	0x240003a4

08002014 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 800201c:	793b      	ldrb	r3, [r7, #4]
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <increment_error_counter+0x38>)
 8002020:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002024:	3201      	adds	r2, #1
 8002026:	b291      	uxth	r1, r2
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <increment_error_counter+0x38>)
 800202a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800202e:	797b      	ldrb	r3, [r7, #5]
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <increment_error_counter+0x38>)
 8002032:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002036:	3201      	adds	r2, #1
 8002038:	b291      	uxth	r1, r2
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <increment_error_counter+0x38>)
 800203c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8002040:	f000 f806 	bl	8002050 <update_error_counter>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	240003a4 	.word	0x240003a4

08002050 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e013      	b.n	8002084 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <update_error_counter+0x44>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <update_error_counter+0x48>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f7ff fb92 	bl	8001798 <EE_WriteVariable>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <update_error_counter+0x2e>
			Error_Handler();
 800207a:	f001 fd11 	bl	8003aa0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3301      	adds	r3, #1
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b1a      	cmp	r3, #26
 8002088:	dde8      	ble.n	800205c <update_error_counter+0xc>
		}
	}
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	24000000 	.word	0x24000000
 8002098:	240003a4 	.word	0x240003a4

0800209c <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e00f      	b.n	80020c8 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <reset_error_counters+0x3c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb70 	bl	8001798 <EE_WriteVariable>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <reset_error_counters+0x26>
			Error_Handler();
 80020be:	f001 fcef 	bl	8003aa0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3301      	adds	r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b1a      	cmp	r3, #26
 80020cc:	ddec      	ble.n	80020a8 <reset_error_counters+0xc>
		}
	}
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	24000000 	.word	0x24000000

080020dc <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <set_previous_error+0x44>)
 80020e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e8:	793a      	ldrb	r2, [r7, #4]
 80020ea:	b292      	uxth	r2, r2
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fb52 	bl	8001798 <EE_WriteVariable>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <set_previous_error+0x22>
		Error_Handler();
 80020fa:	f001 fcd1 	bl	8003aa0 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <set_previous_error+0x44>)
 8002100:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002102:	797a      	ldrb	r2, [r7, #5]
 8002104:	b292      	uxth	r2, r2
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fb45 	bl	8001798 <EE_WriteVariable>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <set_previous_error+0x3c>
		Error_Handler();
 8002114:	f001 fcc4 	bl	8003aa0 <Error_Handler>
	}
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	24000000 	.word	0x24000000

08002124 <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <get_previous_error+0x5c>)
 800212c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212e:	1dba      	adds	r2, r7, #6
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fae8 	bl	8001708 <EE_ReadVariable>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <get_previous_error+0x1e>
		Error_Handler();
 800213e:	f001 fcaf 	bl	8003aa0 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <get_previous_error+0x5c>)
 8002144:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002146:	1d3a      	adds	r2, r7, #4
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fadc 	bl	8001708 <EE_ReadVariable>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <get_previous_error+0x36>
		Error_Handler();
 8002156:	f001 fca3 	bl	8003aa0 <Error_Handler>
	}

	prev_error.category = category;
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	727b      	strb	r3, [r7, #9]

	return prev_error;
 8002166:	893b      	ldrh	r3, [r7, #8]
 8002168:	81bb      	strh	r3, [r7, #12]
 800216a:	2300      	movs	r3, #0
 800216c:	7b3a      	ldrb	r2, [r7, #12]
 800216e:	f362 0307 	bfi	r3, r2, #0, #8
 8002172:	7b7a      	ldrb	r2, [r7, #13]
 8002174:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24000000 	.word	0x24000000

08002184 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 800218a:	23cc      	movs	r3, #204	; 0xcc
 800218c:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 800218e:	23cc      	movs	r3, #204	; 0xcc
 8002190:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 8002192:	4b98      	ldr	r3, [pc, #608]	; (80023f4 <send_error_counter_packet+0x270>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b29b      	uxth	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 800219e:	4b95      	ldr	r3, [pc, #596]	; (80023f4 <send_error_counter_packet+0x270>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80021a6:	4b93      	ldr	r3, [pc, #588]	; (80023f4 <send_error_counter_packet+0x270>)
 80021a8:	885b      	ldrh	r3, [r3, #2]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80021b2:	4b90      	ldr	r3, [pc, #576]	; (80023f4 <send_error_counter_packet+0x270>)
 80021b4:	885b      	ldrh	r3, [r3, #2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80021ba:	4b8e      	ldr	r3, [pc, #568]	; (80023f4 <send_error_counter_packet+0x270>)
 80021bc:	889b      	ldrh	r3, [r3, #4]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <send_error_counter_packet+0x270>)
 80021c8:	889b      	ldrh	r3, [r3, #4]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <send_error_counter_packet+0x270>)
 80021d0:	88db      	ldrh	r3, [r3, #6]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80021da:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <send_error_counter_packet+0x270>)
 80021dc:	88db      	ldrh	r3, [r3, #6]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80021e2:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <send_error_counter_packet+0x270>)
 80021e4:	891b      	ldrh	r3, [r3, #8]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80021ee:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <send_error_counter_packet+0x270>)
 80021f0:	891b      	ldrh	r3, [r3, #8]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <send_error_counter_packet+0x270>)
 80021f8:	895b      	ldrh	r3, [r3, #10]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <send_error_counter_packet+0x270>)
 8002204:	895b      	ldrh	r3, [r3, #10]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 800220a:	4b7a      	ldr	r3, [pc, #488]	; (80023f4 <send_error_counter_packet+0x270>)
 800220c:	899b      	ldrh	r3, [r3, #12]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002216:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <send_error_counter_packet+0x270>)
 8002218:	899b      	ldrh	r3, [r3, #12]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800221e:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <send_error_counter_packet+0x270>)
 8002220:	89db      	ldrh	r3, [r3, #14]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <send_error_counter_packet+0x270>)
 800222c:	89db      	ldrh	r3, [r3, #14]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <send_error_counter_packet+0x270>)
 8002234:	8a1b      	ldrh	r3, [r3, #16]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b29b      	uxth	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <send_error_counter_packet+0x270>)
 8002240:	8a1b      	ldrh	r3, [r3, #16]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002246:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <send_error_counter_packet+0x270>)
 8002248:	8a5b      	ldrh	r3, [r3, #18]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 8002252:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <send_error_counter_packet+0x270>)
 8002254:	8a5b      	ldrh	r3, [r3, #18]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 800225a:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <send_error_counter_packet+0x270>)
 800225c:	8a9b      	ldrh	r3, [r3, #20]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <send_error_counter_packet+0x270>)
 8002268:	8a9b      	ldrh	r3, [r3, #20]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <send_error_counter_packet+0x270>)
 8002270:	8adb      	ldrh	r3, [r3, #22]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <send_error_counter_packet+0x270>)
 800227c:	8adb      	ldrh	r3, [r3, #22]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <send_error_counter_packet+0x270>)
 8002284:	8b1b      	ldrh	r3, [r3, #24]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <send_error_counter_packet+0x270>)
 8002290:	8b1b      	ldrh	r3, [r3, #24]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <send_error_counter_packet+0x270>)
 8002298:	8b5b      	ldrh	r3, [r3, #26]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <send_error_counter_packet+0x270>)
 80022a4:	8b5b      	ldrh	r3, [r3, #26]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80022aa:	4b52      	ldr	r3, [pc, #328]	; (80023f4 <send_error_counter_packet+0x270>)
 80022ac:	8b9b      	ldrh	r3, [r3, #28]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80022b6:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <send_error_counter_packet+0x270>)
 80022b8:	8b9b      	ldrh	r3, [r3, #28]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <send_error_counter_packet+0x270>)
 80022c0:	8bdb      	ldrh	r3, [r3, #30]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80022cc:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <send_error_counter_packet+0x270>)
 80022ce:	8bdb      	ldrh	r3, [r3, #30]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <send_error_counter_packet+0x270>)
 80022d8:	8c1b      	ldrh	r3, [r3, #32]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <send_error_counter_packet+0x270>)
 80022e6:	8c1b      	ldrh	r3, [r3, #32]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <send_error_counter_packet+0x270>)
 80022f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 80022fc:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <send_error_counter_packet+0x270>)
 80022fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <send_error_counter_packet+0x270>)
 8002308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b29b      	uxth	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002314:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <send_error_counter_packet+0x270>)
 8002316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800231e:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <send_error_counter_packet+0x270>)
 8002320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <send_error_counter_packet+0x270>)
 800232e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <send_error_counter_packet+0x270>)
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <send_error_counter_packet+0x270>)
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <send_error_counter_packet+0x270>)
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <send_error_counter_packet+0x270>)
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <send_error_counter_packet+0x270>)
 8002368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b29b      	uxth	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <send_error_counter_packet+0x270>)
 8002376:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <send_error_counter_packet+0x270>)
 8002380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <send_error_counter_packet+0x270>)
 800238e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <send_error_counter_packet+0x270>)
 8002398:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <send_error_counter_packet+0x270>)
 80023a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <send_error_counter_packet+0x270>)
 80023b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <send_error_counter_packet+0x270>)
 80023be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <send_error_counter_packet+0x270>)
 80023c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <send_error_counter_packet+0x270>)
 80023d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 80023de:	4639      	mov	r1, r7
 80023e0:	2364      	movs	r3, #100	; 0x64
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <send_error_counter_packet+0x274>)
 80023e6:	f012 f833 	bl	8014450 <HAL_UART_Transmit>
}
 80023ea:	bf00      	nop
 80023ec:	3738      	adds	r7, #56	; 0x38
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	240003a4 	.word	0x240003a4
 80023f8:	24001e3c 	.word	0x24001e3c

080023fc <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 8002402:	f7ff fe8f 	bl	8002124 <get_previous_error>
 8002406:	4603      	mov	r3, r0
 8002408:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 800240a:	23aa      	movs	r3, #170	; 0xaa
 800240c:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 800240e:	23aa      	movs	r3, #170	; 0xaa
 8002410:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 8002412:	793b      	ldrb	r3, [r7, #4]
 8002414:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 8002416:	797b      	ldrb	r3, [r7, #5]
 8002418:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800241a:	4639      	mov	r1, r7
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	2204      	movs	r2, #4
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <send_previous_error_packet+0x34>)
 8002422:	f012 f815 	bl	8014450 <HAL_UART_Transmit>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24001e3c 	.word	0x24001e3c

08002434 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 800243c:	23bb      	movs	r3, #187	; 0xbb
 800243e:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002440:	23bb      	movs	r3, #187	; 0xbb
 8002442:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002444:	793b      	ldrb	r3, [r7, #4]
 8002446:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002448:	797b      	ldrb	r3, [r7, #5]
 800244a:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800244c:	f107 010c 	add.w	r1, r7, #12
 8002450:	2364      	movs	r3, #100	; 0x64
 8002452:	2204      	movs	r2, #4
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <send_current_error_packet+0x30>)
 8002456:	f011 fffb 	bl	8014450 <HAL_UART_Transmit>
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	24001e3c 	.word	0x24001e3c

08002468 <send_junk_packet>:
/**
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet() {	// TODO: Figure out if we still need this.
 8002468:	b580      	push	{r7, lr}
 800246a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800246e:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002476:	e00d      	b.n	8002494 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 8002478:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800247c:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8002480:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002484:	4413      	add	r3, r2
 8002486:	22ce      	movs	r2, #206	; 0xce
 8002488:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 800248a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002494:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	dbec      	blt.n	8002478 <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 800249e:	1d39      	adds	r1, r7, #4
 80024a0:	2364      	movs	r3, #100	; 0x64
 80024a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a6:	4804      	ldr	r0, [pc, #16]	; (80024b8 <send_junk_packet+0x50>)
 80024a8:	f011 ffd2 	bl	8014450 <HAL_UART_Transmit>
}
 80024ac:	bf00      	nop
 80024ae:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	24001e3c 	.word	0x24001e3c

080024bc <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <vApplicationTickHook+0x18>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <vApplicationTickHook+0x18>)
 80024c8:	6013      	str	r3, [r2, #0]
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	24001ae0 	.word	0x24001ae0

080024d8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80024f4:	4a24      	ldr	r2, [pc, #144]	; (8002588 <MX_FREERTOS_Init+0x98>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	4824      	ldr	r0, [pc, #144]	; (800258c <MX_FREERTOS_Init+0x9c>)
 80024fa:	f014 fe01 	bl	8017100 <osThreadNew>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <MX_FREERTOS_Init+0xa0>)
 8002502:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <MX_FREERTOS_Init+0xa4>)
 8002506:	2100      	movs	r1, #0
 8002508:	4823      	ldr	r0, [pc, #140]	; (8002598 <MX_FREERTOS_Init+0xa8>)
 800250a:	f014 fdf9 	bl	8017100 <osThreadNew>
 800250e:	4603      	mov	r3, r0
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <MX_FREERTOS_Init+0xac>)
 8002512:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <MX_FREERTOS_Init+0xb0>)
 8002516:	2100      	movs	r1, #0
 8002518:	4822      	ldr	r0, [pc, #136]	; (80025a4 <MX_FREERTOS_Init+0xb4>)
 800251a:	f014 fdf1 	bl	8017100 <osThreadNew>
 800251e:	4603      	mov	r3, r0
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <MX_FREERTOS_Init+0xb8>)
 8002522:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002524:	4a21      	ldr	r2, [pc, #132]	; (80025ac <MX_FREERTOS_Init+0xbc>)
 8002526:	2100      	movs	r1, #0
 8002528:	4821      	ldr	r0, [pc, #132]	; (80025b0 <MX_FREERTOS_Init+0xc0>)
 800252a:	f014 fde9 	bl	8017100 <osThreadNew>
 800252e:	4603      	mov	r3, r0
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <MX_FREERTOS_Init+0xc4>)
 8002532:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <MX_FREERTOS_Init+0xc8>)
 8002536:	2100      	movs	r1, #0
 8002538:	4820      	ldr	r0, [pc, #128]	; (80025bc <MX_FREERTOS_Init+0xcc>)
 800253a:	f014 fde1 	bl	8017100 <osThreadNew>
 800253e:	4603      	mov	r3, r0
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <MX_FREERTOS_Init+0xd0>)
 8002542:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <MX_FREERTOS_Init+0xd4>)
 8002546:	2100      	movs	r1, #0
 8002548:	481f      	ldr	r0, [pc, #124]	; (80025c8 <MX_FREERTOS_Init+0xd8>)
 800254a:	f014 fdd9 	bl	8017100 <osThreadNew>
 800254e:	4603      	mov	r3, r0
 8002550:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <MX_FREERTOS_Init+0xdc>)
 8002552:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <MX_FREERTOS_Init+0xe0>)
 8002556:	2100      	movs	r1, #0
 8002558:	481e      	ldr	r0, [pc, #120]	; (80025d4 <MX_FREERTOS_Init+0xe4>)
 800255a:	f014 fdd1 	bl	8017100 <osThreadNew>
 800255e:	4603      	mov	r3, r0
 8002560:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <MX_FREERTOS_Init+0xe8>)
 8002562:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <MX_FREERTOS_Init+0xec>)
 8002566:	2100      	movs	r1, #0
 8002568:	481d      	ldr	r0, [pc, #116]	; (80025e0 <MX_FREERTOS_Init+0xf0>)
 800256a:	f014 fdc9 	bl	8017100 <osThreadNew>
 800256e:	4603      	mov	r3, r0
 8002570:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <MX_FREERTOS_Init+0xf4>)
 8002572:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <MX_FREERTOS_Init+0xf8>)
 8002576:	2100      	movs	r1, #0
 8002578:	481c      	ldr	r0, [pc, #112]	; (80025ec <MX_FREERTOS_Init+0xfc>)
 800257a:	f014 fdc1 	bl	8017100 <osThreadNew>
 800257e:	4603      	mov	r3, r0
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <MX_FREERTOS_Init+0x100>)
 8002582:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	0801b3b8 	.word	0x0801b3b8
 800258c:	080025f5 	.word	0x080025f5
 8002590:	240003dc 	.word	0x240003dc
 8002594:	0801b3dc 	.word	0x0801b3dc
 8002598:	0800261d 	.word	0x0800261d
 800259c:	2400063c 	.word	0x2400063c
 80025a0:	0801b400 	.word	0x0801b400
 80025a4:	08002645 	.word	0x08002645
 80025a8:	2400089c 	.word	0x2400089c
 80025ac:	0801b424 	.word	0x0801b424
 80025b0:	0800266d 	.word	0x0800266d
 80025b4:	24000afc 	.word	0x24000afc
 80025b8:	0801b448 	.word	0x0801b448
 80025bc:	080026e5 	.word	0x080026e5
 80025c0:	24000d5c 	.word	0x24000d5c
 80025c4:	0801b46c 	.word	0x0801b46c
 80025c8:	0800275d 	.word	0x0800275d
 80025cc:	24000fbc 	.word	0x24000fbc
 80025d0:	0801b490 	.word	0x0801b490
 80025d4:	0800278d 	.word	0x0800278d
 80025d8:	2400121c 	.word	0x2400121c
 80025dc:	0801b4b4 	.word	0x0801b4b4
 80025e0:	080027bd 	.word	0x080027bd
 80025e4:	2400147c 	.word	0x2400147c
 80025e8:	0801b4d8 	.word	0x0801b4d8
 80025ec:	080028b5 	.word	0x080028b5
 80025f0:	240016dc 	.word	0x240016dc

080025f4 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <PMT_init+0x24>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002604:	2200      	movs	r2, #0
 8002606:	2101      	movs	r1, #1
 8002608:	f014 ff3e 	bl	8017488 <osEventFlagsWait>

		create_pmt_packet();
 800260c:	f001 fa56 	bl	8003abc <create_pmt_packet>

		osThreadYield();
 8002610:	f014 fe08 	bl	8017224 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002614:	e7f2      	b.n	80025fc <PMT_init+0x8>
 8002616:	bf00      	nop
 8002618:	24001a90 	.word	0x24001a90

0800261c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <ERPA_init+0x24>)
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262c:	2200      	movs	r2, #0
 800262e:	2102      	movs	r1, #2
 8002630:	f014 ff2a 	bl	8017488 <osEventFlagsWait>

		create_erpa_packet();
 8002634:	f001 fa88 	bl	8003b48 <create_erpa_packet>

		osThreadYield();
 8002638:	f014 fdf4 	bl	8017224 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800263c:	e7f2      	b.n	8002624 <ERPA_init+0x8>
 800263e:	bf00      	nop
 8002640:	24001a90 	.word	0x24001a90

08002644 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HK_init+0x24>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002654:	2200      	movs	r2, #0
 8002656:	2104      	movs	r1, #4
 8002658:	f014 ff16 	bl	8017488 <osEventFlagsWait>

		create_hk_packet();
 800265c:	f001 fad2 	bl	8003c04 <create_hk_packet>

		osThreadYield();
 8002660:	f014 fde0 	bl	8017224 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002664:	e7f2      	b.n	800264c <HK_init+0x8>
 8002666:	bf00      	nop
 8002668:	24001a90 	.word	0x24001a90

0800266c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <AUTOINIT_init+0x70>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267c:	2200      	movs	r2, #0
 800267e:	2104      	movs	r1, #4
 8002680:	f014 ff02 	bl	8017488 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e012      	b.n	80026b0 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <AUTOINIT_init+0x74>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002692:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <AUTOINIT_init+0x74>)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	889b      	ldrh	r3, [r3, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	4619      	mov	r1, r3
 80026a0:	f009 f892 	bl	800b7c8 <HAL_GPIO_WritePin>
			osDelay(100);
 80026a4:	2064      	movs	r0, #100	; 0x64
 80026a6:	f014 fe1f 	bl	80172e8 <osDelay>
		for (int i = 0; i < 7; i++) {
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3301      	adds	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	dde9      	ble.n	800268a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026b6:	2308      	movs	r3, #8
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	e008      	b.n	80026ce <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fa0e 	bl	8005ae4 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3301      	adds	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b0d      	cmp	r3, #13
 80026d2:	ddf3      	ble.n	80026bc <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80026d4:	f014 fda6 	bl	8017224 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026d8:	e7cc      	b.n	8002674 <AUTOINIT_init+0x8>
 80026da:	bf00      	nop
 80026dc:	24001a94 	.word	0x24001a94
 80026e0:	0801b4fc 	.word	0x0801b4fc

080026e4 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <AUTODEINIT_init+0x70>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f4:	2200      	movs	r2, #0
 80026f6:	2108      	movs	r1, #8
 80026f8:	f014 fec6 	bl	8017488 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80026fc:	230d      	movs	r3, #13
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e008      	b.n	8002714 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f003 f9eb 	bl	8005ae4 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3b01      	subs	r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b07      	cmp	r3, #7
 8002718:	dcf3      	bgt.n	8002702 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800271a:	2306      	movs	r3, #6
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	e012      	b.n	8002746 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <AUTODEINIT_init+0x74>)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <AUTODEINIT_init+0x74>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	889b      	ldrh	r3, [r3, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	4619      	mov	r1, r3
 8002736:	f009 f847 	bl	800b7c8 <HAL_GPIO_WritePin>
			osDelay(100);
 800273a:	2064      	movs	r0, #100	; 0x64
 800273c:	f014 fdd4 	bl	80172e8 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3b01      	subs	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	dae9      	bge.n	8002720 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 800274c:	f014 fd6a 	bl	8017224 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002750:	e7cc      	b.n	80026ec <AUTODEINIT_init+0x8>
 8002752:	bf00      	nop
 8002754:	24001a94 	.word	0x24001a94
 8002758:	0801b4fc 	.word	0x0801b4fc

0800275c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <Voltage_Monitor_init+0x28>)
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	f014 fe8a 	bl	8017488 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 8002774:	4804      	ldr	r0, [pc, #16]	; (8002788 <Voltage_Monitor_init+0x2c>)
 8002776:	f00b fba5 	bl	800dec4 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 800277a:	f003 f9d3 	bl	8005b24 <set_rail_monitor>
	  monitor_rails();
 800277e:	f003 fa57 	bl	8005c30 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002782:	e7ef      	b.n	8002764 <Voltage_Monitor_init+0x8>
 8002784:	24001a94 	.word	0x24001a94
 8002788:	24001a80 	.word	0x24001a80

0800278c <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <STOP_init+0x2c>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279c:	2200      	movs	r2, #0
 800279e:	2102      	movs	r1, #2
 80027a0:	f014 fe72 	bl	8017488 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <STOP_init+0x2c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f014 fe3a 	bl	8017424 <osEventFlagsClear>

	  enter_stop();
 80027b0:	f001 f958 	bl	8003a64 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80027b4:	e7ee      	b.n	8002794 <STOP_init+0x8>
 80027b6:	bf00      	nop
 80027b8:	24001a94 	.word	0x24001a94

080027bc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <Science_init+0xd0>)
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027cc:	2200      	movs	r2, #0
 80027ce:	2101      	movs	r1, #1
 80027d0:	f014 fe5a 	bl	8017488 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <Science_init+0xd4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f014 fd43 	bl	8017264 <osThreadSuspend>
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e012      	b.n	800280a <Science_init+0x4e>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <Science_init+0xd8>)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80027ec:	4a29      	ldr	r2, [pc, #164]	; (8002894 <Science_init+0xd8>)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	889b      	ldrh	r3, [r3, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4619      	mov	r1, r3
 80027fa:	f008 ffe5 	bl	800b7c8 <HAL_GPIO_WritePin>
			osDelay(200);
 80027fe:	20c8      	movs	r0, #200	; 0xc8
 8002800:	f014 fd72 	bl	80172e8 <osDelay>
		for (int i = 0; i < 9; i++) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b08      	cmp	r3, #8
 800280e:	dde9      	ble.n	80027e4 <Science_init+0x28>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 8002810:	2306      	movs	r3, #6
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	e008      	b.n	8002828 <Science_init+0x6c>
			set_rail_monitor_enable(i, 1);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f003 f961 	bl	8005ae4 <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b10      	cmp	r3, #16
 800282c:	ddf3      	ble.n	8002816 <Science_init+0x5a>
		}
		osThreadResume(Voltage_MonitorHandle);
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <Science_init+0xd4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f014 fd37 	bl	80172a6 <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2320      	movs	r3, #32
 8002842:	4a15      	ldr	r2, [pc, #84]	; (8002898 <Science_init+0xdc>)
 8002844:	2100      	movs	r1, #0
 8002846:	4815      	ldr	r0, [pc, #84]	; (800289c <Science_init+0xe0>)
 8002848:	f005 f93a 	bl	8007ac0 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <Science_init+0xe4>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <Science_init+0xe8>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <Science_init+0xec>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800285e:	f001 fb0f 	bl	8003e80 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <Science_init+0xf0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2104      	movs	r1, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f014 fd97 	bl	801739c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 800286e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002872:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002878:	2100      	movs	r1, #0
 800287a:	480d      	ldr	r0, [pc, #52]	; (80028b0 <Science_init+0xf4>)
 800287c:	f010 fa5e 	bl	8012d3c <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002880:	b662      	cpsie	i
}
 8002882:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002884:	f014 fcce 	bl	8017224 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002888:	e79c      	b.n	80027c4 <Science_init+0x8>
 800288a:	bf00      	nop
 800288c:	24001a98 	.word	0x24001a98
 8002890:	24000fbc 	.word	0x24000fbc
 8002894:	0801b4fc 	.word	0x0801b4fc
 8002898:	2400003c 	.word	0x2400003c
 800289c:	24000314 	.word	0x24000314
 80028a0:	24001adc 	.word	0x24001adc
 80028a4:	24001add 	.word	0x24001add
 80028a8:	24001ae0 	.word	0x24001ae0
 80028ac:	24001a90 	.word	0x24001a90
 80028b0:	24001da4 	.word	0x24001da4

080028b4 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <Idle_init+0xb0>)
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c4:	2200      	movs	r2, #0
 80028c6:	2102      	movs	r1, #2
 80028c8:	f014 fdde 	bl	8017488 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <Idle_init+0xb4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80028d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80028da:	2100      	movs	r1, #0
 80028dc:	4823      	ldr	r0, [pc, #140]	; (800296c <Idle_init+0xb8>)
 80028de:	f010 fb87 	bl	8012ff0 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <Idle_init+0xbc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80028e8:	2100      	movs	r1, #0
 80028ea:	4822      	ldr	r0, [pc, #136]	; (8002974 <Idle_init+0xc0>)
 80028ec:	f005 f9a8 	bl	8007c40 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 80028f0:	4b21      	ldr	r3, [pc, #132]	; (8002978 <Idle_init+0xc4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f014 fcb5 	bl	8017264 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 80028fa:	2310      	movs	r3, #16
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e008      	b.n	8002912 <Idle_init+0x5e>
			set_rail_monitor_enable(i, 0);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f003 f8ec 	bl	8005ae4 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3b01      	subs	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b05      	cmp	r3, #5
 8002916:	dcf3      	bgt.n	8002900 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002918:	2308      	movs	r3, #8
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	e012      	b.n	8002944 <Idle_init+0x90>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <Idle_init+0xc8>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <Idle_init+0xc8>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	4619      	mov	r1, r3
 8002934:	f008 ff48 	bl	800b7c8 <HAL_GPIO_WritePin>
			osDelay(200);
 8002938:	20c8      	movs	r0, #200	; 0xc8
 800293a:	f014 fcd5 	bl	80172e8 <osDelay>
		for (int i = 8; i >= 0; i--) {
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3b01      	subs	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	dae9      	bge.n	800291e <Idle_init+0x6a>
		}
		osDelay(3500);
 800294a:	f640 50ac 	movw	r0, #3500	; 0xdac
 800294e:	f014 fccb 	bl	80172e8 <osDelay>
		osThreadResume(Voltage_MonitorHandle);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <Idle_init+0xc4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f014 fca5 	bl	80172a6 <osThreadResume>

		// Yield thread control
		osThreadYield();
 800295c:	f014 fc62 	bl	8017224 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002960:	e7ac      	b.n	80028bc <Idle_init+0x8>
 8002962:	bf00      	nop
 8002964:	24001a98 	.word	0x24001a98
 8002968:	24001add 	.word	0x24001add
 800296c:	24001da4 	.word	0x24001da4
 8002970:	24001adc 	.word	0x24001adc
 8002974:	24000314 	.word	0x24000314
 8002978:	24000fbc 	.word	0x24000fbc
 800297c:	0801b4fc 	.word	0x0801b4fc

08002980 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <MX_GPIO_Init+0xe8>)
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299c:	4a32      	ldr	r2, [pc, #200]	; (8002a68 <MX_GPIO_Init+0xe8>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b4:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ba:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d8:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <MX_GPIO_Init+0xe8>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <MX_GPIO_Init+0xe8>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002a14:	4815      	ldr	r0, [pc, #84]	; (8002a6c <MX_GPIO_Init+0xec>)
 8002a16:	f008 fed7 	bl	800b7c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2164      	movs	r1, #100	; 0x64
 8002a1e:	4814      	ldr	r0, [pc, #80]	; (8002a70 <MX_GPIO_Init+0xf0>)
 8002a20:	f008 fed2 	bl	800b7c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a24:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002a28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <MX_GPIO_Init+0xec>)
 8002a3e:	f008 fcfb 	bl	800b438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002a42:	2364      	movs	r3, #100	; 0x64
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_GPIO_Init+0xf0>)
 8002a5a:	f008 fced 	bl	800b438 <HAL_GPIO_Init>

}
 8002a5e:	bf00      	nop
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	58020800 	.word	0x58020800
 8002a70:	58020400 	.word	0x58020400

08002a74 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <MX_I2C1_Init+0x78>)
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <MX_I2C1_Init+0x7c>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <MX_I2C1_Init+0x78>)
 8002a80:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <MX_I2C1_Init+0x80>)
 8002a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <MX_I2C1_Init+0x78>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <MX_I2C1_Init+0x78>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <MX_I2C1_Init+0x78>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <MX_I2C1_Init+0x78>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <MX_I2C1_Init+0x78>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <MX_I2C1_Init+0x78>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <MX_I2C1_Init+0x78>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aae:	480f      	ldr	r0, [pc, #60]	; (8002aec <MX_I2C1_Init+0x78>)
 8002ab0:	f008 fea4 	bl	800b7fc <HAL_I2C_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002aba:	f000 fff1 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002abe:	2100      	movs	r1, #0
 8002ac0:	480a      	ldr	r0, [pc, #40]	; (8002aec <MX_I2C1_Init+0x78>)
 8002ac2:	f00b f943 	bl	800dd4c <HAL_I2CEx_ConfigAnalogFilter>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002acc:	f000 ffe8 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <MX_I2C1_Init+0x78>)
 8002ad4:	f00b f985 	bl	800dde2 <HAL_I2CEx_ConfigDigitalFilter>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ade:	f000 ffdf 	bl	8003aa0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f00b f9ca 	bl	800de7c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	2400193c 	.word	0x2400193c
 8002af0:	40005400 	.word	0x40005400
 8002af4:	00100517 	.word	0x00100517

08002af8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0ba      	sub	sp, #232	; 0xe8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	22c0      	movs	r2, #192	; 0xc0
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f017 fe07 	bl	801a72c <memset>
  if(i2cHandle->Instance==I2C1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_I2C_MspInit+0x1a0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f040 80b3 	bne.w	8002c90 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b2a:	f04f 0208 	mov.w	r2, #8
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	4618      	mov	r0, r3
 8002b42:	f00c fa6d 	bl	800f020 <HAL_RCCEx_PeriphCLKConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b4c:	f000 ffa8 	bl	8003aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b50:	4b52      	ldr	r3, [pc, #328]	; (8002c9c <HAL_I2C_MspInit+0x1a4>)
 8002b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b56:	4a51      	ldr	r2, [pc, #324]	; (8002c9c <HAL_I2C_MspInit+0x1a4>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b60:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <HAL_I2C_MspInit+0x1a4>)
 8002b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b76:	2312      	movs	r3, #18
 8002b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b88:	2304      	movs	r3, #4
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4842      	ldr	r0, [pc, #264]	; (8002ca0 <HAL_I2C_MspInit+0x1a8>)
 8002b96:	f008 fc4f 	bl	800b438 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b9a:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <HAL_I2C_MspInit+0x1a4>)
 8002b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ba0:	4a3e      	ldr	r2, [pc, #248]	; (8002c9c <HAL_I2C_MspInit+0x1a4>)
 8002ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002baa:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <HAL_I2C_MspInit+0x1a4>)
 8002bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002bb8:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bba:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <HAL_I2C_MspInit+0x1b0>)
 8002bbc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bc0:	2222      	movs	r2, #34	; 0x22
 8002bc2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc4:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bc6:	2240      	movs	r2, #64	; 0x40
 8002bc8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002be4:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bf0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002bf8:	482a      	ldr	r0, [pc, #168]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002bfa:	f005 faed 	bl	80081d8 <HAL_DMA_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002c04:	f000 ff4c 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c0e:	4a25      	ldr	r2, [pc, #148]	; (8002ca4 <HAL_I2C_MspInit+0x1ac>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <HAL_I2C_MspInit+0x1b8>)
 8002c18:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c1c:	2221      	movs	r2, #33	; 0x21
 8002c1e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c32:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c4c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c54:	4815      	ldr	r0, [pc, #84]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c56:	f005 fabf 	bl	80081d8 <HAL_DMA_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002c60:	f000 ff1e 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a11      	ldr	r2, [pc, #68]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_I2C_MspInit+0x1b4>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2105      	movs	r1, #5
 8002c74:	201f      	movs	r0, #31
 8002c76:	f004 fe81 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c7a:	201f      	movs	r0, #31
 8002c7c:	f004 fe98 	bl	80079b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2105      	movs	r1, #5
 8002c84:	2020      	movs	r0, #32
 8002c86:	f004 fe79 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002c8a:	2020      	movs	r0, #32
 8002c8c:	f004 fe90 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c90:	bf00      	nop
 8002c92:	37e8      	adds	r7, #232	; 0xe8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	58020400 	.word	0x58020400
 8002ca4:	24001990 	.word	0x24001990
 8002ca8:	400200a0 	.word	0x400200a0
 8002cac:	24001a08 	.word	0x24001a08
 8002cb0:	400200b8 	.word	0x400200b8

08002cb4 <__NVIC_SystemReset>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002cb8:	f3bf 8f4f 	dsb	sy
}
 8002cbc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <__NVIC_SystemReset+0x24>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002cc6:	4904      	ldr	r1, [pc, #16]	; (8002cd8 <__NVIC_SystemReset+0x24>)
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <__NVIC_SystemReset+0x28>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cce:	f3bf 8f4f 	dsb	sy
}
 8002cd2:	bf00      	nop
    __NOP();
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <__NVIC_SystemReset+0x20>
 8002cd8:	e000ed00 	.word	0xe000ed00
 8002cdc:	05fa0004 	.word	0x05fa0004

08002ce0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d106      	bne.n	8002cfe <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f014 fb50 	bl	801739c <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002cfc:	e032      	b.n	8002d64 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12b      	bne.n	8002d5e <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002d06:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f014 fb40 	bl	801739c <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d113      	bne.n	8002d4e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f014 fb35 	bl	801739c <osEventFlagsSet>
			if (HK_ENABLED){
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2104      	movs	r1, #4
 8002d42:	4618      	mov	r0, r3
 8002d44:	f014 fb2a 	bl	801739c <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d5a:	701a      	strb	r2, [r3, #0]
}
 8002d5c:	e002      	b.n	8002d64 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002d5e:	480a      	ldr	r0, [pc, #40]	; (8002d88 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002d60:	f017 fd5a 	bl	801a818 <puts>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	24001da4 	.word	0x24001da4
 8002d70:	24001a90 	.word	0x24001a90
 8002d74:	24001df0 	.word	0x24001df0
 8002d78:	24001add 	.word	0x24001add
 8002d7c:	24001ae4 	.word	0x24001ae4
 8002d80:	24001a94 	.word	0x24001a94
 8002d84:	24001adc 	.word	0x24001adc
 8002d88:	0801b1c8 	.word	0x0801b1c8

08002d8c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002d94:	2201      	movs	r2, #1
 8002d96:	49f7      	ldr	r1, [pc, #988]	; (8003174 <HAL_UART_RxCpltCallback+0x3e8>)
 8002d98:	48f7      	ldr	r0, [pc, #988]	; (8003178 <HAL_UART_RxCpltCallback+0x3ec>)
 8002d9a:	f011 fcaf 	bl	80146fc <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002d9e:	4bf5      	ldr	r3, [pc, #980]	; (8003174 <HAL_UART_RxCpltCallback+0x3e8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2bef      	cmp	r3, #239	; 0xef
 8002da8:	f200 843e 	bhi.w	8003628 <HAL_UART_RxCpltCallback+0x89c>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_UART_RxCpltCallback+0x28>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08003191 	.word	0x08003191
 8002db8:	080031c1 	.word	0x080031c1
 8002dbc:	08003231 	.word	0x08003231
 8002dc0:	0800326b 	.word	0x0800326b
 8002dc4:	080032a3 	.word	0x080032a3
 8002dc8:	080032dd 	.word	0x080032dd
 8002dcc:	08003319 	.word	0x08003319
 8002dd0:	08003355 	.word	0x08003355
 8002dd4:	0800338f 	.word	0x0800338f
 8002dd8:	080033c3 	.word	0x080033c3
 8002ddc:	080033f7 	.word	0x080033f7
 8002de0:	08003429 	.word	0x08003429
 8002de4:	08003453 	.word	0x08003453
 8002de8:	0800352f 	.word	0x0800352f
 8002dec:	08003597 	.word	0x08003597
 8002df0:	080035bf 	.word	0x080035bf
 8002df4:	0800317d 	.word	0x0800317d
 8002df8:	080031a5 	.word	0x080031a5
 8002dfc:	08003213 	.word	0x08003213
 8002e00:	0800324f 	.word	0x0800324f
 8002e04:	08003287 	.word	0x08003287
 8002e08:	080032bf 	.word	0x080032bf
 8002e0c:	080032fb 	.word	0x080032fb
 8002e10:	08003337 	.word	0x08003337
 8002e14:	08003373 	.word	0x08003373
 8002e18:	080033ab 	.word	0x080033ab
 8002e1c:	080033d3 	.word	0x080033d3
 8002e20:	0800340d 	.word	0x0800340d
 8002e24:	08003439 	.word	0x08003439
 8002e28:	080034ed 	.word	0x080034ed
 8002e2c:	0800356f 	.word	0x0800356f
 8002e30:	08003629 	.word	0x08003629
 8002e34:	08003629 	.word	0x08003629
 8002e38:	08003629 	.word	0x08003629
 8002e3c:	08003629 	.word	0x08003629
 8002e40:	08003629 	.word	0x08003629
 8002e44:	08003629 	.word	0x08003629
 8002e48:	08003629 	.word	0x08003629
 8002e4c:	08003629 	.word	0x08003629
 8002e50:	08003629 	.word	0x08003629
 8002e54:	08003629 	.word	0x08003629
 8002e58:	08003629 	.word	0x08003629
 8002e5c:	08003629 	.word	0x08003629
 8002e60:	08003629 	.word	0x08003629
 8002e64:	08003629 	.word	0x08003629
 8002e68:	08003629 	.word	0x08003629
 8002e6c:	08003629 	.word	0x08003629
 8002e70:	08003629 	.word	0x08003629
 8002e74:	08003629 	.word	0x08003629
 8002e78:	08003629 	.word	0x08003629
 8002e7c:	08003629 	.word	0x08003629
 8002e80:	08003629 	.word	0x08003629
 8002e84:	08003629 	.word	0x08003629
 8002e88:	08003629 	.word	0x08003629
 8002e8c:	08003629 	.word	0x08003629
 8002e90:	08003629 	.word	0x08003629
 8002e94:	08003629 	.word	0x08003629
 8002e98:	08003629 	.word	0x08003629
 8002e9c:	08003629 	.word	0x08003629
 8002ea0:	08003629 	.word	0x08003629
 8002ea4:	08003629 	.word	0x08003629
 8002ea8:	08003629 	.word	0x08003629
 8002eac:	08003629 	.word	0x08003629
 8002eb0:	08003629 	.word	0x08003629
 8002eb4:	08003629 	.word	0x08003629
 8002eb8:	08003629 	.word	0x08003629
 8002ebc:	08003629 	.word	0x08003629
 8002ec0:	08003629 	.word	0x08003629
 8002ec4:	08003629 	.word	0x08003629
 8002ec8:	08003629 	.word	0x08003629
 8002ecc:	08003629 	.word	0x08003629
 8002ed0:	08003629 	.word	0x08003629
 8002ed4:	08003629 	.word	0x08003629
 8002ed8:	08003629 	.word	0x08003629
 8002edc:	08003629 	.word	0x08003629
 8002ee0:	08003629 	.word	0x08003629
 8002ee4:	08003629 	.word	0x08003629
 8002ee8:	08003629 	.word	0x08003629
 8002eec:	08003629 	.word	0x08003629
 8002ef0:	08003629 	.word	0x08003629
 8002ef4:	08003629 	.word	0x08003629
 8002ef8:	08003629 	.word	0x08003629
 8002efc:	08003629 	.word	0x08003629
 8002f00:	08003629 	.word	0x08003629
 8002f04:	08003629 	.word	0x08003629
 8002f08:	08003629 	.word	0x08003629
 8002f0c:	08003629 	.word	0x08003629
 8002f10:	08003629 	.word	0x08003629
 8002f14:	08003629 	.word	0x08003629
 8002f18:	08003629 	.word	0x08003629
 8002f1c:	08003629 	.word	0x08003629
 8002f20:	08003629 	.word	0x08003629
 8002f24:	08003629 	.word	0x08003629
 8002f28:	08003629 	.word	0x08003629
 8002f2c:	08003629 	.word	0x08003629
 8002f30:	08003629 	.word	0x08003629
 8002f34:	08003629 	.word	0x08003629
 8002f38:	08003629 	.word	0x08003629
 8002f3c:	08003629 	.word	0x08003629
 8002f40:	08003629 	.word	0x08003629
 8002f44:	08003629 	.word	0x08003629
 8002f48:	08003629 	.word	0x08003629
 8002f4c:	08003629 	.word	0x08003629
 8002f50:	08003629 	.word	0x08003629
 8002f54:	08003629 	.word	0x08003629
 8002f58:	08003629 	.word	0x08003629
 8002f5c:	08003629 	.word	0x08003629
 8002f60:	08003629 	.word	0x08003629
 8002f64:	08003629 	.word	0x08003629
 8002f68:	08003629 	.word	0x08003629
 8002f6c:	08003629 	.word	0x08003629
 8002f70:	08003629 	.word	0x08003629
 8002f74:	08003629 	.word	0x08003629
 8002f78:	08003629 	.word	0x08003629
 8002f7c:	08003629 	.word	0x08003629
 8002f80:	08003629 	.word	0x08003629
 8002f84:	08003629 	.word	0x08003629
 8002f88:	08003629 	.word	0x08003629
 8002f8c:	08003629 	.word	0x08003629
 8002f90:	08003629 	.word	0x08003629
 8002f94:	08003629 	.word	0x08003629
 8002f98:	08003629 	.word	0x08003629
 8002f9c:	08003629 	.word	0x08003629
 8002fa0:	08003629 	.word	0x08003629
 8002fa4:	08003629 	.word	0x08003629
 8002fa8:	08003629 	.word	0x08003629
 8002fac:	08003629 	.word	0x08003629
 8002fb0:	08003629 	.word	0x08003629
 8002fb4:	08003629 	.word	0x08003629
 8002fb8:	08003629 	.word	0x08003629
 8002fbc:	08003629 	.word	0x08003629
 8002fc0:	08003629 	.word	0x08003629
 8002fc4:	08003629 	.word	0x08003629
 8002fc8:	08003629 	.word	0x08003629
 8002fcc:	08003629 	.word	0x08003629
 8002fd0:	08003629 	.word	0x08003629
 8002fd4:	08003629 	.word	0x08003629
 8002fd8:	08003629 	.word	0x08003629
 8002fdc:	08003629 	.word	0x08003629
 8002fe0:	08003629 	.word	0x08003629
 8002fe4:	08003629 	.word	0x08003629
 8002fe8:	08003629 	.word	0x08003629
 8002fec:	08003629 	.word	0x08003629
 8002ff0:	08003629 	.word	0x08003629
 8002ff4:	08003629 	.word	0x08003629
 8002ff8:	08003629 	.word	0x08003629
 8002ffc:	08003629 	.word	0x08003629
 8003000:	08003629 	.word	0x08003629
 8003004:	08003629 	.word	0x08003629
 8003008:	08003629 	.word	0x08003629
 800300c:	08003629 	.word	0x08003629
 8003010:	08003629 	.word	0x08003629
 8003014:	08003629 	.word	0x08003629
 8003018:	08003629 	.word	0x08003629
 800301c:	08003629 	.word	0x08003629
 8003020:	08003629 	.word	0x08003629
 8003024:	08003629 	.word	0x08003629
 8003028:	08003629 	.word	0x08003629
 800302c:	08003629 	.word	0x08003629
 8003030:	08003629 	.word	0x08003629
 8003034:	08003629 	.word	0x08003629
 8003038:	08003629 	.word	0x08003629
 800303c:	08003629 	.word	0x08003629
 8003040:	08003629 	.word	0x08003629
 8003044:	08003629 	.word	0x08003629
 8003048:	08003629 	.word	0x08003629
 800304c:	08003629 	.word	0x08003629
 8003050:	08003629 	.word	0x08003629
 8003054:	08003629 	.word	0x08003629
 8003058:	08003629 	.word	0x08003629
 800305c:	08003629 	.word	0x08003629
 8003060:	08003629 	.word	0x08003629
 8003064:	08003629 	.word	0x08003629
 8003068:	08003629 	.word	0x08003629
 800306c:	08003629 	.word	0x08003629
 8003070:	080035fb 	.word	0x080035fb
 8003074:	08003629 	.word	0x08003629
 8003078:	08003629 	.word	0x08003629
 800307c:	08003629 	.word	0x08003629
 8003080:	08003629 	.word	0x08003629
 8003084:	08003629 	.word	0x08003629
 8003088:	08003629 	.word	0x08003629
 800308c:	08003629 	.word	0x08003629
 8003090:	08003629 	.word	0x08003629
 8003094:	08003629 	.word	0x08003629
 8003098:	08003629 	.word	0x08003629
 800309c:	08003629 	.word	0x08003629
 80030a0:	08003629 	.word	0x08003629
 80030a4:	08003629 	.word	0x08003629
 80030a8:	08003629 	.word	0x08003629
 80030ac:	08003629 	.word	0x08003629
 80030b0:	08003601 	.word	0x08003601
 80030b4:	08003629 	.word	0x08003629
 80030b8:	08003629 	.word	0x08003629
 80030bc:	08003629 	.word	0x08003629
 80030c0:	08003629 	.word	0x08003629
 80030c4:	08003629 	.word	0x08003629
 80030c8:	08003629 	.word	0x08003629
 80030cc:	08003629 	.word	0x08003629
 80030d0:	08003629 	.word	0x08003629
 80030d4:	08003629 	.word	0x08003629
 80030d8:	08003629 	.word	0x08003629
 80030dc:	08003629 	.word	0x08003629
 80030e0:	08003629 	.word	0x08003629
 80030e4:	08003629 	.word	0x08003629
 80030e8:	08003629 	.word	0x08003629
 80030ec:	08003629 	.word	0x08003629
 80030f0:	0800360f 	.word	0x0800360f
 80030f4:	080035e7 	.word	0x080035e7
 80030f8:	08003629 	.word	0x08003629
 80030fc:	08003629 	.word	0x08003629
 8003100:	08003629 	.word	0x08003629
 8003104:	08003629 	.word	0x08003629
 8003108:	08003629 	.word	0x08003629
 800310c:	08003629 	.word	0x08003629
 8003110:	08003629 	.word	0x08003629
 8003114:	08003629 	.word	0x08003629
 8003118:	08003629 	.word	0x08003629
 800311c:	08003629 	.word	0x08003629
 8003120:	08003629 	.word	0x08003629
 8003124:	08003629 	.word	0x08003629
 8003128:	08003629 	.word	0x08003629
 800312c:	08003629 	.word	0x08003629
 8003130:	0800361d 	.word	0x0800361d
 8003134:	080035d3 	.word	0x080035d3
 8003138:	08003629 	.word	0x08003629
 800313c:	08003629 	.word	0x08003629
 8003140:	08003629 	.word	0x08003629
 8003144:	08003629 	.word	0x08003629
 8003148:	08003629 	.word	0x08003629
 800314c:	08003629 	.word	0x08003629
 8003150:	08003629 	.word	0x08003629
 8003154:	08003629 	.word	0x08003629
 8003158:	08003629 	.word	0x08003629
 800315c:	08003629 	.word	0x08003629
 8003160:	08003629 	.word	0x08003629
 8003164:	08003629 	.word	0x08003629
 8003168:	08003629 	.word	0x08003629
 800316c:	08003629 	.word	0x08003629
 8003170:	08003623 	.word	0x08003623
 8003174:	24001a9c 	.word	0x24001a9c
 8003178:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 800317c:	48b8      	ldr	r0, [pc, #736]	; (8003460 <HAL_UART_RxCpltCallback+0x6d4>)
 800317e:	f017 fb4b 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003182:	4bb8      	ldr	r3, [pc, #736]	; (8003464 <HAL_UART_RxCpltCallback+0x6d8>)
 8003184:	2104      	movs	r1, #4
 8003186:	2201      	movs	r2, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f008 fb1d 	bl	800b7c8 <HAL_GPIO_WritePin>
		break;
 800318e:	e256      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8003190:	48b5      	ldr	r0, [pc, #724]	; (8003468 <HAL_UART_RxCpltCallback+0x6dc>)
 8003192:	f017 fb41 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8003196:	4bb3      	ldr	r3, [pc, #716]	; (8003464 <HAL_UART_RxCpltCallback+0x6d8>)
 8003198:	2104      	movs	r1, #4
 800319a:	2200      	movs	r2, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f008 fb13 	bl	800b7c8 <HAL_GPIO_WritePin>
		break;
 80031a2:	e24c      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80031a4:	48b1      	ldr	r0, [pc, #708]	; (800346c <HAL_UART_RxCpltCallback+0x6e0>)
 80031a6:	f017 fb37 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80031aa:	4bae      	ldr	r3, [pc, #696]	; (8003464 <HAL_UART_RxCpltCallback+0x6d8>)
 80031ac:	2120      	movs	r1, #32
 80031ae:	2201      	movs	r2, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f008 fb09 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80031b6:	2101      	movs	r1, #1
 80031b8:	2008      	movs	r0, #8
 80031ba:	f002 fc93 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 80031be:	e23e      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80031c0:	48ab      	ldr	r0, [pc, #684]	; (8003470 <HAL_UART_RxCpltCallback+0x6e4>)
 80031c2:	f017 fb29 	bl	801a818 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80031c6:	2308      	movs	r3, #8
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	e00f      	b.n	80031ec <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80031cc:	4aa9      	ldr	r2, [pc, #676]	; (8003474 <HAL_UART_RxCpltCallback+0x6e8>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80031d4:	4aa7      	ldr	r2, [pc, #668]	; (8003474 <HAL_UART_RxCpltCallback+0x6e8>)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	889b      	ldrh	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	4619      	mov	r1, r3
 80031e2:	f008 faf1 	bl	800b7c8 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	dcec      	bgt.n	80031cc <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80031f2:	2310      	movs	r3, #16
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e008      	b.n	800320a <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 fc70 	bl	8005ae4 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	3b01      	subs	r3, #1
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b07      	cmp	r3, #7
 800320e:	dcf3      	bgt.n	80031f8 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 8003210:	e215      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003212:	4899      	ldr	r0, [pc, #612]	; (8003478 <HAL_UART_RxCpltCallback+0x6ec>)
 8003214:	f017 fb00 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8003218:	4b98      	ldr	r3, [pc, #608]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 800321a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800321e:	2201      	movs	r2, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f008 fad1 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003226:	2101      	movs	r1, #1
 8003228:	2009      	movs	r0, #9
 800322a:	f002 fc5b 	bl	8005ae4 <set_rail_monitor_enable>

		break;
 800322e:	e206      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003230:	4893      	ldr	r0, [pc, #588]	; (8003480 <HAL_UART_RxCpltCallback+0x6f4>)
 8003232:	f017 faf1 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8003236:	4b91      	ldr	r3, [pc, #580]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 8003238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800323c:	2200      	movs	r2, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f008 fac2 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003244:	2100      	movs	r1, #0
 8003246:	2009      	movs	r0, #9
 8003248:	f002 fc4c 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 800324c:	e1f7      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800324e:	488d      	ldr	r0, [pc, #564]	; (8003484 <HAL_UART_RxCpltCallback+0x6f8>)
 8003250:	f017 fae2 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003254:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	2201      	movs	r2, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f008 fab4 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003260:	2101      	movs	r1, #1
 8003262:	200a      	movs	r0, #10
 8003264:	f002 fc3e 	bl	8005ae4 <set_rail_monitor_enable>

		break;
 8003268:	e1e9      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800326a:	4887      	ldr	r0, [pc, #540]	; (8003488 <HAL_UART_RxCpltCallback+0x6fc>)
 800326c:	f017 fad4 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003270:	4b82      	ldr	r3, [pc, #520]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	2200      	movs	r2, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f008 faa6 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 800327c:	2100      	movs	r1, #0
 800327e:	200a      	movs	r0, #10
 8003280:	f002 fc30 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 8003284:	e1db      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8003286:	4881      	ldr	r0, [pc, #516]	; (800348c <HAL_UART_RxCpltCallback+0x700>)
 8003288:	f017 fac6 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 800328c:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 800328e:	2140      	movs	r1, #64	; 0x40
 8003290:	2201      	movs	r2, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f008 fa98 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8003298:	2101      	movs	r1, #1
 800329a:	200b      	movs	r0, #11
 800329c:	f002 fc22 	bl	8005ae4 <set_rail_monitor_enable>

		break;
 80032a0:	e1cd      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80032a2:	487b      	ldr	r0, [pc, #492]	; (8003490 <HAL_UART_RxCpltCallback+0x704>)
 80032a4:	f017 fab8 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80032a8:	4b74      	ldr	r3, [pc, #464]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	2200      	movs	r2, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f008 fa8a 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80032b4:	2100      	movs	r1, #0
 80032b6:	200b      	movs	r0, #11
 80032b8:	f002 fc14 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 80032bc:	e1bf      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80032be:	4875      	ldr	r0, [pc, #468]	; (8003494 <HAL_UART_RxCpltCallback+0x708>)
 80032c0:	f017 faaa 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80032c4:	4b6d      	ldr	r3, [pc, #436]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 80032c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ca:	2201      	movs	r2, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f008 fa7b 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80032d2:	2101      	movs	r1, #1
 80032d4:	200c      	movs	r0, #12
 80032d6:	f002 fc05 	bl	8005ae4 <set_rail_monitor_enable>

		break;
 80032da:	e1b0      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80032dc:	486e      	ldr	r0, [pc, #440]	; (8003498 <HAL_UART_RxCpltCallback+0x70c>)
 80032de:	f017 fa9b 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80032e2:	4b66      	ldr	r3, [pc, #408]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 80032e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032e8:	2200      	movs	r2, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f008 fa6c 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80032f0:	2100      	movs	r1, #0
 80032f2:	200c      	movs	r0, #12
 80032f4:	f002 fbf6 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 80032f8:	e1a1      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80032fa:	4868      	ldr	r0, [pc, #416]	; (800349c <HAL_UART_RxCpltCallback+0x710>)
 80032fc:	f017 fa8c 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003300:	4b5e      	ldr	r3, [pc, #376]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 8003302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003306:	2201      	movs	r2, #1
 8003308:	4618      	mov	r0, r3
 800330a:	f008 fa5d 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800330e:	2101      	movs	r1, #1
 8003310:	200d      	movs	r0, #13
 8003312:	f002 fbe7 	bl	8005ae4 <set_rail_monitor_enable>

		break;
 8003316:	e192      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8003318:	4861      	ldr	r0, [pc, #388]	; (80034a0 <HAL_UART_RxCpltCallback+0x714>)
 800331a:	f017 fa7d 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800331e:	4b57      	ldr	r3, [pc, #348]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 8003320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003324:	2200      	movs	r2, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f008 fa4e 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800332c:	2100      	movs	r1, #0
 800332e:	200d      	movs	r0, #13
 8003330:	f002 fbd8 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 8003334:	e183      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8003336:	485b      	ldr	r0, [pc, #364]	; (80034a4 <HAL_UART_RxCpltCallback+0x718>)
 8003338:	f017 fa6e 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800333c:	4b4f      	ldr	r3, [pc, #316]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 800333e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003342:	2201      	movs	r2, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f008 fa3f 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800334a:	2101      	movs	r1, #1
 800334c:	200f      	movs	r0, #15
 800334e:	f002 fbc9 	bl	8005ae4 <set_rail_monitor_enable>

		break;
 8003352:	e174      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003354:	4854      	ldr	r0, [pc, #336]	; (80034a8 <HAL_UART_RxCpltCallback+0x71c>)
 8003356:	f017 fa5f 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800335a:	4b48      	ldr	r3, [pc, #288]	; (800347c <HAL_UART_RxCpltCallback+0x6f0>)
 800335c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003360:	2200      	movs	r2, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f008 fa30 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003368:	2100      	movs	r1, #0
 800336a:	200f      	movs	r0, #15
 800336c:	f002 fbba 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 8003370:	e165      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003372:	484e      	ldr	r0, [pc, #312]	; (80034ac <HAL_UART_RxCpltCallback+0x720>)
 8003374:	f017 fa50 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_UART_RxCpltCallback+0x6d8>)
 800337a:	2140      	movs	r1, #64	; 0x40
 800337c:	2201      	movs	r2, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f008 fa22 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8003384:	2101      	movs	r1, #1
 8003386:	2010      	movs	r0, #16
 8003388:	f002 fbac 	bl	8005ae4 <set_rail_monitor_enable>

		break;
 800338c:	e157      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 800338e:	4848      	ldr	r0, [pc, #288]	; (80034b0 <HAL_UART_RxCpltCallback+0x724>)
 8003390:	f017 fa42 	bl	801a818 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8003394:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_UART_RxCpltCallback+0x6d8>)
 8003396:	2140      	movs	r1, #64	; 0x40
 8003398:	2200      	movs	r2, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f008 fa14 	bl	800b7c8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80033a0:	2100      	movs	r1, #0
 80033a2:	2010      	movs	r0, #16
 80033a4:	f002 fb9e 	bl	8005ae4 <set_rail_monitor_enable>
		break;
 80033a8:	e149      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80033aa:	4842      	ldr	r0, [pc, #264]	; (80034b4 <HAL_UART_RxCpltCallback+0x728>)
 80033ac:	f017 fa34 	bl	801a818 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80033b0:	2300      	movs	r3, #0
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2320      	movs	r3, #32
 80033b6:	4a40      	ldr	r2, [pc, #256]	; (80034b8 <HAL_UART_RxCpltCallback+0x72c>)
 80033b8:	2100      	movs	r1, #0
 80033ba:	4840      	ldr	r0, [pc, #256]	; (80034bc <HAL_UART_RxCpltCallback+0x730>)
 80033bc:	f004 fb80 	bl	8007ac0 <HAL_DAC_Start_DMA>
		break;
 80033c0:	e13d      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80033c2:	483f      	ldr	r0, [pc, #252]	; (80034c0 <HAL_UART_RxCpltCallback+0x734>)
 80033c4:	f017 fa28 	bl	801a818 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80033c8:	2100      	movs	r1, #0
 80033ca:	483c      	ldr	r0, [pc, #240]	; (80034bc <HAL_UART_RxCpltCallback+0x730>)
 80033cc:	f004 fc38 	bl	8007c40 <HAL_DAC_Stop_DMA>
		break;
 80033d0:	e135      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80033d2:	483c      	ldr	r0, [pc, #240]	; (80034c4 <HAL_UART_RxCpltCallback+0x738>)
 80033d4:	f017 fa20 	bl	801a818 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_UART_RxCpltCallback+0x73c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f013 ffdc 	bl	801739c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80033e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033e8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80033ee:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_UART_RxCpltCallback+0x740>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]

		break;
 80033f4:	e123      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80033f6:	4836      	ldr	r0, [pc, #216]	; (80034d0 <HAL_UART_RxCpltCallback+0x744>)
 80033f8:	f017 fa0e 	bl	801a818 <puts>
		ERPA_ENABLED = 0;
 80033fc:	4b33      	ldr	r3, [pc, #204]	; (80034cc <HAL_UART_RxCpltCallback+0x740>)
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003406:	2200      	movs	r2, #0
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800340a:	e118      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800340c:	4831      	ldr	r0, [pc, #196]	; (80034d4 <HAL_UART_RxCpltCallback+0x748>)
 800340e:	f017 fa03 	bl	801a818 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003412:	2100      	movs	r1, #0
 8003414:	4830      	ldr	r0, [pc, #192]	; (80034d8 <HAL_UART_RxCpltCallback+0x74c>)
 8003416:	f00f fc91 	bl	8012d3c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_UART_RxCpltCallback+0x73c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f013 ffbb 	bl	801739c <osEventFlagsSet>
		break;
 8003426:	e10a      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003428:	482c      	ldr	r0, [pc, #176]	; (80034dc <HAL_UART_RxCpltCallback+0x750>)
 800342a:	f017 f9f5 	bl	801a818 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800342e:	2100      	movs	r1, #0
 8003430:	4829      	ldr	r0, [pc, #164]	; (80034d8 <HAL_UART_RxCpltCallback+0x74c>)
 8003432:	f00f fddd 	bl	8012ff0 <HAL_TIM_OC_Stop_IT>
		break;
 8003436:	e102      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003438:	4829      	ldr	r0, [pc, #164]	; (80034e0 <HAL_UART_RxCpltCallback+0x754>)
 800343a:	f017 f9ed 	bl	801a818 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800343e:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_UART_RxCpltCallback+0x73c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2104      	movs	r1, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f013 ffa9 	bl	801739c <osEventFlagsSet>
		HK_ENABLED = 1;
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <HAL_UART_RxCpltCallback+0x758>)
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
		break;
 8003450:	e0f5      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003452:	4825      	ldr	r0, [pc, #148]	; (80034e8 <HAL_UART_RxCpltCallback+0x75c>)
 8003454:	f017 f9e0 	bl	801a818 <puts>
		HK_ENABLED = 0;
 8003458:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_UART_RxCpltCallback+0x758>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
		break;
 800345e:	e0ee      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
 8003460:	0801b1e0 	.word	0x0801b1e0
 8003464:	58020400 	.word	0x58020400
 8003468:	0801b1e8 	.word	0x0801b1e8
 800346c:	0801b1f4 	.word	0x0801b1f4
 8003470:	0801b200 	.word	0x0801b200
 8003474:	0801b4fc 	.word	0x0801b4fc
 8003478:	0801b20c 	.word	0x0801b20c
 800347c:	58020800 	.word	0x58020800
 8003480:	0801b218 	.word	0x0801b218
 8003484:	0801b228 	.word	0x0801b228
 8003488:	0801b234 	.word	0x0801b234
 800348c:	0801b240 	.word	0x0801b240
 8003490:	0801b24c 	.word	0x0801b24c
 8003494:	0801b25c 	.word	0x0801b25c
 8003498:	0801b268 	.word	0x0801b268
 800349c:	0801b274 	.word	0x0801b274
 80034a0:	0801b280 	.word	0x0801b280
 80034a4:	0801b28c 	.word	0x0801b28c
 80034a8:	0801b29c 	.word	0x0801b29c
 80034ac:	0801b2ac 	.word	0x0801b2ac
 80034b0:	0801b2b8 	.word	0x0801b2b8
 80034b4:	0801b2c8 	.word	0x0801b2c8
 80034b8:	2400003c 	.word	0x2400003c
 80034bc:	24000314 	.word	0x24000314
 80034c0:	0801b2d8 	.word	0x0801b2d8
 80034c4:	0801b2e8 	.word	0x0801b2e8
 80034c8:	24001a90 	.word	0x24001a90
 80034cc:	24001add 	.word	0x24001add
 80034d0:	0801b2f0 	.word	0x0801b2f0
 80034d4:	0801b2fc 	.word	0x0801b2fc
 80034d8:	24001da4 	.word	0x24001da4
 80034dc:	0801b304 	.word	0x0801b304
 80034e0:	0801b30c 	.word	0x0801b30c
 80034e4:	24001adc 	.word	0x24001adc
 80034e8:	0801b314 	.word	0x0801b314
	}
	case 0x1D: {
		printf("Step Up\n");
 80034ec:	4856      	ldr	r0, [pc, #344]	; (8003648 <HAL_UART_RxCpltCallback+0x8bc>)
 80034ee:	f017 f993 	bl	801a818 <puts>
		if (step < 14) {
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b0d      	cmp	r3, #13
 80034fa:	f200 8099 	bhi.w	8003630 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 80034fe:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3302      	adds	r3, #2
 8003506:	b2da      	uxtb	r2, r3
 8003508:	4b50      	ldr	r3, [pc, #320]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 800350a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800350c:	4b4f      	ldr	r3, [pc, #316]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	4b4e      	ldr	r3, [pc, #312]	; (8003650 <HAL_UART_RxCpltCallback+0x8c4>)
 8003516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351a:	2200      	movs	r2, #0
 800351c:	2100      	movs	r1, #0
 800351e:	484d      	ldr	r0, [pc, #308]	; (8003654 <HAL_UART_RxCpltCallback+0x8c8>)
 8003520:	f004 fc31 	bl	8007d86 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003524:	2100      	movs	r1, #0
 8003526:	484b      	ldr	r0, [pc, #300]	; (8003654 <HAL_UART_RxCpltCallback+0x8c8>)
 8003528:	f004 fa72 	bl	8007a10 <HAL_DAC_Start>
		}
		break;
 800352c:	e080      	b.n	8003630 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800352e:	484a      	ldr	r0, [pc, #296]	; (8003658 <HAL_UART_RxCpltCallback+0x8cc>)
 8003530:	f017 f972 	bl	801a818 <puts>
		if (step > 1) {
 8003534:	4b45      	ldr	r3, [pc, #276]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d97a      	bls.n	8003634 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 800353e:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3b02      	subs	r3, #2
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 800354a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800354c:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_UART_RxCpltCallback+0x8c0>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <HAL_UART_RxCpltCallback+0x8c4>)
 8003556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	483d      	ldr	r0, [pc, #244]	; (8003654 <HAL_UART_RxCpltCallback+0x8c8>)
 8003560:	f004 fc11 	bl	8007d86 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003564:	2100      	movs	r1, #0
 8003566:	483b      	ldr	r0, [pc, #236]	; (8003654 <HAL_UART_RxCpltCallback+0x8c8>)
 8003568:	f004 fa52 	bl	8007a10 <HAL_DAC_Start>
		}
		break;
 800356c:	e062      	b.n	8003634 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 800356e:	483b      	ldr	r0, [pc, #236]	; (800365c <HAL_UART_RxCpltCallback+0x8d0>)
 8003570:	f017 f952 	bl	801a818 <puts>
		if (cadence <= 50000) {
 8003574:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f24c 3250 	movw	r2, #50000	; 0xc350
 800357c:	4293      	cmp	r3, r2
 800357e:	d85b      	bhi.n	8003638 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4a36      	ldr	r2, [pc, #216]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 8003588:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800358a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800358e:	4b34      	ldr	r3, [pc, #208]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003594:	e050      	b.n	8003638 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003596:	4833      	ldr	r0, [pc, #204]	; (8003664 <HAL_UART_RxCpltCallback+0x8d8>)
 8003598:	f017 f93e 	bl	801a818 <puts>
		if (cadence >= 6250) {
 800359c:	4b30      	ldr	r3, [pc, #192]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f641 0269 	movw	r2, #6249	; 0x1869
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d949      	bls.n	800363c <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 80035b0:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80035b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035b6:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <HAL_UART_RxCpltCallback+0x8d4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80035bc:	e03e      	b.n	800363c <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80035be:	482a      	ldr	r0, [pc, #168]	; (8003668 <HAL_UART_RxCpltCallback+0x8dc>)
 80035c0:	f017 f92a 	bl	801a818 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_UART_RxCpltCallback+0x8e0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2102      	movs	r1, #2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f013 fee6 	bl	801739c <osEventFlagsSet>
		break;
 80035d0:	e035      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80035d2:	4827      	ldr	r0, [pc, #156]	; (8003670 <HAL_UART_RxCpltCallback+0x8e4>)
 80035d4:	f017 f920 	bl	801a818 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80035d8:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_UART_RxCpltCallback+0x8e0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2104      	movs	r1, #4
 80035de:	4618      	mov	r0, r3
 80035e0:	f013 fedc 	bl	801739c <osEventFlagsSet>
		break;
 80035e4:	e02b      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80035e6:	4823      	ldr	r0, [pc, #140]	; (8003674 <HAL_UART_RxCpltCallback+0x8e8>)
 80035e8:	f017 f916 	bl	801a818 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_UART_RxCpltCallback+0x8e0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2108      	movs	r1, #8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f013 fed2 	bl	801739c <osEventFlagsSet>
		break;
 80035f8:	e021      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 80035fa:	f000 f999 	bl	8003930 <sync>
		break;
 80035fe:	e01e      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_UART_RxCpltCallback+0x8ec>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f013 fec8 	bl	801739c <osEventFlagsSet>
		break;
 800360c:	e017      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_UART_RxCpltCallback+0x8ec>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f013 fec1 	bl	801739c <osEventFlagsSet>
		break;
 800361a:	e010      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 800361c:	f7fe fd3e 	bl	800209c <reset_error_counters>
		break;
 8003620:	e00d      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003622:	f7fe feeb 	bl	80023fc <send_previous_error_packet>
#endif
		break;
 8003626:	e00a      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003628:	4814      	ldr	r0, [pc, #80]	; (800367c <HAL_UART_RxCpltCallback+0x8f0>)
 800362a:	f017 f8f5 	bl	801a818 <puts>
		break;
 800362e:	e006      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003630:	bf00      	nop
 8003632:	e004      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003634:	bf00      	nop
 8003636:	e002      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800363c:	bf00      	nop
	}
	}
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	0801b31c 	.word	0x0801b31c
 800364c:	24001ade 	.word	0x24001ade
 8003650:	2400003c 	.word	0x2400003c
 8003654:	24000314 	.word	0x24000314
 8003658:	0801b324 	.word	0x0801b324
 800365c:	0801b330 	.word	0x0801b330
 8003660:	240000bc 	.word	0x240000bc
 8003664:	0801b33c 	.word	0x0801b33c
 8003668:	0801b348 	.word	0x0801b348
 800366c:	24001a94 	.word	0x24001a94
 8003670:	0801b358 	.word	0x0801b358
 8003674:	0801b364 	.word	0x0801b364
 8003678:	24001a98 	.word	0x24001a98
 800367c:	0801b370 	.word	0x0801b370

08003680 <get_reset_cause>:

void get_reset_cause()
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <get_reset_cause+0x58>)
 8003688:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800368c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 8003694:	2304      	movs	r3, #4
 8003696:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003698:	231a      	movs	r3, #26
 800369a:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fe fc5d 	bl	8001f5c <handle_error>
 80036a2:	e00d      	b.n	80036c0 <get_reset_cause+0x40>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <get_reset_cause+0x58>)
 80036a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <get_reset_cause+0x40>
    {
        error.category = EC_brownout;
 80036b2:	2303      	movs	r3, #3
 80036b4:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 80036b6:	231a      	movs	r3, #26
 80036b8:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe fc4e 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <get_reset_cause+0x58>)
 80036c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036c6:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <get_reset_cause+0x58>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	58024400 	.word	0x58024400

080036dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036e0:	f002 fc02 	bl	8005ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036e4:	f000 f828 	bl	8003738 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80036e8:	f000 f8a8 	bl	800383c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036ec:	f7ff f948 	bl	8002980 <MX_GPIO_Init>
  MX_DMA_Init();
 80036f0:	f7fd fafa 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036f4:	f001 ff2e 	bl	8005554 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80036f8:	f7ff f9bc 	bl	8002a74 <MX_I2C1_Init>
  MX_SPI2_Init();
 80036fc:	f000 fe60 	bl	80043c0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003700:	f001 fb4c 	bl	8004d9c <MX_TIM2_Init>
  MX_TIM1_Init();
 8003704:	f001 fa9c 	bl	8004c40 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003708:	f7fd f88e 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 800370c:	f7fc ff6a 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003710:	f7fd fa36 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003714:	f000 fdfc 	bl	8004310 <MX_SPI1_Init>
  MX_RTC_Init();
 8003718:	f000 fbc8 	bl	8003eac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 800371c:	f7fe fc4a 	bl	8001fb4 <error_counter_init>
  	get_reset_cause();
 8003720:	f7ff ffae 	bl	8003680 <get_reset_cause>
#endif

  system_setup();
 8003724:	f000 f8ba 	bl	800389c <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003728:	f013 fca0 	bl	801706c <osKernelInitialize>
  MX_FREERTOS_Init();
 800372c:	f7fe fee0 	bl	80024f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003730:	f013 fcc0 	bl	80170b4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003734:	e7fe      	b.n	8003734 <main+0x58>
	...

08003738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b09c      	sub	sp, #112	; 0x70
 800373c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800373e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003742:	224c      	movs	r2, #76	; 0x4c
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f016 fff0 	bl	801a72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	2220      	movs	r2, #32
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f016 ffea 	bl	801a72c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003758:	2002      	movs	r0, #2
 800375a:	f00a fbff 	bl	800df5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800375e:	2300      	movs	r3, #0
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	4b34      	ldr	r3, [pc, #208]	; (8003834 <SystemClock_Config+0xfc>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	4a33      	ldr	r2, [pc, #204]	; (8003834 <SystemClock_Config+0xfc>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <SystemClock_Config+0xfc>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <SystemClock_Config+0x100>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003780:	4a2d      	ldr	r2, [pc, #180]	; (8003838 <SystemClock_Config+0x100>)
 8003782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003786:	6193      	str	r3, [r2, #24]
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <SystemClock_Config+0x100>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003794:	bf00      	nop
 8003796:	4b28      	ldr	r3, [pc, #160]	; (8003838 <SystemClock_Config+0x100>)
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a2:	d1f8      	bne.n	8003796 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80037a4:	230b      	movs	r3, #11
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80037ae:	2309      	movs	r3, #9
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037b2:	2340      	movs	r3, #64	; 0x40
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037b6:	2301      	movs	r3, #1
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ba:	2302      	movs	r3, #2
 80037bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037be:	2302      	movs	r3, #2
 80037c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037c2:	2304      	movs	r3, #4
 80037c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80037c6:	2318      	movs	r3, #24
 80037c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80037ca:	2302      	movs	r3, #2
 80037cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037ce:	2302      	movs	r3, #2
 80037d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037d2:	2302      	movs	r3, #2
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80037d6:	2308      	movs	r3, #8
 80037d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80037da:	2302      	movs	r3, #2
 80037dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e6:	4618      	mov	r0, r3
 80037e8:	f00a fbf2 	bl	800dfd0 <HAL_RCC_OscConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80037f2:	f000 f955 	bl	8003aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f6:	233f      	movs	r3, #63	; 0x3f
 80037f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037fa:	2303      	movs	r3, #3
 80037fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800380a:	2340      	movs	r3, #64	; 0x40
 800380c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f00b f832 	bl	800e884 <HAL_RCC_ClockConfig>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003826:	f000 f93b 	bl	8003aa0 <Error_Handler>
  }
}
 800382a:	bf00      	nop
 800382c:	3770      	adds	r7, #112	; 0x70
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	58000400 	.word	0x58000400
 8003838:	58024800 	.word	0x58024800

0800383c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b0b0      	sub	sp, #192	; 0xc0
 8003840:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003842:	463b      	mov	r3, r7
 8003844:	22c0      	movs	r2, #192	; 0xc0
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f016 ff6f 	bl	801a72c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800384e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800385a:	2304      	movs	r3, #4
 800385c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800385e:	2318      	movs	r3, #24
 8003860:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003862:	2308      	movs	r3, #8
 8003864:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003866:	2302      	movs	r3, #2
 8003868:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800386a:	2302      	movs	r3, #2
 800386c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003872:	2320      	movs	r3, #32
 8003874:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003880:	463b      	mov	r3, r7
 8003882:	4618      	mov	r0, r3
 8003884:	f00b fbcc 	bl	800f020 <HAL_RCCEx_PeriphCLKConfig>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800388e:	f000 f907 	bl	8003aa0 <Error_Handler>
  }
}
 8003892:	bf00      	nop
 8003894:	37c0      	adds	r7, #192	; 0xc0
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f013 fd3c 	bl	801731e <osEventFlagsNew>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <system_setup+0x7c>)
 80038aa:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <system_setup+0x7c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d100      	bne.n	80038b6 <system_setup+0x1a>
        while (1);
 80038b4:	e7fe      	b.n	80038b4 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f013 fd31 	bl	801731e <osEventFlagsNew>
 80038bc:	4603      	mov	r3, r0
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <system_setup+0x80>)
 80038c0:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 80038c2:	4b16      	ldr	r3, [pc, #88]	; (800391c <system_setup+0x80>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d100      	bne.n	80038cc <system_setup+0x30>
        while (1);
 80038ca:	e7fe      	b.n	80038ca <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f013 fd26 	bl	801731e <osEventFlagsNew>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <system_setup+0x84>)
 80038d6:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <system_setup+0x84>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d100      	bne.n	80038e2 <system_setup+0x46>
        while (1);
 80038e0:	e7fe      	b.n	80038e0 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 80038e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038e6:	2200      	movs	r2, #0
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80038ea:	210c      	movs	r1, #12
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <system_setup+0x88>)
 80038ee:	f00f fa25 	bl	8012d3c <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80038f2:	f001 ff39 	bl	8005768 <voltage_monitor_init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d100      	bne.n	80038fe <system_setup+0x62>
		while (1);
 80038fc:	e7fe      	b.n	80038fc <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 80038fe:	f000 fb67 	bl	8003fd0 <init_adc_dma>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d100      	bne.n	800390a <system_setup+0x6e>
		while (1);
 8003908:	e7fe      	b.n	8003908 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800390a:	2201      	movs	r2, #1
 800390c:	4906      	ldr	r1, [pc, #24]	; (8003928 <system_setup+0x8c>)
 800390e:	4807      	ldr	r0, [pc, #28]	; (800392c <system_setup+0x90>)
 8003910:	f010 fef4 	bl	80146fc <HAL_UART_Receive_IT>

	//MX_IWDG1_Init();

}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	24001a90 	.word	0x24001a90
 800391c:	24001a94 	.word	0x24001a94
 8003920:	24001a98 	.word	0x24001a98
 8003924:	24001df0 	.word	0x24001df0
 8003928:	24001a9c 	.word	0x24001a9c
 800392c:	24001e3c 	.word	0x24001e3c

08003930 <sync>:

void sync() {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
	send_ACK();
 8003936:	f000 f821 	bl	800397c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800393a:	480e      	ldr	r0, [pc, #56]	; (8003974 <sync+0x44>)
 800393c:	f010 ff2a 	bl	8014794 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003940:	2364      	movs	r3, #100	; 0x64
 8003942:	2209      	movs	r2, #9
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <sync+0x48>)
 8003946:	480b      	ldr	r0, [pc, #44]	; (8003974 <sync+0x44>)
 8003948:	f010 fe10 	bl	801456c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <sync+0x48>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2bff      	cmp	r3, #255	; 0xff
 8003956:	d1f3      	bne.n	8003940 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8003958:	4807      	ldr	r0, [pc, #28]	; (8003978 <sync+0x48>)
 800395a:	f001 fd39 	bl	80053d0 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800395e:	2201      	movs	r2, #1
 8003960:	4905      	ldr	r1, [pc, #20]	; (8003978 <sync+0x48>)
 8003962:	4804      	ldr	r0, [pc, #16]	; (8003974 <sync+0x44>)
 8003964:	f010 feca 	bl	80146fc <HAL_UART_Receive_IT>
	send_error_counter_packet();
 8003968:	f7fe fc0c 	bl	8002184 <send_error_counter_packet>
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	24001e3c 	.word	0x24001e3c
 8003978:	24001a9c 	.word	0x24001a9c

0800397c <send_ACK>:

void send_ACK() {
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <send_ACK+0x1c>)
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003986:	2364      	movs	r3, #100	; 0x64
 8003988:	2201      	movs	r2, #1
 800398a:	4903      	ldr	r1, [pc, #12]	; (8003998 <send_ACK+0x1c>)
 800398c:	4803      	ldr	r0, [pc, #12]	; (800399c <send_ACK+0x20>)
 800398e:	f010 fd5f 	bl	8014450 <HAL_UART_Transmit>
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	24001ae8 	.word	0x24001ae8
 800399c:	24001e3c 	.word	0x24001e3c

080039a0 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80039a6:	4b2e      	ldr	r3, [pc, #184]	; (8003a60 <get_current_step+0xc0>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d04a      	beq.n	8003a4c <get_current_step+0xac>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039bc:	da48      	bge.n	8003a50 <get_current_step+0xb0>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f640 628b 	movw	r2, #3723	; 0xe8b
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d03f      	beq.n	8003a48 <get_current_step+0xa8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f640 628b 	movw	r2, #3723	; 0xe8b
 80039ce:	4293      	cmp	r3, r2
 80039d0:	dc3e      	bgt.n	8003a50 <get_current_step+0xb0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f640 421f 	movw	r2, #3103	; 0xc1f
 80039d8:	4293      	cmp	r3, r2
 80039da:	d033      	beq.n	8003a44 <get_current_step+0xa4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80039e2:	da35      	bge.n	8003a50 <get_current_step+0xb0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d028      	beq.n	8003a40 <get_current_step+0xa0>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80039f4:	4293      	cmp	r3, r2
 80039f6:	dc2b      	bgt.n	8003a50 <get_current_step+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f240 7245 	movw	r2, #1861	; 0x745
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01c      	beq.n	8003a3c <get_current_step+0x9c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f240 7245 	movw	r2, #1861	; 0x745
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	dc21      	bgt.n	8003a50 <get_current_step+0xb0>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d010      	beq.n	8003a38 <get_current_step+0x98>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	dc17      	bgt.n	8003a50 <get_current_step+0xb0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <get_current_step+0x90>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003a2c:	d002      	beq.n	8003a34 <get_current_step+0x94>
 8003a2e:	e00f      	b.n	8003a50 <get_current_step+0xb0>
	case 0:
		return 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e00e      	b.n	8003a52 <get_current_step+0xb2>
	case 620:
		return 1;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e00c      	b.n	8003a52 <get_current_step+0xb2>
	case 1241:
		return 2;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e00a      	b.n	8003a52 <get_current_step+0xb2>
	case 1861:
		return 3;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e008      	b.n	8003a52 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003a40:	2304      	movs	r3, #4
 8003a42:	e006      	b.n	8003a52 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003a44:	2305      	movs	r3, #5
 8003a46:	e004      	b.n	8003a52 <get_current_step+0xb2>
	case 3723:
		return 6;
 8003a48:	2306      	movs	r3, #6
 8003a4a:	e002      	b.n	8003a52 <get_current_step+0xb2>
	case 4095:
		return 7;
 8003a4c:	2307      	movs	r3, #7
 8003a4e:	e000      	b.n	8003a52 <get_current_step+0xb2>
	default:
		return -1;
 8003a50:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40007400 	.word	0x40007400

08003a64 <enter_stop>:

void enter_stop() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	  send_ACK();
 8003a68:	f7ff ff88 	bl	800397c <send_ACK>

	  vTaskSuspendAll();
 8003a6c:	f015 f8f4 	bl	8018c58 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003a70:	2101      	movs	r1, #1
 8003a72:	2001      	movs	r0, #1
 8003a74:	f00a fa36 	bl	800dee4 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003a78:	f7ff f91c 	bl	8002cb4 <__NVIC_SystemReset>

08003a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a8e:	f002 fa67 	bl	8005f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40001000 	.word	0x40001000

08003aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003aaa:	231a      	movs	r3, #26
 8003aac:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe fa54 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003ac2:	bf00      	nop
 8003ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ac8:	481c      	ldr	r0, [pc, #112]	; (8003b3c <create_pmt_packet+0x80>)
 8003aca:	f007 fe65 	bl	800b798 <HAL_GPIO_ReadPin>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f7      	bne.n	8003ac4 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fa98 	bl	800500c <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fac9 	bl	8004078 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003ae6:	23ff      	movs	r3, #255	; 0xff
 8003ae8:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003aea:	23ff      	movs	r3, #255	; 0xff
 8003aec:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <create_pmt_packet+0x84>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <create_pmt_packet+0x84>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003b02:	7a3b      	ldrb	r3, [r7, #8]
 8003b04:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003b06:	7a7b      	ldrb	r3, [r7, #9]
 8003b08:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003b0a:	793b      	ldrb	r3, [r7, #4]
 8003b0c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003b0e:	797b      	ldrb	r3, [r7, #5]
 8003b10:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003b12:	79bb      	ldrb	r3, [r7, #6]
 8003b14:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003b1a:	f107 010c 	add.w	r1, r7, #12
 8003b1e:	2364      	movs	r3, #100	; 0x64
 8003b20:	220a      	movs	r2, #10
 8003b22:	4808      	ldr	r0, [pc, #32]	; (8003b44 <create_pmt_packet+0x88>)
 8003b24:	f010 fc94 	bl	8014450 <HAL_UART_Transmit>

	pmt_seq++;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <create_pmt_packet+0x84>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <create_pmt_packet+0x84>)
 8003b32:	801a      	strh	r2, [r3, #0]
}
 8003b34:	bf00      	nop
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	58020000 	.word	0x58020000
 8003b40:	24001aea 	.word	0x24001aea
 8003b44:	24001e3c 	.word	0x24001e3c

08003b48 <create_erpa_packet>:


void create_erpa_packet() {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003b4e:	bf00      	nop
 8003b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b54:	4828      	ldr	r0, [pc, #160]	; (8003bf8 <create_erpa_packet+0xb0>)
 8003b56:	f007 fe1f 	bl	800b798 <HAL_GPIO_ReadPin>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f7      	bne.n	8003b50 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003b60:	23ff      	movs	r3, #255	; 0xff
 8003b62:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 fa50 	bl	800500c <get_uptime>
	sweep_step = get_current_step();
 8003b6c:	f7ff ff18 	bl	80039a0 <get_current_step>
 8003b70:	4603      	mov	r3, r0
 8003b72:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fa9d 	bl	80040b8 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fab8 	bl	80040f8 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003b88:	23ee      	movs	r3, #238	; 0xee
 8003b8a:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003b8c:	23ee      	movs	r3, #238	; 0xee
 8003b8e:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <create_erpa_packet+0xb4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003b9a:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <create_erpa_packet+0xb4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003ba4:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <create_erpa_packet+0xb4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003bac:	7ffb      	ldrb	r3, [r7, #31]
 8003bae:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003bb0:	893b      	ldrh	r3, [r7, #8]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003bc0:	7b3b      	ldrb	r3, [r7, #12]
 8003bc2:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003bc4:	7b7b      	ldrb	r3, [r7, #13]
 8003bc6:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003bc8:	793b      	ldrb	r3, [r7, #4]
 8003bca:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003bcc:	797b      	ldrb	r3, [r7, #5]
 8003bce:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003bd0:	79bb      	ldrb	r3, [r7, #6]
 8003bd2:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003bd8:	f107 0110 	add.w	r1, r7, #16
 8003bdc:	2364      	movs	r3, #100	; 0x64
 8003bde:	220e      	movs	r2, #14
 8003be0:	4807      	ldr	r0, [pc, #28]	; (8003c00 <create_erpa_packet+0xb8>)
 8003be2:	f010 fc35 	bl	8014450 <HAL_UART_Transmit>

	erpa_seq++;
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <create_erpa_packet+0xb4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <create_erpa_packet+0xb4>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	58020400 	.word	0x58020400
 8003bfc:	24001aec 	.word	0x24001aec
 8003c00:	24001e3c 	.word	0x24001e3c

08003c04 <create_hk_packet>:


void create_hk_packet() {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b092      	sub	sp, #72	; 0x48
 8003c08:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f9fd 	bl	800500c <get_uptime>
	get_unix_time(timestamp);
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 fa48 	bl	80050ac <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003c1c:	f001 ffe4 	bl	8005be8 <get_rail_monitor>
 8003c20:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003c22:	23dd      	movs	r3, #221	; 0xdd
 8003c24:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003c26:	23dd      	movs	r3, #221	; 0xdd
 8003c28:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003c2a:	4b93      	ldr	r3, [pc, #588]	; (8003e78 <create_hk_packet+0x274>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003c36:	4b90      	ldr	r3, [pc, #576]	; (8003e78 <create_hk_packet+0x274>)
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c40:	889b      	ldrh	r3, [r3, #4]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4c:	889b      	ldrh	r3, [r3, #4]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c54:	330a      	adds	r3, #10
 8003c56:	889b      	ldrh	r3, [r3, #4]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	330a      	adds	r3, #10
 8003c64:	889b      	ldrh	r3, [r3, #4]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	889b      	ldrh	r3, [r3, #4]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	331e      	adds	r3, #30
 8003c86:	889b      	ldrh	r3, [r3, #4]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	331e      	adds	r3, #30
 8003c94:	889b      	ldrh	r3, [r3, #4]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9c:	3328      	adds	r3, #40	; 0x28
 8003c9e:	889b      	ldrh	r3, [r3, #4]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003caa:	3328      	adds	r3, #40	; 0x28
 8003cac:	889b      	ldrh	r3, [r3, #4]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb4:	3332      	adds	r3, #50	; 0x32
 8003cb6:	889b      	ldrh	r3, [r3, #4]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	889b      	ldrh	r3, [r3, #4]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ccc:	333c      	adds	r3, #60	; 0x3c
 8003cce:	889b      	ldrh	r3, [r3, #4]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cdc:	333c      	adds	r3, #60	; 0x3c
 8003cde:	889b      	ldrh	r3, [r3, #4]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce8:	3346      	adds	r3, #70	; 0x46
 8003cea:	889b      	ldrh	r3, [r3, #4]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf8:	3346      	adds	r3, #70	; 0x46
 8003cfa:	889b      	ldrh	r3, [r3, #4]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d04:	3350      	adds	r3, #80	; 0x50
 8003d06:	889b      	ldrh	r3, [r3, #4]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d14:	3350      	adds	r3, #80	; 0x50
 8003d16:	889b      	ldrh	r3, [r3, #4]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d20:	335a      	adds	r3, #90	; 0x5a
 8003d22:	889b      	ldrh	r3, [r3, #4]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d30:	335a      	adds	r3, #90	; 0x5a
 8003d32:	889b      	ldrh	r3, [r3, #4]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3c:	3364      	adds	r3, #100	; 0x64
 8003d3e:	889b      	ldrh	r3, [r3, #4]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4c:	3364      	adds	r3, #100	; 0x64
 8003d4e:	889b      	ldrh	r3, [r3, #4]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d58:	336e      	adds	r3, #110	; 0x6e
 8003d5a:	889b      	ldrh	r3, [r3, #4]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d68:	336e      	adds	r3, #110	; 0x6e
 8003d6a:	889b      	ldrh	r3, [r3, #4]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d74:	3378      	adds	r3, #120	; 0x78
 8003d76:	889b      	ldrh	r3, [r3, #4]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d84:	3378      	adds	r3, #120	; 0x78
 8003d86:	889b      	ldrh	r3, [r3, #4]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d90:	3382      	adds	r3, #130	; 0x82
 8003d92:	889b      	ldrh	r3, [r3, #4]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da0:	3382      	adds	r3, #130	; 0x82
 8003da2:	889b      	ldrh	r3, [r3, #4]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dac:	338c      	adds	r3, #140	; 0x8c
 8003dae:	889b      	ldrh	r3, [r3, #4]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbc:	338c      	adds	r3, #140	; 0x8c
 8003dbe:	889b      	ldrh	r3, [r3, #4]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc8:	3396      	adds	r3, #150	; 0x96
 8003dca:	889b      	ldrh	r3, [r3, #4]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd8:	3396      	adds	r3, #150	; 0x96
 8003dda:	889b      	ldrh	r3, [r3, #4]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de4:	33a0      	adds	r3, #160	; 0xa0
 8003de6:	889b      	ldrh	r3, [r3, #4]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	33a0      	adds	r3, #160	; 0xa0
 8003df6:	889b      	ldrh	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e00:	33aa      	adds	r3, #170	; 0xaa
 8003e02:	889b      	ldrh	r3, [r3, #4]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e10:	33aa      	adds	r3, #170	; 0xaa
 8003e12:	889b      	ldrh	r3, [r3, #4]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003e1a:	7a3b      	ldrb	r3, [r7, #8]
 8003e1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003e20:	7a7b      	ldrb	r3, [r7, #9]
 8003e22:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003e26:	7abb      	ldrb	r3, [r7, #10]
 8003e28:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003e32:	7b3b      	ldrb	r3, [r7, #12]
 8003e34:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003e38:	7b7b      	ldrb	r3, [r7, #13]
 8003e3a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003e3e:	793b      	ldrb	r3, [r7, #4]
 8003e40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003e44:	797b      	ldrb	r3, [r7, #5]
 8003e46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003e4a:	79bb      	ldrb	r3, [r7, #6]
 8003e4c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003e56:	f107 0110 	add.w	r1, r7, #16
 8003e5a:	2364      	movs	r3, #100	; 0x64
 8003e5c:	2232      	movs	r2, #50	; 0x32
 8003e5e:	4807      	ldr	r0, [pc, #28]	; (8003e7c <create_hk_packet+0x278>)
 8003e60:	f010 faf6 	bl	8014450 <HAL_UART_Transmit>

	hk_seq++;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <create_hk_packet+0x274>)
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <create_hk_packet+0x274>)
 8003e6e:	801a      	strh	r2, [r3, #0]
}
 8003e70:	bf00      	nop
 8003e72:	3748      	adds	r7, #72	; 0x48
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	24001af0 	.word	0x24001af0
 8003e7c:	24001e3c 	.word	0x24001e3c

08003e80 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <reset_packet_sequence_numbers+0x20>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <reset_packet_sequence_numbers+0x24>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <reset_packet_sequence_numbers+0x28>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	801a      	strh	r2, [r3, #0]
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	24001aea 	.word	0x24001aea
 8003ea4:	24001aec 	.word	0x24001aec
 8003ea8:	24001af0 	.word	0x24001af0

08003eac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ec4:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ec6:	4a27      	ldr	r2, [pc, #156]	; (8003f64 <MX_RTC_Init+0xb8>)
 8003ec8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003eca:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003ed0:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ed2:	2263      	movs	r2, #99	; 0x63
 8003ed4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003ed6:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ed8:	f242 720f 	movw	r2, #9999	; 0x270f
 8003edc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ef6:	481a      	ldr	r0, [pc, #104]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003ef8:	f00d fd90 	bl	8011a1c <HAL_RTC_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003f02:	f7ff fdcd 	bl	8003aa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480f      	ldr	r0, [pc, #60]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003f22:	f00d fdfd 	bl	8011b20 <HAL_RTC_SetTime>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003f2c:	f7ff fdb8 	bl	8003aa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003f30:	2301      	movs	r3, #1
 8003f32:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003f34:	2301      	movs	r3, #1
 8003f36:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003f40:	463b      	mov	r3, r7
 8003f42:	2201      	movs	r2, #1
 8003f44:	4619      	mov	r1, r3
 8003f46:	4806      	ldr	r0, [pc, #24]	; (8003f60 <MX_RTC_Init+0xb4>)
 8003f48:	f00d fee4 	bl	8011d14 <HAL_RTC_SetDate>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003f52:	f7ff fda5 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	24001af4 	.word	0x24001af4
 8003f64:	58004000 	.word	0x58004000

08003f68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b0b2      	sub	sp, #200	; 0xc8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f70:	f107 0308 	add.w	r3, r7, #8
 8003f74:	22c0      	movs	r2, #192	; 0xc0
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f016 fbd7 	bl	801a72c <memset>
  if(rtcHandle->Instance==RTC)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <HAL_RTC_MspInit+0x5c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d118      	bne.n	8003fba <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RTC_MspInit+0x60>)
 8003f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f00b f83e 	bl	800f020 <HAL_RCCEx_PeriphCLKConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003faa:	f7ff fd79 	bl	8003aa0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <HAL_RTC_MspInit+0x64>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a06      	ldr	r2, [pc, #24]	; (8003fcc <HAL_RTC_MspInit+0x64>)
 8003fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003fba:	bf00      	nop
 8003fbc:	37c8      	adds	r7, #200	; 0xc8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	58004000 	.word	0x58004000
 8003fc8:	00019300 	.word	0x00019300
 8003fcc:	58024400 	.word	0x58024400

08003fd0 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003fda:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe2:	481f      	ldr	r0, [pc, #124]	; (8004060 <init_adc_dma+0x90>)
 8003fe4:	f003 fad0 	bl	8007588 <HAL_ADCEx_Calibration_Start>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003fee:	f7ff fd57 	bl	8003aa0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003ff2:	220b      	movs	r2, #11
 8003ff4:	491b      	ldr	r1, [pc, #108]	; (8004064 <init_adc_dma+0x94>)
 8003ff6:	481a      	ldr	r0, [pc, #104]	; (8004060 <init_adc_dma+0x90>)
 8003ff8:	f002 fba4 	bl	8006744 <HAL_ADC_Start_DMA>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8004002:	f7ff fd4d 	bl	8003aa0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8004006:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800400a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800400e:	4816      	ldr	r0, [pc, #88]	; (8004068 <init_adc_dma+0x98>)
 8004010:	f003 faba 	bl	8007588 <HAL_ADCEx_Calibration_Start>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800401a:	f7ff fd41 	bl	8003aa0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800401e:	2204      	movs	r2, #4
 8004020:	4912      	ldr	r1, [pc, #72]	; (800406c <init_adc_dma+0x9c>)
 8004022:	4811      	ldr	r0, [pc, #68]	; (8004068 <init_adc_dma+0x98>)
 8004024:	f002 fb8e 	bl	8006744 <HAL_ADC_Start_DMA>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800402e:	f7ff fd37 	bl	8003aa0 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <init_adc_dma+0xa0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <init_adc_dma+0xa0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8004042:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <init_adc_dma+0xa4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <init_adc_dma+0xa4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]


	status = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	71fb      	strb	r3, [r7, #7]

	return status;
 8004056:	79fb      	ldrb	r3, [r7, #7]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	2400015c 	.word	0x2400015c
 8004064:	24001b20 	.word	0x24001b20
 8004068:	240001c0 	.word	0x240001c0
 800406c:	24001b40 	.word	0x24001b40
 8004070:	24001bdc 	.word	0x24001bdc
 8004074:	24001b54 	.word	0x24001b54

08004078 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8004080:	2201      	movs	r2, #1
 8004082:	490b      	ldr	r1, [pc, #44]	; (80040b0 <sample_pmt_spi+0x38>)
 8004084:	480b      	ldr	r0, [pc, #44]	; (80040b4 <sample_pmt_spi+0x3c>)
 8004086:	f00e f90f 	bl	80122a8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <sample_pmt_spi+0x38>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	b29b      	uxth	r3, r3
 8004092:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <sample_pmt_spi+0x38>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3301      	adds	r3, #1
 80040a4:	7bba      	ldrb	r2, [r7, #14]
 80040a6:	701a      	strb	r2, [r3, #0]
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	24001b4c 	.word	0x24001b4c
 80040b4:	24001b54 	.word	0x24001b54

080040b8 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80040c0:	2201      	movs	r2, #1
 80040c2:	490b      	ldr	r1, [pc, #44]	; (80040f0 <sample_erpa_spi+0x38>)
 80040c4:	480b      	ldr	r0, [pc, #44]	; (80040f4 <sample_erpa_spi+0x3c>)
 80040c6:	f00e f8ef 	bl	80122a8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <sample_erpa_spi+0x38>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <sample_erpa_spi+0x38>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	7bba      	ldrb	r2, [r7, #14]
 80040e6:	701a      	strb	r2, [r3, #0]
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	24001b48 	.word	0x24001b48
 80040f4:	24001bdc 	.word	0x24001bdc

080040f8 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <sample_erpa_adc+0x20>)
 8004102:	885b      	ldrh	r3, [r3, #2]
 8004104:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	89fa      	ldrh	r2, [r7, #14]
 800410a:	801a      	strh	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	24001b20 	.word	0x24001b20

0800411c <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004124:	2390      	movs	r3, #144	; 0x90
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f8a2 	bl	8004270 <poll_i2c_sensor>
 800412c:	4603      	mov	r3, r0
 800412e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004130:	2394      	movs	r3, #148	; 0x94
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f89c 	bl	8004270 <poll_i2c_sensor>
 8004138:	4603      	mov	r3, r0
 800413a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800413c:	2392      	movs	r3, #146	; 0x92
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f896 	bl	8004270 <poll_i2c_sensor>
 8004144:	4603      	mov	r3, r0
 8004146:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004148:	2396      	movs	r3, #150	; 0x96
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f890 	bl	8004270 <poll_i2c_sensor>
 8004150:	4603      	mov	r3, r0
 8004152:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	89fa      	ldrh	r2, [r7, #14]
 8004158:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3302      	adds	r3, #2
 800415e:	89ba      	ldrh	r2, [r7, #12]
 8004160:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	897a      	ldrh	r2, [r7, #10]
 8004168:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3306      	adds	r3, #6
 800416e:	893a      	ldrh	r2, [r7, #8]
 8004170:	801a      	strh	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <sample_hk_adc1+0xa0>)
 8004186:	8a9b      	ldrh	r3, [r3, #20]
 8004188:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <sample_hk_adc1+0xa0>)
 800418c:	8a1b      	ldrh	r3, [r3, #16]
 800418e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004190:	4b22      	ldr	r3, [pc, #136]	; (800421c <sample_hk_adc1+0xa0>)
 8004192:	899b      	ldrh	r3, [r3, #12]
 8004194:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <sample_hk_adc1+0xa0>)
 8004198:	8a5b      	ldrh	r3, [r3, #18]
 800419a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <sample_hk_adc1+0xa0>)
 800419e:	889b      	ldrh	r3, [r3, #4]
 80041a0:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <sample_hk_adc1+0xa0>)
 80041a4:	88db      	ldrh	r3, [r3, #6]
 80041a6:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <sample_hk_adc1+0xa0>)
 80041aa:	89db      	ldrh	r3, [r3, #14]
 80041ac:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80041ae:	4b1b      	ldr	r3, [pc, #108]	; (800421c <sample_hk_adc1+0xa0>)
 80041b0:	891b      	ldrh	r3, [r3, #8]
 80041b2:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <sample_hk_adc1+0xa0>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <sample_hk_adc1+0xa0>)
 80041bc:	895b      	ldrh	r3, [r3, #10]
 80041be:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8bfa      	ldrh	r2, [r7, #30]
 80041c4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3302      	adds	r3, #2
 80041ca:	8bba      	ldrh	r2, [r7, #28]
 80041cc:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	8b7a      	ldrh	r2, [r7, #26]
 80041d4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3306      	adds	r3, #6
 80041da:	8b3a      	ldrh	r2, [r7, #24]
 80041dc:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3308      	adds	r3, #8
 80041e2:	8afa      	ldrh	r2, [r7, #22]
 80041e4:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	330a      	adds	r3, #10
 80041ea:	8aba      	ldrh	r2, [r7, #20]
 80041ec:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	330c      	adds	r3, #12
 80041f2:	8a7a      	ldrh	r2, [r7, #18]
 80041f4:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	330e      	adds	r3, #14
 80041fa:	8a3a      	ldrh	r2, [r7, #16]
 80041fc:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3310      	adds	r3, #16
 8004202:	89fa      	ldrh	r2, [r7, #14]
 8004204:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3312      	adds	r3, #18
 800420a:	89ba      	ldrh	r2, [r7, #12]
 800420c:	801a      	strh	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	24001b20 	.word	0x24001b20

08004220 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <sample_hk_adc3+0x4c>)
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <sample_hk_adc3+0x4c>)
 8004230:	885b      	ldrh	r3, [r3, #2]
 8004232:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <sample_hk_adc3+0x4c>)
 8004236:	889b      	ldrh	r3, [r3, #4]
 8004238:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <sample_hk_adc3+0x4c>)
 800423c:	88db      	ldrh	r3, [r3, #6]
 800423e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	89fa      	ldrh	r2, [r7, #14]
 8004244:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3302      	adds	r3, #2
 800424a:	89ba      	ldrh	r2, [r7, #12]
 800424c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	897a      	ldrh	r2, [r7, #10]
 8004254:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3306      	adds	r3, #6
 800425a:	893a      	ldrh	r2, [r7, #8]
 800425c:	801a      	strh	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	24001b40 	.word	0x24001b40

08004270 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 800427a:	2200      	movs	r2, #0
 800427c:	4b20      	ldr	r3, [pc, #128]	; (8004300 <poll_i2c_sensor+0x90>)
 800427e:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	b299      	uxth	r1, r3
 8004284:	2301      	movs	r3, #1
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <poll_i2c_sensor+0x90>)
 8004288:	481e      	ldr	r0, [pc, #120]	; (8004304 <poll_i2c_sensor+0x94>)
 800428a:	f007 fb53 	bl	800b934 <HAL_I2C_Master_Transmit_DMA>
 800428e:	4603      	mov	r3, r0
 8004290:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8004292:	7b7b      	ldrb	r3, [r7, #13]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8004298:	481b      	ldr	r0, [pc, #108]	; (8004308 <poll_i2c_sensor+0x98>)
 800429a:	f016 fabd 	bl	801a818 <puts>
 800429e:	e028      	b.n	80042f2 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80042a0:	bf00      	nop
 80042a2:	4818      	ldr	r0, [pc, #96]	; (8004304 <poll_i2c_sensor+0x94>)
 80042a4:	f007 fe2d 	bl	800bf02 <HAL_I2C_GetState>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d1f9      	bne.n	80042a2 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	b299      	uxth	r1, r3
 80042b2:	2302      	movs	r3, #2
 80042b4:	4a12      	ldr	r2, [pc, #72]	; (8004300 <poll_i2c_sensor+0x90>)
 80042b6:	4813      	ldr	r0, [pc, #76]	; (8004304 <poll_i2c_sensor+0x94>)
 80042b8:	f007 fc50 	bl	800bb5c <HAL_I2C_Master_Receive_DMA>
 80042bc:	4603      	mov	r3, r0
 80042be:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80042c0:	7b7b      	ldrb	r3, [r7, #13]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80042c6:	4811      	ldr	r0, [pc, #68]	; (800430c <poll_i2c_sensor+0x9c>)
 80042c8:	f016 faa6 	bl	801a818 <puts>
 80042cc:	e011      	b.n	80042f2 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80042ce:	bf00      	nop
 80042d0:	480c      	ldr	r0, [pc, #48]	; (8004304 <poll_i2c_sensor+0x94>)
 80042d2:	f007 fe16 	bl	800bf02 <HAL_I2C_GetState>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d1f9      	bne.n	80042d0 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <poll_i2c_sensor+0x90>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80042e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042e8:	4a05      	ldr	r2, [pc, #20]	; (8004300 <poll_i2c_sensor+0x90>)
 80042ea:	7852      	ldrb	r2, [r2, #1]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	10db      	asrs	r3, r3, #3
 80042f0:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80042f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	24001b50 	.word	0x24001b50
 8004304:	2400193c 	.word	0x2400193c
 8004308:	0801b380 	.word	0x0801b380
 800430c:	0801b390 	.word	0x0801b390

08004310 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004316:	4a29      	ldr	r2, [pc, #164]	; (80043bc <MX_SPI1_Init+0xac>)
 8004318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800431c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004322:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004324:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004328:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800432c:	220f      	movs	r2, #15
 800432e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004330:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004332:	2200      	movs	r2, #0
 8004334:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004336:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004338:	2200      	movs	r2, #0
 800433a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800433c:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800433e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004342:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004344:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004346:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800434a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800434e:	2200      	movs	r2, #0
 8004350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004352:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004354:	2200      	movs	r2, #0
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800435a:	2200      	movs	r2, #0
 800435c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004360:	2200      	movs	r2, #0
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800436a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800436e:	2200      	movs	r2, #0
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004374:	2200      	movs	r2, #0
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800437a:	2200      	movs	r2, #0
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004386:	2200      	movs	r2, #0
 8004388:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800438c:	2200      	movs	r2, #0
 800438e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004392:	2200      	movs	r2, #0
 8004394:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <MX_SPI1_Init+0xa8>)
 8004398:	2200      	movs	r2, #0
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <MX_SPI1_Init+0xa8>)
 800439e:	2200      	movs	r2, #0
 80043a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043a2:	4805      	ldr	r0, [pc, #20]	; (80043b8 <MX_SPI1_Init+0xa8>)
 80043a4:	f00d fe5c 	bl	8012060 <HAL_SPI_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80043ae:	f7ff fb77 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	24001b54 	.word	0x24001b54
 80043bc:	40013000 	.word	0x40013000

080043c0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80043c4:	4b28      	ldr	r3, [pc, #160]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043c6:	4a29      	ldr	r2, [pc, #164]	; (800446c <MX_SPI2_Init+0xac>)
 80043c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80043d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043dc:	220f      	movs	r2, #15
 80043de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e0:	4b21      	ldr	r3, [pc, #132]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80043f4:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043f6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80043fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <MX_SPI2_Init+0xa8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004402:	4b19      	ldr	r3, [pc, #100]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004404:	2200      	movs	r2, #0
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004408:	4b17      	ldr	r3, [pc, #92]	; (8004468 <MX_SPI2_Init+0xa8>)
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800440e:	4b16      	ldr	r3, [pc, #88]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004410:	2200      	movs	r2, #0
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004414:	4b14      	ldr	r3, [pc, #80]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800441a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800441c:	4b12      	ldr	r3, [pc, #72]	; (8004468 <MX_SPI2_Init+0xa8>)
 800441e:	2200      	movs	r2, #0
 8004420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004422:	4b11      	ldr	r3, [pc, #68]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004424:	2200      	movs	r2, #0
 8004426:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <MX_SPI2_Init+0xa8>)
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800442e:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004430:	2200      	movs	r2, #0
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004436:	2200      	movs	r2, #0
 8004438:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <MX_SPI2_Init+0xa8>)
 800443c:	2200      	movs	r2, #0
 800443e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004442:	2200      	movs	r2, #0
 8004444:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004448:	2200      	movs	r2, #0
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <MX_SPI2_Init+0xa8>)
 800444e:	2200      	movs	r2, #0
 8004450:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004452:	4805      	ldr	r0, [pc, #20]	; (8004468 <MX_SPI2_Init+0xa8>)
 8004454:	f00d fe04 	bl	8012060 <HAL_SPI_Init>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800445e:	f7ff fb1f 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	24001bdc 	.word	0x24001bdc
 800446c:	40003800 	.word	0x40003800

08004470 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b0bc      	sub	sp, #240	; 0xf0
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004488:	f107 0318 	add.w	r3, r7, #24
 800448c:	22c0      	movs	r2, #192	; 0xc0
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f016 f94b 	bl	801a72c <memset>
  if(spiHandle->Instance==SPI1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a83      	ldr	r2, [pc, #524]	; (80046a8 <HAL_SPI_MspInit+0x238>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d17c      	bne.n	800459a <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80044a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044b0:	f107 0318 	add.w	r3, r7, #24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f00a fdb3 	bl	800f020 <HAL_RCCEx_PeriphCLKConfig>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80044c0:	f7ff faee 	bl	8003aa0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044c4:	4b79      	ldr	r3, [pc, #484]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80044c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ca:	4a78      	ldr	r2, [pc, #480]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80044cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044d4:	4b75      	ldr	r3, [pc, #468]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80044d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e2:	4b72      	ldr	r3, [pc, #456]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80044e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044e8:	4a70      	ldr	r2, [pc, #448]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80044ea:	f043 0302 	orr.w	r3, r3, #2
 80044ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044f2:	4b6e      	ldr	r3, [pc, #440]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80044f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004500:	2318      	movs	r3, #24
 8004502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004518:	2305      	movs	r3, #5
 800451a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004522:	4619      	mov	r1, r3
 8004524:	4862      	ldr	r0, [pc, #392]	; (80046b0 <HAL_SPI_MspInit+0x240>)
 8004526:	f006 ff87 	bl	800b438 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800452a:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 800452c:	4a62      	ldr	r2, [pc, #392]	; (80046b8 <HAL_SPI_MspInit+0x248>)
 800452e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004530:	4b60      	ldr	r3, [pc, #384]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004532:	2225      	movs	r2, #37	; 0x25
 8004534:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004536:	4b5f      	ldr	r3, [pc, #380]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800453c:	4b5d      	ldr	r3, [pc, #372]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 800453e:	2200      	movs	r2, #0
 8004540:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004542:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004548:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800454a:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 800454c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004550:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004552:	4b58      	ldr	r3, [pc, #352]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004558:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800455a:	4b56      	ldr	r3, [pc, #344]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 800455c:	2200      	movs	r2, #0
 800455e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004560:	4b54      	ldr	r3, [pc, #336]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004562:	2200      	movs	r2, #0
 8004564:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004566:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004568:	2200      	movs	r2, #0
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800456c:	4851      	ldr	r0, [pc, #324]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 800456e:	f003 fe33 	bl	80081d8 <HAL_DMA_Init>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004578:	f7ff fa92 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a4d      	ldr	r2, [pc, #308]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004580:	67da      	str	r2, [r3, #124]	; 0x7c
 8004582:	4a4c      	ldr	r2, [pc, #304]	; (80046b4 <HAL_SPI_MspInit+0x244>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004588:	2200      	movs	r2, #0
 800458a:	2105      	movs	r1, #5
 800458c:	2023      	movs	r0, #35	; 0x23
 800458e:	f003 f9f5 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004592:	2023      	movs	r0, #35	; 0x23
 8004594:	f003 fa0c 	bl	80079b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004598:	e081      	b.n	800469e <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a47      	ldr	r2, [pc, #284]	; (80046bc <HAL_SPI_MspInit+0x24c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d17c      	bne.n	800469e <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80045a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045b4:	f107 0318 	add.w	r3, r7, #24
 80045b8:	4618      	mov	r0, r3
 80045ba:	f00a fd31 	bl	800f020 <HAL_RCCEx_PeriphCLKConfig>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80045c4:	f7ff fa6c 	bl	8003aa0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045c8:	4b38      	ldr	r3, [pc, #224]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80045ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ce:	4a37      	ldr	r2, [pc, #220]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80045d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045d8:	4b34      	ldr	r3, [pc, #208]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80045da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80045e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ec:	4a2f      	ldr	r2, [pc, #188]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_SPI_MspInit+0x23c>)
 80045f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004604:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004608:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800461e:	2305      	movs	r3, #5
 8004620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004628:	4619      	mov	r1, r3
 800462a:	4821      	ldr	r0, [pc, #132]	; (80046b0 <HAL_SPI_MspInit+0x240>)
 800462c:	f006 ff04 	bl	800b438 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004630:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_SPI_MspInit+0x254>)
 8004634:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004638:	2227      	movs	r2, #39	; 0x27
 800463a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004642:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004644:	2200      	movs	r2, #0
 8004646:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 800464a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800464e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004656:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 800465a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800465e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004662:	2200      	movs	r2, #0
 8004664:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004666:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004668:	2200      	movs	r2, #0
 800466a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 800466e:	2200      	movs	r2, #0
 8004670:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004672:	4813      	ldr	r0, [pc, #76]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004674:	f003 fdb0 	bl	80081d8 <HAL_DMA_Init>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 800467e:	f7ff fa0f 	bl	8003aa0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 8004686:	67da      	str	r2, [r3, #124]	; 0x7c
 8004688:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <HAL_SPI_MspInit+0x250>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	2105      	movs	r1, #5
 8004692:	2024      	movs	r0, #36	; 0x24
 8004694:	f003 f972 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004698:	2024      	movs	r0, #36	; 0x24
 800469a:	f003 f989 	bl	80079b0 <HAL_NVIC_EnableIRQ>
}
 800469e:	bf00      	nop
 80046a0:	37f0      	adds	r7, #240	; 0xf0
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40013000 	.word	0x40013000
 80046ac:	58024400 	.word	0x58024400
 80046b0:	58020400 	.word	0x58020400
 80046b4:	24001c64 	.word	0x24001c64
 80046b8:	40020070 	.word	0x40020070
 80046bc:	40003800 	.word	0x40003800
 80046c0:	24001cdc 	.word	0x24001cdc
 80046c4:	40020058 	.word	0x40020058

080046c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_MspInit+0x38>)
 80046d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046d4:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <HAL_MspInit+0x38>)
 80046d6:	f043 0302 	orr.w	r3, r3, #2
 80046da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_MspInit+0x38>)
 80046e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80046ec:	2200      	movs	r2, #0
 80046ee:	210f      	movs	r1, #15
 80046f0:	f06f 0001 	mvn.w	r0, #1
 80046f4:	f003 f942 	bl	800797c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	58024400 	.word	0x58024400

08004704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b090      	sub	sp, #64	; 0x40
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	d827      	bhi.n	8004762 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004712:	2200      	movs	r2, #0
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	2036      	movs	r0, #54	; 0x36
 8004718:	f003 f930 	bl	800797c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800471c:	2036      	movs	r0, #54	; 0x36
 800471e:	f003 f947 	bl	80079b0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004722:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <HAL_InitTick+0xc4>)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004728:	4b28      	ldr	r3, [pc, #160]	; (80047cc <HAL_InitTick+0xc8>)
 800472a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800472e:	4a27      	ldr	r2, [pc, #156]	; (80047cc <HAL_InitTick+0xc8>)
 8004730:	f043 0310 	orr.w	r3, r3, #16
 8004734:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004738:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_InitTick+0xc8>)
 800473a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004746:	f107 0210 	add.w	r2, r7, #16
 800474a:	f107 0314 	add.w	r3, r7, #20
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f00a fc23 	bl	800ef9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <HAL_InitTick+0x6a>
 8004760:	e001      	b.n	8004766 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e02b      	b.n	80047be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004766:	f00a fbed 	bl	800ef44 <HAL_RCC_GetPCLK1Freq>
 800476a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800476c:	e004      	b.n	8004778 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800476e:	f00a fbe9 	bl	800ef44 <HAL_RCC_GetPCLK1Freq>
 8004772:	4603      	mov	r3, r0
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_InitTick+0xcc>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	0c9b      	lsrs	r3, r3, #18
 8004782:	3b01      	subs	r3, #1
 8004784:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_InitTick+0xd0>)
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <HAL_InitTick+0xd4>)
 800478a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800478c:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <HAL_InitTick+0xd0>)
 800478e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004792:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004794:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <HAL_InitTick+0xd0>)
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004798:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <HAL_InitTick+0xd0>)
 800479c:	2200      	movs	r2, #0
 800479e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_InitTick+0xd0>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80047a6:	480b      	ldr	r0, [pc, #44]	; (80047d4 <HAL_InitTick+0xd0>)
 80047a8:	f00e f9f9 	bl	8012b9e <HAL_TIM_Base_Init>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80047b2:	4808      	ldr	r0, [pc, #32]	; (80047d4 <HAL_InitTick+0xd0>)
 80047b4:	f00e fa4a 	bl	8012c4c <HAL_TIM_Base_Start_IT>
 80047b8:	4603      	mov	r3, r0
 80047ba:	e000      	b.n	80047be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3740      	adds	r7, #64	; 0x40
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	240000c8 	.word	0x240000c8
 80047cc:	58024400 	.word	0x58024400
 80047d0:	431bde83 	.word	0x431bde83
 80047d4:	24001d54 	.word	0x24001d54
 80047d8:	40001000 	.word	0x40001000

080047dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80047e0:	e7fe      	b.n	80047e0 <NMI_Handler+0x4>

080047e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047e6:	e7fe      	b.n	80047e6 <HardFault_Handler+0x4>

080047e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047ec:	e7fe      	b.n	80047ec <MemManage_Handler+0x4>

080047ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047ee:	b480      	push	{r7}
 80047f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047f2:	e7fe      	b.n	80047f2 <BusFault_Handler+0x4>

080047f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047f8:	e7fe      	b.n	80047f8 <UsageFault_Handler+0x4>

080047fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047fa:	b480      	push	{r7}
 80047fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800480c:	4802      	ldr	r0, [pc, #8]	; (8004818 <DMA1_Stream0_IRQHandler+0x10>)
 800480e:	f005 f80d 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	24000224 	.word	0x24000224

0800481c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004820:	4802      	ldr	r0, [pc, #8]	; (800482c <DMA1_Stream1_IRQHandler+0x10>)
 8004822:	f005 f803 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	2400029c 	.word	0x2400029c

08004830 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004834:	4802      	ldr	r0, [pc, #8]	; (8004840 <DMA1_Stream2_IRQHandler+0x10>)
 8004836:	f004 fff9 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	24001ed0 	.word	0x24001ed0

08004844 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004848:	4802      	ldr	r0, [pc, #8]	; (8004854 <DMA1_Stream3_IRQHandler+0x10>)
 800484a:	f004 ffef 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	24001cdc 	.word	0x24001cdc

08004858 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800485c:	4802      	ldr	r0, [pc, #8]	; (8004868 <DMA1_Stream4_IRQHandler+0x10>)
 800485e:	f004 ffe5 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	24001c64 	.word	0x24001c64

0800486c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004870:	4802      	ldr	r0, [pc, #8]	; (800487c <DMA1_Stream5_IRQHandler+0x10>)
 8004872:	f004 ffdb 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	24000328 	.word	0x24000328

08004880 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004884:	4802      	ldr	r0, [pc, #8]	; (8004890 <DMA1_Stream6_IRQHandler+0x10>)
 8004886:	f004 ffd1 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	24001990 	.word	0x24001990

08004894 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004898:	4802      	ldr	r0, [pc, #8]	; (80048a4 <TIM1_BRK_IRQHandler+0x10>)
 800489a:	f00e fcee 	bl	801327a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	24001da4 	.word	0x24001da4

080048a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <TIM1_UP_IRQHandler+0x10>)
 80048ae:	f00e fce4 	bl	801327a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	24001da4 	.word	0x24001da4

080048bc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <TIM1_TRG_COM_IRQHandler+0x10>)
 80048c2:	f00e fcda 	bl	801327a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	24001da4 	.word	0x24001da4

080048d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <TIM1_CC_IRQHandler+0x10>)
 80048d6:	f00e fcd0 	bl	801327a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	24001da4 	.word	0x24001da4

080048e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <TIM2_IRQHandler+0x10>)
 80048ea:	f00e fcc6 	bl	801327a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	24001df0 	.word	0x24001df0

080048f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <I2C1_EV_IRQHandler+0x10>)
 80048fe:	f007 fa1d 	bl	800bd3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2400193c 	.word	0x2400193c

0800490c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <I2C1_ER_IRQHandler+0x10>)
 8004912:	f007 fa2d 	bl	800bd70 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	2400193c 	.word	0x2400193c

08004920 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004924:	4802      	ldr	r0, [pc, #8]	; (8004930 <SPI1_IRQHandler+0x10>)
 8004926:	f00d fe07 	bl	8012538 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	24001b54 	.word	0x24001b54

08004934 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004938:	4802      	ldr	r0, [pc, #8]	; (8004944 <SPI2_IRQHandler+0x10>)
 800493a:	f00d fdfd 	bl	8012538 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	24001bdc 	.word	0x24001bdc

08004948 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800494c:	4802      	ldr	r0, [pc, #8]	; (8004958 <USART1_IRQHandler+0x10>)
 800494e:	f00f ffd7 	bl	8014900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	24001e3c 	.word	0x24001e3c

0800495c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <DMA1_Stream7_IRQHandler+0x10>)
 8004962:	f004 ff63 	bl	800982c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	24001a08 	.word	0x24001a08

08004970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <TIM6_DAC_IRQHandler+0x20>)
 8004976:	791b      	ldrb	r3, [r3, #4]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800497e:	4804      	ldr	r0, [pc, #16]	; (8004990 <TIM6_DAC_IRQHandler+0x20>)
 8004980:	f003 f9ab 	bl	8007cda <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004984:	4803      	ldr	r0, [pc, #12]	; (8004994 <TIM6_DAC_IRQHandler+0x24>)
 8004986:	f00e fc78 	bl	801327a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	24000314 	.word	0x24000314
 8004994:	24001d54 	.word	0x24001d54

08004998 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80049a2:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <ITM_SendChar+0x48>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <ITM_SendChar+0x48>)
 80049a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ac:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <ITM_SendChar+0x4c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <ITM_SendChar+0x4c>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80049ba:	bf00      	nop
 80049bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f8      	beq.n	80049bc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80049ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	6013      	str	r3, [r2, #0]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000edfc 	.word	0xe000edfc
 80049e4:	e0000e00 	.word	0xe0000e00

080049e8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e00a      	b.n	8004a10 <_read+0x28>
		*ptr++ = __io_getchar();
 80049fa:	f3af 8000 	nop.w
 80049fe:	4601      	mov	r1, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	60ba      	str	r2, [r7, #8]
 8004a06:	b2ca      	uxtb	r2, r1
 8004a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	dbf0      	blt.n	80049fa <_read+0x12>
	}

	return len;
 8004a18:	687b      	ldr	r3, [r7, #4]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	e009      	b.n	8004a48 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	60ba      	str	r2, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ffab 	bl	8004998 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3301      	adds	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	dbf1      	blt.n	8004a34 <_write+0x12>
	}
	return len;
 8004a50:	687b      	ldr	r3, [r7, #4]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <_close>:

int _close(int file) {
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a82:	605a      	str	r2, [r3, #4]
	return 0;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <_isatty>:

int _isatty(int file) {
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004a9a:	2301      	movs	r3, #1
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004acc:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <_sbrk+0x64>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <_sbrk+0x64>)
 8004ae2:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <_sbrk+0x68>)
 8004ae4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <_sbrk+0x64>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d207      	bcs.n	8004b04 <_sbrk+0x40>
		errno = ENOMEM;
 8004af4:	f015 fde2 	bl	801a6bc <__errno>
 8004af8:	4603      	mov	r3, r0
 8004afa:	220c      	movs	r2, #12
 8004afc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b02:	e009      	b.n	8004b18 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004b04:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <_sbrk+0x64>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <_sbrk+0x64>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <_sbrk+0x64>)
 8004b14:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	24080000 	.word	0x24080000
 8004b24:	00000400 	.word	0x00000400
 8004b28:	24001da0 	.word	0x24001da0
 8004b2c:	24006980 	.word	0x24006980

08004b30 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004b34:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <SystemInit+0xe4>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	4a36      	ldr	r2, [pc, #216]	; (8004c14 <SystemInit+0xe4>)
 8004b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004b44:	4b34      	ldr	r3, [pc, #208]	; (8004c18 <SystemInit+0xe8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2b06      	cmp	r3, #6
 8004b4e:	d807      	bhi.n	8004b60 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004b50:	4b31      	ldr	r3, [pc, #196]	; (8004c18 <SystemInit+0xe8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 030f 	bic.w	r3, r3, #15
 8004b58:	4a2f      	ldr	r2, [pc, #188]	; (8004c18 <SystemInit+0xe8>)
 8004b5a:	f043 0307 	orr.w	r3, r3, #7
 8004b5e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004b60:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <SystemInit+0xec>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2d      	ldr	r2, [pc, #180]	; (8004c1c <SystemInit+0xec>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004b6c:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <SystemInit+0xec>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004b72:	4b2a      	ldr	r3, [pc, #168]	; (8004c1c <SystemInit+0xec>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4929      	ldr	r1, [pc, #164]	; (8004c1c <SystemInit+0xec>)
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <SystemInit+0xf0>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004b7e:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <SystemInit+0xe8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004b8a:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <SystemInit+0xe8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 030f 	bic.w	r3, r3, #15
 8004b92:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <SystemInit+0xe8>)
 8004b94:	f043 0307 	orr.w	r3, r3, #7
 8004b98:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <SystemInit+0xec>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <SystemInit+0xec>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <SystemInit+0xec>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004bac:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <SystemInit+0xec>)
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <SystemInit+0xf4>)
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <SystemInit+0xec>)
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <SystemInit+0xf8>)
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <SystemInit+0xec>)
 8004bba:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <SystemInit+0xfc>)
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004bbe:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <SystemInit+0xec>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004bc4:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <SystemInit+0xec>)
 8004bc6:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <SystemInit+0xfc>)
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <SystemInit+0xec>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <SystemInit+0xec>)
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <SystemInit+0xfc>)
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004bd6:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <SystemInit+0xec>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <SystemInit+0xec>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <SystemInit+0xec>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <SystemInit+0xec>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <SystemInit+0x100>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <SystemInit+0x104>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfa:	d202      	bcs.n	8004c02 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <SystemInit+0x108>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <SystemInit+0x10c>)
 8004c04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c08:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c0a:	bf00      	nop
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00
 8004c18:	52002000 	.word	0x52002000
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c24:	02020200 	.word	0x02020200
 8004c28:	01ff0000 	.word	0x01ff0000
 8004c2c:	01010280 	.word	0x01010280
 8004c30:	5c001000 	.word	0x5c001000
 8004c34:	ffff0000 	.word	0xffff0000
 8004c38:	51008108 	.word	0x51008108
 8004c3c:	52004000 	.word	0x52004000

08004c40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b09a      	sub	sp, #104	; 0x68
 8004c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	611a      	str	r2, [r3, #16]
 8004c70:	615a      	str	r2, [r3, #20]
 8004c72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c74:	1d3b      	adds	r3, r7, #4
 8004c76:	222c      	movs	r2, #44	; 0x2c
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f015 fd56 	bl	801a72c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c80:	4b44      	ldr	r3, [pc, #272]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004c82:	4a45      	ldr	r2, [pc, #276]	; (8004d98 <MX_TIM1_Init+0x158>)
 8004c84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004c88:	224a      	movs	r2, #74	; 0x4a
 8004c8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c8c:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004c92:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004c94:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004c98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9a:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ca0:	4b3c      	ldr	r3, [pc, #240]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ca6:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cac:	4839      	ldr	r0, [pc, #228]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004cae:	f00d ff76 	bl	8012b9e <HAL_TIM_Base_Init>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004cb8:	f7fe fef2 	bl	8003aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004cc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4832      	ldr	r0, [pc, #200]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004cca:	f00e fcf1 	bl	80136b0 <HAL_TIM_ConfigClockSource>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004cd4:	f7fe fee4 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004cd8:	482e      	ldr	r0, [pc, #184]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004cda:	f00e fa6d 	bl	80131b8 <HAL_TIM_PWM_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004ce4:	f7fe fedc 	bl	8003aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004cec:	2300      	movs	r3, #0
 8004cee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004cf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4826      	ldr	r0, [pc, #152]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004cfc:	f00f fa2e 	bl	801415c <HAL_TIMEx_MasterConfigSynchronization>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004d06:	f7fe fecb 	bl	8003aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d0a:	2360      	movs	r3, #96	; 0x60
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004d0e:	f240 13df 	movw	r3, #479	; 0x1df
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d14:	2300      	movs	r3, #0
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d20:	2300      	movs	r3, #0
 8004d22:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d24:	2300      	movs	r3, #0
 8004d26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4818      	ldr	r0, [pc, #96]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004d32:	f00e fba9 	bl	8013488 <HAL_TIM_PWM_ConfigChannel>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004d3c:	f7fe feb0 	bl	8003aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4807      	ldr	r0, [pc, #28]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004d76:	f00f fa7f 	bl	8014278 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004d80:	f7fe fe8e 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004d84:	4803      	ldr	r0, [pc, #12]	; (8004d94 <MX_TIM1_Init+0x154>)
 8004d86:	f000 f8dd 	bl	8004f44 <HAL_TIM_MspPostInit>

}
 8004d8a:	bf00      	nop
 8004d8c:	3768      	adds	r7, #104	; 0x68
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	24001da4 	.word	0x24001da4
 8004d98:	40010000 	.word	0x40010000

08004d9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08e      	sub	sp, #56	; 0x38
 8004da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004db0:	f107 031c 	add.w	r3, r7, #28
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	611a      	str	r2, [r3, #16]
 8004dca:	615a      	str	r2, [r3, #20]
 8004dcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dce:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004dd8:	224a      	movs	r2, #74	; 0x4a
 8004dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ddc:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004de2:	4b28      	ldr	r3, [pc, #160]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004de4:	f640 4234 	movw	r2, #3124	; 0xc34
 8004de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dea:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004df2:	2280      	movs	r2, #128	; 0x80
 8004df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004df6:	4823      	ldr	r0, [pc, #140]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004df8:	f00d fed1 	bl	8012b9e <HAL_TIM_Base_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004e02:	f7fe fe4d 	bl	8003aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e10:	4619      	mov	r1, r3
 8004e12:	481c      	ldr	r0, [pc, #112]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004e14:	f00e fc4c 	bl	80136b0 <HAL_TIM_ConfigClockSource>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004e1e:	f7fe fe3f 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e22:	4818      	ldr	r0, [pc, #96]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004e24:	f00e f9c8 	bl	80131b8 <HAL_TIM_PWM_Init>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004e2e:	f7fe fe37 	bl	8003aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e32:	2320      	movs	r3, #32
 8004e34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e3a:	f107 031c 	add.w	r3, r7, #28
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4810      	ldr	r0, [pc, #64]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004e42:	f00f f98b 	bl	801415c <HAL_TIMEx_MasterConfigSynchronization>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004e4c:	f7fe fe28 	bl	8003aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e50:	2360      	movs	r3, #96	; 0x60
 8004e52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004e60:	463b      	mov	r3, r7
 8004e62:	220c      	movs	r2, #12
 8004e64:	4619      	mov	r1, r3
 8004e66:	4807      	ldr	r0, [pc, #28]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004e68:	f00e fb0e 	bl	8013488 <HAL_TIM_PWM_ConfigChannel>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004e72:	f7fe fe15 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e76:	4803      	ldr	r0, [pc, #12]	; (8004e84 <MX_TIM2_Init+0xe8>)
 8004e78:	f000 f864 	bl	8004f44 <HAL_TIM_MspPostInit>

}
 8004e7c:	bf00      	nop
 8004e7e:	3738      	adds	r7, #56	; 0x38
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	24001df0 	.word	0x24001df0

08004e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a29      	ldr	r2, [pc, #164]	; (8004f3c <HAL_TIM_Base_MspInit+0xb4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d12f      	bne.n	8004efa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e9a:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <HAL_TIM_Base_MspInit+0xb8>)
 8004e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <HAL_TIM_Base_MspInit+0xb8>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_TIM_Base_MspInit+0xb8>)
 8004eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2105      	movs	r1, #5
 8004ebc:	2018      	movs	r0, #24
 8004ebe:	f002 fd5d 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004ec2:	2018      	movs	r0, #24
 8004ec4:	f002 fd74 	bl	80079b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2105      	movs	r1, #5
 8004ecc:	2019      	movs	r0, #25
 8004ece:	f002 fd55 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004ed2:	2019      	movs	r0, #25
 8004ed4:	f002 fd6c 	bl	80079b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2105      	movs	r1, #5
 8004edc:	201a      	movs	r0, #26
 8004ede:	f002 fd4d 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004ee2:	201a      	movs	r0, #26
 8004ee4:	f002 fd64 	bl	80079b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2105      	movs	r1, #5
 8004eec:	201b      	movs	r0, #27
 8004eee:	f002 fd45 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004ef2:	201b      	movs	r0, #27
 8004ef4:	f002 fd5c 	bl	80079b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004ef8:	e01b      	b.n	8004f32 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d116      	bne.n	8004f32 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f04:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <HAL_TIM_Base_MspInit+0xb8>)
 8004f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f0a:	4a0d      	ldr	r2, [pc, #52]	; (8004f40 <HAL_TIM_Base_MspInit+0xb8>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <HAL_TIM_Base_MspInit+0xb8>)
 8004f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2105      	movs	r1, #5
 8004f26:	201c      	movs	r0, #28
 8004f28:	f002 fd28 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f2c:	201c      	movs	r0, #28
 8004f2e:	f002 fd3f 	bl	80079b0 <HAL_NVIC_EnableIRQ>
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	58024400 	.word	0x58024400

08004f44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <HAL_TIM_MspPostInit+0xb8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d120      	bne.n	8004fa8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f66:	4b26      	ldr	r3, [pc, #152]	; (8005000 <HAL_TIM_MspPostInit+0xbc>)
 8004f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f6c:	4a24      	ldr	r2, [pc, #144]	; (8005000 <HAL_TIM_MspPostInit+0xbc>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <HAL_TIM_MspPostInit+0xbc>)
 8004f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f92:	2300      	movs	r3, #0
 8004f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9a:	f107 0314 	add.w	r3, r7, #20
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4818      	ldr	r0, [pc, #96]	; (8005004 <HAL_TIM_MspPostInit+0xc0>)
 8004fa2:	f006 fa49 	bl	800b438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004fa6:	e024      	b.n	8004ff2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb0:	d11f      	bne.n	8004ff2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb2:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_TIM_MspPostInit+0xbc>)
 8004fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fb8:	4a11      	ldr	r2, [pc, #68]	; (8005000 <HAL_TIM_MspPostInit+0xbc>)
 8004fba:	f043 0302 	orr.w	r3, r3, #2
 8004fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_TIM_MspPostInit+0xbc>)
 8004fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe6:	f107 0314 	add.w	r3, r7, #20
 8004fea:	4619      	mov	r1, r3
 8004fec:	4806      	ldr	r0, [pc, #24]	; (8005008 <HAL_TIM_MspPostInit+0xc4>)
 8004fee:	f006 fa23 	bl	800b438 <HAL_GPIO_Init>
}
 8004ff2:	bf00      	nop
 8004ff4:	3728      	adds	r7, #40	; 0x28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	58024400 	.word	0x58024400
 8005004:	58020000 	.word	0x58020000
 8005008:	58020400 	.word	0x58020400

0800500c <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <get_uptime+0x94>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 800501e:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <get_uptime+0x98>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <get_uptime+0x94>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d005      	beq.n	800503a <get_uptime+0x2e>
		ms = uptime_millis;
 800502e:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <get_uptime+0x94>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <get_uptime+0x98>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005040:	fb03 f202 	mul.w	r2, r3, r2
 8005044:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <get_uptime+0x98>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	3301      	adds	r3, #1
 800504a:	4917      	ldr	r1, [pc, #92]	; (80050a8 <get_uptime+0x9c>)
 800504c:	fba1 1303 	umull	r1, r3, r1, r3
 8005050:	099b      	lsrs	r3, r3, #6
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	fbb1 f3f3 	udiv	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <get_uptime+0x5a>
		uptime = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	b2da      	uxtb	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	0c1a      	lsrs	r2, r3, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3301      	adds	r3, #1
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	0a1a      	lsrs	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3302      	adds	r3, #2
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3303      	adds	r3, #3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	24001ae0 	.word	0x24001ae0
 80050a4:	e000e010 	.word	0xe000e010
 80050a8:	10624dd3 	.word	0x10624dd3

080050ac <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	b0a5      	sub	sp, #148	; 0x94
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	65f8      	str	r0, [r7, #92]	; 0x5c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80050b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050ba:	2200      	movs	r2, #0
 80050bc:	4619      	mov	r1, r3
 80050be:	48bf      	ldr	r0, [pc, #764]	; (80053bc <get_unix_time+0x310>)
 80050c0:	f00c fdcc 	bl	8011c5c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80050c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050c8:	2200      	movs	r2, #0
 80050ca:	4619      	mov	r1, r3
 80050cc:	48bb      	ldr	r0, [pc, #748]	; (80053bc <get_unix_time+0x310>)
 80050ce:	f00c fea9 	bl	8011e24 <HAL_RTC_GetDate>
	uint32_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80050d8:	1ad2      	subs	r2, r2, r3
 80050da:	4bb9      	ldr	r3, [pc, #740]	; (80053c0 <get_unix_time+0x314>)
 80050dc:	fba3 2302 	umull	r2, r3, r3, r2
 80050e0:	08db      	lsrs	r3, r3, #3
 80050e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80


	y = current_date.Year + 2000;
 80050f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80050fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	m = current_date.Month;
 8005100:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005104:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	d = current_date.Date;
 8005108:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800510c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005110:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8005114:	2b02      	cmp	r3, #2
 8005116:	d809      	bhi.n	800512c <get_unix_time+0x80>
	{
		m += 12;
 8005118:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800511c:	330c      	adds	r3, #12
 800511e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		y -= 1;
 8005122:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005126:	3b01      	subs	r3, #1
 8005128:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 800512c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005130:	f240 136d 	movw	r3, #365	; 0x16d
 8005134:	fb03 f202 	mul.w	r2, r3, r2
 8005138:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	b29b      	uxth	r3, r3
 8005140:	18d1      	adds	r1, r2, r3
 8005142:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005146:	4b9f      	ldr	r3, [pc, #636]	; (80053c4 <get_unix_time+0x318>)
 8005148:	fba3 2302 	umull	r2, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	b29b      	uxth	r3, r3
 8005150:	1ac9      	subs	r1, r1, r3
 8005152:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005156:	4b9b      	ldr	r3, [pc, #620]	; (80053c4 <get_unix_time+0x318>)
 8005158:	fba3 2302 	umull	r2, r3, r3, r2
 800515c:	09db      	lsrs	r3, r3, #7
 800515e:	b29b      	uxth	r3, r3
 8005160:	440b      	add	r3, r1
 8005162:	17da      	asrs	r2, r3, #31
 8005164:	63bb      	str	r3, [r7, #56]	; 0x38
 8005166:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800516c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005170:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8005174:	4613      	mov	r3, r2
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	1899      	adds	r1, r3, r2
 800518a:	4b8f      	ldr	r3, [pc, #572]	; (80053c8 <get_unix_time+0x31c>)
 800518c:	fb83 2301 	smull	r2, r3, r3, r1
 8005190:	105a      	asrs	r2, r3, #1
 8005192:	17cb      	asrs	r3, r1, #31
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	18c2      	adds	r2, r0, r3
 8005198:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800519c:	4413      	add	r3, r2
 800519e:	17da      	asrs	r2, r3, #31
 80051a0:	653b      	str	r3, [r7, #80]	; 0x50
 80051a2:	657a      	str	r2, [r7, #84]	; 0x54
 80051a4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6339      	str	r1, [r7, #48]	; 0x30
 80051ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051b0:	eb43 0101 	adc.w	r1, r3, r1
 80051b4:	6379      	str	r1, [r7, #52]	; 0x34
 80051b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051ba:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 80051be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051c2:	4982      	ldr	r1, [pc, #520]	; (80053cc <get_unix_time+0x320>)
 80051c4:	1851      	adds	r1, r2, r1
 80051c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80051c8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051d2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 80051d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	1896      	adds	r6, r2, r2
 80051e0:	623e      	str	r6, [r7, #32]
 80051e2:	415b      	adcs	r3, r3
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ea:	1814      	adds	r4, r2, r0
 80051ec:	eb43 0501 	adc.w	r5, r3, r1
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	012b      	lsls	r3, r5, #4
 80051fa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80051fe:	0122      	lsls	r2, r4, #4
 8005200:	ebb2 0804 	subs.w	r8, r2, r4
 8005204:	eb63 0905 	sbc.w	r9, r3, r5
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005214:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005218:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800521c:	ebb2 0108 	subs.w	r1, r2, r8
 8005220:	61b9      	str	r1, [r7, #24]
 8005222:	eb63 0309 	sbc.w	r3, r3, r9
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005234:	4629      	mov	r1, r5
 8005236:	01cb      	lsls	r3, r1, #7
 8005238:	4621      	mov	r1, r4
 800523a:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800523e:	4621      	mov	r1, r4
 8005240:	01ca      	lsls	r2, r1, #7
 8005242:	461c      	mov	r4, r3
 8005244:	4613      	mov	r3, r2
 8005246:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 800524a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800524e:	461a      	mov	r2, r3
 8005250:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005254:	fb03 f102 	mul.w	r1, r3, r2
 8005258:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800525c:	461a      	mov	r2, r3
 800525e:	4613      	mov	r3, r2
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	18ca      	adds	r2, r1, r3
 8005268:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800526c:	4413      	add	r3, r2
 800526e:	2200      	movs	r2, #0
 8005270:	64bb      	str	r3, [r7, #72]	; 0x48
 8005272:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005274:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005278:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800527c:	4621      	mov	r1, r4
 800527e:	1851      	adds	r1, r2, r1
 8005280:	6139      	str	r1, [r7, #16]
 8005282:	4629      	mov	r1, r5
 8005284:	eb43 0101 	adc.w	r1, r3, r1
 8005288:	6179      	str	r1, [r7, #20]
 800528a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800528e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Convert to milliseconds
	unix_tm_val *= 1000;
 8005292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	f04f 0400 	mov.w	r4, #0
 800529e:	f04f 0500 	mov.w	r5, #0
 80052a2:	015d      	lsls	r5, r3, #5
 80052a4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80052a8:	0154      	lsls	r4, r2, #5
 80052aa:	4622      	mov	r2, r4
 80052ac:	462b      	mov	r3, r5
 80052ae:	ebb2 0a00 	subs.w	sl, r2, r0
 80052b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80052c2:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80052c6:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80052ca:	4692      	mov	sl, r2
 80052cc:	469b      	mov	fp, r3
 80052ce:	eb1a 0300 	adds.w	r3, sl, r0
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	eb4b 0301 	adc.w	r3, fp, r1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052e6:	4629      	mov	r1, r5
 80052e8:	00cb      	lsls	r3, r1, #3
 80052ea:	4621      	mov	r1, r4
 80052ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f0:	4621      	mov	r1, r4
 80052f2:	00ca      	lsls	r2, r1, #3
 80052f4:	461c      	mov	r4, r3
 80052f6:	4613      	mov	r3, r2
 80052f8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Add milliseconds
	unix_tm_val += milliseconds;
 80052fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005300:	2200      	movs	r2, #0
 8005302:	643b      	str	r3, [r7, #64]	; 0x40
 8005304:	647a      	str	r2, [r7, #68]	; 0x44
 8005306:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800530a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800530e:	4621      	mov	r1, r4
 8005310:	1851      	adds	r1, r2, r1
 8005312:	6039      	str	r1, [r7, #0]
 8005314:	4629      	mov	r1, r5
 8005316:	eb43 0101 	adc.w	r1, r3, r1
 800531a:	6079      	str	r1, [r7, #4]
 800531c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005320:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

	buffer[0] = ((unix_tm_val >> 40) & 0xFF);
 8005324:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	0a0a      	lsrs	r2, r1, #8
 8005332:	2300      	movs	r3, #0
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005338:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 32) & 0xFF);
 800533a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	000a      	movs	r2, r1
 8005348:	2300      	movs	r3, #0
 800534a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800534c:	3101      	adds	r1, #1
 800534e:	b2d3      	uxtb	r3, r2
 8005350:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 24) & 0xFF);
 8005352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	0e02      	lsrs	r2, r0, #24
 8005360:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005364:	0e0b      	lsrs	r3, r1, #24
 8005366:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005368:	3102      	adds	r1, #2
 800536a:	b2d3      	uxtb	r3, r2
 800536c:	700b      	strb	r3, [r1, #0]
	buffer[3] = ((unix_tm_val >> 16) & 0xFF);
 800536e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	0c02      	lsrs	r2, r0, #16
 800537c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005380:	0c0b      	lsrs	r3, r1, #16
 8005382:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005384:	3103      	adds	r1, #3
 8005386:	b2d3      	uxtb	r3, r2
 8005388:	700b      	strb	r3, [r1, #0]
	buffer[4] = ((unix_tm_val >> 8) & 0xFF);
 800538a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	0a02      	lsrs	r2, r0, #8
 8005398:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800539c:	0a0b      	lsrs	r3, r1, #8
 800539e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80053a0:	3104      	adds	r1, #4
 80053a2:	b2d3      	uxtb	r3, r2
 80053a4:	700b      	strb	r3, [r1, #0]
	buffer[5] = unix_tm_val & 0xFF;
 80053a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a8:	3305      	adds	r3, #5
 80053aa:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80053ae:	701a      	strb	r2, [r3, #0]
}
 80053b0:	bf00      	nop
 80053b2:	3794      	adds	r7, #148	; 0x94
 80053b4:	46bd      	mov	sp, r7
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	bf00      	nop
 80053bc:	24001af4 	.word	0x24001af4
 80053c0:	cccccccd 	.word	0xcccccccd
 80053c4:	51eb851f 	.word	0x51eb851f
 80053c8:	66666667 	.word	0x66666667
 80053cc:	fff50537 	.word	0xfff50537

080053d0 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08c      	sub	sp, #48	; 0x30
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	789b      	ldrb	r3, [r3, #2]
 80053e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	78db      	ldrb	r3, [r3, #3]
 80053ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	791b      	ldrb	r3, [r3, #4]
 80053f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	795b      	ldrb	r3, [r3, #5]
 80053fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	799b      	ldrb	r3, [r3, #6]
 8005404:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3307      	adds	r3, #7
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	b21a      	sxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3308      	adds	r3, #8
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b21b      	sxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b21b      	sxth	r3, r3
 800541e:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005428:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800542c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005430:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005438:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800543c:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 800543e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005442:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005444:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005448:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800544a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800544c:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 800544e:	f107 0320 	add.w	r3, r7, #32
 8005452:	2200      	movs	r2, #0
 8005454:	4619      	mov	r1, r3
 8005456:	480b      	ldr	r0, [pc, #44]	; (8005484 <calibrateRTC+0xb4>)
 8005458:	f00c fc5c 	bl	8011d14 <HAL_RTC_SetDate>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8005462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <calibrateRTC+0x9e>
		Error_Handler();
 800546a:	f7fe fb19 	bl	8003aa0 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	2200      	movs	r2, #0
 8005474:	4619      	mov	r1, r3
 8005476:	4803      	ldr	r0, [pc, #12]	; (8005484 <calibrateRTC+0xb4>)
 8005478:	f000 f806 	bl	8005488 <RTC_SetTime>
}
 800547c:	bf00      	nop
 800547e:	3730      	adds	r7, #48	; 0x30
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	24001af4 	.word	0x24001af4

08005488 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <RTC_SetTime+0x1a>
 800549e:	2302      	movs	r3, #2
 80054a0:	e051      	b.n	8005546 <RTC_SetTime+0xbe>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	22ca      	movs	r2, #202	; 0xca
 80054b8:	625a      	str	r2, [r3, #36]	; 0x24
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2253      	movs	r2, #83	; 0x53
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f00c fd20 	bl	8011f08 <RTC_EnterInitMode>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d129      	bne.n	8005526 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2200      	movs	r2, #0
 80054d6:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f00c fd85 	bl	8011fec <RTC_ByteToBcd2>
 80054e2:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80054e4:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f00c fd7e 	bl	8011fec <RTC_ByteToBcd2>
 80054f0:	4603      	mov	r3, r0
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	789b      	ldrb	r3, [r3, #2]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f00c fd76 	bl	8011fec <RTC_ByteToBcd2>
 8005500:	4603      	mov	r3, r0
 8005502:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	78db      	ldrb	r3, [r3, #3]
 800550a:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	6939      	ldr	r1, [r7, #16]
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <RTC_SetTime+0xc8>)
 8005518:	400b      	ands	r3, r1
 800551a:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f00c fd27 	bl	8011f70 <RTC_ExitInitMode>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	22ff      	movs	r2, #255	; 0xff
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005544:	7dfb      	ldrb	r3, [r7, #23]

}
 8005546:	4618      	mov	r0, r3
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	007f7f7f 	.word	0x007f7f7f

08005554 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005558:	4b30      	ldr	r3, [pc, #192]	; (800561c <MX_USART1_UART_Init+0xc8>)
 800555a:	4a31      	ldr	r2, [pc, #196]	; (8005620 <MX_USART1_UART_Init+0xcc>)
 800555c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800555e:	4b2f      	ldr	r3, [pc, #188]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005560:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005566:	4b2d      	ldr	r3, [pc, #180]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <MX_USART1_UART_Init+0xc8>)
 800556e:	2200      	movs	r2, #0
 8005570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005572:	4b2a      	ldr	r3, [pc, #168]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005578:	4b28      	ldr	r3, [pc, #160]	; (800561c <MX_USART1_UART_Init+0xc8>)
 800557a:	220c      	movs	r2, #12
 800557c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800557e:	4b27      	ldr	r3, [pc, #156]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005580:	2200      	movs	r2, #0
 8005582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005584:	4b25      	ldr	r3, [pc, #148]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005586:	2200      	movs	r2, #0
 8005588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <MX_USART1_UART_Init+0xc8>)
 800558c:	2200      	movs	r2, #0
 800558e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005592:	2200      	movs	r2, #0
 8005594:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005598:	2200      	movs	r2, #0
 800559a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800559c:	481f      	ldr	r0, [pc, #124]	; (800561c <MX_USART1_UART_Init+0xc8>)
 800559e:	f00e ff07 	bl	80143b0 <HAL_UART_Init>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80055a8:	f7fe fa7a 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055ac:	2100      	movs	r1, #0
 80055ae:	481b      	ldr	r0, [pc, #108]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055b0:	f011 fc4d 	bl	8016e4e <HAL_UARTEx_SetTxFifoThreshold>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80055ba:	f7fe fa71 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055be:	2100      	movs	r1, #0
 80055c0:	4816      	ldr	r0, [pc, #88]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055c2:	f011 fc82 	bl	8016eca <HAL_UARTEx_SetRxFifoThreshold>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80055cc:	f7fe fa68 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80055d0:	4812      	ldr	r0, [pc, #72]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055d2:	f011 fc03 	bl	8016ddc <HAL_UARTEx_DisableFifoMode>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80055dc:	f7fe fa60 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 80055e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055e4:	480d      	ldr	r0, [pc, #52]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055e6:	f011 fc70 	bl	8016eca <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 80055ea:	480c      	ldr	r0, [pc, #48]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055ec:	f011 fbbb 	bl	8016d66 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80055f0:	480a      	ldr	r0, [pc, #40]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055f2:	f011 fb85 	bl	8016d00 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <MX_USART1_UART_Init+0xc8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005604:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <MX_USART1_UART_Init+0xc8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <MX_USART1_UART_Init+0xc8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005614:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005616:	bf00      	nop
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	24001e3c 	.word	0x24001e3c
 8005620:	40011000 	.word	0x40011000

08005624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b0ba      	sub	sp, #232	; 0xe8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800562c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800563c:	f107 0310 	add.w	r3, r7, #16
 8005640:	22c0      	movs	r2, #192	; 0xc0
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f015 f871 	bl	801a72c <memset>
  if(uartHandle->Instance==USART1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a41      	ldr	r2, [pc, #260]	; (8005754 <HAL_UART_MspInit+0x130>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d17b      	bne.n	800574c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005654:	f04f 0201 	mov.w	r2, #1
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005660:	2318      	movs	r3, #24
 8005662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005666:	f107 0310 	add.w	r3, r7, #16
 800566a:	4618      	mov	r0, r3
 800566c:	f009 fcd8 	bl	800f020 <HAL_RCCEx_PeriphCLKConfig>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005676:	f7fe fa13 	bl	8003aa0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800567a:	4b37      	ldr	r3, [pc, #220]	; (8005758 <HAL_UART_MspInit+0x134>)
 800567c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005680:	4a35      	ldr	r2, [pc, #212]	; (8005758 <HAL_UART_MspInit+0x134>)
 8005682:	f043 0310 	orr.w	r3, r3, #16
 8005686:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800568a:	4b33      	ldr	r3, [pc, #204]	; (8005758 <HAL_UART_MspInit+0x134>)
 800568c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005698:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <HAL_UART_MspInit+0x134>)
 800569a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800569e:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <HAL_UART_MspInit+0x134>)
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <HAL_UART_MspInit+0x134>)
 80056aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056be:	2302      	movs	r3, #2
 80056c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056d0:	2307      	movs	r3, #7
 80056d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80056da:	4619      	mov	r1, r3
 80056dc:	481f      	ldr	r0, [pc, #124]	; (800575c <HAL_UART_MspInit+0x138>)
 80056de:	f005 feab 	bl	800b438 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80056e2:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_UART_MspInit+0x13c>)
 80056e4:	4a1f      	ldr	r2, [pc, #124]	; (8005764 <HAL_UART_MspInit+0x140>)
 80056e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80056e8:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <HAL_UART_MspInit+0x13c>)
 80056ea:	222a      	movs	r2, #42	; 0x2a
 80056ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <HAL_UART_MspInit+0x13c>)
 80056f0:	2240      	movs	r2, #64	; 0x40
 80056f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f4:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <HAL_UART_MspInit+0x13c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056fa:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_UART_MspInit+0x13c>)
 80056fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005700:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <HAL_UART_MspInit+0x13c>)
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005708:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_UART_MspInit+0x13c>)
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <HAL_UART_MspInit+0x13c>)
 8005710:	2200      	movs	r2, #0
 8005712:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <HAL_UART_MspInit+0x13c>)
 8005716:	2200      	movs	r2, #0
 8005718:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <HAL_UART_MspInit+0x13c>)
 800571c:	2200      	movs	r2, #0
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005720:	480f      	ldr	r0, [pc, #60]	; (8005760 <HAL_UART_MspInit+0x13c>)
 8005722:	f002 fd59 	bl	80081d8 <HAL_DMA_Init>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800572c:	f7fe f9b8 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <HAL_UART_MspInit+0x13c>)
 8005734:	67da      	str	r2, [r3, #124]	; 0x7c
 8005736:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <HAL_UART_MspInit+0x13c>)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800573c:	2200      	movs	r2, #0
 800573e:	2105      	movs	r1, #5
 8005740:	2025      	movs	r0, #37	; 0x25
 8005742:	f002 f91b 	bl	800797c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005746:	2025      	movs	r0, #37	; 0x25
 8005748:	f002 f932 	bl	80079b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800574c:	bf00      	nop
 800574e:	37e8      	adds	r7, #232	; 0xe8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40011000 	.word	0x40011000
 8005758:	58024400 	.word	0x58024400
 800575c:	58020000 	.word	0x58020000
 8005760:	24001ed0 	.word	0x24001ed0
 8005764:	40020040 	.word	0x40020040

08005768 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005772:	4bc2      	ldr	r3, [pc, #776]	; (8005a7c <voltage_monitor_init+0x314>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005778:	4bc0      	ldr	r3, [pc, #768]	; (8005a7c <voltage_monitor_init+0x314>)
 800577a:	2200      	movs	r2, #0
 800577c:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 800577e:	4bbf      	ldr	r3, [pc, #764]	; (8005a7c <voltage_monitor_init+0x314>)
 8005780:	2201      	movs	r2, #1
 8005782:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005784:	4bbd      	ldr	r3, [pc, #756]	; (8005a7c <voltage_monitor_init+0x314>)
 8005786:	2200      	movs	r2, #0
 8005788:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 800578a:	4bbc      	ldr	r3, [pc, #752]	; (8005a7c <voltage_monitor_init+0x314>)
 800578c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005790:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8005792:	4bba      	ldr	r3, [pc, #744]	; (8005a7c <voltage_monitor_init+0x314>)
 8005794:	2200      	movs	r2, #0
 8005796:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8005798:	4bb8      	ldr	r3, [pc, #736]	; (8005a7c <voltage_monitor_init+0x314>)
 800579a:	2201      	movs	r2, #1
 800579c:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 800579e:	4bb7      	ldr	r3, [pc, #732]	; (8005a7c <voltage_monitor_init+0x314>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80057a4:	4bb5      	ldr	r3, [pc, #724]	; (8005a7c <voltage_monitor_init+0x314>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80057aa:	4bb4      	ldr	r3, [pc, #720]	; (8005a7c <voltage_monitor_init+0x314>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057b0:	4bb2      	ldr	r3, [pc, #712]	; (8005a7c <voltage_monitor_init+0x314>)
 80057b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80057b6:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80057b8:	4bb0      	ldr	r3, [pc, #704]	; (8005a7c <voltage_monitor_init+0x314>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80057be:	4baf      	ldr	r3, [pc, #700]	; (8005a7c <voltage_monitor_init+0x314>)
 80057c0:	2202      	movs	r2, #2
 80057c2:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80057c4:	4bad      	ldr	r3, [pc, #692]	; (8005a7c <voltage_monitor_init+0x314>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80057ca:	4bac      	ldr	r3, [pc, #688]	; (8005a7c <voltage_monitor_init+0x314>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80057d0:	4baa      	ldr	r3, [pc, #680]	; (8005a7c <voltage_monitor_init+0x314>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057d6:	4ba9      	ldr	r3, [pc, #676]	; (8005a7c <voltage_monitor_init+0x314>)
 80057d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80057dc:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80057de:	4ba7      	ldr	r3, [pc, #668]	; (8005a7c <voltage_monitor_init+0x314>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80057e4:	4ba5      	ldr	r3, [pc, #660]	; (8005a7c <voltage_monitor_init+0x314>)
 80057e6:	2203      	movs	r2, #3
 80057e8:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80057ea:	4ba4      	ldr	r3, [pc, #656]	; (8005a7c <voltage_monitor_init+0x314>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80057f0:	4ba2      	ldr	r3, [pc, #648]	; (8005a7c <voltage_monitor_init+0x314>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80057f8:	4ba0      	ldr	r3, [pc, #640]	; (8005a7c <voltage_monitor_init+0x314>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057fe:	4b9f      	ldr	r3, [pc, #636]	; (8005a7c <voltage_monitor_init+0x314>)
 8005800:	f242 7210 	movw	r2, #10000	; 0x2710
 8005804:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005806:	4b9d      	ldr	r3, [pc, #628]	; (8005a7c <voltage_monitor_init+0x314>)
 8005808:	2200      	movs	r2, #0
 800580a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800580c:	4b9b      	ldr	r3, [pc, #620]	; (8005a7c <voltage_monitor_init+0x314>)
 800580e:	2204      	movs	r2, #4
 8005810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005814:	4b99      	ldr	r3, [pc, #612]	; (8005a7c <voltage_monitor_init+0x314>)
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800581c:	4b97      	ldr	r3, [pc, #604]	; (8005a7c <voltage_monitor_init+0x314>)
 800581e:	2201      	movs	r2, #1
 8005820:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005824:	4b95      	ldr	r3, [pc, #596]	; (8005a7c <voltage_monitor_init+0x314>)
 8005826:	2200      	movs	r2, #0
 8005828:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800582a:	4b94      	ldr	r3, [pc, #592]	; (8005a7c <voltage_monitor_init+0x314>)
 800582c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005830:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005832:	4b92      	ldr	r3, [pc, #584]	; (8005a7c <voltage_monitor_init+0x314>)
 8005834:	2200      	movs	r2, #0
 8005836:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005838:	4b90      	ldr	r3, [pc, #576]	; (8005a7c <voltage_monitor_init+0x314>)
 800583a:	2205      	movs	r2, #5
 800583c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005840:	4b8e      	ldr	r3, [pc, #568]	; (8005a7c <voltage_monitor_init+0x314>)
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005848:	4b8c      	ldr	r3, [pc, #560]	; (8005a7c <voltage_monitor_init+0x314>)
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005850:	4b8a      	ldr	r3, [pc, #552]	; (8005a7c <voltage_monitor_init+0x314>)
 8005852:	2200      	movs	r2, #0
 8005854:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005856:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <voltage_monitor_init+0x314>)
 8005858:	f242 7210 	movw	r2, #10000	; 0x2710
 800585c:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 800585e:	4b87      	ldr	r3, [pc, #540]	; (8005a7c <voltage_monitor_init+0x314>)
 8005860:	2200      	movs	r2, #0
 8005862:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005864:	4b85      	ldr	r3, [pc, #532]	; (8005a7c <voltage_monitor_init+0x314>)
 8005866:	2206      	movs	r2, #6
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 800586c:	4b83      	ldr	r3, [pc, #524]	; (8005a7c <voltage_monitor_init+0x314>)
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 0;
 8005874:	4b81      	ldr	r3, [pc, #516]	; (8005a7c <voltage_monitor_init+0x314>)
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 800587c:	4b7f      	ldr	r3, [pc, #508]	; (8005a7c <voltage_monitor_init+0x314>)
 800587e:	2200      	movs	r2, #0
 8005880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005884:	4b7d      	ldr	r3, [pc, #500]	; (8005a7c <voltage_monitor_init+0x314>)
 8005886:	f242 7210 	movw	r2, #10000	; 0x2710
 800588a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 800588e:	4b7b      	ldr	r3, [pc, #492]	; (8005a7c <voltage_monitor_init+0x314>)
 8005890:	2200      	movs	r2, #0
 8005892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8005896:	4b79      	ldr	r3, [pc, #484]	; (8005a7c <voltage_monitor_init+0x314>)
 8005898:	2207      	movs	r2, #7
 800589a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 800589e:	4b77      	ldr	r3, [pc, #476]	; (8005a7c <voltage_monitor_init+0x314>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 0;
 80058a6:	4b75      	ldr	r3, [pc, #468]	; (8005a7c <voltage_monitor_init+0x314>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80058ae:	4b73      	ldr	r3, [pc, #460]	; (8005a7c <voltage_monitor_init+0x314>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80058b6:	4b71      	ldr	r3, [pc, #452]	; (8005a7c <voltage_monitor_init+0x314>)
 80058b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80058bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80058c0:	4b6e      	ldr	r3, [pc, #440]	; (8005a7c <voltage_monitor_init+0x314>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80058c8:	4b6c      	ldr	r3, [pc, #432]	; (8005a7c <voltage_monitor_init+0x314>)
 80058ca:	2208      	movs	r2, #8
 80058cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80058d0:	4b6a      	ldr	r3, [pc, #424]	; (8005a7c <voltage_monitor_init+0x314>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80058d8:	4b68      	ldr	r3, [pc, #416]	; (8005a7c <voltage_monitor_init+0x314>)
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80058e0:	4b66      	ldr	r3, [pc, #408]	; (8005a7c <voltage_monitor_init+0x314>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80058e8:	4b64      	ldr	r3, [pc, #400]	; (8005a7c <voltage_monitor_init+0x314>)
 80058ea:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80058ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80058f2:	4b62      	ldr	r3, [pc, #392]	; (8005a7c <voltage_monitor_init+0x314>)
 80058f4:	f640 3283 	movw	r2, #2947	; 0xb83
 80058f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80058fc:	4b5f      	ldr	r3, [pc, #380]	; (8005a7c <voltage_monitor_init+0x314>)
 80058fe:	2209      	movs	r2, #9
 8005900:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005904:	4b5d      	ldr	r3, [pc, #372]	; (8005a7c <voltage_monitor_init+0x314>)
 8005906:	2200      	movs	r2, #0
 8005908:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 800590c:	4b5b      	ldr	r3, [pc, #364]	; (8005a7c <voltage_monitor_init+0x314>)
 800590e:	2200      	movs	r2, #0
 8005910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005914:	4b59      	ldr	r3, [pc, #356]	; (8005a7c <voltage_monitor_init+0x314>)
 8005916:	2200      	movs	r2, #0
 8005918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800591c:	4b57      	ldr	r3, [pc, #348]	; (8005a7c <voltage_monitor_init+0x314>)
 800591e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005922:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005926:	4b55      	ldr	r3, [pc, #340]	; (8005a7c <voltage_monitor_init+0x314>)
 8005928:	2200      	movs	r2, #0
 800592a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800592e:	4b53      	ldr	r3, [pc, #332]	; (8005a7c <voltage_monitor_init+0x314>)
 8005930:	220a      	movs	r2, #10
 8005932:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005936:	4b51      	ldr	r3, [pc, #324]	; (8005a7c <voltage_monitor_init+0x314>)
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800593e:	4b4f      	ldr	r3, [pc, #316]	; (8005a7c <voltage_monitor_init+0x314>)
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005946:	4b4d      	ldr	r3, [pc, #308]	; (8005a7c <voltage_monitor_init+0x314>)
 8005948:	2200      	movs	r2, #0
 800594a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 800594e:	4b4b      	ldr	r3, [pc, #300]	; (8005a7c <voltage_monitor_init+0x314>)
 8005950:	f640 7245 	movw	r2, #3909	; 0xf45
 8005954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8005958:	4b48      	ldr	r3, [pc, #288]	; (8005a7c <voltage_monitor_init+0x314>)
 800595a:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800595e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005962:	4b46      	ldr	r3, [pc, #280]	; (8005a7c <voltage_monitor_init+0x314>)
 8005964:	220b      	movs	r2, #11
 8005966:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <voltage_monitor_init+0x314>)
 800596c:	2200      	movs	r2, #0
 800596e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005972:	4b42      	ldr	r3, [pc, #264]	; (8005a7c <voltage_monitor_init+0x314>)
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800597a:	4b40      	ldr	r3, [pc, #256]	; (8005a7c <voltage_monitor_init+0x314>)
 800597c:	2200      	movs	r2, #0
 800597e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8005982:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <voltage_monitor_init+0x314>)
 8005984:	f640 72fb 	movw	r2, #4091	; 0xffb
 8005988:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 800598c:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <voltage_monitor_init+0x314>)
 800598e:	f640 6276 	movw	r2, #3702	; 0xe76
 8005992:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8005996:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <voltage_monitor_init+0x314>)
 8005998:	220c      	movs	r2, #12
 800599a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 800599e:	4b37      	ldr	r3, [pc, #220]	; (8005a7c <voltage_monitor_init+0x314>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80059a6:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <voltage_monitor_init+0x314>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80059ae:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <voltage_monitor_init+0x314>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80059b6:	4b31      	ldr	r3, [pc, #196]	; (8005a7c <voltage_monitor_init+0x314>)
 80059b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80059bc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80059c0:	4b2e      	ldr	r3, [pc, #184]	; (8005a7c <voltage_monitor_init+0x314>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80059c8:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <voltage_monitor_init+0x314>)
 80059ca:	220d      	movs	r2, #13
 80059cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80059d0:	4b2a      	ldr	r3, [pc, #168]	; (8005a7c <voltage_monitor_init+0x314>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80059d8:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <voltage_monitor_init+0x314>)
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80059e0:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <voltage_monitor_init+0x314>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80059e8:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <voltage_monitor_init+0x314>)
 80059ea:	f640 7238 	movw	r2, #3896	; 0xf38
 80059ee:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80059f2:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <voltage_monitor_init+0x314>)
 80059f4:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80059f8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80059fc:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <voltage_monitor_init+0x314>)
 80059fe:	220e      	movs	r2, #14
 8005a00:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005a04:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005a14:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a1e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005a22:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a28:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005a2c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005a30:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a32:	220f      	movs	r2, #15
 8005a34:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005a38:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005a40:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a52:	f241 0264 	movw	r2, #4196	; 0x1064
 8005a56:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005a62:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a64:	2210      	movs	r2, #16
 8005a66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8005a6a:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005a72:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <voltage_monitor_init+0x314>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8005a7a:	e001      	b.n	8005a80 <voltage_monitor_init+0x318>
 8005a7c:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005a8a:	f640 5208 	movw	r2, #3336	; 0xd08
 8005a8e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005a94:	f640 32ca 	movw	r2, #3018	; 0xbca
 8005a98:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005a9e:	2211      	movs	r2, #17
 8005aa0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005abc:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005abe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ac2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005ac6:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <voltage_monitor_init+0x378>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	71fb      	strb	r3, [r7, #7]

	return status;
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	24001f48 	.word	0x24001f48

08005ae4 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	460a      	mov	r2, r1
 8005aee:	71fb      	strb	r3, [r7, #7]
 8005af0:	4613      	mov	r3, r2
 8005af2:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005af8:	79fa      	ldrb	r2, [r7, #7]
 8005afa:	4909      	ldr	r1, [pc, #36]	; (8005b20 <set_rail_monitor_enable+0x3c>)
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	440b      	add	r3, r1
 8005b06:	3302      	adds	r3, #2
 8005b08:	79ba      	ldrb	r2, [r7, #6]
 8005b0a:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]

	return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	24001f48 	.word	0x24001f48

08005b24 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005b30:	463b      	mov	r3, r7
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe faf2 	bl	800411c <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005b38:	f107 0310 	add.w	r3, r7, #16
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fb1d 	bl	800417c <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fb6a 	bl	8004220 <sample_hk_adc3>
 8005b4c:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005b4e:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b50:	809a      	strh	r2, [r3, #4]
 8005b52:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005b54:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b56:	81da      	strh	r2, [r3, #14]
 8005b58:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005b5a:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b5c:	831a      	strh	r2, [r3, #24]
 8005b5e:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005b60:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b62:	845a      	strh	r2, [r3, #34]	; 0x22
 8005b64:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005b66:	4b1f      	ldr	r3, [pc, #124]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b68:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b70:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005b72:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005b78:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005b80:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005b82:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005b88:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005b8a:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005b90:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005b98:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <set_rail_monitor+0xc0>)
 8005b9c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005ba0:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <set_rail_monitor+0xc0>)
 8005ba4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005ba8:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <set_rail_monitor+0xc0>)
 8005bac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005bb0:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <set_rail_monitor+0xc0>)
 8005bb4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005bb8:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <set_rail_monitor+0xc0>)
 8005bbc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005bc0:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005bc2:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <set_rail_monitor+0xc0>)
 8005bc4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005bc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <set_rail_monitor+0xc0>)
 8005bcc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3728      	adds	r7, #40	; 0x28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	24001f48 	.word	0x24001f48

08005be8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005bec:	4b02      	ldr	r3, [pc, #8]	; (8005bf8 <get_rail_monitor+0x10>)
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	24001f48 	.word	0x24001f48

08005bfc <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005c0a:	89fb      	ldrh	r3, [r7, #14]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	db05      	blt.n	8005c1e <in_range+0x22>
 8005c12:	89fb      	ldrh	r3, [r7, #14]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	dc01      	bgt.n	8005c1e <in_range+0x22>
		return 1;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <in_range+0x24>
	}
	return 0;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	0000      	movs	r0, r0
	...

08005c30 <monitor_rails>:


void monitor_rails() {
 8005c30:	b590      	push	{r4, r7, lr}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e0bd      	b.n	8005db8 <monitor_rails+0x188>
		if (rail_monitor[i].is_enabled){
 8005c3c:	4966      	ldr	r1, [pc, #408]	; (8005dd8 <monitor_rails+0x1a8>)
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	440b      	add	r3, r1
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d056      	beq.n	8005d00 <monitor_rails+0xd0>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005c52:	4961      	ldr	r1, [pc, #388]	; (8005dd8 <monitor_rails+0x1a8>)
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	440b      	add	r3, r1
 8005c60:	3304      	adds	r3, #4
 8005c62:	8818      	ldrh	r0, [r3, #0]
 8005c64:	495c      	ldr	r1, [pc, #368]	; (8005dd8 <monitor_rails+0x1a8>)
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	440b      	add	r3, r1
 8005c72:	3308      	adds	r3, #8
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	461c      	mov	r4, r3
 8005c78:	4957      	ldr	r1, [pc, #348]	; (8005dd8 <monitor_rails+0x1a8>)
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	440b      	add	r3, r1
 8005c86:	3306      	adds	r3, #6
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	f7ff ffb5 	bl	8005bfc <in_range>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 808c 	bne.w	8005db2 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005c9a:	494f      	ldr	r1, [pc, #316]	; (8005dd8 <monitor_rails+0x1a8>)
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3301      	adds	r3, #1
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	b2d8      	uxtb	r0, r3
 8005cb0:	4949      	ldr	r1, [pc, #292]	; (8005dd8 <monitor_rails+0x1a8>)
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005cc4:	4944      	ldr	r1, [pc, #272]	; (8005dd8 <monitor_rails+0x1a8>)
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d16b      	bne.n	8005db2 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005cda:	493f      	ldr	r1, [pc, #252]	; (8005dd8 <monitor_rails+0x1a8>)
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	440b      	add	r3, r1
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f876 	bl	8005ddc <get_rail_name_error_detail>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	727b      	strb	r3, [r7, #9]
					error.category = EC_power_supply_rail;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	723b      	strb	r3, [r7, #8]
					handle_error(error);
 8005cf8:	68b8      	ldr	r0, [r7, #8]
 8005cfa:	f7fc f92f 	bl	8001f5c <handle_error>
 8005cfe:	e058      	b.n	8005db2 <monitor_rails+0x182>
			}
		}
		// If the rail monitor isn't enabled...
		else {
			uint16_t tolerance;
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8005d00:	4935      	ldr	r1, [pc, #212]	; (8005dd8 <monitor_rails+0x1a8>)
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3306      	adds	r3, #6
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005d1a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005dd0 <monitor_rails+0x1a0>
 8005d1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d26:	ee17 3a90 	vmov	r3, s15
 8005d2a:	817b      	strh	r3, [r7, #10]

			// If it isn't within +10% of its max voltage from 0...
			if (!in_range(rail_monitor[i].data, 0, tolerance)) {
 8005d2c:	492a      	ldr	r1, [pc, #168]	; (8005dd8 <monitor_rails+0x1a8>)
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	440b      	add	r3, r1
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	897a      	ldrh	r2, [r7, #10]
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff5a 	bl	8005bfc <in_range>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d131      	bne.n	8005db2 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005d4e:	4922      	ldr	r1, [pc, #136]	; (8005dd8 <monitor_rails+0x1a8>)
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2d8      	uxtb	r0, r3
 8005d64:	491c      	ldr	r1, [pc, #112]	; (8005dd8 <monitor_rails+0x1a8>)
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	440b      	add	r3, r1
 8005d72:	3301      	adds	r3, #1
 8005d74:	4602      	mov	r2, r0
 8005d76:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005d78:	4917      	ldr	r1, [pc, #92]	; (8005dd8 <monitor_rails+0x1a8>)
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	440b      	add	r3, r1
 8005d86:	3301      	adds	r3, #1
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d111      	bne.n	8005db2 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005d8e:	4912      	ldr	r1, [pc, #72]	; (8005dd8 <monitor_rails+0x1a8>)
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	440b      	add	r3, r1
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f81c 	bl	8005ddc <get_rail_name_error_detail>
 8005da4:	4603      	mov	r3, r0
 8005da6:	717b      	strb	r3, [r7, #5]
					error.category = EC_power_supply_rail;
 8005da8:	2300      	movs	r3, #0
 8005daa:	713b      	strb	r3, [r7, #4]
					handle_error(error);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc f8d5 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b11      	cmp	r3, #17
 8005dbc:	f77f af3e 	ble.w	8005c3c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd90      	pop	{r4, r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	9999999a 	.word	0x9999999a
 8005dd4:	3fb99999 	.word	0x3fb99999
 8005dd8:	24001f48 	.word	0x24001f48

08005ddc <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	2b11      	cmp	r3, #17
 8005dea:	d84b      	bhi.n	8005e84 <get_rail_name_error_detail+0xa8>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <get_rail_name_error_detail+0x18>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e41 	.word	0x08005e41
 8005dfc:	08005e45 	.word	0x08005e45
 8005e00:	08005e49 	.word	0x08005e49
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e55 	.word	0x08005e55
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e61 	.word	0x08005e61
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e6d 	.word	0x08005e6d
 8005e28:	08005e71 	.word	0x08005e71
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005e7d 	.word	0x08005e7d
 8005e38:	08005e81 	.word	0x08005e81
	case RAIL_vsense:
		return ED_vsense;
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	e022      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005e40:	2307      	movs	r3, #7
 8005e42:	e020      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005e44:	2308      	movs	r3, #8
 8005e46:	e01e      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005e48:	2309      	movs	r3, #9
 8005e4a:	e01c      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005e4c:	230a      	movs	r3, #10
 8005e4e:	e01a      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005e50:	230b      	movs	r3, #11
 8005e52:	e018      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005e54:	230c      	movs	r3, #12
 8005e56:	e016      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005e58:	230d      	movs	r3, #13
 8005e5a:	e014      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005e5c:	230e      	movs	r3, #14
 8005e5e:	e012      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005e60:	230f      	movs	r3, #15
 8005e62:	e010      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005e64:	2310      	movs	r3, #16
 8005e66:	e00e      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005e68:	2311      	movs	r3, #17
 8005e6a:	e00c      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005e6c:	2312      	movs	r3, #18
 8005e6e:	e00a      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005e70:	2313      	movs	r3, #19
 8005e72:	e008      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005e74:	2314      	movs	r3, #20
 8005e76:	e006      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005e78:	2315      	movs	r3, #21
 8005e7a:	e004      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005e7c:	2316      	movs	r3, #22
 8005e7e:	e002      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005e80:	2317      	movs	r3, #23
 8005e82:	e000      	b.n	8005e86 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005e84:	231a      	movs	r3, #26
	}
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ecc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e98:	f7fe fe4a 	bl	8004b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e9c:	480c      	ldr	r0, [pc, #48]	; (8005ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e9e:	490d      	ldr	r1, [pc, #52]	; (8005ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ea0:	4a0d      	ldr	r2, [pc, #52]	; (8005ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ea4:	e002      	b.n	8005eac <LoopCopyDataInit>

08005ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005eaa:	3304      	adds	r3, #4

08005eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005eb0:	d3f9      	bcc.n	8005ea6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005eb4:	4c0a      	ldr	r4, [pc, #40]	; (8005ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005eb8:	e001      	b.n	8005ebe <LoopFillZerobss>

08005eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ebc:	3204      	adds	r2, #4

08005ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ec0:	d3fb      	bcc.n	8005eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ec2:	f014 fc01 	bl	801a6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ec6:	f7fd fc09 	bl	80036dc <main>
  bx  lr
 8005eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ecc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005ed0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005ed4:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8005ed8:	0801b5f8 	.word	0x0801b5f8
  ldr r2, =_sbss
 8005edc:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005ee0:	2400697c 	.word	0x2400697c

08005ee4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ee4:	e7fe      	b.n	8005ee4 <ADC3_IRQHandler>
	...

08005ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eee:	2003      	movs	r0, #3
 8005ef0:	f001 fd39 	bl	8007966 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ef4:	f008 fe7c 	bl	800ebf0 <HAL_RCC_GetSysClockFreq>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <HAL_Init+0x68>)
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	4913      	ldr	r1, [pc, #76]	; (8005f54 <HAL_Init+0x6c>)
 8005f06:	5ccb      	ldrb	r3, [r1, r3]
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <HAL_Init+0x68>)
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	4a0e      	ldr	r2, [pc, #56]	; (8005f54 <HAL_Init+0x6c>)
 8005f1c:	5cd3      	ldrb	r3, [r2, r3]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_Init+0x70>)
 8005f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f2c:	4a0b      	ldr	r2, [pc, #44]	; (8005f5c <HAL_Init+0x74>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f32:	2005      	movs	r0, #5
 8005f34:	f7fe fbe6 	bl	8004704 <HAL_InitTick>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e002      	b.n	8005f48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005f42:	f7fe fbc1 	bl	80046c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	58024400 	.word	0x58024400
 8005f54:	0801b544 	.word	0x0801b544
 8005f58:	240000c4 	.word	0x240000c4
 8005f5c:	240000c0 	.word	0x240000c0

08005f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <HAL_IncTick+0x20>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_IncTick+0x24>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4413      	add	r3, r2
 8005f70:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <HAL_IncTick+0x24>)
 8005f72:	6013      	str	r3, [r2, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	240000cc 	.word	0x240000cc
 8005f84:	24001ffc 	.word	0x24001ffc

08005f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <HAL_GetTick+0x14>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	24001ffc 	.word	0x24001ffc

08005fa0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005fa4:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <HAL_GetREVID+0x14>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	0c1b      	lsrs	r3, r3, #16
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	5c001000 	.word	0x5c001000

08005fb8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	401a      	ands	r2, r3
 8005fcc:	4904      	ldr	r1, [pc, #16]	; (8005fe0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	604b      	str	r3, [r1, #4]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	58000400 	.word	0x58000400

08005fe4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3360      	adds	r3, #96	; 0x60
 800605e:	461a      	mov	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	430b      	orrs	r3, r1
 800607a:	431a      	orrs	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	611a      	str	r2, [r3, #16]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80060be:	b480      	push	{r7}
 80060c0:	b087      	sub	sp, #28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3360      	adds	r3, #96	; 0x60
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	601a      	str	r2, [r3, #0]
  }
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800611a:	b480      	push	{r7}
 800611c:	b087      	sub	sp, #28
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3330      	adds	r3, #48	; 0x30
 800612a:	461a      	mov	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	4413      	add	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	211f      	movs	r1, #31
 8006146:	fa01 f303 	lsl.w	r3, r1, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	401a      	ands	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	0e9b      	lsrs	r3, r3, #26
 8006152:	f003 011f 	and.w	r1, r3, #31
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	fa01 f303 	lsl.w	r3, r1, r3
 8006160:	431a      	orrs	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f023 0203 	bic.w	r2, r3, #3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3314      	adds	r3, #20
 80061a8:	461a      	mov	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	0e5b      	lsrs	r3, r3, #25
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	4413      	add	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0d1b      	lsrs	r3, r3, #20
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2107      	movs	r1, #7
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	43db      	mvns	r3, r3
 80061cc:	401a      	ands	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	0d1b      	lsrs	r3, r3, #20
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	431a      	orrs	r2, r3
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006208:	43db      	mvns	r3, r3
 800620a:	401a      	ands	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f003 0318 	and.w	r3, r3, #24
 8006212:	4908      	ldr	r1, [pc, #32]	; (8006234 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006214:	40d9      	lsrs	r1, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	400b      	ands	r3, r1
 800621a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800621e:	431a      	orrs	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	000fffff 	.word	0x000fffff

08006238 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 031f 	and.w	r3, r3, #31
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006262:	4013      	ands	r3, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6093      	str	r3, [r2, #8]
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	5fffffc0 	.word	0x5fffffc0

08006278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628c:	d101      	bne.n	8006292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	6fffffc0 	.word	0x6fffffc0

080062c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062dc:	d101      	bne.n	80062e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <LL_ADC_Enable+0x24>)
 80062fe:	4013      	ands	r3, r2
 8006300:	f043 0201 	orr.w	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	7fffffc0 	.word	0x7fffffc0

08006318 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <LL_ADC_Disable+0x24>)
 8006326:	4013      	ands	r3, r2
 8006328:	f043 0202 	orr.w	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	7fffffc0 	.word	0x7fffffc0

08006340 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <LL_ADC_IsEnabled+0x18>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <LL_ADC_IsEnabled+0x1a>
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d101      	bne.n	800637e <LL_ADC_IsDisableOngoing+0x18>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <LL_ADC_IsDisableOngoing+0x1a>
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <LL_ADC_REG_StartConversion+0x24>)
 800639a:	4013      	ands	r3, r2
 800639c:	f043 0204 	orr.w	r2, r3, #4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	7fffffc0 	.word	0x7fffffc0

080063b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d101      	bne.n	80063cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d101      	bne.n	80063f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b089      	sub	sp, #36	; 0x24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800640c:	2300      	movs	r3, #0
 800640e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e18f      	b.n	800673a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fa fa8f 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff ff19 	bl	8006278 <LL_ADC_IsDeepPowerDownEnabled>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff feff 	bl	8006254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff ff34 	bl	80062c8 <LL_ADC_IsInternalRegulatorEnabled>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d114      	bne.n	8006490 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff ff18 	bl	80062a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006470:	4b87      	ldr	r3, [pc, #540]	; (8006690 <HAL_ADC_Init+0x290>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	099b      	lsrs	r3, r3, #6
 8006476:	4a87      	ldr	r2, [pc, #540]	; (8006694 <HAL_ADC_Init+0x294>)
 8006478:	fba2 2303 	umull	r2, r3, r2, r3
 800647c:	099b      	lsrs	r3, r3, #6
 800647e:	3301      	adds	r3, #1
 8006480:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006482:	e002      	b.n	800648a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	3b01      	subs	r3, #1
 8006488:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f9      	bne.n	8006484 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff17 	bl	80062c8 <LL_ADC_IsInternalRegulatorEnabled>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10d      	bne.n	80064bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a4:	f043 0210 	orr.w	r2, r3, #16
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b0:	f043 0201 	orr.w	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff ff77 	bl	80063b4 <LL_ADC_REG_IsConversionOngoing>
 80064c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f040 8129 	bne.w	8006728 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f040 8125 	bne.w	8006728 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80064e6:	f043 0202 	orr.w	r2, r3, #2
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff ff24 	bl	8006340 <LL_ADC_IsEnabled>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d136      	bne.n	800656c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a65      	ldr	r2, [pc, #404]	; (8006698 <HAL_ADC_Init+0x298>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_ADC_Init+0x112>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a63      	ldr	r2, [pc, #396]	; (800669c <HAL_ADC_Init+0x29c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10e      	bne.n	8006530 <HAL_ADC_Init+0x130>
 8006512:	4861      	ldr	r0, [pc, #388]	; (8006698 <HAL_ADC_Init+0x298>)
 8006514:	f7ff ff14 	bl	8006340 <LL_ADC_IsEnabled>
 8006518:	4604      	mov	r4, r0
 800651a:	4860      	ldr	r0, [pc, #384]	; (800669c <HAL_ADC_Init+0x29c>)
 800651c:	f7ff ff10 	bl	8006340 <LL_ADC_IsEnabled>
 8006520:	4603      	mov	r3, r0
 8006522:	4323      	orrs	r3, r4
 8006524:	2b00      	cmp	r3, #0
 8006526:	bf0c      	ite	eq
 8006528:	2301      	moveq	r3, #1
 800652a:	2300      	movne	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	e008      	b.n	8006542 <HAL_ADC_Init+0x142>
 8006530:	485b      	ldr	r0, [pc, #364]	; (80066a0 <HAL_ADC_Init+0x2a0>)
 8006532:	f7ff ff05 	bl	8006340 <LL_ADC_IsEnabled>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d012      	beq.n	800656c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a53      	ldr	r2, [pc, #332]	; (8006698 <HAL_ADC_Init+0x298>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_ADC_Init+0x15a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a51      	ldr	r2, [pc, #324]	; (800669c <HAL_ADC_Init+0x29c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d101      	bne.n	800655e <HAL_ADC_Init+0x15e>
 800655a:	4a52      	ldr	r2, [pc, #328]	; (80066a4 <HAL_ADC_Init+0x2a4>)
 800655c:	e000      	b.n	8006560 <HAL_ADC_Init+0x160>
 800655e:	4a52      	ldr	r2, [pc, #328]	; (80066a8 <HAL_ADC_Init+0x2a8>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f7ff fd3c 	bl	8005fe4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800656c:	f7ff fd18 	bl	8005fa0 <HAL_GetREVID>
 8006570:	4603      	mov	r3, r0
 8006572:	f241 0203 	movw	r2, #4099	; 0x1003
 8006576:	4293      	cmp	r3, r2
 8006578:	d914      	bls.n	80065a4 <HAL_ADC_Init+0x1a4>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b10      	cmp	r3, #16
 8006580:	d110      	bne.n	80065a4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7d5b      	ldrb	r3, [r3, #21]
 8006586:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800658c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006592:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	7f1b      	ldrb	r3, [r3, #28]
 8006598:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800659a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800659c:	f043 030c 	orr.w	r3, r3, #12
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e00d      	b.n	80065c0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7d5b      	ldrb	r3, [r3, #21]
 80065a8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065ae:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80065b4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7f1b      	ldrb	r3, [r3, #28]
 80065ba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065bc:	4313      	orrs	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7f1b      	ldrb	r3, [r3, #28]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d106      	bne.n	80065d6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	045b      	lsls	r3, r3, #17
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <HAL_ADC_Init+0x2ac>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	69b9      	ldr	r1, [r7, #24]
 8006602:	430b      	orrs	r3, r1
 8006604:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fed2 	bl	80063b4 <LL_ADC_REG_IsConversionOngoing>
 8006610:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fedf 	bl	80063da <LL_ADC_INJ_IsConversionOngoing>
 800661c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d15f      	bne.n	80066e4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d15c      	bne.n	80066e4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	7d1b      	ldrb	r3, [r3, #20]
 800662e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8006634:	4313      	orrs	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <HAL_ADC_Init+0x2b0>)
 8006640:	4013      	ands	r3, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	69b9      	ldr	r1, [r7, #24]
 8006648:	430b      	orrs	r3, r1
 800664a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006652:	2b01      	cmp	r3, #1
 8006654:	d130      	bne.n	80066b8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <HAL_ADC_Init+0x2b4>)
 8006664:	4013      	ands	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800666a:	3a01      	subs	r2, #1
 800666c:	0411      	lsls	r1, r2, #16
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006672:	4311      	orrs	r1, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006678:	4311      	orrs	r1, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800667e:	430a      	orrs	r2, r1
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	611a      	str	r2, [r3, #16]
 800668c:	e01c      	b.n	80066c8 <HAL_ADC_Init+0x2c8>
 800668e:	bf00      	nop
 8006690:	240000c0 	.word	0x240000c0
 8006694:	053e2d63 	.word	0x053e2d63
 8006698:	40022000 	.word	0x40022000
 800669c:	40022100 	.word	0x40022100
 80066a0:	58026000 	.word	0x58026000
 80066a4:	40022300 	.word	0x40022300
 80066a8:	58026300 	.word	0x58026300
 80066ac:	fff0c003 	.word	0xfff0c003
 80066b0:	ffffbffc 	.word	0xffffbffc
 80066b4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fdec 	bl	80072bc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10c      	bne.n	8006706 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f023 010f 	bic.w	r1, r3, #15
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	1e5a      	subs	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
 8006704:	e007      	b.n	8006716 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 020f 	bic.w	r2, r2, #15
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	f043 0201 	orr.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	; 0x54
 8006726:	e007      	b.n	8006738 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	f043 0210 	orr.w	r2, r3, #16
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006738:	7ffb      	ldrb	r3, [r7, #31]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3724      	adds	r7, #36	; 0x24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	bf00      	nop

08006744 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a55      	ldr	r2, [pc, #340]	; (80068ac <HAL_ADC_Start_DMA+0x168>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_ADC_Start_DMA+0x20>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a54      	ldr	r2, [pc, #336]	; (80068b0 <HAL_ADC_Start_DMA+0x16c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d101      	bne.n	8006768 <HAL_ADC_Start_DMA+0x24>
 8006764:	4b53      	ldr	r3, [pc, #332]	; (80068b4 <HAL_ADC_Start_DMA+0x170>)
 8006766:	e000      	b.n	800676a <HAL_ADC_Start_DMA+0x26>
 8006768:	4b53      	ldr	r3, [pc, #332]	; (80068b8 <HAL_ADC_Start_DMA+0x174>)
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fd64 	bl	8006238 <LL_ADC_GetMultimode>
 8006770:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff fe1c 	bl	80063b4 <LL_ADC_REG_IsConversionOngoing>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 808c 	bne.w	800689c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_ADC_Start_DMA+0x4e>
 800678e:	2302      	movs	r3, #2
 8006790:	e087      	b.n	80068a2 <HAL_ADC_Start_DMA+0x15e>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d002      	beq.n	80067ac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b09      	cmp	r3, #9
 80067aa:	d170      	bne.n	800688e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 fc07 	bl	8006fc0 <ADC_Enable>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d163      	bne.n	8006884 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c0:	4b3e      	ldr	r3, [pc, #248]	; (80068bc <HAL_ADC_Start_DMA+0x178>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a37      	ldr	r2, [pc, #220]	; (80068b0 <HAL_ADC_Start_DMA+0x16c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d002      	beq.n	80067dc <HAL_ADC_Start_DMA+0x98>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	e000      	b.n	80067de <HAL_ADC_Start_DMA+0x9a>
 80067dc:	4b33      	ldr	r3, [pc, #204]	; (80068ac <HAL_ADC_Start_DMA+0x168>)
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d002      	beq.n	80067ec <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	f023 0206 	bic.w	r2, r3, #6
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	659a      	str	r2, [r3, #88]	; 0x58
 8006810:	e002      	b.n	8006818 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681c:	4a28      	ldr	r2, [pc, #160]	; (80068c0 <HAL_ADC_Start_DMA+0x17c>)
 800681e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006824:	4a27      	ldr	r2, [pc, #156]	; (80068c4 <HAL_ADC_Start_DMA+0x180>)
 8006826:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682c:	4a26      	ldr	r2, [pc, #152]	; (80068c8 <HAL_ADC_Start_DMA+0x184>)
 800682e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	221c      	movs	r2, #28
 8006836:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0210 	orr.w	r2, r2, #16
 800684e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7ff fc89 	bl	8006172 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3340      	adds	r3, #64	; 0x40
 800686a:	4619      	mov	r1, r3
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f002 f80e 	bl	8008890 <HAL_DMA_Start_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fd85 	bl	800638c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006882:	e00d      	b.n	80068a0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800688c:	e008      	b.n	80068a0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800689a:	e001      	b.n	80068a0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800689c:	2302      	movs	r3, #2
 800689e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40022000 	.word	0x40022000
 80068b0:	40022100 	.word	0x40022100
 80068b4:	40022300 	.word	0x40022300
 80068b8:	58026300 	.word	0x58026300
 80068bc:	fffff0fe 	.word	0xfffff0fe
 80068c0:	08007193 	.word	0x08007193
 80068c4:	0800726b 	.word	0x0800726b
 80068c8:	08007287 	.word	0x08007287

080068cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b0a1      	sub	sp, #132	; 0x84
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	4a65      	ldr	r2, [pc, #404]	; (8006ab8 <HAL_ADC_ConfigChannel+0x1b0>)
 8006922:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_ADC_ConfigChannel+0x2a>
 800692e:	2302      	movs	r3, #2
 8006930:	e32e      	b.n	8006f90 <HAL_ADC_ConfigChannel+0x688>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fd38 	bl	80063b4 <LL_ADC_REG_IsConversionOngoing>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 8313 	bne.w	8006f72 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	db2c      	blt.n	80069ae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695c:	2b00      	cmp	r3, #0
 800695e:	d108      	bne.n	8006972 <HAL_ADC_ConfigChannel+0x6a>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	0e9b      	lsrs	r3, r3, #26
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2201      	movs	r2, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	e016      	b.n	80069a0 <HAL_ADC_ConfigChannel+0x98>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800697a:	fa93 f3a3 	rbit	r3, r3
 800697e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006982:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800698a:	2320      	movs	r3, #32
 800698c:	e003      	b.n	8006996 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800698e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006990:	fab3 f383 	clz	r3, r3
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2201      	movs	r2, #1
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	69d1      	ldr	r1, [r2, #28]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	430b      	orrs	r3, r1
 80069ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6859      	ldr	r1, [r3, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f7ff fbad 	bl	800611a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fcf5 	bl	80063b4 <LL_ADC_REG_IsConversionOngoing>
 80069ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fd02 	bl	80063da <LL_ADC_INJ_IsConversionOngoing>
 80069d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 80b8 	bne.w	8006b50 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80069e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f040 80b4 	bne.w	8006b50 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6819      	ldr	r1, [r3, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	461a      	mov	r2, r3
 80069f6:	f7ff fbcf 	bl	8006198 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_ADC_ConfigChannel+0x1b4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a06:	d10b      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x118>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	695a      	ldr	r2, [r3, #20]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	089b      	lsrs	r3, r3, #2
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	e01d      	b.n	8006a5c <HAL_ADC_ConfigChannel+0x154>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <HAL_ADC_ConfigChannel+0x13e>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	e00a      	b.n	8006a5c <HAL_ADC_ConfigChannel+0x154>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695a      	ldr	r2, [r3, #20]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	089b      	lsrs	r3, r3, #2
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d02c      	beq.n	8006ac0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6919      	ldr	r1, [r3, #16]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a74:	f7ff faea 	bl	800604c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6919      	ldr	r1, [r3, #16]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	7e5b      	ldrb	r3, [r3, #25]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d102      	bne.n	8006a8e <HAL_ADC_ConfigChannel+0x186>
 8006a88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a8c:	e000      	b.n	8006a90 <HAL_ADC_ConfigChannel+0x188>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	461a      	mov	r2, r3
 8006a92:	f7ff fb14 	bl	80060be <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6919      	ldr	r1, [r3, #16]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	7e1b      	ldrb	r3, [r3, #24]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d102      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x1a4>
 8006aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aaa:	e000      	b.n	8006aae <HAL_ADC_ConfigChannel+0x1a6>
 8006aac:	2300      	movs	r3, #0
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f7ff faec 	bl	800608c <LL_ADC_SetDataRightShift>
 8006ab4:	e04c      	b.n	8006b50 <HAL_ADC_ConfigChannel+0x248>
 8006ab6:	bf00      	nop
 8006ab8:	47ff0000 	.word	0x47ff0000
 8006abc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	069b      	lsls	r3, r3, #26
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d107      	bne.n	8006ae4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ae2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	069b      	lsls	r3, r3, #26
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d107      	bne.n	8006b08 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b06:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	069b      	lsls	r3, r3, #26
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d107      	bne.n	8006b2c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b2a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	069b      	lsls	r3, r3, #26
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d107      	bne.n	8006b50 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fbf3 	bl	8006340 <LL_ADC_IsEnabled>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 8211 	bne.w	8006f84 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6819      	ldr	r1, [r3, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f7ff fb3e 	bl	80061f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4aa1      	ldr	r2, [pc, #644]	; (8006e00 <HAL_ADC_ConfigChannel+0x4f8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	f040 812e 	bne.w	8006ddc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <HAL_ADC_ConfigChannel+0x2a0>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	0e9b      	lsrs	r3, r3, #26
 8006b96:	3301      	adds	r3, #1
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b09      	cmp	r3, #9
 8006b9e:	bf94      	ite	ls
 8006ba0:	2301      	movls	r3, #1
 8006ba2:	2300      	movhi	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	e019      	b.n	8006bdc <HAL_ADC_ConfigChannel+0x2d4>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb0:	fa93 f3a3 	rbit	r3, r3
 8006bb4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	e003      	b.n	8006bcc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc6:	fab3 f383 	clz	r3, r3
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	3301      	adds	r3, #1
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2b09      	cmp	r3, #9
 8006bd4:	bf94      	ite	ls
 8006bd6:	2301      	movls	r3, #1
 8006bd8:	2300      	movhi	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d079      	beq.n	8006cd4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d107      	bne.n	8006bfc <HAL_ADC_ConfigChannel+0x2f4>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	0e9b      	lsrs	r3, r3, #26
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	069b      	lsls	r3, r3, #26
 8006bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bfa:	e015      	b.n	8006c28 <HAL_ADC_ConfigChannel+0x320>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c04:	fa93 f3a3 	rbit	r3, r3
 8006c08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006c14:	2320      	movs	r3, #32
 8006c16:	e003      	b.n	8006c20 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1a:	fab3 f383 	clz	r3, r3
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	3301      	adds	r3, #1
 8006c22:	069b      	lsls	r3, r3, #26
 8006c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <HAL_ADC_ConfigChannel+0x340>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	0e9b      	lsrs	r3, r3, #26
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	e017      	b.n	8006c78 <HAL_ADC_ConfigChannel+0x370>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c50:	fa93 f3a3 	rbit	r3, r3
 8006c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006c60:	2320      	movs	r3, #32
 8006c62:	e003      	b.n	8006c6c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c66:	fab3 f383 	clz	r3, r3
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	2101      	movs	r1, #1
 8006c74:	fa01 f303 	lsl.w	r3, r1, r3
 8006c78:	ea42 0103 	orr.w	r1, r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <HAL_ADC_ConfigChannel+0x396>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	0e9b      	lsrs	r3, r3, #26
 8006c8e:	3301      	adds	r3, #1
 8006c90:	f003 021f 	and.w	r2, r3, #31
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	051b      	lsls	r3, r3, #20
 8006c9c:	e018      	b.n	8006cd0 <HAL_ADC_ConfigChannel+0x3c8>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca6:	fa93 f3a3 	rbit	r3, r3
 8006caa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006cb6:	2320      	movs	r3, #32
 8006cb8:	e003      	b.n	8006cc2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	fab3 f383 	clz	r3, r3
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f003 021f 	and.w	r2, r3, #31
 8006cc8:	4613      	mov	r3, r2
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	4413      	add	r3, r2
 8006cce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	e07e      	b.n	8006dd2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d107      	bne.n	8006cf0 <HAL_ADC_ConfigChannel+0x3e8>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	0e9b      	lsrs	r3, r3, #26
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	069b      	lsls	r3, r3, #26
 8006cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006cee:	e015      	b.n	8006d1c <HAL_ADC_ConfigChannel+0x414>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	fa93 f3a3 	rbit	r3, r3
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006d08:	2320      	movs	r3, #32
 8006d0a:	e003      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	fab3 f383 	clz	r3, r3
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	3301      	adds	r3, #1
 8006d16:	069b      	lsls	r3, r3, #26
 8006d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d109      	bne.n	8006d3c <HAL_ADC_ConfigChannel+0x434>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	0e9b      	lsrs	r3, r3, #26
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2101      	movs	r1, #1
 8006d36:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3a:	e017      	b.n	8006d6c <HAL_ADC_ConfigChannel+0x464>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	fa93 f3a3 	rbit	r3, r3
 8006d48:	61bb      	str	r3, [r7, #24]
  return result;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006d54:	2320      	movs	r3, #32
 8006d56:	e003      	b.n	8006d60 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	fab3 f383 	clz	r3, r3
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	3301      	adds	r3, #1
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2101      	movs	r1, #1
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	ea42 0103 	orr.w	r1, r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10d      	bne.n	8006d98 <HAL_ADC_ConfigChannel+0x490>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	0e9b      	lsrs	r3, r3, #26
 8006d82:	3301      	adds	r3, #1
 8006d84:	f003 021f 	and.w	r2, r3, #31
 8006d88:	4613      	mov	r3, r2
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3b1e      	subs	r3, #30
 8006d90:	051b      	lsls	r3, r3, #20
 8006d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d96:	e01b      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x4c8>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	fa93 f3a3 	rbit	r3, r3
 8006da4:	60fb      	str	r3, [r7, #12]
  return result;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006db0:	2320      	movs	r3, #32
 8006db2:	e003      	b.n	8006dbc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	fab3 f383 	clz	r3, r3
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	f003 021f 	and.w	r2, r3, #31
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3b1e      	subs	r3, #30
 8006dca:	051b      	lsls	r3, r3, #20
 8006dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	6892      	ldr	r2, [r2, #8]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f7ff f9de 	bl	8006198 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f280 80cf 	bge.w	8006f84 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a06      	ldr	r2, [pc, #24]	; (8006e04 <HAL_ADC_ConfigChannel+0x4fc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_ADC_ConfigChannel+0x4f2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a04      	ldr	r2, [pc, #16]	; (8006e08 <HAL_ADC_ConfigChannel+0x500>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10a      	bne.n	8006e10 <HAL_ADC_ConfigChannel+0x508>
 8006dfa:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <HAL_ADC_ConfigChannel+0x504>)
 8006dfc:	e009      	b.n	8006e12 <HAL_ADC_ConfigChannel+0x50a>
 8006dfe:	bf00      	nop
 8006e00:	47ff0000 	.word	0x47ff0000
 8006e04:	40022000 	.word	0x40022000
 8006e08:	40022100 	.word	0x40022100
 8006e0c:	40022300 	.word	0x40022300
 8006e10:	4b61      	ldr	r3, [pc, #388]	; (8006f98 <HAL_ADC_ConfigChannel+0x690>)
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff f90c 	bl	8006030 <LL_ADC_GetCommonPathInternalCh>
 8006e18:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a5f      	ldr	r2, [pc, #380]	; (8006f9c <HAL_ADC_ConfigChannel+0x694>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <HAL_ADC_ConfigChannel+0x526>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a5d      	ldr	r2, [pc, #372]	; (8006fa0 <HAL_ADC_ConfigChannel+0x698>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d10e      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x544>
 8006e2e:	485b      	ldr	r0, [pc, #364]	; (8006f9c <HAL_ADC_ConfigChannel+0x694>)
 8006e30:	f7ff fa86 	bl	8006340 <LL_ADC_IsEnabled>
 8006e34:	4604      	mov	r4, r0
 8006e36:	485a      	ldr	r0, [pc, #360]	; (8006fa0 <HAL_ADC_ConfigChannel+0x698>)
 8006e38:	f7ff fa82 	bl	8006340 <LL_ADC_IsEnabled>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4323      	orrs	r3, r4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf0c      	ite	eq
 8006e44:	2301      	moveq	r3, #1
 8006e46:	2300      	movne	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	e008      	b.n	8006e5e <HAL_ADC_ConfigChannel+0x556>
 8006e4c:	4855      	ldr	r0, [pc, #340]	; (8006fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8006e4e:	f7ff fa77 	bl	8006340 <LL_ADC_IsEnabled>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d07d      	beq.n	8006f5e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a50      	ldr	r2, [pc, #320]	; (8006fa8 <HAL_ADC_ConfigChannel+0x6a0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d130      	bne.n	8006ece <HAL_ADC_ConfigChannel+0x5c6>
 8006e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d12b      	bne.n	8006ece <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a4a      	ldr	r2, [pc, #296]	; (8006fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	f040 8081 	bne.w	8006f84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a45      	ldr	r2, [pc, #276]	; (8006f9c <HAL_ADC_ConfigChannel+0x694>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_ADC_ConfigChannel+0x58e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a43      	ldr	r2, [pc, #268]	; (8006fa0 <HAL_ADC_ConfigChannel+0x698>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d101      	bne.n	8006e9a <HAL_ADC_ConfigChannel+0x592>
 8006e96:	4a45      	ldr	r2, [pc, #276]	; (8006fac <HAL_ADC_ConfigChannel+0x6a4>)
 8006e98:	e000      	b.n	8006e9c <HAL_ADC_ConfigChannel+0x594>
 8006e9a:	4a3f      	ldr	r2, [pc, #252]	; (8006f98 <HAL_ADC_ConfigChannel+0x690>)
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7ff f8b0 	bl	800600a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <HAL_ADC_ConfigChannel+0x6a8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	099b      	lsrs	r3, r3, #6
 8006eb0:	4a40      	ldr	r2, [pc, #256]	; (8006fb4 <HAL_ADC_ConfigChannel+0x6ac>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	3301      	adds	r3, #1
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006ebe:	e002      	b.n	8006ec6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f9      	bne.n	8006ec0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ecc:	e05a      	b.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a39      	ldr	r2, [pc, #228]	; (8006fb8 <HAL_ADC_ConfigChannel+0x6b0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d11e      	bne.n	8006f16 <HAL_ADC_ConfigChannel+0x60e>
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d119      	bne.n	8006f16 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2f      	ldr	r2, [pc, #188]	; (8006fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d14b      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <HAL_ADC_ConfigChannel+0x694>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_ADC_ConfigChannel+0x5f8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a29      	ldr	r2, [pc, #164]	; (8006fa0 <HAL_ADC_ConfigChannel+0x698>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d101      	bne.n	8006f04 <HAL_ADC_ConfigChannel+0x5fc>
 8006f00:	4a2a      	ldr	r2, [pc, #168]	; (8006fac <HAL_ADC_ConfigChannel+0x6a4>)
 8006f02:	e000      	b.n	8006f06 <HAL_ADC_ConfigChannel+0x5fe>
 8006f04:	4a24      	ldr	r2, [pc, #144]	; (8006f98 <HAL_ADC_ConfigChannel+0x690>)
 8006f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7ff f87b 	bl	800600a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f14:	e036      	b.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a28      	ldr	r2, [pc, #160]	; (8006fbc <HAL_ADC_ConfigChannel+0x6b4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d131      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
 8006f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d12c      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d127      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a18      	ldr	r2, [pc, #96]	; (8006f9c <HAL_ADC_ConfigChannel+0x694>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_ADC_ConfigChannel+0x640>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a17      	ldr	r2, [pc, #92]	; (8006fa0 <HAL_ADC_ConfigChannel+0x698>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d101      	bne.n	8006f4c <HAL_ADC_ConfigChannel+0x644>
 8006f48:	4a18      	ldr	r2, [pc, #96]	; (8006fac <HAL_ADC_ConfigChannel+0x6a4>)
 8006f4a:	e000      	b.n	8006f4e <HAL_ADC_ConfigChannel+0x646>
 8006f4c:	4a12      	ldr	r2, [pc, #72]	; (8006f98 <HAL_ADC_ConfigChannel+0x690>)
 8006f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7ff f857 	bl	800600a <LL_ADC_SetCommonPathInternalCh>
 8006f5c:	e012      	b.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f043 0220 	orr.w	r2, r3, #32
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006f70:	e008      	b.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3784      	adds	r7, #132	; 0x84
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd90      	pop	{r4, r7, pc}
 8006f98:	58026300 	.word	0x58026300
 8006f9c:	40022000 	.word	0x40022000
 8006fa0:	40022100 	.word	0x40022100
 8006fa4:	58026000 	.word	0x58026000
 8006fa8:	cb840000 	.word	0xcb840000
 8006fac:	40022300 	.word	0x40022300
 8006fb0:	240000c0 	.word	0x240000c0
 8006fb4:	053e2d63 	.word	0x053e2d63
 8006fb8:	c7520000 	.word	0xc7520000
 8006fbc:	cfb80000 	.word	0xcfb80000

08006fc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff f9b7 	bl	8006340 <LL_ADC_IsEnabled>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d16e      	bne.n	80070b6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	4b38      	ldr	r3, [pc, #224]	; (80070c0 <ADC_Enable+0x100>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00d      	beq.n	8007002 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	f043 0210 	orr.w	r2, r3, #16
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	f043 0201 	orr.w	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e05a      	b.n	80070b8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff f972 	bl	80062f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800700c:	f7fe ffbc 	bl	8005f88 <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2b      	ldr	r2, [pc, #172]	; (80070c4 <ADC_Enable+0x104>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <ADC_Enable+0x66>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <ADC_Enable+0x108>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d101      	bne.n	800702a <ADC_Enable+0x6a>
 8007026:	4b29      	ldr	r3, [pc, #164]	; (80070cc <ADC_Enable+0x10c>)
 8007028:	e000      	b.n	800702c <ADC_Enable+0x6c>
 800702a:	4b29      	ldr	r3, [pc, #164]	; (80070d0 <ADC_Enable+0x110>)
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff f903 	bl	8006238 <LL_ADC_GetMultimode>
 8007032:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a23      	ldr	r2, [pc, #140]	; (80070c8 <ADC_Enable+0x108>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d002      	beq.n	8007044 <ADC_Enable+0x84>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	e000      	b.n	8007046 <ADC_Enable+0x86>
 8007044:	4b1f      	ldr	r3, [pc, #124]	; (80070c4 <ADC_Enable+0x104>)
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	4293      	cmp	r3, r2
 800704c:	d02c      	beq.n	80070a8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d130      	bne.n	80070b6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007054:	e028      	b.n	80070a8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff f970 	bl	8006340 <LL_ADC_IsEnabled>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d104      	bne.n	8007070 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f940 	bl	80062f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007070:	f7fe ff8a 	bl	8005f88 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d914      	bls.n	80070a8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b01      	cmp	r3, #1
 800708a:	d00d      	beq.n	80070a8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f043 0210 	orr.w	r2, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709c:	f043 0201 	orr.w	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e007      	b.n	80070b8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d1cf      	bne.n	8007056 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	8000003f 	.word	0x8000003f
 80070c4:	40022000 	.word	0x40022000
 80070c8:	40022100 	.word	0x40022100
 80070cc:	40022300 	.word	0x40022300
 80070d0:	58026300 	.word	0x58026300

080070d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff f940 	bl	8006366 <LL_ADC_IsDisableOngoing>
 80070e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff f927 	bl	8006340 <LL_ADC_IsEnabled>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d047      	beq.n	8007188 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d144      	bne.n	8007188 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 030d 	and.w	r3, r3, #13
 8007108:	2b01      	cmp	r3, #1
 800710a:	d10c      	bne.n	8007126 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff f901 	bl	8006318 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2203      	movs	r2, #3
 800711c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800711e:	f7fe ff33 	bl	8005f88 <HAL_GetTick>
 8007122:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007124:	e029      	b.n	800717a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f043 0210 	orr.w	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	f043 0201 	orr.w	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e023      	b.n	800718a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007142:	f7fe ff21 	bl	8005f88 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d914      	bls.n	800717a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00d      	beq.n	800717a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	f043 0210 	orr.w	r2, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716e:	f043 0201 	orr.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e007      	b.n	800718a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1dc      	bne.n	8007142 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d14b      	bne.n	8007244 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d021      	beq.n	800720a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe ff92 	bl	80060f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d032      	beq.n	800723c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d12b      	bne.n	800723c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11f      	bne.n	800723c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	f043 0201 	orr.w	r2, r3, #1
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	655a      	str	r2, [r3, #84]	; 0x54
 8007208:	e018      	b.n	800723c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d111      	bne.n	800723c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d105      	bne.n	800723c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007234:	f043 0201 	orr.w	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff fb45 	bl	80068cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007242:	e00e      	b.n	8007262 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7ff fb4f 	bl	80068f4 <HAL_ADC_ErrorCallback>
}
 8007256:	e004      	b.n	8007262 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff fb31 	bl	80068e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a4:	f043 0204 	orr.w	r2, r3, #4
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff fb21 	bl	80068f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a7a      	ldr	r2, [pc, #488]	; (80074b4 <ADC_ConfigureBoostMode+0x1f8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <ADC_ConfigureBoostMode+0x1c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a79      	ldr	r2, [pc, #484]	; (80074b8 <ADC_ConfigureBoostMode+0x1fc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d109      	bne.n	80072ec <ADC_ConfigureBoostMode+0x30>
 80072d8:	4b78      	ldr	r3, [pc, #480]	; (80074bc <ADC_ConfigureBoostMode+0x200>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e008      	b.n	80072fe <ADC_ConfigureBoostMode+0x42>
 80072ec:	4b74      	ldr	r3, [pc, #464]	; (80074c0 <ADC_ConfigureBoostMode+0x204>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01c      	beq.n	800733c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007302:	f007 fdef 	bl	800eee4 <HAL_RCC_GetHCLKFreq>
 8007306:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007310:	d010      	beq.n	8007334 <ADC_ConfigureBoostMode+0x78>
 8007312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007316:	d873      	bhi.n	8007400 <ADC_ConfigureBoostMode+0x144>
 8007318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731c:	d002      	beq.n	8007324 <ADC_ConfigureBoostMode+0x68>
 800731e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007322:	d16d      	bne.n	8007400 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	60fb      	str	r3, [r7, #12]
        break;
 8007332:	e068      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	089b      	lsrs	r3, r3, #2
 8007338:	60fb      	str	r3, [r7, #12]
        break;
 800733a:	e064      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800733c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007340:	f04f 0100 	mov.w	r1, #0
 8007344:	f009 f876 	bl	8010434 <HAL_RCCEx_GetPeriphCLKFreq>
 8007348:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007352:	d051      	beq.n	80073f8 <ADC_ConfigureBoostMode+0x13c>
 8007354:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007358:	d854      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 800735a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800735e:	d047      	beq.n	80073f0 <ADC_ConfigureBoostMode+0x134>
 8007360:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007364:	d84e      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 8007366:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800736a:	d03d      	beq.n	80073e8 <ADC_ConfigureBoostMode+0x12c>
 800736c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007370:	d848      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 8007372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007376:	d033      	beq.n	80073e0 <ADC_ConfigureBoostMode+0x124>
 8007378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800737c:	d842      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 800737e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007382:	d029      	beq.n	80073d8 <ADC_ConfigureBoostMode+0x11c>
 8007384:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007388:	d83c      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 800738a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800738e:	d01a      	beq.n	80073c6 <ADC_ConfigureBoostMode+0x10a>
 8007390:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007394:	d836      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 8007396:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800739a:	d014      	beq.n	80073c6 <ADC_ConfigureBoostMode+0x10a>
 800739c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80073a0:	d830      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 80073a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073a6:	d00e      	beq.n	80073c6 <ADC_ConfigureBoostMode+0x10a>
 80073a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ac:	d82a      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 80073ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073b2:	d008      	beq.n	80073c6 <ADC_ConfigureBoostMode+0x10a>
 80073b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073b8:	d824      	bhi.n	8007404 <ADC_ConfigureBoostMode+0x148>
 80073ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073be:	d002      	beq.n	80073c6 <ADC_ConfigureBoostMode+0x10a>
 80073c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073c4:	d11e      	bne.n	8007404 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	0c9b      	lsrs	r3, r3, #18
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	60fb      	str	r3, [r7, #12]
        break;
 80073d6:	e016      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	091b      	lsrs	r3, r3, #4
 80073dc:	60fb      	str	r3, [r7, #12]
        break;
 80073de:	e012      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	60fb      	str	r3, [r7, #12]
        break;
 80073e6:	e00e      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	099b      	lsrs	r3, r3, #6
 80073ec:	60fb      	str	r3, [r7, #12]
        break;
 80073ee:	e00a      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	09db      	lsrs	r3, r3, #7
 80073f4:	60fb      	str	r3, [r7, #12]
        break;
 80073f6:	e006      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	60fb      	str	r3, [r7, #12]
        break;
 80073fe:	e002      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
        break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007404:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007406:	f7fe fdcb 	bl	8005fa0 <HAL_GetREVID>
 800740a:	4603      	mov	r3, r0
 800740c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007410:	4293      	cmp	r3, r2
 8007412:	d815      	bhi.n	8007440 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <ADC_ConfigureBoostMode+0x208>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d908      	bls.n	800742e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800742a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800742c:	e03e      	b.n	80074ac <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800743c:	609a      	str	r2, [r3, #8]
}
 800743e:	e035      	b.n	80074ac <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4a1f      	ldr	r2, [pc, #124]	; (80074c8 <ADC_ConfigureBoostMode+0x20c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d808      	bhi.n	8007460 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800745c:	609a      	str	r2, [r3, #8]
}
 800745e:	e025      	b.n	80074ac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a1a      	ldr	r2, [pc, #104]	; (80074cc <ADC_ConfigureBoostMode+0x210>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d80a      	bhi.n	800747e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800747a:	609a      	str	r2, [r3, #8]
}
 800747c:	e016      	b.n	80074ac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4a13      	ldr	r2, [pc, #76]	; (80074d0 <ADC_ConfigureBoostMode+0x214>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d80a      	bhi.n	800749c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007498:	609a      	str	r2, [r3, #8]
}
 800749a:	e007      	b.n	80074ac <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80074aa:	609a      	str	r2, [r3, #8]
}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40022000 	.word	0x40022000
 80074b8:	40022100 	.word	0x40022100
 80074bc:	40022300 	.word	0x40022300
 80074c0:	58026300 	.word	0x58026300
 80074c4:	01312d00 	.word	0x01312d00
 80074c8:	005f5e10 	.word	0x005f5e10
 80074cc:	00bebc20 	.word	0x00bebc20
 80074d0:	017d7840 	.word	0x017d7840

080074d4 <LL_ADC_IsEnabled>:
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <LL_ADC_IsEnabled+0x18>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e000      	b.n	80074ee <LL_ADC_IsEnabled+0x1a>
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <LL_ADC_StartCalibration>:
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	4b09      	ldr	r3, [pc, #36]	; (8007534 <LL_ADC_StartCalibration+0x38>)
 800750e:	4013      	ands	r3, r2
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800751c:	430a      	orrs	r2, r1
 800751e:	4313      	orrs	r3, r2
 8007520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	609a      	str	r2, [r3, #8]
}
 8007528:	bf00      	nop
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	3ffeffc0 	.word	0x3ffeffc0

08007538 <LL_ADC_IsCalibrationOnGoing>:
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800754c:	d101      	bne.n	8007552 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <LL_ADC_REG_IsConversionOngoing>:
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b04      	cmp	r3, #4
 8007572:	d101      	bne.n	8007578 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_ADCEx_Calibration_Start+0x1e>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e04c      	b.n	8007640 <HAL_ADCEx_Calibration_Start+0xb8>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fd90 	bl	80070d4 <ADC_Disable>
 80075b4:	4603      	mov	r3, r0
 80075b6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d135      	bne.n	800762a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075c2:	4b21      	ldr	r3, [pc, #132]	; (8007648 <HAL_ADCEx_Calibration_Start+0xc0>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	f043 0202 	orr.w	r2, r3, #2
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff ff90 	bl	80074fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075dc:	e014      	b.n	8007608 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	3301      	adds	r3, #1
 80075e2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	4a19      	ldr	r2, [pc, #100]	; (800764c <HAL_ADCEx_Calibration_Start+0xc4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d30d      	bcc.n	8007608 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f0:	f023 0312 	bic.w	r3, r3, #18
 80075f4:	f043 0210 	orr.w	r2, r3, #16
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e01b      	b.n	8007640 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff ff93 	bl	8007538 <LL_ADC_IsCalibrationOnGoing>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e2      	bne.n	80075de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	f043 0201 	orr.w	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
 8007628:	e005      	b.n	8007636 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f043 0210 	orr.w	r2, r3, #16
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	ffffeefd 	.word	0xffffeefd
 800764c:	25c3f800 	.word	0x25c3f800

08007650 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b09f      	sub	sp, #124	; 0x7c
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800766a:	2302      	movs	r3, #2
 800766c:	e0be      	b.n	80077ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007676:	2300      	movs	r3, #0
 8007678:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800767a:	2300      	movs	r3, #0
 800767c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a5c      	ldr	r2, [pc, #368]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d102      	bne.n	800768e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007688:	4b5b      	ldr	r3, [pc, #364]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800768a:	60bb      	str	r3, [r7, #8]
 800768c:	e001      	b.n	8007692 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e09d      	b.n	80077ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ff54 	bl	8007560 <LL_ADC_REG_IsConversionOngoing>
 80076b8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff ff4e 	bl	8007560 <LL_ADC_REG_IsConversionOngoing>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d17f      	bne.n	80077ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80076ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d17c      	bne.n	80077ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a47      	ldr	r2, [pc, #284]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a46      	ldr	r2, [pc, #280]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d101      	bne.n	80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80076e4:	4b45      	ldr	r3, [pc, #276]	; (80077fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80076e6:	e000      	b.n	80076ea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80076e8:	4b45      	ldr	r3, [pc, #276]	; (8007800 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80076ea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d039      	beq.n	8007768 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80076f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	431a      	orrs	r2, r3
 8007702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007704:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3a      	ldr	r2, [pc, #232]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a38      	ldr	r2, [pc, #224]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d10e      	bne.n	8007738 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800771a:	4836      	ldr	r0, [pc, #216]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800771c:	f7ff feda 	bl	80074d4 <LL_ADC_IsEnabled>
 8007720:	4604      	mov	r4, r0
 8007722:	4835      	ldr	r0, [pc, #212]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007724:	f7ff fed6 	bl	80074d4 <LL_ADC_IsEnabled>
 8007728:	4603      	mov	r3, r0
 800772a:	4323      	orrs	r3, r4
 800772c:	2b00      	cmp	r3, #0
 800772e:	bf0c      	ite	eq
 8007730:	2301      	moveq	r3, #1
 8007732:	2300      	movne	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	e008      	b.n	800774a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007738:	4832      	ldr	r0, [pc, #200]	; (8007804 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800773a:	f7ff fecb 	bl	80074d4 <LL_ADC_IsEnabled>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	bf0c      	ite	eq
 8007744:	2301      	moveq	r3, #1
 8007746:	2300      	movne	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d047      	beq.n	80077de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800774e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4b2d      	ldr	r3, [pc, #180]	; (8007808 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007754:	4013      	ands	r3, r2
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	6811      	ldr	r1, [r2, #0]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	6892      	ldr	r2, [r2, #8]
 800775e:	430a      	orrs	r2, r1
 8007760:	431a      	orrs	r2, r3
 8007762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007764:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007766:	e03a      	b.n	80077de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007772:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1e      	ldr	r2, [pc, #120]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1d      	ldr	r2, [pc, #116]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d10e      	bne.n	80077a6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007788:	481a      	ldr	r0, [pc, #104]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800778a:	f7ff fea3 	bl	80074d4 <LL_ADC_IsEnabled>
 800778e:	4604      	mov	r4, r0
 8007790:	4819      	ldr	r0, [pc, #100]	; (80077f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007792:	f7ff fe9f 	bl	80074d4 <LL_ADC_IsEnabled>
 8007796:	4603      	mov	r3, r0
 8007798:	4323      	orrs	r3, r4
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	e008      	b.n	80077b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80077a6:	4817      	ldr	r0, [pc, #92]	; (8007804 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80077a8:	f7ff fe94 	bl	80074d4 <LL_ADC_IsEnabled>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf0c      	ite	eq
 80077b2:	2301      	moveq	r3, #1
 80077b4:	2300      	movne	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80077bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	4b11      	ldr	r3, [pc, #68]	; (8007808 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077c6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077c8:	e009      	b.n	80077de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80077dc:	e000      	b.n	80077e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80077e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	377c      	adds	r7, #124	; 0x7c
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd90      	pop	{r4, r7, pc}
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40022100 	.word	0x40022100
 80077fc:	40022300 	.word	0x40022300
 8007800:	58026300 	.word	0x58026300
 8007804:	58026000 	.word	0x58026000
 8007808:	fffff0e0 	.word	0xfffff0e0

0800780c <__NVIC_SetPriorityGrouping>:
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <__NVIC_SetPriorityGrouping+0x40>)
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007828:	4013      	ands	r3, r2
 800782a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007834:	4b06      	ldr	r3, [pc, #24]	; (8007850 <__NVIC_SetPriorityGrouping+0x44>)
 8007836:	4313      	orrs	r3, r2
 8007838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800783a:	4a04      	ldr	r2, [pc, #16]	; (800784c <__NVIC_SetPriorityGrouping+0x40>)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	60d3      	str	r3, [r2, #12]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	e000ed00 	.word	0xe000ed00
 8007850:	05fa0000 	.word	0x05fa0000

08007854 <__NVIC_GetPriorityGrouping>:
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <__NVIC_GetPriorityGrouping+0x18>)
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	0a1b      	lsrs	r3, r3, #8
 800785e:	f003 0307 	and.w	r3, r3, #7
}
 8007862:	4618      	mov	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	e000ed00 	.word	0xe000ed00

08007870 <__NVIC_EnableIRQ>:
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800787a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	db0b      	blt.n	800789a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	f003 021f 	and.w	r2, r3, #31
 8007888:	4907      	ldr	r1, [pc, #28]	; (80078a8 <__NVIC_EnableIRQ+0x38>)
 800788a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	2001      	movs	r0, #1
 8007892:	fa00 f202 	lsl.w	r2, r0, r2
 8007896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	e000e100 	.word	0xe000e100

080078ac <__NVIC_SetPriority>:
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80078b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	db0a      	blt.n	80078d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	490c      	ldr	r1, [pc, #48]	; (80078f8 <__NVIC_SetPriority+0x4c>)
 80078c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078ca:	0112      	lsls	r2, r2, #4
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	440b      	add	r3, r1
 80078d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078d4:	e00a      	b.n	80078ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4908      	ldr	r1, [pc, #32]	; (80078fc <__NVIC_SetPriority+0x50>)
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	3b04      	subs	r3, #4
 80078e4:	0112      	lsls	r2, r2, #4
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	440b      	add	r3, r1
 80078ea:	761a      	strb	r2, [r3, #24]
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	e000e100 	.word	0xe000e100
 80078fc:	e000ed00 	.word	0xe000ed00

08007900 <NVIC_EncodePriority>:
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	; 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f1c3 0307 	rsb	r3, r3, #7
 800791a:	2b04      	cmp	r3, #4
 800791c:	bf28      	it	cs
 800791e:	2304      	movcs	r3, #4
 8007920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	3304      	adds	r3, #4
 8007926:	2b06      	cmp	r3, #6
 8007928:	d902      	bls.n	8007930 <NVIC_EncodePriority+0x30>
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	3b03      	subs	r3, #3
 800792e:	e000      	b.n	8007932 <NVIC_EncodePriority+0x32>
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	fa02 f303 	lsl.w	r3, r2, r3
 800793e:	43da      	mvns	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	401a      	ands	r2, r3
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	fa01 f303 	lsl.w	r3, r1, r3
 8007952:	43d9      	mvns	r1, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007958:	4313      	orrs	r3, r2
}
 800795a:	4618      	mov	r0, r3
 800795c:	3724      	adds	r7, #36	; 0x24
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff ff4c 	bl	800780c <__NVIC_SetPriorityGrouping>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800798a:	f7ff ff63 	bl	8007854 <__NVIC_GetPriorityGrouping>
 800798e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	6978      	ldr	r0, [r7, #20]
 8007996:	f7ff ffb3 	bl	8007900 <NVIC_EncodePriority>
 800799a:	4602      	mov	r2, r0
 800799c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff ff82 	bl	80078ac <__NVIC_SetPriority>
}
 80079a8:	bf00      	nop
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff ff56 	bl	8007870 <__NVIC_EnableIRQ>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e014      	b.n	8007a08 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	791b      	ldrb	r3, [r3, #4]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d105      	bne.n	80079f4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7f9 f8f8 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e046      	b.n	8007ab2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	795b      	ldrb	r3, [r3, #5]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_DAC_Start+0x20>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e040      	b.n	8007ab2 <HAL_DAC_Start+0xa2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6819      	ldr	r1, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	f003 0310 	and.w	r3, r3, #16
 8007a48:	2201      	movs	r2, #1
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10f      	bne.n	8007a7a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d11d      	bne.n	8007aa4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0201 	orr.w	r2, r2, #1
 8007a76:	605a      	str	r2, [r3, #4]
 8007a78:	e014      	b.n	8007aa4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d107      	bne.n	8007aa4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0202 	orr.w	r2, r2, #2
 8007aa2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0a2      	b.n	8007c1e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	795b      	ldrb	r3, [r3, #5]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_DAC_Start_DMA+0x24>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e09c      	b.n	8007c1e <HAL_DAC_Start_DMA+0x15e>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2202      	movs	r2, #2
 8007aee:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d129      	bne.n	8007b4a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	4a4b      	ldr	r2, [pc, #300]	; (8007c28 <HAL_DAC_Start_DMA+0x168>)
 8007afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	4a4a      	ldr	r2, [pc, #296]	; (8007c2c <HAL_DAC_Start_DMA+0x16c>)
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	4a49      	ldr	r2, [pc, #292]	; (8007c30 <HAL_DAC_Start_DMA+0x170>)
 8007b0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b1c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_DAC_Start_DMA+0x6c>
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d005      	beq.n	8007b36 <HAL_DAC_Start_DMA+0x76>
 8007b2a:	e009      	b.n	8007b40 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	613b      	str	r3, [r7, #16]
        break;
 8007b34:	e033      	b.n	8007b9e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	613b      	str	r3, [r7, #16]
        break;
 8007b3e:	e02e      	b.n	8007b9e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3310      	adds	r3, #16
 8007b46:	613b      	str	r3, [r7, #16]
        break;
 8007b48:	e029      	b.n	8007b9e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	4a39      	ldr	r2, [pc, #228]	; (8007c34 <HAL_DAC_Start_DMA+0x174>)
 8007b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	4a38      	ldr	r2, [pc, #224]	; (8007c38 <HAL_DAC_Start_DMA+0x178>)
 8007b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	4a37      	ldr	r2, [pc, #220]	; (8007c3c <HAL_DAC_Start_DMA+0x17c>)
 8007b60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b70:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_DAC_Start_DMA+0xc0>
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d005      	beq.n	8007b8a <HAL_DAC_Start_DMA+0xca>
 8007b7e:	e009      	b.n	8007b94 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3314      	adds	r3, #20
 8007b86:	613b      	str	r3, [r7, #16]
        break;
 8007b88:	e009      	b.n	8007b9e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3318      	adds	r3, #24
 8007b90:	613b      	str	r3, [r7, #16]
        break;
 8007b92:	e004      	b.n	8007b9e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	331c      	adds	r3, #28
 8007b9a:	613b      	str	r3, [r7, #16]
        break;
 8007b9c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d111      	bne.n	8007bc8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6898      	ldr	r0, [r3, #8]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	f000 fe67 	bl	8008890 <HAL_DMA_Start_IT>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
 8007bc6:	e010      	b.n	8007bea <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007bd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68d8      	ldr	r0, [r3, #12]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	f000 fe55 	bl	8008890 <HAL_DMA_Start_IT>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10c      	bne.n	8007c10 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6819      	ldr	r1, [r3, #0]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2201      	movs	r2, #1
 8007c04:	409a      	lsls	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e005      	b.n	8007c1c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f043 0204 	orr.w	r2, r3, #4
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	080080b1 	.word	0x080080b1
 8007c2c:	080080d3 	.word	0x080080d3
 8007c30:	080080ef 	.word	0x080080ef
 8007c34:	0800816d 	.word	0x0800816d
 8007c38:	0800818f 	.word	0x0800818f
 8007c3c:	080081ab 	.word	0x080081ab

08007c40 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e03e      	b.n	8007cd2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	43da      	mvns	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	400a      	ands	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6819      	ldr	r1, [r3, #0]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2201      	movs	r2, #1
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	43da      	mvns	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	400a      	ands	r2, r1
 8007c8c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10d      	bne.n	8007cb0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f863 	bl	8008d64 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e00c      	b.n	8007cca <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 f855 	bl	8008d64 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007cc8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01d      	beq.n	8007d38 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2204      	movs	r2, #4
 8007d0a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f043 0201 	orr.w	r2, r3, #1
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d30:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f86f 	bl	8007e16 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d01d      	beq.n	8007d7e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d018      	beq.n	8007d7e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f043 0202 	orr.w	r2, r3, #2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007d66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f9ed 	bl	8008158 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b087      	sub	sp, #28
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e015      	b.n	8007dce <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d105      	bne.n	8007dba <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	3308      	adds	r3, #8
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e004      	b.n	8007dc4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3314      	adds	r3, #20
 8007dc2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_DAC_ConfigChannel+0x1e>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e12a      	b.n	80080a4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	795b      	ldrb	r3, [r3, #5]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_DAC_ConfigChannel+0x2e>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e124      	b.n	80080a4 <HAL_DAC_ConfigChannel+0x278>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2202      	movs	r2, #2
 8007e64:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d17a      	bne.n	8007f64 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007e6e:	f7fe f88b 	bl	8005f88 <HAL_GetTick>
 8007e72:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d13d      	bne.n	8007ef6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e7a:	e018      	b.n	8007eae <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e7c:	f7fe f884 	bl	8005f88 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d911      	bls.n	8007eae <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e90:	4b86      	ldr	r3, [pc, #536]	; (80080ac <HAL_DAC_ConfigChannel+0x280>)
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f043 0208 	orr.w	r2, r3, #8
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e0fa      	b.n	80080a4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb4:	4b7d      	ldr	r3, [pc, #500]	; (80080ac <HAL_DAC_ConfigChannel+0x280>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1df      	bne.n	8007e7c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	6992      	ldr	r2, [r2, #24]
 8007ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8007ec6:	e020      	b.n	8007f0a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ec8:	f7fe f85e 	bl	8005f88 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d90f      	bls.n	8007ef6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0a      	bge.n	8007ef6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f043 0208 	orr.w	r2, r3, #8
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e0d6      	b.n	80080a4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dbe3      	blt.n	8007ec8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	6992      	ldr	r2, [r2, #24]
 8007f08:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f003 0310 	and.w	r3, r3, #16
 8007f16:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1e:	43db      	mvns	r3, r3
 8007f20:	ea02 0103 	and.w	r1, r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f003 0310 	and.w	r3, r3, #16
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	21ff      	movs	r1, #255	; 0xff
 8007f46:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	ea02 0103 	and.w	r1, r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6a1a      	ldr	r2, [r3, #32]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d11d      	bne.n	8007fa8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	221f      	movs	r2, #31
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43db      	mvns	r3, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4013      	ands	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2207      	movs	r2, #7
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d102      	bne.n	8007fd2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd0:	e00f      	b.n	8007ff2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d102      	bne.n	8007fe0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fde:	e008      	b.n	8007ff2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
 8007fec:	e001      	b.n	8007ff2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4313      	orrs	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6819      	ldr	r1, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	43da      	mvns	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	400a      	ands	r2, r1
 8008038:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	f640 72fe 	movw	r2, #4094	; 0xffe
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	43db      	mvns	r3, r3
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4013      	ands	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4313      	orrs	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6819      	ldr	r1, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	22c0      	movs	r2, #192	; 0xc0
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	43da      	mvns	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	400a      	ands	r2, r1
 8008092:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80080a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3728      	adds	r7, #40	; 0x28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20008000 	.word	0x20008000

080080b0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7ff fe8b 	bl	8007dda <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	711a      	strb	r2, [r3, #4]
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f7ff fe84 	bl	8007dee <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f043 0204 	orr.w	r2, r3, #4
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff fe7a 	bl	8007e02 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	711a      	strb	r2, [r3, #4]
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff ffce 	bl	800811c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2201      	movs	r2, #1
 8008184:	711a      	strb	r2, [r3, #4]
}
 8008186:	bf00      	nop
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7ff ffc7 	bl	8008130 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80081a2:	bf00      	nop
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f043 0204 	orr.w	r2, r3, #4
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff ffbd 	bl	8008144 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	711a      	strb	r2, [r3, #4]
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80081e0:	f7fd fed2 	bl	8005f88 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e316      	b.n	800881e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a66      	ldr	r2, [pc, #408]	; (8008390 <HAL_DMA_Init+0x1b8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d04a      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a65      	ldr	r2, [pc, #404]	; (8008394 <HAL_DMA_Init+0x1bc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d045      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a63      	ldr	r2, [pc, #396]	; (8008398 <HAL_DMA_Init+0x1c0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d040      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a62      	ldr	r2, [pc, #392]	; (800839c <HAL_DMA_Init+0x1c4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d03b      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a60      	ldr	r2, [pc, #384]	; (80083a0 <HAL_DMA_Init+0x1c8>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d036      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a5f      	ldr	r2, [pc, #380]	; (80083a4 <HAL_DMA_Init+0x1cc>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d031      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a5d      	ldr	r2, [pc, #372]	; (80083a8 <HAL_DMA_Init+0x1d0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d02c      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a5c      	ldr	r2, [pc, #368]	; (80083ac <HAL_DMA_Init+0x1d4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d027      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a5a      	ldr	r2, [pc, #360]	; (80083b0 <HAL_DMA_Init+0x1d8>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d022      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a59      	ldr	r2, [pc, #356]	; (80083b4 <HAL_DMA_Init+0x1dc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d01d      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a57      	ldr	r2, [pc, #348]	; (80083b8 <HAL_DMA_Init+0x1e0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d018      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a56      	ldr	r2, [pc, #344]	; (80083bc <HAL_DMA_Init+0x1e4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a54      	ldr	r2, [pc, #336]	; (80083c0 <HAL_DMA_Init+0x1e8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00e      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a53      	ldr	r2, [pc, #332]	; (80083c4 <HAL_DMA_Init+0x1ec>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d009      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a51      	ldr	r2, [pc, #324]	; (80083c8 <HAL_DMA_Init+0x1f0>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <HAL_DMA_Init+0xb8>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a50      	ldr	r2, [pc, #320]	; (80083cc <HAL_DMA_Init+0x1f4>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d101      	bne.n	8008294 <HAL_DMA_Init+0xbc>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <HAL_DMA_Init+0xbe>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 813b 	beq.w	8008512 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a37      	ldr	r2, [pc, #220]	; (8008390 <HAL_DMA_Init+0x1b8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d04a      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a36      	ldr	r2, [pc, #216]	; (8008394 <HAL_DMA_Init+0x1bc>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d045      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a34      	ldr	r2, [pc, #208]	; (8008398 <HAL_DMA_Init+0x1c0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d040      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a33      	ldr	r2, [pc, #204]	; (800839c <HAL_DMA_Init+0x1c4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d03b      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a31      	ldr	r2, [pc, #196]	; (80083a0 <HAL_DMA_Init+0x1c8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d036      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a30      	ldr	r2, [pc, #192]	; (80083a4 <HAL_DMA_Init+0x1cc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d031      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a2e      	ldr	r2, [pc, #184]	; (80083a8 <HAL_DMA_Init+0x1d0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d02c      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a2d      	ldr	r2, [pc, #180]	; (80083ac <HAL_DMA_Init+0x1d4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d027      	beq.n	800834c <HAL_DMA_Init+0x174>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a2b      	ldr	r2, [pc, #172]	; (80083b0 <HAL_DMA_Init+0x1d8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d022      	beq.n	800834c <HAL_DMA_Init+0x174>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <HAL_DMA_Init+0x1dc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d01d      	beq.n	800834c <HAL_DMA_Init+0x174>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a28      	ldr	r2, [pc, #160]	; (80083b8 <HAL_DMA_Init+0x1e0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d018      	beq.n	800834c <HAL_DMA_Init+0x174>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a27      	ldr	r2, [pc, #156]	; (80083bc <HAL_DMA_Init+0x1e4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d013      	beq.n	800834c <HAL_DMA_Init+0x174>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a25      	ldr	r2, [pc, #148]	; (80083c0 <HAL_DMA_Init+0x1e8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00e      	beq.n	800834c <HAL_DMA_Init+0x174>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a24      	ldr	r2, [pc, #144]	; (80083c4 <HAL_DMA_Init+0x1ec>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d009      	beq.n	800834c <HAL_DMA_Init+0x174>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a22      	ldr	r2, [pc, #136]	; (80083c8 <HAL_DMA_Init+0x1f0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d004      	beq.n	800834c <HAL_DMA_Init+0x174>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a21      	ldr	r2, [pc, #132]	; (80083cc <HAL_DMA_Init+0x1f4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d108      	bne.n	800835e <HAL_DMA_Init+0x186>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0201 	bic.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	e007      	b.n	800836e <HAL_DMA_Init+0x196>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0201 	bic.w	r2, r2, #1
 800836c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800836e:	e02f      	b.n	80083d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008370:	f7fd fe0a 	bl	8005f88 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b05      	cmp	r3, #5
 800837c:	d928      	bls.n	80083d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2203      	movs	r2, #3
 8008388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e246      	b.n	800881e <HAL_DMA_Init+0x646>
 8008390:	40020010 	.word	0x40020010
 8008394:	40020028 	.word	0x40020028
 8008398:	40020040 	.word	0x40020040
 800839c:	40020058 	.word	0x40020058
 80083a0:	40020070 	.word	0x40020070
 80083a4:	40020088 	.word	0x40020088
 80083a8:	400200a0 	.word	0x400200a0
 80083ac:	400200b8 	.word	0x400200b8
 80083b0:	40020410 	.word	0x40020410
 80083b4:	40020428 	.word	0x40020428
 80083b8:	40020440 	.word	0x40020440
 80083bc:	40020458 	.word	0x40020458
 80083c0:	40020470 	.word	0x40020470
 80083c4:	40020488 	.word	0x40020488
 80083c8:	400204a0 	.word	0x400204a0
 80083cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1c8      	bne.n	8008370 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4b83      	ldr	r3, [pc, #524]	; (80085f8 <HAL_DMA_Init+0x420>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80083f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008402:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800840e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b04      	cmp	r3, #4
 8008422:	d107      	bne.n	8008434 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	4313      	orrs	r3, r2
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008434:	4b71      	ldr	r3, [pc, #452]	; (80085fc <HAL_DMA_Init+0x424>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	4b71      	ldr	r3, [pc, #452]	; (8008600 <HAL_DMA_Init+0x428>)
 800843a:	4013      	ands	r3, r2
 800843c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008440:	d328      	bcc.n	8008494 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b28      	cmp	r3, #40	; 0x28
 8008448:	d903      	bls.n	8008452 <HAL_DMA_Init+0x27a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2b2e      	cmp	r3, #46	; 0x2e
 8008450:	d917      	bls.n	8008482 <HAL_DMA_Init+0x2aa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b3e      	cmp	r3, #62	; 0x3e
 8008458:	d903      	bls.n	8008462 <HAL_DMA_Init+0x28a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2b42      	cmp	r3, #66	; 0x42
 8008460:	d90f      	bls.n	8008482 <HAL_DMA_Init+0x2aa>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2b46      	cmp	r3, #70	; 0x46
 8008468:	d903      	bls.n	8008472 <HAL_DMA_Init+0x29a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b48      	cmp	r3, #72	; 0x48
 8008470:	d907      	bls.n	8008482 <HAL_DMA_Init+0x2aa>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b4e      	cmp	r3, #78	; 0x4e
 8008478:	d905      	bls.n	8008486 <HAL_DMA_Init+0x2ae>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b52      	cmp	r3, #82	; 0x52
 8008480:	d801      	bhi.n	8008486 <HAL_DMA_Init+0x2ae>
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <HAL_DMA_Init+0x2b0>
 8008486:	2300      	movs	r3, #0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008492:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f023 0307 	bic.w	r3, r3, #7
 80084aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d117      	bne.n	80084ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00e      	beq.n	80084ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f002 fb4d 	bl	800ab70 <DMA_CheckFifoParam>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2240      	movs	r2, #64	; 0x40
 80084e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e197      	b.n	800881e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 fa88 	bl	800aa0c <DMA_CalcBaseAndBitshift>
 80084fc:	4603      	mov	r3, r0
 80084fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008504:	f003 031f 	and.w	r3, r3, #31
 8008508:	223f      	movs	r2, #63	; 0x3f
 800850a:	409a      	lsls	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	609a      	str	r2, [r3, #8]
 8008510:	e0cd      	b.n	80086ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a3b      	ldr	r2, [pc, #236]	; (8008604 <HAL_DMA_Init+0x42c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d022      	beq.n	8008562 <HAL_DMA_Init+0x38a>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a39      	ldr	r2, [pc, #228]	; (8008608 <HAL_DMA_Init+0x430>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d01d      	beq.n	8008562 <HAL_DMA_Init+0x38a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a38      	ldr	r2, [pc, #224]	; (800860c <HAL_DMA_Init+0x434>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d018      	beq.n	8008562 <HAL_DMA_Init+0x38a>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a36      	ldr	r2, [pc, #216]	; (8008610 <HAL_DMA_Init+0x438>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d013      	beq.n	8008562 <HAL_DMA_Init+0x38a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a35      	ldr	r2, [pc, #212]	; (8008614 <HAL_DMA_Init+0x43c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d00e      	beq.n	8008562 <HAL_DMA_Init+0x38a>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a33      	ldr	r2, [pc, #204]	; (8008618 <HAL_DMA_Init+0x440>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d009      	beq.n	8008562 <HAL_DMA_Init+0x38a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a32      	ldr	r2, [pc, #200]	; (800861c <HAL_DMA_Init+0x444>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d004      	beq.n	8008562 <HAL_DMA_Init+0x38a>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a30      	ldr	r2, [pc, #192]	; (8008620 <HAL_DMA_Init+0x448>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d101      	bne.n	8008566 <HAL_DMA_Init+0x38e>
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <HAL_DMA_Init+0x390>
 8008566:	2300      	movs	r3, #0
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 8097 	beq.w	800869c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a24      	ldr	r2, [pc, #144]	; (8008604 <HAL_DMA_Init+0x42c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d021      	beq.n	80085bc <HAL_DMA_Init+0x3e4>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a22      	ldr	r2, [pc, #136]	; (8008608 <HAL_DMA_Init+0x430>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d01c      	beq.n	80085bc <HAL_DMA_Init+0x3e4>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a21      	ldr	r2, [pc, #132]	; (800860c <HAL_DMA_Init+0x434>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d017      	beq.n	80085bc <HAL_DMA_Init+0x3e4>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <HAL_DMA_Init+0x438>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d012      	beq.n	80085bc <HAL_DMA_Init+0x3e4>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1e      	ldr	r2, [pc, #120]	; (8008614 <HAL_DMA_Init+0x43c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00d      	beq.n	80085bc <HAL_DMA_Init+0x3e4>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <HAL_DMA_Init+0x440>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d008      	beq.n	80085bc <HAL_DMA_Init+0x3e4>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1b      	ldr	r2, [pc, #108]	; (800861c <HAL_DMA_Init+0x444>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <HAL_DMA_Init+0x3e4>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a19      	ldr	r2, [pc, #100]	; (8008620 <HAL_DMA_Init+0x448>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4b12      	ldr	r3, [pc, #72]	; (8008624 <HAL_DMA_Init+0x44c>)
 80085da:	4013      	ands	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d020      	beq.n	8008628 <HAL_DMA_Init+0x450>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	2b80      	cmp	r3, #128	; 0x80
 80085ec:	d102      	bne.n	80085f4 <HAL_DMA_Init+0x41c>
 80085ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085f2:	e01a      	b.n	800862a <HAL_DMA_Init+0x452>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e018      	b.n	800862a <HAL_DMA_Init+0x452>
 80085f8:	fe10803f 	.word	0xfe10803f
 80085fc:	5c001000 	.word	0x5c001000
 8008600:	ffff0000 	.word	0xffff0000
 8008604:	58025408 	.word	0x58025408
 8008608:	5802541c 	.word	0x5802541c
 800860c:	58025430 	.word	0x58025430
 8008610:	58025444 	.word	0x58025444
 8008614:	58025458 	.word	0x58025458
 8008618:	5802546c 	.word	0x5802546c
 800861c:	58025480 	.word	0x58025480
 8008620:	58025494 	.word	0x58025494
 8008624:	fffe000f 	.word	0xfffe000f
 8008628:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68d2      	ldr	r2, [r2, #12]
 800862e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008630:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008658:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	4b6e      	ldr	r3, [pc, #440]	; (8008828 <HAL_DMA_Init+0x650>)
 8008670:	4413      	add	r3, r2
 8008672:	4a6e      	ldr	r2, [pc, #440]	; (800882c <HAL_DMA_Init+0x654>)
 8008674:	fba2 2303 	umull	r2, r3, r2, r3
 8008678:	091b      	lsrs	r3, r3, #4
 800867a:	009a      	lsls	r2, r3, #2
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f002 f9c3 	bl	800aa0c <DMA_CalcBaseAndBitshift>
 8008686:	4603      	mov	r3, r0
 8008688:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800868e:	f003 031f 	and.w	r3, r3, #31
 8008692:	2201      	movs	r2, #1
 8008694:	409a      	lsls	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	605a      	str	r2, [r3, #4]
 800869a:	e008      	b.n	80086ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2240      	movs	r2, #64	; 0x40
 80086a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2203      	movs	r2, #3
 80086a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e0b7      	b.n	800881e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a5f      	ldr	r2, [pc, #380]	; (8008830 <HAL_DMA_Init+0x658>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d072      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a5d      	ldr	r2, [pc, #372]	; (8008834 <HAL_DMA_Init+0x65c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d06d      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a5c      	ldr	r2, [pc, #368]	; (8008838 <HAL_DMA_Init+0x660>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d068      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a5a      	ldr	r2, [pc, #360]	; (800883c <HAL_DMA_Init+0x664>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d063      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a59      	ldr	r2, [pc, #356]	; (8008840 <HAL_DMA_Init+0x668>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d05e      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a57      	ldr	r2, [pc, #348]	; (8008844 <HAL_DMA_Init+0x66c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d059      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a56      	ldr	r2, [pc, #344]	; (8008848 <HAL_DMA_Init+0x670>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d054      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a54      	ldr	r2, [pc, #336]	; (800884c <HAL_DMA_Init+0x674>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d04f      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a53      	ldr	r2, [pc, #332]	; (8008850 <HAL_DMA_Init+0x678>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d04a      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a51      	ldr	r2, [pc, #324]	; (8008854 <HAL_DMA_Init+0x67c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d045      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a50      	ldr	r2, [pc, #320]	; (8008858 <HAL_DMA_Init+0x680>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d040      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a4e      	ldr	r2, [pc, #312]	; (800885c <HAL_DMA_Init+0x684>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d03b      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a4d      	ldr	r2, [pc, #308]	; (8008860 <HAL_DMA_Init+0x688>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d036      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a4b      	ldr	r2, [pc, #300]	; (8008864 <HAL_DMA_Init+0x68c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d031      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a4a      	ldr	r2, [pc, #296]	; (8008868 <HAL_DMA_Init+0x690>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d02c      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a48      	ldr	r2, [pc, #288]	; (800886c <HAL_DMA_Init+0x694>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d027      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a47      	ldr	r2, [pc, #284]	; (8008870 <HAL_DMA_Init+0x698>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d022      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a45      	ldr	r2, [pc, #276]	; (8008874 <HAL_DMA_Init+0x69c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01d      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a44      	ldr	r2, [pc, #272]	; (8008878 <HAL_DMA_Init+0x6a0>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d018      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a42      	ldr	r2, [pc, #264]	; (800887c <HAL_DMA_Init+0x6a4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d013      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a41      	ldr	r2, [pc, #260]	; (8008880 <HAL_DMA_Init+0x6a8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00e      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a3f      	ldr	r2, [pc, #252]	; (8008884 <HAL_DMA_Init+0x6ac>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d009      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a3e      	ldr	r2, [pc, #248]	; (8008888 <HAL_DMA_Init+0x6b0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d004      	beq.n	800879e <HAL_DMA_Init+0x5c6>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a3c      	ldr	r2, [pc, #240]	; (800888c <HAL_DMA_Init+0x6b4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d101      	bne.n	80087a2 <HAL_DMA_Init+0x5ca>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <HAL_DMA_Init+0x5cc>
 80087a2:	2300      	movs	r3, #0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d032      	beq.n	800880e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f002 fa5d 	bl	800ac68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b80      	cmp	r3, #128	; 0x80
 80087b4:	d102      	bne.n	80087bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c4:	b2d2      	uxtb	r2, r2
 80087c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80087d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d010      	beq.n	80087fc <HAL_DMA_Init+0x624>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d80c      	bhi.n	80087fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f002 fada 	bl	800ad9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	e008      	b.n	800880e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	a7fdabf8 	.word	0xa7fdabf8
 800882c:	cccccccd 	.word	0xcccccccd
 8008830:	40020010 	.word	0x40020010
 8008834:	40020028 	.word	0x40020028
 8008838:	40020040 	.word	0x40020040
 800883c:	40020058 	.word	0x40020058
 8008840:	40020070 	.word	0x40020070
 8008844:	40020088 	.word	0x40020088
 8008848:	400200a0 	.word	0x400200a0
 800884c:	400200b8 	.word	0x400200b8
 8008850:	40020410 	.word	0x40020410
 8008854:	40020428 	.word	0x40020428
 8008858:	40020440 	.word	0x40020440
 800885c:	40020458 	.word	0x40020458
 8008860:	40020470 	.word	0x40020470
 8008864:	40020488 	.word	0x40020488
 8008868:	400204a0 	.word	0x400204a0
 800886c:	400204b8 	.word	0x400204b8
 8008870:	58025408 	.word	0x58025408
 8008874:	5802541c 	.word	0x5802541c
 8008878:	58025430 	.word	0x58025430
 800887c:	58025444 	.word	0x58025444
 8008880:	58025458 	.word	0x58025458
 8008884:	5802546c 	.word	0x5802546c
 8008888:	58025480 	.word	0x58025480
 800888c:	58025494 	.word	0x58025494

08008890 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e226      	b.n	8008cfa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <HAL_DMA_Start_IT+0x2a>
 80088b6:	2302      	movs	r3, #2
 80088b8:	e21f      	b.n	8008cfa <HAL_DMA_Start_IT+0x46a>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	f040 820a 	bne.w	8008ce4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a68      	ldr	r2, [pc, #416]	; (8008a84 <HAL_DMA_Start_IT+0x1f4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d04a      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a66      	ldr	r2, [pc, #408]	; (8008a88 <HAL_DMA_Start_IT+0x1f8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d045      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a65      	ldr	r2, [pc, #404]	; (8008a8c <HAL_DMA_Start_IT+0x1fc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d040      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a63      	ldr	r2, [pc, #396]	; (8008a90 <HAL_DMA_Start_IT+0x200>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d03b      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a62      	ldr	r2, [pc, #392]	; (8008a94 <HAL_DMA_Start_IT+0x204>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d036      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a60      	ldr	r2, [pc, #384]	; (8008a98 <HAL_DMA_Start_IT+0x208>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d031      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a5f      	ldr	r2, [pc, #380]	; (8008a9c <HAL_DMA_Start_IT+0x20c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d02c      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a5d      	ldr	r2, [pc, #372]	; (8008aa0 <HAL_DMA_Start_IT+0x210>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d027      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a5c      	ldr	r2, [pc, #368]	; (8008aa4 <HAL_DMA_Start_IT+0x214>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d022      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a5a      	ldr	r2, [pc, #360]	; (8008aa8 <HAL_DMA_Start_IT+0x218>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d01d      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a59      	ldr	r2, [pc, #356]	; (8008aac <HAL_DMA_Start_IT+0x21c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d018      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a57      	ldr	r2, [pc, #348]	; (8008ab0 <HAL_DMA_Start_IT+0x220>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d013      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a56      	ldr	r2, [pc, #344]	; (8008ab4 <HAL_DMA_Start_IT+0x224>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00e      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a54      	ldr	r2, [pc, #336]	; (8008ab8 <HAL_DMA_Start_IT+0x228>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d009      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a53      	ldr	r2, [pc, #332]	; (8008abc <HAL_DMA_Start_IT+0x22c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d004      	beq.n	800897e <HAL_DMA_Start_IT+0xee>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a51      	ldr	r2, [pc, #324]	; (8008ac0 <HAL_DMA_Start_IT+0x230>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d108      	bne.n	8008990 <HAL_DMA_Start_IT+0x100>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e007      	b.n	80089a0 <HAL_DMA_Start_IT+0x110>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0201 	bic.w	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f001 fe84 	bl	800a6b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a34      	ldr	r2, [pc, #208]	; (8008a84 <HAL_DMA_Start_IT+0x1f4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d04a      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a33      	ldr	r2, [pc, #204]	; (8008a88 <HAL_DMA_Start_IT+0x1f8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d045      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a31      	ldr	r2, [pc, #196]	; (8008a8c <HAL_DMA_Start_IT+0x1fc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d040      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a30      	ldr	r2, [pc, #192]	; (8008a90 <HAL_DMA_Start_IT+0x200>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d03b      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a2e      	ldr	r2, [pc, #184]	; (8008a94 <HAL_DMA_Start_IT+0x204>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d036      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a2d      	ldr	r2, [pc, #180]	; (8008a98 <HAL_DMA_Start_IT+0x208>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d031      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a2b      	ldr	r2, [pc, #172]	; (8008a9c <HAL_DMA_Start_IT+0x20c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d02c      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a2a      	ldr	r2, [pc, #168]	; (8008aa0 <HAL_DMA_Start_IT+0x210>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d027      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a28      	ldr	r2, [pc, #160]	; (8008aa4 <HAL_DMA_Start_IT+0x214>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d022      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a27      	ldr	r2, [pc, #156]	; (8008aa8 <HAL_DMA_Start_IT+0x218>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d01d      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a25      	ldr	r2, [pc, #148]	; (8008aac <HAL_DMA_Start_IT+0x21c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d018      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a24      	ldr	r2, [pc, #144]	; (8008ab0 <HAL_DMA_Start_IT+0x220>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d013      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a22      	ldr	r2, [pc, #136]	; (8008ab4 <HAL_DMA_Start_IT+0x224>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d00e      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a21      	ldr	r2, [pc, #132]	; (8008ab8 <HAL_DMA_Start_IT+0x228>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d009      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1f      	ldr	r2, [pc, #124]	; (8008abc <HAL_DMA_Start_IT+0x22c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d004      	beq.n	8008a4c <HAL_DMA_Start_IT+0x1bc>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a1e      	ldr	r2, [pc, #120]	; (8008ac0 <HAL_DMA_Start_IT+0x230>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d101      	bne.n	8008a50 <HAL_DMA_Start_IT+0x1c0>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e000      	b.n	8008a52 <HAL_DMA_Start_IT+0x1c2>
 8008a50:	2300      	movs	r3, #0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d036      	beq.n	8008ac4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f023 021e 	bic.w	r2, r3, #30
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0216 	orr.w	r2, r2, #22
 8008a68:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d03e      	beq.n	8008af0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0208 	orr.w	r2, r2, #8
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	e035      	b.n	8008af0 <HAL_DMA_Start_IT+0x260>
 8008a84:	40020010 	.word	0x40020010
 8008a88:	40020028 	.word	0x40020028
 8008a8c:	40020040 	.word	0x40020040
 8008a90:	40020058 	.word	0x40020058
 8008a94:	40020070 	.word	0x40020070
 8008a98:	40020088 	.word	0x40020088
 8008a9c:	400200a0 	.word	0x400200a0
 8008aa0:	400200b8 	.word	0x400200b8
 8008aa4:	40020410 	.word	0x40020410
 8008aa8:	40020428 	.word	0x40020428
 8008aac:	40020440 	.word	0x40020440
 8008ab0:	40020458 	.word	0x40020458
 8008ab4:	40020470 	.word	0x40020470
 8008ab8:	40020488 	.word	0x40020488
 8008abc:	400204a0 	.word	0x400204a0
 8008ac0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f023 020e 	bic.w	r2, r3, #14
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 020a 	orr.w	r2, r2, #10
 8008ad6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0204 	orr.w	r2, r2, #4
 8008aee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a83      	ldr	r2, [pc, #524]	; (8008d04 <HAL_DMA_Start_IT+0x474>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d072      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a82      	ldr	r2, [pc, #520]	; (8008d08 <HAL_DMA_Start_IT+0x478>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d06d      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a80      	ldr	r2, [pc, #512]	; (8008d0c <HAL_DMA_Start_IT+0x47c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d068      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a7f      	ldr	r2, [pc, #508]	; (8008d10 <HAL_DMA_Start_IT+0x480>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d063      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a7d      	ldr	r2, [pc, #500]	; (8008d14 <HAL_DMA_Start_IT+0x484>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d05e      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a7c      	ldr	r2, [pc, #496]	; (8008d18 <HAL_DMA_Start_IT+0x488>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d059      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a7a      	ldr	r2, [pc, #488]	; (8008d1c <HAL_DMA_Start_IT+0x48c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d054      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a79      	ldr	r2, [pc, #484]	; (8008d20 <HAL_DMA_Start_IT+0x490>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d04f      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a77      	ldr	r2, [pc, #476]	; (8008d24 <HAL_DMA_Start_IT+0x494>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d04a      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a76      	ldr	r2, [pc, #472]	; (8008d28 <HAL_DMA_Start_IT+0x498>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d045      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a74      	ldr	r2, [pc, #464]	; (8008d2c <HAL_DMA_Start_IT+0x49c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d040      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a73      	ldr	r2, [pc, #460]	; (8008d30 <HAL_DMA_Start_IT+0x4a0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d03b      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a71      	ldr	r2, [pc, #452]	; (8008d34 <HAL_DMA_Start_IT+0x4a4>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d036      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a70      	ldr	r2, [pc, #448]	; (8008d38 <HAL_DMA_Start_IT+0x4a8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d031      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a6e      	ldr	r2, [pc, #440]	; (8008d3c <HAL_DMA_Start_IT+0x4ac>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d02c      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a6d      	ldr	r2, [pc, #436]	; (8008d40 <HAL_DMA_Start_IT+0x4b0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d027      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a6b      	ldr	r2, [pc, #428]	; (8008d44 <HAL_DMA_Start_IT+0x4b4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d022      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a6a      	ldr	r2, [pc, #424]	; (8008d48 <HAL_DMA_Start_IT+0x4b8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d01d      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a68      	ldr	r2, [pc, #416]	; (8008d4c <HAL_DMA_Start_IT+0x4bc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d018      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a67      	ldr	r2, [pc, #412]	; (8008d50 <HAL_DMA_Start_IT+0x4c0>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d013      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a65      	ldr	r2, [pc, #404]	; (8008d54 <HAL_DMA_Start_IT+0x4c4>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00e      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a64      	ldr	r2, [pc, #400]	; (8008d58 <HAL_DMA_Start_IT+0x4c8>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d009      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a62      	ldr	r2, [pc, #392]	; (8008d5c <HAL_DMA_Start_IT+0x4cc>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d004      	beq.n	8008be0 <HAL_DMA_Start_IT+0x350>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a61      	ldr	r2, [pc, #388]	; (8008d60 <HAL_DMA_Start_IT+0x4d0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d101      	bne.n	8008be4 <HAL_DMA_Start_IT+0x354>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <HAL_DMA_Start_IT+0x356>
 8008be4:	2300      	movs	r3, #0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d01a      	beq.n	8008c20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d007      	beq.n	8008c08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a37      	ldr	r2, [pc, #220]	; (8008d04 <HAL_DMA_Start_IT+0x474>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d04a      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a36      	ldr	r2, [pc, #216]	; (8008d08 <HAL_DMA_Start_IT+0x478>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d045      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a34      	ldr	r2, [pc, #208]	; (8008d0c <HAL_DMA_Start_IT+0x47c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d040      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a33      	ldr	r2, [pc, #204]	; (8008d10 <HAL_DMA_Start_IT+0x480>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d03b      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a31      	ldr	r2, [pc, #196]	; (8008d14 <HAL_DMA_Start_IT+0x484>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d036      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a30      	ldr	r2, [pc, #192]	; (8008d18 <HAL_DMA_Start_IT+0x488>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d031      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a2e      	ldr	r2, [pc, #184]	; (8008d1c <HAL_DMA_Start_IT+0x48c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d02c      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a2d      	ldr	r2, [pc, #180]	; (8008d20 <HAL_DMA_Start_IT+0x490>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d027      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a2b      	ldr	r2, [pc, #172]	; (8008d24 <HAL_DMA_Start_IT+0x494>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d022      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2a      	ldr	r2, [pc, #168]	; (8008d28 <HAL_DMA_Start_IT+0x498>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01d      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a28      	ldr	r2, [pc, #160]	; (8008d2c <HAL_DMA_Start_IT+0x49c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d018      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a27      	ldr	r2, [pc, #156]	; (8008d30 <HAL_DMA_Start_IT+0x4a0>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d013      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a25      	ldr	r2, [pc, #148]	; (8008d34 <HAL_DMA_Start_IT+0x4a4>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00e      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a24      	ldr	r2, [pc, #144]	; (8008d38 <HAL_DMA_Start_IT+0x4a8>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d009      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a22      	ldr	r2, [pc, #136]	; (8008d3c <HAL_DMA_Start_IT+0x4ac>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <HAL_DMA_Start_IT+0x430>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <HAL_DMA_Start_IT+0x4b0>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d108      	bne.n	8008cd2 <HAL_DMA_Start_IT+0x442>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0201 	orr.w	r2, r2, #1
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	e012      	b.n	8008cf8 <HAL_DMA_Start_IT+0x468>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f042 0201 	orr.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e009      	b.n	8008cf8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40020010 	.word	0x40020010
 8008d08:	40020028 	.word	0x40020028
 8008d0c:	40020040 	.word	0x40020040
 8008d10:	40020058 	.word	0x40020058
 8008d14:	40020070 	.word	0x40020070
 8008d18:	40020088 	.word	0x40020088
 8008d1c:	400200a0 	.word	0x400200a0
 8008d20:	400200b8 	.word	0x400200b8
 8008d24:	40020410 	.word	0x40020410
 8008d28:	40020428 	.word	0x40020428
 8008d2c:	40020440 	.word	0x40020440
 8008d30:	40020458 	.word	0x40020458
 8008d34:	40020470 	.word	0x40020470
 8008d38:	40020488 	.word	0x40020488
 8008d3c:	400204a0 	.word	0x400204a0
 8008d40:	400204b8 	.word	0x400204b8
 8008d44:	58025408 	.word	0x58025408
 8008d48:	5802541c 	.word	0x5802541c
 8008d4c:	58025430 	.word	0x58025430
 8008d50:	58025444 	.word	0x58025444
 8008d54:	58025458 	.word	0x58025458
 8008d58:	5802546c 	.word	0x5802546c
 8008d5c:	58025480 	.word	0x58025480
 8008d60:	58025494 	.word	0x58025494

08008d64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008d6c:	f7fd f90c 	bl	8005f88 <HAL_GetTick>
 8008d70:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e2dc      	b.n	8009336 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d008      	beq.n	8008d9a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2280      	movs	r2, #128	; 0x80
 8008d8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e2cd      	b.n	8009336 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a76      	ldr	r2, [pc, #472]	; (8008f78 <HAL_DMA_Abort+0x214>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d04a      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a74      	ldr	r2, [pc, #464]	; (8008f7c <HAL_DMA_Abort+0x218>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d045      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a73      	ldr	r2, [pc, #460]	; (8008f80 <HAL_DMA_Abort+0x21c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d040      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a71      	ldr	r2, [pc, #452]	; (8008f84 <HAL_DMA_Abort+0x220>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d03b      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a70      	ldr	r2, [pc, #448]	; (8008f88 <HAL_DMA_Abort+0x224>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d036      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a6e      	ldr	r2, [pc, #440]	; (8008f8c <HAL_DMA_Abort+0x228>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d031      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a6d      	ldr	r2, [pc, #436]	; (8008f90 <HAL_DMA_Abort+0x22c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d02c      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a6b      	ldr	r2, [pc, #428]	; (8008f94 <HAL_DMA_Abort+0x230>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d027      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a6a      	ldr	r2, [pc, #424]	; (8008f98 <HAL_DMA_Abort+0x234>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d022      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a68      	ldr	r2, [pc, #416]	; (8008f9c <HAL_DMA_Abort+0x238>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d01d      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a67      	ldr	r2, [pc, #412]	; (8008fa0 <HAL_DMA_Abort+0x23c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d018      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a65      	ldr	r2, [pc, #404]	; (8008fa4 <HAL_DMA_Abort+0x240>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d013      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a64      	ldr	r2, [pc, #400]	; (8008fa8 <HAL_DMA_Abort+0x244>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00e      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a62      	ldr	r2, [pc, #392]	; (8008fac <HAL_DMA_Abort+0x248>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d009      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a61      	ldr	r2, [pc, #388]	; (8008fb0 <HAL_DMA_Abort+0x24c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d004      	beq.n	8008e3a <HAL_DMA_Abort+0xd6>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a5f      	ldr	r2, [pc, #380]	; (8008fb4 <HAL_DMA_Abort+0x250>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d101      	bne.n	8008e3e <HAL_DMA_Abort+0xda>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <HAL_DMA_Abort+0xdc>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d013      	beq.n	8008e6c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 021e 	bic.w	r2, r2, #30
 8008e52:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695a      	ldr	r2, [r3, #20]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e62:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	e00a      	b.n	8008e82 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 020e 	bic.w	r2, r2, #14
 8008e7a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a3c      	ldr	r2, [pc, #240]	; (8008f78 <HAL_DMA_Abort+0x214>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d072      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a3a      	ldr	r2, [pc, #232]	; (8008f7c <HAL_DMA_Abort+0x218>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d06d      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a39      	ldr	r2, [pc, #228]	; (8008f80 <HAL_DMA_Abort+0x21c>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d068      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a37      	ldr	r2, [pc, #220]	; (8008f84 <HAL_DMA_Abort+0x220>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d063      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a36      	ldr	r2, [pc, #216]	; (8008f88 <HAL_DMA_Abort+0x224>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d05e      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a34      	ldr	r2, [pc, #208]	; (8008f8c <HAL_DMA_Abort+0x228>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d059      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a33      	ldr	r2, [pc, #204]	; (8008f90 <HAL_DMA_Abort+0x22c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d054      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a31      	ldr	r2, [pc, #196]	; (8008f94 <HAL_DMA_Abort+0x230>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d04f      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a30      	ldr	r2, [pc, #192]	; (8008f98 <HAL_DMA_Abort+0x234>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d04a      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a2e      	ldr	r2, [pc, #184]	; (8008f9c <HAL_DMA_Abort+0x238>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d045      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a2d      	ldr	r2, [pc, #180]	; (8008fa0 <HAL_DMA_Abort+0x23c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d040      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a2b      	ldr	r2, [pc, #172]	; (8008fa4 <HAL_DMA_Abort+0x240>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d03b      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a2a      	ldr	r2, [pc, #168]	; (8008fa8 <HAL_DMA_Abort+0x244>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d036      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a28      	ldr	r2, [pc, #160]	; (8008fac <HAL_DMA_Abort+0x248>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d031      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a27      	ldr	r2, [pc, #156]	; (8008fb0 <HAL_DMA_Abort+0x24c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d02c      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a25      	ldr	r2, [pc, #148]	; (8008fb4 <HAL_DMA_Abort+0x250>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d027      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a24      	ldr	r2, [pc, #144]	; (8008fb8 <HAL_DMA_Abort+0x254>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d022      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a22      	ldr	r2, [pc, #136]	; (8008fbc <HAL_DMA_Abort+0x258>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d01d      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a21      	ldr	r2, [pc, #132]	; (8008fc0 <HAL_DMA_Abort+0x25c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d018      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <HAL_DMA_Abort+0x260>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d013      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <HAL_DMA_Abort+0x264>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00e      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a1c      	ldr	r2, [pc, #112]	; (8008fcc <HAL_DMA_Abort+0x268>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d009      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a1b      	ldr	r2, [pc, #108]	; (8008fd0 <HAL_DMA_Abort+0x26c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d004      	beq.n	8008f72 <HAL_DMA_Abort+0x20e>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a19      	ldr	r2, [pc, #100]	; (8008fd4 <HAL_DMA_Abort+0x270>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d132      	bne.n	8008fd8 <HAL_DMA_Abort+0x274>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e031      	b.n	8008fda <HAL_DMA_Abort+0x276>
 8008f76:	bf00      	nop
 8008f78:	40020010 	.word	0x40020010
 8008f7c:	40020028 	.word	0x40020028
 8008f80:	40020040 	.word	0x40020040
 8008f84:	40020058 	.word	0x40020058
 8008f88:	40020070 	.word	0x40020070
 8008f8c:	40020088 	.word	0x40020088
 8008f90:	400200a0 	.word	0x400200a0
 8008f94:	400200b8 	.word	0x400200b8
 8008f98:	40020410 	.word	0x40020410
 8008f9c:	40020428 	.word	0x40020428
 8008fa0:	40020440 	.word	0x40020440
 8008fa4:	40020458 	.word	0x40020458
 8008fa8:	40020470 	.word	0x40020470
 8008fac:	40020488 	.word	0x40020488
 8008fb0:	400204a0 	.word	0x400204a0
 8008fb4:	400204b8 	.word	0x400204b8
 8008fb8:	58025408 	.word	0x58025408
 8008fbc:	5802541c 	.word	0x5802541c
 8008fc0:	58025430 	.word	0x58025430
 8008fc4:	58025444 	.word	0x58025444
 8008fc8:	58025458 	.word	0x58025458
 8008fcc:	5802546c 	.word	0x5802546c
 8008fd0:	58025480 	.word	0x58025480
 8008fd4:	58025494 	.word	0x58025494
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d007      	beq.n	8008fee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a6d      	ldr	r2, [pc, #436]	; (80091a8 <HAL_DMA_Abort+0x444>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d04a      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a6b      	ldr	r2, [pc, #428]	; (80091ac <HAL_DMA_Abort+0x448>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d045      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a6a      	ldr	r2, [pc, #424]	; (80091b0 <HAL_DMA_Abort+0x44c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d040      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a68      	ldr	r2, [pc, #416]	; (80091b4 <HAL_DMA_Abort+0x450>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d03b      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a67      	ldr	r2, [pc, #412]	; (80091b8 <HAL_DMA_Abort+0x454>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d036      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a65      	ldr	r2, [pc, #404]	; (80091bc <HAL_DMA_Abort+0x458>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d031      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a64      	ldr	r2, [pc, #400]	; (80091c0 <HAL_DMA_Abort+0x45c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d02c      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a62      	ldr	r2, [pc, #392]	; (80091c4 <HAL_DMA_Abort+0x460>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d027      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a61      	ldr	r2, [pc, #388]	; (80091c8 <HAL_DMA_Abort+0x464>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d022      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a5f      	ldr	r2, [pc, #380]	; (80091cc <HAL_DMA_Abort+0x468>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d01d      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a5e      	ldr	r2, [pc, #376]	; (80091d0 <HAL_DMA_Abort+0x46c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d018      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a5c      	ldr	r2, [pc, #368]	; (80091d4 <HAL_DMA_Abort+0x470>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a5b      	ldr	r2, [pc, #364]	; (80091d8 <HAL_DMA_Abort+0x474>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00e      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a59      	ldr	r2, [pc, #356]	; (80091dc <HAL_DMA_Abort+0x478>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a58      	ldr	r2, [pc, #352]	; (80091e0 <HAL_DMA_Abort+0x47c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_DMA_Abort+0x32a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a56      	ldr	r2, [pc, #344]	; (80091e4 <HAL_DMA_Abort+0x480>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d108      	bne.n	80090a0 <HAL_DMA_Abort+0x33c>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0201 	bic.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e007      	b.n	80090b0 <HAL_DMA_Abort+0x34c>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0201 	bic.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80090b0:	e013      	b.n	80090da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80090b2:	f7fc ff69 	bl	8005f88 <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	2b05      	cmp	r3, #5
 80090be:	d90c      	bls.n	80090da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2203      	movs	r2, #3
 80090ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e12d      	b.n	8009336 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e5      	bne.n	80090b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a2f      	ldr	r2, [pc, #188]	; (80091a8 <HAL_DMA_Abort+0x444>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d04a      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a2d      	ldr	r2, [pc, #180]	; (80091ac <HAL_DMA_Abort+0x448>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d045      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a2c      	ldr	r2, [pc, #176]	; (80091b0 <HAL_DMA_Abort+0x44c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d040      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a2a      	ldr	r2, [pc, #168]	; (80091b4 <HAL_DMA_Abort+0x450>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d03b      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a29      	ldr	r2, [pc, #164]	; (80091b8 <HAL_DMA_Abort+0x454>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d036      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a27      	ldr	r2, [pc, #156]	; (80091bc <HAL_DMA_Abort+0x458>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d031      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a26      	ldr	r2, [pc, #152]	; (80091c0 <HAL_DMA_Abort+0x45c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d02c      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a24      	ldr	r2, [pc, #144]	; (80091c4 <HAL_DMA_Abort+0x460>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d027      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a23      	ldr	r2, [pc, #140]	; (80091c8 <HAL_DMA_Abort+0x464>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d022      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a21      	ldr	r2, [pc, #132]	; (80091cc <HAL_DMA_Abort+0x468>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d01d      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a20      	ldr	r2, [pc, #128]	; (80091d0 <HAL_DMA_Abort+0x46c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d018      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1e      	ldr	r2, [pc, #120]	; (80091d4 <HAL_DMA_Abort+0x470>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d013      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <HAL_DMA_Abort+0x474>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00e      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a1b      	ldr	r2, [pc, #108]	; (80091dc <HAL_DMA_Abort+0x478>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d009      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a1a      	ldr	r2, [pc, #104]	; (80091e0 <HAL_DMA_Abort+0x47c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d004      	beq.n	8009186 <HAL_DMA_Abort+0x422>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a18      	ldr	r2, [pc, #96]	; (80091e4 <HAL_DMA_Abort+0x480>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d101      	bne.n	800918a <HAL_DMA_Abort+0x426>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <HAL_DMA_Abort+0x428>
 800918a:	2300      	movs	r3, #0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d02b      	beq.n	80091e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009194:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800919a:	f003 031f 	and.w	r3, r3, #31
 800919e:	223f      	movs	r2, #63	; 0x3f
 80091a0:	409a      	lsls	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	609a      	str	r2, [r3, #8]
 80091a6:	e02a      	b.n	80091fe <HAL_DMA_Abort+0x49a>
 80091a8:	40020010 	.word	0x40020010
 80091ac:	40020028 	.word	0x40020028
 80091b0:	40020040 	.word	0x40020040
 80091b4:	40020058 	.word	0x40020058
 80091b8:	40020070 	.word	0x40020070
 80091bc:	40020088 	.word	0x40020088
 80091c0:	400200a0 	.word	0x400200a0
 80091c4:	400200b8 	.word	0x400200b8
 80091c8:	40020410 	.word	0x40020410
 80091cc:	40020428 	.word	0x40020428
 80091d0:	40020440 	.word	0x40020440
 80091d4:	40020458 	.word	0x40020458
 80091d8:	40020470 	.word	0x40020470
 80091dc:	40020488 	.word	0x40020488
 80091e0:	400204a0 	.word	0x400204a0
 80091e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f2:	f003 031f 	and.w	r3, r3, #31
 80091f6:	2201      	movs	r2, #1
 80091f8:	409a      	lsls	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a4f      	ldr	r2, [pc, #316]	; (8009340 <HAL_DMA_Abort+0x5dc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d072      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a4d      	ldr	r2, [pc, #308]	; (8009344 <HAL_DMA_Abort+0x5e0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d06d      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a4c      	ldr	r2, [pc, #304]	; (8009348 <HAL_DMA_Abort+0x5e4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d068      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a4a      	ldr	r2, [pc, #296]	; (800934c <HAL_DMA_Abort+0x5e8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d063      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a49      	ldr	r2, [pc, #292]	; (8009350 <HAL_DMA_Abort+0x5ec>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d05e      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a47      	ldr	r2, [pc, #284]	; (8009354 <HAL_DMA_Abort+0x5f0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d059      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a46      	ldr	r2, [pc, #280]	; (8009358 <HAL_DMA_Abort+0x5f4>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d054      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a44      	ldr	r2, [pc, #272]	; (800935c <HAL_DMA_Abort+0x5f8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d04f      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a43      	ldr	r2, [pc, #268]	; (8009360 <HAL_DMA_Abort+0x5fc>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d04a      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a41      	ldr	r2, [pc, #260]	; (8009364 <HAL_DMA_Abort+0x600>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d045      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a40      	ldr	r2, [pc, #256]	; (8009368 <HAL_DMA_Abort+0x604>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d040      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a3e      	ldr	r2, [pc, #248]	; (800936c <HAL_DMA_Abort+0x608>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d03b      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a3d      	ldr	r2, [pc, #244]	; (8009370 <HAL_DMA_Abort+0x60c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d036      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a3b      	ldr	r2, [pc, #236]	; (8009374 <HAL_DMA_Abort+0x610>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d031      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a3a      	ldr	r2, [pc, #232]	; (8009378 <HAL_DMA_Abort+0x614>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d02c      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a38      	ldr	r2, [pc, #224]	; (800937c <HAL_DMA_Abort+0x618>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d027      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a37      	ldr	r2, [pc, #220]	; (8009380 <HAL_DMA_Abort+0x61c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d022      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a35      	ldr	r2, [pc, #212]	; (8009384 <HAL_DMA_Abort+0x620>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d01d      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a34      	ldr	r2, [pc, #208]	; (8009388 <HAL_DMA_Abort+0x624>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d018      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a32      	ldr	r2, [pc, #200]	; (800938c <HAL_DMA_Abort+0x628>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d013      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a31      	ldr	r2, [pc, #196]	; (8009390 <HAL_DMA_Abort+0x62c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d00e      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a2f      	ldr	r2, [pc, #188]	; (8009394 <HAL_DMA_Abort+0x630>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d009      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a2e      	ldr	r2, [pc, #184]	; (8009398 <HAL_DMA_Abort+0x634>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d004      	beq.n	80092ee <HAL_DMA_Abort+0x58a>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a2c      	ldr	r2, [pc, #176]	; (800939c <HAL_DMA_Abort+0x638>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d101      	bne.n	80092f2 <HAL_DMA_Abort+0x58e>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e000      	b.n	80092f4 <HAL_DMA_Abort+0x590>
 80092f2:	2300      	movs	r3, #0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d015      	beq.n	8009324 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009300:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00c      	beq.n	8009324 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009318:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009322:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	40020010 	.word	0x40020010
 8009344:	40020028 	.word	0x40020028
 8009348:	40020040 	.word	0x40020040
 800934c:	40020058 	.word	0x40020058
 8009350:	40020070 	.word	0x40020070
 8009354:	40020088 	.word	0x40020088
 8009358:	400200a0 	.word	0x400200a0
 800935c:	400200b8 	.word	0x400200b8
 8009360:	40020410 	.word	0x40020410
 8009364:	40020428 	.word	0x40020428
 8009368:	40020440 	.word	0x40020440
 800936c:	40020458 	.word	0x40020458
 8009370:	40020470 	.word	0x40020470
 8009374:	40020488 	.word	0x40020488
 8009378:	400204a0 	.word	0x400204a0
 800937c:	400204b8 	.word	0x400204b8
 8009380:	58025408 	.word	0x58025408
 8009384:	5802541c 	.word	0x5802541c
 8009388:	58025430 	.word	0x58025430
 800938c:	58025444 	.word	0x58025444
 8009390:	58025458 	.word	0x58025458
 8009394:	5802546c 	.word	0x5802546c
 8009398:	58025480 	.word	0x58025480
 800939c:	58025494 	.word	0x58025494

080093a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e237      	b.n	8009822 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d004      	beq.n	80093c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2280      	movs	r2, #128	; 0x80
 80093c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e22c      	b.n	8009822 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a5c      	ldr	r2, [pc, #368]	; (8009540 <HAL_DMA_Abort_IT+0x1a0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d04a      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a5b      	ldr	r2, [pc, #364]	; (8009544 <HAL_DMA_Abort_IT+0x1a4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d045      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a59      	ldr	r2, [pc, #356]	; (8009548 <HAL_DMA_Abort_IT+0x1a8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d040      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a58      	ldr	r2, [pc, #352]	; (800954c <HAL_DMA_Abort_IT+0x1ac>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d03b      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a56      	ldr	r2, [pc, #344]	; (8009550 <HAL_DMA_Abort_IT+0x1b0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d036      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a55      	ldr	r2, [pc, #340]	; (8009554 <HAL_DMA_Abort_IT+0x1b4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d031      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a53      	ldr	r2, [pc, #332]	; (8009558 <HAL_DMA_Abort_IT+0x1b8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d02c      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a52      	ldr	r2, [pc, #328]	; (800955c <HAL_DMA_Abort_IT+0x1bc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d027      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a50      	ldr	r2, [pc, #320]	; (8009560 <HAL_DMA_Abort_IT+0x1c0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d022      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a4f      	ldr	r2, [pc, #316]	; (8009564 <HAL_DMA_Abort_IT+0x1c4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d01d      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a4d      	ldr	r2, [pc, #308]	; (8009568 <HAL_DMA_Abort_IT+0x1c8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d018      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a4c      	ldr	r2, [pc, #304]	; (800956c <HAL_DMA_Abort_IT+0x1cc>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d013      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a4a      	ldr	r2, [pc, #296]	; (8009570 <HAL_DMA_Abort_IT+0x1d0>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00e      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a49      	ldr	r2, [pc, #292]	; (8009574 <HAL_DMA_Abort_IT+0x1d4>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d009      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a47      	ldr	r2, [pc, #284]	; (8009578 <HAL_DMA_Abort_IT+0x1d8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d004      	beq.n	8009468 <HAL_DMA_Abort_IT+0xc8>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a46      	ldr	r2, [pc, #280]	; (800957c <HAL_DMA_Abort_IT+0x1dc>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d101      	bne.n	800946c <HAL_DMA_Abort_IT+0xcc>
 8009468:	2301      	movs	r3, #1
 800946a:	e000      	b.n	800946e <HAL_DMA_Abort_IT+0xce>
 800946c:	2300      	movs	r3, #0
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 8086 	beq.w	8009580 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2204      	movs	r2, #4
 8009478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a2f      	ldr	r2, [pc, #188]	; (8009540 <HAL_DMA_Abort_IT+0x1a0>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d04a      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a2e      	ldr	r2, [pc, #184]	; (8009544 <HAL_DMA_Abort_IT+0x1a4>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d045      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a2c      	ldr	r2, [pc, #176]	; (8009548 <HAL_DMA_Abort_IT+0x1a8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d040      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a2b      	ldr	r2, [pc, #172]	; (800954c <HAL_DMA_Abort_IT+0x1ac>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d03b      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a29      	ldr	r2, [pc, #164]	; (8009550 <HAL_DMA_Abort_IT+0x1b0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d036      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a28      	ldr	r2, [pc, #160]	; (8009554 <HAL_DMA_Abort_IT+0x1b4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d031      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a26      	ldr	r2, [pc, #152]	; (8009558 <HAL_DMA_Abort_IT+0x1b8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d02c      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a25      	ldr	r2, [pc, #148]	; (800955c <HAL_DMA_Abort_IT+0x1bc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d027      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a23      	ldr	r2, [pc, #140]	; (8009560 <HAL_DMA_Abort_IT+0x1c0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d022      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a22      	ldr	r2, [pc, #136]	; (8009564 <HAL_DMA_Abort_IT+0x1c4>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d01d      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a20      	ldr	r2, [pc, #128]	; (8009568 <HAL_DMA_Abort_IT+0x1c8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d018      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1f      	ldr	r2, [pc, #124]	; (800956c <HAL_DMA_Abort_IT+0x1cc>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d013      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a1d      	ldr	r2, [pc, #116]	; (8009570 <HAL_DMA_Abort_IT+0x1d0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00e      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a1c      	ldr	r2, [pc, #112]	; (8009574 <HAL_DMA_Abort_IT+0x1d4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d009      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1a      	ldr	r2, [pc, #104]	; (8009578 <HAL_DMA_Abort_IT+0x1d8>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d004      	beq.n	800951c <HAL_DMA_Abort_IT+0x17c>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a19      	ldr	r2, [pc, #100]	; (800957c <HAL_DMA_Abort_IT+0x1dc>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d108      	bne.n	800952e <HAL_DMA_Abort_IT+0x18e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 0201 	bic.w	r2, r2, #1
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	e178      	b.n	8009820 <HAL_DMA_Abort_IT+0x480>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0201 	bic.w	r2, r2, #1
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	e16f      	b.n	8009820 <HAL_DMA_Abort_IT+0x480>
 8009540:	40020010 	.word	0x40020010
 8009544:	40020028 	.word	0x40020028
 8009548:	40020040 	.word	0x40020040
 800954c:	40020058 	.word	0x40020058
 8009550:	40020070 	.word	0x40020070
 8009554:	40020088 	.word	0x40020088
 8009558:	400200a0 	.word	0x400200a0
 800955c:	400200b8 	.word	0x400200b8
 8009560:	40020410 	.word	0x40020410
 8009564:	40020428 	.word	0x40020428
 8009568:	40020440 	.word	0x40020440
 800956c:	40020458 	.word	0x40020458
 8009570:	40020470 	.word	0x40020470
 8009574:	40020488 	.word	0x40020488
 8009578:	400204a0 	.word	0x400204a0
 800957c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 020e 	bic.w	r2, r2, #14
 800958e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a6c      	ldr	r2, [pc, #432]	; (8009748 <HAL_DMA_Abort_IT+0x3a8>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d04a      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a6b      	ldr	r2, [pc, #428]	; (800974c <HAL_DMA_Abort_IT+0x3ac>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d045      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a69      	ldr	r2, [pc, #420]	; (8009750 <HAL_DMA_Abort_IT+0x3b0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d040      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a68      	ldr	r2, [pc, #416]	; (8009754 <HAL_DMA_Abort_IT+0x3b4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d03b      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a66      	ldr	r2, [pc, #408]	; (8009758 <HAL_DMA_Abort_IT+0x3b8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d036      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a65      	ldr	r2, [pc, #404]	; (800975c <HAL_DMA_Abort_IT+0x3bc>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d031      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a63      	ldr	r2, [pc, #396]	; (8009760 <HAL_DMA_Abort_IT+0x3c0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d02c      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a62      	ldr	r2, [pc, #392]	; (8009764 <HAL_DMA_Abort_IT+0x3c4>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d027      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a60      	ldr	r2, [pc, #384]	; (8009768 <HAL_DMA_Abort_IT+0x3c8>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d022      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a5f      	ldr	r2, [pc, #380]	; (800976c <HAL_DMA_Abort_IT+0x3cc>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d01d      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a5d      	ldr	r2, [pc, #372]	; (8009770 <HAL_DMA_Abort_IT+0x3d0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d018      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a5c      	ldr	r2, [pc, #368]	; (8009774 <HAL_DMA_Abort_IT+0x3d4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d013      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a5a      	ldr	r2, [pc, #360]	; (8009778 <HAL_DMA_Abort_IT+0x3d8>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d00e      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a59      	ldr	r2, [pc, #356]	; (800977c <HAL_DMA_Abort_IT+0x3dc>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d009      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a57      	ldr	r2, [pc, #348]	; (8009780 <HAL_DMA_Abort_IT+0x3e0>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d004      	beq.n	8009630 <HAL_DMA_Abort_IT+0x290>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a56      	ldr	r2, [pc, #344]	; (8009784 <HAL_DMA_Abort_IT+0x3e4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d108      	bne.n	8009642 <HAL_DMA_Abort_IT+0x2a2>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0201 	bic.w	r2, r2, #1
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	e007      	b.n	8009652 <HAL_DMA_Abort_IT+0x2b2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a3c      	ldr	r2, [pc, #240]	; (8009748 <HAL_DMA_Abort_IT+0x3a8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d072      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a3a      	ldr	r2, [pc, #232]	; (800974c <HAL_DMA_Abort_IT+0x3ac>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d06d      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a39      	ldr	r2, [pc, #228]	; (8009750 <HAL_DMA_Abort_IT+0x3b0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d068      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a37      	ldr	r2, [pc, #220]	; (8009754 <HAL_DMA_Abort_IT+0x3b4>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d063      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a36      	ldr	r2, [pc, #216]	; (8009758 <HAL_DMA_Abort_IT+0x3b8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d05e      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a34      	ldr	r2, [pc, #208]	; (800975c <HAL_DMA_Abort_IT+0x3bc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d059      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a33      	ldr	r2, [pc, #204]	; (8009760 <HAL_DMA_Abort_IT+0x3c0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d054      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a31      	ldr	r2, [pc, #196]	; (8009764 <HAL_DMA_Abort_IT+0x3c4>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d04f      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a30      	ldr	r2, [pc, #192]	; (8009768 <HAL_DMA_Abort_IT+0x3c8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d04a      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a2e      	ldr	r2, [pc, #184]	; (800976c <HAL_DMA_Abort_IT+0x3cc>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d045      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a2d      	ldr	r2, [pc, #180]	; (8009770 <HAL_DMA_Abort_IT+0x3d0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d040      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a2b      	ldr	r2, [pc, #172]	; (8009774 <HAL_DMA_Abort_IT+0x3d4>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d03b      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a2a      	ldr	r2, [pc, #168]	; (8009778 <HAL_DMA_Abort_IT+0x3d8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d036      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a28      	ldr	r2, [pc, #160]	; (800977c <HAL_DMA_Abort_IT+0x3dc>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d031      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a27      	ldr	r2, [pc, #156]	; (8009780 <HAL_DMA_Abort_IT+0x3e0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d02c      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a25      	ldr	r2, [pc, #148]	; (8009784 <HAL_DMA_Abort_IT+0x3e4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d027      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a24      	ldr	r2, [pc, #144]	; (8009788 <HAL_DMA_Abort_IT+0x3e8>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d022      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a22      	ldr	r2, [pc, #136]	; (800978c <HAL_DMA_Abort_IT+0x3ec>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d01d      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a21      	ldr	r2, [pc, #132]	; (8009790 <HAL_DMA_Abort_IT+0x3f0>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d018      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <HAL_DMA_Abort_IT+0x3f4>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d013      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <HAL_DMA_Abort_IT+0x3f8>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d00e      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a1c      	ldr	r2, [pc, #112]	; (800979c <HAL_DMA_Abort_IT+0x3fc>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d009      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a1b      	ldr	r2, [pc, #108]	; (80097a0 <HAL_DMA_Abort_IT+0x400>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <HAL_DMA_Abort_IT+0x3a2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a19      	ldr	r2, [pc, #100]	; (80097a4 <HAL_DMA_Abort_IT+0x404>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d132      	bne.n	80097a8 <HAL_DMA_Abort_IT+0x408>
 8009742:	2301      	movs	r3, #1
 8009744:	e031      	b.n	80097aa <HAL_DMA_Abort_IT+0x40a>
 8009746:	bf00      	nop
 8009748:	40020010 	.word	0x40020010
 800974c:	40020028 	.word	0x40020028
 8009750:	40020040 	.word	0x40020040
 8009754:	40020058 	.word	0x40020058
 8009758:	40020070 	.word	0x40020070
 800975c:	40020088 	.word	0x40020088
 8009760:	400200a0 	.word	0x400200a0
 8009764:	400200b8 	.word	0x400200b8
 8009768:	40020410 	.word	0x40020410
 800976c:	40020428 	.word	0x40020428
 8009770:	40020440 	.word	0x40020440
 8009774:	40020458 	.word	0x40020458
 8009778:	40020470 	.word	0x40020470
 800977c:	40020488 	.word	0x40020488
 8009780:	400204a0 	.word	0x400204a0
 8009784:	400204b8 	.word	0x400204b8
 8009788:	58025408 	.word	0x58025408
 800978c:	5802541c 	.word	0x5802541c
 8009790:	58025430 	.word	0x58025430
 8009794:	58025444 	.word	0x58025444
 8009798:	58025458 	.word	0x58025458
 800979c:	5802546c 	.word	0x5802546c
 80097a0:	58025480 	.word	0x58025480
 80097a4:	58025494 	.word	0x58025494
 80097a8:	2300      	movs	r3, #0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d028      	beq.n	8009800 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c8:	f003 031f 	and.w	r3, r3, #31
 80097cc:	2201      	movs	r2, #1
 80097ce:	409a      	lsls	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80097dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00c      	beq.n	8009800 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80097fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop

0800982c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	; 0x28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009838:	4b67      	ldr	r3, [pc, #412]	; (80099d8 <HAL_DMA_IRQHandler+0x1ac>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a67      	ldr	r2, [pc, #412]	; (80099dc <HAL_DMA_IRQHandler+0x1b0>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	0a9b      	lsrs	r3, r3, #10
 8009844:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009850:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a5f      	ldr	r2, [pc, #380]	; (80099e0 <HAL_DMA_IRQHandler+0x1b4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d04a      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a5d      	ldr	r2, [pc, #372]	; (80099e4 <HAL_DMA_IRQHandler+0x1b8>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d045      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a5c      	ldr	r2, [pc, #368]	; (80099e8 <HAL_DMA_IRQHandler+0x1bc>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d040      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a5a      	ldr	r2, [pc, #360]	; (80099ec <HAL_DMA_IRQHandler+0x1c0>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d03b      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a59      	ldr	r2, [pc, #356]	; (80099f0 <HAL_DMA_IRQHandler+0x1c4>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d036      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a57      	ldr	r2, [pc, #348]	; (80099f4 <HAL_DMA_IRQHandler+0x1c8>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d031      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a56      	ldr	r2, [pc, #344]	; (80099f8 <HAL_DMA_IRQHandler+0x1cc>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d02c      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a54      	ldr	r2, [pc, #336]	; (80099fc <HAL_DMA_IRQHandler+0x1d0>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d027      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a53      	ldr	r2, [pc, #332]	; (8009a00 <HAL_DMA_IRQHandler+0x1d4>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d022      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a51      	ldr	r2, [pc, #324]	; (8009a04 <HAL_DMA_IRQHandler+0x1d8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d01d      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a50      	ldr	r2, [pc, #320]	; (8009a08 <HAL_DMA_IRQHandler+0x1dc>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d018      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a4e      	ldr	r2, [pc, #312]	; (8009a0c <HAL_DMA_IRQHandler+0x1e0>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d013      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a4d      	ldr	r2, [pc, #308]	; (8009a10 <HAL_DMA_IRQHandler+0x1e4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00e      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a4b      	ldr	r2, [pc, #300]	; (8009a14 <HAL_DMA_IRQHandler+0x1e8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d009      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a4a      	ldr	r2, [pc, #296]	; (8009a18 <HAL_DMA_IRQHandler+0x1ec>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d004      	beq.n	80098fe <HAL_DMA_IRQHandler+0xd2>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a48      	ldr	r2, [pc, #288]	; (8009a1c <HAL_DMA_IRQHandler+0x1f0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d101      	bne.n	8009902 <HAL_DMA_IRQHandler+0xd6>
 80098fe:	2301      	movs	r3, #1
 8009900:	e000      	b.n	8009904 <HAL_DMA_IRQHandler+0xd8>
 8009902:	2300      	movs	r3, #0
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 842b 	beq.w	800a160 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990e:	f003 031f 	and.w	r3, r3, #31
 8009912:	2208      	movs	r2, #8
 8009914:	409a      	lsls	r2, r3
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	4013      	ands	r3, r2
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 80a2 	beq.w	8009a64 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a2e      	ldr	r2, [pc, #184]	; (80099e0 <HAL_DMA_IRQHandler+0x1b4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d04a      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a2d      	ldr	r2, [pc, #180]	; (80099e4 <HAL_DMA_IRQHandler+0x1b8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d045      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a2b      	ldr	r2, [pc, #172]	; (80099e8 <HAL_DMA_IRQHandler+0x1bc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d040      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a2a      	ldr	r2, [pc, #168]	; (80099ec <HAL_DMA_IRQHandler+0x1c0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d03b      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a28      	ldr	r2, [pc, #160]	; (80099f0 <HAL_DMA_IRQHandler+0x1c4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d036      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a27      	ldr	r2, [pc, #156]	; (80099f4 <HAL_DMA_IRQHandler+0x1c8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d031      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a25      	ldr	r2, [pc, #148]	; (80099f8 <HAL_DMA_IRQHandler+0x1cc>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d02c      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a24      	ldr	r2, [pc, #144]	; (80099fc <HAL_DMA_IRQHandler+0x1d0>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d027      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a22      	ldr	r2, [pc, #136]	; (8009a00 <HAL_DMA_IRQHandler+0x1d4>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d022      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a21      	ldr	r2, [pc, #132]	; (8009a04 <HAL_DMA_IRQHandler+0x1d8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d01d      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1f      	ldr	r2, [pc, #124]	; (8009a08 <HAL_DMA_IRQHandler+0x1dc>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d018      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a1e      	ldr	r2, [pc, #120]	; (8009a0c <HAL_DMA_IRQHandler+0x1e0>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d013      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a1c      	ldr	r2, [pc, #112]	; (8009a10 <HAL_DMA_IRQHandler+0x1e4>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d00e      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a1b      	ldr	r2, [pc, #108]	; (8009a14 <HAL_DMA_IRQHandler+0x1e8>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d009      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a19      	ldr	r2, [pc, #100]	; (8009a18 <HAL_DMA_IRQHandler+0x1ec>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d004      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x194>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a18      	ldr	r2, [pc, #96]	; (8009a1c <HAL_DMA_IRQHandler+0x1f0>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d12f      	bne.n	8009a20 <HAL_DMA_IRQHandler+0x1f4>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0304 	and.w	r3, r3, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bf14      	ite	ne
 80099ce:	2301      	movne	r3, #1
 80099d0:	2300      	moveq	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	e02e      	b.n	8009a34 <HAL_DMA_IRQHandler+0x208>
 80099d6:	bf00      	nop
 80099d8:	240000c0 	.word	0x240000c0
 80099dc:	1b4e81b5 	.word	0x1b4e81b5
 80099e0:	40020010 	.word	0x40020010
 80099e4:	40020028 	.word	0x40020028
 80099e8:	40020040 	.word	0x40020040
 80099ec:	40020058 	.word	0x40020058
 80099f0:	40020070 	.word	0x40020070
 80099f4:	40020088 	.word	0x40020088
 80099f8:	400200a0 	.word	0x400200a0
 80099fc:	400200b8 	.word	0x400200b8
 8009a00:	40020410 	.word	0x40020410
 8009a04:	40020428 	.word	0x40020428
 8009a08:	40020440 	.word	0x40020440
 8009a0c:	40020458 	.word	0x40020458
 8009a10:	40020470 	.word	0x40020470
 8009a14:	40020488 	.word	0x40020488
 8009a18:	400204a0 	.word	0x400204a0
 8009a1c:	400204b8 	.word	0x400204b8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0308 	and.w	r3, r3, #8
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bf14      	ite	ne
 8009a2e:	2301      	movne	r3, #1
 8009a30:	2300      	moveq	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d015      	beq.n	8009a64 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 0204 	bic.w	r2, r2, #4
 8009a46:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4c:	f003 031f 	and.w	r3, r3, #31
 8009a50:	2208      	movs	r2, #8
 8009a52:	409a      	lsls	r2, r3
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5c:	f043 0201 	orr.w	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a68:	f003 031f 	and.w	r3, r3, #31
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d06e      	beq.n	8009b58 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a69      	ldr	r2, [pc, #420]	; (8009c24 <HAL_DMA_IRQHandler+0x3f8>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d04a      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a67      	ldr	r2, [pc, #412]	; (8009c28 <HAL_DMA_IRQHandler+0x3fc>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d045      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a66      	ldr	r2, [pc, #408]	; (8009c2c <HAL_DMA_IRQHandler+0x400>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d040      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a64      	ldr	r2, [pc, #400]	; (8009c30 <HAL_DMA_IRQHandler+0x404>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d03b      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a63      	ldr	r2, [pc, #396]	; (8009c34 <HAL_DMA_IRQHandler+0x408>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d036      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a61      	ldr	r2, [pc, #388]	; (8009c38 <HAL_DMA_IRQHandler+0x40c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d031      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a60      	ldr	r2, [pc, #384]	; (8009c3c <HAL_DMA_IRQHandler+0x410>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d02c      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a5e      	ldr	r2, [pc, #376]	; (8009c40 <HAL_DMA_IRQHandler+0x414>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d027      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a5d      	ldr	r2, [pc, #372]	; (8009c44 <HAL_DMA_IRQHandler+0x418>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d022      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a5b      	ldr	r2, [pc, #364]	; (8009c48 <HAL_DMA_IRQHandler+0x41c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d01d      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a5a      	ldr	r2, [pc, #360]	; (8009c4c <HAL_DMA_IRQHandler+0x420>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d018      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a58      	ldr	r2, [pc, #352]	; (8009c50 <HAL_DMA_IRQHandler+0x424>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d013      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a57      	ldr	r2, [pc, #348]	; (8009c54 <HAL_DMA_IRQHandler+0x428>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00e      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a55      	ldr	r2, [pc, #340]	; (8009c58 <HAL_DMA_IRQHandler+0x42c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d009      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a54      	ldr	r2, [pc, #336]	; (8009c5c <HAL_DMA_IRQHandler+0x430>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d004      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x2ee>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a52      	ldr	r2, [pc, #328]	; (8009c60 <HAL_DMA_IRQHandler+0x434>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d10a      	bne.n	8009b30 <HAL_DMA_IRQHandler+0x304>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bf14      	ite	ne
 8009b28:	2301      	movne	r3, #1
 8009b2a:	2300      	moveq	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	e003      	b.n	8009b38 <HAL_DMA_IRQHandler+0x30c>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2300      	movs	r3, #0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00d      	beq.n	8009b58 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b40:	f003 031f 	and.w	r3, r3, #31
 8009b44:	2201      	movs	r2, #1
 8009b46:	409a      	lsls	r2, r3
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b50:	f043 0202 	orr.w	r2, r3, #2
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b5c:	f003 031f 	and.w	r3, r3, #31
 8009b60:	2204      	movs	r2, #4
 8009b62:	409a      	lsls	r2, r3
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	4013      	ands	r3, r2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 808f 	beq.w	8009c8c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a2c      	ldr	r2, [pc, #176]	; (8009c24 <HAL_DMA_IRQHandler+0x3f8>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d04a      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a2a      	ldr	r2, [pc, #168]	; (8009c28 <HAL_DMA_IRQHandler+0x3fc>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d045      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a29      	ldr	r2, [pc, #164]	; (8009c2c <HAL_DMA_IRQHandler+0x400>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d040      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a27      	ldr	r2, [pc, #156]	; (8009c30 <HAL_DMA_IRQHandler+0x404>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d03b      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a26      	ldr	r2, [pc, #152]	; (8009c34 <HAL_DMA_IRQHandler+0x408>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d036      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a24      	ldr	r2, [pc, #144]	; (8009c38 <HAL_DMA_IRQHandler+0x40c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d031      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a23      	ldr	r2, [pc, #140]	; (8009c3c <HAL_DMA_IRQHandler+0x410>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d02c      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a21      	ldr	r2, [pc, #132]	; (8009c40 <HAL_DMA_IRQHandler+0x414>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d027      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a20      	ldr	r2, [pc, #128]	; (8009c44 <HAL_DMA_IRQHandler+0x418>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d022      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a1e      	ldr	r2, [pc, #120]	; (8009c48 <HAL_DMA_IRQHandler+0x41c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d01d      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a1d      	ldr	r2, [pc, #116]	; (8009c4c <HAL_DMA_IRQHandler+0x420>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d018      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a1b      	ldr	r2, [pc, #108]	; (8009c50 <HAL_DMA_IRQHandler+0x424>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d013      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a1a      	ldr	r2, [pc, #104]	; (8009c54 <HAL_DMA_IRQHandler+0x428>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00e      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <HAL_DMA_IRQHandler+0x42c>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d009      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a17      	ldr	r2, [pc, #92]	; (8009c5c <HAL_DMA_IRQHandler+0x430>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d004      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x3e2>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <HAL_DMA_IRQHandler+0x434>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d12a      	bne.n	8009c64 <HAL_DMA_IRQHandler+0x438>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bf14      	ite	ne
 8009c1c:	2301      	movne	r3, #1
 8009c1e:	2300      	moveq	r3, #0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	e023      	b.n	8009c6c <HAL_DMA_IRQHandler+0x440>
 8009c24:	40020010 	.word	0x40020010
 8009c28:	40020028 	.word	0x40020028
 8009c2c:	40020040 	.word	0x40020040
 8009c30:	40020058 	.word	0x40020058
 8009c34:	40020070 	.word	0x40020070
 8009c38:	40020088 	.word	0x40020088
 8009c3c:	400200a0 	.word	0x400200a0
 8009c40:	400200b8 	.word	0x400200b8
 8009c44:	40020410 	.word	0x40020410
 8009c48:	40020428 	.word	0x40020428
 8009c4c:	40020440 	.word	0x40020440
 8009c50:	40020458 	.word	0x40020458
 8009c54:	40020470 	.word	0x40020470
 8009c58:	40020488 	.word	0x40020488
 8009c5c:	400204a0 	.word	0x400204a0
 8009c60:	400204b8 	.word	0x400204b8
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00d      	beq.n	8009c8c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c74:	f003 031f 	and.w	r3, r3, #31
 8009c78:	2204      	movs	r2, #4
 8009c7a:	409a      	lsls	r2, r3
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c84:	f043 0204 	orr.w	r2, r3, #4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c90:	f003 031f 	and.w	r3, r3, #31
 8009c94:	2210      	movs	r2, #16
 8009c96:	409a      	lsls	r2, r3
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 80a6 	beq.w	8009dee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a85      	ldr	r2, [pc, #532]	; (8009ebc <HAL_DMA_IRQHandler+0x690>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d04a      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a83      	ldr	r2, [pc, #524]	; (8009ec0 <HAL_DMA_IRQHandler+0x694>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d045      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a82      	ldr	r2, [pc, #520]	; (8009ec4 <HAL_DMA_IRQHandler+0x698>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d040      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a80      	ldr	r2, [pc, #512]	; (8009ec8 <HAL_DMA_IRQHandler+0x69c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d03b      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a7f      	ldr	r2, [pc, #508]	; (8009ecc <HAL_DMA_IRQHandler+0x6a0>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d036      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a7d      	ldr	r2, [pc, #500]	; (8009ed0 <HAL_DMA_IRQHandler+0x6a4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d031      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a7c      	ldr	r2, [pc, #496]	; (8009ed4 <HAL_DMA_IRQHandler+0x6a8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d02c      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a7a      	ldr	r2, [pc, #488]	; (8009ed8 <HAL_DMA_IRQHandler+0x6ac>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d027      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a79      	ldr	r2, [pc, #484]	; (8009edc <HAL_DMA_IRQHandler+0x6b0>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d022      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a77      	ldr	r2, [pc, #476]	; (8009ee0 <HAL_DMA_IRQHandler+0x6b4>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d01d      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a76      	ldr	r2, [pc, #472]	; (8009ee4 <HAL_DMA_IRQHandler+0x6b8>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d018      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a74      	ldr	r2, [pc, #464]	; (8009ee8 <HAL_DMA_IRQHandler+0x6bc>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d013      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a73      	ldr	r2, [pc, #460]	; (8009eec <HAL_DMA_IRQHandler+0x6c0>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00e      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a71      	ldr	r2, [pc, #452]	; (8009ef0 <HAL_DMA_IRQHandler+0x6c4>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d009      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a70      	ldr	r2, [pc, #448]	; (8009ef4 <HAL_DMA_IRQHandler+0x6c8>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d004      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x516>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a6e      	ldr	r2, [pc, #440]	; (8009ef8 <HAL_DMA_IRQHandler+0x6cc>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d10a      	bne.n	8009d58 <HAL_DMA_IRQHandler+0x52c>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0308 	and.w	r3, r3, #8
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bf14      	ite	ne
 8009d50:	2301      	movne	r3, #1
 8009d52:	2300      	moveq	r3, #0
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	e009      	b.n	8009d6c <HAL_DMA_IRQHandler+0x540>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0304 	and.w	r3, r3, #4
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	bf14      	ite	ne
 8009d66:	2301      	movne	r3, #1
 8009d68:	2300      	moveq	r3, #0
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d03e      	beq.n	8009dee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d74:	f003 031f 	and.w	r3, r3, #31
 8009d78:	2210      	movs	r2, #16
 8009d7a:	409a      	lsls	r2, r3
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d018      	beq.n	8009dc0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d108      	bne.n	8009dae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d024      	beq.n	8009dee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	4798      	blx	r3
 8009dac:	e01f      	b.n	8009dee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01b      	beq.n	8009dee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
 8009dbe:	e016      	b.n	8009dee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d107      	bne.n	8009dde <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f022 0208 	bic.w	r2, r2, #8
 8009ddc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df2:	f003 031f 	and.w	r3, r3, #31
 8009df6:	2220      	movs	r2, #32
 8009df8:	409a      	lsls	r2, r3
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 8110 	beq.w	800a024 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a2c      	ldr	r2, [pc, #176]	; (8009ebc <HAL_DMA_IRQHandler+0x690>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d04a      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a2b      	ldr	r2, [pc, #172]	; (8009ec0 <HAL_DMA_IRQHandler+0x694>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d045      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a29      	ldr	r2, [pc, #164]	; (8009ec4 <HAL_DMA_IRQHandler+0x698>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d040      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a28      	ldr	r2, [pc, #160]	; (8009ec8 <HAL_DMA_IRQHandler+0x69c>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d03b      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a26      	ldr	r2, [pc, #152]	; (8009ecc <HAL_DMA_IRQHandler+0x6a0>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d036      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a25      	ldr	r2, [pc, #148]	; (8009ed0 <HAL_DMA_IRQHandler+0x6a4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d031      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a23      	ldr	r2, [pc, #140]	; (8009ed4 <HAL_DMA_IRQHandler+0x6a8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d02c      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a22      	ldr	r2, [pc, #136]	; (8009ed8 <HAL_DMA_IRQHandler+0x6ac>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d027      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a20      	ldr	r2, [pc, #128]	; (8009edc <HAL_DMA_IRQHandler+0x6b0>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d022      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1f      	ldr	r2, [pc, #124]	; (8009ee0 <HAL_DMA_IRQHandler+0x6b4>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d01d      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <HAL_DMA_IRQHandler+0x6b8>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d018      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1c      	ldr	r2, [pc, #112]	; (8009ee8 <HAL_DMA_IRQHandler+0x6bc>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d013      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1a      	ldr	r2, [pc, #104]	; (8009eec <HAL_DMA_IRQHandler+0x6c0>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00e      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a19      	ldr	r2, [pc, #100]	; (8009ef0 <HAL_DMA_IRQHandler+0x6c4>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d009      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a17      	ldr	r2, [pc, #92]	; (8009ef4 <HAL_DMA_IRQHandler+0x6c8>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d004      	beq.n	8009ea4 <HAL_DMA_IRQHandler+0x678>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a16      	ldr	r2, [pc, #88]	; (8009ef8 <HAL_DMA_IRQHandler+0x6cc>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d12b      	bne.n	8009efc <HAL_DMA_IRQHandler+0x6d0>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 0310 	and.w	r3, r3, #16
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf14      	ite	ne
 8009eb2:	2301      	movne	r3, #1
 8009eb4:	2300      	moveq	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	e02a      	b.n	8009f10 <HAL_DMA_IRQHandler+0x6e4>
 8009eba:	bf00      	nop
 8009ebc:	40020010 	.word	0x40020010
 8009ec0:	40020028 	.word	0x40020028
 8009ec4:	40020040 	.word	0x40020040
 8009ec8:	40020058 	.word	0x40020058
 8009ecc:	40020070 	.word	0x40020070
 8009ed0:	40020088 	.word	0x40020088
 8009ed4:	400200a0 	.word	0x400200a0
 8009ed8:	400200b8 	.word	0x400200b8
 8009edc:	40020410 	.word	0x40020410
 8009ee0:	40020428 	.word	0x40020428
 8009ee4:	40020440 	.word	0x40020440
 8009ee8:	40020458 	.word	0x40020458
 8009eec:	40020470 	.word	0x40020470
 8009ef0:	40020488 	.word	0x40020488
 8009ef4:	400204a0 	.word	0x400204a0
 8009ef8:	400204b8 	.word	0x400204b8
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bf14      	ite	ne
 8009f0a:	2301      	movne	r3, #1
 8009f0c:	2300      	moveq	r3, #0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 8087 	beq.w	800a024 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f1a:	f003 031f 	and.w	r3, r3, #31
 8009f1e:	2220      	movs	r2, #32
 8009f20:	409a      	lsls	r2, r3
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d139      	bne.n	8009fa6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0216 	bic.w	r2, r2, #22
 8009f40:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	695a      	ldr	r2, [r3, #20]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f50:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d103      	bne.n	8009f62 <HAL_DMA_IRQHandler+0x736>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d007      	beq.n	8009f72 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0208 	bic.w	r2, r2, #8
 8009f70:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f76:	f003 031f 	and.w	r3, r3, #31
 8009f7a:	223f      	movs	r2, #63	; 0x3f
 8009f7c:	409a      	lsls	r2, r3
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 834a 	beq.w	800a630 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
          }
          return;
 8009fa4:	e344      	b.n	800a630 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d018      	beq.n	8009fe6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d108      	bne.n	8009fd4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d02c      	beq.n	800a024 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	4798      	blx	r3
 8009fd2:	e027      	b.n	800a024 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d023      	beq.n	800a024 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	4798      	blx	r3
 8009fe4:	e01e      	b.n	800a024 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10f      	bne.n	800a014 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0210 	bic.w	r2, r2, #16
 800a002:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 8306 	beq.w	800a63a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 8088 	beq.w	800a14c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2204      	movs	r2, #4
 800a040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a7a      	ldr	r2, [pc, #488]	; (800a234 <HAL_DMA_IRQHandler+0xa08>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d04a      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a79      	ldr	r2, [pc, #484]	; (800a238 <HAL_DMA_IRQHandler+0xa0c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d045      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a77      	ldr	r2, [pc, #476]	; (800a23c <HAL_DMA_IRQHandler+0xa10>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d040      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a76      	ldr	r2, [pc, #472]	; (800a240 <HAL_DMA_IRQHandler+0xa14>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d03b      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a74      	ldr	r2, [pc, #464]	; (800a244 <HAL_DMA_IRQHandler+0xa18>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d036      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a73      	ldr	r2, [pc, #460]	; (800a248 <HAL_DMA_IRQHandler+0xa1c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d031      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a71      	ldr	r2, [pc, #452]	; (800a24c <HAL_DMA_IRQHandler+0xa20>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d02c      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a70      	ldr	r2, [pc, #448]	; (800a250 <HAL_DMA_IRQHandler+0xa24>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d027      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a6e      	ldr	r2, [pc, #440]	; (800a254 <HAL_DMA_IRQHandler+0xa28>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d022      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a6d      	ldr	r2, [pc, #436]	; (800a258 <HAL_DMA_IRQHandler+0xa2c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d01d      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a6b      	ldr	r2, [pc, #428]	; (800a25c <HAL_DMA_IRQHandler+0xa30>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d018      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a6a      	ldr	r2, [pc, #424]	; (800a260 <HAL_DMA_IRQHandler+0xa34>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d013      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a68      	ldr	r2, [pc, #416]	; (800a264 <HAL_DMA_IRQHandler+0xa38>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d00e      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a67      	ldr	r2, [pc, #412]	; (800a268 <HAL_DMA_IRQHandler+0xa3c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d009      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a65      	ldr	r2, [pc, #404]	; (800a26c <HAL_DMA_IRQHandler+0xa40>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d004      	beq.n	800a0e4 <HAL_DMA_IRQHandler+0x8b8>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a64      	ldr	r2, [pc, #400]	; (800a270 <HAL_DMA_IRQHandler+0xa44>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d108      	bne.n	800a0f6 <HAL_DMA_IRQHandler+0x8ca>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	e007      	b.n	800a106 <HAL_DMA_IRQHandler+0x8da>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0201 	bic.w	r2, r2, #1
 800a104:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3301      	adds	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10e:	429a      	cmp	r2, r3
 800a110:	d307      	bcc.n	800a122 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1f2      	bne.n	800a106 <HAL_DMA_IRQHandler+0x8da>
 800a120:	e000      	b.n	800a124 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a122:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d004      	beq.n	800a13c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2203      	movs	r2, #3
 800a136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a13a:	e003      	b.n	800a144 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 8272 	beq.w	800a63a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	4798      	blx	r3
 800a15e:	e26c      	b.n	800a63a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a43      	ldr	r2, [pc, #268]	; (800a274 <HAL_DMA_IRQHandler+0xa48>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d022      	beq.n	800a1b0 <HAL_DMA_IRQHandler+0x984>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a42      	ldr	r2, [pc, #264]	; (800a278 <HAL_DMA_IRQHandler+0xa4c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d01d      	beq.n	800a1b0 <HAL_DMA_IRQHandler+0x984>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a40      	ldr	r2, [pc, #256]	; (800a27c <HAL_DMA_IRQHandler+0xa50>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d018      	beq.n	800a1b0 <HAL_DMA_IRQHandler+0x984>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a3f      	ldr	r2, [pc, #252]	; (800a280 <HAL_DMA_IRQHandler+0xa54>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d013      	beq.n	800a1b0 <HAL_DMA_IRQHandler+0x984>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a3d      	ldr	r2, [pc, #244]	; (800a284 <HAL_DMA_IRQHandler+0xa58>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00e      	beq.n	800a1b0 <HAL_DMA_IRQHandler+0x984>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a3c      	ldr	r2, [pc, #240]	; (800a288 <HAL_DMA_IRQHandler+0xa5c>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d009      	beq.n	800a1b0 <HAL_DMA_IRQHandler+0x984>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a3a      	ldr	r2, [pc, #232]	; (800a28c <HAL_DMA_IRQHandler+0xa60>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <HAL_DMA_IRQHandler+0x984>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a39      	ldr	r2, [pc, #228]	; (800a290 <HAL_DMA_IRQHandler+0xa64>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d101      	bne.n	800a1b4 <HAL_DMA_IRQHandler+0x988>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <HAL_DMA_IRQHandler+0x98a>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 823f 	beq.w	800a63a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c8:	f003 031f 	and.w	r3, r3, #31
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	409a      	lsls	r2, r3
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 80cd 	beq.w	800a374 <HAL_DMA_IRQHandler+0xb48>
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80c7 	beq.w	800a374 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ea:	f003 031f 	and.w	r3, r3, #31
 800a1ee:	2204      	movs	r2, #4
 800a1f0:	409a      	lsls	r2, r3
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d049      	beq.n	800a294 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d109      	bne.n	800a21e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 8210 	beq.w	800a634 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a21c:	e20a      	b.n	800a634 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 8206 	beq.w	800a634 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a230:	e200      	b.n	800a634 <HAL_DMA_IRQHandler+0xe08>
 800a232:	bf00      	nop
 800a234:	40020010 	.word	0x40020010
 800a238:	40020028 	.word	0x40020028
 800a23c:	40020040 	.word	0x40020040
 800a240:	40020058 	.word	0x40020058
 800a244:	40020070 	.word	0x40020070
 800a248:	40020088 	.word	0x40020088
 800a24c:	400200a0 	.word	0x400200a0
 800a250:	400200b8 	.word	0x400200b8
 800a254:	40020410 	.word	0x40020410
 800a258:	40020428 	.word	0x40020428
 800a25c:	40020440 	.word	0x40020440
 800a260:	40020458 	.word	0x40020458
 800a264:	40020470 	.word	0x40020470
 800a268:	40020488 	.word	0x40020488
 800a26c:	400204a0 	.word	0x400204a0
 800a270:	400204b8 	.word	0x400204b8
 800a274:	58025408 	.word	0x58025408
 800a278:	5802541c 	.word	0x5802541c
 800a27c:	58025430 	.word	0x58025430
 800a280:	58025444 	.word	0x58025444
 800a284:	58025458 	.word	0x58025458
 800a288:	5802546c 	.word	0x5802546c
 800a28c:	58025480 	.word	0x58025480
 800a290:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d160      	bne.n	800a360 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a7f      	ldr	r2, [pc, #508]	; (800a4a0 <HAL_DMA_IRQHandler+0xc74>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d04a      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a7d      	ldr	r2, [pc, #500]	; (800a4a4 <HAL_DMA_IRQHandler+0xc78>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d045      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a7c      	ldr	r2, [pc, #496]	; (800a4a8 <HAL_DMA_IRQHandler+0xc7c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d040      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a7a      	ldr	r2, [pc, #488]	; (800a4ac <HAL_DMA_IRQHandler+0xc80>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d03b      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a79      	ldr	r2, [pc, #484]	; (800a4b0 <HAL_DMA_IRQHandler+0xc84>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d036      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a77      	ldr	r2, [pc, #476]	; (800a4b4 <HAL_DMA_IRQHandler+0xc88>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d031      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a76      	ldr	r2, [pc, #472]	; (800a4b8 <HAL_DMA_IRQHandler+0xc8c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d02c      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a74      	ldr	r2, [pc, #464]	; (800a4bc <HAL_DMA_IRQHandler+0xc90>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d027      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a73      	ldr	r2, [pc, #460]	; (800a4c0 <HAL_DMA_IRQHandler+0xc94>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d022      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a71      	ldr	r2, [pc, #452]	; (800a4c4 <HAL_DMA_IRQHandler+0xc98>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d01d      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a70      	ldr	r2, [pc, #448]	; (800a4c8 <HAL_DMA_IRQHandler+0xc9c>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d018      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a6e      	ldr	r2, [pc, #440]	; (800a4cc <HAL_DMA_IRQHandler+0xca0>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d013      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a6d      	ldr	r2, [pc, #436]	; (800a4d0 <HAL_DMA_IRQHandler+0xca4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d00e      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a6b      	ldr	r2, [pc, #428]	; (800a4d4 <HAL_DMA_IRQHandler+0xca8>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d009      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a6a      	ldr	r2, [pc, #424]	; (800a4d8 <HAL_DMA_IRQHandler+0xcac>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d004      	beq.n	800a33e <HAL_DMA_IRQHandler+0xb12>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a68      	ldr	r2, [pc, #416]	; (800a4dc <HAL_DMA_IRQHandler+0xcb0>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d108      	bne.n	800a350 <HAL_DMA_IRQHandler+0xb24>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0208 	bic.w	r2, r2, #8
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	e007      	b.n	800a360 <HAL_DMA_IRQHandler+0xb34>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0204 	bic.w	r2, r2, #4
 800a35e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8165 	beq.w	800a634 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a372:	e15f      	b.n	800a634 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a378:	f003 031f 	and.w	r3, r3, #31
 800a37c:	2202      	movs	r2, #2
 800a37e:	409a      	lsls	r2, r3
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	4013      	ands	r3, r2
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 80c5 	beq.w	800a514 <HAL_DMA_IRQHandler+0xce8>
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 80bf 	beq.w	800a514 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	2202      	movs	r2, #2
 800a3a0:	409a      	lsls	r2, r3
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d018      	beq.n	800a3e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d109      	bne.n	800a3ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 813a 	beq.w	800a638 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3cc:	e134      	b.n	800a638 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8130 	beq.w	800a638 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3e0:	e12a      	b.n	800a638 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f003 0320 	and.w	r3, r3, #32
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f040 8089 	bne.w	800a500 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a2b      	ldr	r2, [pc, #172]	; (800a4a0 <HAL_DMA_IRQHandler+0xc74>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d04a      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a29      	ldr	r2, [pc, #164]	; (800a4a4 <HAL_DMA_IRQHandler+0xc78>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d045      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a28      	ldr	r2, [pc, #160]	; (800a4a8 <HAL_DMA_IRQHandler+0xc7c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d040      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a26      	ldr	r2, [pc, #152]	; (800a4ac <HAL_DMA_IRQHandler+0xc80>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d03b      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a25      	ldr	r2, [pc, #148]	; (800a4b0 <HAL_DMA_IRQHandler+0xc84>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d036      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a23      	ldr	r2, [pc, #140]	; (800a4b4 <HAL_DMA_IRQHandler+0xc88>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d031      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a22      	ldr	r2, [pc, #136]	; (800a4b8 <HAL_DMA_IRQHandler+0xc8c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d02c      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a20      	ldr	r2, [pc, #128]	; (800a4bc <HAL_DMA_IRQHandler+0xc90>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d027      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a1f      	ldr	r2, [pc, #124]	; (800a4c0 <HAL_DMA_IRQHandler+0xc94>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d022      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a1d      	ldr	r2, [pc, #116]	; (800a4c4 <HAL_DMA_IRQHandler+0xc98>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d01d      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a1c      	ldr	r2, [pc, #112]	; (800a4c8 <HAL_DMA_IRQHandler+0xc9c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d018      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a1a      	ldr	r2, [pc, #104]	; (800a4cc <HAL_DMA_IRQHandler+0xca0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d013      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a19      	ldr	r2, [pc, #100]	; (800a4d0 <HAL_DMA_IRQHandler+0xca4>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d00e      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a17      	ldr	r2, [pc, #92]	; (800a4d4 <HAL_DMA_IRQHandler+0xca8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d009      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a16      	ldr	r2, [pc, #88]	; (800a4d8 <HAL_DMA_IRQHandler+0xcac>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d004      	beq.n	800a48e <HAL_DMA_IRQHandler+0xc62>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a14      	ldr	r2, [pc, #80]	; (800a4dc <HAL_DMA_IRQHandler+0xcb0>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d128      	bne.n	800a4e0 <HAL_DMA_IRQHandler+0xcb4>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0214 	bic.w	r2, r2, #20
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	e027      	b.n	800a4f0 <HAL_DMA_IRQHandler+0xcc4>
 800a4a0:	40020010 	.word	0x40020010
 800a4a4:	40020028 	.word	0x40020028
 800a4a8:	40020040 	.word	0x40020040
 800a4ac:	40020058 	.word	0x40020058
 800a4b0:	40020070 	.word	0x40020070
 800a4b4:	40020088 	.word	0x40020088
 800a4b8:	400200a0 	.word	0x400200a0
 800a4bc:	400200b8 	.word	0x400200b8
 800a4c0:	40020410 	.word	0x40020410
 800a4c4:	40020428 	.word	0x40020428
 800a4c8:	40020440 	.word	0x40020440
 800a4cc:	40020458 	.word	0x40020458
 800a4d0:	40020470 	.word	0x40020470
 800a4d4:	40020488 	.word	0x40020488
 800a4d8:	400204a0 	.word	0x400204a0
 800a4dc:	400204b8 	.word	0x400204b8
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 020a 	bic.w	r2, r2, #10
 800a4ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 8097 	beq.w	800a638 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a512:	e091      	b.n	800a638 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a518:	f003 031f 	and.w	r3, r3, #31
 800a51c:	2208      	movs	r2, #8
 800a51e:	409a      	lsls	r2, r3
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	4013      	ands	r3, r2
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 8088 	beq.w	800a63a <HAL_DMA_IRQHandler+0xe0e>
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8082 	beq.w	800a63a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a41      	ldr	r2, [pc, #260]	; (800a640 <HAL_DMA_IRQHandler+0xe14>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d04a      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a3f      	ldr	r2, [pc, #252]	; (800a644 <HAL_DMA_IRQHandler+0xe18>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d045      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a3e      	ldr	r2, [pc, #248]	; (800a648 <HAL_DMA_IRQHandler+0xe1c>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d040      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a3c      	ldr	r2, [pc, #240]	; (800a64c <HAL_DMA_IRQHandler+0xe20>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d03b      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a3b      	ldr	r2, [pc, #236]	; (800a650 <HAL_DMA_IRQHandler+0xe24>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d036      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a39      	ldr	r2, [pc, #228]	; (800a654 <HAL_DMA_IRQHandler+0xe28>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d031      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a38      	ldr	r2, [pc, #224]	; (800a658 <HAL_DMA_IRQHandler+0xe2c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d02c      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a36      	ldr	r2, [pc, #216]	; (800a65c <HAL_DMA_IRQHandler+0xe30>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d027      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a35      	ldr	r2, [pc, #212]	; (800a660 <HAL_DMA_IRQHandler+0xe34>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d022      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a33      	ldr	r2, [pc, #204]	; (800a664 <HAL_DMA_IRQHandler+0xe38>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d01d      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a32      	ldr	r2, [pc, #200]	; (800a668 <HAL_DMA_IRQHandler+0xe3c>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d018      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a30      	ldr	r2, [pc, #192]	; (800a66c <HAL_DMA_IRQHandler+0xe40>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d013      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a2f      	ldr	r2, [pc, #188]	; (800a670 <HAL_DMA_IRQHandler+0xe44>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00e      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a2d      	ldr	r2, [pc, #180]	; (800a674 <HAL_DMA_IRQHandler+0xe48>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d009      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a2c      	ldr	r2, [pc, #176]	; (800a678 <HAL_DMA_IRQHandler+0xe4c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d004      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0xdaa>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a2a      	ldr	r2, [pc, #168]	; (800a67c <HAL_DMA_IRQHandler+0xe50>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d108      	bne.n	800a5e8 <HAL_DMA_IRQHandler+0xdbc>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 021c 	bic.w	r2, r2, #28
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	e007      	b.n	800a5f8 <HAL_DMA_IRQHandler+0xdcc>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 020e 	bic.w	r2, r2, #14
 800a5f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5fc:	f003 031f 	and.w	r3, r3, #31
 800a600:	2201      	movs	r2, #1
 800a602:	409a      	lsls	r2, r3
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	4798      	blx	r3
 800a62e:	e004      	b.n	800a63a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a630:	bf00      	nop
 800a632:	e002      	b.n	800a63a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a634:	bf00      	nop
 800a636:	e000      	b.n	800a63a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a638:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a63a:	3728      	adds	r7, #40	; 0x28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	40020010 	.word	0x40020010
 800a644:	40020028 	.word	0x40020028
 800a648:	40020040 	.word	0x40020040
 800a64c:	40020058 	.word	0x40020058
 800a650:	40020070 	.word	0x40020070
 800a654:	40020088 	.word	0x40020088
 800a658:	400200a0 	.word	0x400200a0
 800a65c:	400200b8 	.word	0x400200b8
 800a660:	40020410 	.word	0x40020410
 800a664:	40020428 	.word	0x40020428
 800a668:	40020440 	.word	0x40020440
 800a66c:	40020458 	.word	0x40020458
 800a670:	40020470 	.word	0x40020470
 800a674:	40020488 	.word	0x40020488
 800a678:	400204a0 	.word	0x400204a0
 800a67c:	400204b8 	.word	0x400204b8

0800a680 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a68e:	b2db      	uxtb	r3, r3
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a7f      	ldr	r2, [pc, #508]	; (800a8d0 <DMA_SetConfig+0x21c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d072      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a7d      	ldr	r2, [pc, #500]	; (800a8d4 <DMA_SetConfig+0x220>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d06d      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a7c      	ldr	r2, [pc, #496]	; (800a8d8 <DMA_SetConfig+0x224>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d068      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a7a      	ldr	r2, [pc, #488]	; (800a8dc <DMA_SetConfig+0x228>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d063      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a79      	ldr	r2, [pc, #484]	; (800a8e0 <DMA_SetConfig+0x22c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d05e      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a77      	ldr	r2, [pc, #476]	; (800a8e4 <DMA_SetConfig+0x230>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d059      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a76      	ldr	r2, [pc, #472]	; (800a8e8 <DMA_SetConfig+0x234>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d054      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a74      	ldr	r2, [pc, #464]	; (800a8ec <DMA_SetConfig+0x238>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d04f      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a73      	ldr	r2, [pc, #460]	; (800a8f0 <DMA_SetConfig+0x23c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d04a      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a71      	ldr	r2, [pc, #452]	; (800a8f4 <DMA_SetConfig+0x240>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d045      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a70      	ldr	r2, [pc, #448]	; (800a8f8 <DMA_SetConfig+0x244>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d040      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a6e      	ldr	r2, [pc, #440]	; (800a8fc <DMA_SetConfig+0x248>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d03b      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a6d      	ldr	r2, [pc, #436]	; (800a900 <DMA_SetConfig+0x24c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d036      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a6b      	ldr	r2, [pc, #428]	; (800a904 <DMA_SetConfig+0x250>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d031      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a6a      	ldr	r2, [pc, #424]	; (800a908 <DMA_SetConfig+0x254>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d02c      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a68      	ldr	r2, [pc, #416]	; (800a90c <DMA_SetConfig+0x258>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d027      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a67      	ldr	r2, [pc, #412]	; (800a910 <DMA_SetConfig+0x25c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d022      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a65      	ldr	r2, [pc, #404]	; (800a914 <DMA_SetConfig+0x260>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d01d      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a64      	ldr	r2, [pc, #400]	; (800a918 <DMA_SetConfig+0x264>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d018      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a62      	ldr	r2, [pc, #392]	; (800a91c <DMA_SetConfig+0x268>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d013      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a61      	ldr	r2, [pc, #388]	; (800a920 <DMA_SetConfig+0x26c>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00e      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a5f      	ldr	r2, [pc, #380]	; (800a924 <DMA_SetConfig+0x270>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d009      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a5e      	ldr	r2, [pc, #376]	; (800a928 <DMA_SetConfig+0x274>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d004      	beq.n	800a7be <DMA_SetConfig+0x10a>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a5c      	ldr	r2, [pc, #368]	; (800a92c <DMA_SetConfig+0x278>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d101      	bne.n	800a7c2 <DMA_SetConfig+0x10e>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e000      	b.n	800a7c4 <DMA_SetConfig+0x110>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00d      	beq.n	800a7e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a7d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d004      	beq.n	800a7e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a7e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a39      	ldr	r2, [pc, #228]	; (800a8d0 <DMA_SetConfig+0x21c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d04a      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a38      	ldr	r2, [pc, #224]	; (800a8d4 <DMA_SetConfig+0x220>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d045      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a36      	ldr	r2, [pc, #216]	; (800a8d8 <DMA_SetConfig+0x224>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d040      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a35      	ldr	r2, [pc, #212]	; (800a8dc <DMA_SetConfig+0x228>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d03b      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a33      	ldr	r2, [pc, #204]	; (800a8e0 <DMA_SetConfig+0x22c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d036      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a32      	ldr	r2, [pc, #200]	; (800a8e4 <DMA_SetConfig+0x230>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d031      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a30      	ldr	r2, [pc, #192]	; (800a8e8 <DMA_SetConfig+0x234>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d02c      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a2f      	ldr	r2, [pc, #188]	; (800a8ec <DMA_SetConfig+0x238>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d027      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a2d      	ldr	r2, [pc, #180]	; (800a8f0 <DMA_SetConfig+0x23c>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d022      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a2c      	ldr	r2, [pc, #176]	; (800a8f4 <DMA_SetConfig+0x240>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d01d      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <DMA_SetConfig+0x244>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d018      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a29      	ldr	r2, [pc, #164]	; (800a8fc <DMA_SetConfig+0x248>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d013      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a27      	ldr	r2, [pc, #156]	; (800a900 <DMA_SetConfig+0x24c>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00e      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a26      	ldr	r2, [pc, #152]	; (800a904 <DMA_SetConfig+0x250>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d009      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a24      	ldr	r2, [pc, #144]	; (800a908 <DMA_SetConfig+0x254>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d004      	beq.n	800a884 <DMA_SetConfig+0x1d0>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a23      	ldr	r2, [pc, #140]	; (800a90c <DMA_SetConfig+0x258>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d101      	bne.n	800a888 <DMA_SetConfig+0x1d4>
 800a884:	2301      	movs	r3, #1
 800a886:	e000      	b.n	800a88a <DMA_SetConfig+0x1d6>
 800a888:	2300      	movs	r3, #0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d059      	beq.n	800a942 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a892:	f003 031f 	and.w	r3, r3, #31
 800a896:	223f      	movs	r2, #63	; 0x3f
 800a898:	409a      	lsls	r2, r3
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d138      	bne.n	800a930 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a8ce:	e086      	b.n	800a9de <DMA_SetConfig+0x32a>
 800a8d0:	40020010 	.word	0x40020010
 800a8d4:	40020028 	.word	0x40020028
 800a8d8:	40020040 	.word	0x40020040
 800a8dc:	40020058 	.word	0x40020058
 800a8e0:	40020070 	.word	0x40020070
 800a8e4:	40020088 	.word	0x40020088
 800a8e8:	400200a0 	.word	0x400200a0
 800a8ec:	400200b8 	.word	0x400200b8
 800a8f0:	40020410 	.word	0x40020410
 800a8f4:	40020428 	.word	0x40020428
 800a8f8:	40020440 	.word	0x40020440
 800a8fc:	40020458 	.word	0x40020458
 800a900:	40020470 	.word	0x40020470
 800a904:	40020488 	.word	0x40020488
 800a908:	400204a0 	.word	0x400204a0
 800a90c:	400204b8 	.word	0x400204b8
 800a910:	58025408 	.word	0x58025408
 800a914:	5802541c 	.word	0x5802541c
 800a918:	58025430 	.word	0x58025430
 800a91c:	58025444 	.word	0x58025444
 800a920:	58025458 	.word	0x58025458
 800a924:	5802546c 	.word	0x5802546c
 800a928:	58025480 	.word	0x58025480
 800a92c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	60da      	str	r2, [r3, #12]
}
 800a940:	e04d      	b.n	800a9de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a29      	ldr	r2, [pc, #164]	; (800a9ec <DMA_SetConfig+0x338>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d022      	beq.n	800a992 <DMA_SetConfig+0x2de>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a27      	ldr	r2, [pc, #156]	; (800a9f0 <DMA_SetConfig+0x33c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d01d      	beq.n	800a992 <DMA_SetConfig+0x2de>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a26      	ldr	r2, [pc, #152]	; (800a9f4 <DMA_SetConfig+0x340>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d018      	beq.n	800a992 <DMA_SetConfig+0x2de>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a24      	ldr	r2, [pc, #144]	; (800a9f8 <DMA_SetConfig+0x344>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d013      	beq.n	800a992 <DMA_SetConfig+0x2de>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a23      	ldr	r2, [pc, #140]	; (800a9fc <DMA_SetConfig+0x348>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d00e      	beq.n	800a992 <DMA_SetConfig+0x2de>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a21      	ldr	r2, [pc, #132]	; (800aa00 <DMA_SetConfig+0x34c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d009      	beq.n	800a992 <DMA_SetConfig+0x2de>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a20      	ldr	r2, [pc, #128]	; (800aa04 <DMA_SetConfig+0x350>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d004      	beq.n	800a992 <DMA_SetConfig+0x2de>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a1e      	ldr	r2, [pc, #120]	; (800aa08 <DMA_SetConfig+0x354>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d101      	bne.n	800a996 <DMA_SetConfig+0x2e2>
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <DMA_SetConfig+0x2e4>
 800a996:	2300      	movs	r3, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d020      	beq.n	800a9de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a0:	f003 031f 	and.w	r3, r3, #31
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	409a      	lsls	r2, r3
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	2b40      	cmp	r3, #64	; 0x40
 800a9ba:	d108      	bne.n	800a9ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	60da      	str	r2, [r3, #12]
}
 800a9cc:	e007      	b.n	800a9de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	60da      	str	r2, [r3, #12]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	58025408 	.word	0x58025408
 800a9f0:	5802541c 	.word	0x5802541c
 800a9f4:	58025430 	.word	0x58025430
 800a9f8:	58025444 	.word	0x58025444
 800a9fc:	58025458 	.word	0x58025458
 800aa00:	5802546c 	.word	0x5802546c
 800aa04:	58025480 	.word	0x58025480
 800aa08:	58025494 	.word	0x58025494

0800aa0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a42      	ldr	r2, [pc, #264]	; (800ab24 <DMA_CalcBaseAndBitshift+0x118>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d04a      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a41      	ldr	r2, [pc, #260]	; (800ab28 <DMA_CalcBaseAndBitshift+0x11c>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d045      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a3f      	ldr	r2, [pc, #252]	; (800ab2c <DMA_CalcBaseAndBitshift+0x120>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d040      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a3e      	ldr	r2, [pc, #248]	; (800ab30 <DMA_CalcBaseAndBitshift+0x124>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d03b      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a3c      	ldr	r2, [pc, #240]	; (800ab34 <DMA_CalcBaseAndBitshift+0x128>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d036      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a3b      	ldr	r2, [pc, #236]	; (800ab38 <DMA_CalcBaseAndBitshift+0x12c>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d031      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a39      	ldr	r2, [pc, #228]	; (800ab3c <DMA_CalcBaseAndBitshift+0x130>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d02c      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a38      	ldr	r2, [pc, #224]	; (800ab40 <DMA_CalcBaseAndBitshift+0x134>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d027      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a36      	ldr	r2, [pc, #216]	; (800ab44 <DMA_CalcBaseAndBitshift+0x138>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d022      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a35      	ldr	r2, [pc, #212]	; (800ab48 <DMA_CalcBaseAndBitshift+0x13c>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d01d      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a33      	ldr	r2, [pc, #204]	; (800ab4c <DMA_CalcBaseAndBitshift+0x140>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d018      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a32      	ldr	r2, [pc, #200]	; (800ab50 <DMA_CalcBaseAndBitshift+0x144>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d013      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a30      	ldr	r2, [pc, #192]	; (800ab54 <DMA_CalcBaseAndBitshift+0x148>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d00e      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a2f      	ldr	r2, [pc, #188]	; (800ab58 <DMA_CalcBaseAndBitshift+0x14c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d009      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a2d      	ldr	r2, [pc, #180]	; (800ab5c <DMA_CalcBaseAndBitshift+0x150>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d004      	beq.n	800aab4 <DMA_CalcBaseAndBitshift+0xa8>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a2c      	ldr	r2, [pc, #176]	; (800ab60 <DMA_CalcBaseAndBitshift+0x154>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d101      	bne.n	800aab8 <DMA_CalcBaseAndBitshift+0xac>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e000      	b.n	800aaba <DMA_CalcBaseAndBitshift+0xae>
 800aab8:	2300      	movs	r3, #0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d024      	beq.n	800ab08 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	3b10      	subs	r3, #16
 800aac6:	4a27      	ldr	r2, [pc, #156]	; (800ab64 <DMA_CalcBaseAndBitshift+0x158>)
 800aac8:	fba2 2303 	umull	r2, r3, r2, r3
 800aacc:	091b      	lsrs	r3, r3, #4
 800aace:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f003 0307 	and.w	r3, r3, #7
 800aad6:	4a24      	ldr	r2, [pc, #144]	; (800ab68 <DMA_CalcBaseAndBitshift+0x15c>)
 800aad8:	5cd3      	ldrb	r3, [r2, r3]
 800aada:	461a      	mov	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d908      	bls.n	800aaf8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	4b1f      	ldr	r3, [pc, #124]	; (800ab6c <DMA_CalcBaseAndBitshift+0x160>)
 800aaee:	4013      	ands	r3, r2
 800aaf0:	1d1a      	adds	r2, r3, #4
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	659a      	str	r2, [r3, #88]	; 0x58
 800aaf6:	e00d      	b.n	800ab14 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	461a      	mov	r2, r3
 800aafe:	4b1b      	ldr	r3, [pc, #108]	; (800ab6c <DMA_CalcBaseAndBitshift+0x160>)
 800ab00:	4013      	ands	r3, r2
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6593      	str	r3, [r2, #88]	; 0x58
 800ab06:	e005      	b.n	800ab14 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	40020010 	.word	0x40020010
 800ab28:	40020028 	.word	0x40020028
 800ab2c:	40020040 	.word	0x40020040
 800ab30:	40020058 	.word	0x40020058
 800ab34:	40020070 	.word	0x40020070
 800ab38:	40020088 	.word	0x40020088
 800ab3c:	400200a0 	.word	0x400200a0
 800ab40:	400200b8 	.word	0x400200b8
 800ab44:	40020410 	.word	0x40020410
 800ab48:	40020428 	.word	0x40020428
 800ab4c:	40020440 	.word	0x40020440
 800ab50:	40020458 	.word	0x40020458
 800ab54:	40020470 	.word	0x40020470
 800ab58:	40020488 	.word	0x40020488
 800ab5c:	400204a0 	.word	0x400204a0
 800ab60:	400204b8 	.word	0x400204b8
 800ab64:	aaaaaaab 	.word	0xaaaaaaab
 800ab68:	0801b554 	.word	0x0801b554
 800ab6c:	fffffc00 	.word	0xfffffc00

0800ab70 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d120      	bne.n	800abc6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d858      	bhi.n	800ac3e <DMA_CheckFifoParam+0xce>
 800ab8c:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <DMA_CheckFifoParam+0x24>)
 800ab8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab92:	bf00      	nop
 800ab94:	0800aba5 	.word	0x0800aba5
 800ab98:	0800abb7 	.word	0x0800abb7
 800ab9c:	0800aba5 	.word	0x0800aba5
 800aba0:	0800ac3f 	.word	0x0800ac3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d048      	beq.n	800ac42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abb4:	e045      	b.n	800ac42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800abbe:	d142      	bne.n	800ac46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abc4:	e03f      	b.n	800ac46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abce:	d123      	bne.n	800ac18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d838      	bhi.n	800ac4a <DMA_CheckFifoParam+0xda>
 800abd8:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <DMA_CheckFifoParam+0x70>)
 800abda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abde:	bf00      	nop
 800abe0:	0800abf1 	.word	0x0800abf1
 800abe4:	0800abf7 	.word	0x0800abf7
 800abe8:	0800abf1 	.word	0x0800abf1
 800abec:	0800ac09 	.word	0x0800ac09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	73fb      	strb	r3, [r7, #15]
        break;
 800abf4:	e030      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d025      	beq.n	800ac4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac06:	e022      	b.n	800ac4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ac10:	d11f      	bne.n	800ac52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac16:	e01c      	b.n	800ac52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d902      	bls.n	800ac26 <DMA_CheckFifoParam+0xb6>
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d003      	beq.n	800ac2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ac24:	e018      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	73fb      	strb	r3, [r7, #15]
        break;
 800ac2a:	e015      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00e      	beq.n	800ac56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac3c:	e00b      	b.n	800ac56 <DMA_CheckFifoParam+0xe6>
        break;
 800ac3e:	bf00      	nop
 800ac40:	e00a      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
        break;
 800ac42:	bf00      	nop
 800ac44:	e008      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
        break;
 800ac46:	bf00      	nop
 800ac48:	e006      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
        break;
 800ac4a:	bf00      	nop
 800ac4c:	e004      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
        break;
 800ac4e:	bf00      	nop
 800ac50:	e002      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
        break;
 800ac52:	bf00      	nop
 800ac54:	e000      	b.n	800ac58 <DMA_CheckFifoParam+0xe8>
    break;
 800ac56:	bf00      	nop
    }
  }

  return status;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop

0800ac68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a38      	ldr	r2, [pc, #224]	; (800ad5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d022      	beq.n	800acc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a36      	ldr	r2, [pc, #216]	; (800ad60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d01d      	beq.n	800acc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a35      	ldr	r2, [pc, #212]	; (800ad64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d018      	beq.n	800acc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a33      	ldr	r2, [pc, #204]	; (800ad68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d013      	beq.n	800acc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a32      	ldr	r2, [pc, #200]	; (800ad6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d00e      	beq.n	800acc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a30      	ldr	r2, [pc, #192]	; (800ad70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d009      	beq.n	800acc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a2f      	ldr	r2, [pc, #188]	; (800ad74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d004      	beq.n	800acc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a2d      	ldr	r2, [pc, #180]	; (800ad78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d101      	bne.n	800acca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800acca:	2300      	movs	r3, #0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d01a      	beq.n	800ad06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	3b08      	subs	r3, #8
 800acd8:	4a28      	ldr	r2, [pc, #160]	; (800ad7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800acda:	fba2 2303 	umull	r2, r3, r2, r3
 800acde:	091b      	lsrs	r3, r3, #4
 800ace0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ace6:	4413      	add	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	461a      	mov	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a24      	ldr	r2, [pc, #144]	; (800ad84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800acf4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f003 031f 	and.w	r3, r3, #31
 800acfc:	2201      	movs	r2, #1
 800acfe:	409a      	lsls	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ad04:	e024      	b.n	800ad50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	3b10      	subs	r3, #16
 800ad0e:	4a1e      	ldr	r2, [pc, #120]	; (800ad88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800ad10:	fba2 2303 	umull	r2, r3, r2, r3
 800ad14:	091b      	lsrs	r3, r3, #4
 800ad16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	4a1c      	ldr	r2, [pc, #112]	; (800ad8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d806      	bhi.n	800ad2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	4a1b      	ldr	r2, [pc, #108]	; (800ad90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d902      	bls.n	800ad2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4b18      	ldr	r3, [pc, #96]	; (800ad94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	461a      	mov	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a16      	ldr	r2, [pc, #88]	; (800ad98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ad40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f003 031f 	and.w	r3, r3, #31
 800ad48:	2201      	movs	r2, #1
 800ad4a:	409a      	lsls	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ad50:	bf00      	nop
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	58025408 	.word	0x58025408
 800ad60:	5802541c 	.word	0x5802541c
 800ad64:	58025430 	.word	0x58025430
 800ad68:	58025444 	.word	0x58025444
 800ad6c:	58025458 	.word	0x58025458
 800ad70:	5802546c 	.word	0x5802546c
 800ad74:	58025480 	.word	0x58025480
 800ad78:	58025494 	.word	0x58025494
 800ad7c:	cccccccd 	.word	0xcccccccd
 800ad80:	16009600 	.word	0x16009600
 800ad84:	58025880 	.word	0x58025880
 800ad88:	aaaaaaab 	.word	0xaaaaaaab
 800ad8c:	400204b8 	.word	0x400204b8
 800ad90:	4002040f 	.word	0x4002040f
 800ad94:	10008200 	.word	0x10008200
 800ad98:	40020880 	.word	0x40020880

0800ad9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d04a      	beq.n	800ae48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b08      	cmp	r3, #8
 800adb6:	d847      	bhi.n	800ae48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a25      	ldr	r2, [pc, #148]	; (800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d022      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a24      	ldr	r2, [pc, #144]	; (800ae58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d01d      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a22      	ldr	r2, [pc, #136]	; (800ae5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d018      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a21      	ldr	r2, [pc, #132]	; (800ae60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d013      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a1f      	ldr	r2, [pc, #124]	; (800ae64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d00e      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a1e      	ldr	r2, [pc, #120]	; (800ae68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d009      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a1c      	ldr	r2, [pc, #112]	; (800ae6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d004      	beq.n	800ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a1b      	ldr	r2, [pc, #108]	; (800ae70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d101      	bne.n	800ae0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e000      	b.n	800ae0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00a      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	4b17      	ldr	r3, [pc, #92]	; (800ae74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ae16:	4413      	add	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a15      	ldr	r2, [pc, #84]	; (800ae78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ae24:	671a      	str	r2, [r3, #112]	; 0x70
 800ae26:	e009      	b.n	800ae3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4b14      	ldr	r3, [pc, #80]	; (800ae7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	461a      	mov	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a11      	ldr	r2, [pc, #68]	; (800ae80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ae3a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	2201      	movs	r2, #1
 800ae42:	409a      	lsls	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ae48:	bf00      	nop
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	58025408 	.word	0x58025408
 800ae58:	5802541c 	.word	0x5802541c
 800ae5c:	58025430 	.word	0x58025430
 800ae60:	58025444 	.word	0x58025444
 800ae64:	58025458 	.word	0x58025458
 800ae68:	5802546c 	.word	0x5802546c
 800ae6c:	58025480 	.word	0x58025480
 800ae70:	58025494 	.word	0x58025494
 800ae74:	1600963f 	.word	0x1600963f
 800ae78:	58025940 	.word	0x58025940
 800ae7c:	1000823f 	.word	0x1000823f
 800ae80:	40020940 	.word	0x40020940

0800ae84 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08a      	sub	sp, #40	; 0x28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800ae98:	2308      	movs	r3, #8
 800ae9a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae9c:	4b40      	ldr	r3, [pc, #256]	; (800afa0 <HAL_FLASH_Program+0x11c>)
 800ae9e:	7d1b      	ldrb	r3, [r3, #20]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d101      	bne.n	800aea8 <HAL_FLASH_Program+0x24>
 800aea4:	2302      	movs	r3, #2
 800aea6:	e076      	b.n	800af96 <HAL_FLASH_Program+0x112>
 800aea8:	4b3d      	ldr	r3, [pc, #244]	; (800afa0 <HAL_FLASH_Program+0x11c>)
 800aeaa:	2201      	movs	r2, #1
 800aeac:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aeb4:	d306      	bcc.n	800aec4 <HAL_FLASH_Program+0x40>
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aebc:	d202      	bcs.n	800aec4 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800aebe:	2301      	movs	r3, #1
 800aec0:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800aec2:	e00c      	b.n	800aede <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aeca:	d306      	bcc.n	800aeda <HAL_FLASH_Program+0x56>
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800aed2:	d202      	bcs.n	800aeda <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800aed4:	2302      	movs	r3, #2
 800aed6:	61bb      	str	r3, [r7, #24]
 800aed8:	e001      	b.n	800aede <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e05b      	b.n	800af96 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aede:	4b30      	ldr	r3, [pc, #192]	; (800afa0 <HAL_FLASH_Program+0x11c>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aee4:	69b9      	ldr	r1, [r7, #24]
 800aee6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aeea:	f000 f897 	bl	800b01c <FLASH_WaitForLastOperation>
 800aeee:	4603      	mov	r3, r0
 800aef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800aef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d147      	bne.n	800af8c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d106      	bne.n	800af10 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800af02:	4b28      	ldr	r3, [pc, #160]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	4a27      	ldr	r2, [pc, #156]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af08:	f043 0302 	orr.w	r3, r3, #2
 800af0c:	60d3      	str	r3, [r2, #12]
 800af0e:	e007      	b.n	800af20 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800af10:	4b24      	ldr	r3, [pc, #144]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af12:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af16:	4a23      	ldr	r2, [pc, #140]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800af20:	f3bf 8f6f 	isb	sy
}
 800af24:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800af26:	f3bf 8f4f 	dsb	sy
}
 800af2a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	3304      	adds	r3, #4
 800af38:	623b      	str	r3, [r7, #32]
        src_addr++;
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	3304      	adds	r3, #4
 800af3e:	61fb      	str	r3, [r7, #28]
        row_index--;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	3b01      	subs	r3, #1
 800af44:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1ef      	bne.n	800af2c <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800af4c:	f3bf 8f6f 	isb	sy
}
 800af50:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800af52:	f3bf 8f4f 	dsb	sy
}
 800af56:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800af58:	69b9      	ldr	r1, [r7, #24]
 800af5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af5e:	f000 f85d 	bl	800b01c <FLASH_WaitForLastOperation>
 800af62:	4603      	mov	r3, r0
 800af64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d106      	bne.n	800af7c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800af6e:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	4a0c      	ldr	r2, [pc, #48]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af74:	f023 0302 	bic.w	r3, r3, #2
 800af78:	60d3      	str	r3, [r2, #12]
 800af7a:	e007      	b.n	800af8c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800af7c:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af7e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af82:	4a08      	ldr	r2, [pc, #32]	; (800afa4 <HAL_FLASH_Program+0x120>)
 800af84:	f023 0302 	bic.w	r3, r3, #2
 800af88:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <HAL_FLASH_Program+0x11c>)
 800af8e:	2200      	movs	r2, #0
 800af90:	751a      	strb	r2, [r3, #20]

  return status;
 800af92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af96:	4618      	mov	r0, r3
 800af98:	3728      	adds	r7, #40	; 0x28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	24002000 	.word	0x24002000
 800afa4:	52002000 	.word	0x52002000

0800afa8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800afac:	4b18      	ldr	r3, [pc, #96]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00d      	beq.n	800afd4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800afb8:	4b15      	ldr	r3, [pc, #84]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800afba:	4a16      	ldr	r2, [pc, #88]	; (800b014 <HAL_FLASH_Unlock+0x6c>)
 800afbc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800afbe:	4b14      	ldr	r3, [pc, #80]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800afc0:	4a15      	ldr	r2, [pc, #84]	; (800b018 <HAL_FLASH_Unlock+0x70>)
 800afc2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800afc4:	4b12      	ldr	r3, [pc, #72]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e018      	b.n	800b006 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800afd4:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800afd6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d010      	beq.n	800b004 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800afe2:	4b0b      	ldr	r3, [pc, #44]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800afe4:	4a0b      	ldr	r2, [pc, #44]	; (800b014 <HAL_FLASH_Unlock+0x6c>)
 800afe6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800afea:	4b09      	ldr	r3, [pc, #36]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800afec:	4a0a      	ldr	r2, [pc, #40]	; (800b018 <HAL_FLASH_Unlock+0x70>)
 800afee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aff2:	4b07      	ldr	r3, [pc, #28]	; (800b010 <HAL_FLASH_Unlock+0x68>)
 800aff4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e000      	b.n	800b006 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	52002000 	.word	0x52002000
 800b014:	45670123 	.word	0x45670123
 800b018:	cdef89ab 	.word	0xcdef89ab

0800b01c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800b026:	2304      	movs	r3, #4
 800b028:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800b02e:	f7fa ffab 	bl	8005f88 <HAL_GetTick>
 800b032:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b02      	cmp	r3, #2
 800b038:	d113      	bne.n	800b062 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800b03a:	4b41      	ldr	r3, [pc, #260]	; (800b140 <FLASH_WaitForLastOperation+0x124>)
 800b03c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b03e:	e010      	b.n	800b062 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b046:	d00c      	beq.n	800b062 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b048:	f7fa ff9e 	bl	8005f88 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	429a      	cmp	r2, r3
 800b056:	d302      	bcc.n	800b05e <FLASH_WaitForLastOperation+0x42>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e06a      	b.n	800b138 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	4b37      	ldr	r3, [pc, #220]	; (800b144 <FLASH_WaitForLastOperation+0x128>)
 800b066:	4013      	ands	r3, r2
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d10a      	bne.n	800b084 <FLASH_WaitForLastOperation+0x68>
 800b06e:	4b36      	ldr	r3, [pc, #216]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b070:	691a      	ldr	r2, [r3, #16]
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	4013      	ands	r3, r2
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	429a      	cmp	r2, r3
 800b07a:	bf0c      	ite	eq
 800b07c:	2301      	moveq	r3, #1
 800b07e:	2300      	movne	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	e00c      	b.n	800b09e <FLASH_WaitForLastOperation+0x82>
 800b084:	4b30      	ldr	r3, [pc, #192]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b086:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b08a:	43da      	mvns	r2, r3
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	4013      	ands	r3, r2
 800b090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b094:	2b00      	cmp	r3, #0
 800b096:	bf0c      	ite	eq
 800b098:	2301      	moveq	r3, #1
 800b09a:	2300      	movne	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1ce      	bne.n	800b040 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d105      	bne.n	800b0b4 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800b0a8:	4b27      	ldr	r3, [pc, #156]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b0aa:	691a      	ldr	r2, [r3, #16]
 800b0ac:	4b27      	ldr	r3, [pc, #156]	; (800b14c <FLASH_WaitForLastOperation+0x130>)
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]
 800b0b2:	e007      	b.n	800b0c4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800b0b4:	4b24      	ldr	r3, [pc, #144]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b0b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800b0ba:	4b24      	ldr	r3, [pc, #144]	; (800b14c <FLASH_WaitForLastOperation+0x130>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0c2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d017      	beq.n	800b0fe <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b0ce:	4b20      	ldr	r3, [pc, #128]	; (800b150 <FLASH_WaitForLastOperation+0x134>)
 800b0d0:	699a      	ldr	r2, [r3, #24]
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	4a1e      	ldr	r2, [pc, #120]	; (800b150 <FLASH_WaitForLastOperation+0x134>)
 800b0d8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4b19      	ldr	r3, [pc, #100]	; (800b144 <FLASH_WaitForLastOperation+0x128>)
 800b0de:	4013      	ands	r3, r2
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d103      	bne.n	800b0ee <FLASH_WaitForLastOperation+0xd2>
 800b0e6:	4a18      	ldr	r2, [pc, #96]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	6153      	str	r3, [r2, #20]
 800b0ec:	e005      	b.n	800b0fa <FLASH_WaitForLastOperation+0xde>
 800b0ee:	4a16      	ldr	r2, [pc, #88]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0f6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e01c      	b.n	800b138 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d10b      	bne.n	800b11c <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800b104:	4b10      	ldr	r3, [pc, #64]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b110:	d111      	bne.n	800b136 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800b112:	4b0d      	ldr	r3, [pc, #52]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b114:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b118:	615a      	str	r2, [r3, #20]
 800b11a:	e00c      	b.n	800b136 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800b11c:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b11e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b12a:	d104      	bne.n	800b136 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800b12c:	4b06      	ldr	r3, [pc, #24]	; (800b148 <FLASH_WaitForLastOperation+0x12c>)
 800b12e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b132:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	80000004 	.word	0x80000004
 800b144:	1fef000f 	.word	0x1fef000f
 800b148:	52002000 	.word	0x52002000
 800b14c:	17ee0000 	.word	0x17ee0000
 800b150:	24002000 	.word	0x24002000

0800b154 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b162:	4b5e      	ldr	r3, [pc, #376]	; (800b2dc <HAL_FLASHEx_Erase+0x188>)
 800b164:	7d1b      	ldrb	r3, [r3, #20]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_FLASHEx_Erase+0x1a>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e0b2      	b.n	800b2d4 <HAL_FLASHEx_Erase+0x180>
 800b16e:	4b5b      	ldr	r3, [pc, #364]	; (800b2dc <HAL_FLASHEx_Erase+0x188>)
 800b170:	2201      	movs	r2, #1
 800b172:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b174:	4b59      	ldr	r3, [pc, #356]	; (800b2dc <HAL_FLASHEx_Erase+0x188>)
 800b176:	2200      	movs	r2, #0
 800b178:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b186:	2101      	movs	r1, #1
 800b188:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b18c:	f7ff ff46 	bl	800b01c <FLASH_WaitForLastOperation>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f003 0302 	and.w	r3, r3, #2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d009      	beq.n	800b1ba <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b1a6:	2102      	movs	r1, #2
 800b1a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1ac:	f7ff ff36 	bl	800b01c <FLASH_WaitForLastOperation>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f040 8085 	bne.w	800b2cc <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d136      	bne.n	800b238 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	691a      	ldr	r2, [r3, #16]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f000 f887 	bl	800b2e8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00f      	beq.n	800b206 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1ec:	f7ff ff16 	bl	800b01c <FLASH_WaitForLastOperation>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b1fa:	4b39      	ldr	r3, [pc, #228]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	4a38      	ldr	r2, [pc, #224]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b200:	f023 0308 	bic.w	r3, r3, #8
 800b204:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d05c      	beq.n	800b2cc <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b212:	2102      	movs	r1, #2
 800b214:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b218:	f7ff ff00 	bl	800b01c <FLASH_WaitForLastOperation>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b226:	4b2e      	ldr	r3, [pc, #184]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b228:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b22c:	4a2c      	ldr	r2, [pc, #176]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b22e:	f023 0308 	bic.w	r3, r3, #8
 800b232:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b236:	e049      	b.n	800b2cc <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b23e:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	60bb      	str	r3, [r7, #8]
 800b246:	e039      	b.n	800b2bc <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6859      	ldr	r1, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	461a      	mov	r2, r3
 800b252:	68b8      	ldr	r0, [r7, #8]
 800b254:	f000 f8b2 	bl	800b3bc <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00c      	beq.n	800b27e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b264:	2101      	movs	r1, #1
 800b266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b26a:	f7ff fed7 	bl	800b01c <FLASH_WaitForLastOperation>
 800b26e:	4603      	mov	r3, r0
 800b270:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b272:	4b1b      	ldr	r3, [pc, #108]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b274:	68da      	ldr	r2, [r3, #12]
 800b276:	491a      	ldr	r1, [pc, #104]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b278:	4b1a      	ldr	r3, [pc, #104]	; (800b2e4 <HAL_FLASHEx_Erase+0x190>)
 800b27a:	4013      	ands	r3, r2
 800b27c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00e      	beq.n	800b2a8 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b28a:	2102      	movs	r1, #2
 800b28c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b290:	f7ff fec4 	bl	800b01c <FLASH_WaitForLastOperation>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b298:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b29a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b29e:	4910      	ldr	r1, [pc, #64]	; (800b2e0 <HAL_FLASHEx_Erase+0x18c>)
 800b2a0:	4b10      	ldr	r3, [pc, #64]	; (800b2e4 <HAL_FLASHEx_Erase+0x190>)
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	601a      	str	r2, [r3, #0]
          break;
 800b2b4:	e00a      	b.n	800b2cc <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	60bb      	str	r3, [r7, #8]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d3bd      	bcc.n	800b248 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b2cc:	4b03      	ldr	r3, [pc, #12]	; (800b2dc <HAL_FLASHEx_Erase+0x188>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	751a      	strb	r2, [r3, #20]

  return status;
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	24002000 	.word	0x24002000
 800b2e0:	52002000 	.word	0x52002000
 800b2e4:	fffff8fb 	.word	0xfffff8fb

0800b2e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	f003 0303 	and.w	r3, r3, #3
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d122      	bne.n	800b342 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b2fc:	4b2e      	ldr	r3, [pc, #184]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	4a2d      	ldr	r2, [pc, #180]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b302:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b306:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b308:	4b2b      	ldr	r3, [pc, #172]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b30a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b30e:	4a2a      	ldr	r2, [pc, #168]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b310:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b314:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b318:	4b27      	ldr	r3, [pc, #156]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	4926      	ldr	r1, [pc, #152]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4313      	orrs	r3, r2
 800b322:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b324:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b326:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b32a:	4923      	ldr	r1, [pc, #140]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4313      	orrs	r3, r2
 800b330:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b334:	4b20      	ldr	r3, [pc, #128]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	4a1f      	ldr	r2, [pc, #124]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b33a:	f043 0310 	orr.w	r3, r3, #16
 800b33e:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b340:	e033      	b.n	800b3aa <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d011      	beq.n	800b370 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b34c:	4b1a      	ldr	r3, [pc, #104]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	4a19      	ldr	r2, [pc, #100]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b352:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b356:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b358:	4b17      	ldr	r3, [pc, #92]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b35a:	68da      	ldr	r2, [r3, #12]
 800b35c:	4916      	ldr	r1, [pc, #88]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4313      	orrs	r3, r2
 800b362:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b364:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	4a13      	ldr	r2, [pc, #76]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b36a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b36e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	d017      	beq.n	800b3aa <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b37a:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b37c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b380:	4a0d      	ldr	r2, [pc, #52]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b382:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b386:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b38a:	4b0b      	ldr	r3, [pc, #44]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b38c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b390:	4909      	ldr	r1, [pc, #36]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4313      	orrs	r3, r2
 800b396:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b39a:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b39c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3a0:	4a05      	ldr	r2, [pc, #20]	; (800b3b8 <FLASH_MassErase+0xd0>)
 800b3a2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b3a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	52002000 	.word	0x52002000

0800b3bc <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d010      	beq.n	800b3f4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b3d2:	4b18      	ldr	r3, [pc, #96]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	4a17      	ldr	r2, [pc, #92]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b3d8:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b3dc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b3de:	4b15      	ldr	r3, [pc, #84]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b3e0:	68da      	ldr	r2, [r3, #12]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	0219      	lsls	r1, r3, #8
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	4a11      	ldr	r2, [pc, #68]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b3ee:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b3f2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	f003 0302 	and.w	r3, r3, #2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d014      	beq.n	800b428 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b3fe:	4b0d      	ldr	r3, [pc, #52]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b400:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b404:	4a0b      	ldr	r2, [pc, #44]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b406:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b40a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b40e:	4b09      	ldr	r3, [pc, #36]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b410:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	0219      	lsls	r1, r3, #8
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	430b      	orrs	r3, r1
 800b41c:	4313      	orrs	r3, r2
 800b41e:	4a05      	ldr	r2, [pc, #20]	; (800b434 <FLASH_Erase_Sector+0x78>)
 800b420:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b424:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b428:	bf00      	nop
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	52002000 	.word	0x52002000

0800b438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b438:	b480      	push	{r7}
 800b43a:	b089      	sub	sp, #36	; 0x24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b442:	2300      	movs	r3, #0
 800b444:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b446:	4b89      	ldr	r3, [pc, #548]	; (800b66c <HAL_GPIO_Init+0x234>)
 800b448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b44a:	e194      	b.n	800b776 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	2101      	movs	r1, #1
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	fa01 f303 	lsl.w	r3, r1, r3
 800b458:	4013      	ands	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 8186 	beq.w	800b770 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d005      	beq.n	800b47c <HAL_GPIO_Init+0x44>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	f003 0303 	and.w	r3, r3, #3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d130      	bne.n	800b4de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	2203      	movs	r2, #3
 800b488:	fa02 f303 	lsl.w	r3, r2, r3
 800b48c:	43db      	mvns	r3, r3
 800b48e:	69ba      	ldr	r2, [r7, #24]
 800b490:	4013      	ands	r3, r2
 800b492:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	68da      	ldr	r2, [r3, #12]
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a0:	69ba      	ldr	r2, [r7, #24]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ba:	43db      	mvns	r3, r3
 800b4bc:	69ba      	ldr	r2, [r7, #24]
 800b4be:	4013      	ands	r3, r2
 800b4c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	091b      	lsrs	r3, r3, #4
 800b4c8:	f003 0201 	and.w	r2, r3, #1
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d017      	beq.n	800b51a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	2203      	movs	r2, #3
 800b4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fa:	43db      	mvns	r3, r3
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	4013      	ands	r3, r2
 800b500:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	fa02 f303 	lsl.w	r3, r2, r3
 800b50e:	69ba      	ldr	r2, [r7, #24]
 800b510:	4313      	orrs	r3, r2
 800b512:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	2b02      	cmp	r3, #2
 800b524:	d123      	bne.n	800b56e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	08da      	lsrs	r2, r3, #3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3208      	adds	r2, #8
 800b52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	f003 0307 	and.w	r3, r3, #7
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	220f      	movs	r2, #15
 800b53e:	fa02 f303 	lsl.w	r3, r2, r3
 800b542:	43db      	mvns	r3, r3
 800b544:	69ba      	ldr	r2, [r7, #24]
 800b546:	4013      	ands	r3, r2
 800b548:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	691a      	ldr	r2, [r3, #16]
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	f003 0307 	and.w	r3, r3, #7
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	fa02 f303 	lsl.w	r3, r2, r3
 800b55a:	69ba      	ldr	r2, [r7, #24]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	08da      	lsrs	r2, r3, #3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3208      	adds	r2, #8
 800b568:	69b9      	ldr	r1, [r7, #24]
 800b56a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	2203      	movs	r2, #3
 800b57a:	fa02 f303 	lsl.w	r3, r2, r3
 800b57e:	43db      	mvns	r3, r3
 800b580:	69ba      	ldr	r2, [r7, #24]
 800b582:	4013      	ands	r3, r2
 800b584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f003 0203 	and.w	r2, r3, #3
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	fa02 f303 	lsl.w	r3, r2, r3
 800b596:	69ba      	ldr	r2, [r7, #24]
 800b598:	4313      	orrs	r3, r2
 800b59a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	69ba      	ldr	r2, [r7, #24]
 800b5a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 80e0 	beq.w	800b770 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5b0:	4b2f      	ldr	r3, [pc, #188]	; (800b670 <HAL_GPIO_Init+0x238>)
 800b5b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5b6:	4a2e      	ldr	r2, [pc, #184]	; (800b670 <HAL_GPIO_Init+0x238>)
 800b5b8:	f043 0302 	orr.w	r3, r3, #2
 800b5bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b5c0:	4b2b      	ldr	r3, [pc, #172]	; (800b670 <HAL_GPIO_Init+0x238>)
 800b5c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b5ce:	4a29      	ldr	r2, [pc, #164]	; (800b674 <HAL_GPIO_Init+0x23c>)
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	089b      	lsrs	r3, r3, #2
 800b5d4:	3302      	adds	r3, #2
 800b5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	220f      	movs	r2, #15
 800b5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ea:	43db      	mvns	r3, r3
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a20      	ldr	r2, [pc, #128]	; (800b678 <HAL_GPIO_Init+0x240>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d052      	beq.n	800b6a0 <HAL_GPIO_Init+0x268>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a1f      	ldr	r2, [pc, #124]	; (800b67c <HAL_GPIO_Init+0x244>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d031      	beq.n	800b666 <HAL_GPIO_Init+0x22e>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a1e      	ldr	r2, [pc, #120]	; (800b680 <HAL_GPIO_Init+0x248>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d02b      	beq.n	800b662 <HAL_GPIO_Init+0x22a>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a1d      	ldr	r2, [pc, #116]	; (800b684 <HAL_GPIO_Init+0x24c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d025      	beq.n	800b65e <HAL_GPIO_Init+0x226>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a1c      	ldr	r2, [pc, #112]	; (800b688 <HAL_GPIO_Init+0x250>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d01f      	beq.n	800b65a <HAL_GPIO_Init+0x222>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1b      	ldr	r2, [pc, #108]	; (800b68c <HAL_GPIO_Init+0x254>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d019      	beq.n	800b656 <HAL_GPIO_Init+0x21e>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a1a      	ldr	r2, [pc, #104]	; (800b690 <HAL_GPIO_Init+0x258>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d013      	beq.n	800b652 <HAL_GPIO_Init+0x21a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a19      	ldr	r2, [pc, #100]	; (800b694 <HAL_GPIO_Init+0x25c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d00d      	beq.n	800b64e <HAL_GPIO_Init+0x216>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a18      	ldr	r2, [pc, #96]	; (800b698 <HAL_GPIO_Init+0x260>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d007      	beq.n	800b64a <HAL_GPIO_Init+0x212>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a17      	ldr	r2, [pc, #92]	; (800b69c <HAL_GPIO_Init+0x264>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d101      	bne.n	800b646 <HAL_GPIO_Init+0x20e>
 800b642:	2309      	movs	r3, #9
 800b644:	e02d      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b646:	230a      	movs	r3, #10
 800b648:	e02b      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b64a:	2308      	movs	r3, #8
 800b64c:	e029      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b64e:	2307      	movs	r3, #7
 800b650:	e027      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b652:	2306      	movs	r3, #6
 800b654:	e025      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b656:	2305      	movs	r3, #5
 800b658:	e023      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b65a:	2304      	movs	r3, #4
 800b65c:	e021      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b65e:	2303      	movs	r3, #3
 800b660:	e01f      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b662:	2302      	movs	r3, #2
 800b664:	e01d      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b666:	2301      	movs	r3, #1
 800b668:	e01b      	b.n	800b6a2 <HAL_GPIO_Init+0x26a>
 800b66a:	bf00      	nop
 800b66c:	58000080 	.word	0x58000080
 800b670:	58024400 	.word	0x58024400
 800b674:	58000400 	.word	0x58000400
 800b678:	58020000 	.word	0x58020000
 800b67c:	58020400 	.word	0x58020400
 800b680:	58020800 	.word	0x58020800
 800b684:	58020c00 	.word	0x58020c00
 800b688:	58021000 	.word	0x58021000
 800b68c:	58021400 	.word	0x58021400
 800b690:	58021800 	.word	0x58021800
 800b694:	58021c00 	.word	0x58021c00
 800b698:	58022000 	.word	0x58022000
 800b69c:	58022400 	.word	0x58022400
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	f002 0203 	and.w	r2, r2, #3
 800b6a8:	0092      	lsls	r2, r2, #2
 800b6aa:	4093      	lsls	r3, r2
 800b6ac:	69ba      	ldr	r2, [r7, #24]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6b2:	4938      	ldr	r1, [pc, #224]	; (800b794 <HAL_GPIO_Init+0x35c>)
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	089b      	lsrs	r3, r3, #2
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	69ba      	ldr	r2, [r7, #24]
 800b6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b6c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	43db      	mvns	r3, r3
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b6de:	69ba      	ldr	r2, [r7, #24]
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b6e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b6ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	43db      	mvns	r3, r3
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	4313      	orrs	r3, r2
 800b712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	43db      	mvns	r3, r3
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	4013      	ands	r3, r2
 800b72a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d003      	beq.n	800b740 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b738:	69ba      	ldr	r2, [r7, #24]
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	43db      	mvns	r3, r3
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	4013      	ands	r3, r2
 800b754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	4313      	orrs	r3, r2
 800b768:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	3301      	adds	r3, #1
 800b774:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	fa22 f303 	lsr.w	r3, r2, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	f47f ae63 	bne.w	800b44c <HAL_GPIO_Init+0x14>
  }
}
 800b786:	bf00      	nop
 800b788:	bf00      	nop
 800b78a:	3724      	adds	r7, #36	; 0x24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	58000400 	.word	0x58000400

0800b798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	691a      	ldr	r2, [r3, #16]
 800b7a8:	887b      	ldrh	r3, [r7, #2]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	73fb      	strb	r3, [r7, #15]
 800b7b4:	e001      	b.n	800b7ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	807b      	strh	r3, [r7, #2]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b7d8:	787b      	ldrb	r3, [r7, #1]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b7de:	887a      	ldrh	r2, [r7, #2]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b7e4:	e003      	b.n	800b7ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b7e6:	887b      	ldrh	r3, [r7, #2]
 800b7e8:	041a      	lsls	r2, r3, #16
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	619a      	str	r2, [r3, #24]
}
 800b7ee:	bf00      	nop
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
	...

0800b7fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d101      	bne.n	800b80e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e08b      	b.n	800b926 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7f7 f968 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2224      	movs	r2, #36	; 0x24
 800b82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f022 0201 	bic.w	r2, r2, #1
 800b83e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b84c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689a      	ldr	r2, [r3, #8]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b85c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d107      	bne.n	800b876 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b872:	609a      	str	r2, [r3, #8]
 800b874:	e006      	b.n	800b884 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	689a      	ldr	r2, [r3, #8]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b882:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d108      	bne.n	800b89e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b89a:	605a      	str	r2, [r3, #4]
 800b89c:	e007      	b.n	800b8ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6859      	ldr	r1, [r3, #4]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <HAL_I2C_Init+0x134>)
 800b8ba:	430b      	orrs	r3, r1
 800b8bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68da      	ldr	r2, [r3, #12]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	691a      	ldr	r2, [r3, #16]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	430a      	orrs	r2, r1
 800b8e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	69d9      	ldr	r1, [r3, #28]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a1a      	ldr	r2, [r3, #32]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f042 0201 	orr.w	r2, r2, #1
 800b906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	02008000 	.word	0x02008000

0800b934 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af02      	add	r7, sp, #8
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	607a      	str	r2, [r7, #4]
 800b93e:	461a      	mov	r2, r3
 800b940:	460b      	mov	r3, r1
 800b942:	817b      	strh	r3, [r7, #10]
 800b944:	4613      	mov	r3, r2
 800b946:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b948:	2300      	movs	r3, #0
 800b94a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b20      	cmp	r3, #32
 800b956:	f040 80ef 	bne.w	800bb38 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b968:	d101      	bne.n	800b96e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b96a:	2302      	movs	r3, #2
 800b96c:	e0e5      	b.n	800bb3a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_I2C_Master_Transmit_DMA+0x48>
 800b978:	2302      	movs	r3, #2
 800b97a:	e0de      	b.n	800bb3a <HAL_I2C_Master_Transmit_DMA+0x206>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2221      	movs	r2, #33	; 0x21
 800b988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2210      	movs	r2, #16
 800b990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	893a      	ldrh	r2, [r7, #8]
 800b9a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	4a66      	ldr	r2, [pc, #408]	; (800bb44 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b9aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4a66      	ldr	r2, [pc, #408]	; (800bb48 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b9b0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2bff      	cmp	r3, #255	; 0xff
 800b9ba:	d906      	bls.n	800b9ca <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	22ff      	movs	r2, #255	; 0xff
 800b9c0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b9c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9c6:	61fb      	str	r3, [r7, #28]
 800b9c8:	e007      	b.n	800b9da <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b9d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9d8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01a      	beq.n	800ba18 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	781a      	ldrb	r2, [r3, #0]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	3b01      	subs	r3, #1
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba10:	3b01      	subs	r3, #1
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d074      	beq.n	800bb0a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d022      	beq.n	800ba6e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2c:	4a47      	ldr	r2, [pc, #284]	; (800bb4c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800ba2e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba34:	4a46      	ldr	r2, [pc, #280]	; (800bb50 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800ba36:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba44:	2200      	movs	r2, #0
 800ba46:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba58:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba5e:	f7fc ff17 	bl	8008890 <HAL_DMA_Start_IT>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d13a      	bne.n	800bae2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800ba6c:	e013      	b.n	800ba96 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2220      	movs	r2, #32
 800ba72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e051      	b.n	800bb3a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	8979      	ldrh	r1, [r7, #10]
 800baa2:	4b2c      	ldr	r3, [pc, #176]	; (800bb54 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f002 f83b 	bl	800db24 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	b29a      	uxth	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bac8:	2110      	movs	r1, #16
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f002 f85c 	bl	800db88 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	e028      	b.n	800bb34 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2220      	movs	r2, #32
 800bae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf6:	f043 0210 	orr.w	r2, r3, #16
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e017      	b.n	800bb3a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	4a12      	ldr	r2, [pc, #72]	; (800bb58 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800bb0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	8979      	ldrh	r1, [r7, #10]
 800bb16:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f002 f800 	bl	800db24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f002 f82a 	bl	800db88 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	e000      	b.n	800bb3a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800bb38:	2302      	movs	r3, #2
  }
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3720      	adds	r7, #32
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	ffff0000 	.word	0xffff0000
 800bb48:	0800c38f 	.word	0x0800c38f
 800bb4c:	0800d747 	.word	0x0800d747
 800bb50:	0800d875 	.word	0x0800d875
 800bb54:	80002000 	.word	0x80002000
 800bb58:	0800bf1f 	.word	0x0800bf1f

0800bb5c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b088      	sub	sp, #32
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	607a      	str	r2, [r7, #4]
 800bb66:	461a      	mov	r2, r3
 800bb68:	460b      	mov	r3, r1
 800bb6a:	817b      	strh	r3, [r7, #10]
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b20      	cmp	r3, #32
 800bb7a:	f040 80cd 	bne.w	800bd18 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb8c:	d101      	bne.n	800bb92 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800bb8e:	2302      	movs	r3, #2
 800bb90:	e0c3      	b.n	800bd1a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d101      	bne.n	800bba0 <HAL_I2C_Master_Receive_DMA+0x44>
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e0bc      	b.n	800bd1a <HAL_I2C_Master_Receive_DMA+0x1be>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2222      	movs	r2, #34	; 0x22
 800bbac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	893a      	ldrh	r2, [r7, #8]
 800bbc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	4a55      	ldr	r2, [pc, #340]	; (800bd24 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800bbce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a55      	ldr	r2, [pc, #340]	; (800bd28 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800bbd4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	2bff      	cmp	r3, #255	; 0xff
 800bbde:	d906      	bls.n	800bbee <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	22ff      	movs	r2, #255	; 0xff
 800bbe4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bbe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	e007      	b.n	800bbfe <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bbf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbfc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d070      	beq.n	800bce8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d020      	beq.n	800bc50 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc12:	4a46      	ldr	r2, [pc, #280]	; (800bd2c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800bc14:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1a:	4a45      	ldr	r2, [pc, #276]	; (800bd30 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bc1c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc22:	2200      	movs	r2, #0
 800bc24:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	3324      	adds	r3, #36	; 0x24
 800bc38:	4619      	mov	r1, r3
 800bc3a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bc40:	f7fc fe26 	bl	8008890 <HAL_DMA_Start_IT>
 800bc44:	4603      	mov	r3, r0
 800bc46:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bc48:	7cfb      	ldrb	r3, [r7, #19]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d138      	bne.n	800bcc0 <HAL_I2C_Master_Receive_DMA+0x164>
 800bc4e:	e013      	b.n	800bc78 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2220      	movs	r2, #32
 800bc54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e050      	b.n	800bd1a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	8979      	ldrh	r1, [r7, #10]
 800bc80:	4b2c      	ldr	r3, [pc, #176]	; (800bd34 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f001 ff4c 	bl	800db24 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bca6:	2110      	movs	r1, #16
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f001 ff6d 	bl	800db88 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	e029      	b.n	800bd14 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd4:	f043 0210 	orr.w	r2, r3, #16
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e018      	b.n	800bd1a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4a13      	ldr	r2, [pc, #76]	; (800bd38 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800bcec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	8979      	ldrh	r1, [r7, #10]
 800bcf6:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f001 ff10 	bl	800db24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bd0c:	2102      	movs	r1, #2
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f001 ff3a 	bl	800db88 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	e000      	b.n	800bd1a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800bd18:	2302      	movs	r3, #2
  }
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	ffff0000 	.word	0xffff0000
 800bd28:	0800c38f 	.word	0x0800c38f
 800bd2c:	0800d7dd 	.word	0x0800d7dd
 800bd30:	0800d875 	.word	0x0800d875
 800bd34:	80002400 	.word	0x80002400
 800bd38:	0800bf1f 	.word	0x0800bf1f

0800bd3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	68f9      	ldr	r1, [r7, #12]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	4798      	blx	r3
  }
}
 800bd68:	bf00      	nop
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d010      	beq.n	800bdb6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	09db      	lsrs	r3, r3, #7
 800bd98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00a      	beq.n	800bdb6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda4:	f043 0201 	orr.w	r2, r3, #1
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdb4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	0a9b      	lsrs	r3, r3, #10
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d010      	beq.n	800bde4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	09db      	lsrs	r3, r3, #7
 800bdc6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd2:	f043 0208 	orr.w	r2, r3, #8
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bde2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	0a5b      	lsrs	r3, r3, #9
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d010      	beq.n	800be12 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	09db      	lsrs	r3, r3, #7
 800bdf4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00a      	beq.n	800be12 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be00:	f043 0202 	orr.w	r2, r3, #2
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be10:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be16:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f003 030b 	and.w	r3, r3, #11
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800be22:	68f9      	ldr	r1, [r7, #12]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f001 fb53 	bl	800d4d0 <I2C_ITError>
  }
}
 800be2a:	bf00      	nop
 800be2c:	3718      	adds	r7, #24
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800be3a:	bf00      	nop
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be46:	b480      	push	{r7}
 800be48:	b083      	sub	sp, #12
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800be4e:	bf00      	nop
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800be62:	bf00      	nop
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800be76:	bf00      	nop
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	460b      	mov	r3, r1
 800be8c:	70fb      	strb	r3, [r7, #3]
 800be8e:	4613      	mov	r3, r2
 800be90:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800be92:	bf00      	nop
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b083      	sub	sp, #12
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800beda:	b480      	push	{r7}
 800bedc:	b083      	sub	sp, #12
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bee2:	bf00      	nop
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800beee:	b480      	push	{r7}
 800bef0:	b083      	sub	sp, #12
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bef6:	bf00      	nop
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf10:	b2db      	uxtb	r3, r3
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	370c      	adds	r7, #12
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b088      	sub	sp, #32
 800bf22:	af02      	add	r7, sp, #8
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d101      	bne.n	800bf3c <I2C_Master_ISR_IT+0x1e>
 800bf38:	2302      	movs	r3, #2
 800bf3a:	e120      	b.n	800c17e <I2C_Master_ISR_IT+0x260>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	091b      	lsrs	r3, r3, #4
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d013      	beq.n	800bf78 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	091b      	lsrs	r3, r3, #4
 800bf54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2210      	movs	r2, #16
 800bf62:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf68:	f043 0204 	orr.w	r2, r3, #4
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f001 fbc4 	bl	800d6fe <I2C_Flush_TXDR>
 800bf76:	e0ed      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	089b      	lsrs	r3, r3, #2
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d023      	beq.n	800bfcc <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	089b      	lsrs	r3, r3, #2
 800bf88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d01d      	beq.n	800bfcc <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	f023 0304 	bic.w	r3, r3, #4
 800bf96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa2:	b2d2      	uxtb	r2, r2
 800bfa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfca:	e0c3      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	099b      	lsrs	r3, r3, #6
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d12a      	bne.n	800c02e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	085b      	lsrs	r3, r3, #1
 800bfdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d024      	beq.n	800c02e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	085b      	lsrs	r3, r3, #1
 800bfe8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d01e      	beq.n	800c02e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 80ac 	beq.w	800c154 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	781a      	ldrb	r2, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c016:	3b01      	subs	r3, #1
 800c018:	b29a      	uxth	r2, r3
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c022:	b29b      	uxth	r3, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	b29a      	uxth	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800c02c:	e092      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	09db      	lsrs	r3, r3, #7
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d05d      	beq.n	800c0f6 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	099b      	lsrs	r3, r3, #6
 800c03e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c042:	2b00      	cmp	r3, #0
 800c044:	d057      	beq.n	800c0f6 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d040      	beq.n	800c0d2 <I2C_Master_ISR_IT+0x1b4>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c054:	2b00      	cmp	r3, #0
 800c056:	d13c      	bne.n	800c0d2 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	b29b      	uxth	r3, r3
 800c060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c064:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	2bff      	cmp	r3, #255	; 0xff
 800c06e:	d90e      	bls.n	800c08e <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	22ff      	movs	r2, #255	; 0xff
 800c074:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	8a79      	ldrh	r1, [r7, #18]
 800c07e:	2300      	movs	r3, #0
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f001 fd4c 	bl	800db24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c08c:	e032      	b.n	800c0f4 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c092:	b29a      	uxth	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0a0:	d00b      	beq.n	800c0ba <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	8a79      	ldrh	r1, [r7, #18]
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	9000      	str	r0, [sp, #0]
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f001 fd36 	bl	800db24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0b8:	e01c      	b.n	800c0f4 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	8a79      	ldrh	r1, [r7, #18]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f001 fd2a 	bl	800db24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0d0:	e010      	b.n	800c0f4 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0e0:	d003      	beq.n	800c0ea <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f000 fdde 	bl	800cca4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c0e8:	e034      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c0ea:	2140      	movs	r1, #64	; 0x40
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f001 f9ef 	bl	800d4d0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c0f2:	e02f      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
 800c0f4:	e02e      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	099b      	lsrs	r3, r3, #6
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d028      	beq.n	800c154 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	099b      	lsrs	r3, r3, #6
 800c106:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d022      	beq.n	800c154 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c112:	b29b      	uxth	r3, r3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d119      	bne.n	800c14c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c126:	d015      	beq.n	800c154 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c130:	d108      	bne.n	800c144 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	685a      	ldr	r2, [r3, #4]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c140:	605a      	str	r2, [r3, #4]
 800c142:	e007      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f000 fdad 	bl	800cca4 <I2C_ITMasterSeqCplt>
 800c14a:	e003      	b.n	800c154 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c14c:	2140      	movs	r1, #64	; 0x40
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f001 f9be 	bl	800d4d0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	095b      	lsrs	r3, r3, #5
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d009      	beq.n	800c174 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	095b      	lsrs	r3, r3, #5
 800c164:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c16c:	6979      	ldr	r1, [r7, #20]
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f000 fe34 	bl	800cddc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b086      	sub	sp, #24
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c196:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d101      	bne.n	800c1aa <I2C_Slave_ISR_IT+0x24>
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	e0ed      	b.n	800c386 <I2C_Slave_ISR_IT+0x200>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	095b      	lsrs	r3, r3, #5
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00a      	beq.n	800c1d4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	095b      	lsrs	r3, r3, #5
 800c1c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c1ca:	6939      	ldr	r1, [r7, #16]
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 fecf 	bl	800cf70 <I2C_ITSlaveCplt>
 800c1d2:	e0d3      	b.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	091b      	lsrs	r3, r3, #4
 800c1d8:	f003 0301 	and.w	r3, r3, #1
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d04d      	beq.n	800c27c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	091b      	lsrs	r3, r3, #4
 800c1e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d047      	beq.n	800c27c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d128      	bne.n	800c248 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b28      	cmp	r3, #40	; 0x28
 800c200:	d108      	bne.n	800c214 <I2C_Slave_ISR_IT+0x8e>
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c208:	d104      	bne.n	800c214 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c20a:	6939      	ldr	r1, [r7, #16]
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f001 f909 	bl	800d424 <I2C_ITListenCplt>
 800c212:	e032      	b.n	800c27a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	2b29      	cmp	r3, #41	; 0x29
 800c21e:	d10e      	bne.n	800c23e <I2C_Slave_ISR_IT+0xb8>
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c226:	d00a      	beq.n	800c23e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2210      	movs	r2, #16
 800c22e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f001 fa64 	bl	800d6fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 fd71 	bl	800cd1e <I2C_ITSlaveSeqCplt>
 800c23c:	e01d      	b.n	800c27a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2210      	movs	r2, #16
 800c244:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c246:	e096      	b.n	800c376 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2210      	movs	r2, #16
 800c24e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c254:	f043 0204 	orr.w	r2, r3, #4
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <I2C_Slave_ISR_IT+0xe6>
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c268:	f040 8085 	bne.w	800c376 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c270:	4619      	mov	r1, r3
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f001 f92c 	bl	800d4d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c278:	e07d      	b.n	800c376 <I2C_Slave_ISR_IT+0x1f0>
 800c27a:	e07c      	b.n	800c376 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	089b      	lsrs	r3, r3, #2
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d030      	beq.n	800c2ea <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	089b      	lsrs	r3, r3, #2
 800c28c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c290:	2b00      	cmp	r3, #0
 800c292:	d02a      	beq.n	800c2ea <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c298:	b29b      	uxth	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d018      	beq.n	800c2d0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d14f      	bne.n	800c37a <I2C_Slave_ISR_IT+0x1f4>
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2e0:	d04b      	beq.n	800c37a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 fd1b 	bl	800cd1e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c2e8:	e047      	b.n	800c37a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	08db      	lsrs	r3, r3, #3
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	08db      	lsrs	r3, r3, #3
 800c2fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d004      	beq.n	800c30c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c302:	6939      	ldr	r1, [r7, #16]
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 fc49 	bl	800cb9c <I2C_ITAddrCplt>
 800c30a:	e037      	b.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	085b      	lsrs	r3, r3, #1
 800c310:	f003 0301 	and.w	r3, r3, #1
 800c314:	2b00      	cmp	r3, #0
 800c316:	d031      	beq.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	085b      	lsrs	r3, r3, #1
 800c31c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c320:	2b00      	cmp	r3, #0
 800c322:	d02b      	beq.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c328:	b29b      	uxth	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d018      	beq.n	800c360 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c348:	b29b      	uxth	r3, r3
 800c34a:	3b01      	subs	r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c356:	3b01      	subs	r3, #1
 800c358:	b29a      	uxth	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c35e:	e00d      	b.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c366:	d002      	beq.n	800c36e <I2C_Slave_ISR_IT+0x1e8>
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 fcd5 	bl	800cd1e <I2C_ITSlaveSeqCplt>
 800c374:	e002      	b.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c376:	bf00      	nop
 800c378:	e000      	b.n	800c37c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c37a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b088      	sub	sp, #32
 800c392:	af02      	add	r7, sp, #8
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <I2C_Master_ISR_DMA+0x1a>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e0e1      	b.n	800c56c <I2C_Master_ISR_DMA+0x1de>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	091b      	lsrs	r3, r3, #4
 800c3b4:	f003 0301 	and.w	r3, r3, #1
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d017      	beq.n	800c3ec <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	091b      	lsrs	r3, r3, #4
 800c3c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d011      	beq.n	800c3ec <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2210      	movs	r2, #16
 800c3ce:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d4:	f043 0204 	orr.w	r2, r3, #4
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c3dc:	2120      	movs	r1, #32
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f001 fbd2 	bl	800db88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f001 f98a 	bl	800d6fe <I2C_Flush_TXDR>
 800c3ea:	e0ba      	b.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	09db      	lsrs	r3, r3, #7
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d072      	beq.n	800c4de <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	099b      	lsrs	r3, r3, #6
 800c3fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c400:	2b00      	cmp	r3, #0
 800c402:	d06c      	beq.n	800c4de <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c412:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c418:	b29b      	uxth	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d04e      	beq.n	800c4bc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	b29b      	uxth	r3, r3
 800c426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c42a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c430:	b29b      	uxth	r3, r3
 800c432:	2bff      	cmp	r3, #255	; 0xff
 800c434:	d906      	bls.n	800c444 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	22ff      	movs	r2, #255	; 0xff
 800c43a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c43c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e010      	b.n	800c466 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c448:	b29a      	uxth	r2, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c452:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c456:	d003      	beq.n	800c460 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	617b      	str	r3, [r7, #20]
 800c45e:	e002      	b.n	800c466 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c464:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	8a79      	ldrh	r1, [r7, #18]
 800c46e:	2300      	movs	r3, #0
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f001 fb55 	bl	800db24 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c47e:	b29a      	uxth	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	b29a      	uxth	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c492:	b2db      	uxtb	r3, r3
 800c494:	2b22      	cmp	r3, #34	; 0x22
 800c496:	d108      	bne.n	800c4aa <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c4a8:	e05b      	b.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c4ba:	e052      	b.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ca:	d003      	beq.n	800c4d4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 fbe9 	bl	800cca4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c4d2:	e046      	b.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4d4:	2140      	movs	r1, #64	; 0x40
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 fffa 	bl	800d4d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c4dc:	e041      	b.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	099b      	lsrs	r3, r3, #6
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d029      	beq.n	800c53e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	099b      	lsrs	r3, r3, #6
 800c4ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d023      	beq.n	800c53e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d119      	bne.n	800c534 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c50a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c50e:	d027      	beq.n	800c560 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c518:	d108      	bne.n	800c52c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c528:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c52a:	e019      	b.n	800c560 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f000 fbb9 	bl	800cca4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c532:	e015      	b.n	800c560 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c534:	2140      	movs	r1, #64	; 0x40
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 ffca 	bl	800d4d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c53c:	e010      	b.n	800c560 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	095b      	lsrs	r3, r3, #5
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00b      	beq.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	095b      	lsrs	r3, r3, #5
 800c54e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c552:	2b00      	cmp	r3, #0
 800c554:	d005      	beq.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c556:	68b9      	ldr	r1, [r7, #8]
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f000 fc3f 	bl	800cddc <I2C_ITMasterCplt>
 800c55e:	e000      	b.n	800c562 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c560:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b088      	sub	sp, #32
 800c578:	af02      	add	r7, sp, #8
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c580:	4b92      	ldr	r3, [pc, #584]	; (800c7cc <I2C_Mem_ISR_DMA+0x258>)
 800c582:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d101      	bne.n	800c592 <I2C_Mem_ISR_DMA+0x1e>
 800c58e:	2302      	movs	r3, #2
 800c590:	e118      	b.n	800c7c4 <I2C_Mem_ISR_DMA+0x250>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	091b      	lsrs	r3, r3, #4
 800c59e:	f003 0301 	and.w	r3, r3, #1
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d017      	beq.n	800c5d6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	091b      	lsrs	r3, r3, #4
 800c5aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d011      	beq.n	800c5d6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2210      	movs	r2, #16
 800c5b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5be:	f043 0204 	orr.w	r2, r3, #4
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c5c6:	2120      	movs	r1, #32
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f001 fadd 	bl	800db88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f001 f895 	bl	800d6fe <I2C_Flush_TXDR>
 800c5d4:	e0f1      	b.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	085b      	lsrs	r3, r3, #1
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00f      	beq.n	800c602 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	085b      	lsrs	r3, r3, #1
 800c5e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d009      	beq.n	800c602 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c5f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5fe:	651a      	str	r2, [r3, #80]	; 0x50
 800c600:	e0db      	b.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	09db      	lsrs	r3, r3, #7
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d060      	beq.n	800c6d0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	099b      	lsrs	r3, r3, #6
 800c612:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c616:	2b00      	cmp	r3, #0
 800c618:	d05a      	beq.n	800c6d0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c61a:	2101      	movs	r1, #1
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f001 fb37 	bl	800dc90 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c622:	2110      	movs	r1, #16
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f001 faaf 	bl	800db88 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c62e:	b29b      	uxth	r3, r3
 800c630:	2b00      	cmp	r3, #0
 800c632:	d048      	beq.n	800c6c6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c638:	b29b      	uxth	r3, r3
 800c63a:	2bff      	cmp	r3, #255	; 0xff
 800c63c:	d910      	bls.n	800c660 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	22ff      	movs	r2, #255	; 0xff
 800c642:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c648:	b299      	uxth	r1, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	2300      	movs	r3, #0
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f001 fa63 	bl	800db24 <I2C_TransferConfig>
 800c65e:	e011      	b.n	800c684 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c664:	b29a      	uxth	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c66e:	b299      	uxth	r1, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c674:	b2da      	uxtb	r2, r3
 800c676:	2300      	movs	r3, #0
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f001 fa50 	bl	800db24 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c688:	b29a      	uxth	r2, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	b29a      	uxth	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b22      	cmp	r3, #34	; 0x22
 800c6a0:	d108      	bne.n	800c6b4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c6b2:	e082      	b.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c6c4:	e079      	b.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c6c6:	2140      	movs	r1, #64	; 0x40
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f000 ff01 	bl	800d4d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c6ce:	e074      	b.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	099b      	lsrs	r3, r3, #6
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d05e      	beq.n	800c79a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	099b      	lsrs	r3, r3, #6
 800c6e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d058      	beq.n	800c79a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f001 fad0 	bl	800dc90 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c6f0:	2110      	movs	r1, #16
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f001 fa48 	bl	800db88 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	2b22      	cmp	r3, #34	; 0x22
 800c702:	d101      	bne.n	800c708 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c704:	4b32      	ldr	r3, [pc, #200]	; (800c7d0 <I2C_Mem_ISR_DMA+0x25c>)
 800c706:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	2bff      	cmp	r3, #255	; 0xff
 800c710:	d910      	bls.n	800c734 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	22ff      	movs	r2, #255	; 0xff
 800c716:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71c:	b299      	uxth	r1, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c722:	b2da      	uxtb	r2, r3
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f001 f9f9 	bl	800db24 <I2C_TransferConfig>
 800c732:	e011      	b.n	800c758 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c738:	b29a      	uxth	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c742:	b299      	uxth	r1, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f001 f9e6 	bl	800db24 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c762:	1ad3      	subs	r3, r2, r3
 800c764:	b29a      	uxth	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b22      	cmp	r3, #34	; 0x22
 800c774:	d108      	bne.n	800c788 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c784:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c786:	e018      	b.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c796:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c798:	e00f      	b.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	095b      	lsrs	r3, r3, #5
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d009      	beq.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	095b      	lsrs	r3, r3, #5
 800c7aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 fb11 	bl	800cddc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	80002000 	.word	0x80002000
 800c7d0:	80002400 	.word	0x80002400

0800c7d4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d101      	bne.n	800c7f8 <I2C_Slave_ISR_DMA+0x24>
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	e1cc      	b.n	800cb92 <I2C_Slave_ISR_DMA+0x3be>
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	095b      	lsrs	r3, r3, #5
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	095b      	lsrs	r3, r3, #5
 800c810:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c814:	2b00      	cmp	r3, #0
 800c816:	d004      	beq.n	800c822 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 fba8 	bl	800cf70 <I2C_ITSlaveCplt>
 800c820:	e1b2      	b.n	800cb88 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	091b      	lsrs	r3, r3, #4
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 819c 	beq.w	800cb68 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	091b      	lsrs	r3, r3, #4
 800c834:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 8195 	beq.w	800cb68 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	0b9b      	lsrs	r3, r3, #14
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b00      	cmp	r3, #0
 800c848:	d106      	bne.n	800c858 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	0bdb      	lsrs	r3, r3, #15
 800c84e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 8181 	beq.w	800cb5a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d07c      	beq.n	800c95a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	0bdb      	lsrs	r3, r3, #15
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d076      	beq.n	800c95a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a75      	ldr	r2, [pc, #468]	; (800ca48 <I2C_Slave_ISR_DMA+0x274>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d059      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a73      	ldr	r2, [pc, #460]	; (800ca4c <I2C_Slave_ISR_DMA+0x278>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d053      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a71      	ldr	r2, [pc, #452]	; (800ca50 <I2C_Slave_ISR_DMA+0x27c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d04d      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a6f      	ldr	r2, [pc, #444]	; (800ca54 <I2C_Slave_ISR_DMA+0x280>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d047      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a6d      	ldr	r2, [pc, #436]	; (800ca58 <I2C_Slave_ISR_DMA+0x284>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d041      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a6b      	ldr	r2, [pc, #428]	; (800ca5c <I2C_Slave_ISR_DMA+0x288>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d03b      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a69      	ldr	r2, [pc, #420]	; (800ca60 <I2C_Slave_ISR_DMA+0x28c>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d035      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a67      	ldr	r2, [pc, #412]	; (800ca64 <I2C_Slave_ISR_DMA+0x290>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d02f      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a65      	ldr	r2, [pc, #404]	; (800ca68 <I2C_Slave_ISR_DMA+0x294>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d029      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a63      	ldr	r2, [pc, #396]	; (800ca6c <I2C_Slave_ISR_DMA+0x298>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d023      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a61      	ldr	r2, [pc, #388]	; (800ca70 <I2C_Slave_ISR_DMA+0x29c>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d01d      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a5f      	ldr	r2, [pc, #380]	; (800ca74 <I2C_Slave_ISR_DMA+0x2a0>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d017      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a5d      	ldr	r2, [pc, #372]	; (800ca78 <I2C_Slave_ISR_DMA+0x2a4>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d011      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a5b      	ldr	r2, [pc, #364]	; (800ca7c <I2C_Slave_ISR_DMA+0x2a8>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d00b      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a59      	ldr	r2, [pc, #356]	; (800ca80 <I2C_Slave_ISR_DMA+0x2ac>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d005      	beq.n	800c92c <I2C_Slave_ISR_DMA+0x158>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a57      	ldr	r2, [pc, #348]	; (800ca84 <I2C_Slave_ISR_DMA+0x2b0>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d109      	bne.n	800c940 <I2C_Slave_ISR_DMA+0x16c>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bf0c      	ite	eq
 800c938:	2301      	moveq	r3, #1
 800c93a:	2300      	movne	r3, #0
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	e008      	b.n	800c952 <I2C_Slave_ISR_DMA+0x17e>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	bf0c      	ite	eq
 800c94c:	2301      	moveq	r3, #1
 800c94e:	2300      	movne	r3, #0
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c956:	2301      	movs	r3, #1
 800c958:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 809f 	beq.w	800caa2 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	0b9b      	lsrs	r3, r3, #14
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f000 8098 	beq.w	800caa2 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a33      	ldr	r2, [pc, #204]	; (800ca48 <I2C_Slave_ISR_DMA+0x274>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d059      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a31      	ldr	r2, [pc, #196]	; (800ca4c <I2C_Slave_ISR_DMA+0x278>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d053      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a2f      	ldr	r2, [pc, #188]	; (800ca50 <I2C_Slave_ISR_DMA+0x27c>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d04d      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a2d      	ldr	r2, [pc, #180]	; (800ca54 <I2C_Slave_ISR_DMA+0x280>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d047      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a2b      	ldr	r2, [pc, #172]	; (800ca58 <I2C_Slave_ISR_DMA+0x284>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d041      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a29      	ldr	r2, [pc, #164]	; (800ca5c <I2C_Slave_ISR_DMA+0x288>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d03b      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a27      	ldr	r2, [pc, #156]	; (800ca60 <I2C_Slave_ISR_DMA+0x28c>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d035      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a25      	ldr	r2, [pc, #148]	; (800ca64 <I2C_Slave_ISR_DMA+0x290>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d02f      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a23      	ldr	r2, [pc, #140]	; (800ca68 <I2C_Slave_ISR_DMA+0x294>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d029      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a21      	ldr	r2, [pc, #132]	; (800ca6c <I2C_Slave_ISR_DMA+0x298>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d023      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a1f      	ldr	r2, [pc, #124]	; (800ca70 <I2C_Slave_ISR_DMA+0x29c>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d01d      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a1d      	ldr	r2, [pc, #116]	; (800ca74 <I2C_Slave_ISR_DMA+0x2a0>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d017      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a1b      	ldr	r2, [pc, #108]	; (800ca78 <I2C_Slave_ISR_DMA+0x2a4>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d011      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a19      	ldr	r2, [pc, #100]	; (800ca7c <I2C_Slave_ISR_DMA+0x2a8>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d00b      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a17      	ldr	r2, [pc, #92]	; (800ca80 <I2C_Slave_ISR_DMA+0x2ac>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d005      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0x25e>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a15      	ldr	r2, [pc, #84]	; (800ca84 <I2C_Slave_ISR_DMA+0x2b0>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d12a      	bne.n	800ca88 <I2C_Slave_ISR_DMA+0x2b4>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	bf0c      	ite	eq
 800ca3e:	2301      	moveq	r3, #1
 800ca40:	2300      	movne	r3, #0
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	e029      	b.n	800ca9a <I2C_Slave_ISR_DMA+0x2c6>
 800ca46:	bf00      	nop
 800ca48:	40020010 	.word	0x40020010
 800ca4c:	40020028 	.word	0x40020028
 800ca50:	40020040 	.word	0x40020040
 800ca54:	40020058 	.word	0x40020058
 800ca58:	40020070 	.word	0x40020070
 800ca5c:	40020088 	.word	0x40020088
 800ca60:	400200a0 	.word	0x400200a0
 800ca64:	400200b8 	.word	0x400200b8
 800ca68:	40020410 	.word	0x40020410
 800ca6c:	40020428 	.word	0x40020428
 800ca70:	40020440 	.word	0x40020440
 800ca74:	40020458 	.word	0x40020458
 800ca78:	40020470 	.word	0x40020470
 800ca7c:	40020488 	.word	0x40020488
 800ca80:	400204a0 	.word	0x400204a0
 800ca84:	400204b8 	.word	0x400204b8
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	bf0c      	ite	eq
 800ca94:	2301      	moveq	r3, #1
 800ca96:	2300      	movne	r3, #0
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d128      	bne.n	800cafa <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	2b28      	cmp	r3, #40	; 0x28
 800cab2:	d108      	bne.n	800cac6 <I2C_Slave_ISR_DMA+0x2f2>
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800caba:	d104      	bne.n	800cac6 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800cabc:	68b9      	ldr	r1, [r7, #8]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f000 fcb0 	bl	800d424 <I2C_ITListenCplt>
 800cac4:	e048      	b.n	800cb58 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	2b29      	cmp	r3, #41	; 0x29
 800cad0:	d10e      	bne.n	800caf0 <I2C_Slave_ISR_DMA+0x31c>
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cad8:	d00a      	beq.n	800caf0 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2210      	movs	r2, #16
 800cae0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f000 fe0b 	bl	800d6fe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f918 	bl	800cd1e <I2C_ITSlaveSeqCplt>
 800caee:	e033      	b.n	800cb58 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2210      	movs	r2, #16
 800caf6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800caf8:	e034      	b.n	800cb64 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2210      	movs	r2, #16
 800cb00:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb06:	f043 0204 	orr.w	r2, r3, #4
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb14:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <I2C_Slave_ISR_DMA+0x350>
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb22:	d11f      	bne.n	800cb64 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	2b21      	cmp	r3, #33	; 0x21
 800cb28:	d002      	beq.n	800cb30 <I2C_Slave_ISR_DMA+0x35c>
 800cb2a:	7dfb      	ldrb	r3, [r7, #23]
 800cb2c:	2b29      	cmp	r3, #41	; 0x29
 800cb2e:	d103      	bne.n	800cb38 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2221      	movs	r2, #33	; 0x21
 800cb34:	631a      	str	r2, [r3, #48]	; 0x30
 800cb36:	e008      	b.n	800cb4a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	2b22      	cmp	r3, #34	; 0x22
 800cb3c:	d002      	beq.n	800cb44 <I2C_Slave_ISR_DMA+0x370>
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	2b2a      	cmp	r3, #42	; 0x2a
 800cb42:	d102      	bne.n	800cb4a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2222      	movs	r2, #34	; 0x22
 800cb48:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb4e:	4619      	mov	r1, r3
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f000 fcbd 	bl	800d4d0 <I2C_ITError>
      if (treatdmanack == 1U)
 800cb56:	e005      	b.n	800cb64 <I2C_Slave_ISR_DMA+0x390>
 800cb58:	e004      	b.n	800cb64 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2210      	movs	r2, #16
 800cb60:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb62:	e011      	b.n	800cb88 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800cb64:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb66:	e00f      	b.n	800cb88 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	08db      	lsrs	r3, r3, #3
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d009      	beq.n	800cb88 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	08db      	lsrs	r3, r3, #3
 800cb78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d003      	beq.n	800cb88 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f000 f80a 	bl	800cb9c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3720      	adds	r7, #32
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop

0800cb9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cbb2:	2b28      	cmp	r3, #40	; 0x28
 800cbb4:	d16a      	bne.n	800cc8c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	699b      	ldr	r3, [r3, #24]
 800cbbc:	0c1b      	lsrs	r3, r3, #16
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	699b      	ldr	r3, [r3, #24]
 800cbcc:	0c1b      	lsrs	r3, r3, #16
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cbd4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbe2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cbf0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d138      	bne.n	800cc6c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cbfa:	897b      	ldrh	r3, [r7, #10]
 800cbfc:	09db      	lsrs	r3, r3, #7
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	89bb      	ldrh	r3, [r7, #12]
 800cc02:	4053      	eors	r3, r2
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	f003 0306 	and.w	r3, r3, #6
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d11c      	bne.n	800cc48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cc0e:	897b      	ldrh	r3, [r7, #10]
 800cc10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d13b      	bne.n	800cc9c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2208      	movs	r2, #8
 800cc30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc3a:	89ba      	ldrh	r2, [r7, #12]
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7ff f91e 	bl	800be82 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cc46:	e029      	b.n	800cc9c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800cc48:	893b      	ldrh	r3, [r7, #8]
 800cc4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f001 f81d 	bl	800dc90 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc5e:	89ba      	ldrh	r2, [r7, #12]
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff f90c 	bl	800be82 <HAL_I2C_AddrCallback>
}
 800cc6a:	e017      	b.n	800cc9c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 f80d 	bl	800dc90 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc7e:	89ba      	ldrh	r2, [r7, #12]
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff f8fc 	bl	800be82 <HAL_I2C_AddrCallback>
}
 800cc8a:	e007      	b.n	800cc9c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2208      	movs	r2, #8
 800cc92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cc9c:	bf00      	nop
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b21      	cmp	r3, #33	; 0x21
 800ccbe:	d115      	bne.n	800ccec <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2211      	movs	r2, #17
 800cccc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 ffda 	bl	800dc90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff f8a4 	bl	800be32 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ccea:	e014      	b.n	800cd16 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2212      	movs	r2, #18
 800ccf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cd00:	2102      	movs	r1, #2
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 ffc4 	bl	800dc90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff f898 	bl	800be46 <HAL_I2C_MasterRxCpltCallback>
}
 800cd16:	bf00      	nop
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	0b9b      	lsrs	r3, r3, #14
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d008      	beq.n	800cd54 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	e00d      	b.n	800cd70 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	0bdb      	lsrs	r3, r3, #15
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d007      	beq.n	800cd70 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd6e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b29      	cmp	r3, #41	; 0x29
 800cd7a:	d112      	bne.n	800cda2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2228      	movs	r2, #40	; 0x28
 800cd80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2221      	movs	r2, #33	; 0x21
 800cd88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd8a:	2101      	movs	r1, #1
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 ff7f 	bl	800dc90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff f85d 	bl	800be5a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cda0:	e017      	b.n	800cdd2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b2a      	cmp	r3, #42	; 0x2a
 800cdac:	d111      	bne.n	800cdd2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2228      	movs	r2, #40	; 0x28
 800cdb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2222      	movs	r2, #34	; 0x22
 800cdba:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cdbc:	2102      	movs	r1, #2
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 ff66 	bl	800dc90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff f84e 	bl	800be6e <HAL_I2C_SlaveRxCpltCallback>
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
	...

0800cddc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2220      	movs	r2, #32
 800cdf0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b21      	cmp	r3, #33	; 0x21
 800cdfc:	d107      	bne.n	800ce0e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cdfe:	2101      	movs	r1, #1
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 ff45 	bl	800dc90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2211      	movs	r2, #17
 800ce0a:	631a      	str	r2, [r3, #48]	; 0x30
 800ce0c:	e00c      	b.n	800ce28 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b22      	cmp	r3, #34	; 0x22
 800ce18:	d106      	bne.n	800ce28 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ce1a:	2102      	movs	r1, #2
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 ff37 	bl	800dc90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2212      	movs	r2, #18
 800ce26:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6859      	ldr	r1, [r3, #4]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	4b4d      	ldr	r3, [pc, #308]	; (800cf68 <I2C_ITMasterCplt+0x18c>)
 800ce34:	400b      	ands	r3, r1
 800ce36:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a4a      	ldr	r2, [pc, #296]	; (800cf6c <I2C_ITMasterCplt+0x190>)
 800ce42:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	091b      	lsrs	r3, r3, #4
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d009      	beq.n	800ce64 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2210      	movs	r2, #16
 800ce56:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5c:	f043 0204 	orr.w	r2, r3, #4
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b60      	cmp	r3, #96	; 0x60
 800ce6e:	d10b      	bne.n	800ce88 <I2C_ITMasterCplt+0xac>
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	089b      	lsrs	r3, r3, #2
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d005      	beq.n	800ce88 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ce86:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fc38 	bl	800d6fe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce92:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b60      	cmp	r3, #96	; 0x60
 800ce9e:	d002      	beq.n	800cea6 <I2C_ITMasterCplt+0xca>
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d006      	beq.n	800ceb4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fb0f 	bl	800d4d0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ceb2:	e054      	b.n	800cf5e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b21      	cmp	r3, #33	; 0x21
 800cebe:	d124      	bne.n	800cf0a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2220      	movs	r2, #32
 800cec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b40      	cmp	r3, #64	; 0x40
 800ced8:	d10b      	bne.n	800cef2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7fe ffe1 	bl	800beb2 <HAL_I2C_MemTxCpltCallback>
}
 800cef0:	e035      	b.n	800cf5e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7fe ff95 	bl	800be32 <HAL_I2C_MasterTxCpltCallback>
}
 800cf08:	e029      	b.n	800cf5e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b22      	cmp	r3, #34	; 0x22
 800cf14:	d123      	bne.n	800cf5e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2220      	movs	r2, #32
 800cf1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b40      	cmp	r3, #64	; 0x40
 800cf2e:	d10b      	bne.n	800cf48 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7fe ffc0 	bl	800bec6 <HAL_I2C_MemRxCpltCallback>
}
 800cf46:	e00a      	b.n	800cf5e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7fe ff74 	bl	800be46 <HAL_I2C_MasterRxCpltCallback>
}
 800cf5e:	bf00      	nop
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	fe00e800 	.word	0xfe00e800
 800cf6c:	ffff0000 	.word	0xffff0000

0800cf70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf92:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2220      	movs	r2, #32
 800cf9a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cf9c:	7afb      	ldrb	r3, [r7, #11]
 800cf9e:	2b21      	cmp	r3, #33	; 0x21
 800cfa0:	d002      	beq.n	800cfa8 <I2C_ITSlaveCplt+0x38>
 800cfa2:	7afb      	ldrb	r3, [r7, #11]
 800cfa4:	2b29      	cmp	r3, #41	; 0x29
 800cfa6:	d108      	bne.n	800cfba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cfa8:	f248 0101 	movw	r1, #32769	; 0x8001
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 fe6f 	bl	800dc90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2221      	movs	r2, #33	; 0x21
 800cfb6:	631a      	str	r2, [r3, #48]	; 0x30
 800cfb8:	e019      	b.n	800cfee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cfba:	7afb      	ldrb	r3, [r7, #11]
 800cfbc:	2b22      	cmp	r3, #34	; 0x22
 800cfbe:	d002      	beq.n	800cfc6 <I2C_ITSlaveCplt+0x56>
 800cfc0:	7afb      	ldrb	r3, [r7, #11]
 800cfc2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfc4:	d108      	bne.n	800cfd8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cfc6:	f248 0102 	movw	r1, #32770	; 0x8002
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fe60 	bl	800dc90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2222      	movs	r2, #34	; 0x22
 800cfd4:	631a      	str	r2, [r3, #48]	; 0x30
 800cfd6:	e00a      	b.n	800cfee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cfd8:	7afb      	ldrb	r3, [r7, #11]
 800cfda:	2b28      	cmp	r3, #40	; 0x28
 800cfdc:	d107      	bne.n	800cfee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cfde:	f248 0103 	movw	r1, #32771	; 0x8003
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fe54 	bl	800dc90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cffc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	6859      	ldr	r1, [r3, #4]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	4b80      	ldr	r3, [pc, #512]	; (800d20c <I2C_ITSlaveCplt+0x29c>)
 800d00a:	400b      	ands	r3, r1
 800d00c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fb75 	bl	800d6fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	0b9b      	lsrs	r3, r3, #14
 800d018:	f003 0301 	and.w	r3, r3, #1
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d07a      	beq.n	800d116 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d02e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 8112 	beq.w	800d25e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a73      	ldr	r2, [pc, #460]	; (800d210 <I2C_ITSlaveCplt+0x2a0>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d059      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a71      	ldr	r2, [pc, #452]	; (800d214 <I2C_ITSlaveCplt+0x2a4>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d053      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a6f      	ldr	r2, [pc, #444]	; (800d218 <I2C_ITSlaveCplt+0x2a8>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d04d      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a6d      	ldr	r2, [pc, #436]	; (800d21c <I2C_ITSlaveCplt+0x2ac>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d047      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a6b      	ldr	r2, [pc, #428]	; (800d220 <I2C_ITSlaveCplt+0x2b0>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d041      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a69      	ldr	r2, [pc, #420]	; (800d224 <I2C_ITSlaveCplt+0x2b4>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d03b      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a67      	ldr	r2, [pc, #412]	; (800d228 <I2C_ITSlaveCplt+0x2b8>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d035      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a65      	ldr	r2, [pc, #404]	; (800d22c <I2C_ITSlaveCplt+0x2bc>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d02f      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a63      	ldr	r2, [pc, #396]	; (800d230 <I2C_ITSlaveCplt+0x2c0>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d029      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a61      	ldr	r2, [pc, #388]	; (800d234 <I2C_ITSlaveCplt+0x2c4>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d023      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a5f      	ldr	r2, [pc, #380]	; (800d238 <I2C_ITSlaveCplt+0x2c8>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d01d      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a5d      	ldr	r2, [pc, #372]	; (800d23c <I2C_ITSlaveCplt+0x2cc>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d017      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a5b      	ldr	r2, [pc, #364]	; (800d240 <I2C_ITSlaveCplt+0x2d0>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d011      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a59      	ldr	r2, [pc, #356]	; (800d244 <I2C_ITSlaveCplt+0x2d4>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d00b      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a57      	ldr	r2, [pc, #348]	; (800d248 <I2C_ITSlaveCplt+0x2d8>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d005      	beq.n	800d0fa <I2C_ITSlaveCplt+0x18a>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a55      	ldr	r2, [pc, #340]	; (800d24c <I2C_ITSlaveCplt+0x2dc>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d105      	bne.n	800d106 <I2C_ITSlaveCplt+0x196>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	b29b      	uxth	r3, r3
 800d104:	e004      	b.n	800d110 <I2C_ITSlaveCplt+0x1a0>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d114:	e0a3      	b.n	800d25e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	0bdb      	lsrs	r3, r3, #15
 800d11a:	f003 0301 	and.w	r3, r3, #1
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f000 809d 	beq.w	800d25e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d132:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f000 8090 	beq.w	800d25e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a32      	ldr	r2, [pc, #200]	; (800d210 <I2C_ITSlaveCplt+0x2a0>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d059      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a30      	ldr	r2, [pc, #192]	; (800d214 <I2C_ITSlaveCplt+0x2a4>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d053      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a2e      	ldr	r2, [pc, #184]	; (800d218 <I2C_ITSlaveCplt+0x2a8>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d04d      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a2c      	ldr	r2, [pc, #176]	; (800d21c <I2C_ITSlaveCplt+0x2ac>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d047      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a2a      	ldr	r2, [pc, #168]	; (800d220 <I2C_ITSlaveCplt+0x2b0>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d041      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a28      	ldr	r2, [pc, #160]	; (800d224 <I2C_ITSlaveCplt+0x2b4>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d03b      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a26      	ldr	r2, [pc, #152]	; (800d228 <I2C_ITSlaveCplt+0x2b8>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d035      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a24      	ldr	r2, [pc, #144]	; (800d22c <I2C_ITSlaveCplt+0x2bc>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d02f      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a22      	ldr	r2, [pc, #136]	; (800d230 <I2C_ITSlaveCplt+0x2c0>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d029      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a20      	ldr	r2, [pc, #128]	; (800d234 <I2C_ITSlaveCplt+0x2c4>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d023      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a1e      	ldr	r2, [pc, #120]	; (800d238 <I2C_ITSlaveCplt+0x2c8>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d01d      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a1c      	ldr	r2, [pc, #112]	; (800d23c <I2C_ITSlaveCplt+0x2cc>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d017      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a1a      	ldr	r2, [pc, #104]	; (800d240 <I2C_ITSlaveCplt+0x2d0>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d011      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a18      	ldr	r2, [pc, #96]	; (800d244 <I2C_ITSlaveCplt+0x2d4>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d00b      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a16      	ldr	r2, [pc, #88]	; (800d248 <I2C_ITSlaveCplt+0x2d8>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d005      	beq.n	800d1fe <I2C_ITSlaveCplt+0x28e>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a14      	ldr	r2, [pc, #80]	; (800d24c <I2C_ITSlaveCplt+0x2dc>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d128      	bne.n	800d250 <I2C_ITSlaveCplt+0x2e0>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	b29b      	uxth	r3, r3
 800d208:	e027      	b.n	800d25a <I2C_ITSlaveCplt+0x2ea>
 800d20a:	bf00      	nop
 800d20c:	fe00e800 	.word	0xfe00e800
 800d210:	40020010 	.word	0x40020010
 800d214:	40020028 	.word	0x40020028
 800d218:	40020040 	.word	0x40020040
 800d21c:	40020058 	.word	0x40020058
 800d220:	40020070 	.word	0x40020070
 800d224:	40020088 	.word	0x40020088
 800d228:	400200a0 	.word	0x400200a0
 800d22c:	400200b8 	.word	0x400200b8
 800d230:	40020410 	.word	0x40020410
 800d234:	40020428 	.word	0x40020428
 800d238:	40020440 	.word	0x40020440
 800d23c:	40020458 	.word	0x40020458
 800d240:	40020470 	.word	0x40020470
 800d244:	40020488 	.word	0x40020488
 800d248:	400204a0 	.word	0x400204a0
 800d24c:	400204b8 	.word	0x400204b8
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	b29b      	uxth	r3, r3
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	089b      	lsrs	r3, r3, #2
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	d020      	beq.n	800d2ac <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f023 0304 	bic.w	r3, r3, #4
 800d270:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27c:	b2d2      	uxtb	r2, r2
 800d27e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00c      	beq.n	800d2ac <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d296:	3b01      	subs	r3, #1
 800d298:	b29a      	uxth	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d005      	beq.n	800d2c2 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ba:	f043 0204 	orr.w	r2, r3, #4
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	091b      	lsrs	r3, r3, #4
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d04a      	beq.n	800d364 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	091b      	lsrs	r3, r3, #4
 800d2d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d044      	beq.n	800d364 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d128      	bne.n	800d336 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b28      	cmp	r3, #40	; 0x28
 800d2ee:	d108      	bne.n	800d302 <I2C_ITSlaveCplt+0x392>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2f6:	d104      	bne.n	800d302 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d2f8:	6979      	ldr	r1, [r7, #20]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f892 	bl	800d424 <I2C_ITListenCplt>
 800d300:	e030      	b.n	800d364 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b29      	cmp	r3, #41	; 0x29
 800d30c:	d10e      	bne.n	800d32c <I2C_ITSlaveCplt+0x3bc>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d314:	d00a      	beq.n	800d32c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2210      	movs	r2, #16
 800d31c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f9ed 	bl	800d6fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff fcfa 	bl	800cd1e <I2C_ITSlaveSeqCplt>
 800d32a:	e01b      	b.n	800d364 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2210      	movs	r2, #16
 800d332:	61da      	str	r2, [r3, #28]
 800d334:	e016      	b.n	800d364 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2210      	movs	r2, #16
 800d33c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d342:	f043 0204 	orr.w	r2, r3, #4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d003      	beq.n	800d358 <I2C_ITSlaveCplt+0x3e8>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d356:	d105      	bne.n	800d364 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f8b6 	bl	800d4d0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d376:	2b00      	cmp	r3, #0
 800d378:	d010      	beq.n	800d39c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f8a5 	bl	800d4d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	2b28      	cmp	r3, #40	; 0x28
 800d390:	d141      	bne.n	800d416 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d392:	6979      	ldr	r1, [r7, #20]
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f845 	bl	800d424 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d39a:	e03c      	b.n	800d416 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3a4:	d014      	beq.n	800d3d0 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7ff fcb9 	bl	800cd1e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a1c      	ldr	r2, [pc, #112]	; (800d420 <I2C_ITSlaveCplt+0x4b0>)
 800d3b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2220      	movs	r2, #32
 800d3b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7fe fd68 	bl	800be9e <HAL_I2C_ListenCpltCallback>
}
 800d3ce:	e022      	b.n	800d416 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b22      	cmp	r3, #34	; 0x22
 800d3da:	d10e      	bne.n	800d3fa <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2220      	movs	r2, #32
 800d3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7fe fd3b 	bl	800be6e <HAL_I2C_SlaveRxCpltCallback>
}
 800d3f8:	e00d      	b.n	800d416 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2220      	movs	r2, #32
 800d3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f7fe fd22 	bl	800be5a <HAL_I2C_SlaveTxCpltCallback>
}
 800d416:	bf00      	nop
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	ffff0000 	.word	0xffff0000

0800d424 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a26      	ldr	r2, [pc, #152]	; (800d4cc <I2C_ITListenCplt+0xa8>)
 800d432:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2220      	movs	r2, #32
 800d43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	089b      	lsrs	r3, r3, #2
 800d454:	f003 0301 	and.w	r3, r3, #1
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d022      	beq.n	800d4a2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d466:	b2d2      	uxtb	r2, r2
 800d468:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d012      	beq.n	800d4a2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d480:	3b01      	subs	r3, #1
 800d482:	b29a      	uxth	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	b29a      	uxth	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d49a:	f043 0204 	orr.w	r2, r3, #4
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d4a2:	f248 0103 	movw	r1, #32771	; 0x8003
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fbf2 	bl	800dc90 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2210      	movs	r2, #16
 800d4b2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7fe fcee 	bl	800be9e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	ffff0000 	.word	0xffff0000

0800d4d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4e0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a6d      	ldr	r2, [pc, #436]	; (800d6a4 <I2C_ITError+0x1d4>)
 800d4ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	2b28      	cmp	r3, #40	; 0x28
 800d506:	d005      	beq.n	800d514 <I2C_ITError+0x44>
 800d508:	7bfb      	ldrb	r3, [r7, #15]
 800d50a:	2b29      	cmp	r3, #41	; 0x29
 800d50c:	d002      	beq.n	800d514 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	2b2a      	cmp	r3, #42	; 0x2a
 800d512:	d10b      	bne.n	800d52c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d514:	2103      	movs	r1, #3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 fbba 	bl	800dc90 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2228      	movs	r2, #40	; 0x28
 800d520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a60      	ldr	r2, [pc, #384]	; (800d6a8 <I2C_ITError+0x1d8>)
 800d528:	635a      	str	r2, [r3, #52]	; 0x34
 800d52a:	e030      	b.n	800d58e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d52c:	f248 0103 	movw	r1, #32771	; 0x8003
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fbad 	bl	800dc90 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f8e1 	bl	800d6fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b60      	cmp	r3, #96	; 0x60
 800d546:	d01f      	beq.n	800d588 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2220      	movs	r2, #32
 800d54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	699b      	ldr	r3, [r3, #24]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b20      	cmp	r3, #32
 800d55c:	d114      	bne.n	800d588 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	f003 0310 	and.w	r3, r3, #16
 800d568:	2b10      	cmp	r3, #16
 800d56a:	d109      	bne.n	800d580 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2210      	movs	r2, #16
 800d572:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d578:	f043 0204 	orr.w	r2, r3, #4
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2220      	movs	r2, #32
 800d586:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d592:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d039      	beq.n	800d610 <I2C_ITError+0x140>
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b11      	cmp	r3, #17
 800d5a0:	d002      	beq.n	800d5a8 <I2C_ITError+0xd8>
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2b21      	cmp	r3, #33	; 0x21
 800d5a6:	d133      	bne.n	800d610 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5b6:	d107      	bne.n	800d5c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fd f857 	bl	800a680 <HAL_DMA_GetState>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d017      	beq.n	800d608 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	4a33      	ldr	r2, [pc, #204]	; (800d6ac <I2C_ITError+0x1dc>)
 800d5de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fb fed7 	bl	80093a0 <HAL_DMA_Abort_IT>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d04d      	beq.n	800d694 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d602:	4610      	mov	r0, r2
 800d604:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d606:	e045      	b.n	800d694 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f851 	bl	800d6b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d60e:	e041      	b.n	800d694 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d039      	beq.n	800d68c <I2C_ITError+0x1bc>
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2b12      	cmp	r3, #18
 800d61c:	d002      	beq.n	800d624 <I2C_ITError+0x154>
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	2b22      	cmp	r3, #34	; 0x22
 800d622:	d133      	bne.n	800d68c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d632:	d107      	bne.n	800d644 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d642:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fd f819 	bl	800a680 <HAL_DMA_GetState>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b01      	cmp	r3, #1
 800d652:	d017      	beq.n	800d684 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d658:	4a14      	ldr	r2, [pc, #80]	; (800d6ac <I2C_ITError+0x1dc>)
 800d65a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fb fe99 	bl	80093a0 <HAL_DMA_Abort_IT>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d011      	beq.n	800d698 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d67e:	4610      	mov	r0, r2
 800d680:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d682:	e009      	b.n	800d698 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f813 	bl	800d6b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d68a:	e005      	b.n	800d698 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f80f 	bl	800d6b0 <I2C_TreatErrorCallback>
  }
}
 800d692:	e002      	b.n	800d69a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d694:	bf00      	nop
 800d696:	e000      	b.n	800d69a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d698:	bf00      	nop
}
 800d69a:	bf00      	nop
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	ffff0000 	.word	0xffff0000
 800d6a8:	0800c187 	.word	0x0800c187
 800d6ac:	0800dae9 	.word	0x0800dae9

0800d6b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b60      	cmp	r3, #96	; 0x60
 800d6c2:	d10e      	bne.n	800d6e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2220      	movs	r2, #32
 800d6c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7fe fc07 	bl	800beee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d6e0:	e009      	b.n	800d6f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7fe fbf2 	bl	800beda <HAL_I2C_ErrorCallback>
}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b083      	sub	sp, #12
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	699b      	ldr	r3, [r3, #24]
 800d70c:	f003 0302 	and.w	r3, r3, #2
 800d710:	2b02      	cmp	r3, #2
 800d712:	d103      	bne.n	800d71c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2200      	movs	r2, #0
 800d71a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	2b01      	cmp	r3, #1
 800d728:	d007      	beq.n	800d73a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	699a      	ldr	r2, [r3, #24]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f042 0201 	orr.w	r2, r2, #1
 800d738:	619a      	str	r2, [r3, #24]
  }
}
 800d73a:	bf00      	nop
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d752:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d762:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d768:	b29b      	uxth	r3, r3
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d104      	bne.n	800d778 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d76e:	2120      	movs	r1, #32
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f000 fa09 	bl	800db88 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d776:	e02d      	b.n	800d7d4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d780:	441a      	add	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	2bff      	cmp	r3, #255	; 0xff
 800d78e:	d903      	bls.n	800d798 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	22ff      	movs	r2, #255	; 0xff
 800d794:	851a      	strh	r2, [r3, #40]	; 0x28
 800d796:	e004      	b.n	800d7a2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3328      	adds	r3, #40	; 0x28
 800d7b2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d7b8:	f7fb f86a 	bl	8008890 <HAL_DMA_Start_IT>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d004      	beq.n	800d7cc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d7c2:	2110      	movs	r1, #16
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f7ff fe83 	bl	800d4d0 <I2C_ITError>
}
 800d7ca:	e003      	b.n	800d7d4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d7cc:	2140      	movs	r1, #64	; 0x40
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f000 f9da 	bl	800db88 <I2C_Enable_IRQ>
}
 800d7d4:	bf00      	nop
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7f8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d104      	bne.n	800d80e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d804:	2120      	movs	r1, #32
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 f9be 	bl	800db88 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d80c:	e02d      	b.n	800d86a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d816:	441a      	add	r2, r3
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d820:	b29b      	uxth	r3, r3
 800d822:	2bff      	cmp	r3, #255	; 0xff
 800d824:	d903      	bls.n	800d82e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	22ff      	movs	r2, #255	; 0xff
 800d82a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d82c:	e004      	b.n	800d838 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d832:	b29a      	uxth	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3324      	adds	r3, #36	; 0x24
 800d842:	4619      	mov	r1, r3
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d848:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d84e:	f7fb f81f 	bl	8008890 <HAL_DMA_Start_IT>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d004      	beq.n	800d862 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d858:	2110      	movs	r1, #16
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7ff fe38 	bl	800d4d0 <I2C_ITError>
}
 800d860:	e003      	b.n	800d86a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d862:	2140      	movs	r1, #64	; 0x40
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f000 f98f 	bl	800db88 <I2C_Enable_IRQ>
}
 800d86a:	bf00      	nop
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d87c:	2300      	movs	r3, #0
 800d87e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d884:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d076      	beq.n	800d97c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a71      	ldr	r2, [pc, #452]	; (800da5c <I2C_DMAError+0x1e8>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d059      	beq.n	800d94e <I2C_DMAError+0xda>
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a6f      	ldr	r2, [pc, #444]	; (800da60 <I2C_DMAError+0x1ec>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d053      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a6d      	ldr	r2, [pc, #436]	; (800da64 <I2C_DMAError+0x1f0>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d04d      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a6b      	ldr	r2, [pc, #428]	; (800da68 <I2C_DMAError+0x1f4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d047      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a69      	ldr	r2, [pc, #420]	; (800da6c <I2C_DMAError+0x1f8>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d041      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a67      	ldr	r2, [pc, #412]	; (800da70 <I2C_DMAError+0x1fc>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d03b      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a65      	ldr	r2, [pc, #404]	; (800da74 <I2C_DMAError+0x200>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d035      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a63      	ldr	r2, [pc, #396]	; (800da78 <I2C_DMAError+0x204>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d02f      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a61      	ldr	r2, [pc, #388]	; (800da7c <I2C_DMAError+0x208>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d029      	beq.n	800d94e <I2C_DMAError+0xda>
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a5f      	ldr	r2, [pc, #380]	; (800da80 <I2C_DMAError+0x20c>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d023      	beq.n	800d94e <I2C_DMAError+0xda>
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a5d      	ldr	r2, [pc, #372]	; (800da84 <I2C_DMAError+0x210>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d01d      	beq.n	800d94e <I2C_DMAError+0xda>
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a5b      	ldr	r2, [pc, #364]	; (800da88 <I2C_DMAError+0x214>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d017      	beq.n	800d94e <I2C_DMAError+0xda>
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a59      	ldr	r2, [pc, #356]	; (800da8c <I2C_DMAError+0x218>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d011      	beq.n	800d94e <I2C_DMAError+0xda>
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a57      	ldr	r2, [pc, #348]	; (800da90 <I2C_DMAError+0x21c>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d00b      	beq.n	800d94e <I2C_DMAError+0xda>
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a55      	ldr	r2, [pc, #340]	; (800da94 <I2C_DMAError+0x220>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d005      	beq.n	800d94e <I2C_DMAError+0xda>
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a53      	ldr	r2, [pc, #332]	; (800da98 <I2C_DMAError+0x224>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d109      	bne.n	800d962 <I2C_DMAError+0xee>
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	bf0c      	ite	eq
 800d95a:	2301      	moveq	r3, #1
 800d95c:	2300      	movne	r3, #0
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	e008      	b.n	800d974 <I2C_DMAError+0x100>
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	bf0c      	ite	eq
 800d96e:	2301      	moveq	r3, #1
 800d970:	2300      	movne	r3, #0
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d978:	2301      	movs	r3, #1
 800d97a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 8098 	beq.w	800dab6 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a33      	ldr	r2, [pc, #204]	; (800da5c <I2C_DMAError+0x1e8>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d059      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a31      	ldr	r2, [pc, #196]	; (800da60 <I2C_DMAError+0x1ec>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d053      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a2f      	ldr	r2, [pc, #188]	; (800da64 <I2C_DMAError+0x1f0>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d04d      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a2d      	ldr	r2, [pc, #180]	; (800da68 <I2C_DMAError+0x1f4>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d047      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a2b      	ldr	r2, [pc, #172]	; (800da6c <I2C_DMAError+0x1f8>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d041      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a29      	ldr	r2, [pc, #164]	; (800da70 <I2C_DMAError+0x1fc>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d03b      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a27      	ldr	r2, [pc, #156]	; (800da74 <I2C_DMAError+0x200>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d035      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a25      	ldr	r2, [pc, #148]	; (800da78 <I2C_DMAError+0x204>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d02f      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a23      	ldr	r2, [pc, #140]	; (800da7c <I2C_DMAError+0x208>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d029      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a21      	ldr	r2, [pc, #132]	; (800da80 <I2C_DMAError+0x20c>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d023      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a1f      	ldr	r2, [pc, #124]	; (800da84 <I2C_DMAError+0x210>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d01d      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a1d      	ldr	r2, [pc, #116]	; (800da88 <I2C_DMAError+0x214>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d017      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a1b      	ldr	r2, [pc, #108]	; (800da8c <I2C_DMAError+0x218>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d011      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a19      	ldr	r2, [pc, #100]	; (800da90 <I2C_DMAError+0x21c>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d00b      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a17      	ldr	r2, [pc, #92]	; (800da94 <I2C_DMAError+0x220>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d005      	beq.n	800da46 <I2C_DMAError+0x1d2>
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a15      	ldr	r2, [pc, #84]	; (800da98 <I2C_DMAError+0x224>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d12a      	bne.n	800da9c <I2C_DMAError+0x228>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	bf0c      	ite	eq
 800da52:	2301      	moveq	r3, #1
 800da54:	2300      	movne	r3, #0
 800da56:	b2db      	uxtb	r3, r3
 800da58:	e029      	b.n	800daae <I2C_DMAError+0x23a>
 800da5a:	bf00      	nop
 800da5c:	40020010 	.word	0x40020010
 800da60:	40020028 	.word	0x40020028
 800da64:	40020040 	.word	0x40020040
 800da68:	40020058 	.word	0x40020058
 800da6c:	40020070 	.word	0x40020070
 800da70:	40020088 	.word	0x40020088
 800da74:	400200a0 	.word	0x400200a0
 800da78:	400200b8 	.word	0x400200b8
 800da7c:	40020410 	.word	0x40020410
 800da80:	40020428 	.word	0x40020428
 800da84:	40020440 	.word	0x40020440
 800da88:	40020458 	.word	0x40020458
 800da8c:	40020470 	.word	0x40020470
 800da90:	40020488 	.word	0x40020488
 800da94:	400204a0 	.word	0x400204a0
 800da98:	400204b8 	.word	0x400204b8
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	bf0c      	ite	eq
 800daa8:	2301      	moveq	r3, #1
 800daaa:	2300      	movne	r3, #0
 800daac:	b2db      	uxtb	r3, r3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800dab2:	2301      	movs	r3, #1
 800dab4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7fc fdf0 	bl	800a69c <HAL_DMA_GetError>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d00e      	beq.n	800dae0 <I2C_DMAError+0x26c>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00b      	beq.n	800dae0 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dad6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800dad8:	2110      	movs	r1, #16
 800dada:	68b8      	ldr	r0, [r7, #8]
 800dadc:	f7ff fcf8 	bl	800d4d0 <I2C_ITError>
  }
}
 800dae0:	bf00      	nop
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db02:	2200      	movs	r2, #0
 800db04:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d003      	beq.n	800db16 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db12:	2200      	movs	r2, #0
 800db14:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f7ff fdca 	bl	800d6b0 <I2C_TreatErrorCallback>
}
 800db1c:	bf00      	nop
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800db24:	b480      	push	{r7}
 800db26:	b087      	sub	sp, #28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	607b      	str	r3, [r7, #4]
 800db2e:	460b      	mov	r3, r1
 800db30:	817b      	strh	r3, [r7, #10]
 800db32:	4613      	mov	r3, r2
 800db34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db36:	897b      	ldrh	r3, [r7, #10]
 800db38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db3c:	7a7b      	ldrb	r3, [r7, #9]
 800db3e:	041b      	lsls	r3, r3, #16
 800db40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	6a3b      	ldr	r3, [r7, #32]
 800db5c:	0d5b      	lsrs	r3, r3, #21
 800db5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800db62:	4b08      	ldr	r3, [pc, #32]	; (800db84 <I2C_TransferConfig+0x60>)
 800db64:	430b      	orrs	r3, r1
 800db66:	43db      	mvns	r3, r3
 800db68:	ea02 0103 	and.w	r1, r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	430a      	orrs	r2, r1
 800db74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800db76:	bf00      	nop
 800db78:	371c      	adds	r7, #28
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	03ff63ff 	.word	0x03ff63ff

0800db88 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800db88:	b480      	push	{r7}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800db94:	2300      	movs	r3, #0
 800db96:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9c:	4a39      	ldr	r2, [pc, #228]	; (800dc84 <I2C_Enable_IRQ+0xfc>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d032      	beq.n	800dc08 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800dba6:	4a38      	ldr	r2, [pc, #224]	; (800dc88 <I2C_Enable_IRQ+0x100>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d02d      	beq.n	800dc08 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800dbb0:	4a36      	ldr	r2, [pc, #216]	; (800dc8c <I2C_Enable_IRQ+0x104>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d028      	beq.n	800dc08 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dbb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	da03      	bge.n	800dbc6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dbc4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dbc6:	887b      	ldrh	r3, [r7, #2]
 800dbc8:	f003 0301 	and.w	r3, r3, #1
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d003      	beq.n	800dbd8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dbd6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dbd8:	887b      	ldrh	r3, [r7, #2]
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dbe8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dbea:	887b      	ldrh	r3, [r7, #2]
 800dbec:	2b10      	cmp	r3, #16
 800dbee:	d103      	bne.n	800dbf8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dbf6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dbf8:	887b      	ldrh	r3, [r7, #2]
 800dbfa:	2b20      	cmp	r3, #32
 800dbfc:	d133      	bne.n	800dc66 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f043 0320 	orr.w	r3, r3, #32
 800dc04:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dc06:	e02e      	b.n	800dc66 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dc08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	da03      	bge.n	800dc18 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dc16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dc18:	887b      	ldrh	r3, [r7, #2]
 800dc1a:	f003 0301 	and.w	r3, r3, #1
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d003      	beq.n	800dc2a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dc28:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dc2a:	887b      	ldrh	r3, [r7, #2]
 800dc2c:	f003 0302 	and.w	r3, r3, #2
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d003      	beq.n	800dc3c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dc3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dc3c:	887b      	ldrh	r3, [r7, #2]
 800dc3e:	2b10      	cmp	r3, #16
 800dc40:	d103      	bne.n	800dc4a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dc48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dc4a:	887b      	ldrh	r3, [r7, #2]
 800dc4c:	2b20      	cmp	r3, #32
 800dc4e:	d103      	bne.n	800dc58 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dc56:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dc58:	887b      	ldrh	r3, [r7, #2]
 800dc5a:	2b40      	cmp	r3, #64	; 0x40
 800dc5c:	d103      	bne.n	800dc66 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc64:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	6819      	ldr	r1, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	430a      	orrs	r2, r1
 800dc74:	601a      	str	r2, [r3, #0]
}
 800dc76:	bf00      	nop
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	0800c38f 	.word	0x0800c38f
 800dc88:	0800c7d5 	.word	0x0800c7d5
 800dc8c:	0800c575 	.word	0x0800c575

0800dc90 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dca0:	887b      	ldrh	r3, [r7, #2]
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00f      	beq.n	800dcca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800dcb0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dcbe:	2b28      	cmp	r3, #40	; 0x28
 800dcc0:	d003      	beq.n	800dcca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dcc8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dcca:	887b      	ldrh	r3, [r7, #2]
 800dccc:	f003 0302 	and.w	r3, r3, #2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00f      	beq.n	800dcf4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800dcda:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dce8:	2b28      	cmp	r3, #40	; 0x28
 800dcea:	d003      	beq.n	800dcf4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dcf2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dcf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	da03      	bge.n	800dd04 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dd02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dd04:	887b      	ldrh	r3, [r7, #2]
 800dd06:	2b10      	cmp	r3, #16
 800dd08:	d103      	bne.n	800dd12 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dd10:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dd12:	887b      	ldrh	r3, [r7, #2]
 800dd14:	2b20      	cmp	r3, #32
 800dd16:	d103      	bne.n	800dd20 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f043 0320 	orr.w	r3, r3, #32
 800dd1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dd20:	887b      	ldrh	r3, [r7, #2]
 800dd22:	2b40      	cmp	r3, #64	; 0x40
 800dd24:	d103      	bne.n	800dd2e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd2c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6819      	ldr	r1, [r3, #0]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	43da      	mvns	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	400a      	ands	r2, r1
 800dd3e:	601a      	str	r2, [r3, #0]
}
 800dd40:	bf00      	nop
 800dd42:	3714      	adds	r7, #20
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b20      	cmp	r3, #32
 800dd60:	d138      	bne.n	800ddd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d101      	bne.n	800dd70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	e032      	b.n	800ddd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2224      	movs	r2, #36	; 0x24
 800dd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f022 0201 	bic.w	r2, r2, #1
 800dd8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dd9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	6819      	ldr	r1, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	683a      	ldr	r2, [r7, #0]
 800ddac:	430a      	orrs	r2, r1
 800ddae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f042 0201 	orr.w	r2, r2, #1
 800ddbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	e000      	b.n	800ddd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ddd4:	2302      	movs	r3, #2
  }
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	370c      	adds	r7, #12
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr

0800dde2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dde2:	b480      	push	{r7}
 800dde4:	b085      	sub	sp, #20
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	2b20      	cmp	r3, #32
 800ddf6:	d139      	bne.n	800de6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d101      	bne.n	800de06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800de02:	2302      	movs	r3, #2
 800de04:	e033      	b.n	800de6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2224      	movs	r2, #36	; 0x24
 800de12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f022 0201 	bic.w	r2, r2, #1
 800de24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800de34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	021b      	lsls	r3, r3, #8
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f042 0201 	orr.w	r2, r2, #1
 800de56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2220      	movs	r2, #32
 800de5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800de68:	2300      	movs	r3, #0
 800de6a:	e000      	b.n	800de6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800de6c:	2302      	movs	r3, #2
  }
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
	...

0800de7c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de84:	4b0d      	ldr	r3, [pc, #52]	; (800debc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de8a:	4a0c      	ldr	r2, [pc, #48]	; (800debc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de8c:	f043 0302 	orr.w	r3, r3, #2
 800de90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800de94:	4b09      	ldr	r3, [pc, #36]	; (800debc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800de96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de9a:	f003 0302 	and.w	r3, r3, #2
 800de9e:	60fb      	str	r3, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800dea2:	4b07      	ldr	r3, [pc, #28]	; (800dec0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dea4:	685a      	ldr	r2, [r3, #4]
 800dea6:	4906      	ldr	r1, [pc, #24]	; (800dec0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4313      	orrs	r3, r2
 800deac:	604b      	str	r3, [r1, #4]
}
 800deae:	bf00      	nop
 800deb0:	3714      	adds	r7, #20
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	58024400 	.word	0x58024400
 800dec0:	58000400 	.word	0x58000400

0800dec4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ded4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	370c      	adds	r7, #12
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800def0:	4b18      	ldr	r3, [pc, #96]	; (800df54 <HAL_PWR_EnterSTOPMode+0x70>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f023 0201 	bic.w	r2, r3, #1
 800def8:	4916      	ldr	r1, [pc, #88]	; (800df54 <HAL_PWR_EnterSTOPMode+0x70>)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4313      	orrs	r3, r2
 800defe:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800df00:	4b14      	ldr	r3, [pc, #80]	; (800df54 <HAL_PWR_EnterSTOPMode+0x70>)
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	4a13      	ldr	r2, [pc, #76]	; (800df54 <HAL_PWR_EnterSTOPMode+0x70>)
 800df06:	f023 0305 	bic.w	r3, r3, #5
 800df0a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800df0c:	4b11      	ldr	r3, [pc, #68]	; (800df54 <HAL_PWR_EnterSTOPMode+0x70>)
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	4a10      	ldr	r2, [pc, #64]	; (800df54 <HAL_PWR_EnterSTOPMode+0x70>)
 800df12:	f023 0302 	bic.w	r3, r3, #2
 800df16:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800df18:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <HAL_PWR_EnterSTOPMode+0x74>)
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	4a0e      	ldr	r2, [pc, #56]	; (800df58 <HAL_PWR_EnterSTOPMode+0x74>)
 800df1e:	f043 0304 	orr.w	r3, r3, #4
 800df22:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800df24:	f3bf 8f4f 	dsb	sy
}
 800df28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800df2a:	f3bf 8f6f 	isb	sy
}
 800df2e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800df30:	78fb      	ldrb	r3, [r7, #3]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d101      	bne.n	800df3a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800df36:	bf30      	wfi
 800df38:	e000      	b.n	800df3c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800df3a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800df3c:	4b06      	ldr	r3, [pc, #24]	; (800df58 <HAL_PWR_EnterSTOPMode+0x74>)
 800df3e:	691b      	ldr	r3, [r3, #16]
 800df40:	4a05      	ldr	r2, [pc, #20]	; (800df58 <HAL_PWR_EnterSTOPMode+0x74>)
 800df42:	f023 0304 	bic.w	r3, r3, #4
 800df46:	6113      	str	r3, [r2, #16]
}
 800df48:	bf00      	nop
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	58024800 	.word	0x58024800
 800df58:	e000ed00 	.word	0xe000ed00

0800df5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800df64:	4b19      	ldr	r3, [pc, #100]	; (800dfcc <HAL_PWREx_ConfigSupply+0x70>)
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f003 0304 	and.w	r3, r3, #4
 800df6c:	2b04      	cmp	r3, #4
 800df6e:	d00a      	beq.n	800df86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800df70:	4b16      	ldr	r3, [pc, #88]	; (800dfcc <HAL_PWREx_ConfigSupply+0x70>)
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	f003 0307 	and.w	r3, r3, #7
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d001      	beq.n	800df82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e01f      	b.n	800dfc2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	e01d      	b.n	800dfc2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800df86:	4b11      	ldr	r3, [pc, #68]	; (800dfcc <HAL_PWREx_ConfigSupply+0x70>)
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f023 0207 	bic.w	r2, r3, #7
 800df8e:	490f      	ldr	r1, [pc, #60]	; (800dfcc <HAL_PWREx_ConfigSupply+0x70>)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4313      	orrs	r3, r2
 800df94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800df96:	f7f7 fff7 	bl	8005f88 <HAL_GetTick>
 800df9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800df9c:	e009      	b.n	800dfb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800df9e:	f7f7 fff3 	bl	8005f88 <HAL_GetTick>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	1ad3      	subs	r3, r2, r3
 800dfa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfac:	d901      	bls.n	800dfb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e007      	b.n	800dfc2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dfb2:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <HAL_PWREx_ConfigSupply+0x70>)
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfbe:	d1ee      	bne.n	800df9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	58024800 	.word	0x58024800

0800dfd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08c      	sub	sp, #48	; 0x30
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d102      	bne.n	800dfe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	f000 bc48 	b.w	800e874 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f003 0301 	and.w	r3, r3, #1
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f000 8088 	beq.w	800e102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dff2:	4b99      	ldr	r3, [pc, #612]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dffc:	4b96      	ldr	r3, [pc, #600]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800dffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e000:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	2b10      	cmp	r3, #16
 800e006:	d007      	beq.n	800e018 <HAL_RCC_OscConfig+0x48>
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	2b18      	cmp	r3, #24
 800e00c:	d111      	bne.n	800e032 <HAL_RCC_OscConfig+0x62>
 800e00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e010:	f003 0303 	and.w	r3, r3, #3
 800e014:	2b02      	cmp	r3, #2
 800e016:	d10c      	bne.n	800e032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e018:	4b8f      	ldr	r3, [pc, #572]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d06d      	beq.n	800e100 <HAL_RCC_OscConfig+0x130>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d169      	bne.n	800e100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	f000 bc21 	b.w	800e874 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e03a:	d106      	bne.n	800e04a <HAL_RCC_OscConfig+0x7a>
 800e03c:	4b86      	ldr	r3, [pc, #536]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a85      	ldr	r2, [pc, #532]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	e02e      	b.n	800e0a8 <HAL_RCC_OscConfig+0xd8>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10c      	bne.n	800e06c <HAL_RCC_OscConfig+0x9c>
 800e052:	4b81      	ldr	r3, [pc, #516]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a80      	ldr	r2, [pc, #512]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	4b7e      	ldr	r3, [pc, #504]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a7d      	ldr	r2, [pc, #500]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e068:	6013      	str	r3, [r2, #0]
 800e06a:	e01d      	b.n	800e0a8 <HAL_RCC_OscConfig+0xd8>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e074:	d10c      	bne.n	800e090 <HAL_RCC_OscConfig+0xc0>
 800e076:	4b78      	ldr	r3, [pc, #480]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a77      	ldr	r2, [pc, #476]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e07c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	4b75      	ldr	r3, [pc, #468]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a74      	ldr	r2, [pc, #464]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	e00b      	b.n	800e0a8 <HAL_RCC_OscConfig+0xd8>
 800e090:	4b71      	ldr	r3, [pc, #452]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a70      	ldr	r2, [pc, #448]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	4b6e      	ldr	r3, [pc, #440]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a6d      	ldr	r2, [pc, #436]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e0a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e0a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d013      	beq.n	800e0d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0b0:	f7f7 ff6a 	bl	8005f88 <HAL_GetTick>
 800e0b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0b6:	e008      	b.n	800e0ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0b8:	f7f7 ff66 	bl	8005f88 <HAL_GetTick>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	2b64      	cmp	r3, #100	; 0x64
 800e0c4:	d901      	bls.n	800e0ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e0c6:	2303      	movs	r3, #3
 800e0c8:	e3d4      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0ca:	4b63      	ldr	r3, [pc, #396]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0f0      	beq.n	800e0b8 <HAL_RCC_OscConfig+0xe8>
 800e0d6:	e014      	b.n	800e102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0d8:	f7f7 ff56 	bl	8005f88 <HAL_GetTick>
 800e0dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e0de:	e008      	b.n	800e0f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0e0:	f7f7 ff52 	bl	8005f88 <HAL_GetTick>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	2b64      	cmp	r3, #100	; 0x64
 800e0ec:	d901      	bls.n	800e0f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	e3c0      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e0f2:	4b59      	ldr	r3, [pc, #356]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1f0      	bne.n	800e0e0 <HAL_RCC_OscConfig+0x110>
 800e0fe:	e000      	b.n	800e102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 0302 	and.w	r3, r3, #2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f000 80ca 	beq.w	800e2a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e110:	4b51      	ldr	r3, [pc, #324]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e118:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e11a:	4b4f      	ldr	r3, [pc, #316]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e11e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d007      	beq.n	800e136 <HAL_RCC_OscConfig+0x166>
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	2b18      	cmp	r3, #24
 800e12a:	d156      	bne.n	800e1da <HAL_RCC_OscConfig+0x20a>
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	f003 0303 	and.w	r3, r3, #3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d151      	bne.n	800e1da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e136:	4b48      	ldr	r3, [pc, #288]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f003 0304 	and.w	r3, r3, #4
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d005      	beq.n	800e14e <HAL_RCC_OscConfig+0x17e>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e392      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e14e:	4b42      	ldr	r3, [pc, #264]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f023 0219 	bic.w	r2, r3, #25
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	493f      	ldr	r1, [pc, #252]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e15c:	4313      	orrs	r3, r2
 800e15e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e160:	f7f7 ff12 	bl	8005f88 <HAL_GetTick>
 800e164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e166:	e008      	b.n	800e17a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e168:	f7f7 ff0e 	bl	8005f88 <HAL_GetTick>
 800e16c:	4602      	mov	r2, r0
 800e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	2b02      	cmp	r3, #2
 800e174:	d901      	bls.n	800e17a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e176:	2303      	movs	r3, #3
 800e178:	e37c      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e17a:	4b37      	ldr	r3, [pc, #220]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f003 0304 	and.w	r3, r3, #4
 800e182:	2b00      	cmp	r3, #0
 800e184:	d0f0      	beq.n	800e168 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e186:	f7f7 ff0b 	bl	8005fa0 <HAL_GetREVID>
 800e18a:	4603      	mov	r3, r0
 800e18c:	f241 0203 	movw	r2, #4099	; 0x1003
 800e190:	4293      	cmp	r3, r2
 800e192:	d817      	bhi.n	800e1c4 <HAL_RCC_OscConfig+0x1f4>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	691b      	ldr	r3, [r3, #16]
 800e198:	2b40      	cmp	r3, #64	; 0x40
 800e19a:	d108      	bne.n	800e1ae <HAL_RCC_OscConfig+0x1de>
 800e19c:	4b2e      	ldr	r3, [pc, #184]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e1a4:	4a2c      	ldr	r2, [pc, #176]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1ac:	e07a      	b.n	800e2a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1ae:	4b2a      	ldr	r3, [pc, #168]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	691b      	ldr	r3, [r3, #16]
 800e1ba:	031b      	lsls	r3, r3, #12
 800e1bc:	4926      	ldr	r1, [pc, #152]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1c2:	e06f      	b.n	800e2a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1c4:	4b24      	ldr	r3, [pc, #144]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	061b      	lsls	r3, r3, #24
 800e1d2:	4921      	ldr	r1, [pc, #132]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1d8:	e064      	b.n	800e2a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d047      	beq.n	800e272 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e1e2:	4b1d      	ldr	r3, [pc, #116]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f023 0219 	bic.w	r2, r3, #25
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	491a      	ldr	r1, [pc, #104]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1f4:	f7f7 fec8 	bl	8005f88 <HAL_GetTick>
 800e1f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e1fa:	e008      	b.n	800e20e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e1fc:	f7f7 fec4 	bl	8005f88 <HAL_GetTick>
 800e200:	4602      	mov	r2, r0
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	2b02      	cmp	r3, #2
 800e208:	d901      	bls.n	800e20e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e332      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e20e:	4b12      	ldr	r3, [pc, #72]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f003 0304 	and.w	r3, r3, #4
 800e216:	2b00      	cmp	r3, #0
 800e218:	d0f0      	beq.n	800e1fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e21a:	f7f7 fec1 	bl	8005fa0 <HAL_GetREVID>
 800e21e:	4603      	mov	r3, r0
 800e220:	f241 0203 	movw	r2, #4099	; 0x1003
 800e224:	4293      	cmp	r3, r2
 800e226:	d819      	bhi.n	800e25c <HAL_RCC_OscConfig+0x28c>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	2b40      	cmp	r3, #64	; 0x40
 800e22e:	d108      	bne.n	800e242 <HAL_RCC_OscConfig+0x272>
 800e230:	4b09      	ldr	r3, [pc, #36]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e238:	4a07      	ldr	r2, [pc, #28]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e23a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e23e:	6053      	str	r3, [r2, #4]
 800e240:	e030      	b.n	800e2a4 <HAL_RCC_OscConfig+0x2d4>
 800e242:	4b05      	ldr	r3, [pc, #20]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	691b      	ldr	r3, [r3, #16]
 800e24e:	031b      	lsls	r3, r3, #12
 800e250:	4901      	ldr	r1, [pc, #4]	; (800e258 <HAL_RCC_OscConfig+0x288>)
 800e252:	4313      	orrs	r3, r2
 800e254:	604b      	str	r3, [r1, #4]
 800e256:	e025      	b.n	800e2a4 <HAL_RCC_OscConfig+0x2d4>
 800e258:	58024400 	.word	0x58024400
 800e25c:	4b9a      	ldr	r3, [pc, #616]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	061b      	lsls	r3, r3, #24
 800e26a:	4997      	ldr	r1, [pc, #604]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e26c:	4313      	orrs	r3, r2
 800e26e:	604b      	str	r3, [r1, #4]
 800e270:	e018      	b.n	800e2a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e272:	4b95      	ldr	r3, [pc, #596]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a94      	ldr	r2, [pc, #592]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e278:	f023 0301 	bic.w	r3, r3, #1
 800e27c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e27e:	f7f7 fe83 	bl	8005f88 <HAL_GetTick>
 800e282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e284:	e008      	b.n	800e298 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e286:	f7f7 fe7f 	bl	8005f88 <HAL_GetTick>
 800e28a:	4602      	mov	r2, r0
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	2b02      	cmp	r3, #2
 800e292:	d901      	bls.n	800e298 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e294:	2303      	movs	r3, #3
 800e296:	e2ed      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e298:	4b8b      	ldr	r3, [pc, #556]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f003 0304 	and.w	r3, r3, #4
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1f0      	bne.n	800e286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f003 0310 	and.w	r3, r3, #16
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f000 80a9 	beq.w	800e404 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e2b2:	4b85      	ldr	r3, [pc, #532]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e2bc:	4b82      	ldr	r3, [pc, #520]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	2b08      	cmp	r3, #8
 800e2c6:	d007      	beq.n	800e2d8 <HAL_RCC_OscConfig+0x308>
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	2b18      	cmp	r3, #24
 800e2cc:	d13a      	bne.n	800e344 <HAL_RCC_OscConfig+0x374>
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	f003 0303 	and.w	r3, r3, #3
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d135      	bne.n	800e344 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e2d8:	4b7b      	ldr	r3, [pc, #492]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <HAL_RCC_OscConfig+0x320>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	69db      	ldr	r3, [r3, #28]
 800e2e8:	2b80      	cmp	r3, #128	; 0x80
 800e2ea:	d001      	beq.n	800e2f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e2c1      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e2f0:	f7f7 fe56 	bl	8005fa0 <HAL_GetREVID>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f241 0203 	movw	r2, #4099	; 0x1003
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d817      	bhi.n	800e32e <HAL_RCC_OscConfig+0x35e>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6a1b      	ldr	r3, [r3, #32]
 800e302:	2b20      	cmp	r3, #32
 800e304:	d108      	bne.n	800e318 <HAL_RCC_OscConfig+0x348>
 800e306:	4b70      	ldr	r3, [pc, #448]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e30e:	4a6e      	ldr	r2, [pc, #440]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e314:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e316:	e075      	b.n	800e404 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e318:	4b6b      	ldr	r3, [pc, #428]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6a1b      	ldr	r3, [r3, #32]
 800e324:	069b      	lsls	r3, r3, #26
 800e326:	4968      	ldr	r1, [pc, #416]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e328:	4313      	orrs	r3, r2
 800e32a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e32c:	e06a      	b.n	800e404 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e32e:	4b66      	ldr	r3, [pc, #408]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	061b      	lsls	r3, r3, #24
 800e33c:	4962      	ldr	r1, [pc, #392]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e33e:	4313      	orrs	r3, r2
 800e340:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e342:	e05f      	b.n	800e404 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	69db      	ldr	r3, [r3, #28]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d042      	beq.n	800e3d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e34c:	4b5e      	ldr	r3, [pc, #376]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a5d      	ldr	r2, [pc, #372]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e358:	f7f7 fe16 	bl	8005f88 <HAL_GetTick>
 800e35c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e35e:	e008      	b.n	800e372 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e360:	f7f7 fe12 	bl	8005f88 <HAL_GetTick>
 800e364:	4602      	mov	r2, r0
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d901      	bls.n	800e372 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e36e:	2303      	movs	r3, #3
 800e370:	e280      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e372:	4b55      	ldr	r3, [pc, #340]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d0f0      	beq.n	800e360 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e37e:	f7f7 fe0f 	bl	8005fa0 <HAL_GetREVID>
 800e382:	4603      	mov	r3, r0
 800e384:	f241 0203 	movw	r2, #4099	; 0x1003
 800e388:	4293      	cmp	r3, r2
 800e38a:	d817      	bhi.n	800e3bc <HAL_RCC_OscConfig+0x3ec>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a1b      	ldr	r3, [r3, #32]
 800e390:	2b20      	cmp	r3, #32
 800e392:	d108      	bne.n	800e3a6 <HAL_RCC_OscConfig+0x3d6>
 800e394:	4b4c      	ldr	r3, [pc, #304]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e39c:	4a4a      	ldr	r2, [pc, #296]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e39e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e3a2:	6053      	str	r3, [r2, #4]
 800e3a4:	e02e      	b.n	800e404 <HAL_RCC_OscConfig+0x434>
 800e3a6:	4b48      	ldr	r3, [pc, #288]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a1b      	ldr	r3, [r3, #32]
 800e3b2:	069b      	lsls	r3, r3, #26
 800e3b4:	4944      	ldr	r1, [pc, #272]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	604b      	str	r3, [r1, #4]
 800e3ba:	e023      	b.n	800e404 <HAL_RCC_OscConfig+0x434>
 800e3bc:	4b42      	ldr	r3, [pc, #264]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a1b      	ldr	r3, [r3, #32]
 800e3c8:	061b      	lsls	r3, r3, #24
 800e3ca:	493f      	ldr	r1, [pc, #252]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	60cb      	str	r3, [r1, #12]
 800e3d0:	e018      	b.n	800e404 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e3d2:	4b3d      	ldr	r3, [pc, #244]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a3c      	ldr	r2, [pc, #240]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e3d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3de:	f7f7 fdd3 	bl	8005f88 <HAL_GetTick>
 800e3e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e3e4:	e008      	b.n	800e3f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e3e6:	f7f7 fdcf 	bl	8005f88 <HAL_GetTick>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d901      	bls.n	800e3f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e3f4:	2303      	movs	r3, #3
 800e3f6:	e23d      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e3f8:	4b33      	ldr	r3, [pc, #204]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1f0      	bne.n	800e3e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f003 0308 	and.w	r3, r3, #8
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d036      	beq.n	800e47e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	695b      	ldr	r3, [r3, #20]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d019      	beq.n	800e44c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e418:	4b2b      	ldr	r3, [pc, #172]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e41c:	4a2a      	ldr	r2, [pc, #168]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e41e:	f043 0301 	orr.w	r3, r3, #1
 800e422:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e424:	f7f7 fdb0 	bl	8005f88 <HAL_GetTick>
 800e428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e42a:	e008      	b.n	800e43e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e42c:	f7f7 fdac 	bl	8005f88 <HAL_GetTick>
 800e430:	4602      	mov	r2, r0
 800e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e434:	1ad3      	subs	r3, r2, r3
 800e436:	2b02      	cmp	r3, #2
 800e438:	d901      	bls.n	800e43e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e43a:	2303      	movs	r3, #3
 800e43c:	e21a      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e43e:	4b22      	ldr	r3, [pc, #136]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e442:	f003 0302 	and.w	r3, r3, #2
 800e446:	2b00      	cmp	r3, #0
 800e448:	d0f0      	beq.n	800e42c <HAL_RCC_OscConfig+0x45c>
 800e44a:	e018      	b.n	800e47e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e44c:	4b1e      	ldr	r3, [pc, #120]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e450:	4a1d      	ldr	r2, [pc, #116]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e452:	f023 0301 	bic.w	r3, r3, #1
 800e456:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e458:	f7f7 fd96 	bl	8005f88 <HAL_GetTick>
 800e45c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e45e:	e008      	b.n	800e472 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e460:	f7f7 fd92 	bl	8005f88 <HAL_GetTick>
 800e464:	4602      	mov	r2, r0
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d901      	bls.n	800e472 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e46e:	2303      	movs	r3, #3
 800e470:	e200      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e472:	4b15      	ldr	r3, [pc, #84]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e476:	f003 0302 	and.w	r3, r3, #2
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1f0      	bne.n	800e460 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f003 0320 	and.w	r3, r3, #32
 800e486:	2b00      	cmp	r3, #0
 800e488:	d039      	beq.n	800e4fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	699b      	ldr	r3, [r3, #24]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d01c      	beq.n	800e4cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e492:	4b0d      	ldr	r3, [pc, #52]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a0c      	ldr	r2, [pc, #48]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e49c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e49e:	f7f7 fd73 	bl	8005f88 <HAL_GetTick>
 800e4a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4a4:	e008      	b.n	800e4b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4a6:	f7f7 fd6f 	bl	8005f88 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d901      	bls.n	800e4b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e1dd      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4b8:	4b03      	ldr	r3, [pc, #12]	; (800e4c8 <HAL_RCC_OscConfig+0x4f8>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d0f0      	beq.n	800e4a6 <HAL_RCC_OscConfig+0x4d6>
 800e4c4:	e01b      	b.n	800e4fe <HAL_RCC_OscConfig+0x52e>
 800e4c6:	bf00      	nop
 800e4c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e4cc:	4b9b      	ldr	r3, [pc, #620]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a9a      	ldr	r2, [pc, #616]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e4d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e4d8:	f7f7 fd56 	bl	8005f88 <HAL_GetTick>
 800e4dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e4de:	e008      	b.n	800e4f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4e0:	f7f7 fd52 	bl	8005f88 <HAL_GetTick>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	2b02      	cmp	r3, #2
 800e4ec:	d901      	bls.n	800e4f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	e1c0      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e4f2:	4b92      	ldr	r3, [pc, #584]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1f0      	bne.n	800e4e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0304 	and.w	r3, r3, #4
 800e506:	2b00      	cmp	r3, #0
 800e508:	f000 8081 	beq.w	800e60e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e50c:	4b8c      	ldr	r3, [pc, #560]	; (800e740 <HAL_RCC_OscConfig+0x770>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a8b      	ldr	r2, [pc, #556]	; (800e740 <HAL_RCC_OscConfig+0x770>)
 800e512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e518:	f7f7 fd36 	bl	8005f88 <HAL_GetTick>
 800e51c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e51e:	e008      	b.n	800e532 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e520:	f7f7 fd32 	bl	8005f88 <HAL_GetTick>
 800e524:	4602      	mov	r2, r0
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	2b64      	cmp	r3, #100	; 0x64
 800e52c:	d901      	bls.n	800e532 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e52e:	2303      	movs	r3, #3
 800e530:	e1a0      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e532:	4b83      	ldr	r3, [pc, #524]	; (800e740 <HAL_RCC_OscConfig+0x770>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d0f0      	beq.n	800e520 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	2b01      	cmp	r3, #1
 800e544:	d106      	bne.n	800e554 <HAL_RCC_OscConfig+0x584>
 800e546:	4b7d      	ldr	r3, [pc, #500]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e54a:	4a7c      	ldr	r2, [pc, #496]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e54c:	f043 0301 	orr.w	r3, r3, #1
 800e550:	6713      	str	r3, [r2, #112]	; 0x70
 800e552:	e02d      	b.n	800e5b0 <HAL_RCC_OscConfig+0x5e0>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10c      	bne.n	800e576 <HAL_RCC_OscConfig+0x5a6>
 800e55c:	4b77      	ldr	r3, [pc, #476]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e560:	4a76      	ldr	r2, [pc, #472]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e562:	f023 0301 	bic.w	r3, r3, #1
 800e566:	6713      	str	r3, [r2, #112]	; 0x70
 800e568:	4b74      	ldr	r3, [pc, #464]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56c:	4a73      	ldr	r2, [pc, #460]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e56e:	f023 0304 	bic.w	r3, r3, #4
 800e572:	6713      	str	r3, [r2, #112]	; 0x70
 800e574:	e01c      	b.n	800e5b0 <HAL_RCC_OscConfig+0x5e0>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	2b05      	cmp	r3, #5
 800e57c:	d10c      	bne.n	800e598 <HAL_RCC_OscConfig+0x5c8>
 800e57e:	4b6f      	ldr	r3, [pc, #444]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e582:	4a6e      	ldr	r2, [pc, #440]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e584:	f043 0304 	orr.w	r3, r3, #4
 800e588:	6713      	str	r3, [r2, #112]	; 0x70
 800e58a:	4b6c      	ldr	r3, [pc, #432]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58e:	4a6b      	ldr	r2, [pc, #428]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e590:	f043 0301 	orr.w	r3, r3, #1
 800e594:	6713      	str	r3, [r2, #112]	; 0x70
 800e596:	e00b      	b.n	800e5b0 <HAL_RCC_OscConfig+0x5e0>
 800e598:	4b68      	ldr	r3, [pc, #416]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59c:	4a67      	ldr	r2, [pc, #412]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e59e:	f023 0301 	bic.w	r3, r3, #1
 800e5a2:	6713      	str	r3, [r2, #112]	; 0x70
 800e5a4:	4b65      	ldr	r3, [pc, #404]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a8:	4a64      	ldr	r2, [pc, #400]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e5aa:	f023 0304 	bic.w	r3, r3, #4
 800e5ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d015      	beq.n	800e5e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5b8:	f7f7 fce6 	bl	8005f88 <HAL_GetTick>
 800e5bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5be:	e00a      	b.n	800e5d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5c0:	f7f7 fce2 	bl	8005f88 <HAL_GetTick>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d901      	bls.n	800e5d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e5d2:	2303      	movs	r3, #3
 800e5d4:	e14e      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5d6:	4b59      	ldr	r3, [pc, #356]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5da:	f003 0302 	and.w	r3, r3, #2
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d0ee      	beq.n	800e5c0 <HAL_RCC_OscConfig+0x5f0>
 800e5e2:	e014      	b.n	800e60e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5e4:	f7f7 fcd0 	bl	8005f88 <HAL_GetTick>
 800e5e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e5ea:	e00a      	b.n	800e602 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5ec:	f7f7 fccc 	bl	8005f88 <HAL_GetTick>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	1ad3      	subs	r3, r2, r3
 800e5f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d901      	bls.n	800e602 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e5fe:	2303      	movs	r3, #3
 800e600:	e138      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e602:	4b4e      	ldr	r3, [pc, #312]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e606:	f003 0302 	and.w	r3, r3, #2
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1ee      	bne.n	800e5ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 812d 	beq.w	800e872 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e618:	4b48      	ldr	r3, [pc, #288]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e620:	2b18      	cmp	r3, #24
 800e622:	f000 80bd 	beq.w	800e7a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	f040 809e 	bne.w	800e76c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e630:	4b42      	ldr	r3, [pc, #264]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a41      	ldr	r2, [pc, #260]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e63a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e63c:	f7f7 fca4 	bl	8005f88 <HAL_GetTick>
 800e640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e642:	e008      	b.n	800e656 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e644:	f7f7 fca0 	bl	8005f88 <HAL_GetTick>
 800e648:	4602      	mov	r2, r0
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d901      	bls.n	800e656 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e652:	2303      	movs	r3, #3
 800e654:	e10e      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e656:	4b39      	ldr	r3, [pc, #228]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1f0      	bne.n	800e644 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e662:	4b36      	ldr	r3, [pc, #216]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e666:	4b37      	ldr	r3, [pc, #220]	; (800e744 <HAL_RCC_OscConfig+0x774>)
 800e668:	4013      	ands	r3, r2
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e672:	0112      	lsls	r2, r2, #4
 800e674:	430a      	orrs	r2, r1
 800e676:	4931      	ldr	r1, [pc, #196]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e678:	4313      	orrs	r3, r2
 800e67a:	628b      	str	r3, [r1, #40]	; 0x28
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e680:	3b01      	subs	r3, #1
 800e682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e68a:	3b01      	subs	r3, #1
 800e68c:	025b      	lsls	r3, r3, #9
 800e68e:	b29b      	uxth	r3, r3
 800e690:	431a      	orrs	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e696:	3b01      	subs	r3, #1
 800e698:	041b      	lsls	r3, r3, #16
 800e69a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e69e:	431a      	orrs	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	061b      	lsls	r3, r3, #24
 800e6a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e6ac:	4923      	ldr	r1, [pc, #140]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e6b2:	4b22      	ldr	r3, [pc, #136]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b6:	4a21      	ldr	r2, [pc, #132]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6b8:	f023 0301 	bic.w	r3, r3, #1
 800e6bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e6be:	4b1f      	ldr	r3, [pc, #124]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6c2:	4b21      	ldr	r3, [pc, #132]	; (800e748 <HAL_RCC_OscConfig+0x778>)
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e6ca:	00d2      	lsls	r2, r2, #3
 800e6cc:	491b      	ldr	r1, [pc, #108]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e6d2:	4b1a      	ldr	r3, [pc, #104]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d6:	f023 020c 	bic.w	r2, r3, #12
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6de:	4917      	ldr	r1, [pc, #92]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e6e4:	4b15      	ldr	r3, [pc, #84]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e8:	f023 0202 	bic.w	r2, r3, #2
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6f0:	4912      	ldr	r1, [pc, #72]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e6f6:	4b11      	ldr	r3, [pc, #68]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	4a10      	ldr	r2, [pc, #64]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e6fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e702:	4b0e      	ldr	r3, [pc, #56]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e706:	4a0d      	ldr	r2, [pc, #52]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e70c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e70e:	4b0b      	ldr	r3, [pc, #44]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e712:	4a0a      	ldr	r2, [pc, #40]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e71a:	4b08      	ldr	r3, [pc, #32]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71e:	4a07      	ldr	r2, [pc, #28]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e720:	f043 0301 	orr.w	r3, r3, #1
 800e724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e726:	4b05      	ldr	r3, [pc, #20]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a04      	ldr	r2, [pc, #16]	; (800e73c <HAL_RCC_OscConfig+0x76c>)
 800e72c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e732:	f7f7 fc29 	bl	8005f88 <HAL_GetTick>
 800e736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e738:	e011      	b.n	800e75e <HAL_RCC_OscConfig+0x78e>
 800e73a:	bf00      	nop
 800e73c:	58024400 	.word	0x58024400
 800e740:	58024800 	.word	0x58024800
 800e744:	fffffc0c 	.word	0xfffffc0c
 800e748:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e74c:	f7f7 fc1c 	bl	8005f88 <HAL_GetTick>
 800e750:	4602      	mov	r2, r0
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	2b02      	cmp	r3, #2
 800e758:	d901      	bls.n	800e75e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e75a:	2303      	movs	r3, #3
 800e75c:	e08a      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e75e:	4b47      	ldr	r3, [pc, #284]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0f0      	beq.n	800e74c <HAL_RCC_OscConfig+0x77c>
 800e76a:	e082      	b.n	800e872 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e76c:	4b43      	ldr	r3, [pc, #268]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a42      	ldr	r2, [pc, #264]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e778:	f7f7 fc06 	bl	8005f88 <HAL_GetTick>
 800e77c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e77e:	e008      	b.n	800e792 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e780:	f7f7 fc02 	bl	8005f88 <HAL_GetTick>
 800e784:	4602      	mov	r2, r0
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	d901      	bls.n	800e792 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e78e:	2303      	movs	r3, #3
 800e790:	e070      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e792:	4b3a      	ldr	r3, [pc, #232]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1f0      	bne.n	800e780 <HAL_RCC_OscConfig+0x7b0>
 800e79e:	e068      	b.n	800e872 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e7a0:	4b36      	ldr	r3, [pc, #216]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e7a6:	4b35      	ldr	r3, [pc, #212]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d031      	beq.n	800e818 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	f003 0203 	and.w	r2, r3, #3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d12a      	bne.n	800e818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	091b      	lsrs	r3, r3, #4
 800e7c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d122      	bne.n	800e818 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d11a      	bne.n	800e818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	0a5b      	lsrs	r3, r3, #9
 800e7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d111      	bne.n	800e818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	0c1b      	lsrs	r3, r3, #16
 800e7f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e800:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e802:	429a      	cmp	r2, r3
 800e804:	d108      	bne.n	800e818 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	0e1b      	lsrs	r3, r3, #24
 800e80a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e812:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e814:	429a      	cmp	r2, r3
 800e816:	d001      	beq.n	800e81c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e818:	2301      	movs	r3, #1
 800e81a:	e02b      	b.n	800e874 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e81c:	4b17      	ldr	r3, [pc, #92]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e820:	08db      	lsrs	r3, r3, #3
 800e822:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e826:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e82c:	693a      	ldr	r2, [r7, #16]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d01f      	beq.n	800e872 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e832:	4b12      	ldr	r3, [pc, #72]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e836:	4a11      	ldr	r2, [pc, #68]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e838:	f023 0301 	bic.w	r3, r3, #1
 800e83c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e83e:	f7f7 fba3 	bl	8005f88 <HAL_GetTick>
 800e842:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e844:	bf00      	nop
 800e846:	f7f7 fb9f 	bl	8005f88 <HAL_GetTick>
 800e84a:	4602      	mov	r2, r0
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	4293      	cmp	r3, r2
 800e850:	d0f9      	beq.n	800e846 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e852:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e856:	4b0a      	ldr	r3, [pc, #40]	; (800e880 <HAL_RCC_OscConfig+0x8b0>)
 800e858:	4013      	ands	r3, r2
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e85e:	00d2      	lsls	r2, r2, #3
 800e860:	4906      	ldr	r1, [pc, #24]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e862:	4313      	orrs	r3, r2
 800e864:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e866:	4b05      	ldr	r3, [pc, #20]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e86a:	4a04      	ldr	r2, [pc, #16]	; (800e87c <HAL_RCC_OscConfig+0x8ac>)
 800e86c:	f043 0301 	orr.w	r3, r3, #1
 800e870:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e872:	2300      	movs	r3, #0
}
 800e874:	4618      	mov	r0, r3
 800e876:	3730      	adds	r7, #48	; 0x30
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	58024400 	.word	0x58024400
 800e880:	ffff0007 	.word	0xffff0007

0800e884 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e894:	2301      	movs	r3, #1
 800e896:	e19c      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e898:	4b8a      	ldr	r3, [pc, #552]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f003 030f 	and.w	r3, r3, #15
 800e8a0:	683a      	ldr	r2, [r7, #0]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d910      	bls.n	800e8c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8a6:	4b87      	ldr	r3, [pc, #540]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f023 020f 	bic.w	r2, r3, #15
 800e8ae:	4985      	ldr	r1, [pc, #532]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8b6:	4b83      	ldr	r3, [pc, #524]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f003 030f 	and.w	r3, r3, #15
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d001      	beq.n	800e8c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	e184      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f003 0304 	and.w	r3, r3, #4
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d010      	beq.n	800e8f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	691a      	ldr	r2, [r3, #16]
 800e8d8:	4b7b      	ldr	r3, [pc, #492]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d908      	bls.n	800e8f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e8e4:	4b78      	ldr	r3, [pc, #480]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	4975      	ldr	r1, [pc, #468]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f003 0308 	and.w	r3, r3, #8
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d010      	beq.n	800e924 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	695a      	ldr	r2, [r3, #20]
 800e906:	4b70      	ldr	r3, [pc, #448]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e908:	69db      	ldr	r3, [r3, #28]
 800e90a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e90e:	429a      	cmp	r2, r3
 800e910:	d908      	bls.n	800e924 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e912:	4b6d      	ldr	r3, [pc, #436]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	496a      	ldr	r1, [pc, #424]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e920:	4313      	orrs	r3, r2
 800e922:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f003 0310 	and.w	r3, r3, #16
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d010      	beq.n	800e952 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699a      	ldr	r2, [r3, #24]
 800e934:	4b64      	ldr	r3, [pc, #400]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e936:	69db      	ldr	r3, [r3, #28]
 800e938:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d908      	bls.n	800e952 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e940:	4b61      	ldr	r3, [pc, #388]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	495e      	ldr	r1, [pc, #376]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e94e:	4313      	orrs	r3, r2
 800e950:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f003 0320 	and.w	r3, r3, #32
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d010      	beq.n	800e980 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	69da      	ldr	r2, [r3, #28]
 800e962:	4b59      	ldr	r3, [pc, #356]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e964:	6a1b      	ldr	r3, [r3, #32]
 800e966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d908      	bls.n	800e980 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e96e:	4b56      	ldr	r3, [pc, #344]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e970:	6a1b      	ldr	r3, [r3, #32]
 800e972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	69db      	ldr	r3, [r3, #28]
 800e97a:	4953      	ldr	r1, [pc, #332]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e97c:	4313      	orrs	r3, r2
 800e97e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f003 0302 	and.w	r3, r3, #2
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d010      	beq.n	800e9ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68da      	ldr	r2, [r3, #12]
 800e990:	4b4d      	ldr	r3, [pc, #308]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	f003 030f 	and.w	r3, r3, #15
 800e998:	429a      	cmp	r2, r3
 800e99a:	d908      	bls.n	800e9ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e99c:	4b4a      	ldr	r3, [pc, #296]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	f023 020f 	bic.w	r2, r3, #15
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	4947      	ldr	r1, [pc, #284]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d055      	beq.n	800ea66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e9ba:	4b43      	ldr	r3, [pc, #268]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	4940      	ldr	r1, [pc, #256]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	2b02      	cmp	r3, #2
 800e9d2:	d107      	bne.n	800e9e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e9d4:	4b3c      	ldr	r3, [pc, #240]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d121      	bne.n	800ea24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e0f6      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d107      	bne.n	800e9fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e9ec:	4b36      	ldr	r3, [pc, #216]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d115      	bne.n	800ea24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e0ea      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d107      	bne.n	800ea14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ea04:	4b30      	ldr	r3, [pc, #192]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d109      	bne.n	800ea24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea10:	2301      	movs	r3, #1
 800ea12:	e0de      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea14:	4b2c      	ldr	r3, [pc, #176]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f003 0304 	and.w	r3, r3, #4
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	e0d6      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ea24:	4b28      	ldr	r3, [pc, #160]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	f023 0207 	bic.w	r2, r3, #7
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	4925      	ldr	r1, [pc, #148]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea32:	4313      	orrs	r3, r2
 800ea34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea36:	f7f7 faa7 	bl	8005f88 <HAL_GetTick>
 800ea3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea3c:	e00a      	b.n	800ea54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea3e:	f7f7 faa3 	bl	8005f88 <HAL_GetTick>
 800ea42:	4602      	mov	r2, r0
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	1ad3      	subs	r3, r2, r3
 800ea48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d901      	bls.n	800ea54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ea50:	2303      	movs	r3, #3
 800ea52:	e0be      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea54:	4b1c      	ldr	r3, [pc, #112]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea56:	691b      	ldr	r3, [r3, #16]
 800ea58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	00db      	lsls	r3, r3, #3
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d1eb      	bne.n	800ea3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f003 0302 	and.w	r3, r3, #2
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d010      	beq.n	800ea94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	68da      	ldr	r2, [r3, #12]
 800ea76:	4b14      	ldr	r3, [pc, #80]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea78:	699b      	ldr	r3, [r3, #24]
 800ea7a:	f003 030f 	and.w	r3, r3, #15
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d208      	bcs.n	800ea94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ea82:	4b11      	ldr	r3, [pc, #68]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea84:	699b      	ldr	r3, [r3, #24]
 800ea86:	f023 020f 	bic.w	r2, r3, #15
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	490e      	ldr	r1, [pc, #56]	; (800eac8 <HAL_RCC_ClockConfig+0x244>)
 800ea90:	4313      	orrs	r3, r2
 800ea92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ea94:	4b0b      	ldr	r3, [pc, #44]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f003 030f 	and.w	r3, r3, #15
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d214      	bcs.n	800eacc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eaa2:	4b08      	ldr	r3, [pc, #32]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f023 020f 	bic.w	r2, r3, #15
 800eaaa:	4906      	ldr	r1, [pc, #24]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eab2:	4b04      	ldr	r3, [pc, #16]	; (800eac4 <HAL_RCC_ClockConfig+0x240>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f003 030f 	and.w	r3, r3, #15
 800eaba:	683a      	ldr	r2, [r7, #0]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d005      	beq.n	800eacc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	e086      	b.n	800ebd2 <HAL_RCC_ClockConfig+0x34e>
 800eac4:	52002000 	.word	0x52002000
 800eac8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f003 0304 	and.w	r3, r3, #4
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d010      	beq.n	800eafa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	691a      	ldr	r2, [r3, #16]
 800eadc:	4b3f      	ldr	r3, [pc, #252]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d208      	bcs.n	800eafa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800eae8:	4b3c      	ldr	r3, [pc, #240]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	4939      	ldr	r1, [pc, #228]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f003 0308 	and.w	r3, r3, #8
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d010      	beq.n	800eb28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	695a      	ldr	r2, [r3, #20]
 800eb0a:	4b34      	ldr	r3, [pc, #208]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb0c:	69db      	ldr	r3, [r3, #28]
 800eb0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d208      	bcs.n	800eb28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eb16:	4b31      	ldr	r3, [pc, #196]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb18:	69db      	ldr	r3, [r3, #28]
 800eb1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	695b      	ldr	r3, [r3, #20]
 800eb22:	492e      	ldr	r1, [pc, #184]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb24:	4313      	orrs	r3, r2
 800eb26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f003 0310 	and.w	r3, r3, #16
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d010      	beq.n	800eb56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	699a      	ldr	r2, [r3, #24]
 800eb38:	4b28      	ldr	r3, [pc, #160]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb3a:	69db      	ldr	r3, [r3, #28]
 800eb3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d208      	bcs.n	800eb56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eb44:	4b25      	ldr	r3, [pc, #148]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	699b      	ldr	r3, [r3, #24]
 800eb50:	4922      	ldr	r1, [pc, #136]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb52:	4313      	orrs	r3, r2
 800eb54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 0320 	and.w	r3, r3, #32
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d010      	beq.n	800eb84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	69da      	ldr	r2, [r3, #28]
 800eb66:	4b1d      	ldr	r3, [pc, #116]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d208      	bcs.n	800eb84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800eb72:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb74:	6a1b      	ldr	r3, [r3, #32]
 800eb76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	69db      	ldr	r3, [r3, #28]
 800eb7e:	4917      	ldr	r1, [pc, #92]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb80:	4313      	orrs	r3, r2
 800eb82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800eb84:	f000 f834 	bl	800ebf0 <HAL_RCC_GetSysClockFreq>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	4b14      	ldr	r3, [pc, #80]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eb8c:	699b      	ldr	r3, [r3, #24]
 800eb8e:	0a1b      	lsrs	r3, r3, #8
 800eb90:	f003 030f 	and.w	r3, r3, #15
 800eb94:	4912      	ldr	r1, [pc, #72]	; (800ebe0 <HAL_RCC_ClockConfig+0x35c>)
 800eb96:	5ccb      	ldrb	r3, [r1, r3]
 800eb98:	f003 031f 	and.w	r3, r3, #31
 800eb9c:	fa22 f303 	lsr.w	r3, r2, r3
 800eba0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eba2:	4b0e      	ldr	r3, [pc, #56]	; (800ebdc <HAL_RCC_ClockConfig+0x358>)
 800eba4:	699b      	ldr	r3, [r3, #24]
 800eba6:	f003 030f 	and.w	r3, r3, #15
 800ebaa:	4a0d      	ldr	r2, [pc, #52]	; (800ebe0 <HAL_RCC_ClockConfig+0x35c>)
 800ebac:	5cd3      	ldrb	r3, [r2, r3]
 800ebae:	f003 031f 	and.w	r3, r3, #31
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebb8:	4a0a      	ldr	r2, [pc, #40]	; (800ebe4 <HAL_RCC_ClockConfig+0x360>)
 800ebba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ebbc:	4a0a      	ldr	r2, [pc, #40]	; (800ebe8 <HAL_RCC_ClockConfig+0x364>)
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ebc2:	4b0a      	ldr	r3, [pc, #40]	; (800ebec <HAL_RCC_ClockConfig+0x368>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f5 fd9c 	bl	8004704 <HAL_InitTick>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	58024400 	.word	0x58024400
 800ebe0:	0801b544 	.word	0x0801b544
 800ebe4:	240000c4 	.word	0x240000c4
 800ebe8:	240000c0 	.word	0x240000c0
 800ebec:	240000c8 	.word	0x240000c8

0800ebf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b089      	sub	sp, #36	; 0x24
 800ebf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ebf6:	4bb3      	ldr	r3, [pc, #716]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebfe:	2b18      	cmp	r3, #24
 800ec00:	f200 8155 	bhi.w	800eeae <HAL_RCC_GetSysClockFreq+0x2be>
 800ec04:	a201      	add	r2, pc, #4	; (adr r2, 800ec0c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ec06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0a:	bf00      	nop
 800ec0c:	0800ec71 	.word	0x0800ec71
 800ec10:	0800eeaf 	.word	0x0800eeaf
 800ec14:	0800eeaf 	.word	0x0800eeaf
 800ec18:	0800eeaf 	.word	0x0800eeaf
 800ec1c:	0800eeaf 	.word	0x0800eeaf
 800ec20:	0800eeaf 	.word	0x0800eeaf
 800ec24:	0800eeaf 	.word	0x0800eeaf
 800ec28:	0800eeaf 	.word	0x0800eeaf
 800ec2c:	0800ec97 	.word	0x0800ec97
 800ec30:	0800eeaf 	.word	0x0800eeaf
 800ec34:	0800eeaf 	.word	0x0800eeaf
 800ec38:	0800eeaf 	.word	0x0800eeaf
 800ec3c:	0800eeaf 	.word	0x0800eeaf
 800ec40:	0800eeaf 	.word	0x0800eeaf
 800ec44:	0800eeaf 	.word	0x0800eeaf
 800ec48:	0800eeaf 	.word	0x0800eeaf
 800ec4c:	0800ec9d 	.word	0x0800ec9d
 800ec50:	0800eeaf 	.word	0x0800eeaf
 800ec54:	0800eeaf 	.word	0x0800eeaf
 800ec58:	0800eeaf 	.word	0x0800eeaf
 800ec5c:	0800eeaf 	.word	0x0800eeaf
 800ec60:	0800eeaf 	.word	0x0800eeaf
 800ec64:	0800eeaf 	.word	0x0800eeaf
 800ec68:	0800eeaf 	.word	0x0800eeaf
 800ec6c:	0800eca3 	.word	0x0800eca3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec70:	4b94      	ldr	r3, [pc, #592]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f003 0320 	and.w	r3, r3, #32
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d009      	beq.n	800ec90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec7c:	4b91      	ldr	r3, [pc, #580]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	08db      	lsrs	r3, r3, #3
 800ec82:	f003 0303 	and.w	r3, r3, #3
 800ec86:	4a90      	ldr	r2, [pc, #576]	; (800eec8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ec88:	fa22 f303 	lsr.w	r3, r2, r3
 800ec8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ec8e:	e111      	b.n	800eeb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ec90:	4b8d      	ldr	r3, [pc, #564]	; (800eec8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ec92:	61bb      	str	r3, [r7, #24]
      break;
 800ec94:	e10e      	b.n	800eeb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ec96:	4b8d      	ldr	r3, [pc, #564]	; (800eecc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ec98:	61bb      	str	r3, [r7, #24]
      break;
 800ec9a:	e10b      	b.n	800eeb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ec9c:	4b8c      	ldr	r3, [pc, #560]	; (800eed0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ec9e:	61bb      	str	r3, [r7, #24]
      break;
 800eca0:	e108      	b.n	800eeb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eca2:	4b88      	ldr	r3, [pc, #544]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca6:	f003 0303 	and.w	r3, r3, #3
 800ecaa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ecac:	4b85      	ldr	r3, [pc, #532]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb0:	091b      	lsrs	r3, r3, #4
 800ecb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ecb8:	4b82      	ldr	r3, [pc, #520]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ecc2:	4b80      	ldr	r3, [pc, #512]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecc6:	08db      	lsrs	r3, r3, #3
 800ecc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	fb02 f303 	mul.w	r3, r2, r3
 800ecd2:	ee07 3a90 	vmov	s15, r3
 800ecd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f000 80e1 	beq.w	800eea8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	f000 8083 	beq.w	800edf4 <HAL_RCC_GetSysClockFreq+0x204>
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	f200 80a1 	bhi.w	800ee38 <HAL_RCC_GetSysClockFreq+0x248>
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <HAL_RCC_GetSysClockFreq+0x114>
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d056      	beq.n	800edb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ed02:	e099      	b.n	800ee38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed04:	4b6f      	ldr	r3, [pc, #444]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f003 0320 	and.w	r3, r3, #32
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d02d      	beq.n	800ed6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed10:	4b6c      	ldr	r3, [pc, #432]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	08db      	lsrs	r3, r3, #3
 800ed16:	f003 0303 	and.w	r3, r3, #3
 800ed1a:	4a6b      	ldr	r2, [pc, #428]	; (800eec8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ed1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ed20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	ee07 3a90 	vmov	s15, r3
 800ed28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	ee07 3a90 	vmov	s15, r3
 800ed32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed3a:	4b62      	ldr	r3, [pc, #392]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed42:	ee07 3a90 	vmov	s15, r3
 800ed46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800eed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ed6a:	e087      	b.n	800ee7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	ee07 3a90 	vmov	s15, r3
 800ed72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed76:	eddf 6a58 	vldr	s13, [pc, #352]	; 800eed8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ed7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed7e:	4b51      	ldr	r3, [pc, #324]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed86:	ee07 3a90 	vmov	s15, r3
 800ed8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed92:	eddf 5a50 	vldr	s11, [pc, #320]	; 800eed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800edae:	e065      	b.n	800ee7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	ee07 3a90 	vmov	s15, r3
 800edb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edba:	eddf 6a48 	vldr	s13, [pc, #288]	; 800eedc <HAL_RCC_GetSysClockFreq+0x2ec>
 800edbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800edc2:	4b40      	ldr	r3, [pc, #256]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800edc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edca:	ee07 3a90 	vmov	s15, r3
 800edce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800edd6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800eed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800edda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ede2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ede6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800edf2:	e043      	b.n	800ee7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	ee07 3a90 	vmov	s15, r3
 800edfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edfe:	eddf 6a38 	vldr	s13, [pc, #224]	; 800eee0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ee02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee06:	4b2f      	ldr	r3, [pc, #188]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee0e:	ee07 3a90 	vmov	s15, r3
 800ee12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee16:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800eed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee36:	e021      	b.n	800ee7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	ee07 3a90 	vmov	s15, r3
 800ee3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee42:	eddf 6a26 	vldr	s13, [pc, #152]	; 800eedc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ee46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee4a:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee52:	ee07 3a90 	vmov	s15, r3
 800ee56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800eed4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ee7c:	4b11      	ldr	r3, [pc, #68]	; (800eec4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee80:	0a5b      	lsrs	r3, r3, #9
 800ee82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee86:	3301      	adds	r3, #1
 800ee88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	ee07 3a90 	vmov	s15, r3
 800ee90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ee94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eea0:	ee17 3a90 	vmov	r3, s15
 800eea4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800eea6:	e005      	b.n	800eeb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	61bb      	str	r3, [r7, #24]
      break;
 800eeac:	e002      	b.n	800eeb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800eeae:	4b07      	ldr	r3, [pc, #28]	; (800eecc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eeb0:	61bb      	str	r3, [r7, #24]
      break;
 800eeb2:	bf00      	nop
  }

  return sysclockfreq;
 800eeb4:	69bb      	ldr	r3, [r7, #24]
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3724      	adds	r7, #36	; 0x24
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	58024400 	.word	0x58024400
 800eec8:	03d09000 	.word	0x03d09000
 800eecc:	003d0900 	.word	0x003d0900
 800eed0:	017d7840 	.word	0x017d7840
 800eed4:	46000000 	.word	0x46000000
 800eed8:	4c742400 	.word	0x4c742400
 800eedc:	4a742400 	.word	0x4a742400
 800eee0:	4bbebc20 	.word	0x4bbebc20

0800eee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800eeea:	f7ff fe81 	bl	800ebf0 <HAL_RCC_GetSysClockFreq>
 800eeee:	4602      	mov	r2, r0
 800eef0:	4b10      	ldr	r3, [pc, #64]	; (800ef34 <HAL_RCC_GetHCLKFreq+0x50>)
 800eef2:	699b      	ldr	r3, [r3, #24]
 800eef4:	0a1b      	lsrs	r3, r3, #8
 800eef6:	f003 030f 	and.w	r3, r3, #15
 800eefa:	490f      	ldr	r1, [pc, #60]	; (800ef38 <HAL_RCC_GetHCLKFreq+0x54>)
 800eefc:	5ccb      	ldrb	r3, [r1, r3]
 800eefe:	f003 031f 	and.w	r3, r3, #31
 800ef02:	fa22 f303 	lsr.w	r3, r2, r3
 800ef06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ef08:	4b0a      	ldr	r3, [pc, #40]	; (800ef34 <HAL_RCC_GetHCLKFreq+0x50>)
 800ef0a:	699b      	ldr	r3, [r3, #24]
 800ef0c:	f003 030f 	and.w	r3, r3, #15
 800ef10:	4a09      	ldr	r2, [pc, #36]	; (800ef38 <HAL_RCC_GetHCLKFreq+0x54>)
 800ef12:	5cd3      	ldrb	r3, [r2, r3]
 800ef14:	f003 031f 	and.w	r3, r3, #31
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef1e:	4a07      	ldr	r2, [pc, #28]	; (800ef3c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ef22:	4a07      	ldr	r2, [pc, #28]	; (800ef40 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ef28:	4b04      	ldr	r3, [pc, #16]	; (800ef3c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	58024400 	.word	0x58024400
 800ef38:	0801b544 	.word	0x0801b544
 800ef3c:	240000c4 	.word	0x240000c4
 800ef40:	240000c0 	.word	0x240000c0

0800ef44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ef48:	f7ff ffcc 	bl	800eee4 <HAL_RCC_GetHCLKFreq>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef50:	69db      	ldr	r3, [r3, #28]
 800ef52:	091b      	lsrs	r3, r3, #4
 800ef54:	f003 0307 	and.w	r3, r3, #7
 800ef58:	4904      	ldr	r1, [pc, #16]	; (800ef6c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ef5a:	5ccb      	ldrb	r3, [r1, r3]
 800ef5c:	f003 031f 	and.w	r3, r3, #31
 800ef60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	58024400 	.word	0x58024400
 800ef6c:	0801b544 	.word	0x0801b544

0800ef70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ef74:	f7ff ffb6 	bl	800eee4 <HAL_RCC_GetHCLKFreq>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ef7c:	69db      	ldr	r3, [r3, #28]
 800ef7e:	0a1b      	lsrs	r3, r3, #8
 800ef80:	f003 0307 	and.w	r3, r3, #7
 800ef84:	4904      	ldr	r1, [pc, #16]	; (800ef98 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ef86:	5ccb      	ldrb	r3, [r1, r3]
 800ef88:	f003 031f 	and.w	r3, r3, #31
 800ef8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	58024400 	.word	0x58024400
 800ef98:	0801b544 	.word	0x0801b544

0800ef9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	223f      	movs	r2, #63	; 0x3f
 800efaa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800efac:	4b1a      	ldr	r3, [pc, #104]	; (800f018 <HAL_RCC_GetClockConfig+0x7c>)
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	f003 0207 	and.w	r2, r3, #7
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800efb8:	4b17      	ldr	r3, [pc, #92]	; (800f018 <HAL_RCC_GetClockConfig+0x7c>)
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800efc4:	4b14      	ldr	r3, [pc, #80]	; (800f018 <HAL_RCC_GetClockConfig+0x7c>)
 800efc6:	699b      	ldr	r3, [r3, #24]
 800efc8:	f003 020f 	and.w	r2, r3, #15
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800efd0:	4b11      	ldr	r3, [pc, #68]	; (800f018 <HAL_RCC_GetClockConfig+0x7c>)
 800efd2:	699b      	ldr	r3, [r3, #24]
 800efd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800efdc:	4b0e      	ldr	r3, [pc, #56]	; (800f018 <HAL_RCC_GetClockConfig+0x7c>)
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800efe8:	4b0b      	ldr	r3, [pc, #44]	; (800f018 <HAL_RCC_GetClockConfig+0x7c>)
 800efea:	69db      	ldr	r3, [r3, #28]
 800efec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800eff4:	4b08      	ldr	r3, [pc, #32]	; (800f018 <HAL_RCC_GetClockConfig+0x7c>)
 800eff6:	6a1b      	ldr	r3, [r3, #32]
 800eff8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f000:	4b06      	ldr	r3, [pc, #24]	; (800f01c <HAL_RCC_GetClockConfig+0x80>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f003 020f 	and.w	r2, r3, #15
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	601a      	str	r2, [r3, #0]
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	58024400 	.word	0x58024400
 800f01c:	52002000 	.word	0x52002000

0800f020 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f024:	b0ca      	sub	sp, #296	; 0x128
 800f026:	af00      	add	r7, sp, #0
 800f028:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f02c:	2300      	movs	r3, #0
 800f02e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f032:	2300      	movs	r3, #0
 800f034:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800f044:	2500      	movs	r5, #0
 800f046:	ea54 0305 	orrs.w	r3, r4, r5
 800f04a:	d049      	beq.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f056:	d02f      	beq.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f05c:	d828      	bhi.n	800f0b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f05e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f062:	d01a      	beq.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f068:	d822      	bhi.n	800f0b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d003      	beq.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f06e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f072:	d007      	beq.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f074:	e01c      	b.n	800f0b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f076:	4bb8      	ldr	r3, [pc, #736]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07a:	4ab7      	ldr	r2, [pc, #732]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f07c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f080:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f082:	e01a      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f088:	3308      	adds	r3, #8
 800f08a:	2102      	movs	r1, #2
 800f08c:	4618      	mov	r0, r3
 800f08e:	f002 fb61 	bl	8011754 <RCCEx_PLL2_Config>
 800f092:	4603      	mov	r3, r0
 800f094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f098:	e00f      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f09e:	3328      	adds	r3, #40	; 0x28
 800f0a0:	2102      	movs	r1, #2
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f002 fc08 	bl	80118b8 <RCCEx_PLL3_Config>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f0ae:	e004      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f0b6:	e000      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f0b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d10a      	bne.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f0c2:	4ba5      	ldr	r3, [pc, #660]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0d0:	4aa1      	ldr	r2, [pc, #644]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0d2:	430b      	orrs	r3, r1
 800f0d4:	6513      	str	r3, [r2, #80]	; 0x50
 800f0d6:	e003      	b.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800f0ec:	f04f 0900 	mov.w	r9, #0
 800f0f0:	ea58 0309 	orrs.w	r3, r8, r9
 800f0f4:	d047      	beq.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0fc:	2b04      	cmp	r3, #4
 800f0fe:	d82a      	bhi.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f100:	a201      	add	r2, pc, #4	; (adr r2, 800f108 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f106:	bf00      	nop
 800f108:	0800f11d 	.word	0x0800f11d
 800f10c:	0800f12b 	.word	0x0800f12b
 800f110:	0800f141 	.word	0x0800f141
 800f114:	0800f15f 	.word	0x0800f15f
 800f118:	0800f15f 	.word	0x0800f15f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f11c:	4b8e      	ldr	r3, [pc, #568]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f120:	4a8d      	ldr	r2, [pc, #564]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f128:	e01a      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f12e:	3308      	adds	r3, #8
 800f130:	2100      	movs	r1, #0
 800f132:	4618      	mov	r0, r3
 800f134:	f002 fb0e 	bl	8011754 <RCCEx_PLL2_Config>
 800f138:	4603      	mov	r3, r0
 800f13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f13e:	e00f      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f144:	3328      	adds	r3, #40	; 0x28
 800f146:	2100      	movs	r1, #0
 800f148:	4618      	mov	r0, r3
 800f14a:	f002 fbb5 	bl	80118b8 <RCCEx_PLL3_Config>
 800f14e:	4603      	mov	r3, r0
 800f150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f154:	e004      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f156:	2301      	movs	r3, #1
 800f158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f15c:	e000      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f15e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f164:	2b00      	cmp	r3, #0
 800f166:	d10a      	bne.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f168:	4b7b      	ldr	r3, [pc, #492]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f16c:	f023 0107 	bic.w	r1, r3, #7
 800f170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f176:	4a78      	ldr	r2, [pc, #480]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f178:	430b      	orrs	r3, r1
 800f17a:	6513      	str	r3, [r2, #80]	; 0x50
 800f17c:	e003      	b.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f17e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f192:	f04f 0b00 	mov.w	fp, #0
 800f196:	ea5a 030b 	orrs.w	r3, sl, fp
 800f19a:	d04c      	beq.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1a6:	d030      	beq.n	800f20a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f1a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1ac:	d829      	bhi.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f1ae:	2bc0      	cmp	r3, #192	; 0xc0
 800f1b0:	d02d      	beq.n	800f20e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f1b2:	2bc0      	cmp	r3, #192	; 0xc0
 800f1b4:	d825      	bhi.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f1b6:	2b80      	cmp	r3, #128	; 0x80
 800f1b8:	d018      	beq.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f1ba:	2b80      	cmp	r3, #128	; 0x80
 800f1bc:	d821      	bhi.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d002      	beq.n	800f1c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f1c2:	2b40      	cmp	r3, #64	; 0x40
 800f1c4:	d007      	beq.n	800f1d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f1c6:	e01c      	b.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1c8:	4b63      	ldr	r3, [pc, #396]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1cc:	4a62      	ldr	r2, [pc, #392]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f1d4:	e01c      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1da:	3308      	adds	r3, #8
 800f1dc:	2100      	movs	r1, #0
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f002 fab8 	bl	8011754 <RCCEx_PLL2_Config>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f1ea:	e011      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1f0:	3328      	adds	r3, #40	; 0x28
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f002 fb5f 	bl	80118b8 <RCCEx_PLL3_Config>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f200:	e006      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f208:	e002      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f20a:	bf00      	nop
 800f20c:	e000      	b.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f20e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10a      	bne.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f218:	4b4f      	ldr	r3, [pc, #316]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f21c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f226:	4a4c      	ldr	r2, [pc, #304]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f228:	430b      	orrs	r3, r1
 800f22a:	6513      	str	r3, [r2, #80]	; 0x50
 800f22c:	e003      	b.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f242:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f246:	2300      	movs	r3, #0
 800f248:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f24c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f250:	460b      	mov	r3, r1
 800f252:	4313      	orrs	r3, r2
 800f254:	d053      	beq.n	800f2fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f25a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f25e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f262:	d035      	beq.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f268:	d82e      	bhi.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f26a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f26e:	d031      	beq.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f270:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f274:	d828      	bhi.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f27a:	d01a      	beq.n	800f2b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f27c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f280:	d822      	bhi.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f282:	2b00      	cmp	r3, #0
 800f284:	d003      	beq.n	800f28e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f28a:	d007      	beq.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f28c:	e01c      	b.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f28e:	4b32      	ldr	r3, [pc, #200]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f292:	4a31      	ldr	r2, [pc, #196]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f298:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f29a:	e01c      	b.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f002 fa55 	bl	8011754 <RCCEx_PLL2_Config>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f2b0:	e011      	b.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2b6:	3328      	adds	r3, #40	; 0x28
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f002 fafc 	bl	80118b8 <RCCEx_PLL3_Config>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f2c6:	e006      	b.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2ce:	e002      	b.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f2d0:	bf00      	nop
 800f2d2:	e000      	b.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10b      	bne.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f2de:	4b1e      	ldr	r3, [pc, #120]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2e2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f2ee:	4a1a      	ldr	r2, [pc, #104]	; (800f358 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2f0:	430b      	orrs	r3, r1
 800f2f2:	6593      	str	r3, [r2, #88]	; 0x58
 800f2f4:	e003      	b.n	800f2fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f306:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f30a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f30e:	2300      	movs	r3, #0
 800f310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f314:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f318:	460b      	mov	r3, r1
 800f31a:	4313      	orrs	r3, r2
 800f31c:	d056      	beq.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f32a:	d038      	beq.n	800f39e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f32c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f330:	d831      	bhi.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f332:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f336:	d034      	beq.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f338:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f33c:	d82b      	bhi.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f33e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f342:	d01d      	beq.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f348:	d825      	bhi.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d006      	beq.n	800f35c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f34e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f352:	d00a      	beq.n	800f36a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f354:	e01f      	b.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f356:	bf00      	nop
 800f358:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f35c:	4ba2      	ldr	r3, [pc, #648]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f360:	4aa1      	ldr	r2, [pc, #644]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f368:	e01c      	b.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f36e:	3308      	adds	r3, #8
 800f370:	2100      	movs	r1, #0
 800f372:	4618      	mov	r0, r3
 800f374:	f002 f9ee 	bl	8011754 <RCCEx_PLL2_Config>
 800f378:	4603      	mov	r3, r0
 800f37a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f37e:	e011      	b.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f384:	3328      	adds	r3, #40	; 0x28
 800f386:	2100      	movs	r1, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	f002 fa95 	bl	80118b8 <RCCEx_PLL3_Config>
 800f38e:	4603      	mov	r3, r0
 800f390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f394:	e006      	b.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f396:	2301      	movs	r3, #1
 800f398:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f39c:	e002      	b.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f39e:	bf00      	nop
 800f3a0:	e000      	b.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f3a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10b      	bne.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f3ac:	4b8e      	ldr	r3, [pc, #568]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f3bc:	4a8a      	ldr	r2, [pc, #552]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3be:	430b      	orrs	r3, r1
 800f3c0:	6593      	str	r3, [r2, #88]	; 0x58
 800f3c2:	e003      	b.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f3d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f3e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	d03a      	beq.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3f2:	2b30      	cmp	r3, #48	; 0x30
 800f3f4:	d01f      	beq.n	800f436 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f3f6:	2b30      	cmp	r3, #48	; 0x30
 800f3f8:	d819      	bhi.n	800f42e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f3fa:	2b20      	cmp	r3, #32
 800f3fc:	d00c      	beq.n	800f418 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f3fe:	2b20      	cmp	r3, #32
 800f400:	d815      	bhi.n	800f42e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f402:	2b00      	cmp	r3, #0
 800f404:	d019      	beq.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f406:	2b10      	cmp	r3, #16
 800f408:	d111      	bne.n	800f42e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f40a:	4b77      	ldr	r3, [pc, #476]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f40e:	4a76      	ldr	r2, [pc, #472]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f414:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f416:	e011      	b.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f41c:	3308      	adds	r3, #8
 800f41e:	2102      	movs	r1, #2
 800f420:	4618      	mov	r0, r3
 800f422:	f002 f997 	bl	8011754 <RCCEx_PLL2_Config>
 800f426:	4603      	mov	r3, r0
 800f428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f42c:	e006      	b.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f434:	e002      	b.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f436:	bf00      	nop
 800f438:	e000      	b.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f43c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10a      	bne.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f444:	4b68      	ldr	r3, [pc, #416]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f448:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f452:	4a65      	ldr	r2, [pc, #404]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f454:	430b      	orrs	r3, r1
 800f456:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f458:	e003      	b.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f45e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f46e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f472:	2300      	movs	r3, #0
 800f474:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f478:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f47c:	460b      	mov	r3, r1
 800f47e:	4313      	orrs	r3, r2
 800f480:	d051      	beq.n	800f526 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f48c:	d035      	beq.n	800f4fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f48e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f492:	d82e      	bhi.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f498:	d031      	beq.n	800f4fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f49a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f49e:	d828      	bhi.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4a4:	d01a      	beq.n	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f4a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4aa:	d822      	bhi.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d003      	beq.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4b4:	d007      	beq.n	800f4c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f4b6:	e01c      	b.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4b8:	4b4b      	ldr	r3, [pc, #300]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4bc:	4a4a      	ldr	r2, [pc, #296]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4c4:	e01c      	b.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ca:	3308      	adds	r3, #8
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f002 f940 	bl	8011754 <RCCEx_PLL2_Config>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4da:	e011      	b.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4e0:	3328      	adds	r3, #40	; 0x28
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f002 f9e7 	bl	80118b8 <RCCEx_PLL3_Config>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4f0:	e006      	b.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f4f8:	e002      	b.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f4fa:	bf00      	nop
 800f4fc:	e000      	b.n	800f500 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f4fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10a      	bne.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f508:	4b37      	ldr	r3, [pc, #220]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f50c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f516:	4a34      	ldr	r2, [pc, #208]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f518:	430b      	orrs	r3, r1
 800f51a:	6513      	str	r3, [r2, #80]	; 0x50
 800f51c:	e003      	b.n	800f526 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f51e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f522:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f536:	2300      	movs	r3, #0
 800f538:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f53c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f540:	460b      	mov	r3, r1
 800f542:	4313      	orrs	r3, r2
 800f544:	d056      	beq.n	800f5f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f54a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f54c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f550:	d033      	beq.n	800f5ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f556:	d82c      	bhi.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f558:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f55c:	d02f      	beq.n	800f5be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f55e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f562:	d826      	bhi.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f564:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f568:	d02b      	beq.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f56a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f56e:	d820      	bhi.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f574:	d012      	beq.n	800f59c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f57a:	d81a      	bhi.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d022      	beq.n	800f5c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f584:	d115      	bne.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f58a:	3308      	adds	r3, #8
 800f58c:	2101      	movs	r1, #1
 800f58e:	4618      	mov	r0, r3
 800f590:	f002 f8e0 	bl	8011754 <RCCEx_PLL2_Config>
 800f594:	4603      	mov	r3, r0
 800f596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f59a:	e015      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5a0:	3328      	adds	r3, #40	; 0x28
 800f5a2:	2101      	movs	r1, #1
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f002 f987 	bl	80118b8 <RCCEx_PLL3_Config>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f5b0:	e00a      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5b8:	e006      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5ba:	bf00      	nop
 800f5bc:	e004      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5be:	bf00      	nop
 800f5c0:	e002      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5c2:	bf00      	nop
 800f5c4:	e000      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d10d      	bne.n	800f5ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f5d0:	4b05      	ldr	r3, [pc, #20]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5de:	4a02      	ldr	r2, [pc, #8]	; (800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f5e0:	430b      	orrs	r3, r1
 800f5e2:	6513      	str	r3, [r2, #80]	; 0x50
 800f5e4:	e006      	b.n	800f5f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f5e6:	bf00      	nop
 800f5e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f604:	2300      	movs	r3, #0
 800f606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f60a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f60e:	460b      	mov	r3, r1
 800f610:	4313      	orrs	r3, r2
 800f612:	d055      	beq.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f618:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f61c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f620:	d033      	beq.n	800f68a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f626:	d82c      	bhi.n	800f682 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f62c:	d02f      	beq.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f62e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f632:	d826      	bhi.n	800f682 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f634:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f638:	d02b      	beq.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f63a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f63e:	d820      	bhi.n	800f682 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f644:	d012      	beq.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f64a:	d81a      	bhi.n	800f682 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d022      	beq.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f654:	d115      	bne.n	800f682 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f65a:	3308      	adds	r3, #8
 800f65c:	2101      	movs	r1, #1
 800f65e:	4618      	mov	r0, r3
 800f660:	f002 f878 	bl	8011754 <RCCEx_PLL2_Config>
 800f664:	4603      	mov	r3, r0
 800f666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f66a:	e015      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f670:	3328      	adds	r3, #40	; 0x28
 800f672:	2101      	movs	r1, #1
 800f674:	4618      	mov	r0, r3
 800f676:	f002 f91f 	bl	80118b8 <RCCEx_PLL3_Config>
 800f67a:	4603      	mov	r3, r0
 800f67c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f680:	e00a      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f682:	2301      	movs	r3, #1
 800f684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f688:	e006      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f68a:	bf00      	nop
 800f68c:	e004      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f68e:	bf00      	nop
 800f690:	e002      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f692:	bf00      	nop
 800f694:	e000      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f696:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10b      	bne.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f6a0:	4ba3      	ldr	r3, [pc, #652]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6a4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f6b0:	4a9f      	ldr	r2, [pc, #636]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6b2:	430b      	orrs	r3, r1
 800f6b4:	6593      	str	r3, [r2, #88]	; 0x58
 800f6b6:	e003      	b.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f6cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f6da:	460b      	mov	r3, r1
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	d037      	beq.n	800f750 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6ea:	d00e      	beq.n	800f70a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f6ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6f0:	d816      	bhi.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d018      	beq.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f6f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6fa:	d111      	bne.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f6fc:	4b8c      	ldr	r3, [pc, #560]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f700:	4a8b      	ldr	r2, [pc, #556]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f708:	e00f      	b.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f70e:	3308      	adds	r3, #8
 800f710:	2101      	movs	r1, #1
 800f712:	4618      	mov	r0, r3
 800f714:	f002 f81e 	bl	8011754 <RCCEx_PLL2_Config>
 800f718:	4603      	mov	r3, r0
 800f71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f71e:	e004      	b.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f720:	2301      	movs	r3, #1
 800f722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f726:	e000      	b.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f72a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10a      	bne.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f732:	4b7f      	ldr	r3, [pc, #508]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f736:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f740:	4a7b      	ldr	r2, [pc, #492]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f742:	430b      	orrs	r3, r1
 800f744:	6513      	str	r3, [r2, #80]	; 0x50
 800f746:	e003      	b.n	800f750 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f74c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f758:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f75c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f760:	2300      	movs	r3, #0
 800f762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f766:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4313      	orrs	r3, r2
 800f76e:	d039      	beq.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f776:	2b03      	cmp	r3, #3
 800f778:	d81c      	bhi.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f77a:	a201      	add	r2, pc, #4	; (adr r2, 800f780 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f780:	0800f7bd 	.word	0x0800f7bd
 800f784:	0800f791 	.word	0x0800f791
 800f788:	0800f79f 	.word	0x0800f79f
 800f78c:	0800f7bd 	.word	0x0800f7bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f790:	4b67      	ldr	r3, [pc, #412]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f794:	4a66      	ldr	r2, [pc, #408]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f79a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f79c:	e00f      	b.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	2102      	movs	r1, #2
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f001 ffd4 	bl	8011754 <RCCEx_PLL2_Config>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f7b2:	e004      	b.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7ba:	e000      	b.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f7bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10a      	bne.n	800f7dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f7c6:	4b5a      	ldr	r3, [pc, #360]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ca:	f023 0103 	bic.w	r1, r3, #3
 800f7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7d4:	4a56      	ldr	r2, [pc, #344]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7d6:	430b      	orrs	r3, r1
 800f7d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f7da:	e003      	b.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f7f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f7fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f7fe:	460b      	mov	r3, r1
 800f800:	4313      	orrs	r3, r2
 800f802:	f000 809f 	beq.w	800f944 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f806:	4b4b      	ldr	r3, [pc, #300]	; (800f934 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a4a      	ldr	r2, [pc, #296]	; (800f934 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f80c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f810:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f812:	f7f6 fbb9 	bl	8005f88 <HAL_GetTick>
 800f816:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f81a:	e00b      	b.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f81c:	f7f6 fbb4 	bl	8005f88 <HAL_GetTick>
 800f820:	4602      	mov	r2, r0
 800f822:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	2b64      	cmp	r3, #100	; 0x64
 800f82a:	d903      	bls.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f82c:	2303      	movs	r3, #3
 800f82e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f832:	e005      	b.n	800f840 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f834:	4b3f      	ldr	r3, [pc, #252]	; (800f934 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0ed      	beq.n	800f81c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f844:	2b00      	cmp	r3, #0
 800f846:	d179      	bne.n	800f93c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f848:	4b39      	ldr	r3, [pc, #228]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f84a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f854:	4053      	eors	r3, r2
 800f856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d015      	beq.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f85e:	4b34      	ldr	r3, [pc, #208]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f86a:	4b31      	ldr	r3, [pc, #196]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f86e:	4a30      	ldr	r2, [pc, #192]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f874:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f876:	4b2e      	ldr	r3, [pc, #184]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f87a:	4a2d      	ldr	r2, [pc, #180]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f87c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f880:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f882:	4a2b      	ldr	r2, [pc, #172]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f884:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f888:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f88e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f896:	d118      	bne.n	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f898:	f7f6 fb76 	bl	8005f88 <HAL_GetTick>
 800f89c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f8a0:	e00d      	b.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8a2:	f7f6 fb71 	bl	8005f88 <HAL_GetTick>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f8ac:	1ad2      	subs	r2, r2, r3
 800f8ae:	f241 3388 	movw	r3, #5000	; 0x1388
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d903      	bls.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f8bc:	e005      	b.n	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f8be:	4b1c      	ldr	r3, [pc, #112]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8c2:	f003 0302 	and.w	r3, r3, #2
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d0eb      	beq.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d129      	bne.n	800f926 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8e2:	d10e      	bne.n	800f902 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f8e4:	4b12      	ldr	r3, [pc, #72]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8f4:	091a      	lsrs	r2, r3, #4
 800f8f6:	4b10      	ldr	r3, [pc, #64]	; (800f938 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f8f8:	4013      	ands	r3, r2
 800f8fa:	4a0d      	ldr	r2, [pc, #52]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8fc:	430b      	orrs	r3, r1
 800f8fe:	6113      	str	r3, [r2, #16]
 800f900:	e005      	b.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f902:	4b0b      	ldr	r3, [pc, #44]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f904:	691b      	ldr	r3, [r3, #16]
 800f906:	4a0a      	ldr	r2, [pc, #40]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f908:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f90c:	6113      	str	r3, [r2, #16]
 800f90e:	4b08      	ldr	r3, [pc, #32]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f910:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f91a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f91e:	4a04      	ldr	r2, [pc, #16]	; (800f930 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f920:	430b      	orrs	r3, r1
 800f922:	6713      	str	r3, [r2, #112]	; 0x70
 800f924:	e00e      	b.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f92a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f92e:	e009      	b.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f930:	58024400 	.word	0x58024400
 800f934:	58024800 	.word	0x58024800
 800f938:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f93c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94c:	f002 0301 	and.w	r3, r2, #1
 800f950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f954:	2300      	movs	r3, #0
 800f956:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f95a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f95e:	460b      	mov	r3, r1
 800f960:	4313      	orrs	r3, r2
 800f962:	f000 8089 	beq.w	800fa78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f96a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f96c:	2b28      	cmp	r3, #40	; 0x28
 800f96e:	d86b      	bhi.n	800fa48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f970:	a201      	add	r2, pc, #4	; (adr r2, 800f978 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f976:	bf00      	nop
 800f978:	0800fa51 	.word	0x0800fa51
 800f97c:	0800fa49 	.word	0x0800fa49
 800f980:	0800fa49 	.word	0x0800fa49
 800f984:	0800fa49 	.word	0x0800fa49
 800f988:	0800fa49 	.word	0x0800fa49
 800f98c:	0800fa49 	.word	0x0800fa49
 800f990:	0800fa49 	.word	0x0800fa49
 800f994:	0800fa49 	.word	0x0800fa49
 800f998:	0800fa1d 	.word	0x0800fa1d
 800f99c:	0800fa49 	.word	0x0800fa49
 800f9a0:	0800fa49 	.word	0x0800fa49
 800f9a4:	0800fa49 	.word	0x0800fa49
 800f9a8:	0800fa49 	.word	0x0800fa49
 800f9ac:	0800fa49 	.word	0x0800fa49
 800f9b0:	0800fa49 	.word	0x0800fa49
 800f9b4:	0800fa49 	.word	0x0800fa49
 800f9b8:	0800fa33 	.word	0x0800fa33
 800f9bc:	0800fa49 	.word	0x0800fa49
 800f9c0:	0800fa49 	.word	0x0800fa49
 800f9c4:	0800fa49 	.word	0x0800fa49
 800f9c8:	0800fa49 	.word	0x0800fa49
 800f9cc:	0800fa49 	.word	0x0800fa49
 800f9d0:	0800fa49 	.word	0x0800fa49
 800f9d4:	0800fa49 	.word	0x0800fa49
 800f9d8:	0800fa51 	.word	0x0800fa51
 800f9dc:	0800fa49 	.word	0x0800fa49
 800f9e0:	0800fa49 	.word	0x0800fa49
 800f9e4:	0800fa49 	.word	0x0800fa49
 800f9e8:	0800fa49 	.word	0x0800fa49
 800f9ec:	0800fa49 	.word	0x0800fa49
 800f9f0:	0800fa49 	.word	0x0800fa49
 800f9f4:	0800fa49 	.word	0x0800fa49
 800f9f8:	0800fa51 	.word	0x0800fa51
 800f9fc:	0800fa49 	.word	0x0800fa49
 800fa00:	0800fa49 	.word	0x0800fa49
 800fa04:	0800fa49 	.word	0x0800fa49
 800fa08:	0800fa49 	.word	0x0800fa49
 800fa0c:	0800fa49 	.word	0x0800fa49
 800fa10:	0800fa49 	.word	0x0800fa49
 800fa14:	0800fa49 	.word	0x0800fa49
 800fa18:	0800fa51 	.word	0x0800fa51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa20:	3308      	adds	r3, #8
 800fa22:	2101      	movs	r1, #1
 800fa24:	4618      	mov	r0, r3
 800fa26:	f001 fe95 	bl	8011754 <RCCEx_PLL2_Config>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa30:	e00f      	b.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa36:	3328      	adds	r3, #40	; 0x28
 800fa38:	2101      	movs	r1, #1
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f001 ff3c 	bl	80118b8 <RCCEx_PLL3_Config>
 800fa40:	4603      	mov	r3, r0
 800fa42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa46:	e004      	b.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa4e:	e000      	b.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800fa50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d10a      	bne.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fa5a:	4bbf      	ldr	r3, [pc, #764]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa5e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800fa62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa68:	4abb      	ldr	r2, [pc, #748]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa6a:	430b      	orrs	r3, r1
 800fa6c:	6553      	str	r3, [r2, #84]	; 0x54
 800fa6e:	e003      	b.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fa78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	f002 0302 	and.w	r3, r2, #2
 800fa84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fa8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800fa92:	460b      	mov	r3, r1
 800fa94:	4313      	orrs	r3, r2
 800fa96:	d041      	beq.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800fa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa9e:	2b05      	cmp	r3, #5
 800faa0:	d824      	bhi.n	800faec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800faa2:	a201      	add	r2, pc, #4	; (adr r2, 800faa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800faa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa8:	0800faf5 	.word	0x0800faf5
 800faac:	0800fac1 	.word	0x0800fac1
 800fab0:	0800fad7 	.word	0x0800fad7
 800fab4:	0800faf5 	.word	0x0800faf5
 800fab8:	0800faf5 	.word	0x0800faf5
 800fabc:	0800faf5 	.word	0x0800faf5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac4:	3308      	adds	r3, #8
 800fac6:	2101      	movs	r1, #1
 800fac8:	4618      	mov	r0, r3
 800faca:	f001 fe43 	bl	8011754 <RCCEx_PLL2_Config>
 800face:	4603      	mov	r3, r0
 800fad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fad4:	e00f      	b.n	800faf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fada:	3328      	adds	r3, #40	; 0x28
 800fadc:	2101      	movs	r1, #1
 800fade:	4618      	mov	r0, r3
 800fae0:	f001 feea 	bl	80118b8 <RCCEx_PLL3_Config>
 800fae4:	4603      	mov	r3, r0
 800fae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800faea:	e004      	b.n	800faf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800faec:	2301      	movs	r3, #1
 800faee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800faf2:	e000      	b.n	800faf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800faf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800faf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10a      	bne.n	800fb14 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fafe:	4b96      	ldr	r3, [pc, #600]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb02:	f023 0107 	bic.w	r1, r3, #7
 800fb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb0c:	4a92      	ldr	r2, [pc, #584]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb0e:	430b      	orrs	r3, r1
 800fb10:	6553      	str	r3, [r2, #84]	; 0x54
 800fb12:	e003      	b.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb24:	f002 0304 	and.w	r3, r2, #4
 800fb28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800fb36:	460b      	mov	r3, r1
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	d044      	beq.n	800fbc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fb3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb44:	2b05      	cmp	r3, #5
 800fb46:	d825      	bhi.n	800fb94 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800fb48:	a201      	add	r2, pc, #4	; (adr r2, 800fb50 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800fb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb4e:	bf00      	nop
 800fb50:	0800fb9d 	.word	0x0800fb9d
 800fb54:	0800fb69 	.word	0x0800fb69
 800fb58:	0800fb7f 	.word	0x0800fb7f
 800fb5c:	0800fb9d 	.word	0x0800fb9d
 800fb60:	0800fb9d 	.word	0x0800fb9d
 800fb64:	0800fb9d 	.word	0x0800fb9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb6c:	3308      	adds	r3, #8
 800fb6e:	2101      	movs	r1, #1
 800fb70:	4618      	mov	r0, r3
 800fb72:	f001 fdef 	bl	8011754 <RCCEx_PLL2_Config>
 800fb76:	4603      	mov	r3, r0
 800fb78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fb7c:	e00f      	b.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb82:	3328      	adds	r3, #40	; 0x28
 800fb84:	2101      	movs	r1, #1
 800fb86:	4618      	mov	r0, r3
 800fb88:	f001 fe96 	bl	80118b8 <RCCEx_PLL3_Config>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fb92:	e004      	b.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb94:	2301      	movs	r3, #1
 800fb96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb9a:	e000      	b.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800fb9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10b      	bne.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fba6:	4b6c      	ldr	r3, [pc, #432]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbaa:	f023 0107 	bic.w	r1, r3, #7
 800fbae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbb6:	4a68      	ldr	r2, [pc, #416]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbb8:	430b      	orrs	r3, r1
 800fbba:	6593      	str	r3, [r2, #88]	; 0x58
 800fbbc:	e003      	b.n	800fbc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbce:	f002 0320 	and.w	r3, r2, #32
 800fbd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fbdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	d055      	beq.n	800fc92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbf2:	d033      	beq.n	800fc5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800fbf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbf8:	d82c      	bhi.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fbfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbfe:	d02f      	beq.n	800fc60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800fc00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc04:	d826      	bhi.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc0a:	d02b      	beq.n	800fc64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800fc0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc10:	d820      	bhi.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc16:	d012      	beq.n	800fc3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800fc18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc1c:	d81a      	bhi.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d022      	beq.n	800fc68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800fc22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc26:	d115      	bne.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc2c:	3308      	adds	r3, #8
 800fc2e:	2100      	movs	r1, #0
 800fc30:	4618      	mov	r0, r3
 800fc32:	f001 fd8f 	bl	8011754 <RCCEx_PLL2_Config>
 800fc36:	4603      	mov	r3, r0
 800fc38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fc3c:	e015      	b.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc42:	3328      	adds	r3, #40	; 0x28
 800fc44:	2102      	movs	r1, #2
 800fc46:	4618      	mov	r0, r3
 800fc48:	f001 fe36 	bl	80118b8 <RCCEx_PLL3_Config>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fc52:	e00a      	b.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc54:	2301      	movs	r3, #1
 800fc56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc5a:	e006      	b.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc5c:	bf00      	nop
 800fc5e:	e004      	b.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc60:	bf00      	nop
 800fc62:	e002      	b.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc64:	bf00      	nop
 800fc66:	e000      	b.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d10b      	bne.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fc72:	4b39      	ldr	r3, [pc, #228]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc76:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc82:	4a35      	ldr	r2, [pc, #212]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc84:	430b      	orrs	r3, r1
 800fc86:	6553      	str	r3, [r2, #84]	; 0x54
 800fc88:	e003      	b.n	800fc92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800fc9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fca2:	2300      	movs	r3, #0
 800fca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fca8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	d058      	beq.n	800fd64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fcba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fcbe:	d033      	beq.n	800fd28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800fcc0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fcc4:	d82c      	bhi.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcca:	d02f      	beq.n	800fd2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800fccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcd0:	d826      	bhi.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fcd6:	d02b      	beq.n	800fd30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800fcd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fcdc:	d820      	bhi.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fce2:	d012      	beq.n	800fd0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800fce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fce8:	d81a      	bhi.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d022      	beq.n	800fd34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fcee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcf2:	d115      	bne.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fcf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcf8:	3308      	adds	r3, #8
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f001 fd29 	bl	8011754 <RCCEx_PLL2_Config>
 800fd02:	4603      	mov	r3, r0
 800fd04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fd08:	e015      	b.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd0e:	3328      	adds	r3, #40	; 0x28
 800fd10:	2102      	movs	r1, #2
 800fd12:	4618      	mov	r0, r3
 800fd14:	f001 fdd0 	bl	80118b8 <RCCEx_PLL3_Config>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fd1e:	e00a      	b.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd20:	2301      	movs	r3, #1
 800fd22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fd26:	e006      	b.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd28:	bf00      	nop
 800fd2a:	e004      	b.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd2c:	bf00      	nop
 800fd2e:	e002      	b.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd30:	bf00      	nop
 800fd32:	e000      	b.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10e      	bne.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fd3e:	4b06      	ldr	r3, [pc, #24]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd42:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800fd46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fd4e:	4a02      	ldr	r2, [pc, #8]	; (800fd58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fd50:	430b      	orrs	r3, r1
 800fd52:	6593      	str	r3, [r2, #88]	; 0x58
 800fd54:	e006      	b.n	800fd64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800fd56:	bf00      	nop
 800fd58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800fd70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fd74:	2300      	movs	r3, #0
 800fd76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fd7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4313      	orrs	r3, r2
 800fd82:	d055      	beq.n	800fe30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fd8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fd90:	d033      	beq.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800fd92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fd96:	d82c      	bhi.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fd98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd9c:	d02f      	beq.n	800fdfe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800fd9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fda2:	d826      	bhi.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fda4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fda8:	d02b      	beq.n	800fe02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800fdaa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fdae:	d820      	bhi.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fdb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdb4:	d012      	beq.n	800fddc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800fdb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdba:	d81a      	bhi.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d022      	beq.n	800fe06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800fdc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fdc4:	d115      	bne.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fdc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdca:	3308      	adds	r3, #8
 800fdcc:	2100      	movs	r1, #0
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f001 fcc0 	bl	8011754 <RCCEx_PLL2_Config>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fdda:	e015      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fde0:	3328      	adds	r3, #40	; 0x28
 800fde2:	2102      	movs	r1, #2
 800fde4:	4618      	mov	r0, r3
 800fde6:	f001 fd67 	bl	80118b8 <RCCEx_PLL3_Config>
 800fdea:	4603      	mov	r3, r0
 800fdec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fdf0:	e00a      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fdf8:	e006      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fdfa:	bf00      	nop
 800fdfc:	e004      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fdfe:	bf00      	nop
 800fe00:	e002      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe02:	bf00      	nop
 800fe04:	e000      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d10b      	bne.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fe10:	4ba1      	ldr	r3, [pc, #644]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe14:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fe18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fe20:	4a9d      	ldr	r2, [pc, #628]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe22:	430b      	orrs	r3, r1
 800fe24:	6593      	str	r3, [r2, #88]	; 0x58
 800fe26:	e003      	b.n	800fe30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fe30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe38:	f002 0308 	and.w	r3, r2, #8
 800fe3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe40:	2300      	movs	r3, #0
 800fe42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	d01e      	beq.n	800fe8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fe50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe5c:	d10c      	bne.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fe5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe62:	3328      	adds	r3, #40	; 0x28
 800fe64:	2102      	movs	r1, #2
 800fe66:	4618      	mov	r0, r3
 800fe68:	f001 fd26 	bl	80118b8 <RCCEx_PLL3_Config>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fe72:	2301      	movs	r3, #1
 800fe74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fe78:	4b87      	ldr	r3, [pc, #540]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe88:	4a83      	ldr	r2, [pc, #524]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe8a:	430b      	orrs	r3, r1
 800fe8c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fe8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe96:	f002 0310 	and.w	r3, r2, #16
 800fe9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fe9e:	2300      	movs	r3, #0
 800fea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fea4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fea8:	460b      	mov	r3, r1
 800feaa:	4313      	orrs	r3, r2
 800feac:	d01e      	beq.n	800feec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800feae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800feb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800feba:	d10c      	bne.n	800fed6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800febc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fec0:	3328      	adds	r3, #40	; 0x28
 800fec2:	2102      	movs	r1, #2
 800fec4:	4618      	mov	r0, r3
 800fec6:	f001 fcf7 	bl	80118b8 <RCCEx_PLL3_Config>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d002      	beq.n	800fed6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fed0:	2301      	movs	r3, #1
 800fed2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fed6:	4b70      	ldr	r3, [pc, #448]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800feda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fee6:	4a6c      	ldr	r2, [pc, #432]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fee8:	430b      	orrs	r3, r1
 800feea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800feec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fefc:	2300      	movs	r3, #0
 800fefe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ff06:	460b      	mov	r3, r1
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	d03e      	beq.n	800ff8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ff0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff18:	d022      	beq.n	800ff60 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ff1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff1e:	d81b      	bhi.n	800ff58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d003      	beq.n	800ff2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ff24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff28:	d00b      	beq.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ff2a:	e015      	b.n	800ff58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff30:	3308      	adds	r3, #8
 800ff32:	2100      	movs	r1, #0
 800ff34:	4618      	mov	r0, r3
 800ff36:	f001 fc0d 	bl	8011754 <RCCEx_PLL2_Config>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ff40:	e00f      	b.n	800ff62 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ff42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff46:	3328      	adds	r3, #40	; 0x28
 800ff48:	2102      	movs	r1, #2
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f001 fcb4 	bl	80118b8 <RCCEx_PLL3_Config>
 800ff50:	4603      	mov	r3, r0
 800ff52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ff56:	e004      	b.n	800ff62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ff5e:	e000      	b.n	800ff62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ff60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10b      	bne.n	800ff82 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ff6a:	4b4b      	ldr	r3, [pc, #300]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ff72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff7a:	4a47      	ldr	r2, [pc, #284]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff7c:	430b      	orrs	r3, r1
 800ff7e:	6593      	str	r3, [r2, #88]	; 0x58
 800ff80:	e003      	b.n	800ff8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ff8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ff96:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff98:	2300      	movs	r3, #0
 800ff9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ff9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	d03b      	beq.n	801001e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ffa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ffb2:	d01f      	beq.n	800fff4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ffb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ffb8:	d818      	bhi.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ffba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffbe:	d003      	beq.n	800ffc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ffc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ffc4:	d007      	beq.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ffc6:	e011      	b.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ffc8:	4b33      	ldr	r3, [pc, #204]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffcc:	4a32      	ldr	r2, [pc, #200]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ffd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ffd4:	e00f      	b.n	800fff6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ffd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffda:	3328      	adds	r3, #40	; 0x28
 800ffdc:	2101      	movs	r1, #1
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f001 fc6a 	bl	80118b8 <RCCEx_PLL3_Config>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ffea:	e004      	b.n	800fff6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ffec:	2301      	movs	r3, #1
 800ffee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fff2:	e000      	b.n	800fff6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d10b      	bne.n	8010016 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fffe:	4b26      	ldr	r3, [pc, #152]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010002:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801000a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801000e:	4a22      	ldr	r2, [pc, #136]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010010:	430b      	orrs	r3, r1
 8010012:	6553      	str	r3, [r2, #84]	; 0x54
 8010014:	e003      	b.n	801001e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801001a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801001e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801002a:	673b      	str	r3, [r7, #112]	; 0x70
 801002c:	2300      	movs	r3, #0
 801002e:	677b      	str	r3, [r7, #116]	; 0x74
 8010030:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010034:	460b      	mov	r3, r1
 8010036:	4313      	orrs	r3, r2
 8010038:	d034      	beq.n	80100a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801003a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801003e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010040:	2b00      	cmp	r3, #0
 8010042:	d003      	beq.n	801004c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8010044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010048:	d007      	beq.n	801005a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801004a:	e011      	b.n	8010070 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801004c:	4b12      	ldr	r3, [pc, #72]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801004e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010050:	4a11      	ldr	r2, [pc, #68]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010058:	e00e      	b.n	8010078 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801005a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801005e:	3308      	adds	r3, #8
 8010060:	2102      	movs	r1, #2
 8010062:	4618      	mov	r0, r3
 8010064:	f001 fb76 	bl	8011754 <RCCEx_PLL2_Config>
 8010068:	4603      	mov	r3, r0
 801006a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801006e:	e003      	b.n	8010078 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010070:	2301      	movs	r3, #1
 8010072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10d      	bne.n	801009c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010080:	4b05      	ldr	r3, [pc, #20]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801008c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801008e:	4a02      	ldr	r2, [pc, #8]	; (8010098 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010090:	430b      	orrs	r3, r1
 8010092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010094:	e006      	b.n	80100a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8010096:	bf00      	nop
 8010098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801009c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80100a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80100a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80100b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80100b2:	2300      	movs	r3, #0
 80100b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80100ba:	460b      	mov	r3, r1
 80100bc:	4313      	orrs	r3, r2
 80100be:	d00c      	beq.n	80100da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80100c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100c4:	3328      	adds	r3, #40	; 0x28
 80100c6:	2102      	movs	r1, #2
 80100c8:	4618      	mov	r0, r3
 80100ca:	f001 fbf5 	bl	80118b8 <RCCEx_PLL3_Config>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80100d4:	2301      	movs	r3, #1
 80100d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80100da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80100e6:	663b      	str	r3, [r7, #96]	; 0x60
 80100e8:	2300      	movs	r3, #0
 80100ea:	667b      	str	r3, [r7, #100]	; 0x64
 80100ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80100f0:	460b      	mov	r3, r1
 80100f2:	4313      	orrs	r3, r2
 80100f4:	d038      	beq.n	8010168 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80100f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010102:	d018      	beq.n	8010136 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8010104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010108:	d811      	bhi.n	801012e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801010a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801010e:	d014      	beq.n	801013a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8010110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010114:	d80b      	bhi.n	801012e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010116:	2b00      	cmp	r3, #0
 8010118:	d011      	beq.n	801013e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801011a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801011e:	d106      	bne.n	801012e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010120:	4bc3      	ldr	r3, [pc, #780]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010124:	4ac2      	ldr	r2, [pc, #776]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801012a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801012c:	e008      	b.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801012e:	2301      	movs	r3, #1
 8010130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010134:	e004      	b.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010136:	bf00      	nop
 8010138:	e002      	b.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801013a:	bf00      	nop
 801013c:	e000      	b.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801013e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10b      	bne.n	8010160 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010148:	4bb9      	ldr	r3, [pc, #740]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801014a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801014c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010158:	4ab5      	ldr	r2, [pc, #724]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801015a:	430b      	orrs	r3, r1
 801015c:	6553      	str	r3, [r2, #84]	; 0x54
 801015e:	e003      	b.n	8010168 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010164:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801016c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010170:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8010174:	65bb      	str	r3, [r7, #88]	; 0x58
 8010176:	2300      	movs	r3, #0
 8010178:	65fb      	str	r3, [r7, #92]	; 0x5c
 801017a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801017e:	460b      	mov	r3, r1
 8010180:	4313      	orrs	r3, r2
 8010182:	d009      	beq.n	8010198 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010184:	4baa      	ldr	r3, [pc, #680]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010188:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801018c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010192:	4aa7      	ldr	r2, [pc, #668]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010194:	430b      	orrs	r3, r1
 8010196:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80101a4:	653b      	str	r3, [r7, #80]	; 0x50
 80101a6:	2300      	movs	r3, #0
 80101a8:	657b      	str	r3, [r7, #84]	; 0x54
 80101aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80101ae:	460b      	mov	r3, r1
 80101b0:	4313      	orrs	r3, r2
 80101b2:	d00a      	beq.n	80101ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80101b4:	4b9e      	ldr	r3, [pc, #632]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80101bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80101c4:	4a9a      	ldr	r2, [pc, #616]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101c6:	430b      	orrs	r3, r1
 80101c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80101ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80101d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80101d8:	2300      	movs	r3, #0
 80101da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80101e0:	460b      	mov	r3, r1
 80101e2:	4313      	orrs	r3, r2
 80101e4:	d009      	beq.n	80101fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80101e6:	4b92      	ldr	r3, [pc, #584]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101ea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80101ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101f4:	4a8e      	ldr	r2, [pc, #568]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101f6:	430b      	orrs	r3, r1
 80101f8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80101fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8010206:	643b      	str	r3, [r7, #64]	; 0x40
 8010208:	2300      	movs	r3, #0
 801020a:	647b      	str	r3, [r7, #68]	; 0x44
 801020c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010210:	460b      	mov	r3, r1
 8010212:	4313      	orrs	r3, r2
 8010214:	d00e      	beq.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010216:	4b86      	ldr	r3, [pc, #536]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	4a85      	ldr	r2, [pc, #532]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801021c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010220:	6113      	str	r3, [r2, #16]
 8010222:	4b83      	ldr	r3, [pc, #524]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010224:	6919      	ldr	r1, [r3, #16]
 8010226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801022a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801022e:	4a80      	ldr	r2, [pc, #512]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010230:	430b      	orrs	r3, r1
 8010232:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8010240:	63bb      	str	r3, [r7, #56]	; 0x38
 8010242:	2300      	movs	r3, #0
 8010244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010246:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801024a:	460b      	mov	r3, r1
 801024c:	4313      	orrs	r3, r2
 801024e:	d009      	beq.n	8010264 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010250:	4b77      	ldr	r3, [pc, #476]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010254:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801025c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801025e:	4a74      	ldr	r2, [pc, #464]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010260:	430b      	orrs	r3, r1
 8010262:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8010270:	633b      	str	r3, [r7, #48]	; 0x30
 8010272:	2300      	movs	r3, #0
 8010274:	637b      	str	r3, [r7, #52]	; 0x34
 8010276:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801027a:	460b      	mov	r3, r1
 801027c:	4313      	orrs	r3, r2
 801027e:	d00a      	beq.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010280:	4b6b      	ldr	r3, [pc, #428]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010284:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8010288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801028c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010290:	4a67      	ldr	r2, [pc, #412]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010292:	430b      	orrs	r3, r1
 8010294:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029e:	2100      	movs	r1, #0
 80102a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80102ac:	460b      	mov	r3, r1
 80102ae:	4313      	orrs	r3, r2
 80102b0:	d011      	beq.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80102b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102b6:	3308      	adds	r3, #8
 80102b8:	2100      	movs	r1, #0
 80102ba:	4618      	mov	r0, r3
 80102bc:	f001 fa4a 	bl	8011754 <RCCEx_PLL2_Config>
 80102c0:	4603      	mov	r3, r0
 80102c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80102c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d003      	beq.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80102d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102de:	2100      	movs	r1, #0
 80102e0:	6239      	str	r1, [r7, #32]
 80102e2:	f003 0302 	and.w	r3, r3, #2
 80102e6:	627b      	str	r3, [r7, #36]	; 0x24
 80102e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80102ec:	460b      	mov	r3, r1
 80102ee:	4313      	orrs	r3, r2
 80102f0:	d011      	beq.n	8010316 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80102f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102f6:	3308      	adds	r3, #8
 80102f8:	2101      	movs	r1, #1
 80102fa:	4618      	mov	r0, r3
 80102fc:	f001 fa2a 	bl	8011754 <RCCEx_PLL2_Config>
 8010300:	4603      	mov	r3, r0
 8010302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801030a:	2b00      	cmp	r3, #0
 801030c:	d003      	beq.n	8010316 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801030e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	2100      	movs	r1, #0
 8010320:	61b9      	str	r1, [r7, #24]
 8010322:	f003 0304 	and.w	r3, r3, #4
 8010326:	61fb      	str	r3, [r7, #28]
 8010328:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801032c:	460b      	mov	r3, r1
 801032e:	4313      	orrs	r3, r2
 8010330:	d011      	beq.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010336:	3308      	adds	r3, #8
 8010338:	2102      	movs	r1, #2
 801033a:	4618      	mov	r0, r3
 801033c:	f001 fa0a 	bl	8011754 <RCCEx_PLL2_Config>
 8010340:	4603      	mov	r3, r0
 8010342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801034a:	2b00      	cmp	r3, #0
 801034c:	d003      	beq.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801034e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010352:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035e:	2100      	movs	r1, #0
 8010360:	6139      	str	r1, [r7, #16]
 8010362:	f003 0308 	and.w	r3, r3, #8
 8010366:	617b      	str	r3, [r7, #20]
 8010368:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801036c:	460b      	mov	r3, r1
 801036e:	4313      	orrs	r3, r2
 8010370:	d011      	beq.n	8010396 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010376:	3328      	adds	r3, #40	; 0x28
 8010378:	2100      	movs	r1, #0
 801037a:	4618      	mov	r0, r3
 801037c:	f001 fa9c 	bl	80118b8 <RCCEx_PLL3_Config>
 8010380:	4603      	mov	r3, r0
 8010382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8010386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801038a:	2b00      	cmp	r3, #0
 801038c:	d003      	beq.n	8010396 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801038e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	2100      	movs	r1, #0
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	f003 0310 	and.w	r3, r3, #16
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80103ac:	460b      	mov	r3, r1
 80103ae:	4313      	orrs	r3, r2
 80103b0:	d011      	beq.n	80103d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80103b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103b6:	3328      	adds	r3, #40	; 0x28
 80103b8:	2101      	movs	r1, #1
 80103ba:	4618      	mov	r0, r3
 80103bc:	f001 fa7c 	bl	80118b8 <RCCEx_PLL3_Config>
 80103c0:	4603      	mov	r3, r0
 80103c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80103c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d003      	beq.n	80103d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80103d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103de:	2100      	movs	r1, #0
 80103e0:	6039      	str	r1, [r7, #0]
 80103e2:	f003 0320 	and.w	r3, r3, #32
 80103e6:	607b      	str	r3, [r7, #4]
 80103e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80103ec:	460b      	mov	r3, r1
 80103ee:	4313      	orrs	r3, r2
 80103f0:	d011      	beq.n	8010416 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80103f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103f6:	3328      	adds	r3, #40	; 0x28
 80103f8:	2102      	movs	r1, #2
 80103fa:	4618      	mov	r0, r3
 80103fc:	f001 fa5c 	bl	80118b8 <RCCEx_PLL3_Config>
 8010400:	4603      	mov	r3, r0
 8010402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801040e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8010416:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801041e:	2300      	movs	r3, #0
 8010420:	e000      	b.n	8010424 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8010422:	2301      	movs	r3, #1
}
 8010424:	4618      	mov	r0, r3
 8010426:	f507 7794 	add.w	r7, r7, #296	; 0x128
 801042a:	46bd      	mov	sp, r7
 801042c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010430:	58024400 	.word	0x58024400

08010434 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b090      	sub	sp, #64	; 0x40
 8010438:	af00      	add	r7, sp, #0
 801043a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801043e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010442:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8010446:	430b      	orrs	r3, r1
 8010448:	f040 8094 	bne.w	8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801044c:	4b9e      	ldr	r3, [pc, #632]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801044e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010450:	f003 0307 	and.w	r3, r3, #7
 8010454:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010458:	2b04      	cmp	r3, #4
 801045a:	f200 8087 	bhi.w	801056c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801045e:	a201      	add	r2, pc, #4	; (adr r2, 8010464 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010464:	08010479 	.word	0x08010479
 8010468:	080104a1 	.word	0x080104a1
 801046c:	080104c9 	.word	0x080104c9
 8010470:	08010565 	.word	0x08010565
 8010474:	080104f1 	.word	0x080104f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010478:	4b93      	ldr	r3, [pc, #588]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010484:	d108      	bne.n	8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801048a:	4618      	mov	r0, r3
 801048c:	f001 f810 	bl	80114b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010494:	f000 bd45 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010498:	2300      	movs	r3, #0
 801049a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801049c:	f000 bd41 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104a0:	4b89      	ldr	r3, [pc, #548]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104ac:	d108      	bne.n	80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104ae:	f107 0318 	add.w	r3, r7, #24
 80104b2:	4618      	mov	r0, r3
 80104b4:	f000 fd54 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104bc:	f000 bd31 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104c0:	2300      	movs	r3, #0
 80104c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104c4:	f000 bd2d 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104c8:	4b7f      	ldr	r3, [pc, #508]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104d4:	d108      	bne.n	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104d6:	f107 030c 	add.w	r3, r7, #12
 80104da:	4618      	mov	r0, r3
 80104dc:	f000 fe94 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104e4:	f000 bd1d 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104e8:	2300      	movs	r3, #0
 80104ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ec:	f000 bd19 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80104f0:	4b75      	ldr	r3, [pc, #468]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80104fa:	4b73      	ldr	r3, [pc, #460]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f003 0304 	and.w	r3, r3, #4
 8010502:	2b04      	cmp	r3, #4
 8010504:	d10c      	bne.n	8010520 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010508:	2b00      	cmp	r3, #0
 801050a:	d109      	bne.n	8010520 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801050c:	4b6e      	ldr	r3, [pc, #440]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	08db      	lsrs	r3, r3, #3
 8010512:	f003 0303 	and.w	r3, r3, #3
 8010516:	4a6d      	ldr	r2, [pc, #436]	; (80106cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010518:	fa22 f303 	lsr.w	r3, r2, r3
 801051c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801051e:	e01f      	b.n	8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010520:	4b69      	ldr	r3, [pc, #420]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801052c:	d106      	bne.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010534:	d102      	bne.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010536:	4b66      	ldr	r3, [pc, #408]	; (80106d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010538:	63fb      	str	r3, [r7, #60]	; 0x3c
 801053a:	e011      	b.n	8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801053c:	4b62      	ldr	r3, [pc, #392]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010548:	d106      	bne.n	8010558 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801054a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801054c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010550:	d102      	bne.n	8010558 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010552:	4b60      	ldr	r3, [pc, #384]	; (80106d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010556:	e003      	b.n	8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010558:	2300      	movs	r3, #0
 801055a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801055c:	f000 bce1 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010560:	f000 bcdf 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010564:	4b5c      	ldr	r3, [pc, #368]	; (80106d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010568:	f000 bcdb 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801056c:	2300      	movs	r3, #0
 801056e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010570:	f000 bcd7 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010578:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 801057c:	430b      	orrs	r3, r1
 801057e:	f040 80ad 	bne.w	80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010582:	4b51      	ldr	r3, [pc, #324]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010586:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801058a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010592:	d056      	beq.n	8010642 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801059a:	f200 8090 	bhi.w	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a0:	2bc0      	cmp	r3, #192	; 0xc0
 80105a2:	f000 8088 	beq.w	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80105a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a8:	2bc0      	cmp	r3, #192	; 0xc0
 80105aa:	f200 8088 	bhi.w	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	2b80      	cmp	r3, #128	; 0x80
 80105b2:	d032      	beq.n	801061a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80105b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b6:	2b80      	cmp	r3, #128	; 0x80
 80105b8:	f200 8081 	bhi.w	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d003      	beq.n	80105ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	2b40      	cmp	r3, #64	; 0x40
 80105c6:	d014      	beq.n	80105f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80105c8:	e079      	b.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105ca:	4b3f      	ldr	r3, [pc, #252]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105d6:	d108      	bne.n	80105ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105dc:	4618      	mov	r0, r3
 80105de:	f000 ff67 	bl	80114b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80105e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105e6:	f000 bc9c 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105ea:	2300      	movs	r3, #0
 80105ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105ee:	f000 bc98 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80105f2:	4b35      	ldr	r3, [pc, #212]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80105fe:	d108      	bne.n	8010612 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010600:	f107 0318 	add.w	r3, r7, #24
 8010604:	4618      	mov	r0, r3
 8010606:	f000 fcab 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801060e:	f000 bc88 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010616:	f000 bc84 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801061a:	4b2b      	ldr	r3, [pc, #172]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010626:	d108      	bne.n	801063a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010628:	f107 030c 	add.w	r3, r7, #12
 801062c:	4618      	mov	r0, r3
 801062e:	f000 fdeb 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010636:	f000 bc74 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801063e:	f000 bc70 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010642:	4b21      	ldr	r3, [pc, #132]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801064a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801064c:	4b1e      	ldr	r3, [pc, #120]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f003 0304 	and.w	r3, r3, #4
 8010654:	2b04      	cmp	r3, #4
 8010656:	d10c      	bne.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065a:	2b00      	cmp	r3, #0
 801065c:	d109      	bne.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801065e:	4b1a      	ldr	r3, [pc, #104]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	08db      	lsrs	r3, r3, #3
 8010664:	f003 0303 	and.w	r3, r3, #3
 8010668:	4a18      	ldr	r2, [pc, #96]	; (80106cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801066a:	fa22 f303 	lsr.w	r3, r2, r3
 801066e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010670:	e01f      	b.n	80106b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010672:	4b15      	ldr	r3, [pc, #84]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801067a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801067e:	d106      	bne.n	801068e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010686:	d102      	bne.n	801068e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010688:	4b11      	ldr	r3, [pc, #68]	; (80106d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801068a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801068c:	e011      	b.n	80106b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801068e:	4b0e      	ldr	r3, [pc, #56]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801069a:	d106      	bne.n	80106aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801069c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106a2:	d102      	bne.n	80106aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80106a4:	4b0b      	ldr	r3, [pc, #44]	; (80106d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80106a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106a8:	e003      	b.n	80106b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80106ae:	f000 bc38 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106b2:	f000 bc36 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80106b6:	4b08      	ldr	r3, [pc, #32]	; (80106d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80106b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106ba:	f000 bc32 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80106be:	2300      	movs	r3, #0
 80106c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106c2:	f000 bc2e 	b.w	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106c6:	bf00      	nop
 80106c8:	58024400 	.word	0x58024400
 80106cc:	03d09000 	.word	0x03d09000
 80106d0:	003d0900 	.word	0x003d0900
 80106d4:	017d7840 	.word	0x017d7840
 80106d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80106dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80106e4:	430b      	orrs	r3, r1
 80106e6:	f040 809c 	bne.w	8010822 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80106ea:	4b9e      	ldr	r3, [pc, #632]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80106f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80106f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80106fa:	d054      	beq.n	80107a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80106fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010702:	f200 808b 	bhi.w	801081c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010708:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801070c:	f000 8083 	beq.w	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010716:	f200 8081 	bhi.w	801081c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801071a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010720:	d02f      	beq.n	8010782 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010728:	d878      	bhi.n	801081c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072c:	2b00      	cmp	r3, #0
 801072e:	d004      	beq.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010736:	d012      	beq.n	801075e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010738:	e070      	b.n	801081c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801073a:	4b8a      	ldr	r3, [pc, #552]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010746:	d107      	bne.n	8010758 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801074c:	4618      	mov	r0, r3
 801074e:	f000 feaf 	bl	80114b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010754:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010756:	e3e4      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801075c:	e3e1      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801075e:	4b81      	ldr	r3, [pc, #516]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801076a:	d107      	bne.n	801077c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801076c:	f107 0318 	add.w	r3, r7, #24
 8010770:	4618      	mov	r0, r3
 8010772:	f000 fbf5 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010776:	69bb      	ldr	r3, [r7, #24]
 8010778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801077a:	e3d2      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801077c:	2300      	movs	r3, #0
 801077e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010780:	e3cf      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010782:	4b78      	ldr	r3, [pc, #480]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801078a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801078e:	d107      	bne.n	80107a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010790:	f107 030c 	add.w	r3, r7, #12
 8010794:	4618      	mov	r0, r3
 8010796:	f000 fd37 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801079e:	e3c0      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107a0:	2300      	movs	r3, #0
 80107a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107a4:	e3bd      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80107a6:	4b6f      	ldr	r3, [pc, #444]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80107ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80107b0:	4b6c      	ldr	r3, [pc, #432]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f003 0304 	and.w	r3, r3, #4
 80107b8:	2b04      	cmp	r3, #4
 80107ba:	d10c      	bne.n	80107d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80107bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d109      	bne.n	80107d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107c2:	4b68      	ldr	r3, [pc, #416]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	08db      	lsrs	r3, r3, #3
 80107c8:	f003 0303 	and.w	r3, r3, #3
 80107cc:	4a66      	ldr	r2, [pc, #408]	; (8010968 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80107ce:	fa22 f303 	lsr.w	r3, r2, r3
 80107d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107d4:	e01e      	b.n	8010814 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107d6:	4b63      	ldr	r3, [pc, #396]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107e2:	d106      	bne.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80107e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107ea:	d102      	bne.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80107ec:	4b5f      	ldr	r3, [pc, #380]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80107ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107f0:	e010      	b.n	8010814 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107f2:	4b5c      	ldr	r3, [pc, #368]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107fe:	d106      	bne.n	801080e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010806:	d102      	bne.n	801080e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010808:	4b59      	ldr	r3, [pc, #356]	; (8010970 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801080a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801080c:	e002      	b.n	8010814 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801080e:	2300      	movs	r3, #0
 8010810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010812:	e386      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010814:	e385      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010816:	4b57      	ldr	r3, [pc, #348]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801081a:	e382      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801081c:	2300      	movs	r3, #0
 801081e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010820:	e37f      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010826:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801082a:	430b      	orrs	r3, r1
 801082c:	f040 80a7 	bne.w	801097e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010830:	4b4c      	ldr	r3, [pc, #304]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010834:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010838:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010840:	d055      	beq.n	80108ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010848:	f200 8096 	bhi.w	8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801084c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010852:	f000 8084 	beq.w	801095e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801085c:	f200 808c 	bhi.w	8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010866:	d030      	beq.n	80108ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801086e:	f200 8083 	bhi.w	8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010874:	2b00      	cmp	r3, #0
 8010876:	d004      	beq.n	8010882 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801087e:	d012      	beq.n	80108a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010880:	e07a      	b.n	8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010882:	4b38      	ldr	r3, [pc, #224]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801088a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801088e:	d107      	bne.n	80108a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010894:	4618      	mov	r0, r3
 8010896:	f000 fe0b 	bl	80114b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801089e:	e340      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108a0:	2300      	movs	r3, #0
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108a4:	e33d      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108a6:	4b2f      	ldr	r3, [pc, #188]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108b2:	d107      	bne.n	80108c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108b4:	f107 0318 	add.w	r3, r7, #24
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 fb51 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108c2:	e32e      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108c4:	2300      	movs	r3, #0
 80108c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108c8:	e32b      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108ca:	4b26      	ldr	r3, [pc, #152]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108d6:	d107      	bne.n	80108e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108d8:	f107 030c 	add.w	r3, r7, #12
 80108dc:	4618      	mov	r0, r3
 80108de:	f000 fc93 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108e6:	e31c      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108e8:	2300      	movs	r3, #0
 80108ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ec:	e319      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80108ee:	4b1d      	ldr	r3, [pc, #116]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80108f8:	4b1a      	ldr	r3, [pc, #104]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f003 0304 	and.w	r3, r3, #4
 8010900:	2b04      	cmp	r3, #4
 8010902:	d10c      	bne.n	801091e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010906:	2b00      	cmp	r3, #0
 8010908:	d109      	bne.n	801091e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801090a:	4b16      	ldr	r3, [pc, #88]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	08db      	lsrs	r3, r3, #3
 8010910:	f003 0303 	and.w	r3, r3, #3
 8010914:	4a14      	ldr	r2, [pc, #80]	; (8010968 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010916:	fa22 f303 	lsr.w	r3, r2, r3
 801091a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801091c:	e01e      	b.n	801095c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801091e:	4b11      	ldr	r3, [pc, #68]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801092a:	d106      	bne.n	801093a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010932:	d102      	bne.n	801093a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010934:	4b0d      	ldr	r3, [pc, #52]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010938:	e010      	b.n	801095c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801093a:	4b0a      	ldr	r3, [pc, #40]	; (8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010946:	d106      	bne.n	8010956 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801094e:	d102      	bne.n	8010956 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010950:	4b07      	ldr	r3, [pc, #28]	; (8010970 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010954:	e002      	b.n	801095c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010956:	2300      	movs	r3, #0
 8010958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801095a:	e2e2      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801095c:	e2e1      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801095e:	4b05      	ldr	r3, [pc, #20]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010962:	e2de      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010964:	58024400 	.word	0x58024400
 8010968:	03d09000 	.word	0x03d09000
 801096c:	003d0900 	.word	0x003d0900
 8010970:	017d7840 	.word	0x017d7840
 8010974:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010978:	2300      	movs	r3, #0
 801097a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801097c:	e2d1      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801097e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010982:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8010986:	430b      	orrs	r3, r1
 8010988:	f040 809c 	bne.w	8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801098c:	4b93      	ldr	r3, [pc, #588]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801098e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010990:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010994:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801099c:	d054      	beq.n	8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80109a4:	f200 808b 	bhi.w	8010abe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80109ae:	f000 8083 	beq.w	8010ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80109b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80109b8:	f200 8081 	bhi.w	8010abe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109c2:	d02f      	beq.n	8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80109c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109ca:	d878      	bhi.n	8010abe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d004      	beq.n	80109dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109d8:	d012      	beq.n	8010a00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80109da:	e070      	b.n	8010abe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80109dc:	4b7f      	ldr	r3, [pc, #508]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80109e8:	d107      	bne.n	80109fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80109ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 fd5e 	bl	80114b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109f8:	e293      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109fa:	2300      	movs	r3, #0
 80109fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109fe:	e290      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a00:	4b76      	ldr	r3, [pc, #472]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a0c:	d107      	bne.n	8010a1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a0e:	f107 0318 	add.w	r3, r7, #24
 8010a12:	4618      	mov	r0, r3
 8010a14:	f000 faa4 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010a18:	69bb      	ldr	r3, [r7, #24]
 8010a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a1c:	e281      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a22:	e27e      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a24:	4b6d      	ldr	r3, [pc, #436]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a30:	d107      	bne.n	8010a42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a32:	f107 030c 	add.w	r3, r7, #12
 8010a36:	4618      	mov	r0, r3
 8010a38:	f000 fbe6 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a40:	e26f      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a46:	e26c      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010a48:	4b64      	ldr	r3, [pc, #400]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010a52:	4b62      	ldr	r3, [pc, #392]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f003 0304 	and.w	r3, r3, #4
 8010a5a:	2b04      	cmp	r3, #4
 8010a5c:	d10c      	bne.n	8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d109      	bne.n	8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a64:	4b5d      	ldr	r3, [pc, #372]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	08db      	lsrs	r3, r3, #3
 8010a6a:	f003 0303 	and.w	r3, r3, #3
 8010a6e:	4a5c      	ldr	r2, [pc, #368]	; (8010be0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010a70:	fa22 f303 	lsr.w	r3, r2, r3
 8010a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a76:	e01e      	b.n	8010ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010a78:	4b58      	ldr	r3, [pc, #352]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a84:	d106      	bne.n	8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a8c:	d102      	bne.n	8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010a8e:	4b55      	ldr	r3, [pc, #340]	; (8010be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a92:	e010      	b.n	8010ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010a94:	4b51      	ldr	r3, [pc, #324]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010aa0:	d106      	bne.n	8010ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010aa8:	d102      	bne.n	8010ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010aaa:	4b4f      	ldr	r3, [pc, #316]	; (8010be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010aae:	e002      	b.n	8010ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010ab4:	e235      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010ab6:	e234      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010ab8:	4b4c      	ldr	r3, [pc, #304]	; (8010bec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010abc:	e231      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ac2:	e22e      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ac8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010acc:	430b      	orrs	r3, r1
 8010ace:	f040 808f 	bne.w	8010bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010ad2:	4b42      	ldr	r3, [pc, #264]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ad6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010ada:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010ae2:	d06b      	beq.n	8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010aea:	d874      	bhi.n	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010af2:	d056      	beq.n	8010ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010afa:	d86c      	bhi.n	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010b02:	d03b      	beq.n	8010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010b0a:	d864      	bhi.n	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b12:	d021      	beq.n	8010b58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b1a:	d85c      	bhi.n	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d004      	beq.n	8010b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b28:	d004      	beq.n	8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010b2a:	e054      	b.n	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010b2c:	f7fe fa0a 	bl	800ef44 <HAL_RCC_GetPCLK1Freq>
 8010b30:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b32:	e1f6      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b34:	4b29      	ldr	r3, [pc, #164]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b40:	d107      	bne.n	8010b52 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b42:	f107 0318 	add.w	r3, r7, #24
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 fa0a 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b50:	e1e7      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b52:	2300      	movs	r3, #0
 8010b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b56:	e1e4      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010b58:	4b20      	ldr	r3, [pc, #128]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b64:	d107      	bne.n	8010b76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b66:	f107 030c 	add.w	r3, r7, #12
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f000 fb4c 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b74:	e1d5      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b7a:	e1d2      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010b7c:	4b17      	ldr	r3, [pc, #92]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f003 0304 	and.w	r3, r3, #4
 8010b84:	2b04      	cmp	r3, #4
 8010b86:	d109      	bne.n	8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b88:	4b14      	ldr	r3, [pc, #80]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	08db      	lsrs	r3, r3, #3
 8010b8e:	f003 0303 	and.w	r3, r3, #3
 8010b92:	4a13      	ldr	r2, [pc, #76]	; (8010be0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010b94:	fa22 f303 	lsr.w	r3, r2, r3
 8010b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b9a:	e1c2      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ba0:	e1bf      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010ba2:	4b0e      	ldr	r3, [pc, #56]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bae:	d102      	bne.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010bb0:	4b0c      	ldr	r3, [pc, #48]	; (8010be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bb4:	e1b5      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bba:	e1b2      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010bbc:	4b07      	ldr	r3, [pc, #28]	; (8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010bc8:	d102      	bne.n	8010bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010bca:	4b07      	ldr	r3, [pc, #28]	; (8010be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bce:	e1a8      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bd4:	e1a5      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bda:	e1a2      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010bdc:	58024400 	.word	0x58024400
 8010be0:	03d09000 	.word	0x03d09000
 8010be4:	003d0900 	.word	0x003d0900
 8010be8:	017d7840 	.word	0x017d7840
 8010bec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bf4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010bf8:	430b      	orrs	r3, r1
 8010bfa:	d173      	bne.n	8010ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010bfc:	4b9c      	ldr	r3, [pc, #624]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010c04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c0c:	d02f      	beq.n	8010c6e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c14:	d863      	bhi.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d004      	beq.n	8010c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c22:	d012      	beq.n	8010c4a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010c24:	e05b      	b.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c26:	4b92      	ldr	r3, [pc, #584]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c32:	d107      	bne.n	8010c44 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c34:	f107 0318 	add.w	r3, r7, #24
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f000 f991 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c42:	e16e      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c48:	e16b      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c4a:	4b89      	ldr	r3, [pc, #548]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c56:	d107      	bne.n	8010c68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c58:	f107 030c 	add.w	r3, r7, #12
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f000 fad3 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c66:	e15c      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c6c:	e159      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c6e:	4b80      	ldr	r3, [pc, #512]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010c76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c78:	4b7d      	ldr	r3, [pc, #500]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f003 0304 	and.w	r3, r3, #4
 8010c80:	2b04      	cmp	r3, #4
 8010c82:	d10c      	bne.n	8010c9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d109      	bne.n	8010c9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c8a:	4b79      	ldr	r3, [pc, #484]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	08db      	lsrs	r3, r3, #3
 8010c90:	f003 0303 	and.w	r3, r3, #3
 8010c94:	4a77      	ldr	r2, [pc, #476]	; (8010e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010c96:	fa22 f303 	lsr.w	r3, r2, r3
 8010c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c9c:	e01e      	b.n	8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c9e:	4b74      	ldr	r3, [pc, #464]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010caa:	d106      	bne.n	8010cba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010cb2:	d102      	bne.n	8010cba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010cb4:	4b70      	ldr	r3, [pc, #448]	; (8010e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb8:	e010      	b.n	8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010cba:	4b6d      	ldr	r3, [pc, #436]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010cc6:	d106      	bne.n	8010cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010cce:	d102      	bne.n	8010cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010cd0:	4b6a      	ldr	r3, [pc, #424]	; (8010e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cd4:	e002      	b.n	8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010cda:	e122      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010cdc:	e121      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ce2:	e11e      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ce8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010cec:	430b      	orrs	r3, r1
 8010cee:	d133      	bne.n	8010d58 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010cf0:	4b5f      	ldr	r3, [pc, #380]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010cf8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d004      	beq.n	8010d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d06:	d012      	beq.n	8010d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010d08:	e023      	b.n	8010d52 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d0a:	4b59      	ldr	r3, [pc, #356]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010d16:	d107      	bne.n	8010d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f000 fbc7 	bl	80114b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d26:	e0fc      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d2c:	e0f9      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d2e:	4b50      	ldr	r3, [pc, #320]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010d3a:	d107      	bne.n	8010d4c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d3c:	f107 0318 	add.w	r3, r7, #24
 8010d40:	4618      	mov	r0, r3
 8010d42:	f000 f90d 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010d46:	6a3b      	ldr	r3, [r7, #32]
 8010d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d4a:	e0ea      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d50:	e0e7      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010d52:	2300      	movs	r3, #0
 8010d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d56:	e0e4      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d5c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010d60:	430b      	orrs	r3, r1
 8010d62:	f040 808d 	bne.w	8010e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010d66:	4b42      	ldr	r3, [pc, #264]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d6a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010d6e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d76:	d06b      	beq.n	8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d7e:	d874      	bhi.n	8010e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d86:	d056      	beq.n	8010e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d8e:	d86c      	bhi.n	8010e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d96:	d03b      	beq.n	8010e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d9e:	d864      	bhi.n	8010e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010da6:	d021      	beq.n	8010dec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dae:	d85c      	bhi.n	8010e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d004      	beq.n	8010dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010dbc:	d004      	beq.n	8010dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010dbe:	e054      	b.n	8010e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010dc0:	f000 f8b8 	bl	8010f34 <HAL_RCCEx_GetD3PCLK1Freq>
 8010dc4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010dc6:	e0ac      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010dc8:	4b29      	ldr	r3, [pc, #164]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010dd4:	d107      	bne.n	8010de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010dd6:	f107 0318 	add.w	r3, r7, #24
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f000 f8c0 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010de4:	e09d      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dea:	e09a      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010dec:	4b20      	ldr	r3, [pc, #128]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010df8:	d107      	bne.n	8010e0a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010dfa:	f107 030c 	add.w	r3, r7, #12
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f000 fa02 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e08:	e08b      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e0e:	e088      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010e10:	4b17      	ldr	r3, [pc, #92]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f003 0304 	and.w	r3, r3, #4
 8010e18:	2b04      	cmp	r3, #4
 8010e1a:	d109      	bne.n	8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e1c:	4b14      	ldr	r3, [pc, #80]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	08db      	lsrs	r3, r3, #3
 8010e22:	f003 0303 	and.w	r3, r3, #3
 8010e26:	4a13      	ldr	r2, [pc, #76]	; (8010e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010e28:	fa22 f303 	lsr.w	r3, r2, r3
 8010e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e2e:	e078      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e34:	e075      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010e36:	4b0e      	ldr	r3, [pc, #56]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e42:	d102      	bne.n	8010e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010e44:	4b0c      	ldr	r3, [pc, #48]	; (8010e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e48:	e06b      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e4e:	e068      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010e50:	4b07      	ldr	r3, [pc, #28]	; (8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010e5c:	d102      	bne.n	8010e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010e5e:	4b07      	ldr	r3, [pc, #28]	; (8010e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e62:	e05e      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e64:	2300      	movs	r3, #0
 8010e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e68:	e05b      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e6e:	e058      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010e70:	58024400 	.word	0x58024400
 8010e74:	03d09000 	.word	0x03d09000
 8010e78:	003d0900 	.word	0x003d0900
 8010e7c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e84:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010e88:	430b      	orrs	r3, r1
 8010e8a:	d148      	bne.n	8010f1e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010e8c:	4b27      	ldr	r3, [pc, #156]	; (8010f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010e94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e9c:	d02a      	beq.n	8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ea4:	d838      	bhi.n	8010f18 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d004      	beq.n	8010eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010eb2:	d00d      	beq.n	8010ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010eb4:	e030      	b.n	8010f18 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010eb6:	4b1d      	ldr	r3, [pc, #116]	; (8010f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ec2:	d102      	bne.n	8010eca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010ec4:	4b1a      	ldr	r3, [pc, #104]	; (8010f30 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ec8:	e02b      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ece:	e028      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ed0:	4b16      	ldr	r3, [pc, #88]	; (8010f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010edc:	d107      	bne.n	8010eee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f000 fae4 	bl	80114b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010eec:	e019      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef2:	e016      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010ef4:	4b0d      	ldr	r3, [pc, #52]	; (8010f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f00:	d107      	bne.n	8010f12 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f02:	f107 0318 	add.w	r3, r7, #24
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 f82a 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f10:	e007      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f12:	2300      	movs	r3, #0
 8010f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f16:	e004      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f1c:	e001      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3740      	adds	r7, #64	; 0x40
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	58024400 	.word	0x58024400
 8010f30:	017d7840 	.word	0x017d7840

08010f34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010f38:	f7fd ffd4 	bl	800eee4 <HAL_RCC_GetHCLKFreq>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	4b06      	ldr	r3, [pc, #24]	; (8010f58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010f40:	6a1b      	ldr	r3, [r3, #32]
 8010f42:	091b      	lsrs	r3, r3, #4
 8010f44:	f003 0307 	and.w	r3, r3, #7
 8010f48:	4904      	ldr	r1, [pc, #16]	; (8010f5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010f4a:	5ccb      	ldrb	r3, [r1, r3]
 8010f4c:	f003 031f 	and.w	r3, r3, #31
 8010f50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	58024400 	.word	0x58024400
 8010f5c:	0801b544 	.word	0x0801b544

08010f60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b089      	sub	sp, #36	; 0x24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010f68:	4ba1      	ldr	r3, [pc, #644]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f6c:	f003 0303 	and.w	r3, r3, #3
 8010f70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010f72:	4b9f      	ldr	r3, [pc, #636]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f76:	0b1b      	lsrs	r3, r3, #12
 8010f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010f7e:	4b9c      	ldr	r3, [pc, #624]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f82:	091b      	lsrs	r3, r3, #4
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010f8a:	4b99      	ldr	r3, [pc, #612]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f8e:	08db      	lsrs	r3, r3, #3
 8010f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	fb02 f303 	mul.w	r3, r2, r3
 8010f9a:	ee07 3a90 	vmov	s15, r3
 8010f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f000 8111 	beq.w	80111d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	f000 8083 	beq.w	80110bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010fb6:	69bb      	ldr	r3, [r7, #24]
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	f200 80a1 	bhi.w	8011100 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d003      	beq.n	8010fcc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d056      	beq.n	8011078 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010fca:	e099      	b.n	8011100 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fcc:	4b88      	ldr	r3, [pc, #544]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f003 0320 	and.w	r3, r3, #32
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d02d      	beq.n	8011034 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010fd8:	4b85      	ldr	r3, [pc, #532]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	08db      	lsrs	r3, r3, #3
 8010fde:	f003 0303 	and.w	r3, r3, #3
 8010fe2:	4a84      	ldr	r2, [pc, #528]	; (80111f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8010fe8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	ee07 3a90 	vmov	s15, r3
 8010ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	ee07 3a90 	vmov	s15, r3
 8010ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011002:	4b7b      	ldr	r3, [pc, #492]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801100a:	ee07 3a90 	vmov	s15, r3
 801100e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011012:	ed97 6a03 	vldr	s12, [r7, #12]
 8011016:	eddf 5a78 	vldr	s11, [pc, #480]	; 80111f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801101a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801101e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801102e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011032:	e087      	b.n	8011144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	ee07 3a90 	vmov	s15, r3
 801103a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801103e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80111fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011046:	4b6a      	ldr	r3, [pc, #424]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801104a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801104e:	ee07 3a90 	vmov	s15, r3
 8011052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011056:	ed97 6a03 	vldr	s12, [r7, #12]
 801105a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80111f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801105e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801106a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011076:	e065      	b.n	8011144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	ee07 3a90 	vmov	s15, r3
 801107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011082:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801108a:	4b59      	ldr	r3, [pc, #356]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801108e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011092:	ee07 3a90 	vmov	s15, r3
 8011096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801109a:	ed97 6a03 	vldr	s12, [r7, #12]
 801109e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80111f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80110a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110ba:	e043      	b.n	8011144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	ee07 3a90 	vmov	s15, r3
 80110c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80110ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ce:	4b48      	ldr	r3, [pc, #288]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110d6:	ee07 3a90 	vmov	s15, r3
 80110da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110de:	ed97 6a03 	vldr	s12, [r7, #12]
 80110e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80111f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80110e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110fe:	e021      	b.n	8011144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	ee07 3a90 	vmov	s15, r3
 8011106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801110a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801110e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011112:	4b37      	ldr	r3, [pc, #220]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801111a:	ee07 3a90 	vmov	s15, r3
 801111e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011122:	ed97 6a03 	vldr	s12, [r7, #12]
 8011126:	eddf 5a34 	vldr	s11, [pc, #208]	; 80111f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801112a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801112e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801113a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801113e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011142:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011144:	4b2a      	ldr	r3, [pc, #168]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011148:	0a5b      	lsrs	r3, r3, #9
 801114a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801114e:	ee07 3a90 	vmov	s15, r3
 8011152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801115a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801115e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801116a:	ee17 2a90 	vmov	r2, s15
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011172:	4b1f      	ldr	r3, [pc, #124]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011176:	0c1b      	lsrs	r3, r3, #16
 8011178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801117c:	ee07 3a90 	vmov	s15, r3
 8011180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011188:	ee37 7a87 	vadd.f32	s14, s15, s14
 801118c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011198:	ee17 2a90 	vmov	r2, s15
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80111a0:	4b13      	ldr	r3, [pc, #76]	; (80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80111a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111a4:	0e1b      	lsrs	r3, r3, #24
 80111a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111aa:	ee07 3a90 	vmov	s15, r3
 80111ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80111be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111c6:	ee17 2a90 	vmov	r2, s15
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80111ce:	e008      	b.n	80111e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2200      	movs	r2, #0
 80111d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2200      	movs	r2, #0
 80111da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	609a      	str	r2, [r3, #8]
}
 80111e2:	bf00      	nop
 80111e4:	3724      	adds	r7, #36	; 0x24
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	58024400 	.word	0x58024400
 80111f4:	03d09000 	.word	0x03d09000
 80111f8:	46000000 	.word	0x46000000
 80111fc:	4c742400 	.word	0x4c742400
 8011200:	4a742400 	.word	0x4a742400
 8011204:	4bbebc20 	.word	0x4bbebc20

08011208 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8011208:	b480      	push	{r7}
 801120a:	b089      	sub	sp, #36	; 0x24
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011210:	4ba1      	ldr	r3, [pc, #644]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011214:	f003 0303 	and.w	r3, r3, #3
 8011218:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801121a:	4b9f      	ldr	r3, [pc, #636]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801121e:	0d1b      	lsrs	r3, r3, #20
 8011220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011224:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8011226:	4b9c      	ldr	r3, [pc, #624]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801122a:	0a1b      	lsrs	r3, r3, #8
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8011232:	4b99      	ldr	r3, [pc, #612]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011236:	08db      	lsrs	r3, r3, #3
 8011238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801123c:	693a      	ldr	r2, [r7, #16]
 801123e:	fb02 f303 	mul.w	r3, r2, r3
 8011242:	ee07 3a90 	vmov	s15, r3
 8011246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801124a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	2b00      	cmp	r3, #0
 8011252:	f000 8111 	beq.w	8011478 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	2b02      	cmp	r3, #2
 801125a:	f000 8083 	beq.w	8011364 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	2b02      	cmp	r3, #2
 8011262:	f200 80a1 	bhi.w	80113a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8011266:	69bb      	ldr	r3, [r7, #24]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d003      	beq.n	8011274 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	2b01      	cmp	r3, #1
 8011270:	d056      	beq.n	8011320 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011272:	e099      	b.n	80113a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011274:	4b88      	ldr	r3, [pc, #544]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f003 0320 	and.w	r3, r3, #32
 801127c:	2b00      	cmp	r3, #0
 801127e:	d02d      	beq.n	80112dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011280:	4b85      	ldr	r3, [pc, #532]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	08db      	lsrs	r3, r3, #3
 8011286:	f003 0303 	and.w	r3, r3, #3
 801128a:	4a84      	ldr	r2, [pc, #528]	; (801149c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801128c:	fa22 f303 	lsr.w	r3, r2, r3
 8011290:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	ee07 3a90 	vmov	s15, r3
 8011298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	ee07 3a90 	vmov	s15, r3
 80112a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112aa:	4b7b      	ldr	r3, [pc, #492]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112b2:	ee07 3a90 	vmov	s15, r3
 80112b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80112be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80114a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80112c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80112da:	e087      	b.n	80113ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	ee07 3a90 	vmov	s15, r3
 80112e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80114a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80112ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112ee:	4b6a      	ldr	r3, [pc, #424]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112f6:	ee07 3a90 	vmov	s15, r3
 80112fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8011302:	eddf 5a67 	vldr	s11, [pc, #412]	; 80114a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801130e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011316:	ee67 7a27 	vmul.f32	s15, s14, s15
 801131a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801131e:	e065      	b.n	80113ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	ee07 3a90 	vmov	s15, r3
 8011326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801132a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80114a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801132e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011332:	4b59      	ldr	r3, [pc, #356]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801133a:	ee07 3a90 	vmov	s15, r3
 801133e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011342:	ed97 6a03 	vldr	s12, [r7, #12]
 8011346:	eddf 5a56 	vldr	s11, [pc, #344]	; 80114a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801134a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801134e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801135a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801135e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011362:	e043      	b.n	80113ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	ee07 3a90 	vmov	s15, r3
 801136a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801136e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80114ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011376:	4b48      	ldr	r3, [pc, #288]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801137a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801137e:	ee07 3a90 	vmov	s15, r3
 8011382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011386:	ed97 6a03 	vldr	s12, [r7, #12]
 801138a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80114a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801138e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801139a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80113a6:	e021      	b.n	80113ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	ee07 3a90 	vmov	s15, r3
 80113ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80114a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80113b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113ba:	4b37      	ldr	r3, [pc, #220]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113c2:	ee07 3a90 	vmov	s15, r3
 80113c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80113ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80114a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80113d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80113ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80113ec:	4b2a      	ldr	r3, [pc, #168]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f0:	0a5b      	lsrs	r3, r3, #9
 80113f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113f6:	ee07 3a90 	vmov	s15, r3
 80113fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011406:	edd7 6a07 	vldr	s13, [r7, #28]
 801140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801140e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011412:	ee17 2a90 	vmov	r2, s15
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801141a:	4b1f      	ldr	r3, [pc, #124]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141e:	0c1b      	lsrs	r3, r3, #16
 8011420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011424:	ee07 3a90 	vmov	s15, r3
 8011428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801142c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011434:	edd7 6a07 	vldr	s13, [r7, #28]
 8011438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801143c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011440:	ee17 2a90 	vmov	r2, s15
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011448:	4b13      	ldr	r3, [pc, #76]	; (8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144c:	0e1b      	lsrs	r3, r3, #24
 801144e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011452:	ee07 3a90 	vmov	s15, r3
 8011456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801145a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801145e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011462:	edd7 6a07 	vldr	s13, [r7, #28]
 8011466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801146a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801146e:	ee17 2a90 	vmov	r2, s15
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011476:	e008      	b.n	801148a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2200      	movs	r2, #0
 801147c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2200      	movs	r2, #0
 8011482:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2200      	movs	r2, #0
 8011488:	609a      	str	r2, [r3, #8]
}
 801148a:	bf00      	nop
 801148c:	3724      	adds	r7, #36	; 0x24
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	58024400 	.word	0x58024400
 801149c:	03d09000 	.word	0x03d09000
 80114a0:	46000000 	.word	0x46000000
 80114a4:	4c742400 	.word	0x4c742400
 80114a8:	4a742400 	.word	0x4a742400
 80114ac:	4bbebc20 	.word	0x4bbebc20

080114b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b089      	sub	sp, #36	; 0x24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80114b8:	4ba0      	ldr	r3, [pc, #640]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114bc:	f003 0303 	and.w	r3, r3, #3
 80114c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80114c2:	4b9e      	ldr	r3, [pc, #632]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c6:	091b      	lsrs	r3, r3, #4
 80114c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80114ce:	4b9b      	ldr	r3, [pc, #620]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80114d8:	4b98      	ldr	r3, [pc, #608]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114dc:	08db      	lsrs	r3, r3, #3
 80114de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114e2:	693a      	ldr	r2, [r7, #16]
 80114e4:	fb02 f303 	mul.w	r3, r2, r3
 80114e8:	ee07 3a90 	vmov	s15, r3
 80114ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f000 8111 	beq.w	801171e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	2b02      	cmp	r3, #2
 8011500:	f000 8083 	beq.w	801160a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	2b02      	cmp	r3, #2
 8011508:	f200 80a1 	bhi.w	801164e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d003      	beq.n	801151a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	2b01      	cmp	r3, #1
 8011516:	d056      	beq.n	80115c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011518:	e099      	b.n	801164e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801151a:	4b88      	ldr	r3, [pc, #544]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f003 0320 	and.w	r3, r3, #32
 8011522:	2b00      	cmp	r3, #0
 8011524:	d02d      	beq.n	8011582 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011526:	4b85      	ldr	r3, [pc, #532]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	08db      	lsrs	r3, r3, #3
 801152c:	f003 0303 	and.w	r3, r3, #3
 8011530:	4a83      	ldr	r2, [pc, #524]	; (8011740 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011532:	fa22 f303 	lsr.w	r3, r2, r3
 8011536:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	ee07 3a90 	vmov	s15, r3
 801153e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	ee07 3a90 	vmov	s15, r3
 8011548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801154c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011550:	4b7a      	ldr	r3, [pc, #488]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011558:	ee07 3a90 	vmov	s15, r3
 801155c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011560:	ed97 6a03 	vldr	s12, [r7, #12]
 8011564:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801156c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011578:	ee67 7a27 	vmul.f32	s15, s14, s15
 801157c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011580:	e087      	b.n	8011692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	ee07 3a90 	vmov	s15, r3
 8011588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801158c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011748 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011594:	4b69      	ldr	r3, [pc, #420]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801159c:	ee07 3a90 	vmov	s15, r3
 80115a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80115a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80115ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115c4:	e065      	b.n	8011692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	ee07 3a90 	vmov	s15, r3
 80115cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801174c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80115d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115d8:	4b58      	ldr	r3, [pc, #352]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115e0:	ee07 3a90 	vmov	s15, r3
 80115e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80115ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80115f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011608:	e043      	b.n	8011692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	ee07 3a90 	vmov	s15, r3
 8011610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011614:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011750 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801161c:	4b47      	ldr	r3, [pc, #284]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011624:	ee07 3a90 	vmov	s15, r3
 8011628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801162c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011630:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801163c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801164c:	e021      	b.n	8011692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	ee07 3a90 	vmov	s15, r3
 8011654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011658:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011748 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801165c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011660:	4b36      	ldr	r3, [pc, #216]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011668:	ee07 3a90 	vmov	s15, r3
 801166c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011670:	ed97 6a03 	vldr	s12, [r7, #12]
 8011674:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801167c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011688:	ee67 7a27 	vmul.f32	s15, s14, s15
 801168c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011690:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011692:	4b2a      	ldr	r3, [pc, #168]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011696:	0a5b      	lsrs	r3, r3, #9
 8011698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801169c:	ee07 3a90 	vmov	s15, r3
 80116a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80116b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116b8:	ee17 2a90 	vmov	r2, s15
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80116c0:	4b1e      	ldr	r3, [pc, #120]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116c4:	0c1b      	lsrs	r3, r3, #16
 80116c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116ca:	ee07 3a90 	vmov	s15, r3
 80116ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116da:	edd7 6a07 	vldr	s13, [r7, #28]
 80116de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116e6:	ee17 2a90 	vmov	r2, s15
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80116ee:	4b13      	ldr	r3, [pc, #76]	; (801173c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f2:	0e1b      	lsrs	r3, r3, #24
 80116f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116f8:	ee07 3a90 	vmov	s15, r3
 80116fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011708:	edd7 6a07 	vldr	s13, [r7, #28]
 801170c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011714:	ee17 2a90 	vmov	r2, s15
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801171c:	e008      	b.n	8011730 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	609a      	str	r2, [r3, #8]
}
 8011730:	bf00      	nop
 8011732:	3724      	adds	r7, #36	; 0x24
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr
 801173c:	58024400 	.word	0x58024400
 8011740:	03d09000 	.word	0x03d09000
 8011744:	46000000 	.word	0x46000000
 8011748:	4c742400 	.word	0x4c742400
 801174c:	4a742400 	.word	0x4a742400
 8011750:	4bbebc20 	.word	0x4bbebc20

08011754 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011762:	4b53      	ldr	r3, [pc, #332]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011766:	f003 0303 	and.w	r3, r3, #3
 801176a:	2b03      	cmp	r3, #3
 801176c:	d101      	bne.n	8011772 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801176e:	2301      	movs	r3, #1
 8011770:	e099      	b.n	80118a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011772:	4b4f      	ldr	r3, [pc, #316]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	4a4e      	ldr	r2, [pc, #312]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011778:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801177c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801177e:	f7f4 fc03 	bl	8005f88 <HAL_GetTick>
 8011782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011784:	e008      	b.n	8011798 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011786:	f7f4 fbff 	bl	8005f88 <HAL_GetTick>
 801178a:	4602      	mov	r2, r0
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	2b02      	cmp	r3, #2
 8011792:	d901      	bls.n	8011798 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011794:	2303      	movs	r3, #3
 8011796:	e086      	b.n	80118a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011798:	4b45      	ldr	r3, [pc, #276]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d1f0      	bne.n	8011786 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80117a4:	4b42      	ldr	r3, [pc, #264]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 80117a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	031b      	lsls	r3, r3, #12
 80117b2:	493f      	ldr	r1, [pc, #252]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 80117b4:	4313      	orrs	r3, r2
 80117b6:	628b      	str	r3, [r1, #40]	; 0x28
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	3b01      	subs	r3, #1
 80117be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	689b      	ldr	r3, [r3, #8]
 80117c6:	3b01      	subs	r3, #1
 80117c8:	025b      	lsls	r3, r3, #9
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	431a      	orrs	r2, r3
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	3b01      	subs	r3, #1
 80117d4:	041b      	lsls	r3, r3, #16
 80117d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80117da:	431a      	orrs	r2, r3
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	3b01      	subs	r3, #1
 80117e2:	061b      	lsls	r3, r3, #24
 80117e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80117e8:	4931      	ldr	r1, [pc, #196]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 80117ea:	4313      	orrs	r3, r2
 80117ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80117ee:	4b30      	ldr	r3, [pc, #192]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 80117f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	695b      	ldr	r3, [r3, #20]
 80117fa:	492d      	ldr	r1, [pc, #180]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 80117fc:	4313      	orrs	r3, r2
 80117fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011800:	4b2b      	ldr	r3, [pc, #172]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011804:	f023 0220 	bic.w	r2, r3, #32
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	699b      	ldr	r3, [r3, #24]
 801180c:	4928      	ldr	r1, [pc, #160]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801180e:	4313      	orrs	r3, r2
 8011810:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011812:	4b27      	ldr	r3, [pc, #156]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011816:	4a26      	ldr	r2, [pc, #152]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011818:	f023 0310 	bic.w	r3, r3, #16
 801181c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801181e:	4b24      	ldr	r3, [pc, #144]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011822:	4b24      	ldr	r3, [pc, #144]	; (80118b4 <RCCEx_PLL2_Config+0x160>)
 8011824:	4013      	ands	r3, r2
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	69d2      	ldr	r2, [r2, #28]
 801182a:	00d2      	lsls	r2, r2, #3
 801182c:	4920      	ldr	r1, [pc, #128]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801182e:	4313      	orrs	r3, r2
 8011830:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011832:	4b1f      	ldr	r3, [pc, #124]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011836:	4a1e      	ldr	r2, [pc, #120]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011838:	f043 0310 	orr.w	r3, r3, #16
 801183c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d106      	bne.n	8011852 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011844:	4b1a      	ldr	r3, [pc, #104]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011848:	4a19      	ldr	r2, [pc, #100]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801184a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801184e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011850:	e00f      	b.n	8011872 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d106      	bne.n	8011866 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011858:	4b15      	ldr	r3, [pc, #84]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185c:	4a14      	ldr	r2, [pc, #80]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801185e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011862:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011864:	e005      	b.n	8011872 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011866:	4b12      	ldr	r3, [pc, #72]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186a:	4a11      	ldr	r2, [pc, #68]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801186c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011870:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011872:	4b0f      	ldr	r3, [pc, #60]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	4a0e      	ldr	r2, [pc, #56]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 8011878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801187c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801187e:	f7f4 fb83 	bl	8005f88 <HAL_GetTick>
 8011882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011884:	e008      	b.n	8011898 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011886:	f7f4 fb7f 	bl	8005f88 <HAL_GetTick>
 801188a:	4602      	mov	r2, r0
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	2b02      	cmp	r3, #2
 8011892:	d901      	bls.n	8011898 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011894:	2303      	movs	r3, #3
 8011896:	e006      	b.n	80118a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011898:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <RCCEx_PLL2_Config+0x15c>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d0f0      	beq.n	8011886 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80118a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	58024400 	.word	0x58024400
 80118b4:	ffff0007 	.word	0xffff0007

080118b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80118c2:	2300      	movs	r3, #0
 80118c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80118c6:	4b53      	ldr	r3, [pc, #332]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80118c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ca:	f003 0303 	and.w	r3, r3, #3
 80118ce:	2b03      	cmp	r3, #3
 80118d0:	d101      	bne.n	80118d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80118d2:	2301      	movs	r3, #1
 80118d4:	e099      	b.n	8011a0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80118d6:	4b4f      	ldr	r3, [pc, #316]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4a4e      	ldr	r2, [pc, #312]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80118dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80118e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80118e2:	f7f4 fb51 	bl	8005f88 <HAL_GetTick>
 80118e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80118e8:	e008      	b.n	80118fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80118ea:	f7f4 fb4d 	bl	8005f88 <HAL_GetTick>
 80118ee:	4602      	mov	r2, r0
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	2b02      	cmp	r3, #2
 80118f6:	d901      	bls.n	80118fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80118f8:	2303      	movs	r3, #3
 80118fa:	e086      	b.n	8011a0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80118fc:	4b45      	ldr	r3, [pc, #276]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011904:	2b00      	cmp	r3, #0
 8011906:	d1f0      	bne.n	80118ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011908:	4b42      	ldr	r3, [pc, #264]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 801190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801190c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	051b      	lsls	r3, r3, #20
 8011916:	493f      	ldr	r1, [pc, #252]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011918:	4313      	orrs	r3, r2
 801191a:	628b      	str	r3, [r1, #40]	; 0x28
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	3b01      	subs	r3, #1
 8011922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	689b      	ldr	r3, [r3, #8]
 801192a:	3b01      	subs	r3, #1
 801192c:	025b      	lsls	r3, r3, #9
 801192e:	b29b      	uxth	r3, r3
 8011930:	431a      	orrs	r2, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	3b01      	subs	r3, #1
 8011938:	041b      	lsls	r3, r3, #16
 801193a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801193e:	431a      	orrs	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	691b      	ldr	r3, [r3, #16]
 8011944:	3b01      	subs	r3, #1
 8011946:	061b      	lsls	r3, r3, #24
 8011948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801194c:	4931      	ldr	r1, [pc, #196]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 801194e:	4313      	orrs	r3, r2
 8011950:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011952:	4b30      	ldr	r3, [pc, #192]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011956:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	695b      	ldr	r3, [r3, #20]
 801195e:	492d      	ldr	r1, [pc, #180]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011960:	4313      	orrs	r3, r2
 8011962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011964:	4b2b      	ldr	r3, [pc, #172]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011968:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	699b      	ldr	r3, [r3, #24]
 8011970:	4928      	ldr	r1, [pc, #160]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011972:	4313      	orrs	r3, r2
 8011974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011976:	4b27      	ldr	r3, [pc, #156]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197a:	4a26      	ldr	r2, [pc, #152]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 801197c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011982:	4b24      	ldr	r3, [pc, #144]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011986:	4b24      	ldr	r3, [pc, #144]	; (8011a18 <RCCEx_PLL3_Config+0x160>)
 8011988:	4013      	ands	r3, r2
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	69d2      	ldr	r2, [r2, #28]
 801198e:	00d2      	lsls	r2, r2, #3
 8011990:	4920      	ldr	r1, [pc, #128]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011992:	4313      	orrs	r3, r2
 8011994:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011996:	4b1f      	ldr	r3, [pc, #124]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 8011998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801199a:	4a1e      	ldr	r2, [pc, #120]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 801199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d106      	bne.n	80119b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80119a8:	4b1a      	ldr	r3, [pc, #104]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ac:	4a19      	ldr	r2, [pc, #100]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80119b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80119b4:	e00f      	b.n	80119d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d106      	bne.n	80119ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80119bc:	4b15      	ldr	r3, [pc, #84]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c0:	4a14      	ldr	r2, [pc, #80]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80119c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80119c8:	e005      	b.n	80119d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80119ca:	4b12      	ldr	r3, [pc, #72]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ce:	4a11      	ldr	r2, [pc, #68]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80119d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80119d6:	4b0f      	ldr	r3, [pc, #60]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	4a0e      	ldr	r2, [pc, #56]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80119e2:	f7f4 fad1 	bl	8005f88 <HAL_GetTick>
 80119e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80119e8:	e008      	b.n	80119fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80119ea:	f7f4 facd 	bl	8005f88 <HAL_GetTick>
 80119ee:	4602      	mov	r2, r0
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	1ad3      	subs	r3, r2, r3
 80119f4:	2b02      	cmp	r3, #2
 80119f6:	d901      	bls.n	80119fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80119f8:	2303      	movs	r3, #3
 80119fa:	e006      	b.n	8011a0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80119fc:	4b05      	ldr	r3, [pc, #20]	; (8011a14 <RCCEx_PLL3_Config+0x15c>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d0f0      	beq.n	80119ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3710      	adds	r7, #16
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	58024400 	.word	0x58024400
 8011a18:	ffff0007 	.word	0xffff0007

08011a1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a24:	2301      	movs	r3, #1
 8011a26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d071      	beq.n	8011b12 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d106      	bne.n	8011a48 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7f2 fa90 	bl	8003f68 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2202      	movs	r2, #2
 8011a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	f003 0310 	and.w	r3, r3, #16
 8011a5a:	2b10      	cmp	r3, #16
 8011a5c:	d050      	beq.n	8011b00 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	22ca      	movs	r2, #202	; 0xca
 8011a64:	625a      	str	r2, [r3, #36]	; 0x24
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2253      	movs	r2, #83	; 0x53
 8011a6c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 fa4a 	bl	8011f08 <RTC_EnterInitMode>
 8011a74:	4603      	mov	r3, r0
 8011a76:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011a78:	7bfb      	ldrb	r3, [r7, #15]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d124      	bne.n	8011ac8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	6899      	ldr	r1, [r3, #8]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	4b24      	ldr	r3, [pc, #144]	; (8011b1c <HAL_RTC_Init+0x100>)
 8011a8a:	400b      	ands	r3, r1
 8011a8c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	6899      	ldr	r1, [r3, #8]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685a      	ldr	r2, [r3, #4]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	431a      	orrs	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	699b      	ldr	r3, [r3, #24]
 8011aa2:	431a      	orrs	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	430a      	orrs	r2, r1
 8011aaa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	0419      	lsls	r1, r3, #16
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	68da      	ldr	r2, [r3, #12]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	430a      	orrs	r2, r1
 8011abc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 fa56 	bl	8011f70 <RTC_ExitInitMode>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011ac8:	7bfb      	ldrb	r3, [r7, #15]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d113      	bne.n	8011af6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f022 0203 	bic.w	r2, r2, #3
 8011adc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	69da      	ldr	r2, [r3, #28]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	695b      	ldr	r3, [r3, #20]
 8011aec:	431a      	orrs	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	430a      	orrs	r2, r1
 8011af4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	22ff      	movs	r2, #255	; 0xff
 8011afc:	625a      	str	r2, [r3, #36]	; 0x24
 8011afe:	e001      	b.n	8011b04 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d103      	bne.n	8011b12 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3710      	adds	r7, #16
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	ff8fffbf 	.word	0xff8fffbf

08011b20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011b20:	b590      	push	{r4, r7, lr}
 8011b22:	b087      	sub	sp, #28
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d101      	bne.n	8011b3a <HAL_RTC_SetTime+0x1a>
 8011b36:	2302      	movs	r3, #2
 8011b38:	e089      	b.n	8011c4e <HAL_RTC_SetTime+0x12e>
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2202      	movs	r2, #2
 8011b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	22ca      	movs	r2, #202	; 0xca
 8011b50:	625a      	str	r2, [r3, #36]	; 0x24
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2253      	movs	r2, #83	; 0x53
 8011b58:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011b5a:	68f8      	ldr	r0, [r7, #12]
 8011b5c:	f000 f9d4 	bl	8011f08 <RTC_EnterInitMode>
 8011b60:	4603      	mov	r3, r0
 8011b62:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011b64:	7cfb      	ldrb	r3, [r7, #19]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d161      	bne.n	8011c2e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d126      	bne.n	8011bbe <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	689b      	ldr	r3, [r3, #8]
 8011b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d102      	bne.n	8011b84 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	2200      	movs	r2, #0
 8011b82:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f000 fa2f 	bl	8011fec <RTC_ByteToBcd2>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	785b      	ldrb	r3, [r3, #1]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f000 fa28 	bl	8011fec <RTC_ByteToBcd2>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011ba0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	789b      	ldrb	r3, [r3, #2]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f000 fa20 	bl	8011fec <RTC_ByteToBcd2>
 8011bac:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bae:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	78db      	ldrb	r3, [r3, #3]
 8011bb6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	617b      	str	r3, [r7, #20]
 8011bbc:	e018      	b.n	8011bf0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	689b      	ldr	r3, [r3, #8]
 8011bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d102      	bne.n	8011bd2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	785b      	ldrb	r3, [r3, #1]
 8011bdc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bde:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011be4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	78db      	ldrb	r3, [r3, #3]
 8011bea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bec:	4313      	orrs	r3, r2
 8011bee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681a      	ldr	r2, [r3, #0]
 8011bf4:	6979      	ldr	r1, [r7, #20]
 8011bf6:	4b18      	ldr	r3, [pc, #96]	; (8011c58 <HAL_RTC_SetTime+0x138>)
 8011bf8:	400b      	ands	r3, r1
 8011bfa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	689a      	ldr	r2, [r3, #8]
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011c0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	6899      	ldr	r1, [r3, #8]
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	68da      	ldr	r2, [r3, #12]
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	691b      	ldr	r3, [r3, #16]
 8011c1a:	431a      	orrs	r2, r3
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	430a      	orrs	r2, r1
 8011c22:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	f000 f9a3 	bl	8011f70 <RTC_ExitInitMode>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	22ff      	movs	r2, #255	; 0xff
 8011c34:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011c36:	7cfb      	ldrb	r3, [r7, #19]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d103      	bne.n	8011c44 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2201      	movs	r2, #1
 8011c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	2200      	movs	r2, #0
 8011c48:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011c4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	371c      	adds	r7, #28
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd90      	pop	{r4, r7, pc}
 8011c56:	bf00      	nop
 8011c58:	007f7f7f 	.word	0x007f7f7f

08011c5c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b086      	sub	sp, #24
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	691b      	ldr	r3, [r3, #16]
 8011c78:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	681a      	ldr	r2, [r3, #0]
 8011c86:	4b22      	ldr	r3, [pc, #136]	; (8011d10 <HAL_RTC_GetTime+0xb4>)
 8011c88:	4013      	ands	r3, r2
 8011c8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	0c1b      	lsrs	r3, r3, #16
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	0a1b      	lsrs	r3, r3, #8
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	b2db      	uxtb	r3, r3
 8011cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cb4:	b2da      	uxtb	r2, r3
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	0d9b      	lsrs	r3, r3, #22
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	f003 0301 	and.w	r3, r3, #1
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d11a      	bne.n	8011d06 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f000 f9a9 	bl	801202c <RTC_Bcd2ToByte>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	461a      	mov	r2, r3
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	785b      	ldrb	r3, [r3, #1]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f000 f9a0 	bl	801202c <RTC_Bcd2ToByte>
 8011cec:	4603      	mov	r3, r0
 8011cee:	461a      	mov	r2, r3
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	789b      	ldrb	r3, [r3, #2]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f000 f997 	bl	801202c <RTC_Bcd2ToByte>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	461a      	mov	r2, r3
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011d06:	2300      	movs	r3, #0
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	007f7f7f 	.word	0x007f7f7f

08011d14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011d14:	b590      	push	{r4, r7, lr}
 8011d16:	b087      	sub	sp, #28
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d101      	bne.n	8011d2e <HAL_RTC_SetDate+0x1a>
 8011d2a:	2302      	movs	r3, #2
 8011d2c:	e073      	b.n	8011e16 <HAL_RTC_SetDate+0x102>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2201      	movs	r2, #1
 8011d32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2202      	movs	r2, #2
 8011d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d10e      	bne.n	8011d62 <HAL_RTC_SetDate+0x4e>
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	785b      	ldrb	r3, [r3, #1]
 8011d48:	f003 0310 	and.w	r3, r3, #16
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d008      	beq.n	8011d62 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	785b      	ldrb	r3, [r3, #1]
 8011d54:	f023 0310 	bic.w	r3, r3, #16
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	330a      	adds	r3, #10
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d11c      	bne.n	8011da2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	78db      	ldrb	r3, [r3, #3]
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f000 f93d 	bl	8011fec <RTC_ByteToBcd2>
 8011d72:	4603      	mov	r3, r0
 8011d74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	785b      	ldrb	r3, [r3, #1]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 f936 	bl	8011fec <RTC_ByteToBcd2>
 8011d80:	4603      	mov	r3, r0
 8011d82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011d84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	789b      	ldrb	r3, [r3, #2]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f000 f92e 	bl	8011fec <RTC_ByteToBcd2>
 8011d90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	617b      	str	r3, [r7, #20]
 8011da0:	e00e      	b.n	8011dc0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	78db      	ldrb	r3, [r3, #3]
 8011da6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	785b      	ldrb	r3, [r3, #1]
 8011dac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011dae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011db0:	68ba      	ldr	r2, [r7, #8]
 8011db2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011db4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011dbc:	4313      	orrs	r3, r2
 8011dbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	22ca      	movs	r2, #202	; 0xca
 8011dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2253      	movs	r2, #83	; 0x53
 8011dce:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f000 f899 	bl	8011f08 <RTC_EnterInitMode>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011dda:	7cfb      	ldrb	r3, [r7, #19]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d10a      	bne.n	8011df6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	6979      	ldr	r1, [r7, #20]
 8011de6:	4b0e      	ldr	r3, [pc, #56]	; (8011e20 <HAL_RTC_SetDate+0x10c>)
 8011de8:	400b      	ands	r3, r1
 8011dea:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f000 f8bf 	bl	8011f70 <RTC_ExitInitMode>
 8011df2:	4603      	mov	r3, r0
 8011df4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	22ff      	movs	r2, #255	; 0xff
 8011dfc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011dfe:	7cfb      	ldrb	r3, [r7, #19]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d103      	bne.n	8011e0c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2201      	movs	r2, #1
 8011e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011e14:	7cfb      	ldrb	r3, [r7, #19]


}
 8011e16:	4618      	mov	r0, r3
 8011e18:	371c      	adds	r7, #28
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd90      	pop	{r4, r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	00ffff3f 	.word	0x00ffff3f

08011e24 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b086      	sub	sp, #24
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	4b21      	ldr	r3, [pc, #132]	; (8011ebc <HAL_RTC_GetDate+0x98>)
 8011e38:	4013      	ands	r3, r2
 8011e3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	0c1b      	lsrs	r3, r3, #16
 8011e40:	b2da      	uxtb	r2, r3
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	0a1b      	lsrs	r3, r3, #8
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	f003 031f 	and.w	r3, r3, #31
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	b2db      	uxtb	r3, r3
 8011e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	0b5b      	lsrs	r3, r3, #13
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	f003 0307 	and.w	r3, r3, #7
 8011e6e:	b2da      	uxtb	r2, r3
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d11a      	bne.n	8011eb0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	78db      	ldrb	r3, [r3, #3]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 f8d4 	bl	801202c <RTC_Bcd2ToByte>
 8011e84:	4603      	mov	r3, r0
 8011e86:	461a      	mov	r2, r3
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	785b      	ldrb	r3, [r3, #1]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f000 f8cb 	bl	801202c <RTC_Bcd2ToByte>
 8011e96:	4603      	mov	r3, r0
 8011e98:	461a      	mov	r2, r3
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	789b      	ldrb	r3, [r3, #2]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f000 f8c2 	bl	801202c <RTC_Bcd2ToByte>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	461a      	mov	r2, r3
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3718      	adds	r7, #24
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	00ffff3f 	.word	0x00ffff3f

08011ec0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	4a0d      	ldr	r2, [pc, #52]	; (8011f04 <HAL_RTC_WaitForSynchro+0x44>)
 8011ece:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011ed0:	f7f4 f85a 	bl	8005f88 <HAL_GetTick>
 8011ed4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011ed6:	e009      	b.n	8011eec <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ed8:	f7f4 f856 	bl	8005f88 <HAL_GetTick>
 8011edc:	4602      	mov	r2, r0
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	1ad3      	subs	r3, r2, r3
 8011ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011ee6:	d901      	bls.n	8011eec <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011ee8:	2303      	movs	r3, #3
 8011eea:	e007      	b.n	8011efc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	68db      	ldr	r3, [r3, #12]
 8011ef2:	f003 0320 	and.w	r3, r3, #32
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d0ee      	beq.n	8011ed8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3710      	adds	r7, #16
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	0003ff5f 	.word	0x0003ff5f

08011f08 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011f10:	2300      	movs	r3, #0
 8011f12:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d120      	bne.n	8011f64 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011f2c:	f7f4 f82c 	bl	8005f88 <HAL_GetTick>
 8011f30:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f32:	e00d      	b.n	8011f50 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011f34:	f7f4 f828 	bl	8005f88 <HAL_GetTick>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f42:	d905      	bls.n	8011f50 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011f44:	2303      	movs	r3, #3
 8011f46:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2203      	movs	r2, #3
 8011f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d102      	bne.n	8011f64 <RTC_EnterInitMode+0x5c>
 8011f5e:	7bfb      	ldrb	r3, [r7, #15]
 8011f60:	2b03      	cmp	r3, #3
 8011f62:	d1e7      	bne.n	8011f34 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3710      	adds	r7, #16
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
	...

08011f70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011f7c:	4b1a      	ldr	r3, [pc, #104]	; (8011fe8 <RTC_ExitInitMode+0x78>)
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	4a19      	ldr	r2, [pc, #100]	; (8011fe8 <RTC_ExitInitMode+0x78>)
 8011f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f86:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011f88:	4b17      	ldr	r3, [pc, #92]	; (8011fe8 <RTC_ExitInitMode+0x78>)
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	f003 0320 	and.w	r3, r3, #32
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10c      	bne.n	8011fae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff ff93 	bl	8011ec0 <HAL_RTC_WaitForSynchro>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d01e      	beq.n	8011fde <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2203      	movs	r2, #3
 8011fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011fa8:	2303      	movs	r3, #3
 8011faa:	73fb      	strb	r3, [r7, #15]
 8011fac:	e017      	b.n	8011fde <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011fae:	4b0e      	ldr	r3, [pc, #56]	; (8011fe8 <RTC_ExitInitMode+0x78>)
 8011fb0:	689b      	ldr	r3, [r3, #8]
 8011fb2:	4a0d      	ldr	r2, [pc, #52]	; (8011fe8 <RTC_ExitInitMode+0x78>)
 8011fb4:	f023 0320 	bic.w	r3, r3, #32
 8011fb8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7ff ff80 	bl	8011ec0 <HAL_RTC_WaitForSynchro>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d005      	beq.n	8011fd2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2203      	movs	r2, #3
 8011fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011fce:	2303      	movs	r3, #3
 8011fd0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011fd2:	4b05      	ldr	r3, [pc, #20]	; (8011fe8 <RTC_ExitInitMode+0x78>)
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	4a04      	ldr	r2, [pc, #16]	; (8011fe8 <RTC_ExitInitMode+0x78>)
 8011fd8:	f043 0320 	orr.w	r3, r3, #32
 8011fdc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	58004000 	.word	0x58004000

08011fec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b085      	sub	sp, #20
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011ffe:	e005      	b.n	801200c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	3301      	adds	r3, #1
 8012004:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8012006:	7afb      	ldrb	r3, [r7, #11]
 8012008:	3b0a      	subs	r3, #10
 801200a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 801200c:	7afb      	ldrb	r3, [r7, #11]
 801200e:	2b09      	cmp	r3, #9
 8012010:	d8f6      	bhi.n	8012000 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	b2db      	uxtb	r3, r3
 8012016:	011b      	lsls	r3, r3, #4
 8012018:	b2da      	uxtb	r2, r3
 801201a:	7afb      	ldrb	r3, [r7, #11]
 801201c:	4313      	orrs	r3, r2
 801201e:	b2db      	uxtb	r3, r3
}
 8012020:	4618      	mov	r0, r3
 8012022:	3714      	adds	r7, #20
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	4603      	mov	r3, r0
 8012034:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8012036:	79fb      	ldrb	r3, [r7, #7]
 8012038:	091b      	lsrs	r3, r3, #4
 801203a:	b2db      	uxtb	r3, r3
 801203c:	461a      	mov	r2, r3
 801203e:	0092      	lsls	r2, r2, #2
 8012040:	4413      	add	r3, r2
 8012042:	005b      	lsls	r3, r3, #1
 8012044:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012046:	79fb      	ldrb	r3, [r7, #7]
 8012048:	f003 030f 	and.w	r3, r3, #15
 801204c:	b2da      	uxtb	r2, r3
 801204e:	7bfb      	ldrb	r3, [r7, #15]
 8012050:	4413      	add	r3, r2
 8012052:	b2db      	uxtb	r3, r3
}
 8012054:	4618      	mov	r0, r3
 8012056:	3714      	adds	r7, #20
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d101      	bne.n	8012072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801206e:	2301      	movs	r3, #1
 8012070:	e10f      	b.n	8012292 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	4a87      	ldr	r2, [pc, #540]	; (801229c <HAL_SPI_Init+0x23c>)
 801207e:	4293      	cmp	r3, r2
 8012080:	d00f      	beq.n	80120a2 <HAL_SPI_Init+0x42>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4a86      	ldr	r2, [pc, #536]	; (80122a0 <HAL_SPI_Init+0x240>)
 8012088:	4293      	cmp	r3, r2
 801208a:	d00a      	beq.n	80120a2 <HAL_SPI_Init+0x42>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	4a84      	ldr	r2, [pc, #528]	; (80122a4 <HAL_SPI_Init+0x244>)
 8012092:	4293      	cmp	r3, r2
 8012094:	d005      	beq.n	80120a2 <HAL_SPI_Init+0x42>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	2b0f      	cmp	r3, #15
 801209c:	d901      	bls.n	80120a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801209e:	2301      	movs	r3, #1
 80120a0:	e0f7      	b.n	8012292 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f000 fd60 	bl	8012b68 <SPI_GetPacketSize>
 80120a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	4a7b      	ldr	r2, [pc, #492]	; (801229c <HAL_SPI_Init+0x23c>)
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d00c      	beq.n	80120ce <HAL_SPI_Init+0x6e>
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	4a79      	ldr	r2, [pc, #484]	; (80122a0 <HAL_SPI_Init+0x240>)
 80120ba:	4293      	cmp	r3, r2
 80120bc:	d007      	beq.n	80120ce <HAL_SPI_Init+0x6e>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	4a78      	ldr	r2, [pc, #480]	; (80122a4 <HAL_SPI_Init+0x244>)
 80120c4:	4293      	cmp	r3, r2
 80120c6:	d002      	beq.n	80120ce <HAL_SPI_Init+0x6e>
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2b08      	cmp	r3, #8
 80120cc:	d811      	bhi.n	80120f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80120d2:	4a72      	ldr	r2, [pc, #456]	; (801229c <HAL_SPI_Init+0x23c>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d009      	beq.n	80120ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	4a70      	ldr	r2, [pc, #448]	; (80122a0 <HAL_SPI_Init+0x240>)
 80120de:	4293      	cmp	r3, r2
 80120e0:	d004      	beq.n	80120ec <HAL_SPI_Init+0x8c>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	4a6f      	ldr	r2, [pc, #444]	; (80122a4 <HAL_SPI_Init+0x244>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d104      	bne.n	80120f6 <HAL_SPI_Init+0x96>
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	2b10      	cmp	r3, #16
 80120f0:	d901      	bls.n	80120f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80120f2:	2301      	movs	r3, #1
 80120f4:	e0cd      	b.n	8012292 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d106      	bne.n	8012110 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2200      	movs	r2, #0
 8012106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7f2 f9b0 	bl	8004470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2202      	movs	r2, #2
 8012114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f022 0201 	bic.w	r2, r2, #1
 8012126:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	689b      	ldr	r3, [r3, #8]
 801212e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8012132:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	699b      	ldr	r3, [r3, #24]
 8012138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801213c:	d119      	bne.n	8012172 <HAL_SPI_Init+0x112>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012146:	d103      	bne.n	8012150 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801214c:	2b00      	cmp	r3, #0
 801214e:	d008      	beq.n	8012162 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10c      	bne.n	8012172 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801215c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012160:	d107      	bne.n	8012172 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012170:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801217a:	2b00      	cmp	r3, #0
 801217c:	d00f      	beq.n	801219e <HAL_SPI_Init+0x13e>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	2b06      	cmp	r3, #6
 8012184:	d90b      	bls.n	801219e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	430a      	orrs	r2, r1
 801219a:	601a      	str	r2, [r3, #0]
 801219c:	e007      	b.n	80121ae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80121ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	69da      	ldr	r2, [r3, #28]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121b6:	431a      	orrs	r2, r3
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	431a      	orrs	r2, r3
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121c0:	ea42 0103 	orr.w	r1, r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	68da      	ldr	r2, [r3, #12]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	430a      	orrs	r2, r1
 80121ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d8:	431a      	orrs	r2, r3
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121de:	431a      	orrs	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	699b      	ldr	r3, [r3, #24]
 80121e4:	431a      	orrs	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	431a      	orrs	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	695b      	ldr	r3, [r3, #20]
 80121f0:	431a      	orrs	r2, r3
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6a1b      	ldr	r3, [r3, #32]
 80121f6:	431a      	orrs	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	431a      	orrs	r2, r3
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012202:	431a      	orrs	r2, r3
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	431a      	orrs	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801220e:	ea42 0103 	orr.w	r1, r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	430a      	orrs	r2, r1
 801221c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d113      	bne.n	801224e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	689b      	ldr	r3, [r3, #8]
 801222c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012238:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	689b      	ldr	r3, [r3, #8]
 8012240:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801224c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f022 0201 	bic.w	r2, r2, #1
 801225c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00a      	beq.n	8012280 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	430a      	orrs	r2, r1
 801227e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2200      	movs	r2, #0
 8012284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2201      	movs	r2, #1
 801228c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	40013000 	.word	0x40013000
 80122a0:	40003800 	.word	0x40003800
 80122a4:	40003c00 	.word	0x40003c00

080122a8 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	4613      	mov	r3, r2
 80122b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	2b01      	cmp	r3, #1
 80122c0:	d005      	beq.n	80122ce <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2200      	movs	r2, #0
 80122c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80122ca:	2302      	movs	r3, #2
 80122cc:	e127      	b.n	801251e <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d002      	beq.n	80122da <HAL_SPI_Receive_DMA+0x32>
 80122d4:	88fb      	ldrh	r3, [r7, #6]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d105      	bne.n	80122e6 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	2200      	movs	r2, #0
 80122de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80122e2:	2301      	movs	r3, #1
 80122e4:	e11b      	b.n	801251e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d101      	bne.n	80122f4 <HAL_SPI_Receive_DMA+0x4c>
 80122f0:	2302      	movs	r3, #2
 80122f2:	e114      	b.n	801251e <HAL_SPI_Receive_DMA+0x276>
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2201      	movs	r2, #1
 80122f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	2204      	movs	r2, #4
 8012300:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	2200      	movs	r2, #0
 8012308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	88fa      	ldrh	r2, [r7, #6]
 8012316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	88fa      	ldrh	r2, [r7, #6]
 801231e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	2200      	movs	r2, #0
 8012326:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2200      	movs	r2, #0
 801232c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2200      	movs	r2, #0
 8012332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2200      	movs	r2, #0
 801233a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	689b      	ldr	r3, [r3, #8]
 8012342:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8012346:	d108      	bne.n	801235a <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012356:	601a      	str	r2, [r3, #0]
 8012358:	e009      	b.n	801236e <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	68db      	ldr	r3, [r3, #12]
 8012360:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801236c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	2b0f      	cmp	r3, #15
 8012374:	d905      	bls.n	8012382 <HAL_SPI_Receive_DMA+0xda>
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801237a:	699b      	ldr	r3, [r3, #24]
 801237c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012380:	d10f      	bne.n	80123a2 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012386:	2b07      	cmp	r3, #7
 8012388:	d911      	bls.n	80123ae <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801238e:	699b      	ldr	r3, [r3, #24]
 8012390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012394:	d00b      	beq.n	80123ae <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801239a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801239c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123a0:	d005      	beq.n	80123ae <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2200      	movs	r2, #0
 80123a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80123aa:	2301      	movs	r3, #1
 80123ac:	e0b7      	b.n	801251e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	689a      	ldr	r2, [r3, #8]
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80123bc:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	2b07      	cmp	r3, #7
 80123c4:	d820      	bhi.n	8012408 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ca:	699b      	ldr	r3, [r3, #24]
 80123cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123d0:	d109      	bne.n	80123e6 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80123d8:	b29b      	uxth	r3, r3
 80123da:	3301      	adds	r3, #1
 80123dc:	105b      	asrs	r3, r3, #1
 80123de:	b29a      	uxth	r2, r3
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ea:	699b      	ldr	r3, [r3, #24]
 80123ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123f0:	d11e      	bne.n	8012430 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	3303      	adds	r3, #3
 80123fc:	109b      	asrs	r3, r3, #2
 80123fe:	b29a      	uxth	r2, r3
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012406:	e013      	b.n	8012430 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	2b0f      	cmp	r3, #15
 801240e:	d80f      	bhi.n	8012430 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012414:	699b      	ldr	r3, [r3, #24]
 8012416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801241a:	d109      	bne.n	8012430 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012422:	b29b      	uxth	r3, r3
 8012424:	3301      	adds	r3, #1
 8012426:	105b      	asrs	r3, r3, #1
 8012428:	b29a      	uxth	r2, r3
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012434:	4a3c      	ldr	r2, [pc, #240]	; (8012528 <HAL_SPI_Receive_DMA+0x280>)
 8012436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801243c:	4a3b      	ldr	r2, [pc, #236]	; (801252c <HAL_SPI_Receive_DMA+0x284>)
 801243e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012444:	4a3a      	ldr	r2, [pc, #232]	; (8012530 <HAL_SPI_Receive_DMA+0x288>)
 8012446:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801244c:	2200      	movs	r2, #0
 801244e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	3330      	adds	r3, #48	; 0x30
 801245a:	4619      	mov	r1, r3
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012460:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012468:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801246a:	f7f6 fa11 	bl	8008890 <HAL_DMA_Start_IT>
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	d011      	beq.n	8012498 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801247a:	f043 0210 	orr.w	r2, r3, #16
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2201      	movs	r2, #1
 8012488:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2200      	movs	r2, #0
 8012490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8012494:	2301      	movs	r3, #1
 8012496:	e042      	b.n	801251e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801249c:	69db      	ldr	r3, [r3, #28]
 801249e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124a2:	d108      	bne.n	80124b6 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	6859      	ldr	r1, [r3, #4]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	4b21      	ldr	r3, [pc, #132]	; (8012534 <HAL_SPI_Receive_DMA+0x28c>)
 80124b0:	400b      	ands	r3, r1
 80124b2:	6053      	str	r3, [r2, #4]
 80124b4:	e009      	b.n	80124ca <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	685a      	ldr	r2, [r3, #4]
 80124bc:	4b1d      	ldr	r3, [pc, #116]	; (8012534 <HAL_SPI_Receive_DMA+0x28c>)
 80124be:	4013      	ands	r3, r2
 80124c0:	88f9      	ldrh	r1, [r7, #6]
 80124c2:	68fa      	ldr	r2, [r7, #12]
 80124c4:	6812      	ldr	r2, [r2, #0]
 80124c6:	430b      	orrs	r3, r1
 80124c8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	689a      	ldr	r2, [r3, #8]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80124d8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	691a      	ldr	r2, [r3, #16]
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80124e8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f042 0201 	orr.w	r2, r2, #1
 80124f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012502:	d107      	bne.n	8012514 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012512:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2200      	movs	r2, #0
 8012518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801251c:	2300      	movs	r3, #0
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	08012993 	.word	0x08012993
 801252c:	0801294d 	.word	0x0801294d
 8012530:	080129af 	.word	0x080129af
 8012534:	ffff0000 	.word	0xffff0000

08012538 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b08a      	sub	sp, #40	; 0x28
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	691b      	ldr	r3, [r3, #16]
 8012546:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	695b      	ldr	r3, [r3, #20]
 801254e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012550:	6a3a      	ldr	r2, [r7, #32]
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	4013      	ands	r3, r2
 8012556:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012560:	2300      	movs	r3, #0
 8012562:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801256a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	3330      	adds	r3, #48	; 0x30
 8012572:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801257a:	2b00      	cmp	r3, #0
 801257c:	d010      	beq.n	80125a0 <HAL_SPI_IRQHandler+0x68>
 801257e:	6a3b      	ldr	r3, [r7, #32]
 8012580:	f003 0308 	and.w	r3, r3, #8
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00b      	beq.n	80125a0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	699a      	ldr	r2, [r3, #24]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012596:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f000 f9cd 	bl	8012938 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801259e:	e192      	b.n	80128c6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d113      	bne.n	80125d2 <HAL_SPI_IRQHandler+0x9a>
 80125aa:	69bb      	ldr	r3, [r7, #24]
 80125ac:	f003 0320 	and.w	r3, r3, #32
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d10e      	bne.n	80125d2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80125b4:	69bb      	ldr	r3, [r7, #24]
 80125b6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d009      	beq.n	80125d2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	4798      	blx	r3
    handled = 1UL;
 80125ce:	2301      	movs	r3, #1
 80125d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d10f      	bne.n	80125fc <HAL_SPI_IRQHandler+0xc4>
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	f003 0301 	and.w	r3, r3, #1
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00a      	beq.n	80125fc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d105      	bne.n	80125fc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	4798      	blx	r3
    handled = 1UL;
 80125f8:	2301      	movs	r3, #1
 80125fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	f003 0320 	and.w	r3, r3, #32
 8012602:	2b00      	cmp	r3, #0
 8012604:	d10f      	bne.n	8012626 <HAL_SPI_IRQHandler+0xee>
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	f003 0302 	and.w	r3, r3, #2
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00a      	beq.n	8012626 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012616:	2b00      	cmp	r3, #0
 8012618:	d105      	bne.n	8012626 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	4798      	blx	r3
    handled = 1UL;
 8012622:	2301      	movs	r3, #1
 8012624:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8012626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012628:	2b00      	cmp	r3, #0
 801262a:	f040 8147 	bne.w	80128bc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	f003 0308 	and.w	r3, r3, #8
 8012634:	2b00      	cmp	r3, #0
 8012636:	f000 808b 	beq.w	8012750 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	699a      	ldr	r2, [r3, #24]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f042 0208 	orr.w	r2, r2, #8
 8012648:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	699a      	ldr	r2, [r3, #24]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f042 0210 	orr.w	r2, r2, #16
 8012658:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	699a      	ldr	r2, [r3, #24]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012668:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	691a      	ldr	r2, [r3, #16]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f022 0208 	bic.w	r2, r2, #8
 8012678:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012684:	2b00      	cmp	r3, #0
 8012686:	d13d      	bne.n	8012704 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012688:	e036      	b.n	80126f8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	2b0f      	cmp	r3, #15
 8012690:	d90b      	bls.n	80126aa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801269a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801269c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126a2:	1d1a      	adds	r2, r3, #4
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	665a      	str	r2, [r3, #100]	; 0x64
 80126a8:	e01d      	b.n	80126e6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	2b07      	cmp	r3, #7
 80126b0:	d90b      	bls.n	80126ca <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126b6:	68fa      	ldr	r2, [r7, #12]
 80126b8:	8812      	ldrh	r2, [r2, #0]
 80126ba:	b292      	uxth	r2, r2
 80126bc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126c2:	1c9a      	adds	r2, r3, #2
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	665a      	str	r2, [r3, #100]	; 0x64
 80126c8:	e00d      	b.n	80126e6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126d6:	7812      	ldrb	r2, [r2, #0]
 80126d8:	b2d2      	uxtb	r2, r2
 80126da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126e0:	1c5a      	adds	r2, r3, #1
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	3b01      	subs	r3, #1
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80126fe:	b29b      	uxth	r3, r3
 8012700:	2b00      	cmp	r3, #0
 8012702:	d1c2      	bne.n	801268a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 f98f 	bl	8012a28 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2201      	movs	r2, #1
 801270e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012718:	2b00      	cmp	r3, #0
 801271a:	d003      	beq.n	8012724 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 f901 	bl	8012924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012722:	e0d0      	b.n	80128c6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012724:	7cfb      	ldrb	r3, [r7, #19]
 8012726:	2b05      	cmp	r3, #5
 8012728:	d103      	bne.n	8012732 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 f8e6 	bl	80128fc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012730:	e0c6      	b.n	80128c0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012732:	7cfb      	ldrb	r3, [r7, #19]
 8012734:	2b04      	cmp	r3, #4
 8012736:	d103      	bne.n	8012740 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f000 f8d5 	bl	80128e8 <HAL_SPI_RxCpltCallback>
    return;
 801273e:	e0bf      	b.n	80128c0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012740:	7cfb      	ldrb	r3, [r7, #19]
 8012742:	2b03      	cmp	r3, #3
 8012744:	f040 80bc 	bne.w	80128c0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f000 f8c3 	bl	80128d4 <HAL_SPI_TxCpltCallback>
    return;
 801274e:	e0b7      	b.n	80128c0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8012756:	2b00      	cmp	r3, #0
 8012758:	f000 80b5 	beq.w	80128c6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00f      	beq.n	8012786 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801276c:	f043 0204 	orr.w	r2, r3, #4
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	699a      	ldr	r2, [r3, #24]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012784:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00f      	beq.n	80127b0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012796:	f043 0201 	orr.w	r2, r3, #1
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	699a      	ldr	r2, [r3, #24]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80127ae:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00f      	beq.n	80127da <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127c0:	f043 0208 	orr.w	r2, r3, #8
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	699a      	ldr	r2, [r3, #24]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80127d8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	f003 0320 	and.w	r3, r3, #32
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d00f      	beq.n	8012804 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	699a      	ldr	r2, [r3, #24]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f042 0220 	orr.w	r2, r2, #32
 8012802:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801280a:	2b00      	cmp	r3, #0
 801280c:	d05a      	beq.n	80128c4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f022 0201 	bic.w	r2, r2, #1
 801281c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	6919      	ldr	r1, [r3, #16]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	4b28      	ldr	r3, [pc, #160]	; (80128cc <HAL_SPI_IRQHandler+0x394>)
 801282a:	400b      	ands	r3, r1
 801282c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012838:	d138      	bne.n	80128ac <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	689a      	ldr	r2, [r3, #8]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012848:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801284e:	2b00      	cmp	r3, #0
 8012850:	d013      	beq.n	801287a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012856:	4a1e      	ldr	r2, [pc, #120]	; (80128d0 <HAL_SPI_IRQHandler+0x398>)
 8012858:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801285e:	4618      	mov	r0, r3
 8012860:	f7f6 fd9e 	bl	80093a0 <HAL_DMA_Abort_IT>
 8012864:	4603      	mov	r3, r0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d007      	beq.n	801287a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012870:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801287e:	2b00      	cmp	r3, #0
 8012880:	d020      	beq.n	80128c4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012886:	4a12      	ldr	r2, [pc, #72]	; (80128d0 <HAL_SPI_IRQHandler+0x398>)
 8012888:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801288e:	4618      	mov	r0, r3
 8012890:	f7f6 fd86 	bl	80093a0 <HAL_DMA_Abort_IT>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d014      	beq.n	80128c4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80128aa:	e00b      	b.n	80128c4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2201      	movs	r2, #1
 80128b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f000 f835 	bl	8012924 <HAL_SPI_ErrorCallback>
    return;
 80128ba:	e003      	b.n	80128c4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80128bc:	bf00      	nop
 80128be:	e002      	b.n	80128c6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80128c0:	bf00      	nop
 80128c2:	e000      	b.n	80128c6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80128c4:	bf00      	nop
  }
}
 80128c6:	3728      	adds	r7, #40	; 0x28
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	fffffc94 	.word	0xfffffc94
 80128d0:	080129f5 	.word	0x080129f5

080128d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80128dc:	bf00      	nop
 80128de:	370c      	adds	r7, #12
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012904:	bf00      	nop
 8012906:	370c      	adds	r7, #12
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012918:	bf00      	nop
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012940:	bf00      	nop
 8012942:	370c      	adds	r7, #12
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr

0801294c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b084      	sub	sp, #16
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012958:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012960:	b2db      	uxtb	r3, r3
 8012962:	2b07      	cmp	r3, #7
 8012964:	d011      	beq.n	801298a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801296a:	69db      	ldr	r3, [r3, #28]
 801296c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012970:	d103      	bne.n	801297a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012972:	68f8      	ldr	r0, [r7, #12]
 8012974:	f7ff ffb8 	bl	80128e8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012978:	e007      	b.n	801298a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	691a      	ldr	r2, [r3, #16]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f042 0208 	orr.w	r2, r2, #8
 8012988:	611a      	str	r2, [r3, #16]
}
 801298a:	bf00      	nop
 801298c:	3710      	adds	r7, #16
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b084      	sub	sp, #16
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801299e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80129a0:	68f8      	ldr	r0, [r7, #12]
 80129a2:	f7ff ffb5 	bl	8012910 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80129a6:	bf00      	nop
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}

080129ae <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80129ae:	b580      	push	{r7, lr}
 80129b0:	b084      	sub	sp, #16
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ba:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7f7 fe6d 	bl	800a69c <HAL_DMA_GetError>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b02      	cmp	r3, #2
 80129c6:	d011      	beq.n	80129ec <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80129c8:	68f8      	ldr	r0, [r7, #12]
 80129ca:	f000 f82d 	bl	8012a28 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129d4:	f043 0210 	orr.w	r2, r3, #16
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2201      	movs	r2, #1
 80129e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80129e6:	68f8      	ldr	r0, [r7, #12]
 80129e8:	f7ff ff9c 	bl	8012924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80129ec:	bf00      	nop
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2200      	movs	r2, #0
 8012a06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2201      	movs	r2, #1
 8012a16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	f7ff ff82 	bl	8012924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012a20:	bf00      	nop
 8012a22:	3710      	adds	r7, #16
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b085      	sub	sp, #20
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	695b      	ldr	r3, [r3, #20]
 8012a36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	699a      	ldr	r2, [r3, #24]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f042 0208 	orr.w	r2, r2, #8
 8012a46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	699a      	ldr	r2, [r3, #24]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f042 0210 	orr.w	r2, r2, #16
 8012a56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f022 0201 	bic.w	r2, r2, #1
 8012a66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	6919      	ldr	r1, [r3, #16]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	4b3c      	ldr	r3, [pc, #240]	; (8012b64 <SPI_CloseTransfer+0x13c>)
 8012a74:	400b      	ands	r3, r1
 8012a76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	689a      	ldr	r2, [r3, #8]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012a86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b04      	cmp	r3, #4
 8012a92:	d014      	beq.n	8012abe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f003 0320 	and.w	r3, r3, #32
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00f      	beq.n	8012abe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	699a      	ldr	r2, [r3, #24]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f042 0220 	orr.w	r2, r2, #32
 8012abc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	2b03      	cmp	r3, #3
 8012ac8:	d014      	beq.n	8012af4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d00f      	beq.n	8012af4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ada:	f043 0204 	orr.w	r2, r3, #4
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	699a      	ldr	r2, [r3, #24]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012af2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00f      	beq.n	8012b1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b04:	f043 0201 	orr.w	r2, r3, #1
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	699a      	ldr	r2, [r3, #24]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d00f      	beq.n	8012b48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b2e:	f043 0208 	orr.w	r2, r3, #8
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	699a      	ldr	r2, [r3, #24]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012b58:	bf00      	nop
 8012b5a:	3714      	adds	r7, #20
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr
 8012b64:	fffffc90 	.word	0xfffffc90

08012b68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	b085      	sub	sp, #20
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b74:	095b      	lsrs	r3, r3, #5
 8012b76:	3301      	adds	r3, #1
 8012b78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	3307      	adds	r3, #7
 8012b86:	08db      	lsrs	r3, r3, #3
 8012b88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3714      	adds	r7, #20
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr

08012b9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b082      	sub	sp, #8
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d101      	bne.n	8012bb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012bac:	2301      	movs	r3, #1
 8012bae:	e049      	b.n	8012c44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012bb6:	b2db      	uxtb	r3, r3
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d106      	bne.n	8012bca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7f2 f95f 	bl	8004e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2202      	movs	r2, #2
 8012bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	3304      	adds	r3, #4
 8012bda:	4619      	mov	r1, r3
 8012bdc:	4610      	mov	r0, r2
 8012bde:	f000 fe7d 	bl	80138dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2201      	movs	r2, #1
 8012be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2201      	movs	r2, #1
 8012bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2201      	movs	r2, #1
 8012c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2201      	movs	r2, #1
 8012c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2201      	movs	r2, #1
 8012c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2201      	movs	r2, #1
 8012c36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012c42:	2300      	movs	r3, #0
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d001      	beq.n	8012c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	e054      	b.n	8012d0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2202      	movs	r2, #2
 8012c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	68da      	ldr	r2, [r3, #12]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f042 0201 	orr.w	r2, r2, #1
 8012c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4a26      	ldr	r2, [pc, #152]	; (8012d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d022      	beq.n	8012ccc <HAL_TIM_Base_Start_IT+0x80>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c8e:	d01d      	beq.n	8012ccc <HAL_TIM_Base_Start_IT+0x80>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	4a22      	ldr	r2, [pc, #136]	; (8012d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8012c96:	4293      	cmp	r3, r2
 8012c98:	d018      	beq.n	8012ccc <HAL_TIM_Base_Start_IT+0x80>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4a21      	ldr	r2, [pc, #132]	; (8012d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d013      	beq.n	8012ccc <HAL_TIM_Base_Start_IT+0x80>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4a1f      	ldr	r2, [pc, #124]	; (8012d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d00e      	beq.n	8012ccc <HAL_TIM_Base_Start_IT+0x80>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	4a1e      	ldr	r2, [pc, #120]	; (8012d2c <HAL_TIM_Base_Start_IT+0xe0>)
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d009      	beq.n	8012ccc <HAL_TIM_Base_Start_IT+0x80>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	4a1c      	ldr	r2, [pc, #112]	; (8012d30 <HAL_TIM_Base_Start_IT+0xe4>)
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d004      	beq.n	8012ccc <HAL_TIM_Base_Start_IT+0x80>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	4a1b      	ldr	r2, [pc, #108]	; (8012d34 <HAL_TIM_Base_Start_IT+0xe8>)
 8012cc8:	4293      	cmp	r3, r2
 8012cca:	d115      	bne.n	8012cf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	689a      	ldr	r2, [r3, #8]
 8012cd2:	4b19      	ldr	r3, [pc, #100]	; (8012d38 <HAL_TIM_Base_Start_IT+0xec>)
 8012cd4:	4013      	ands	r3, r2
 8012cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2b06      	cmp	r3, #6
 8012cdc:	d015      	beq.n	8012d0a <HAL_TIM_Base_Start_IT+0xbe>
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ce4:	d011      	beq.n	8012d0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	f042 0201 	orr.w	r2, r2, #1
 8012cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cf6:	e008      	b.n	8012d0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f042 0201 	orr.w	r2, r2, #1
 8012d06:	601a      	str	r2, [r3, #0]
 8012d08:	e000      	b.n	8012d0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012d0c:	2300      	movs	r3, #0
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3714      	adds	r7, #20
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	bf00      	nop
 8012d1c:	40010000 	.word	0x40010000
 8012d20:	40000400 	.word	0x40000400
 8012d24:	40000800 	.word	0x40000800
 8012d28:	40000c00 	.word	0x40000c00
 8012d2c:	40010400 	.word	0x40010400
 8012d30:	40001800 	.word	0x40001800
 8012d34:	40014000 	.word	0x40014000
 8012d38:	00010007 	.word	0x00010007

08012d3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d46:	2300      	movs	r3, #0
 8012d48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d109      	bne.n	8012d64 <HAL_TIM_OC_Start_IT+0x28>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012d56:	b2db      	uxtb	r3, r3
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	bf14      	ite	ne
 8012d5c:	2301      	movne	r3, #1
 8012d5e:	2300      	moveq	r3, #0
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	e03c      	b.n	8012dde <HAL_TIM_OC_Start_IT+0xa2>
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	2b04      	cmp	r3, #4
 8012d68:	d109      	bne.n	8012d7e <HAL_TIM_OC_Start_IT+0x42>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	2b01      	cmp	r3, #1
 8012d74:	bf14      	ite	ne
 8012d76:	2301      	movne	r3, #1
 8012d78:	2300      	moveq	r3, #0
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	e02f      	b.n	8012dde <HAL_TIM_OC_Start_IT+0xa2>
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	2b08      	cmp	r3, #8
 8012d82:	d109      	bne.n	8012d98 <HAL_TIM_OC_Start_IT+0x5c>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	bf14      	ite	ne
 8012d90:	2301      	movne	r3, #1
 8012d92:	2300      	moveq	r3, #0
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	e022      	b.n	8012dde <HAL_TIM_OC_Start_IT+0xa2>
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	2b0c      	cmp	r3, #12
 8012d9c:	d109      	bne.n	8012db2 <HAL_TIM_OC_Start_IT+0x76>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	bf14      	ite	ne
 8012daa:	2301      	movne	r3, #1
 8012dac:	2300      	moveq	r3, #0
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	e015      	b.n	8012dde <HAL_TIM_OC_Start_IT+0xa2>
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	2b10      	cmp	r3, #16
 8012db6:	d109      	bne.n	8012dcc <HAL_TIM_OC_Start_IT+0x90>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	bf14      	ite	ne
 8012dc4:	2301      	movne	r3, #1
 8012dc6:	2300      	moveq	r3, #0
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	e008      	b.n	8012dde <HAL_TIM_OC_Start_IT+0xa2>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	2b01      	cmp	r3, #1
 8012dd6:	bf14      	ite	ne
 8012dd8:	2301      	movne	r3, #1
 8012dda:	2300      	moveq	r3, #0
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d001      	beq.n	8012de6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012de2:	2301      	movs	r3, #1
 8012de4:	e0ec      	b.n	8012fc0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d104      	bne.n	8012df6 <HAL_TIM_OC_Start_IT+0xba>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2202      	movs	r2, #2
 8012df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012df4:	e023      	b.n	8012e3e <HAL_TIM_OC_Start_IT+0x102>
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	2b04      	cmp	r3, #4
 8012dfa:	d104      	bne.n	8012e06 <HAL_TIM_OC_Start_IT+0xca>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2202      	movs	r2, #2
 8012e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012e04:	e01b      	b.n	8012e3e <HAL_TIM_OC_Start_IT+0x102>
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2b08      	cmp	r3, #8
 8012e0a:	d104      	bne.n	8012e16 <HAL_TIM_OC_Start_IT+0xda>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2202      	movs	r2, #2
 8012e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012e14:	e013      	b.n	8012e3e <HAL_TIM_OC_Start_IT+0x102>
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	2b0c      	cmp	r3, #12
 8012e1a:	d104      	bne.n	8012e26 <HAL_TIM_OC_Start_IT+0xea>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2202      	movs	r2, #2
 8012e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012e24:	e00b      	b.n	8012e3e <HAL_TIM_OC_Start_IT+0x102>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	2b10      	cmp	r3, #16
 8012e2a:	d104      	bne.n	8012e36 <HAL_TIM_OC_Start_IT+0xfa>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2202      	movs	r2, #2
 8012e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012e34:	e003      	b.n	8012e3e <HAL_TIM_OC_Start_IT+0x102>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2202      	movs	r2, #2
 8012e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	2b0c      	cmp	r3, #12
 8012e42:	d841      	bhi.n	8012ec8 <HAL_TIM_OC_Start_IT+0x18c>
 8012e44:	a201      	add	r2, pc, #4	; (adr r2, 8012e4c <HAL_TIM_OC_Start_IT+0x110>)
 8012e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e4a:	bf00      	nop
 8012e4c:	08012e81 	.word	0x08012e81
 8012e50:	08012ec9 	.word	0x08012ec9
 8012e54:	08012ec9 	.word	0x08012ec9
 8012e58:	08012ec9 	.word	0x08012ec9
 8012e5c:	08012e93 	.word	0x08012e93
 8012e60:	08012ec9 	.word	0x08012ec9
 8012e64:	08012ec9 	.word	0x08012ec9
 8012e68:	08012ec9 	.word	0x08012ec9
 8012e6c:	08012ea5 	.word	0x08012ea5
 8012e70:	08012ec9 	.word	0x08012ec9
 8012e74:	08012ec9 	.word	0x08012ec9
 8012e78:	08012ec9 	.word	0x08012ec9
 8012e7c:	08012eb7 	.word	0x08012eb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	68da      	ldr	r2, [r3, #12]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f042 0202 	orr.w	r2, r2, #2
 8012e8e:	60da      	str	r2, [r3, #12]
      break;
 8012e90:	e01d      	b.n	8012ece <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	68da      	ldr	r2, [r3, #12]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	f042 0204 	orr.w	r2, r2, #4
 8012ea0:	60da      	str	r2, [r3, #12]
      break;
 8012ea2:	e014      	b.n	8012ece <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	68da      	ldr	r2, [r3, #12]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f042 0208 	orr.w	r2, r2, #8
 8012eb2:	60da      	str	r2, [r3, #12]
      break;
 8012eb4:	e00b      	b.n	8012ece <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	68da      	ldr	r2, [r3, #12]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	f042 0210 	orr.w	r2, r2, #16
 8012ec4:	60da      	str	r2, [r3, #12]
      break;
 8012ec6:	e002      	b.n	8012ece <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012ec8:	2301      	movs	r3, #1
 8012eca:	73fb      	strb	r3, [r7, #15]
      break;
 8012ecc:	bf00      	nop
  }

  if (status == HAL_OK)
 8012ece:	7bfb      	ldrb	r3, [r7, #15]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d174      	bne.n	8012fbe <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2201      	movs	r2, #1
 8012eda:	6839      	ldr	r1, [r7, #0]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f001 f917 	bl	8014110 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	4a38      	ldr	r2, [pc, #224]	; (8012fc8 <HAL_TIM_OC_Start_IT+0x28c>)
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	d013      	beq.n	8012f14 <HAL_TIM_OC_Start_IT+0x1d8>
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	4a36      	ldr	r2, [pc, #216]	; (8012fcc <HAL_TIM_OC_Start_IT+0x290>)
 8012ef2:	4293      	cmp	r3, r2
 8012ef4:	d00e      	beq.n	8012f14 <HAL_TIM_OC_Start_IT+0x1d8>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4a35      	ldr	r2, [pc, #212]	; (8012fd0 <HAL_TIM_OC_Start_IT+0x294>)
 8012efc:	4293      	cmp	r3, r2
 8012efe:	d009      	beq.n	8012f14 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4a33      	ldr	r2, [pc, #204]	; (8012fd4 <HAL_TIM_OC_Start_IT+0x298>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d004      	beq.n	8012f14 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a32      	ldr	r2, [pc, #200]	; (8012fd8 <HAL_TIM_OC_Start_IT+0x29c>)
 8012f10:	4293      	cmp	r3, r2
 8012f12:	d101      	bne.n	8012f18 <HAL_TIM_OC_Start_IT+0x1dc>
 8012f14:	2301      	movs	r3, #1
 8012f16:	e000      	b.n	8012f1a <HAL_TIM_OC_Start_IT+0x1de>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d007      	beq.n	8012f2e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4a25      	ldr	r2, [pc, #148]	; (8012fc8 <HAL_TIM_OC_Start_IT+0x28c>)
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d022      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x242>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f40:	d01d      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x242>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	4a25      	ldr	r2, [pc, #148]	; (8012fdc <HAL_TIM_OC_Start_IT+0x2a0>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d018      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x242>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4a23      	ldr	r2, [pc, #140]	; (8012fe0 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d013      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x242>
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4a22      	ldr	r2, [pc, #136]	; (8012fe4 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d00e      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x242>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a19      	ldr	r2, [pc, #100]	; (8012fcc <HAL_TIM_OC_Start_IT+0x290>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d009      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x242>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4a1e      	ldr	r2, [pc, #120]	; (8012fe8 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d004      	beq.n	8012f7e <HAL_TIM_OC_Start_IT+0x242>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a15      	ldr	r2, [pc, #84]	; (8012fd0 <HAL_TIM_OC_Start_IT+0x294>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d115      	bne.n	8012faa <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	689a      	ldr	r2, [r3, #8]
 8012f84:	4b19      	ldr	r3, [pc, #100]	; (8012fec <HAL_TIM_OC_Start_IT+0x2b0>)
 8012f86:	4013      	ands	r3, r2
 8012f88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	2b06      	cmp	r3, #6
 8012f8e:	d015      	beq.n	8012fbc <HAL_TIM_OC_Start_IT+0x280>
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f96:	d011      	beq.n	8012fbc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	681a      	ldr	r2, [r3, #0]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f042 0201 	orr.w	r2, r2, #1
 8012fa6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fa8:	e008      	b.n	8012fbc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f042 0201 	orr.w	r2, r2, #1
 8012fb8:	601a      	str	r2, [r3, #0]
 8012fba:	e000      	b.n	8012fbe <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fbc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3710      	adds	r7, #16
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	40010000 	.word	0x40010000
 8012fcc:	40010400 	.word	0x40010400
 8012fd0:	40014000 	.word	0x40014000
 8012fd4:	40014400 	.word	0x40014400
 8012fd8:	40014800 	.word	0x40014800
 8012fdc:	40000400 	.word	0x40000400
 8012fe0:	40000800 	.word	0x40000800
 8012fe4:	40000c00 	.word	0x40000c00
 8012fe8:	40001800 	.word	0x40001800
 8012fec:	00010007 	.word	0x00010007

08012ff0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2b0c      	cmp	r3, #12
 8013002:	d841      	bhi.n	8013088 <HAL_TIM_OC_Stop_IT+0x98>
 8013004:	a201      	add	r2, pc, #4	; (adr r2, 801300c <HAL_TIM_OC_Stop_IT+0x1c>)
 8013006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801300a:	bf00      	nop
 801300c:	08013041 	.word	0x08013041
 8013010:	08013089 	.word	0x08013089
 8013014:	08013089 	.word	0x08013089
 8013018:	08013089 	.word	0x08013089
 801301c:	08013053 	.word	0x08013053
 8013020:	08013089 	.word	0x08013089
 8013024:	08013089 	.word	0x08013089
 8013028:	08013089 	.word	0x08013089
 801302c:	08013065 	.word	0x08013065
 8013030:	08013089 	.word	0x08013089
 8013034:	08013089 	.word	0x08013089
 8013038:	08013089 	.word	0x08013089
 801303c:	08013077 	.word	0x08013077
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	68da      	ldr	r2, [r3, #12]
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	f022 0202 	bic.w	r2, r2, #2
 801304e:	60da      	str	r2, [r3, #12]
      break;
 8013050:	e01d      	b.n	801308e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	68da      	ldr	r2, [r3, #12]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	f022 0204 	bic.w	r2, r2, #4
 8013060:	60da      	str	r2, [r3, #12]
      break;
 8013062:	e014      	b.n	801308e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	68da      	ldr	r2, [r3, #12]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	f022 0208 	bic.w	r2, r2, #8
 8013072:	60da      	str	r2, [r3, #12]
      break;
 8013074:	e00b      	b.n	801308e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	68da      	ldr	r2, [r3, #12]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	f022 0210 	bic.w	r2, r2, #16
 8013084:	60da      	str	r2, [r3, #12]
      break;
 8013086:	e002      	b.n	801308e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013088:	2301      	movs	r3, #1
 801308a:	73fb      	strb	r3, [r7, #15]
      break;
 801308c:	bf00      	nop
  }

  if (status == HAL_OK)
 801308e:	7bfb      	ldrb	r3, [r7, #15]
 8013090:	2b00      	cmp	r3, #0
 8013092:	f040 8081 	bne.w	8013198 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2200      	movs	r2, #0
 801309c:	6839      	ldr	r1, [r7, #0]
 801309e:	4618      	mov	r0, r3
 80130a0:	f001 f836 	bl	8014110 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	4a3e      	ldr	r2, [pc, #248]	; (80131a4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80130aa:	4293      	cmp	r3, r2
 80130ac:	d013      	beq.n	80130d6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	4a3d      	ldr	r2, [pc, #244]	; (80131a8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80130b4:	4293      	cmp	r3, r2
 80130b6:	d00e      	beq.n	80130d6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4a3b      	ldr	r2, [pc, #236]	; (80131ac <HAL_TIM_OC_Stop_IT+0x1bc>)
 80130be:	4293      	cmp	r3, r2
 80130c0:	d009      	beq.n	80130d6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4a3a      	ldr	r2, [pc, #232]	; (80131b0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d004      	beq.n	80130d6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a38      	ldr	r2, [pc, #224]	; (80131b4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d101      	bne.n	80130da <HAL_TIM_OC_Stop_IT+0xea>
 80130d6:	2301      	movs	r3, #1
 80130d8:	e000      	b.n	80130dc <HAL_TIM_OC_Stop_IT+0xec>
 80130da:	2300      	movs	r3, #0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d017      	beq.n	8013110 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	6a1a      	ldr	r2, [r3, #32]
 80130e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80130ea:	4013      	ands	r3, r2
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d10f      	bne.n	8013110 <HAL_TIM_OC_Stop_IT+0x120>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	6a1a      	ldr	r2, [r3, #32]
 80130f6:	f240 4344 	movw	r3, #1092	; 0x444
 80130fa:	4013      	ands	r3, r2
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d107      	bne.n	8013110 <HAL_TIM_OC_Stop_IT+0x120>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801310e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	6a1a      	ldr	r2, [r3, #32]
 8013116:	f241 1311 	movw	r3, #4369	; 0x1111
 801311a:	4013      	ands	r3, r2
 801311c:	2b00      	cmp	r3, #0
 801311e:	d10f      	bne.n	8013140 <HAL_TIM_OC_Stop_IT+0x150>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	6a1a      	ldr	r2, [r3, #32]
 8013126:	f240 4344 	movw	r3, #1092	; 0x444
 801312a:	4013      	ands	r3, r2
 801312c:	2b00      	cmp	r3, #0
 801312e:	d107      	bne.n	8013140 <HAL_TIM_OC_Stop_IT+0x150>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f022 0201 	bic.w	r2, r2, #1
 801313e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d104      	bne.n	8013150 <HAL_TIM_OC_Stop_IT+0x160>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2201      	movs	r2, #1
 801314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801314e:	e023      	b.n	8013198 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	2b04      	cmp	r3, #4
 8013154:	d104      	bne.n	8013160 <HAL_TIM_OC_Stop_IT+0x170>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2201      	movs	r2, #1
 801315a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801315e:	e01b      	b.n	8013198 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	2b08      	cmp	r3, #8
 8013164:	d104      	bne.n	8013170 <HAL_TIM_OC_Stop_IT+0x180>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2201      	movs	r2, #1
 801316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801316e:	e013      	b.n	8013198 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	2b0c      	cmp	r3, #12
 8013174:	d104      	bne.n	8013180 <HAL_TIM_OC_Stop_IT+0x190>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2201      	movs	r2, #1
 801317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801317e:	e00b      	b.n	8013198 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	2b10      	cmp	r3, #16
 8013184:	d104      	bne.n	8013190 <HAL_TIM_OC_Stop_IT+0x1a0>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2201      	movs	r2, #1
 801318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801318e:	e003      	b.n	8013198 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2201      	movs	r2, #1
 8013194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013198:	7bfb      	ldrb	r3, [r7, #15]
}
 801319a:	4618      	mov	r0, r3
 801319c:	3710      	adds	r7, #16
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
 80131a2:	bf00      	nop
 80131a4:	40010000 	.word	0x40010000
 80131a8:	40010400 	.word	0x40010400
 80131ac:	40014000 	.word	0x40014000
 80131b0:	40014400 	.word	0x40014400
 80131b4:	40014800 	.word	0x40014800

080131b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d101      	bne.n	80131ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80131c6:	2301      	movs	r3, #1
 80131c8:	e049      	b.n	801325e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d106      	bne.n	80131e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2200      	movs	r2, #0
 80131da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f000 f841 	bl	8013266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2202      	movs	r2, #2
 80131e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	3304      	adds	r3, #4
 80131f4:	4619      	mov	r1, r3
 80131f6:	4610      	mov	r0, r2
 80131f8:	f000 fb70 	bl	80138dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2201      	movs	r2, #1
 8013208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2201      	movs	r2, #1
 8013210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2201      	movs	r2, #1
 8013218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2201      	movs	r2, #1
 8013220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2201      	movs	r2, #1
 8013228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2201      	movs	r2, #1
 8013230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2201      	movs	r2, #1
 8013238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2201      	movs	r2, #1
 8013240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2201      	movs	r2, #1
 8013248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2201      	movs	r2, #1
 8013250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2201      	movs	r2, #1
 8013258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801325c:	2300      	movs	r3, #0
}
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013266:	b480      	push	{r7}
 8013268:	b083      	sub	sp, #12
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801326e:	bf00      	nop
 8013270:	370c      	adds	r7, #12
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr

0801327a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b084      	sub	sp, #16
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	68db      	ldr	r3, [r3, #12]
 8013288:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	691b      	ldr	r3, [r3, #16]
 8013290:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	f003 0302 	and.w	r3, r3, #2
 8013298:	2b00      	cmp	r3, #0
 801329a:	d020      	beq.n	80132de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f003 0302 	and.w	r3, r3, #2
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d01b      	beq.n	80132de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f06f 0202 	mvn.w	r2, #2
 80132ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2201      	movs	r2, #1
 80132b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	699b      	ldr	r3, [r3, #24]
 80132bc:	f003 0303 	and.w	r3, r3, #3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d003      	beq.n	80132cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 faeb 	bl	80138a0 <HAL_TIM_IC_CaptureCallback>
 80132ca:	e005      	b.n	80132d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7ef fd07 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f000 faee 	bl	80138b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2200      	movs	r2, #0
 80132dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	f003 0304 	and.w	r3, r3, #4
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d020      	beq.n	801332a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f003 0304 	and.w	r3, r3, #4
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d01b      	beq.n	801332a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f06f 0204 	mvn.w	r2, #4
 80132fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2202      	movs	r2, #2
 8013300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	699b      	ldr	r3, [r3, #24]
 8013308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801330c:	2b00      	cmp	r3, #0
 801330e:	d003      	beq.n	8013318 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 fac5 	bl	80138a0 <HAL_TIM_IC_CaptureCallback>
 8013316:	e005      	b.n	8013324 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f7ef fce1 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f000 fac8 	bl	80138b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2200      	movs	r2, #0
 8013328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	f003 0308 	and.w	r3, r3, #8
 8013330:	2b00      	cmp	r3, #0
 8013332:	d020      	beq.n	8013376 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	f003 0308 	and.w	r3, r3, #8
 801333a:	2b00      	cmp	r3, #0
 801333c:	d01b      	beq.n	8013376 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f06f 0208 	mvn.w	r2, #8
 8013346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2204      	movs	r2, #4
 801334c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	69db      	ldr	r3, [r3, #28]
 8013354:	f003 0303 	and.w	r3, r3, #3
 8013358:	2b00      	cmp	r3, #0
 801335a:	d003      	beq.n	8013364 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 fa9f 	bl	80138a0 <HAL_TIM_IC_CaptureCallback>
 8013362:	e005      	b.n	8013370 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f7ef fcbb 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f000 faa2 	bl	80138b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	f003 0310 	and.w	r3, r3, #16
 801337c:	2b00      	cmp	r3, #0
 801337e:	d020      	beq.n	80133c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	f003 0310 	and.w	r3, r3, #16
 8013386:	2b00      	cmp	r3, #0
 8013388:	d01b      	beq.n	80133c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f06f 0210 	mvn.w	r2, #16
 8013392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2208      	movs	r2, #8
 8013398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	69db      	ldr	r3, [r3, #28]
 80133a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d003      	beq.n	80133b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f000 fa79 	bl	80138a0 <HAL_TIM_IC_CaptureCallback>
 80133ae:	e005      	b.n	80133bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7ef fc95 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f000 fa7c 	bl	80138b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2200      	movs	r2, #0
 80133c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	f003 0301 	and.w	r3, r3, #1
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d00c      	beq.n	80133e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f003 0301 	and.w	r3, r3, #1
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d007      	beq.n	80133e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	f06f 0201 	mvn.w	r2, #1
 80133de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7f0 fb4b 	bl	8003a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d104      	bne.n	80133fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d00c      	beq.n	8013414 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013400:	2b00      	cmp	r3, #0
 8013402:	d007      	beq.n	8013414 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 801340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f000 ffba 	bl	8014388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801341a:	2b00      	cmp	r3, #0
 801341c:	d00c      	beq.n	8013438 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013424:	2b00      	cmp	r3, #0
 8013426:	d007      	beq.n	8013438 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f000 ffb2 	bl	801439c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801343e:	2b00      	cmp	r3, #0
 8013440:	d00c      	beq.n	801345c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013448:	2b00      	cmp	r3, #0
 801344a:	d007      	beq.n	801345c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f000 fa36 	bl	80138c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	f003 0320 	and.w	r3, r3, #32
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00c      	beq.n	8013480 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	f003 0320 	and.w	r3, r3, #32
 801346c:	2b00      	cmp	r3, #0
 801346e:	d007      	beq.n	8013480 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f06f 0220 	mvn.w	r2, #32
 8013478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 ff7a 	bl	8014374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013480:	bf00      	nop
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013494:	2300      	movs	r3, #0
 8013496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d101      	bne.n	80134a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80134a2:	2302      	movs	r3, #2
 80134a4:	e0ff      	b.n	80136a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2201      	movs	r2, #1
 80134aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	2b14      	cmp	r3, #20
 80134b2:	f200 80f0 	bhi.w	8013696 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80134b6:	a201      	add	r2, pc, #4	; (adr r2, 80134bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80134b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134bc:	08013511 	.word	0x08013511
 80134c0:	08013697 	.word	0x08013697
 80134c4:	08013697 	.word	0x08013697
 80134c8:	08013697 	.word	0x08013697
 80134cc:	08013551 	.word	0x08013551
 80134d0:	08013697 	.word	0x08013697
 80134d4:	08013697 	.word	0x08013697
 80134d8:	08013697 	.word	0x08013697
 80134dc:	08013593 	.word	0x08013593
 80134e0:	08013697 	.word	0x08013697
 80134e4:	08013697 	.word	0x08013697
 80134e8:	08013697 	.word	0x08013697
 80134ec:	080135d3 	.word	0x080135d3
 80134f0:	08013697 	.word	0x08013697
 80134f4:	08013697 	.word	0x08013697
 80134f8:	08013697 	.word	0x08013697
 80134fc:	08013615 	.word	0x08013615
 8013500:	08013697 	.word	0x08013697
 8013504:	08013697 	.word	0x08013697
 8013508:	08013697 	.word	0x08013697
 801350c:	08013655 	.word	0x08013655
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	68b9      	ldr	r1, [r7, #8]
 8013516:	4618      	mov	r0, r3
 8013518:	f000 fa86 	bl	8013a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	699a      	ldr	r2, [r3, #24]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f042 0208 	orr.w	r2, r2, #8
 801352a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	699a      	ldr	r2, [r3, #24]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f022 0204 	bic.w	r2, r2, #4
 801353a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	6999      	ldr	r1, [r3, #24]
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	691a      	ldr	r2, [r3, #16]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	430a      	orrs	r2, r1
 801354c:	619a      	str	r2, [r3, #24]
      break;
 801354e:	e0a5      	b.n	801369c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	68b9      	ldr	r1, [r7, #8]
 8013556:	4618      	mov	r0, r3
 8013558:	f000 faf6 	bl	8013b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	699a      	ldr	r2, [r3, #24]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801356a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	699a      	ldr	r2, [r3, #24]
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801357a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	6999      	ldr	r1, [r3, #24]
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	691b      	ldr	r3, [r3, #16]
 8013586:	021a      	lsls	r2, r3, #8
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	430a      	orrs	r2, r1
 801358e:	619a      	str	r2, [r3, #24]
      break;
 8013590:	e084      	b.n	801369c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	68b9      	ldr	r1, [r7, #8]
 8013598:	4618      	mov	r0, r3
 801359a:	f000 fb5f 	bl	8013c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	69da      	ldr	r2, [r3, #28]
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	f042 0208 	orr.w	r2, r2, #8
 80135ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	69da      	ldr	r2, [r3, #28]
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f022 0204 	bic.w	r2, r2, #4
 80135bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	69d9      	ldr	r1, [r3, #28]
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	691a      	ldr	r2, [r3, #16]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	430a      	orrs	r2, r1
 80135ce:	61da      	str	r2, [r3, #28]
      break;
 80135d0:	e064      	b.n	801369c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	68b9      	ldr	r1, [r7, #8]
 80135d8:	4618      	mov	r0, r3
 80135da:	f000 fbc7 	bl	8013d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	69da      	ldr	r2, [r3, #28]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80135ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	69da      	ldr	r2, [r3, #28]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80135fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	69d9      	ldr	r1, [r3, #28]
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	021a      	lsls	r2, r3, #8
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	430a      	orrs	r2, r1
 8013610:	61da      	str	r2, [r3, #28]
      break;
 8013612:	e043      	b.n	801369c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	68b9      	ldr	r1, [r7, #8]
 801361a:	4618      	mov	r0, r3
 801361c:	f000 fc10 	bl	8013e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	f042 0208 	orr.w	r2, r2, #8
 801362e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f022 0204 	bic.w	r2, r2, #4
 801363e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	691a      	ldr	r2, [r3, #16]
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	430a      	orrs	r2, r1
 8013650:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013652:	e023      	b.n	801369c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	68b9      	ldr	r1, [r7, #8]
 801365a:	4618      	mov	r0, r3
 801365c:	f000 fc54 	bl	8013f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801366e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801367e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	691b      	ldr	r3, [r3, #16]
 801368a:	021a      	lsls	r2, r3, #8
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	430a      	orrs	r2, r1
 8013692:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013694:	e002      	b.n	801369c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013696:	2301      	movs	r3, #1
 8013698:	75fb      	strb	r3, [r7, #23]
      break;
 801369a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	2200      	movs	r2, #0
 80136a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3718      	adds	r7, #24
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop

080136b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80136ba:	2300      	movs	r3, #0
 80136bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d101      	bne.n	80136cc <HAL_TIM_ConfigClockSource+0x1c>
 80136c8:	2302      	movs	r3, #2
 80136ca:	e0dc      	b.n	8013886 <HAL_TIM_ConfigClockSource+0x1d6>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2201      	movs	r2, #1
 80136d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2202      	movs	r2, #2
 80136d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	4b6a      	ldr	r3, [pc, #424]	; (8013890 <HAL_TIM_ConfigClockSource+0x1e0>)
 80136e8:	4013      	ands	r3, r2
 80136ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80136f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	68ba      	ldr	r2, [r7, #8]
 80136fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	4a64      	ldr	r2, [pc, #400]	; (8013894 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013702:	4293      	cmp	r3, r2
 8013704:	f000 80a9 	beq.w	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 8013708:	4a62      	ldr	r2, [pc, #392]	; (8013894 <HAL_TIM_ConfigClockSource+0x1e4>)
 801370a:	4293      	cmp	r3, r2
 801370c:	f200 80ae 	bhi.w	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013710:	4a61      	ldr	r2, [pc, #388]	; (8013898 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013712:	4293      	cmp	r3, r2
 8013714:	f000 80a1 	beq.w	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 8013718:	4a5f      	ldr	r2, [pc, #380]	; (8013898 <HAL_TIM_ConfigClockSource+0x1e8>)
 801371a:	4293      	cmp	r3, r2
 801371c:	f200 80a6 	bhi.w	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013720:	4a5e      	ldr	r2, [pc, #376]	; (801389c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013722:	4293      	cmp	r3, r2
 8013724:	f000 8099 	beq.w	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 8013728:	4a5c      	ldr	r2, [pc, #368]	; (801389c <HAL_TIM_ConfigClockSource+0x1ec>)
 801372a:	4293      	cmp	r3, r2
 801372c:	f200 809e 	bhi.w	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013730:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013734:	f000 8091 	beq.w	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 8013738:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801373c:	f200 8096 	bhi.w	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013744:	f000 8089 	beq.w	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 8013748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801374c:	f200 808e 	bhi.w	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013754:	d03e      	beq.n	80137d4 <HAL_TIM_ConfigClockSource+0x124>
 8013756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801375a:	f200 8087 	bhi.w	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 801375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013762:	f000 8086 	beq.w	8013872 <HAL_TIM_ConfigClockSource+0x1c2>
 8013766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801376a:	d87f      	bhi.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 801376c:	2b70      	cmp	r3, #112	; 0x70
 801376e:	d01a      	beq.n	80137a6 <HAL_TIM_ConfigClockSource+0xf6>
 8013770:	2b70      	cmp	r3, #112	; 0x70
 8013772:	d87b      	bhi.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013774:	2b60      	cmp	r3, #96	; 0x60
 8013776:	d050      	beq.n	801381a <HAL_TIM_ConfigClockSource+0x16a>
 8013778:	2b60      	cmp	r3, #96	; 0x60
 801377a:	d877      	bhi.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 801377c:	2b50      	cmp	r3, #80	; 0x50
 801377e:	d03c      	beq.n	80137fa <HAL_TIM_ConfigClockSource+0x14a>
 8013780:	2b50      	cmp	r3, #80	; 0x50
 8013782:	d873      	bhi.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013784:	2b40      	cmp	r3, #64	; 0x40
 8013786:	d058      	beq.n	801383a <HAL_TIM_ConfigClockSource+0x18a>
 8013788:	2b40      	cmp	r3, #64	; 0x40
 801378a:	d86f      	bhi.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 801378c:	2b30      	cmp	r3, #48	; 0x30
 801378e:	d064      	beq.n	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 8013790:	2b30      	cmp	r3, #48	; 0x30
 8013792:	d86b      	bhi.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 8013794:	2b20      	cmp	r3, #32
 8013796:	d060      	beq.n	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 8013798:	2b20      	cmp	r3, #32
 801379a:	d867      	bhi.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
 801379c:	2b00      	cmp	r3, #0
 801379e:	d05c      	beq.n	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 80137a0:	2b10      	cmp	r3, #16
 80137a2:	d05a      	beq.n	801385a <HAL_TIM_ConfigClockSource+0x1aa>
 80137a4:	e062      	b.n	801386c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6818      	ldr	r0, [r3, #0]
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	6899      	ldr	r1, [r3, #8]
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	685a      	ldr	r2, [r3, #4]
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	f000 fc8b 	bl	80140d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80137c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	68ba      	ldr	r2, [r7, #8]
 80137d0:	609a      	str	r2, [r3, #8]
      break;
 80137d2:	e04f      	b.n	8013874 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6818      	ldr	r0, [r3, #0]
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	6899      	ldr	r1, [r3, #8]
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	685a      	ldr	r2, [r3, #4]
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	f000 fc74 	bl	80140d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	689a      	ldr	r2, [r3, #8]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80137f6:	609a      	str	r2, [r3, #8]
      break;
 80137f8:	e03c      	b.n	8013874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6818      	ldr	r0, [r3, #0]
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	6859      	ldr	r1, [r3, #4]
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	461a      	mov	r2, r3
 8013808:	f000 fbe4 	bl	8013fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2150      	movs	r1, #80	; 0x50
 8013812:	4618      	mov	r0, r3
 8013814:	f000 fc3e 	bl	8014094 <TIM_ITRx_SetConfig>
      break;
 8013818:	e02c      	b.n	8013874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6818      	ldr	r0, [r3, #0]
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	6859      	ldr	r1, [r3, #4]
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	461a      	mov	r2, r3
 8013828:	f000 fc03 	bl	8014032 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2160      	movs	r1, #96	; 0x60
 8013832:	4618      	mov	r0, r3
 8013834:	f000 fc2e 	bl	8014094 <TIM_ITRx_SetConfig>
      break;
 8013838:	e01c      	b.n	8013874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6818      	ldr	r0, [r3, #0]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	6859      	ldr	r1, [r3, #4]
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	461a      	mov	r2, r3
 8013848:	f000 fbc4 	bl	8013fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2140      	movs	r1, #64	; 0x40
 8013852:	4618      	mov	r0, r3
 8013854:	f000 fc1e 	bl	8014094 <TIM_ITRx_SetConfig>
      break;
 8013858:	e00c      	b.n	8013874 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	681a      	ldr	r2, [r3, #0]
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	4619      	mov	r1, r3
 8013864:	4610      	mov	r0, r2
 8013866:	f000 fc15 	bl	8014094 <TIM_ITRx_SetConfig>
      break;
 801386a:	e003      	b.n	8013874 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801386c:	2301      	movs	r3, #1
 801386e:	73fb      	strb	r3, [r7, #15]
      break;
 8013870:	e000      	b.n	8013874 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2201      	movs	r2, #1
 8013878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2200      	movs	r2, #0
 8013880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013884:	7bfb      	ldrb	r3, [r7, #15]
}
 8013886:	4618      	mov	r0, r3
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	ffceff88 	.word	0xffceff88
 8013894:	00100040 	.word	0x00100040
 8013898:	00100030 	.word	0x00100030
 801389c:	00100020 	.word	0x00100020

080138a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80138a0:	b480      	push	{r7}
 80138a2:	b083      	sub	sp, #12
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80138a8:	bf00      	nop
 80138aa:	370c      	adds	r7, #12
 80138ac:	46bd      	mov	sp, r7
 80138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b2:	4770      	bx	lr

080138b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80138b4:	b480      	push	{r7}
 80138b6:	b083      	sub	sp, #12
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80138bc:	bf00      	nop
 80138be:	370c      	adds	r7, #12
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b083      	sub	sp, #12
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80138d0:	bf00      	nop
 80138d2:	370c      	adds	r7, #12
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr

080138dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80138dc:	b480      	push	{r7}
 80138de:	b085      	sub	sp, #20
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	4a46      	ldr	r2, [pc, #280]	; (8013a08 <TIM_Base_SetConfig+0x12c>)
 80138f0:	4293      	cmp	r3, r2
 80138f2:	d013      	beq.n	801391c <TIM_Base_SetConfig+0x40>
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138fa:	d00f      	beq.n	801391c <TIM_Base_SetConfig+0x40>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4a43      	ldr	r2, [pc, #268]	; (8013a0c <TIM_Base_SetConfig+0x130>)
 8013900:	4293      	cmp	r3, r2
 8013902:	d00b      	beq.n	801391c <TIM_Base_SetConfig+0x40>
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	4a42      	ldr	r2, [pc, #264]	; (8013a10 <TIM_Base_SetConfig+0x134>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d007      	beq.n	801391c <TIM_Base_SetConfig+0x40>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4a41      	ldr	r2, [pc, #260]	; (8013a14 <TIM_Base_SetConfig+0x138>)
 8013910:	4293      	cmp	r3, r2
 8013912:	d003      	beq.n	801391c <TIM_Base_SetConfig+0x40>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	4a40      	ldr	r2, [pc, #256]	; (8013a18 <TIM_Base_SetConfig+0x13c>)
 8013918:	4293      	cmp	r3, r2
 801391a:	d108      	bne.n	801392e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	4313      	orrs	r3, r2
 801392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	4a35      	ldr	r2, [pc, #212]	; (8013a08 <TIM_Base_SetConfig+0x12c>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d01f      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801393c:	d01b      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4a32      	ldr	r2, [pc, #200]	; (8013a0c <TIM_Base_SetConfig+0x130>)
 8013942:	4293      	cmp	r3, r2
 8013944:	d017      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4a31      	ldr	r2, [pc, #196]	; (8013a10 <TIM_Base_SetConfig+0x134>)
 801394a:	4293      	cmp	r3, r2
 801394c:	d013      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	4a30      	ldr	r2, [pc, #192]	; (8013a14 <TIM_Base_SetConfig+0x138>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d00f      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4a2f      	ldr	r2, [pc, #188]	; (8013a18 <TIM_Base_SetConfig+0x13c>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d00b      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4a2e      	ldr	r2, [pc, #184]	; (8013a1c <TIM_Base_SetConfig+0x140>)
 8013962:	4293      	cmp	r3, r2
 8013964:	d007      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4a2d      	ldr	r2, [pc, #180]	; (8013a20 <TIM_Base_SetConfig+0x144>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d003      	beq.n	8013976 <TIM_Base_SetConfig+0x9a>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	4a2c      	ldr	r2, [pc, #176]	; (8013a24 <TIM_Base_SetConfig+0x148>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d108      	bne.n	8013988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801397c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	68fa      	ldr	r2, [r7, #12]
 8013984:	4313      	orrs	r3, r2
 8013986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	695b      	ldr	r3, [r3, #20]
 8013992:	4313      	orrs	r3, r2
 8013994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	689a      	ldr	r2, [r3, #8]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	681a      	ldr	r2, [r3, #0]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4a16      	ldr	r2, [pc, #88]	; (8013a08 <TIM_Base_SetConfig+0x12c>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d00f      	beq.n	80139d4 <TIM_Base_SetConfig+0xf8>
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	4a18      	ldr	r2, [pc, #96]	; (8013a18 <TIM_Base_SetConfig+0x13c>)
 80139b8:	4293      	cmp	r3, r2
 80139ba:	d00b      	beq.n	80139d4 <TIM_Base_SetConfig+0xf8>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	4a17      	ldr	r2, [pc, #92]	; (8013a1c <TIM_Base_SetConfig+0x140>)
 80139c0:	4293      	cmp	r3, r2
 80139c2:	d007      	beq.n	80139d4 <TIM_Base_SetConfig+0xf8>
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	4a16      	ldr	r2, [pc, #88]	; (8013a20 <TIM_Base_SetConfig+0x144>)
 80139c8:	4293      	cmp	r3, r2
 80139ca:	d003      	beq.n	80139d4 <TIM_Base_SetConfig+0xf8>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4a15      	ldr	r2, [pc, #84]	; (8013a24 <TIM_Base_SetConfig+0x148>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d103      	bne.n	80139dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	691a      	ldr	r2, [r3, #16]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2201      	movs	r2, #1
 80139e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	691b      	ldr	r3, [r3, #16]
 80139e6:	f003 0301 	and.w	r3, r3, #1
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d105      	bne.n	80139fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	691b      	ldr	r3, [r3, #16]
 80139f2:	f023 0201 	bic.w	r2, r3, #1
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	611a      	str	r2, [r3, #16]
  }
}
 80139fa:	bf00      	nop
 80139fc:	3714      	adds	r7, #20
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop
 8013a08:	40010000 	.word	0x40010000
 8013a0c:	40000400 	.word	0x40000400
 8013a10:	40000800 	.word	0x40000800
 8013a14:	40000c00 	.word	0x40000c00
 8013a18:	40010400 	.word	0x40010400
 8013a1c:	40014000 	.word	0x40014000
 8013a20:	40014400 	.word	0x40014400
 8013a24:	40014800 	.word	0x40014800

08013a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	b087      	sub	sp, #28
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6a1b      	ldr	r3, [r3, #32]
 8013a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6a1b      	ldr	r3, [r3, #32]
 8013a3c:	f023 0201 	bic.w	r2, r3, #1
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	685b      	ldr	r3, [r3, #4]
 8013a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	699b      	ldr	r3, [r3, #24]
 8013a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013a50:	68fa      	ldr	r2, [r7, #12]
 8013a52:	4b37      	ldr	r3, [pc, #220]	; (8013b30 <TIM_OC1_SetConfig+0x108>)
 8013a54:	4013      	ands	r3, r2
 8013a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f023 0303 	bic.w	r3, r3, #3
 8013a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	4313      	orrs	r3, r2
 8013a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	f023 0302 	bic.w	r3, r3, #2
 8013a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	689b      	ldr	r3, [r3, #8]
 8013a76:	697a      	ldr	r2, [r7, #20]
 8013a78:	4313      	orrs	r3, r2
 8013a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	4a2d      	ldr	r2, [pc, #180]	; (8013b34 <TIM_OC1_SetConfig+0x10c>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d00f      	beq.n	8013aa4 <TIM_OC1_SetConfig+0x7c>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	4a2c      	ldr	r2, [pc, #176]	; (8013b38 <TIM_OC1_SetConfig+0x110>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d00b      	beq.n	8013aa4 <TIM_OC1_SetConfig+0x7c>
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	4a2b      	ldr	r2, [pc, #172]	; (8013b3c <TIM_OC1_SetConfig+0x114>)
 8013a90:	4293      	cmp	r3, r2
 8013a92:	d007      	beq.n	8013aa4 <TIM_OC1_SetConfig+0x7c>
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	4a2a      	ldr	r2, [pc, #168]	; (8013b40 <TIM_OC1_SetConfig+0x118>)
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d003      	beq.n	8013aa4 <TIM_OC1_SetConfig+0x7c>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	4a29      	ldr	r2, [pc, #164]	; (8013b44 <TIM_OC1_SetConfig+0x11c>)
 8013aa0:	4293      	cmp	r3, r2
 8013aa2:	d10c      	bne.n	8013abe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	f023 0308 	bic.w	r3, r3, #8
 8013aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	697a      	ldr	r2, [r7, #20]
 8013ab2:	4313      	orrs	r3, r2
 8013ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	f023 0304 	bic.w	r3, r3, #4
 8013abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	4a1c      	ldr	r2, [pc, #112]	; (8013b34 <TIM_OC1_SetConfig+0x10c>)
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	d00f      	beq.n	8013ae6 <TIM_OC1_SetConfig+0xbe>
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	4a1b      	ldr	r2, [pc, #108]	; (8013b38 <TIM_OC1_SetConfig+0x110>)
 8013aca:	4293      	cmp	r3, r2
 8013acc:	d00b      	beq.n	8013ae6 <TIM_OC1_SetConfig+0xbe>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	4a1a      	ldr	r2, [pc, #104]	; (8013b3c <TIM_OC1_SetConfig+0x114>)
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	d007      	beq.n	8013ae6 <TIM_OC1_SetConfig+0xbe>
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	4a19      	ldr	r2, [pc, #100]	; (8013b40 <TIM_OC1_SetConfig+0x118>)
 8013ada:	4293      	cmp	r3, r2
 8013adc:	d003      	beq.n	8013ae6 <TIM_OC1_SetConfig+0xbe>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	4a18      	ldr	r2, [pc, #96]	; (8013b44 <TIM_OC1_SetConfig+0x11c>)
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d111      	bne.n	8013b0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	695b      	ldr	r3, [r3, #20]
 8013afa:	693a      	ldr	r2, [r7, #16]
 8013afc:	4313      	orrs	r3, r2
 8013afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	699b      	ldr	r3, [r3, #24]
 8013b04:	693a      	ldr	r2, [r7, #16]
 8013b06:	4313      	orrs	r3, r2
 8013b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	693a      	ldr	r2, [r7, #16]
 8013b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	68fa      	ldr	r2, [r7, #12]
 8013b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	685a      	ldr	r2, [r3, #4]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	697a      	ldr	r2, [r7, #20]
 8013b22:	621a      	str	r2, [r3, #32]
}
 8013b24:	bf00      	nop
 8013b26:	371c      	adds	r7, #28
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr
 8013b30:	fffeff8f 	.word	0xfffeff8f
 8013b34:	40010000 	.word	0x40010000
 8013b38:	40010400 	.word	0x40010400
 8013b3c:	40014000 	.word	0x40014000
 8013b40:	40014400 	.word	0x40014400
 8013b44:	40014800 	.word	0x40014800

08013b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b48:	b480      	push	{r7}
 8013b4a:	b087      	sub	sp, #28
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6a1b      	ldr	r3, [r3, #32]
 8013b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6a1b      	ldr	r3, [r3, #32]
 8013b5c:	f023 0210 	bic.w	r2, r3, #16
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	699b      	ldr	r3, [r3, #24]
 8013b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	4b34      	ldr	r3, [pc, #208]	; (8013c44 <TIM_OC2_SetConfig+0xfc>)
 8013b74:	4013      	ands	r3, r2
 8013b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	021b      	lsls	r3, r3, #8
 8013b86:	68fa      	ldr	r2, [r7, #12]
 8013b88:	4313      	orrs	r3, r2
 8013b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	f023 0320 	bic.w	r3, r3, #32
 8013b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	689b      	ldr	r3, [r3, #8]
 8013b98:	011b      	lsls	r3, r3, #4
 8013b9a:	697a      	ldr	r2, [r7, #20]
 8013b9c:	4313      	orrs	r3, r2
 8013b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	4a29      	ldr	r2, [pc, #164]	; (8013c48 <TIM_OC2_SetConfig+0x100>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d003      	beq.n	8013bb0 <TIM_OC2_SetConfig+0x68>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	4a28      	ldr	r2, [pc, #160]	; (8013c4c <TIM_OC2_SetConfig+0x104>)
 8013bac:	4293      	cmp	r3, r2
 8013bae:	d10d      	bne.n	8013bcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	011b      	lsls	r3, r3, #4
 8013bbe:	697a      	ldr	r2, [r7, #20]
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013bca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4a1e      	ldr	r2, [pc, #120]	; (8013c48 <TIM_OC2_SetConfig+0x100>)
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d00f      	beq.n	8013bf4 <TIM_OC2_SetConfig+0xac>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	4a1d      	ldr	r2, [pc, #116]	; (8013c4c <TIM_OC2_SetConfig+0x104>)
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d00b      	beq.n	8013bf4 <TIM_OC2_SetConfig+0xac>
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	4a1c      	ldr	r2, [pc, #112]	; (8013c50 <TIM_OC2_SetConfig+0x108>)
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d007      	beq.n	8013bf4 <TIM_OC2_SetConfig+0xac>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	4a1b      	ldr	r2, [pc, #108]	; (8013c54 <TIM_OC2_SetConfig+0x10c>)
 8013be8:	4293      	cmp	r3, r2
 8013bea:	d003      	beq.n	8013bf4 <TIM_OC2_SetConfig+0xac>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	4a1a      	ldr	r2, [pc, #104]	; (8013c58 <TIM_OC2_SetConfig+0x110>)
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d113      	bne.n	8013c1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	695b      	ldr	r3, [r3, #20]
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	693a      	ldr	r2, [r7, #16]
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	699b      	ldr	r3, [r3, #24]
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	693a      	ldr	r2, [r7, #16]
 8013c18:	4313      	orrs	r3, r2
 8013c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	693a      	ldr	r2, [r7, #16]
 8013c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	685a      	ldr	r2, [r3, #4]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	697a      	ldr	r2, [r7, #20]
 8013c34:	621a      	str	r2, [r3, #32]
}
 8013c36:	bf00      	nop
 8013c38:	371c      	adds	r7, #28
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr
 8013c42:	bf00      	nop
 8013c44:	feff8fff 	.word	0xfeff8fff
 8013c48:	40010000 	.word	0x40010000
 8013c4c:	40010400 	.word	0x40010400
 8013c50:	40014000 	.word	0x40014000
 8013c54:	40014400 	.word	0x40014400
 8013c58:	40014800 	.word	0x40014800

08013c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b087      	sub	sp, #28
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6a1b      	ldr	r3, [r3, #32]
 8013c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6a1b      	ldr	r3, [r3, #32]
 8013c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	69db      	ldr	r3, [r3, #28]
 8013c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013c84:	68fa      	ldr	r2, [r7, #12]
 8013c86:	4b33      	ldr	r3, [pc, #204]	; (8013d54 <TIM_OC3_SetConfig+0xf8>)
 8013c88:	4013      	ands	r3, r2
 8013c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f023 0303 	bic.w	r3, r3, #3
 8013c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	68fa      	ldr	r2, [r7, #12]
 8013c9a:	4313      	orrs	r3, r2
 8013c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	021b      	lsls	r3, r3, #8
 8013cac:	697a      	ldr	r2, [r7, #20]
 8013cae:	4313      	orrs	r3, r2
 8013cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4a28      	ldr	r2, [pc, #160]	; (8013d58 <TIM_OC3_SetConfig+0xfc>)
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d003      	beq.n	8013cc2 <TIM_OC3_SetConfig+0x66>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4a27      	ldr	r2, [pc, #156]	; (8013d5c <TIM_OC3_SetConfig+0x100>)
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d10d      	bne.n	8013cde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	021b      	lsls	r3, r3, #8
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	4313      	orrs	r3, r2
 8013cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4a1d      	ldr	r2, [pc, #116]	; (8013d58 <TIM_OC3_SetConfig+0xfc>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d00f      	beq.n	8013d06 <TIM_OC3_SetConfig+0xaa>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	4a1c      	ldr	r2, [pc, #112]	; (8013d5c <TIM_OC3_SetConfig+0x100>)
 8013cea:	4293      	cmp	r3, r2
 8013cec:	d00b      	beq.n	8013d06 <TIM_OC3_SetConfig+0xaa>
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	4a1b      	ldr	r2, [pc, #108]	; (8013d60 <TIM_OC3_SetConfig+0x104>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d007      	beq.n	8013d06 <TIM_OC3_SetConfig+0xaa>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	4a1a      	ldr	r2, [pc, #104]	; (8013d64 <TIM_OC3_SetConfig+0x108>)
 8013cfa:	4293      	cmp	r3, r2
 8013cfc:	d003      	beq.n	8013d06 <TIM_OC3_SetConfig+0xaa>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4a19      	ldr	r2, [pc, #100]	; (8013d68 <TIM_OC3_SetConfig+0x10c>)
 8013d02:	4293      	cmp	r3, r2
 8013d04:	d113      	bne.n	8013d2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	695b      	ldr	r3, [r3, #20]
 8013d1a:	011b      	lsls	r3, r3, #4
 8013d1c:	693a      	ldr	r2, [r7, #16]
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	699b      	ldr	r3, [r3, #24]
 8013d26:	011b      	lsls	r3, r3, #4
 8013d28:	693a      	ldr	r2, [r7, #16]
 8013d2a:	4313      	orrs	r3, r2
 8013d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	693a      	ldr	r2, [r7, #16]
 8013d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	68fa      	ldr	r2, [r7, #12]
 8013d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	685a      	ldr	r2, [r3, #4]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	697a      	ldr	r2, [r7, #20]
 8013d46:	621a      	str	r2, [r3, #32]
}
 8013d48:	bf00      	nop
 8013d4a:	371c      	adds	r7, #28
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr
 8013d54:	fffeff8f 	.word	0xfffeff8f
 8013d58:	40010000 	.word	0x40010000
 8013d5c:	40010400 	.word	0x40010400
 8013d60:	40014000 	.word	0x40014000
 8013d64:	40014400 	.word	0x40014400
 8013d68:	40014800 	.word	0x40014800

08013d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b087      	sub	sp, #28
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6a1b      	ldr	r3, [r3, #32]
 8013d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6a1b      	ldr	r3, [r3, #32]
 8013d80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	69db      	ldr	r3, [r3, #28]
 8013d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013d94:	68fa      	ldr	r2, [r7, #12]
 8013d96:	4b24      	ldr	r3, [pc, #144]	; (8013e28 <TIM_OC4_SetConfig+0xbc>)
 8013d98:	4013      	ands	r3, r2
 8013d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	021b      	lsls	r3, r3, #8
 8013daa:	68fa      	ldr	r2, [r7, #12]
 8013dac:	4313      	orrs	r3, r2
 8013dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	689b      	ldr	r3, [r3, #8]
 8013dbc:	031b      	lsls	r3, r3, #12
 8013dbe:	693a      	ldr	r2, [r7, #16]
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	4a19      	ldr	r2, [pc, #100]	; (8013e2c <TIM_OC4_SetConfig+0xc0>)
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	d00f      	beq.n	8013dec <TIM_OC4_SetConfig+0x80>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	4a18      	ldr	r2, [pc, #96]	; (8013e30 <TIM_OC4_SetConfig+0xc4>)
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	d00b      	beq.n	8013dec <TIM_OC4_SetConfig+0x80>
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	4a17      	ldr	r2, [pc, #92]	; (8013e34 <TIM_OC4_SetConfig+0xc8>)
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	d007      	beq.n	8013dec <TIM_OC4_SetConfig+0x80>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	4a16      	ldr	r2, [pc, #88]	; (8013e38 <TIM_OC4_SetConfig+0xcc>)
 8013de0:	4293      	cmp	r3, r2
 8013de2:	d003      	beq.n	8013dec <TIM_OC4_SetConfig+0x80>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	4a15      	ldr	r2, [pc, #84]	; (8013e3c <TIM_OC4_SetConfig+0xd0>)
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d109      	bne.n	8013e00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	695b      	ldr	r3, [r3, #20]
 8013df8:	019b      	lsls	r3, r3, #6
 8013dfa:	697a      	ldr	r2, [r7, #20]
 8013dfc:	4313      	orrs	r3, r2
 8013dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	697a      	ldr	r2, [r7, #20]
 8013e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	68fa      	ldr	r2, [r7, #12]
 8013e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	685a      	ldr	r2, [r3, #4]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	693a      	ldr	r2, [r7, #16]
 8013e18:	621a      	str	r2, [r3, #32]
}
 8013e1a:	bf00      	nop
 8013e1c:	371c      	adds	r7, #28
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr
 8013e26:	bf00      	nop
 8013e28:	feff8fff 	.word	0xfeff8fff
 8013e2c:	40010000 	.word	0x40010000
 8013e30:	40010400 	.word	0x40010400
 8013e34:	40014000 	.word	0x40014000
 8013e38:	40014400 	.word	0x40014400
 8013e3c:	40014800 	.word	0x40014800

08013e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013e40:	b480      	push	{r7}
 8013e42:	b087      	sub	sp, #28
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6a1b      	ldr	r3, [r3, #32]
 8013e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6a1b      	ldr	r3, [r3, #32]
 8013e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013e68:	68fa      	ldr	r2, [r7, #12]
 8013e6a:	4b21      	ldr	r3, [pc, #132]	; (8013ef0 <TIM_OC5_SetConfig+0xb0>)
 8013e6c:	4013      	ands	r3, r2
 8013e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	68fa      	ldr	r2, [r7, #12]
 8013e76:	4313      	orrs	r3, r2
 8013e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	689b      	ldr	r3, [r3, #8]
 8013e86:	041b      	lsls	r3, r3, #16
 8013e88:	693a      	ldr	r2, [r7, #16]
 8013e8a:	4313      	orrs	r3, r2
 8013e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4a18      	ldr	r2, [pc, #96]	; (8013ef4 <TIM_OC5_SetConfig+0xb4>)
 8013e92:	4293      	cmp	r3, r2
 8013e94:	d00f      	beq.n	8013eb6 <TIM_OC5_SetConfig+0x76>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	4a17      	ldr	r2, [pc, #92]	; (8013ef8 <TIM_OC5_SetConfig+0xb8>)
 8013e9a:	4293      	cmp	r3, r2
 8013e9c:	d00b      	beq.n	8013eb6 <TIM_OC5_SetConfig+0x76>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4a16      	ldr	r2, [pc, #88]	; (8013efc <TIM_OC5_SetConfig+0xbc>)
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	d007      	beq.n	8013eb6 <TIM_OC5_SetConfig+0x76>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	4a15      	ldr	r2, [pc, #84]	; (8013f00 <TIM_OC5_SetConfig+0xc0>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d003      	beq.n	8013eb6 <TIM_OC5_SetConfig+0x76>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	4a14      	ldr	r2, [pc, #80]	; (8013f04 <TIM_OC5_SetConfig+0xc4>)
 8013eb2:	4293      	cmp	r3, r2
 8013eb4:	d109      	bne.n	8013eca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	695b      	ldr	r3, [r3, #20]
 8013ec2:	021b      	lsls	r3, r3, #8
 8013ec4:	697a      	ldr	r2, [r7, #20]
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	697a      	ldr	r2, [r7, #20]
 8013ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	685a      	ldr	r2, [r3, #4]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	693a      	ldr	r2, [r7, #16]
 8013ee2:	621a      	str	r2, [r3, #32]
}
 8013ee4:	bf00      	nop
 8013ee6:	371c      	adds	r7, #28
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	fffeff8f 	.word	0xfffeff8f
 8013ef4:	40010000 	.word	0x40010000
 8013ef8:	40010400 	.word	0x40010400
 8013efc:	40014000 	.word	0x40014000
 8013f00:	40014400 	.word	0x40014400
 8013f04:	40014800 	.word	0x40014800

08013f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b087      	sub	sp, #28
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6a1b      	ldr	r3, [r3, #32]
 8013f16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6a1b      	ldr	r3, [r3, #32]
 8013f1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013f30:	68fa      	ldr	r2, [r7, #12]
 8013f32:	4b22      	ldr	r3, [pc, #136]	; (8013fbc <TIM_OC6_SetConfig+0xb4>)
 8013f34:	4013      	ands	r3, r2
 8013f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	021b      	lsls	r3, r3, #8
 8013f3e:	68fa      	ldr	r2, [r7, #12]
 8013f40:	4313      	orrs	r3, r2
 8013f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013f44:	693b      	ldr	r3, [r7, #16]
 8013f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	689b      	ldr	r3, [r3, #8]
 8013f50:	051b      	lsls	r3, r3, #20
 8013f52:	693a      	ldr	r2, [r7, #16]
 8013f54:	4313      	orrs	r3, r2
 8013f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	4a19      	ldr	r2, [pc, #100]	; (8013fc0 <TIM_OC6_SetConfig+0xb8>)
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	d00f      	beq.n	8013f80 <TIM_OC6_SetConfig+0x78>
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	4a18      	ldr	r2, [pc, #96]	; (8013fc4 <TIM_OC6_SetConfig+0xbc>)
 8013f64:	4293      	cmp	r3, r2
 8013f66:	d00b      	beq.n	8013f80 <TIM_OC6_SetConfig+0x78>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	4a17      	ldr	r2, [pc, #92]	; (8013fc8 <TIM_OC6_SetConfig+0xc0>)
 8013f6c:	4293      	cmp	r3, r2
 8013f6e:	d007      	beq.n	8013f80 <TIM_OC6_SetConfig+0x78>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	4a16      	ldr	r2, [pc, #88]	; (8013fcc <TIM_OC6_SetConfig+0xc4>)
 8013f74:	4293      	cmp	r3, r2
 8013f76:	d003      	beq.n	8013f80 <TIM_OC6_SetConfig+0x78>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	4a15      	ldr	r2, [pc, #84]	; (8013fd0 <TIM_OC6_SetConfig+0xc8>)
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	d109      	bne.n	8013f94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	695b      	ldr	r3, [r3, #20]
 8013f8c:	029b      	lsls	r3, r3, #10
 8013f8e:	697a      	ldr	r2, [r7, #20]
 8013f90:	4313      	orrs	r3, r2
 8013f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	697a      	ldr	r2, [r7, #20]
 8013f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	68fa      	ldr	r2, [r7, #12]
 8013f9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	685a      	ldr	r2, [r3, #4]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	693a      	ldr	r2, [r7, #16]
 8013fac:	621a      	str	r2, [r3, #32]
}
 8013fae:	bf00      	nop
 8013fb0:	371c      	adds	r7, #28
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr
 8013fba:	bf00      	nop
 8013fbc:	feff8fff 	.word	0xfeff8fff
 8013fc0:	40010000 	.word	0x40010000
 8013fc4:	40010400 	.word	0x40010400
 8013fc8:	40014000 	.word	0x40014000
 8013fcc:	40014400 	.word	0x40014400
 8013fd0:	40014800 	.word	0x40014800

08013fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b087      	sub	sp, #28
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	6a1b      	ldr	r3, [r3, #32]
 8013fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	6a1b      	ldr	r3, [r3, #32]
 8013fea:	f023 0201 	bic.w	r2, r3, #1
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	699b      	ldr	r3, [r3, #24]
 8013ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	011b      	lsls	r3, r3, #4
 8014004:	693a      	ldr	r2, [r7, #16]
 8014006:	4313      	orrs	r3, r2
 8014008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	f023 030a 	bic.w	r3, r3, #10
 8014010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014012:	697a      	ldr	r2, [r7, #20]
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	4313      	orrs	r3, r2
 8014018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	693a      	ldr	r2, [r7, #16]
 801401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	697a      	ldr	r2, [r7, #20]
 8014024:	621a      	str	r2, [r3, #32]
}
 8014026:	bf00      	nop
 8014028:	371c      	adds	r7, #28
 801402a:	46bd      	mov	sp, r7
 801402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014030:	4770      	bx	lr

08014032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014032:	b480      	push	{r7}
 8014034:	b087      	sub	sp, #28
 8014036:	af00      	add	r7, sp, #0
 8014038:	60f8      	str	r0, [r7, #12]
 801403a:	60b9      	str	r1, [r7, #8]
 801403c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	6a1b      	ldr	r3, [r3, #32]
 8014042:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	6a1b      	ldr	r3, [r3, #32]
 8014048:	f023 0210 	bic.w	r2, r3, #16
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	699b      	ldr	r3, [r3, #24]
 8014054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801405c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	031b      	lsls	r3, r3, #12
 8014062:	693a      	ldr	r2, [r7, #16]
 8014064:	4313      	orrs	r3, r2
 8014066:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801406e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	011b      	lsls	r3, r3, #4
 8014074:	697a      	ldr	r2, [r7, #20]
 8014076:	4313      	orrs	r3, r2
 8014078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	693a      	ldr	r2, [r7, #16]
 801407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	697a      	ldr	r2, [r7, #20]
 8014084:	621a      	str	r2, [r3, #32]
}
 8014086:	bf00      	nop
 8014088:	371c      	adds	r7, #28
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr
	...

08014094 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014094:	b480      	push	{r7}
 8014096:	b085      	sub	sp, #20
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80140a4:	68fa      	ldr	r2, [r7, #12]
 80140a6:	4b09      	ldr	r3, [pc, #36]	; (80140cc <TIM_ITRx_SetConfig+0x38>)
 80140a8:	4013      	ands	r3, r2
 80140aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80140ac:	683a      	ldr	r2, [r7, #0]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	4313      	orrs	r3, r2
 80140b2:	f043 0307 	orr.w	r3, r3, #7
 80140b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	68fa      	ldr	r2, [r7, #12]
 80140bc:	609a      	str	r2, [r3, #8]
}
 80140be:	bf00      	nop
 80140c0:	3714      	adds	r7, #20
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
 80140ca:	bf00      	nop
 80140cc:	ffcfff8f 	.word	0xffcfff8f

080140d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b087      	sub	sp, #28
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
 80140dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	689b      	ldr	r3, [r3, #8]
 80140e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80140ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	021a      	lsls	r2, r3, #8
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	431a      	orrs	r2, r3
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	4313      	orrs	r3, r2
 80140f8:	697a      	ldr	r2, [r7, #20]
 80140fa:	4313      	orrs	r3, r2
 80140fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	697a      	ldr	r2, [r7, #20]
 8014102:	609a      	str	r2, [r3, #8]
}
 8014104:	bf00      	nop
 8014106:	371c      	adds	r7, #28
 8014108:	46bd      	mov	sp, r7
 801410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410e:	4770      	bx	lr

08014110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014110:	b480      	push	{r7}
 8014112:	b087      	sub	sp, #28
 8014114:	af00      	add	r7, sp, #0
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	f003 031f 	and.w	r3, r3, #31
 8014122:	2201      	movs	r2, #1
 8014124:	fa02 f303 	lsl.w	r3, r2, r3
 8014128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6a1a      	ldr	r2, [r3, #32]
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	43db      	mvns	r3, r3
 8014132:	401a      	ands	r2, r3
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	6a1a      	ldr	r2, [r3, #32]
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	f003 031f 	and.w	r3, r3, #31
 8014142:	6879      	ldr	r1, [r7, #4]
 8014144:	fa01 f303 	lsl.w	r3, r1, r3
 8014148:	431a      	orrs	r2, r3
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	621a      	str	r2, [r3, #32]
}
 801414e:	bf00      	nop
 8014150:	371c      	adds	r7, #28
 8014152:	46bd      	mov	sp, r7
 8014154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014158:	4770      	bx	lr
	...

0801415c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801415c:	b480      	push	{r7}
 801415e:	b085      	sub	sp, #20
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801416c:	2b01      	cmp	r3, #1
 801416e:	d101      	bne.n	8014174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014170:	2302      	movs	r3, #2
 8014172:	e06d      	b.n	8014250 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2201      	movs	r2, #1
 8014178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2202      	movs	r2, #2
 8014180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	4a30      	ldr	r2, [pc, #192]	; (801425c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801419a:	4293      	cmp	r3, r2
 801419c:	d004      	beq.n	80141a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	4a2f      	ldr	r2, [pc, #188]	; (8014260 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80141a4:	4293      	cmp	r3, r2
 80141a6:	d108      	bne.n	80141ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80141ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	68fa      	ldr	r2, [r7, #12]
 80141b6:	4313      	orrs	r3, r2
 80141b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80141c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	68fa      	ldr	r2, [r7, #12]
 80141c8:	4313      	orrs	r3, r2
 80141ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	4a20      	ldr	r2, [pc, #128]	; (801425c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80141da:	4293      	cmp	r3, r2
 80141dc:	d022      	beq.n	8014224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141e6:	d01d      	beq.n	8014224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	4a1d      	ldr	r2, [pc, #116]	; (8014264 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80141ee:	4293      	cmp	r3, r2
 80141f0:	d018      	beq.n	8014224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	4a1c      	ldr	r2, [pc, #112]	; (8014268 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d013      	beq.n	8014224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	4a1a      	ldr	r2, [pc, #104]	; (801426c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8014202:	4293      	cmp	r3, r2
 8014204:	d00e      	beq.n	8014224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	4a15      	ldr	r2, [pc, #84]	; (8014260 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801420c:	4293      	cmp	r3, r2
 801420e:	d009      	beq.n	8014224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a16      	ldr	r2, [pc, #88]	; (8014270 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d004      	beq.n	8014224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4a15      	ldr	r2, [pc, #84]	; (8014274 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014220:	4293      	cmp	r3, r2
 8014222:	d10c      	bne.n	801423e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801422a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	689b      	ldr	r3, [r3, #8]
 8014230:	68ba      	ldr	r2, [r7, #8]
 8014232:	4313      	orrs	r3, r2
 8014234:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	68ba      	ldr	r2, [r7, #8]
 801423c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2201      	movs	r2, #1
 8014242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2200      	movs	r2, #0
 801424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801424e:	2300      	movs	r3, #0
}
 8014250:	4618      	mov	r0, r3
 8014252:	3714      	adds	r7, #20
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr
 801425c:	40010000 	.word	0x40010000
 8014260:	40010400 	.word	0x40010400
 8014264:	40000400 	.word	0x40000400
 8014268:	40000800 	.word	0x40000800
 801426c:	40000c00 	.word	0x40000c00
 8014270:	40001800 	.word	0x40001800
 8014274:	40014000 	.word	0x40014000

08014278 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014278:	b480      	push	{r7}
 801427a:	b085      	sub	sp, #20
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014282:	2300      	movs	r3, #0
 8014284:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801428c:	2b01      	cmp	r3, #1
 801428e:	d101      	bne.n	8014294 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014290:	2302      	movs	r3, #2
 8014292:	e065      	b.n	8014360 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2201      	movs	r2, #1
 8014298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	68db      	ldr	r3, [r3, #12]
 80142a6:	4313      	orrs	r3, r2
 80142a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	689b      	ldr	r3, [r3, #8]
 80142b4:	4313      	orrs	r3, r2
 80142b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	4313      	orrs	r3, r2
 80142c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4313      	orrs	r3, r2
 80142d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	691b      	ldr	r3, [r3, #16]
 80142de:	4313      	orrs	r3, r2
 80142e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	695b      	ldr	r3, [r3, #20]
 80142ec:	4313      	orrs	r3, r2
 80142ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142fa:	4313      	orrs	r3, r2
 80142fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	699b      	ldr	r3, [r3, #24]
 8014308:	041b      	lsls	r3, r3, #16
 801430a:	4313      	orrs	r3, r2
 801430c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	4a16      	ldr	r2, [pc, #88]	; (801436c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014314:	4293      	cmp	r3, r2
 8014316:	d004      	beq.n	8014322 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	4a14      	ldr	r2, [pc, #80]	; (8014370 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801431e:	4293      	cmp	r3, r2
 8014320:	d115      	bne.n	801434e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801432c:	051b      	lsls	r3, r3, #20
 801432e:	4313      	orrs	r3, r2
 8014330:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	69db      	ldr	r3, [r3, #28]
 801433c:	4313      	orrs	r3, r2
 801433e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	6a1b      	ldr	r3, [r3, #32]
 801434a:	4313      	orrs	r3, r2
 801434c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	68fa      	ldr	r2, [r7, #12]
 8014354:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2200      	movs	r2, #0
 801435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801435e:	2300      	movs	r3, #0
}
 8014360:	4618      	mov	r0, r3
 8014362:	3714      	adds	r7, #20
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr
 801436c:	40010000 	.word	0x40010000
 8014370:	40010400 	.word	0x40010400

08014374 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014374:	b480      	push	{r7}
 8014376:	b083      	sub	sp, #12
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801437c:	bf00      	nop
 801437e:	370c      	adds	r7, #12
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr

08014388 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014390:	bf00      	nop
 8014392:	370c      	adds	r7, #12
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80143a4:	bf00      	nop
 80143a6:	370c      	adds	r7, #12
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr

080143b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80143be:	2301      	movs	r3, #1
 80143c0:	e042      	b.n	8014448 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d106      	bne.n	80143da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2200      	movs	r2, #0
 80143d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7f1 f925 	bl	8005624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2224      	movs	r2, #36	; 0x24
 80143de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	681a      	ldr	r2, [r3, #0]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f022 0201 	bic.w	r2, r2, #1
 80143f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d002      	beq.n	8014400 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f001 fbc2 	bl	8015b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f000 fe57 	bl	80150b4 <UART_SetConfig>
 8014406:	4603      	mov	r3, r0
 8014408:	2b01      	cmp	r3, #1
 801440a:	d101      	bne.n	8014410 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801440c:	2301      	movs	r3, #1
 801440e:	e01b      	b.n	8014448 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	685a      	ldr	r2, [r3, #4]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801441e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	689a      	ldr	r2, [r3, #8]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801442e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f042 0201 	orr.w	r2, r2, #1
 801443e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f001 fc41 	bl	8015cc8 <UART_CheckIdleState>
 8014446:	4603      	mov	r3, r0
}
 8014448:	4618      	mov	r0, r3
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b08a      	sub	sp, #40	; 0x28
 8014454:	af02      	add	r7, sp, #8
 8014456:	60f8      	str	r0, [r7, #12]
 8014458:	60b9      	str	r1, [r7, #8]
 801445a:	603b      	str	r3, [r7, #0]
 801445c:	4613      	mov	r3, r2
 801445e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014466:	2b20      	cmp	r3, #32
 8014468:	d17b      	bne.n	8014562 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d002      	beq.n	8014476 <HAL_UART_Transmit+0x26>
 8014470:	88fb      	ldrh	r3, [r7, #6]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d101      	bne.n	801447a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8014476:	2301      	movs	r3, #1
 8014478:	e074      	b.n	8014564 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2200      	movs	r2, #0
 801447e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	2221      	movs	r2, #33	; 0x21
 8014486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801448a:	f7f1 fd7d 	bl	8005f88 <HAL_GetTick>
 801448e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	88fa      	ldrh	r2, [r7, #6]
 8014494:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	88fa      	ldrh	r2, [r7, #6]
 801449c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	689b      	ldr	r3, [r3, #8]
 80144a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80144a8:	d108      	bne.n	80144bc <HAL_UART_Transmit+0x6c>
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	691b      	ldr	r3, [r3, #16]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d104      	bne.n	80144bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80144b2:	2300      	movs	r3, #0
 80144b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	61bb      	str	r3, [r7, #24]
 80144ba:	e003      	b.n	80144c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80144c0:	2300      	movs	r3, #0
 80144c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80144c4:	e030      	b.n	8014528 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	2200      	movs	r2, #0
 80144ce:	2180      	movs	r1, #128	; 0x80
 80144d0:	68f8      	ldr	r0, [r7, #12]
 80144d2:	f001 fca3 	bl	8015e1c <UART_WaitOnFlagUntilTimeout>
 80144d6:	4603      	mov	r3, r0
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d005      	beq.n	80144e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	2220      	movs	r2, #32
 80144e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80144e4:	2303      	movs	r3, #3
 80144e6:	e03d      	b.n	8014564 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80144e8:	69fb      	ldr	r3, [r7, #28]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d10b      	bne.n	8014506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	881b      	ldrh	r3, [r3, #0]
 80144f2:	461a      	mov	r2, r3
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80144fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80144fe:	69bb      	ldr	r3, [r7, #24]
 8014500:	3302      	adds	r3, #2
 8014502:	61bb      	str	r3, [r7, #24]
 8014504:	e007      	b.n	8014516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014506:	69fb      	ldr	r3, [r7, #28]
 8014508:	781a      	ldrb	r2, [r3, #0]
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	3301      	adds	r3, #1
 8014514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801451c:	b29b      	uxth	r3, r3
 801451e:	3b01      	subs	r3, #1
 8014520:	b29a      	uxth	r2, r3
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801452e:	b29b      	uxth	r3, r3
 8014530:	2b00      	cmp	r3, #0
 8014532:	d1c8      	bne.n	80144c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	2200      	movs	r2, #0
 801453c:	2140      	movs	r1, #64	; 0x40
 801453e:	68f8      	ldr	r0, [r7, #12]
 8014540:	f001 fc6c 	bl	8015e1c <UART_WaitOnFlagUntilTimeout>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d005      	beq.n	8014556 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2220      	movs	r2, #32
 801454e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8014552:	2303      	movs	r3, #3
 8014554:	e006      	b.n	8014564 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	2220      	movs	r2, #32
 801455a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801455e:	2300      	movs	r3, #0
 8014560:	e000      	b.n	8014564 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8014562:	2302      	movs	r3, #2
  }
}
 8014564:	4618      	mov	r0, r3
 8014566:	3720      	adds	r7, #32
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b08a      	sub	sp, #40	; 0x28
 8014570:	af02      	add	r7, sp, #8
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	603b      	str	r3, [r7, #0]
 8014578:	4613      	mov	r3, r2
 801457a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014582:	2b20      	cmp	r3, #32
 8014584:	f040 80b5 	bne.w	80146f2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d002      	beq.n	8014594 <HAL_UART_Receive+0x28>
 801458e:	88fb      	ldrh	r3, [r7, #6]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d101      	bne.n	8014598 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014594:	2301      	movs	r3, #1
 8014596:	e0ad      	b.n	80146f4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2200      	movs	r2, #0
 801459c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	2222      	movs	r2, #34	; 0x22
 80145a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2200      	movs	r2, #0
 80145ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80145ae:	f7f1 fceb 	bl	8005f88 <HAL_GetTick>
 80145b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	88fa      	ldrh	r2, [r7, #6]
 80145b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	88fa      	ldrh	r2, [r7, #6]
 80145c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	689b      	ldr	r3, [r3, #8]
 80145c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145cc:	d10e      	bne.n	80145ec <HAL_UART_Receive+0x80>
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	691b      	ldr	r3, [r3, #16]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d105      	bne.n	80145e2 <HAL_UART_Receive+0x76>
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80145dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80145e0:	e02d      	b.n	801463e <HAL_UART_Receive+0xd2>
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	22ff      	movs	r2, #255	; 0xff
 80145e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80145ea:	e028      	b.n	801463e <HAL_UART_Receive+0xd2>
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d10d      	bne.n	8014610 <HAL_UART_Receive+0xa4>
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	691b      	ldr	r3, [r3, #16]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d104      	bne.n	8014606 <HAL_UART_Receive+0x9a>
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	22ff      	movs	r2, #255	; 0xff
 8014600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014604:	e01b      	b.n	801463e <HAL_UART_Receive+0xd2>
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	227f      	movs	r2, #127	; 0x7f
 801460a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801460e:	e016      	b.n	801463e <HAL_UART_Receive+0xd2>
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014618:	d10d      	bne.n	8014636 <HAL_UART_Receive+0xca>
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	691b      	ldr	r3, [r3, #16]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d104      	bne.n	801462c <HAL_UART_Receive+0xc0>
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	227f      	movs	r2, #127	; 0x7f
 8014626:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801462a:	e008      	b.n	801463e <HAL_UART_Receive+0xd2>
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	223f      	movs	r2, #63	; 0x3f
 8014630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014634:	e003      	b.n	801463e <HAL_UART_Receive+0xd2>
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	2200      	movs	r2, #0
 801463a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014644:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	689b      	ldr	r3, [r3, #8]
 801464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801464e:	d108      	bne.n	8014662 <HAL_UART_Receive+0xf6>
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	691b      	ldr	r3, [r3, #16]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d104      	bne.n	8014662 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014658:	2300      	movs	r3, #0
 801465a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	61bb      	str	r3, [r7, #24]
 8014660:	e003      	b.n	801466a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014666:	2300      	movs	r3, #0
 8014668:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801466a:	e036      	b.n	80146da <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	2200      	movs	r2, #0
 8014674:	2120      	movs	r1, #32
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f001 fbd0 	bl	8015e1c <UART_WaitOnFlagUntilTimeout>
 801467c:	4603      	mov	r3, r0
 801467e:	2b00      	cmp	r3, #0
 8014680:	d005      	beq.n	801468e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	2220      	movs	r2, #32
 8014686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801468a:	2303      	movs	r3, #3
 801468c:	e032      	b.n	80146f4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d10c      	bne.n	80146ae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469a:	b29a      	uxth	r2, r3
 801469c:	8a7b      	ldrh	r3, [r7, #18]
 801469e:	4013      	ands	r3, r2
 80146a0:	b29a      	uxth	r2, r3
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	3302      	adds	r3, #2
 80146aa:	61bb      	str	r3, [r7, #24]
 80146ac:	e00c      	b.n	80146c8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b4:	b2da      	uxtb	r2, r3
 80146b6:	8a7b      	ldrh	r3, [r7, #18]
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	4013      	ands	r3, r2
 80146bc:	b2da      	uxtb	r2, r3
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	3301      	adds	r3, #1
 80146c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	3b01      	subs	r3, #1
 80146d2:	b29a      	uxth	r2, r3
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d1c2      	bne.n	801466c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2220      	movs	r2, #32
 80146ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80146ee:	2300      	movs	r3, #0
 80146f0:	e000      	b.n	80146f4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80146f2:	2302      	movs	r3, #2
  }
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3720      	adds	r7, #32
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b08a      	sub	sp, #40	; 0x28
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	4613      	mov	r3, r2
 8014708:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014710:	2b20      	cmp	r3, #32
 8014712:	d137      	bne.n	8014784 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d002      	beq.n	8014720 <HAL_UART_Receive_IT+0x24>
 801471a:	88fb      	ldrh	r3, [r7, #6]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d101      	bne.n	8014724 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014720:	2301      	movs	r3, #1
 8014722:	e030      	b.n	8014786 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2200      	movs	r2, #0
 8014728:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	4a18      	ldr	r2, [pc, #96]	; (8014790 <HAL_UART_Receive_IT+0x94>)
 8014730:	4293      	cmp	r3, r2
 8014732:	d01f      	beq.n	8014774 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801473e:	2b00      	cmp	r3, #0
 8014740:	d018      	beq.n	8014774 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	e853 3f00 	ldrex	r3, [r3]
 801474e:	613b      	str	r3, [r7, #16]
   return(result);
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014756:	627b      	str	r3, [r7, #36]	; 0x24
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	461a      	mov	r2, r3
 801475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014760:	623b      	str	r3, [r7, #32]
 8014762:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014764:	69f9      	ldr	r1, [r7, #28]
 8014766:	6a3a      	ldr	r2, [r7, #32]
 8014768:	e841 2300 	strex	r3, r2, [r1]
 801476c:	61bb      	str	r3, [r7, #24]
   return(result);
 801476e:	69bb      	ldr	r3, [r7, #24]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d1e6      	bne.n	8014742 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014774:	88fb      	ldrh	r3, [r7, #6]
 8014776:	461a      	mov	r2, r3
 8014778:	68b9      	ldr	r1, [r7, #8]
 801477a:	68f8      	ldr	r0, [r7, #12]
 801477c:	f001 fbbc 	bl	8015ef8 <UART_Start_Receive_IT>
 8014780:	4603      	mov	r3, r0
 8014782:	e000      	b.n	8014786 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014784:	2302      	movs	r3, #2
  }
}
 8014786:	4618      	mov	r0, r3
 8014788:	3728      	adds	r7, #40	; 0x28
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	58000c00 	.word	0x58000c00

08014794 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b09a      	sub	sp, #104	; 0x68
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147a4:	e853 3f00 	ldrex	r3, [r3]
 80147a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80147aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80147b0:	667b      	str	r3, [r7, #100]	; 0x64
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	461a      	mov	r2, r3
 80147b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147ba:	657b      	str	r3, [r7, #84]	; 0x54
 80147bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80147c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147c2:	e841 2300 	strex	r3, r2, [r1]
 80147c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80147c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d1e6      	bne.n	801479c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	3308      	adds	r3, #8
 80147d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147d8:	e853 3f00 	ldrex	r3, [r3]
 80147dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80147de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147e0:	4b46      	ldr	r3, [pc, #280]	; (80148fc <HAL_UART_AbortReceive+0x168>)
 80147e2:	4013      	ands	r3, r2
 80147e4:	663b      	str	r3, [r7, #96]	; 0x60
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	3308      	adds	r3, #8
 80147ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80147ee:	643a      	str	r2, [r7, #64]	; 0x40
 80147f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80147f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80147f6:	e841 2300 	strex	r3, r2, [r1]
 80147fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80147fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d1e5      	bne.n	80147ce <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014806:	2b01      	cmp	r3, #1
 8014808:	d118      	bne.n	801483c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014810:	6a3b      	ldr	r3, [r7, #32]
 8014812:	e853 3f00 	ldrex	r3, [r3]
 8014816:	61fb      	str	r3, [r7, #28]
   return(result);
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	f023 0310 	bic.w	r3, r3, #16
 801481e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	461a      	mov	r2, r3
 8014826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014828:	62fb      	str	r3, [r7, #44]	; 0x2c
 801482a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801482c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801482e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014830:	e841 2300 	strex	r3, r2, [r1]
 8014834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014838:	2b00      	cmp	r3, #0
 801483a:	d1e6      	bne.n	801480a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	689b      	ldr	r3, [r3, #8]
 8014842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014846:	2b40      	cmp	r3, #64	; 0x40
 8014848:	d13b      	bne.n	80148c2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	3308      	adds	r3, #8
 8014850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	e853 3f00 	ldrex	r3, [r3]
 8014858:	60bb      	str	r3, [r7, #8]
   return(result);
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014860:	65bb      	str	r3, [r7, #88]	; 0x58
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	3308      	adds	r3, #8
 8014868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801486a:	61ba      	str	r2, [r7, #24]
 801486c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801486e:	6979      	ldr	r1, [r7, #20]
 8014870:	69ba      	ldr	r2, [r7, #24]
 8014872:	e841 2300 	strex	r3, r2, [r1]
 8014876:	613b      	str	r3, [r7, #16]
   return(result);
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d1e5      	bne.n	801484a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014884:	2b00      	cmp	r3, #0
 8014886:	d01c      	beq.n	80148c2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801488e:	2200      	movs	r2, #0
 8014890:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014898:	4618      	mov	r0, r3
 801489a:	f7f4 fa63 	bl	8008d64 <HAL_DMA_Abort>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d00e      	beq.n	80148c2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7f5 fef6 	bl	800a69c <HAL_DMA_GetError>
 80148b0:	4603      	mov	r3, r0
 80148b2:	2b20      	cmp	r3, #32
 80148b4:	d105      	bne.n	80148c2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2210      	movs	r2, #16
 80148ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80148be:	2303      	movs	r3, #3
 80148c0:	e017      	b.n	80148f2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2200      	movs	r2, #0
 80148c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	220f      	movs	r2, #15
 80148d0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	699a      	ldr	r2, [r3, #24]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	f042 0208 	orr.w	r2, r2, #8
 80148e0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2220      	movs	r2, #32
 80148e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2200      	movs	r2, #0
 80148ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80148f0:	2300      	movs	r3, #0
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3768      	adds	r7, #104	; 0x68
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	effffffe 	.word	0xeffffffe

08014900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b0ba      	sub	sp, #232	; 0xe8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	69db      	ldr	r3, [r3, #28]
 801490e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	689b      	ldr	r3, [r3, #8]
 8014922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801492a:	f640 030f 	movw	r3, #2063	; 0x80f
 801492e:	4013      	ands	r3, r2
 8014930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014938:	2b00      	cmp	r3, #0
 801493a:	d11b      	bne.n	8014974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014940:	f003 0320 	and.w	r3, r3, #32
 8014944:	2b00      	cmp	r3, #0
 8014946:	d015      	beq.n	8014974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801494c:	f003 0320 	and.w	r3, r3, #32
 8014950:	2b00      	cmp	r3, #0
 8014952:	d105      	bne.n	8014960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801495c:	2b00      	cmp	r3, #0
 801495e:	d009      	beq.n	8014974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014964:	2b00      	cmp	r3, #0
 8014966:	f000 8377 	beq.w	8015058 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	4798      	blx	r3
      }
      return;
 8014972:	e371      	b.n	8015058 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014978:	2b00      	cmp	r3, #0
 801497a:	f000 8123 	beq.w	8014bc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801497e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014982:	4b8d      	ldr	r3, [pc, #564]	; (8014bb8 <HAL_UART_IRQHandler+0x2b8>)
 8014984:	4013      	ands	r3, r2
 8014986:	2b00      	cmp	r3, #0
 8014988:	d106      	bne.n	8014998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801498a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801498e:	4b8b      	ldr	r3, [pc, #556]	; (8014bbc <HAL_UART_IRQHandler+0x2bc>)
 8014990:	4013      	ands	r3, r2
 8014992:	2b00      	cmp	r3, #0
 8014994:	f000 8116 	beq.w	8014bc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801499c:	f003 0301 	and.w	r3, r3, #1
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d011      	beq.n	80149c8 <HAL_UART_IRQHandler+0xc8>
 80149a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80149a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d00b      	beq.n	80149c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	2201      	movs	r2, #1
 80149b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149be:	f043 0201 	orr.w	r2, r3, #1
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80149c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149cc:	f003 0302 	and.w	r3, r3, #2
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d011      	beq.n	80149f8 <HAL_UART_IRQHandler+0xf8>
 80149d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149d8:	f003 0301 	and.w	r3, r3, #1
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d00b      	beq.n	80149f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	2202      	movs	r2, #2
 80149e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149ee:	f043 0204 	orr.w	r2, r3, #4
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80149f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149fc:	f003 0304 	and.w	r3, r3, #4
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d011      	beq.n	8014a28 <HAL_UART_IRQHandler+0x128>
 8014a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a08:	f003 0301 	and.w	r3, r3, #1
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d00b      	beq.n	8014a28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	2204      	movs	r2, #4
 8014a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a1e:	f043 0202 	orr.w	r2, r3, #2
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a2c:	f003 0308 	and.w	r3, r3, #8
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d017      	beq.n	8014a64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a38:	f003 0320 	and.w	r3, r3, #32
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d105      	bne.n	8014a4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a44:	4b5c      	ldr	r3, [pc, #368]	; (8014bb8 <HAL_UART_IRQHandler+0x2b8>)
 8014a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d00b      	beq.n	8014a64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2208      	movs	r2, #8
 8014a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a5a:	f043 0208 	orr.w	r2, r3, #8
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d012      	beq.n	8014a96 <HAL_UART_IRQHandler+0x196>
 8014a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d00c      	beq.n	8014a96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a8c:	f043 0220 	orr.w	r2, r3, #32
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	f000 82dd 	beq.w	801505c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014aa6:	f003 0320 	and.w	r3, r3, #32
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d013      	beq.n	8014ad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ab2:	f003 0320 	and.w	r3, r3, #32
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d105      	bne.n	8014ac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d007      	beq.n	8014ad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014adc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	689b      	ldr	r3, [r3, #8]
 8014ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aea:	2b40      	cmp	r3, #64	; 0x40
 8014aec:	d005      	beq.n	8014afa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d054      	beq.n	8014ba4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f001 fb1e 	bl	801613c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	689b      	ldr	r3, [r3, #8]
 8014b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b0a:	2b40      	cmp	r3, #64	; 0x40
 8014b0c:	d146      	bne.n	8014b9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	3308      	adds	r3, #8
 8014b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014b1c:	e853 3f00 	ldrex	r3, [r3]
 8014b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	3308      	adds	r3, #8
 8014b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014b4a:	e841 2300 	strex	r3, r2, [r1]
 8014b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d1d9      	bne.n	8014b0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d017      	beq.n	8014b94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b6a:	4a15      	ldr	r2, [pc, #84]	; (8014bc0 <HAL_UART_IRQHandler+0x2c0>)
 8014b6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7f4 fc13 	bl	80093a0 <HAL_DMA_Abort_IT>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d019      	beq.n	8014bb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014b8e:	4610      	mov	r0, r2
 8014b90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b92:	e00f      	b.n	8014bb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f000 fa77 	bl	8015088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b9a:	e00b      	b.n	8014bb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 fa73 	bl	8015088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ba2:	e007      	b.n	8014bb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f000 fa6f 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2200      	movs	r2, #0
 8014bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014bb2:	e253      	b.n	801505c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bb4:	bf00      	nop
    return;
 8014bb6:	e251      	b.n	801505c <HAL_UART_IRQHandler+0x75c>
 8014bb8:	10000001 	.word	0x10000001
 8014bbc:	04000120 	.word	0x04000120
 8014bc0:	08016209 	.word	0x08016209

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	f040 81e7 	bne.w	8014f9c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bd2:	f003 0310 	and.w	r3, r3, #16
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f000 81e0 	beq.w	8014f9c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014be0:	f003 0310 	and.w	r3, r3, #16
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	f000 81d9 	beq.w	8014f9c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2210      	movs	r2, #16
 8014bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	689b      	ldr	r3, [r3, #8]
 8014bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bfc:	2b40      	cmp	r3, #64	; 0x40
 8014bfe:	f040 8151 	bne.w	8014ea4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4a96      	ldr	r2, [pc, #600]	; (8014e64 <HAL_UART_IRQHandler+0x564>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d068      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	4a93      	ldr	r2, [pc, #588]	; (8014e68 <HAL_UART_IRQHandler+0x568>)
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d061      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	4a91      	ldr	r2, [pc, #580]	; (8014e6c <HAL_UART_IRQHandler+0x56c>)
 8014c28:	4293      	cmp	r3, r2
 8014c2a:	d05a      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	4a8e      	ldr	r2, [pc, #568]	; (8014e70 <HAL_UART_IRQHandler+0x570>)
 8014c36:	4293      	cmp	r3, r2
 8014c38:	d053      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	4a8c      	ldr	r2, [pc, #560]	; (8014e74 <HAL_UART_IRQHandler+0x574>)
 8014c44:	4293      	cmp	r3, r2
 8014c46:	d04c      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4a89      	ldr	r2, [pc, #548]	; (8014e78 <HAL_UART_IRQHandler+0x578>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d045      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	4a87      	ldr	r2, [pc, #540]	; (8014e7c <HAL_UART_IRQHandler+0x57c>)
 8014c60:	4293      	cmp	r3, r2
 8014c62:	d03e      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	4a84      	ldr	r2, [pc, #528]	; (8014e80 <HAL_UART_IRQHandler+0x580>)
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	d037      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	4a82      	ldr	r2, [pc, #520]	; (8014e84 <HAL_UART_IRQHandler+0x584>)
 8014c7c:	4293      	cmp	r3, r2
 8014c7e:	d030      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	4a7f      	ldr	r2, [pc, #508]	; (8014e88 <HAL_UART_IRQHandler+0x588>)
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	d029      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	4a7d      	ldr	r2, [pc, #500]	; (8014e8c <HAL_UART_IRQHandler+0x58c>)
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	d022      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	4a7a      	ldr	r2, [pc, #488]	; (8014e90 <HAL_UART_IRQHandler+0x590>)
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d01b      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	4a78      	ldr	r2, [pc, #480]	; (8014e94 <HAL_UART_IRQHandler+0x594>)
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d014      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	4a75      	ldr	r2, [pc, #468]	; (8014e98 <HAL_UART_IRQHandler+0x598>)
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	d00d      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	4a73      	ldr	r2, [pc, #460]	; (8014e9c <HAL_UART_IRQHandler+0x59c>)
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	d006      	beq.n	8014ce2 <HAL_UART_IRQHandler+0x3e2>
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4a70      	ldr	r2, [pc, #448]	; (8014ea0 <HAL_UART_IRQHandler+0x5a0>)
 8014cde:	4293      	cmp	r3, r2
 8014ce0:	d106      	bne.n	8014cf0 <HAL_UART_IRQHandler+0x3f0>
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	e005      	b.n	8014cfc <HAL_UART_IRQHandler+0x3fc>
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014d00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	f000 81ab 	beq.w	8015060 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014d10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d14:	429a      	cmp	r2, r3
 8014d16:	f080 81a3 	bcs.w	8015060 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d2a:	69db      	ldr	r3, [r3, #28]
 8014d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d30:	f000 8087 	beq.w	8014e42 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014d40:	e853 3f00 	ldrex	r3, [r3]
 8014d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	461a      	mov	r2, r3
 8014d5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014d62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014d6e:	e841 2300 	strex	r3, r2, [r1]
 8014d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d1da      	bne.n	8014d34 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	3308      	adds	r3, #8
 8014d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d88:	e853 3f00 	ldrex	r3, [r3]
 8014d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d90:	f023 0301 	bic.w	r3, r3, #1
 8014d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	3308      	adds	r3, #8
 8014d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014da2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014da6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014dae:	e841 2300 	strex	r3, r2, [r1]
 8014db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d1e1      	bne.n	8014d7e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	3308      	adds	r3, #8
 8014dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014dc4:	e853 3f00 	ldrex	r3, [r3]
 8014dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	3308      	adds	r3, #8
 8014dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014dde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014de0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014de2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014de4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014de6:	e841 2300 	strex	r3, r2, [r1]
 8014dea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1e3      	bne.n	8014dba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2220      	movs	r2, #32
 8014df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e08:	e853 3f00 	ldrex	r3, [r3]
 8014e0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e10:	f023 0310 	bic.w	r3, r3, #16
 8014e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e22:	65bb      	str	r3, [r7, #88]	; 0x58
 8014e24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014e28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e2a:	e841 2300 	strex	r3, r2, [r1]
 8014e2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d1e4      	bne.n	8014e00 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7f3 ff91 	bl	8008d64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2202      	movs	r2, #2
 8014e46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	1ad3      	subs	r3, r2, r3
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f000 f91d 	bl	801509c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e62:	e0fd      	b.n	8015060 <HAL_UART_IRQHandler+0x760>
 8014e64:	40020010 	.word	0x40020010
 8014e68:	40020028 	.word	0x40020028
 8014e6c:	40020040 	.word	0x40020040
 8014e70:	40020058 	.word	0x40020058
 8014e74:	40020070 	.word	0x40020070
 8014e78:	40020088 	.word	0x40020088
 8014e7c:	400200a0 	.word	0x400200a0
 8014e80:	400200b8 	.word	0x400200b8
 8014e84:	40020410 	.word	0x40020410
 8014e88:	40020428 	.word	0x40020428
 8014e8c:	40020440 	.word	0x40020440
 8014e90:	40020458 	.word	0x40020458
 8014e94:	40020470 	.word	0x40020470
 8014e98:	40020488 	.word	0x40020488
 8014e9c:	400204a0 	.word	0x400204a0
 8014ea0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014eb0:	b29b      	uxth	r3, r3
 8014eb2:	1ad3      	subs	r3, r2, r3
 8014eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	f000 80cf 	beq.w	8015064 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014ec6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	f000 80ca 	beq.w	8015064 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed8:	e853 3f00 	ldrex	r3, [r3]
 8014edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	461a      	mov	r2, r3
 8014eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8014ef4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014efa:	e841 2300 	strex	r3, r2, [r1]
 8014efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d1e4      	bne.n	8014ed0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	3308      	adds	r3, #8
 8014f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f10:	e853 3f00 	ldrex	r3, [r3]
 8014f14:	623b      	str	r3, [r7, #32]
   return(result);
 8014f16:	6a3a      	ldr	r2, [r7, #32]
 8014f18:	4b55      	ldr	r3, [pc, #340]	; (8015070 <HAL_UART_IRQHandler+0x770>)
 8014f1a:	4013      	ands	r3, r2
 8014f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	3308      	adds	r3, #8
 8014f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8014f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f32:	e841 2300 	strex	r3, r2, [r1]
 8014f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d1e3      	bne.n	8014f06 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2220      	movs	r2, #32
 8014f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	e853 3f00 	ldrex	r3, [r3]
 8014f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f023 0310 	bic.w	r3, r3, #16
 8014f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	461a      	mov	r2, r3
 8014f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f74:	61fb      	str	r3, [r7, #28]
 8014f76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f78:	69b9      	ldr	r1, [r7, #24]
 8014f7a:	69fa      	ldr	r2, [r7, #28]
 8014f7c:	e841 2300 	strex	r3, r2, [r1]
 8014f80:	617b      	str	r3, [r7, #20]
   return(result);
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d1e4      	bne.n	8014f52 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2202      	movs	r2, #2
 8014f8c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014f8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014f92:	4619      	mov	r1, r3
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f000 f881 	bl	801509c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014f9a:	e063      	b.n	8015064 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d00e      	beq.n	8014fc6 <HAL_UART_IRQHandler+0x6c6>
 8014fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d008      	beq.n	8014fc6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014fbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f001 fe80 	bl	8016cc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014fc4:	e051      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d014      	beq.n	8014ffc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d105      	bne.n	8014fea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d008      	beq.n	8014ffc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d03a      	beq.n	8015068 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	4798      	blx	r3
    }
    return;
 8014ffa:	e035      	b.n	8015068 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015004:	2b00      	cmp	r3, #0
 8015006:	d009      	beq.n	801501c <HAL_UART_IRQHandler+0x71c>
 8015008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015010:	2b00      	cmp	r3, #0
 8015012:	d003      	beq.n	801501c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f001 f90d 	bl	8016234 <UART_EndTransmit_IT>
    return;
 801501a:	e026      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015024:	2b00      	cmp	r3, #0
 8015026:	d009      	beq.n	801503c <HAL_UART_IRQHandler+0x73c>
 8015028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801502c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015030:	2b00      	cmp	r3, #0
 8015032:	d003      	beq.n	801503c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f001 fe59 	bl	8016cec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801503a:	e016      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801503c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015044:	2b00      	cmp	r3, #0
 8015046:	d010      	beq.n	801506a <HAL_UART_IRQHandler+0x76a>
 8015048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801504c:	2b00      	cmp	r3, #0
 801504e:	da0c      	bge.n	801506a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f001 fe41 	bl	8016cd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015056:	e008      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
      return;
 8015058:	bf00      	nop
 801505a:	e006      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
    return;
 801505c:	bf00      	nop
 801505e:	e004      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
      return;
 8015060:	bf00      	nop
 8015062:	e002      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
      return;
 8015064:	bf00      	nop
 8015066:	e000      	b.n	801506a <HAL_UART_IRQHandler+0x76a>
    return;
 8015068:	bf00      	nop
  }
}
 801506a:	37e8      	adds	r7, #232	; 0xe8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	effffffe 	.word	0xeffffffe

08015074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801507c:	bf00      	nop
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr

08015088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015088:	b480      	push	{r7}
 801508a:	b083      	sub	sp, #12
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015090:	bf00      	nop
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr

0801509c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	460b      	mov	r3, r1
 80150a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80150a8:	bf00      	nop
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80150b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80150b8:	b092      	sub	sp, #72	; 0x48
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	689a      	ldr	r2, [r3, #8]
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	691b      	ldr	r3, [r3, #16]
 80150cc:	431a      	orrs	r2, r3
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	695b      	ldr	r3, [r3, #20]
 80150d2:	431a      	orrs	r2, r3
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	69db      	ldr	r3, [r3, #28]
 80150d8:	4313      	orrs	r3, r2
 80150da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	4bbe      	ldr	r3, [pc, #760]	; (80153dc <UART_SetConfig+0x328>)
 80150e4:	4013      	ands	r3, r2
 80150e6:	697a      	ldr	r2, [r7, #20]
 80150e8:	6812      	ldr	r2, [r2, #0]
 80150ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80150ec:	430b      	orrs	r3, r1
 80150ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	68da      	ldr	r2, [r3, #12]
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	430a      	orrs	r2, r1
 8015104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	699b      	ldr	r3, [r3, #24]
 801510a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	4ab3      	ldr	r2, [pc, #716]	; (80153e0 <UART_SetConfig+0x32c>)
 8015112:	4293      	cmp	r3, r2
 8015114:	d004      	beq.n	8015120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	6a1b      	ldr	r3, [r3, #32]
 801511a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801511c:	4313      	orrs	r3, r2
 801511e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	689a      	ldr	r2, [r3, #8]
 8015126:	4baf      	ldr	r3, [pc, #700]	; (80153e4 <UART_SetConfig+0x330>)
 8015128:	4013      	ands	r3, r2
 801512a:	697a      	ldr	r2, [r7, #20]
 801512c:	6812      	ldr	r2, [r2, #0]
 801512e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015130:	430b      	orrs	r3, r1
 8015132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801513a:	f023 010f 	bic.w	r1, r3, #15
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015142:	697b      	ldr	r3, [r7, #20]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	430a      	orrs	r2, r1
 8015148:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	4aa6      	ldr	r2, [pc, #664]	; (80153e8 <UART_SetConfig+0x334>)
 8015150:	4293      	cmp	r3, r2
 8015152:	d177      	bne.n	8015244 <UART_SetConfig+0x190>
 8015154:	4ba5      	ldr	r3, [pc, #660]	; (80153ec <UART_SetConfig+0x338>)
 8015156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801515c:	2b28      	cmp	r3, #40	; 0x28
 801515e:	d86d      	bhi.n	801523c <UART_SetConfig+0x188>
 8015160:	a201      	add	r2, pc, #4	; (adr r2, 8015168 <UART_SetConfig+0xb4>)
 8015162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015166:	bf00      	nop
 8015168:	0801520d 	.word	0x0801520d
 801516c:	0801523d 	.word	0x0801523d
 8015170:	0801523d 	.word	0x0801523d
 8015174:	0801523d 	.word	0x0801523d
 8015178:	0801523d 	.word	0x0801523d
 801517c:	0801523d 	.word	0x0801523d
 8015180:	0801523d 	.word	0x0801523d
 8015184:	0801523d 	.word	0x0801523d
 8015188:	08015215 	.word	0x08015215
 801518c:	0801523d 	.word	0x0801523d
 8015190:	0801523d 	.word	0x0801523d
 8015194:	0801523d 	.word	0x0801523d
 8015198:	0801523d 	.word	0x0801523d
 801519c:	0801523d 	.word	0x0801523d
 80151a0:	0801523d 	.word	0x0801523d
 80151a4:	0801523d 	.word	0x0801523d
 80151a8:	0801521d 	.word	0x0801521d
 80151ac:	0801523d 	.word	0x0801523d
 80151b0:	0801523d 	.word	0x0801523d
 80151b4:	0801523d 	.word	0x0801523d
 80151b8:	0801523d 	.word	0x0801523d
 80151bc:	0801523d 	.word	0x0801523d
 80151c0:	0801523d 	.word	0x0801523d
 80151c4:	0801523d 	.word	0x0801523d
 80151c8:	08015225 	.word	0x08015225
 80151cc:	0801523d 	.word	0x0801523d
 80151d0:	0801523d 	.word	0x0801523d
 80151d4:	0801523d 	.word	0x0801523d
 80151d8:	0801523d 	.word	0x0801523d
 80151dc:	0801523d 	.word	0x0801523d
 80151e0:	0801523d 	.word	0x0801523d
 80151e4:	0801523d 	.word	0x0801523d
 80151e8:	0801522d 	.word	0x0801522d
 80151ec:	0801523d 	.word	0x0801523d
 80151f0:	0801523d 	.word	0x0801523d
 80151f4:	0801523d 	.word	0x0801523d
 80151f8:	0801523d 	.word	0x0801523d
 80151fc:	0801523d 	.word	0x0801523d
 8015200:	0801523d 	.word	0x0801523d
 8015204:	0801523d 	.word	0x0801523d
 8015208:	08015235 	.word	0x08015235
 801520c:	2301      	movs	r3, #1
 801520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015212:	e222      	b.n	801565a <UART_SetConfig+0x5a6>
 8015214:	2304      	movs	r3, #4
 8015216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801521a:	e21e      	b.n	801565a <UART_SetConfig+0x5a6>
 801521c:	2308      	movs	r3, #8
 801521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015222:	e21a      	b.n	801565a <UART_SetConfig+0x5a6>
 8015224:	2310      	movs	r3, #16
 8015226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801522a:	e216      	b.n	801565a <UART_SetConfig+0x5a6>
 801522c:	2320      	movs	r3, #32
 801522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015232:	e212      	b.n	801565a <UART_SetConfig+0x5a6>
 8015234:	2340      	movs	r3, #64	; 0x40
 8015236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801523a:	e20e      	b.n	801565a <UART_SetConfig+0x5a6>
 801523c:	2380      	movs	r3, #128	; 0x80
 801523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015242:	e20a      	b.n	801565a <UART_SetConfig+0x5a6>
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	4a69      	ldr	r2, [pc, #420]	; (80153f0 <UART_SetConfig+0x33c>)
 801524a:	4293      	cmp	r3, r2
 801524c:	d130      	bne.n	80152b0 <UART_SetConfig+0x1fc>
 801524e:	4b67      	ldr	r3, [pc, #412]	; (80153ec <UART_SetConfig+0x338>)
 8015250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015252:	f003 0307 	and.w	r3, r3, #7
 8015256:	2b05      	cmp	r3, #5
 8015258:	d826      	bhi.n	80152a8 <UART_SetConfig+0x1f4>
 801525a:	a201      	add	r2, pc, #4	; (adr r2, 8015260 <UART_SetConfig+0x1ac>)
 801525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015260:	08015279 	.word	0x08015279
 8015264:	08015281 	.word	0x08015281
 8015268:	08015289 	.word	0x08015289
 801526c:	08015291 	.word	0x08015291
 8015270:	08015299 	.word	0x08015299
 8015274:	080152a1 	.word	0x080152a1
 8015278:	2300      	movs	r3, #0
 801527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801527e:	e1ec      	b.n	801565a <UART_SetConfig+0x5a6>
 8015280:	2304      	movs	r3, #4
 8015282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015286:	e1e8      	b.n	801565a <UART_SetConfig+0x5a6>
 8015288:	2308      	movs	r3, #8
 801528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801528e:	e1e4      	b.n	801565a <UART_SetConfig+0x5a6>
 8015290:	2310      	movs	r3, #16
 8015292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015296:	e1e0      	b.n	801565a <UART_SetConfig+0x5a6>
 8015298:	2320      	movs	r3, #32
 801529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801529e:	e1dc      	b.n	801565a <UART_SetConfig+0x5a6>
 80152a0:	2340      	movs	r3, #64	; 0x40
 80152a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152a6:	e1d8      	b.n	801565a <UART_SetConfig+0x5a6>
 80152a8:	2380      	movs	r3, #128	; 0x80
 80152aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ae:	e1d4      	b.n	801565a <UART_SetConfig+0x5a6>
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	4a4f      	ldr	r2, [pc, #316]	; (80153f4 <UART_SetConfig+0x340>)
 80152b6:	4293      	cmp	r3, r2
 80152b8:	d130      	bne.n	801531c <UART_SetConfig+0x268>
 80152ba:	4b4c      	ldr	r3, [pc, #304]	; (80153ec <UART_SetConfig+0x338>)
 80152bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152be:	f003 0307 	and.w	r3, r3, #7
 80152c2:	2b05      	cmp	r3, #5
 80152c4:	d826      	bhi.n	8015314 <UART_SetConfig+0x260>
 80152c6:	a201      	add	r2, pc, #4	; (adr r2, 80152cc <UART_SetConfig+0x218>)
 80152c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152cc:	080152e5 	.word	0x080152e5
 80152d0:	080152ed 	.word	0x080152ed
 80152d4:	080152f5 	.word	0x080152f5
 80152d8:	080152fd 	.word	0x080152fd
 80152dc:	08015305 	.word	0x08015305
 80152e0:	0801530d 	.word	0x0801530d
 80152e4:	2300      	movs	r3, #0
 80152e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ea:	e1b6      	b.n	801565a <UART_SetConfig+0x5a6>
 80152ec:	2304      	movs	r3, #4
 80152ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152f2:	e1b2      	b.n	801565a <UART_SetConfig+0x5a6>
 80152f4:	2308      	movs	r3, #8
 80152f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152fa:	e1ae      	b.n	801565a <UART_SetConfig+0x5a6>
 80152fc:	2310      	movs	r3, #16
 80152fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015302:	e1aa      	b.n	801565a <UART_SetConfig+0x5a6>
 8015304:	2320      	movs	r3, #32
 8015306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801530a:	e1a6      	b.n	801565a <UART_SetConfig+0x5a6>
 801530c:	2340      	movs	r3, #64	; 0x40
 801530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015312:	e1a2      	b.n	801565a <UART_SetConfig+0x5a6>
 8015314:	2380      	movs	r3, #128	; 0x80
 8015316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801531a:	e19e      	b.n	801565a <UART_SetConfig+0x5a6>
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a35      	ldr	r2, [pc, #212]	; (80153f8 <UART_SetConfig+0x344>)
 8015322:	4293      	cmp	r3, r2
 8015324:	d130      	bne.n	8015388 <UART_SetConfig+0x2d4>
 8015326:	4b31      	ldr	r3, [pc, #196]	; (80153ec <UART_SetConfig+0x338>)
 8015328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801532a:	f003 0307 	and.w	r3, r3, #7
 801532e:	2b05      	cmp	r3, #5
 8015330:	d826      	bhi.n	8015380 <UART_SetConfig+0x2cc>
 8015332:	a201      	add	r2, pc, #4	; (adr r2, 8015338 <UART_SetConfig+0x284>)
 8015334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015338:	08015351 	.word	0x08015351
 801533c:	08015359 	.word	0x08015359
 8015340:	08015361 	.word	0x08015361
 8015344:	08015369 	.word	0x08015369
 8015348:	08015371 	.word	0x08015371
 801534c:	08015379 	.word	0x08015379
 8015350:	2300      	movs	r3, #0
 8015352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015356:	e180      	b.n	801565a <UART_SetConfig+0x5a6>
 8015358:	2304      	movs	r3, #4
 801535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801535e:	e17c      	b.n	801565a <UART_SetConfig+0x5a6>
 8015360:	2308      	movs	r3, #8
 8015362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015366:	e178      	b.n	801565a <UART_SetConfig+0x5a6>
 8015368:	2310      	movs	r3, #16
 801536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801536e:	e174      	b.n	801565a <UART_SetConfig+0x5a6>
 8015370:	2320      	movs	r3, #32
 8015372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015376:	e170      	b.n	801565a <UART_SetConfig+0x5a6>
 8015378:	2340      	movs	r3, #64	; 0x40
 801537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801537e:	e16c      	b.n	801565a <UART_SetConfig+0x5a6>
 8015380:	2380      	movs	r3, #128	; 0x80
 8015382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015386:	e168      	b.n	801565a <UART_SetConfig+0x5a6>
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	4a1b      	ldr	r2, [pc, #108]	; (80153fc <UART_SetConfig+0x348>)
 801538e:	4293      	cmp	r3, r2
 8015390:	d142      	bne.n	8015418 <UART_SetConfig+0x364>
 8015392:	4b16      	ldr	r3, [pc, #88]	; (80153ec <UART_SetConfig+0x338>)
 8015394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015396:	f003 0307 	and.w	r3, r3, #7
 801539a:	2b05      	cmp	r3, #5
 801539c:	d838      	bhi.n	8015410 <UART_SetConfig+0x35c>
 801539e:	a201      	add	r2, pc, #4	; (adr r2, 80153a4 <UART_SetConfig+0x2f0>)
 80153a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153a4:	080153bd 	.word	0x080153bd
 80153a8:	080153c5 	.word	0x080153c5
 80153ac:	080153cd 	.word	0x080153cd
 80153b0:	080153d5 	.word	0x080153d5
 80153b4:	08015401 	.word	0x08015401
 80153b8:	08015409 	.word	0x08015409
 80153bc:	2300      	movs	r3, #0
 80153be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153c2:	e14a      	b.n	801565a <UART_SetConfig+0x5a6>
 80153c4:	2304      	movs	r3, #4
 80153c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ca:	e146      	b.n	801565a <UART_SetConfig+0x5a6>
 80153cc:	2308      	movs	r3, #8
 80153ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153d2:	e142      	b.n	801565a <UART_SetConfig+0x5a6>
 80153d4:	2310      	movs	r3, #16
 80153d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153da:	e13e      	b.n	801565a <UART_SetConfig+0x5a6>
 80153dc:	cfff69f3 	.word	0xcfff69f3
 80153e0:	58000c00 	.word	0x58000c00
 80153e4:	11fff4ff 	.word	0x11fff4ff
 80153e8:	40011000 	.word	0x40011000
 80153ec:	58024400 	.word	0x58024400
 80153f0:	40004400 	.word	0x40004400
 80153f4:	40004800 	.word	0x40004800
 80153f8:	40004c00 	.word	0x40004c00
 80153fc:	40005000 	.word	0x40005000
 8015400:	2320      	movs	r3, #32
 8015402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015406:	e128      	b.n	801565a <UART_SetConfig+0x5a6>
 8015408:	2340      	movs	r3, #64	; 0x40
 801540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801540e:	e124      	b.n	801565a <UART_SetConfig+0x5a6>
 8015410:	2380      	movs	r3, #128	; 0x80
 8015412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015416:	e120      	b.n	801565a <UART_SetConfig+0x5a6>
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	4acb      	ldr	r2, [pc, #812]	; (801574c <UART_SetConfig+0x698>)
 801541e:	4293      	cmp	r3, r2
 8015420:	d176      	bne.n	8015510 <UART_SetConfig+0x45c>
 8015422:	4bcb      	ldr	r3, [pc, #812]	; (8015750 <UART_SetConfig+0x69c>)
 8015424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801542a:	2b28      	cmp	r3, #40	; 0x28
 801542c:	d86c      	bhi.n	8015508 <UART_SetConfig+0x454>
 801542e:	a201      	add	r2, pc, #4	; (adr r2, 8015434 <UART_SetConfig+0x380>)
 8015430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015434:	080154d9 	.word	0x080154d9
 8015438:	08015509 	.word	0x08015509
 801543c:	08015509 	.word	0x08015509
 8015440:	08015509 	.word	0x08015509
 8015444:	08015509 	.word	0x08015509
 8015448:	08015509 	.word	0x08015509
 801544c:	08015509 	.word	0x08015509
 8015450:	08015509 	.word	0x08015509
 8015454:	080154e1 	.word	0x080154e1
 8015458:	08015509 	.word	0x08015509
 801545c:	08015509 	.word	0x08015509
 8015460:	08015509 	.word	0x08015509
 8015464:	08015509 	.word	0x08015509
 8015468:	08015509 	.word	0x08015509
 801546c:	08015509 	.word	0x08015509
 8015470:	08015509 	.word	0x08015509
 8015474:	080154e9 	.word	0x080154e9
 8015478:	08015509 	.word	0x08015509
 801547c:	08015509 	.word	0x08015509
 8015480:	08015509 	.word	0x08015509
 8015484:	08015509 	.word	0x08015509
 8015488:	08015509 	.word	0x08015509
 801548c:	08015509 	.word	0x08015509
 8015490:	08015509 	.word	0x08015509
 8015494:	080154f1 	.word	0x080154f1
 8015498:	08015509 	.word	0x08015509
 801549c:	08015509 	.word	0x08015509
 80154a0:	08015509 	.word	0x08015509
 80154a4:	08015509 	.word	0x08015509
 80154a8:	08015509 	.word	0x08015509
 80154ac:	08015509 	.word	0x08015509
 80154b0:	08015509 	.word	0x08015509
 80154b4:	080154f9 	.word	0x080154f9
 80154b8:	08015509 	.word	0x08015509
 80154bc:	08015509 	.word	0x08015509
 80154c0:	08015509 	.word	0x08015509
 80154c4:	08015509 	.word	0x08015509
 80154c8:	08015509 	.word	0x08015509
 80154cc:	08015509 	.word	0x08015509
 80154d0:	08015509 	.word	0x08015509
 80154d4:	08015501 	.word	0x08015501
 80154d8:	2301      	movs	r3, #1
 80154da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154de:	e0bc      	b.n	801565a <UART_SetConfig+0x5a6>
 80154e0:	2304      	movs	r3, #4
 80154e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154e6:	e0b8      	b.n	801565a <UART_SetConfig+0x5a6>
 80154e8:	2308      	movs	r3, #8
 80154ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ee:	e0b4      	b.n	801565a <UART_SetConfig+0x5a6>
 80154f0:	2310      	movs	r3, #16
 80154f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154f6:	e0b0      	b.n	801565a <UART_SetConfig+0x5a6>
 80154f8:	2320      	movs	r3, #32
 80154fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154fe:	e0ac      	b.n	801565a <UART_SetConfig+0x5a6>
 8015500:	2340      	movs	r3, #64	; 0x40
 8015502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015506:	e0a8      	b.n	801565a <UART_SetConfig+0x5a6>
 8015508:	2380      	movs	r3, #128	; 0x80
 801550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801550e:	e0a4      	b.n	801565a <UART_SetConfig+0x5a6>
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4a8f      	ldr	r2, [pc, #572]	; (8015754 <UART_SetConfig+0x6a0>)
 8015516:	4293      	cmp	r3, r2
 8015518:	d130      	bne.n	801557c <UART_SetConfig+0x4c8>
 801551a:	4b8d      	ldr	r3, [pc, #564]	; (8015750 <UART_SetConfig+0x69c>)
 801551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801551e:	f003 0307 	and.w	r3, r3, #7
 8015522:	2b05      	cmp	r3, #5
 8015524:	d826      	bhi.n	8015574 <UART_SetConfig+0x4c0>
 8015526:	a201      	add	r2, pc, #4	; (adr r2, 801552c <UART_SetConfig+0x478>)
 8015528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801552c:	08015545 	.word	0x08015545
 8015530:	0801554d 	.word	0x0801554d
 8015534:	08015555 	.word	0x08015555
 8015538:	0801555d 	.word	0x0801555d
 801553c:	08015565 	.word	0x08015565
 8015540:	0801556d 	.word	0x0801556d
 8015544:	2300      	movs	r3, #0
 8015546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801554a:	e086      	b.n	801565a <UART_SetConfig+0x5a6>
 801554c:	2304      	movs	r3, #4
 801554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015552:	e082      	b.n	801565a <UART_SetConfig+0x5a6>
 8015554:	2308      	movs	r3, #8
 8015556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801555a:	e07e      	b.n	801565a <UART_SetConfig+0x5a6>
 801555c:	2310      	movs	r3, #16
 801555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015562:	e07a      	b.n	801565a <UART_SetConfig+0x5a6>
 8015564:	2320      	movs	r3, #32
 8015566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801556a:	e076      	b.n	801565a <UART_SetConfig+0x5a6>
 801556c:	2340      	movs	r3, #64	; 0x40
 801556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015572:	e072      	b.n	801565a <UART_SetConfig+0x5a6>
 8015574:	2380      	movs	r3, #128	; 0x80
 8015576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801557a:	e06e      	b.n	801565a <UART_SetConfig+0x5a6>
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	4a75      	ldr	r2, [pc, #468]	; (8015758 <UART_SetConfig+0x6a4>)
 8015582:	4293      	cmp	r3, r2
 8015584:	d130      	bne.n	80155e8 <UART_SetConfig+0x534>
 8015586:	4b72      	ldr	r3, [pc, #456]	; (8015750 <UART_SetConfig+0x69c>)
 8015588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801558a:	f003 0307 	and.w	r3, r3, #7
 801558e:	2b05      	cmp	r3, #5
 8015590:	d826      	bhi.n	80155e0 <UART_SetConfig+0x52c>
 8015592:	a201      	add	r2, pc, #4	; (adr r2, 8015598 <UART_SetConfig+0x4e4>)
 8015594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015598:	080155b1 	.word	0x080155b1
 801559c:	080155b9 	.word	0x080155b9
 80155a0:	080155c1 	.word	0x080155c1
 80155a4:	080155c9 	.word	0x080155c9
 80155a8:	080155d1 	.word	0x080155d1
 80155ac:	080155d9 	.word	0x080155d9
 80155b0:	2300      	movs	r3, #0
 80155b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155b6:	e050      	b.n	801565a <UART_SetConfig+0x5a6>
 80155b8:	2304      	movs	r3, #4
 80155ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155be:	e04c      	b.n	801565a <UART_SetConfig+0x5a6>
 80155c0:	2308      	movs	r3, #8
 80155c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155c6:	e048      	b.n	801565a <UART_SetConfig+0x5a6>
 80155c8:	2310      	movs	r3, #16
 80155ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ce:	e044      	b.n	801565a <UART_SetConfig+0x5a6>
 80155d0:	2320      	movs	r3, #32
 80155d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155d6:	e040      	b.n	801565a <UART_SetConfig+0x5a6>
 80155d8:	2340      	movs	r3, #64	; 0x40
 80155da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155de:	e03c      	b.n	801565a <UART_SetConfig+0x5a6>
 80155e0:	2380      	movs	r3, #128	; 0x80
 80155e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155e6:	e038      	b.n	801565a <UART_SetConfig+0x5a6>
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	4a5b      	ldr	r2, [pc, #364]	; (801575c <UART_SetConfig+0x6a8>)
 80155ee:	4293      	cmp	r3, r2
 80155f0:	d130      	bne.n	8015654 <UART_SetConfig+0x5a0>
 80155f2:	4b57      	ldr	r3, [pc, #348]	; (8015750 <UART_SetConfig+0x69c>)
 80155f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155f6:	f003 0307 	and.w	r3, r3, #7
 80155fa:	2b05      	cmp	r3, #5
 80155fc:	d826      	bhi.n	801564c <UART_SetConfig+0x598>
 80155fe:	a201      	add	r2, pc, #4	; (adr r2, 8015604 <UART_SetConfig+0x550>)
 8015600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015604:	0801561d 	.word	0x0801561d
 8015608:	08015625 	.word	0x08015625
 801560c:	0801562d 	.word	0x0801562d
 8015610:	08015635 	.word	0x08015635
 8015614:	0801563d 	.word	0x0801563d
 8015618:	08015645 	.word	0x08015645
 801561c:	2302      	movs	r3, #2
 801561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015622:	e01a      	b.n	801565a <UART_SetConfig+0x5a6>
 8015624:	2304      	movs	r3, #4
 8015626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801562a:	e016      	b.n	801565a <UART_SetConfig+0x5a6>
 801562c:	2308      	movs	r3, #8
 801562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015632:	e012      	b.n	801565a <UART_SetConfig+0x5a6>
 8015634:	2310      	movs	r3, #16
 8015636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801563a:	e00e      	b.n	801565a <UART_SetConfig+0x5a6>
 801563c:	2320      	movs	r3, #32
 801563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015642:	e00a      	b.n	801565a <UART_SetConfig+0x5a6>
 8015644:	2340      	movs	r3, #64	; 0x40
 8015646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801564a:	e006      	b.n	801565a <UART_SetConfig+0x5a6>
 801564c:	2380      	movs	r3, #128	; 0x80
 801564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015652:	e002      	b.n	801565a <UART_SetConfig+0x5a6>
 8015654:	2380      	movs	r3, #128	; 0x80
 8015656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	4a3f      	ldr	r2, [pc, #252]	; (801575c <UART_SetConfig+0x6a8>)
 8015660:	4293      	cmp	r3, r2
 8015662:	f040 80f8 	bne.w	8015856 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015666:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801566a:	2b20      	cmp	r3, #32
 801566c:	dc46      	bgt.n	80156fc <UART_SetConfig+0x648>
 801566e:	2b02      	cmp	r3, #2
 8015670:	f2c0 8082 	blt.w	8015778 <UART_SetConfig+0x6c4>
 8015674:	3b02      	subs	r3, #2
 8015676:	2b1e      	cmp	r3, #30
 8015678:	d87e      	bhi.n	8015778 <UART_SetConfig+0x6c4>
 801567a:	a201      	add	r2, pc, #4	; (adr r2, 8015680 <UART_SetConfig+0x5cc>)
 801567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015680:	08015703 	.word	0x08015703
 8015684:	08015779 	.word	0x08015779
 8015688:	0801570b 	.word	0x0801570b
 801568c:	08015779 	.word	0x08015779
 8015690:	08015779 	.word	0x08015779
 8015694:	08015779 	.word	0x08015779
 8015698:	0801571b 	.word	0x0801571b
 801569c:	08015779 	.word	0x08015779
 80156a0:	08015779 	.word	0x08015779
 80156a4:	08015779 	.word	0x08015779
 80156a8:	08015779 	.word	0x08015779
 80156ac:	08015779 	.word	0x08015779
 80156b0:	08015779 	.word	0x08015779
 80156b4:	08015779 	.word	0x08015779
 80156b8:	0801572b 	.word	0x0801572b
 80156bc:	08015779 	.word	0x08015779
 80156c0:	08015779 	.word	0x08015779
 80156c4:	08015779 	.word	0x08015779
 80156c8:	08015779 	.word	0x08015779
 80156cc:	08015779 	.word	0x08015779
 80156d0:	08015779 	.word	0x08015779
 80156d4:	08015779 	.word	0x08015779
 80156d8:	08015779 	.word	0x08015779
 80156dc:	08015779 	.word	0x08015779
 80156e0:	08015779 	.word	0x08015779
 80156e4:	08015779 	.word	0x08015779
 80156e8:	08015779 	.word	0x08015779
 80156ec:	08015779 	.word	0x08015779
 80156f0:	08015779 	.word	0x08015779
 80156f4:	08015779 	.word	0x08015779
 80156f8:	0801576b 	.word	0x0801576b
 80156fc:	2b40      	cmp	r3, #64	; 0x40
 80156fe:	d037      	beq.n	8015770 <UART_SetConfig+0x6bc>
 8015700:	e03a      	b.n	8015778 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8015702:	f7fb fc17 	bl	8010f34 <HAL_RCCEx_GetD3PCLK1Freq>
 8015706:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015708:	e03c      	b.n	8015784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801570a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801570e:	4618      	mov	r0, r3
 8015710:	f7fb fc26 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015718:	e034      	b.n	8015784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801571a:	f107 0318 	add.w	r3, r7, #24
 801571e:	4618      	mov	r0, r3
 8015720:	f7fb fd72 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015724:	69fb      	ldr	r3, [r7, #28]
 8015726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015728:	e02c      	b.n	8015784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801572a:	4b09      	ldr	r3, [pc, #36]	; (8015750 <UART_SetConfig+0x69c>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f003 0320 	and.w	r3, r3, #32
 8015732:	2b00      	cmp	r3, #0
 8015734:	d016      	beq.n	8015764 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015736:	4b06      	ldr	r3, [pc, #24]	; (8015750 <UART_SetConfig+0x69c>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	08db      	lsrs	r3, r3, #3
 801573c:	f003 0303 	and.w	r3, r3, #3
 8015740:	4a07      	ldr	r2, [pc, #28]	; (8015760 <UART_SetConfig+0x6ac>)
 8015742:	fa22 f303 	lsr.w	r3, r2, r3
 8015746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015748:	e01c      	b.n	8015784 <UART_SetConfig+0x6d0>
 801574a:	bf00      	nop
 801574c:	40011400 	.word	0x40011400
 8015750:	58024400 	.word	0x58024400
 8015754:	40007800 	.word	0x40007800
 8015758:	40007c00 	.word	0x40007c00
 801575c:	58000c00 	.word	0x58000c00
 8015760:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015764:	4b9d      	ldr	r3, [pc, #628]	; (80159dc <UART_SetConfig+0x928>)
 8015766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015768:	e00c      	b.n	8015784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801576a:	4b9d      	ldr	r3, [pc, #628]	; (80159e0 <UART_SetConfig+0x92c>)
 801576c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801576e:	e009      	b.n	8015784 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015776:	e005      	b.n	8015784 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015778:	2300      	movs	r3, #0
 801577a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801577c:	2301      	movs	r3, #1
 801577e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015782:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015786:	2b00      	cmp	r3, #0
 8015788:	f000 81de 	beq.w	8015b48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015790:	4a94      	ldr	r2, [pc, #592]	; (80159e4 <UART_SetConfig+0x930>)
 8015792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015796:	461a      	mov	r2, r3
 8015798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801579a:	fbb3 f3f2 	udiv	r3, r3, r2
 801579e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	685a      	ldr	r2, [r3, #4]
 80157a4:	4613      	mov	r3, r2
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	4413      	add	r3, r2
 80157aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d305      	bcc.n	80157bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80157b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d903      	bls.n	80157c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80157bc:	2301      	movs	r3, #1
 80157be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80157c2:	e1c1      	b.n	8015b48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80157c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157c6:	2200      	movs	r2, #0
 80157c8:	60bb      	str	r3, [r7, #8]
 80157ca:	60fa      	str	r2, [r7, #12]
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157d0:	4a84      	ldr	r2, [pc, #528]	; (80159e4 <UART_SetConfig+0x930>)
 80157d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80157d6:	b29b      	uxth	r3, r3
 80157d8:	2200      	movs	r2, #0
 80157da:	603b      	str	r3, [r7, #0]
 80157dc:	607a      	str	r2, [r7, #4]
 80157de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80157e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80157e6:	f7ea fd7b 	bl	80002e0 <__aeabi_uldivmod>
 80157ea:	4602      	mov	r2, r0
 80157ec:	460b      	mov	r3, r1
 80157ee:	4610      	mov	r0, r2
 80157f0:	4619      	mov	r1, r3
 80157f2:	f04f 0200 	mov.w	r2, #0
 80157f6:	f04f 0300 	mov.w	r3, #0
 80157fa:	020b      	lsls	r3, r1, #8
 80157fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015800:	0202      	lsls	r2, r0, #8
 8015802:	6979      	ldr	r1, [r7, #20]
 8015804:	6849      	ldr	r1, [r1, #4]
 8015806:	0849      	lsrs	r1, r1, #1
 8015808:	2000      	movs	r0, #0
 801580a:	460c      	mov	r4, r1
 801580c:	4605      	mov	r5, r0
 801580e:	eb12 0804 	adds.w	r8, r2, r4
 8015812:	eb43 0905 	adc.w	r9, r3, r5
 8015816:	697b      	ldr	r3, [r7, #20]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	2200      	movs	r2, #0
 801581c:	469a      	mov	sl, r3
 801581e:	4693      	mov	fp, r2
 8015820:	4652      	mov	r2, sl
 8015822:	465b      	mov	r3, fp
 8015824:	4640      	mov	r0, r8
 8015826:	4649      	mov	r1, r9
 8015828:	f7ea fd5a 	bl	80002e0 <__aeabi_uldivmod>
 801582c:	4602      	mov	r2, r0
 801582e:	460b      	mov	r3, r1
 8015830:	4613      	mov	r3, r2
 8015832:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801583a:	d308      	bcc.n	801584e <UART_SetConfig+0x79a>
 801583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801583e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015842:	d204      	bcs.n	801584e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801584a:	60da      	str	r2, [r3, #12]
 801584c:	e17c      	b.n	8015b48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801584e:	2301      	movs	r3, #1
 8015850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015854:	e178      	b.n	8015b48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	69db      	ldr	r3, [r3, #28]
 801585a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801585e:	f040 80c5 	bne.w	80159ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015862:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015866:	2b20      	cmp	r3, #32
 8015868:	dc48      	bgt.n	80158fc <UART_SetConfig+0x848>
 801586a:	2b00      	cmp	r3, #0
 801586c:	db7b      	blt.n	8015966 <UART_SetConfig+0x8b2>
 801586e:	2b20      	cmp	r3, #32
 8015870:	d879      	bhi.n	8015966 <UART_SetConfig+0x8b2>
 8015872:	a201      	add	r2, pc, #4	; (adr r2, 8015878 <UART_SetConfig+0x7c4>)
 8015874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015878:	08015903 	.word	0x08015903
 801587c:	0801590b 	.word	0x0801590b
 8015880:	08015967 	.word	0x08015967
 8015884:	08015967 	.word	0x08015967
 8015888:	08015913 	.word	0x08015913
 801588c:	08015967 	.word	0x08015967
 8015890:	08015967 	.word	0x08015967
 8015894:	08015967 	.word	0x08015967
 8015898:	08015923 	.word	0x08015923
 801589c:	08015967 	.word	0x08015967
 80158a0:	08015967 	.word	0x08015967
 80158a4:	08015967 	.word	0x08015967
 80158a8:	08015967 	.word	0x08015967
 80158ac:	08015967 	.word	0x08015967
 80158b0:	08015967 	.word	0x08015967
 80158b4:	08015967 	.word	0x08015967
 80158b8:	08015933 	.word	0x08015933
 80158bc:	08015967 	.word	0x08015967
 80158c0:	08015967 	.word	0x08015967
 80158c4:	08015967 	.word	0x08015967
 80158c8:	08015967 	.word	0x08015967
 80158cc:	08015967 	.word	0x08015967
 80158d0:	08015967 	.word	0x08015967
 80158d4:	08015967 	.word	0x08015967
 80158d8:	08015967 	.word	0x08015967
 80158dc:	08015967 	.word	0x08015967
 80158e0:	08015967 	.word	0x08015967
 80158e4:	08015967 	.word	0x08015967
 80158e8:	08015967 	.word	0x08015967
 80158ec:	08015967 	.word	0x08015967
 80158f0:	08015967 	.word	0x08015967
 80158f4:	08015967 	.word	0x08015967
 80158f8:	08015959 	.word	0x08015959
 80158fc:	2b40      	cmp	r3, #64	; 0x40
 80158fe:	d02e      	beq.n	801595e <UART_SetConfig+0x8aa>
 8015900:	e031      	b.n	8015966 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015902:	f7f9 fb1f 	bl	800ef44 <HAL_RCC_GetPCLK1Freq>
 8015906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015908:	e033      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801590a:	f7f9 fb31 	bl	800ef70 <HAL_RCC_GetPCLK2Freq>
 801590e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015910:	e02f      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015916:	4618      	mov	r0, r3
 8015918:	f7fb fb22 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015920:	e027      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015922:	f107 0318 	add.w	r3, r7, #24
 8015926:	4618      	mov	r0, r3
 8015928:	f7fb fc6e 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015930:	e01f      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015932:	4b2d      	ldr	r3, [pc, #180]	; (80159e8 <UART_SetConfig+0x934>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	f003 0320 	and.w	r3, r3, #32
 801593a:	2b00      	cmp	r3, #0
 801593c:	d009      	beq.n	8015952 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801593e:	4b2a      	ldr	r3, [pc, #168]	; (80159e8 <UART_SetConfig+0x934>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	08db      	lsrs	r3, r3, #3
 8015944:	f003 0303 	and.w	r3, r3, #3
 8015948:	4a24      	ldr	r2, [pc, #144]	; (80159dc <UART_SetConfig+0x928>)
 801594a:	fa22 f303 	lsr.w	r3, r2, r3
 801594e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015950:	e00f      	b.n	8015972 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015952:	4b22      	ldr	r3, [pc, #136]	; (80159dc <UART_SetConfig+0x928>)
 8015954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015956:	e00c      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015958:	4b21      	ldr	r3, [pc, #132]	; (80159e0 <UART_SetConfig+0x92c>)
 801595a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801595c:	e009      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801595e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015964:	e005      	b.n	8015972 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015966:	2300      	movs	r3, #0
 8015968:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801596a:	2301      	movs	r3, #1
 801596c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015970:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015974:	2b00      	cmp	r3, #0
 8015976:	f000 80e7 	beq.w	8015b48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801597e:	4a19      	ldr	r2, [pc, #100]	; (80159e4 <UART_SetConfig+0x930>)
 8015980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015984:	461a      	mov	r2, r3
 8015986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015988:	fbb3 f3f2 	udiv	r3, r3, r2
 801598c:	005a      	lsls	r2, r3, #1
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	685b      	ldr	r3, [r3, #4]
 8015992:	085b      	lsrs	r3, r3, #1
 8015994:	441a      	add	r2, r3
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	fbb2 f3f3 	udiv	r3, r2, r3
 801599e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80159a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a2:	2b0f      	cmp	r3, #15
 80159a4:	d916      	bls.n	80159d4 <UART_SetConfig+0x920>
 80159a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159ac:	d212      	bcs.n	80159d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80159ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	f023 030f 	bic.w	r3, r3, #15
 80159b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80159b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159ba:	085b      	lsrs	r3, r3, #1
 80159bc:	b29b      	uxth	r3, r3
 80159be:	f003 0307 	and.w	r3, r3, #7
 80159c2:	b29a      	uxth	r2, r3
 80159c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80159c6:	4313      	orrs	r3, r2
 80159c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80159d0:	60da      	str	r2, [r3, #12]
 80159d2:	e0b9      	b.n	8015b48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80159d4:	2301      	movs	r3, #1
 80159d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80159da:	e0b5      	b.n	8015b48 <UART_SetConfig+0xa94>
 80159dc:	03d09000 	.word	0x03d09000
 80159e0:	003d0900 	.word	0x003d0900
 80159e4:	0801b55c 	.word	0x0801b55c
 80159e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80159ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80159f0:	2b20      	cmp	r3, #32
 80159f2:	dc49      	bgt.n	8015a88 <UART_SetConfig+0x9d4>
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	db7c      	blt.n	8015af2 <UART_SetConfig+0xa3e>
 80159f8:	2b20      	cmp	r3, #32
 80159fa:	d87a      	bhi.n	8015af2 <UART_SetConfig+0xa3e>
 80159fc:	a201      	add	r2, pc, #4	; (adr r2, 8015a04 <UART_SetConfig+0x950>)
 80159fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a02:	bf00      	nop
 8015a04:	08015a8f 	.word	0x08015a8f
 8015a08:	08015a97 	.word	0x08015a97
 8015a0c:	08015af3 	.word	0x08015af3
 8015a10:	08015af3 	.word	0x08015af3
 8015a14:	08015a9f 	.word	0x08015a9f
 8015a18:	08015af3 	.word	0x08015af3
 8015a1c:	08015af3 	.word	0x08015af3
 8015a20:	08015af3 	.word	0x08015af3
 8015a24:	08015aaf 	.word	0x08015aaf
 8015a28:	08015af3 	.word	0x08015af3
 8015a2c:	08015af3 	.word	0x08015af3
 8015a30:	08015af3 	.word	0x08015af3
 8015a34:	08015af3 	.word	0x08015af3
 8015a38:	08015af3 	.word	0x08015af3
 8015a3c:	08015af3 	.word	0x08015af3
 8015a40:	08015af3 	.word	0x08015af3
 8015a44:	08015abf 	.word	0x08015abf
 8015a48:	08015af3 	.word	0x08015af3
 8015a4c:	08015af3 	.word	0x08015af3
 8015a50:	08015af3 	.word	0x08015af3
 8015a54:	08015af3 	.word	0x08015af3
 8015a58:	08015af3 	.word	0x08015af3
 8015a5c:	08015af3 	.word	0x08015af3
 8015a60:	08015af3 	.word	0x08015af3
 8015a64:	08015af3 	.word	0x08015af3
 8015a68:	08015af3 	.word	0x08015af3
 8015a6c:	08015af3 	.word	0x08015af3
 8015a70:	08015af3 	.word	0x08015af3
 8015a74:	08015af3 	.word	0x08015af3
 8015a78:	08015af3 	.word	0x08015af3
 8015a7c:	08015af3 	.word	0x08015af3
 8015a80:	08015af3 	.word	0x08015af3
 8015a84:	08015ae5 	.word	0x08015ae5
 8015a88:	2b40      	cmp	r3, #64	; 0x40
 8015a8a:	d02e      	beq.n	8015aea <UART_SetConfig+0xa36>
 8015a8c:	e031      	b.n	8015af2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015a8e:	f7f9 fa59 	bl	800ef44 <HAL_RCC_GetPCLK1Freq>
 8015a92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015a94:	e033      	b.n	8015afe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015a96:	f7f9 fa6b 	bl	800ef70 <HAL_RCC_GetPCLK2Freq>
 8015a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015a9c:	e02f      	b.n	8015afe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f7fb fa5c 	bl	8010f60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015aac:	e027      	b.n	8015afe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015aae:	f107 0318 	add.w	r3, r7, #24
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7fb fba8 	bl	8011208 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015abc:	e01f      	b.n	8015afe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015abe:	4b2d      	ldr	r3, [pc, #180]	; (8015b74 <UART_SetConfig+0xac0>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	f003 0320 	and.w	r3, r3, #32
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d009      	beq.n	8015ade <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015aca:	4b2a      	ldr	r3, [pc, #168]	; (8015b74 <UART_SetConfig+0xac0>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	08db      	lsrs	r3, r3, #3
 8015ad0:	f003 0303 	and.w	r3, r3, #3
 8015ad4:	4a28      	ldr	r2, [pc, #160]	; (8015b78 <UART_SetConfig+0xac4>)
 8015ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8015ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015adc:	e00f      	b.n	8015afe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015ade:	4b26      	ldr	r3, [pc, #152]	; (8015b78 <UART_SetConfig+0xac4>)
 8015ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ae2:	e00c      	b.n	8015afe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015ae4:	4b25      	ldr	r3, [pc, #148]	; (8015b7c <UART_SetConfig+0xac8>)
 8015ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ae8:	e009      	b.n	8015afe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015af0:	e005      	b.n	8015afe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015af2:	2300      	movs	r3, #0
 8015af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015af6:	2301      	movs	r3, #1
 8015af8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015afc:	bf00      	nop
    }

    if (pclk != 0U)
 8015afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d021      	beq.n	8015b48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b08:	4a1d      	ldr	r2, [pc, #116]	; (8015b80 <UART_SetConfig+0xacc>)
 8015b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b0e:	461a      	mov	r2, r3
 8015b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	085b      	lsrs	r3, r3, #1
 8015b1c:	441a      	add	r2, r3
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b2a:	2b0f      	cmp	r3, #15
 8015b2c:	d909      	bls.n	8015b42 <UART_SetConfig+0xa8e>
 8015b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b34:	d205      	bcs.n	8015b42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b38:	b29a      	uxth	r2, r3
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	60da      	str	r2, [r3, #12]
 8015b40:	e002      	b.n	8015b48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015b42:	2301      	movs	r3, #1
 8015b44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	2201      	movs	r2, #1
 8015b54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	2200      	movs	r2, #0
 8015b62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015b64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3748      	adds	r7, #72	; 0x48
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015b72:	bf00      	nop
 8015b74:	58024400 	.word	0x58024400
 8015b78:	03d09000 	.word	0x03d09000
 8015b7c:	003d0900 	.word	0x003d0900
 8015b80:	0801b55c 	.word	0x0801b55c

08015b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015b84:	b480      	push	{r7}
 8015b86:	b083      	sub	sp, #12
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b90:	f003 0308 	and.w	r3, r3, #8
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d00a      	beq.n	8015bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	430a      	orrs	r2, r1
 8015bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bb2:	f003 0301 	and.w	r3, r3, #1
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d00a      	beq.n	8015bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	430a      	orrs	r2, r1
 8015bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bd4:	f003 0302 	and.w	r3, r3, #2
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d00a      	beq.n	8015bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	430a      	orrs	r2, r1
 8015bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf6:	f003 0304 	and.w	r3, r3, #4
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d00a      	beq.n	8015c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	430a      	orrs	r2, r1
 8015c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c18:	f003 0310 	and.w	r3, r3, #16
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d00a      	beq.n	8015c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	430a      	orrs	r2, r1
 8015c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c3a:	f003 0320 	and.w	r3, r3, #32
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d00a      	beq.n	8015c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	689b      	ldr	r3, [r3, #8]
 8015c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	430a      	orrs	r2, r1
 8015c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d01a      	beq.n	8015c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	430a      	orrs	r2, r1
 8015c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c82:	d10a      	bne.n	8015c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	430a      	orrs	r2, r1
 8015c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d00a      	beq.n	8015cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	430a      	orrs	r2, r1
 8015cba:	605a      	str	r2, [r3, #4]
  }
}
 8015cbc:	bf00      	nop
 8015cbe:	370c      	adds	r7, #12
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc6:	4770      	bx	lr

08015cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b098      	sub	sp, #96	; 0x60
 8015ccc:	af02      	add	r7, sp, #8
 8015cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015cd8:	f7f0 f956 	bl	8005f88 <HAL_GetTick>
 8015cdc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f003 0308 	and.w	r3, r3, #8
 8015ce8:	2b08      	cmp	r3, #8
 8015cea:	d12f      	bne.n	8015d4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015cf0:	9300      	str	r3, [sp, #0]
 8015cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f000 f88e 	bl	8015e1c <UART_WaitOnFlagUntilTimeout>
 8015d00:	4603      	mov	r3, r0
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d022      	beq.n	8015d4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0e:	e853 3f00 	ldrex	r3, [r3]
 8015d12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	461a      	mov	r2, r3
 8015d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d24:	647b      	str	r3, [r7, #68]	; 0x44
 8015d26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d2c:	e841 2300 	strex	r3, r2, [r1]
 8015d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d1e6      	bne.n	8015d06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2220      	movs	r2, #32
 8015d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2200      	movs	r2, #0
 8015d44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015d48:	2303      	movs	r3, #3
 8015d4a:	e063      	b.n	8015e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	f003 0304 	and.w	r3, r3, #4
 8015d56:	2b04      	cmp	r3, #4
 8015d58:	d149      	bne.n	8015dee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015d5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015d5e:	9300      	str	r3, [sp, #0]
 8015d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d62:	2200      	movs	r2, #0
 8015d64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	f000 f857 	bl	8015e1c <UART_WaitOnFlagUntilTimeout>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d03c      	beq.n	8015dee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7c:	e853 3f00 	ldrex	r3, [r3]
 8015d80:	623b      	str	r3, [r7, #32]
   return(result);
 8015d82:	6a3b      	ldr	r3, [r7, #32]
 8015d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	461a      	mov	r2, r3
 8015d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d92:	633b      	str	r3, [r7, #48]	; 0x30
 8015d94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d9a:	e841 2300 	strex	r3, r2, [r1]
 8015d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d1e6      	bne.n	8015d74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	3308      	adds	r3, #8
 8015dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	e853 3f00 	ldrex	r3, [r3]
 8015db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	f023 0301 	bic.w	r3, r3, #1
 8015dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	3308      	adds	r3, #8
 8015dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015dc6:	61fa      	str	r2, [r7, #28]
 8015dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dca:	69b9      	ldr	r1, [r7, #24]
 8015dcc:	69fa      	ldr	r2, [r7, #28]
 8015dce:	e841 2300 	strex	r3, r2, [r1]
 8015dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d1e5      	bne.n	8015da6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	2220      	movs	r2, #32
 8015dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2200      	movs	r2, #0
 8015de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015dea:	2303      	movs	r3, #3
 8015dec:	e012      	b.n	8015e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	2220      	movs	r2, #32
 8015df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2220      	movs	r2, #32
 8015dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2200      	movs	r2, #0
 8015e02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2200      	movs	r2, #0
 8015e08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015e12:	2300      	movs	r3, #0
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	3758      	adds	r7, #88	; 0x58
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}

08015e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b084      	sub	sp, #16
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	603b      	str	r3, [r7, #0]
 8015e28:	4613      	mov	r3, r2
 8015e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015e2c:	e04f      	b.n	8015ece <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015e2e:	69bb      	ldr	r3, [r7, #24]
 8015e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e34:	d04b      	beq.n	8015ece <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015e36:	f7f0 f8a7 	bl	8005f88 <HAL_GetTick>
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	1ad3      	subs	r3, r2, r3
 8015e40:	69ba      	ldr	r2, [r7, #24]
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d302      	bcc.n	8015e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d101      	bne.n	8015e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015e4c:	2303      	movs	r3, #3
 8015e4e:	e04e      	b.n	8015eee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	f003 0304 	and.w	r3, r3, #4
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d037      	beq.n	8015ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	2b80      	cmp	r3, #128	; 0x80
 8015e62:	d034      	beq.n	8015ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8015e64:	68bb      	ldr	r3, [r7, #8]
 8015e66:	2b40      	cmp	r3, #64	; 0x40
 8015e68:	d031      	beq.n	8015ece <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	69db      	ldr	r3, [r3, #28]
 8015e70:	f003 0308 	and.w	r3, r3, #8
 8015e74:	2b08      	cmp	r3, #8
 8015e76:	d110      	bne.n	8015e9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	2208      	movs	r2, #8
 8015e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015e80:	68f8      	ldr	r0, [r7, #12]
 8015e82:	f000 f95b 	bl	801613c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	2208      	movs	r2, #8
 8015e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2200      	movs	r2, #0
 8015e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015e96:	2301      	movs	r3, #1
 8015e98:	e029      	b.n	8015eee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	69db      	ldr	r3, [r3, #28]
 8015ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ea8:	d111      	bne.n	8015ece <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015eb4:	68f8      	ldr	r0, [r7, #12]
 8015eb6:	f000 f941 	bl	801613c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	2220      	movs	r2, #32
 8015ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015eca:	2303      	movs	r3, #3
 8015ecc:	e00f      	b.n	8015eee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	69da      	ldr	r2, [r3, #28]
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	4013      	ands	r3, r2
 8015ed8:	68ba      	ldr	r2, [r7, #8]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	bf0c      	ite	eq
 8015ede:	2301      	moveq	r3, #1
 8015ee0:	2300      	movne	r3, #0
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	461a      	mov	r2, r3
 8015ee6:	79fb      	ldrb	r3, [r7, #7]
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d0a0      	beq.n	8015e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015eec:	2300      	movs	r3, #0
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3710      	adds	r7, #16
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
	...

08015ef8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015ef8:	b480      	push	{r7}
 8015efa:	b0a3      	sub	sp, #140	; 0x8c
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	60f8      	str	r0, [r7, #12]
 8015f00:	60b9      	str	r1, [r7, #8]
 8015f02:	4613      	mov	r3, r2
 8015f04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	68ba      	ldr	r2, [r7, #8]
 8015f0a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	88fa      	ldrh	r2, [r7, #6]
 8015f10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	88fa      	ldrh	r2, [r7, #6]
 8015f18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	689b      	ldr	r3, [r3, #8]
 8015f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f2a:	d10e      	bne.n	8015f4a <UART_Start_Receive_IT+0x52>
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	691b      	ldr	r3, [r3, #16]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d105      	bne.n	8015f40 <UART_Start_Receive_IT+0x48>
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015f3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f3e:	e02d      	b.n	8015f9c <UART_Start_Receive_IT+0xa4>
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	22ff      	movs	r2, #255	; 0xff
 8015f44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f48:	e028      	b.n	8015f9c <UART_Start_Receive_IT+0xa4>
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	689b      	ldr	r3, [r3, #8]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d10d      	bne.n	8015f6e <UART_Start_Receive_IT+0x76>
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	691b      	ldr	r3, [r3, #16]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d104      	bne.n	8015f64 <UART_Start_Receive_IT+0x6c>
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	22ff      	movs	r2, #255	; 0xff
 8015f5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f62:	e01b      	b.n	8015f9c <UART_Start_Receive_IT+0xa4>
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	227f      	movs	r2, #127	; 0x7f
 8015f68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f6c:	e016      	b.n	8015f9c <UART_Start_Receive_IT+0xa4>
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	689b      	ldr	r3, [r3, #8]
 8015f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015f76:	d10d      	bne.n	8015f94 <UART_Start_Receive_IT+0x9c>
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	691b      	ldr	r3, [r3, #16]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d104      	bne.n	8015f8a <UART_Start_Receive_IT+0x92>
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	227f      	movs	r2, #127	; 0x7f
 8015f84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f88:	e008      	b.n	8015f9c <UART_Start_Receive_IT+0xa4>
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	223f      	movs	r2, #63	; 0x3f
 8015f8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f92:	e003      	b.n	8015f9c <UART_Start_Receive_IT+0xa4>
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2200      	movs	r2, #0
 8015f98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	2222      	movs	r2, #34	; 0x22
 8015fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	3308      	adds	r3, #8
 8015fb2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015fb6:	e853 3f00 	ldrex	r3, [r3]
 8015fba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fbe:	f043 0301 	orr.w	r3, r3, #1
 8015fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	3308      	adds	r3, #8
 8015fcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015fd0:	673a      	str	r2, [r7, #112]	; 0x70
 8015fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fd4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015fd6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015fd8:	e841 2300 	strex	r3, r2, [r1]
 8015fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d1e3      	bne.n	8015fac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015fec:	d14f      	bne.n	801608e <UART_Start_Receive_IT+0x196>
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015ff4:	88fa      	ldrh	r2, [r7, #6]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d349      	bcc.n	801608e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	689b      	ldr	r3, [r3, #8]
 8015ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016002:	d107      	bne.n	8016014 <UART_Start_Receive_IT+0x11c>
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	691b      	ldr	r3, [r3, #16]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d103      	bne.n	8016014 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	4a47      	ldr	r2, [pc, #284]	; (801612c <UART_Start_Receive_IT+0x234>)
 8016010:	675a      	str	r2, [r3, #116]	; 0x74
 8016012:	e002      	b.n	801601a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	4a46      	ldr	r2, [pc, #280]	; (8016130 <UART_Start_Receive_IT+0x238>)
 8016018:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	691b      	ldr	r3, [r3, #16]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d01a      	beq.n	8016058 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801602a:	e853 3f00 	ldrex	r3, [r3]
 801602e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	461a      	mov	r2, r3
 8016040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016046:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016048:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801604a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801604c:	e841 2300 	strex	r3, r2, [r1]
 8016050:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016054:	2b00      	cmp	r3, #0
 8016056:	d1e4      	bne.n	8016022 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	3308      	adds	r3, #8
 801605e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016062:	e853 3f00 	ldrex	r3, [r3]
 8016066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801606a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801606e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	3308      	adds	r3, #8
 8016076:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016078:	64ba      	str	r2, [r7, #72]	; 0x48
 801607a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801607c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801607e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016080:	e841 2300 	strex	r3, r2, [r1]
 8016084:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016088:	2b00      	cmp	r3, #0
 801608a:	d1e5      	bne.n	8016058 <UART_Start_Receive_IT+0x160>
 801608c:	e046      	b.n	801611c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	689b      	ldr	r3, [r3, #8]
 8016092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016096:	d107      	bne.n	80160a8 <UART_Start_Receive_IT+0x1b0>
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	691b      	ldr	r3, [r3, #16]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d103      	bne.n	80160a8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	4a24      	ldr	r2, [pc, #144]	; (8016134 <UART_Start_Receive_IT+0x23c>)
 80160a4:	675a      	str	r2, [r3, #116]	; 0x74
 80160a6:	e002      	b.n	80160ae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	4a23      	ldr	r2, [pc, #140]	; (8016138 <UART_Start_Receive_IT+0x240>)
 80160ac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	691b      	ldr	r3, [r3, #16]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d019      	beq.n	80160ea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160be:	e853 3f00 	ldrex	r3, [r3]
 80160c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80160c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80160ca:	677b      	str	r3, [r7, #116]	; 0x74
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	461a      	mov	r2, r3
 80160d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160d4:	637b      	str	r3, [r7, #52]	; 0x34
 80160d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160dc:	e841 2300 	strex	r3, r2, [r1]
 80160e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80160e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d1e6      	bne.n	80160b6 <UART_Start_Receive_IT+0x1be>
 80160e8:	e018      	b.n	801611c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	e853 3f00 	ldrex	r3, [r3]
 80160f6:	613b      	str	r3, [r7, #16]
   return(result);
 80160f8:	693b      	ldr	r3, [r7, #16]
 80160fa:	f043 0320 	orr.w	r3, r3, #32
 80160fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	461a      	mov	r2, r3
 8016106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016108:	623b      	str	r3, [r7, #32]
 801610a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801610c:	69f9      	ldr	r1, [r7, #28]
 801610e:	6a3a      	ldr	r2, [r7, #32]
 8016110:	e841 2300 	strex	r3, r2, [r1]
 8016114:	61bb      	str	r3, [r7, #24]
   return(result);
 8016116:	69bb      	ldr	r3, [r7, #24]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d1e6      	bne.n	80160ea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801611c:	2300      	movs	r3, #0
}
 801611e:	4618      	mov	r0, r3
 8016120:	378c      	adds	r7, #140	; 0x8c
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	0801695d 	.word	0x0801695d
 8016130:	080165fd 	.word	0x080165fd
 8016134:	08016445 	.word	0x08016445
 8016138:	0801628d 	.word	0x0801628d

0801613c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801613c:	b480      	push	{r7}
 801613e:	b095      	sub	sp, #84	; 0x54
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801614c:	e853 3f00 	ldrex	r3, [r3]
 8016150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016158:	64fb      	str	r3, [r7, #76]	; 0x4c
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	461a      	mov	r2, r3
 8016160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016162:	643b      	str	r3, [r7, #64]	; 0x40
 8016164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801616a:	e841 2300 	strex	r3, r2, [r1]
 801616e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016172:	2b00      	cmp	r3, #0
 8016174:	d1e6      	bne.n	8016144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	3308      	adds	r3, #8
 801617c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801617e:	6a3b      	ldr	r3, [r7, #32]
 8016180:	e853 3f00 	ldrex	r3, [r3]
 8016184:	61fb      	str	r3, [r7, #28]
   return(result);
 8016186:	69fa      	ldr	r2, [r7, #28]
 8016188:	4b1e      	ldr	r3, [pc, #120]	; (8016204 <UART_EndRxTransfer+0xc8>)
 801618a:	4013      	ands	r3, r2
 801618c:	64bb      	str	r3, [r7, #72]	; 0x48
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	3308      	adds	r3, #8
 8016194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801619a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801619c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801619e:	e841 2300 	strex	r3, r2, [r1]
 80161a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80161a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d1e5      	bne.n	8016176 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161ae:	2b01      	cmp	r3, #1
 80161b0:	d118      	bne.n	80161e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	e853 3f00 	ldrex	r3, [r3]
 80161be:	60bb      	str	r3, [r7, #8]
   return(result);
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	f023 0310 	bic.w	r3, r3, #16
 80161c6:	647b      	str	r3, [r7, #68]	; 0x44
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	461a      	mov	r2, r3
 80161ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161d0:	61bb      	str	r3, [r7, #24]
 80161d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161d4:	6979      	ldr	r1, [r7, #20]
 80161d6:	69ba      	ldr	r2, [r7, #24]
 80161d8:	e841 2300 	strex	r3, r2, [r1]
 80161dc:	613b      	str	r3, [r7, #16]
   return(result);
 80161de:	693b      	ldr	r3, [r7, #16]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d1e6      	bne.n	80161b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2220      	movs	r2, #32
 80161e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2200      	movs	r2, #0
 80161f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2200      	movs	r2, #0
 80161f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80161f8:	bf00      	nop
 80161fa:	3754      	adds	r7, #84	; 0x54
 80161fc:	46bd      	mov	sp, r7
 80161fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016202:	4770      	bx	lr
 8016204:	effffffe 	.word	0xeffffffe

08016208 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	2200      	movs	r2, #0
 801621a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	2200      	movs	r2, #0
 8016222:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016226:	68f8      	ldr	r0, [r7, #12]
 8016228:	f7fe ff2e 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801622c:	bf00      	nop
 801622e:	3710      	adds	r7, #16
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}

08016234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b088      	sub	sp, #32
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	e853 3f00 	ldrex	r3, [r3]
 8016248:	60bb      	str	r3, [r7, #8]
   return(result);
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016250:	61fb      	str	r3, [r7, #28]
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	461a      	mov	r2, r3
 8016258:	69fb      	ldr	r3, [r7, #28]
 801625a:	61bb      	str	r3, [r7, #24]
 801625c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801625e:	6979      	ldr	r1, [r7, #20]
 8016260:	69ba      	ldr	r2, [r7, #24]
 8016262:	e841 2300 	strex	r3, r2, [r1]
 8016266:	613b      	str	r3, [r7, #16]
   return(result);
 8016268:	693b      	ldr	r3, [r7, #16]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d1e6      	bne.n	801623c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2220      	movs	r2, #32
 8016272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	2200      	movs	r2, #0
 801627a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f7fe fef9 	bl	8015074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016282:	bf00      	nop
 8016284:	3720      	adds	r7, #32
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
	...

0801628c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b09c      	sub	sp, #112	; 0x70
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801629a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80162a4:	2b22      	cmp	r3, #34	; 0x22
 80162a6:	f040 80be 	bne.w	8016426 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80162b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80162b8:	b2d9      	uxtb	r1, r3
 80162ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80162be:	b2da      	uxtb	r2, r3
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162c4:	400a      	ands	r2, r1
 80162c6:	b2d2      	uxtb	r2, r2
 80162c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162ce:	1c5a      	adds	r2, r3, #1
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162da:	b29b      	uxth	r3, r3
 80162dc:	3b01      	subs	r3, #1
 80162de:	b29a      	uxth	r2, r3
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	f040 80a1 	bne.w	8016436 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162fc:	e853 3f00 	ldrex	r3, [r3]
 8016300:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016308:	66bb      	str	r3, [r7, #104]	; 0x68
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	461a      	mov	r2, r3
 8016310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016312:	65bb      	str	r3, [r7, #88]	; 0x58
 8016314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801631a:	e841 2300 	strex	r3, r2, [r1]
 801631e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016322:	2b00      	cmp	r3, #0
 8016324:	d1e6      	bne.n	80162f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	3308      	adds	r3, #8
 801632c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016330:	e853 3f00 	ldrex	r3, [r3]
 8016334:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016338:	f023 0301 	bic.w	r3, r3, #1
 801633c:	667b      	str	r3, [r7, #100]	; 0x64
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	3308      	adds	r3, #8
 8016344:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016346:	647a      	str	r2, [r7, #68]	; 0x44
 8016348:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801634a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801634c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801634e:	e841 2300 	strex	r3, r2, [r1]
 8016352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016356:	2b00      	cmp	r3, #0
 8016358:	d1e5      	bne.n	8016326 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2220      	movs	r2, #32
 801635e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2200      	movs	r2, #0
 8016366:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2200      	movs	r2, #0
 801636c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	4a33      	ldr	r2, [pc, #204]	; (8016440 <UART_RxISR_8BIT+0x1b4>)
 8016374:	4293      	cmp	r3, r2
 8016376:	d01f      	beq.n	80163b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	685b      	ldr	r3, [r3, #4]
 801637e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016382:	2b00      	cmp	r3, #0
 8016384:	d018      	beq.n	80163b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638e:	e853 3f00 	ldrex	r3, [r3]
 8016392:	623b      	str	r3, [r7, #32]
   return(result);
 8016394:	6a3b      	ldr	r3, [r7, #32]
 8016396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801639a:	663b      	str	r3, [r7, #96]	; 0x60
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	461a      	mov	r2, r3
 80163a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80163a4:	633b      	str	r3, [r7, #48]	; 0x30
 80163a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163ac:	e841 2300 	strex	r3, r2, [r1]
 80163b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80163b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d1e6      	bne.n	8016386 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163bc:	2b01      	cmp	r3, #1
 80163be:	d12e      	bne.n	801641e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2200      	movs	r2, #0
 80163c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	e853 3f00 	ldrex	r3, [r3]
 80163d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	f023 0310 	bic.w	r3, r3, #16
 80163da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	461a      	mov	r2, r3
 80163e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163e4:	61fb      	str	r3, [r7, #28]
 80163e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163e8:	69b9      	ldr	r1, [r7, #24]
 80163ea:	69fa      	ldr	r2, [r7, #28]
 80163ec:	e841 2300 	strex	r3, r2, [r1]
 80163f0:	617b      	str	r3, [r7, #20]
   return(result);
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d1e6      	bne.n	80163c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	69db      	ldr	r3, [r3, #28]
 80163fe:	f003 0310 	and.w	r3, r3, #16
 8016402:	2b10      	cmp	r3, #16
 8016404:	d103      	bne.n	801640e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	2210      	movs	r2, #16
 801640c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016414:	4619      	mov	r1, r3
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f7fe fe40 	bl	801509c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801641c:	e00b      	b.n	8016436 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f7ec fcb4 	bl	8002d8c <HAL_UART_RxCpltCallback>
}
 8016424:	e007      	b.n	8016436 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	699a      	ldr	r2, [r3, #24]
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	f042 0208 	orr.w	r2, r2, #8
 8016434:	619a      	str	r2, [r3, #24]
}
 8016436:	bf00      	nop
 8016438:	3770      	adds	r7, #112	; 0x70
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	58000c00 	.word	0x58000c00

08016444 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b09c      	sub	sp, #112	; 0x70
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016452:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801645c:	2b22      	cmp	r3, #34	; 0x22
 801645e:	f040 80be 	bne.w	80165de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016468:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016470:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8016472:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8016476:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801647a:	4013      	ands	r3, r2
 801647c:	b29a      	uxth	r2, r3
 801647e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016480:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016486:	1c9a      	adds	r2, r3, #2
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016492:	b29b      	uxth	r3, r3
 8016494:	3b01      	subs	r3, #1
 8016496:	b29a      	uxth	r2, r3
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	f040 80a1 	bne.w	80165ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164b4:	e853 3f00 	ldrex	r3, [r3]
 80164b8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80164ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80164c0:	667b      	str	r3, [r7, #100]	; 0x64
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	461a      	mov	r2, r3
 80164c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164ca:	657b      	str	r3, [r7, #84]	; 0x54
 80164cc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80164d2:	e841 2300 	strex	r3, r2, [r1]
 80164d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80164d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d1e6      	bne.n	80164ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	3308      	adds	r3, #8
 80164e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164e8:	e853 3f00 	ldrex	r3, [r3]
 80164ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80164ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f0:	f023 0301 	bic.w	r3, r3, #1
 80164f4:	663b      	str	r3, [r7, #96]	; 0x60
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	3308      	adds	r3, #8
 80164fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80164fe:	643a      	str	r2, [r7, #64]	; 0x40
 8016500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016506:	e841 2300 	strex	r3, r2, [r1]
 801650a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801650e:	2b00      	cmp	r3, #0
 8016510:	d1e5      	bne.n	80164de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	2220      	movs	r2, #32
 8016516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2200      	movs	r2, #0
 801651e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2200      	movs	r2, #0
 8016524:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	4a33      	ldr	r2, [pc, #204]	; (80165f8 <UART_RxISR_16BIT+0x1b4>)
 801652c:	4293      	cmp	r3, r2
 801652e:	d01f      	beq.n	8016570 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801653a:	2b00      	cmp	r3, #0
 801653c:	d018      	beq.n	8016570 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016544:	6a3b      	ldr	r3, [r7, #32]
 8016546:	e853 3f00 	ldrex	r3, [r3]
 801654a:	61fb      	str	r3, [r7, #28]
   return(result);
 801654c:	69fb      	ldr	r3, [r7, #28]
 801654e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	461a      	mov	r2, r3
 801655a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801655c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801655e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016564:	e841 2300 	strex	r3, r2, [r1]
 8016568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801656c:	2b00      	cmp	r3, #0
 801656e:	d1e6      	bne.n	801653e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016574:	2b01      	cmp	r3, #1
 8016576:	d12e      	bne.n	80165d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2200      	movs	r2, #0
 801657c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	e853 3f00 	ldrex	r3, [r3]
 801658a:	60bb      	str	r3, [r7, #8]
   return(result);
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	f023 0310 	bic.w	r3, r3, #16
 8016592:	65bb      	str	r3, [r7, #88]	; 0x58
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	461a      	mov	r2, r3
 801659a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801659c:	61bb      	str	r3, [r7, #24]
 801659e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165a0:	6979      	ldr	r1, [r7, #20]
 80165a2:	69ba      	ldr	r2, [r7, #24]
 80165a4:	e841 2300 	strex	r3, r2, [r1]
 80165a8:	613b      	str	r3, [r7, #16]
   return(result);
 80165aa:	693b      	ldr	r3, [r7, #16]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d1e6      	bne.n	801657e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	69db      	ldr	r3, [r3, #28]
 80165b6:	f003 0310 	and.w	r3, r3, #16
 80165ba:	2b10      	cmp	r3, #16
 80165bc:	d103      	bne.n	80165c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2210      	movs	r2, #16
 80165c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80165cc:	4619      	mov	r1, r3
 80165ce:	6878      	ldr	r0, [r7, #4]
 80165d0:	f7fe fd64 	bl	801509c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80165d4:	e00b      	b.n	80165ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f7ec fbd8 	bl	8002d8c <HAL_UART_RxCpltCallback>
}
 80165dc:	e007      	b.n	80165ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	699a      	ldr	r2, [r3, #24]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	f042 0208 	orr.w	r2, r2, #8
 80165ec:	619a      	str	r2, [r3, #24]
}
 80165ee:	bf00      	nop
 80165f0:	3770      	adds	r7, #112	; 0x70
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	58000c00 	.word	0x58000c00

080165fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b0ac      	sub	sp, #176	; 0xb0
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801660a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	69db      	ldr	r3, [r3, #28]
 8016614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	689b      	ldr	r3, [r3, #8]
 8016628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016632:	2b22      	cmp	r3, #34	; 0x22
 8016634:	f040 8180 	bne.w	8016938 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801663e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016642:	e123      	b.n	801688c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801664a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801664e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8016652:	b2d9      	uxtb	r1, r3
 8016654:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016658:	b2da      	uxtb	r2, r3
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801665e:	400a      	ands	r2, r1
 8016660:	b2d2      	uxtb	r2, r2
 8016662:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016668:	1c5a      	adds	r2, r3, #1
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016674:	b29b      	uxth	r3, r3
 8016676:	3b01      	subs	r3, #1
 8016678:	b29a      	uxth	r2, r3
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	69db      	ldr	r3, [r3, #28]
 8016686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801668a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801668e:	f003 0307 	and.w	r3, r3, #7
 8016692:	2b00      	cmp	r3, #0
 8016694:	d053      	beq.n	801673e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801669a:	f003 0301 	and.w	r3, r3, #1
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d011      	beq.n	80166c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80166a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80166a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d00b      	beq.n	80166c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2201      	movs	r2, #1
 80166b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166bc:	f043 0201 	orr.w	r2, r3, #1
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80166c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166ca:	f003 0302 	and.w	r3, r3, #2
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d011      	beq.n	80166f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80166d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166d6:	f003 0301 	and.w	r3, r3, #1
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d00b      	beq.n	80166f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	2202      	movs	r2, #2
 80166e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166ec:	f043 0204 	orr.w	r2, r3, #4
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80166f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166fa:	f003 0304 	and.w	r3, r3, #4
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d011      	beq.n	8016726 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016706:	f003 0301 	and.w	r3, r3, #1
 801670a:	2b00      	cmp	r3, #0
 801670c:	d00b      	beq.n	8016726 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2204      	movs	r2, #4
 8016714:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801671c:	f043 0202 	orr.w	r2, r3, #2
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801672c:	2b00      	cmp	r3, #0
 801672e:	d006      	beq.n	801673e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f7fe fca9 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2200      	movs	r2, #0
 801673a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016744:	b29b      	uxth	r3, r3
 8016746:	2b00      	cmp	r3, #0
 8016748:	f040 80a0 	bne.w	801688c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016754:	e853 3f00 	ldrex	r3, [r3]
 8016758:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801675a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801675c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	461a      	mov	r2, r3
 801676a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801676e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016770:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016772:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016774:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016776:	e841 2300 	strex	r3, r2, [r1]
 801677a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801677c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801677e:	2b00      	cmp	r3, #0
 8016780:	d1e4      	bne.n	801674c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	3308      	adds	r3, #8
 8016788:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801678a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801678c:	e853 3f00 	ldrex	r3, [r3]
 8016790:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016792:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016794:	4b6e      	ldr	r3, [pc, #440]	; (8016950 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8016796:	4013      	ands	r3, r2
 8016798:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	3308      	adds	r3, #8
 80167a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80167a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80167a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80167ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80167ae:	e841 2300 	strex	r3, r2, [r1]
 80167b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80167b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d1e3      	bne.n	8016782 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	2220      	movs	r2, #32
 80167be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	2200      	movs	r2, #0
 80167c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2200      	movs	r2, #0
 80167cc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	4a60      	ldr	r2, [pc, #384]	; (8016954 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80167d4:	4293      	cmp	r3, r2
 80167d6:	d021      	beq.n	801681c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d01a      	beq.n	801681c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167ee:	e853 3f00 	ldrex	r3, [r3]
 80167f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80167f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80167fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	461a      	mov	r2, r3
 8016804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016808:	657b      	str	r3, [r7, #84]	; 0x54
 801680a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801680c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801680e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016810:	e841 2300 	strex	r3, r2, [r1]
 8016814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016818:	2b00      	cmp	r3, #0
 801681a:	d1e4      	bne.n	80167e6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016820:	2b01      	cmp	r3, #1
 8016822:	d130      	bne.n	8016886 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2200      	movs	r2, #0
 8016828:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016832:	e853 3f00 	ldrex	r3, [r3]
 8016836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801683a:	f023 0310 	bic.w	r3, r3, #16
 801683e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	461a      	mov	r2, r3
 8016848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801684c:	643b      	str	r3, [r7, #64]	; 0x40
 801684e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016854:	e841 2300 	strex	r3, r2, [r1]
 8016858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801685c:	2b00      	cmp	r3, #0
 801685e:	d1e4      	bne.n	801682a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	69db      	ldr	r3, [r3, #28]
 8016866:	f003 0310 	and.w	r3, r3, #16
 801686a:	2b10      	cmp	r3, #16
 801686c:	d103      	bne.n	8016876 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	2210      	movs	r2, #16
 8016874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801687c:	4619      	mov	r1, r3
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f7fe fc0c 	bl	801509c <HAL_UARTEx_RxEventCallback>
 8016884:	e002      	b.n	801688c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f7ec fa80 	bl	8002d8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801688c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016890:	2b00      	cmp	r3, #0
 8016892:	d006      	beq.n	80168a2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8016894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016898:	f003 0320 	and.w	r3, r3, #32
 801689c:	2b00      	cmp	r3, #0
 801689e:	f47f aed1 	bne.w	8016644 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80168a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80168ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d049      	beq.n	8016948 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80168ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80168be:	429a      	cmp	r2, r3
 80168c0:	d242      	bcs.n	8016948 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	3308      	adds	r3, #8
 80168c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168ca:	6a3b      	ldr	r3, [r7, #32]
 80168cc:	e853 3f00 	ldrex	r3, [r3]
 80168d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80168d2:	69fb      	ldr	r3, [r7, #28]
 80168d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80168d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	3308      	adds	r3, #8
 80168e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80168e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80168e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168ee:	e841 2300 	strex	r3, r2, [r1]
 80168f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80168f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d1e3      	bne.n	80168c2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	4a16      	ldr	r2, [pc, #88]	; (8016958 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80168fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	e853 3f00 	ldrex	r3, [r3]
 801690c:	60bb      	str	r3, [r7, #8]
   return(result);
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	f043 0320 	orr.w	r3, r3, #32
 8016914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	461a      	mov	r2, r3
 801691e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016922:	61bb      	str	r3, [r7, #24]
 8016924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016926:	6979      	ldr	r1, [r7, #20]
 8016928:	69ba      	ldr	r2, [r7, #24]
 801692a:	e841 2300 	strex	r3, r2, [r1]
 801692e:	613b      	str	r3, [r7, #16]
   return(result);
 8016930:	693b      	ldr	r3, [r7, #16]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d1e4      	bne.n	8016900 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016936:	e007      	b.n	8016948 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	699a      	ldr	r2, [r3, #24]
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	f042 0208 	orr.w	r2, r2, #8
 8016946:	619a      	str	r2, [r3, #24]
}
 8016948:	bf00      	nop
 801694a:	37b0      	adds	r7, #176	; 0xb0
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}
 8016950:	effffffe 	.word	0xeffffffe
 8016954:	58000c00 	.word	0x58000c00
 8016958:	0801628d 	.word	0x0801628d

0801695c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b0ae      	sub	sp, #184	; 0xb8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801696a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	69db      	ldr	r3, [r3, #28]
 8016974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	689b      	ldr	r3, [r3, #8]
 8016988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016992:	2b22      	cmp	r3, #34	; 0x22
 8016994:	f040 8184 	bne.w	8016ca0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801699e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80169a2:	e127      	b.n	8016bf4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80169b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80169ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80169be:	4013      	ands	r3, r2
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80169c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169cc:	1c9a      	adds	r2, r3, #2
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80169d8:	b29b      	uxth	r3, r3
 80169da:	3b01      	subs	r3, #1
 80169dc:	b29a      	uxth	r2, r3
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	69db      	ldr	r3, [r3, #28]
 80169ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80169ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80169f2:	f003 0307 	and.w	r3, r3, #7
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d053      	beq.n	8016aa2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80169fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80169fe:	f003 0301 	and.w	r3, r3, #1
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d011      	beq.n	8016a2a <UART_RxISR_16BIT_FIFOEN+0xce>
 8016a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d00b      	beq.n	8016a2a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2201      	movs	r2, #1
 8016a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a20:	f043 0201 	orr.w	r2, r3, #1
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a2e:	f003 0302 	and.w	r3, r3, #2
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d011      	beq.n	8016a5a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a3a:	f003 0301 	and.w	r3, r3, #1
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d00b      	beq.n	8016a5a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	2202      	movs	r2, #2
 8016a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a50:	f043 0204 	orr.w	r2, r3, #4
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a5e:	f003 0304 	and.w	r3, r3, #4
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d011      	beq.n	8016a8a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016a66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a6a:	f003 0301 	and.w	r3, r3, #1
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d00b      	beq.n	8016a8a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	2204      	movs	r2, #4
 8016a78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a80:	f043 0202 	orr.w	r2, r3, #2
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d006      	beq.n	8016aa2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f7fe faf7 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	f040 80a2 	bne.w	8016bf4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016ab8:	e853 3f00 	ldrex	r3, [r3]
 8016abc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	461a      	mov	r2, r3
 8016ace:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016ad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016ad6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ad8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016ade:	e841 2300 	strex	r3, r2, [r1]
 8016ae2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d1e2      	bne.n	8016ab0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	3308      	adds	r3, #8
 8016af0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016af4:	e853 3f00 	ldrex	r3, [r3]
 8016af8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016afa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016afc:	4b6e      	ldr	r3, [pc, #440]	; (8016cb8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016afe:	4013      	ands	r3, r2
 8016b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	3308      	adds	r3, #8
 8016b0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016b0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016b10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016b16:	e841 2300 	strex	r3, r2, [r1]
 8016b1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d1e3      	bne.n	8016aea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2220      	movs	r2, #32
 8016b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2200      	movs	r2, #0
 8016b34:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	4a60      	ldr	r2, [pc, #384]	; (8016cbc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016b3c:	4293      	cmp	r3, r2
 8016b3e:	d021      	beq.n	8016b84 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	685b      	ldr	r3, [r3, #4]
 8016b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d01a      	beq.n	8016b84 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b56:	e853 3f00 	ldrex	r3, [r3]
 8016b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8016b72:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b78:	e841 2300 	strex	r3, r2, [r1]
 8016b7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d1e4      	bne.n	8016b4e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d130      	bne.n	8016bee <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2200      	movs	r2, #0
 8016b90:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b9a:	e853 3f00 	ldrex	r3, [r3]
 8016b9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ba2:	f023 0310 	bic.w	r3, r3, #16
 8016ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	461a      	mov	r2, r3
 8016bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8016bb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bbc:	e841 2300 	strex	r3, r2, [r1]
 8016bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d1e4      	bne.n	8016b92 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	69db      	ldr	r3, [r3, #28]
 8016bce:	f003 0310 	and.w	r3, r3, #16
 8016bd2:	2b10      	cmp	r3, #16
 8016bd4:	d103      	bne.n	8016bde <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	2210      	movs	r2, #16
 8016bdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016be4:	4619      	mov	r1, r3
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f7fe fa58 	bl	801509c <HAL_UARTEx_RxEventCallback>
 8016bec:	e002      	b.n	8016bf4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f7ec f8cc 	bl	8002d8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016bf4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d006      	beq.n	8016c0a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016c00:	f003 0320 	and.w	r3, r3, #32
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	f47f aecd 	bne.w	80169a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016c10:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016c14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d049      	beq.n	8016cb0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c22:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d242      	bcs.n	8016cb0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	3308      	adds	r3, #8
 8016c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c34:	e853 3f00 	ldrex	r3, [r3]
 8016c38:	623b      	str	r3, [r7, #32]
   return(result);
 8016c3a:	6a3b      	ldr	r3, [r7, #32]
 8016c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	3308      	adds	r3, #8
 8016c4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8016c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c56:	e841 2300 	strex	r3, r2, [r1]
 8016c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d1e3      	bne.n	8016c2a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	4a16      	ldr	r2, [pc, #88]	; (8016cc0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016c66:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c6e:	693b      	ldr	r3, [r7, #16]
 8016c70:	e853 3f00 	ldrex	r3, [r3]
 8016c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	f043 0320 	orr.w	r3, r3, #32
 8016c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	461a      	mov	r2, r3
 8016c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016c8a:	61fb      	str	r3, [r7, #28]
 8016c8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c8e:	69b9      	ldr	r1, [r7, #24]
 8016c90:	69fa      	ldr	r2, [r7, #28]
 8016c92:	e841 2300 	strex	r3, r2, [r1]
 8016c96:	617b      	str	r3, [r7, #20]
   return(result);
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d1e4      	bne.n	8016c68 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016c9e:	e007      	b.n	8016cb0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	699a      	ldr	r2, [r3, #24]
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	f042 0208 	orr.w	r2, r2, #8
 8016cae:	619a      	str	r2, [r3, #24]
}
 8016cb0:	bf00      	nop
 8016cb2:	37b8      	adds	r7, #184	; 0xb8
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}
 8016cb8:	effffffe 	.word	0xeffffffe
 8016cbc:	58000c00 	.word	0x58000c00
 8016cc0:	08016445 	.word	0x08016445

08016cc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b083      	sub	sp, #12
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016ccc:	bf00      	nop
 8016cce:	370c      	adds	r7, #12
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd6:	4770      	bx	lr

08016cd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b083      	sub	sp, #12
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016ce0:	bf00      	nop
 8016ce2:	370c      	adds	r7, #12
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cea:	4770      	bx	lr

08016cec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016cec:	b480      	push	{r7}
 8016cee:	b083      	sub	sp, #12
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016cf4:	bf00      	nop
 8016cf6:	370c      	adds	r7, #12
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr

08016d00 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016d00:	b480      	push	{r7}
 8016d02:	b089      	sub	sp, #36	; 0x24
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d0e:	2b01      	cmp	r3, #1
 8016d10:	d101      	bne.n	8016d16 <HAL_UARTEx_EnableStopMode+0x16>
 8016d12:	2302      	movs	r3, #2
 8016d14:	e021      	b.n	8016d5a <HAL_UARTEx_EnableStopMode+0x5a>
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2201      	movs	r2, #1
 8016d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	e853 3f00 	ldrex	r3, [r3]
 8016d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	f043 0302 	orr.w	r3, r3, #2
 8016d32:	61fb      	str	r3, [r7, #28]
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	461a      	mov	r2, r3
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	61bb      	str	r3, [r7, #24]
 8016d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d40:	6979      	ldr	r1, [r7, #20]
 8016d42:	69ba      	ldr	r2, [r7, #24]
 8016d44:	e841 2300 	strex	r3, r2, [r1]
 8016d48:	613b      	str	r3, [r7, #16]
   return(result);
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d1e6      	bne.n	8016d1e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	2200      	movs	r2, #0
 8016d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016d58:	2300      	movs	r3, #0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3724      	adds	r7, #36	; 0x24
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d64:	4770      	bx	lr

08016d66 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016d66:	b580      	push	{r7, lr}
 8016d68:	b084      	sub	sp, #16
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d101      	bne.n	8016d7c <HAL_UARTEx_EnableFifoMode+0x16>
 8016d78:	2302      	movs	r3, #2
 8016d7a:	e02b      	b.n	8016dd4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2201      	movs	r2, #1
 8016d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2224      	movs	r2, #36	; 0x24
 8016d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	681a      	ldr	r2, [r3, #0]
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	f022 0201 	bic.w	r2, r2, #1
 8016da2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016db2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	68fa      	ldr	r2, [r7, #12]
 8016dba:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f000 f8c3 	bl	8016f48 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	2220      	movs	r2, #32
 8016dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	2200      	movs	r2, #0
 8016dce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016dd2:	2300      	movs	r3, #0
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3710      	adds	r7, #16
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b085      	sub	sp, #20
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016dea:	2b01      	cmp	r3, #1
 8016dec:	d101      	bne.n	8016df2 <HAL_UARTEx_DisableFifoMode+0x16>
 8016dee:	2302      	movs	r3, #2
 8016df0:	e027      	b.n	8016e42 <HAL_UARTEx_DisableFifoMode+0x66>
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2201      	movs	r2, #1
 8016df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2224      	movs	r2, #36	; 0x24
 8016dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	681a      	ldr	r2, [r3, #0]
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	f022 0201 	bic.w	r2, r2, #1
 8016e18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016e20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2200      	movs	r2, #0
 8016e26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	68fa      	ldr	r2, [r7, #12]
 8016e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	2220      	movs	r2, #32
 8016e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016e40:	2300      	movs	r3, #0
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3714      	adds	r7, #20
 8016e46:	46bd      	mov	sp, r7
 8016e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4c:	4770      	bx	lr

08016e4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016e4e:	b580      	push	{r7, lr}
 8016e50:	b084      	sub	sp, #16
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	6078      	str	r0, [r7, #4]
 8016e56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016e5e:	2b01      	cmp	r3, #1
 8016e60:	d101      	bne.n	8016e66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016e62:	2302      	movs	r3, #2
 8016e64:	e02d      	b.n	8016ec2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	2201      	movs	r2, #1
 8016e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2224      	movs	r2, #36	; 0x24
 8016e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	681a      	ldr	r2, [r3, #0]
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f022 0201 	bic.w	r2, r2, #1
 8016e8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	689b      	ldr	r3, [r3, #8]
 8016e94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	683a      	ldr	r2, [r7, #0]
 8016e9e:	430a      	orrs	r2, r1
 8016ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f000 f850 	bl	8016f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	68fa      	ldr	r2, [r7, #12]
 8016eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2220      	movs	r2, #32
 8016eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ec0:	2300      	movs	r3, #0
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3710      	adds	r7, #16
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b084      	sub	sp, #16
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	6078      	str	r0, [r7, #4]
 8016ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016eda:	2b01      	cmp	r3, #1
 8016edc:	d101      	bne.n	8016ee2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016ede:	2302      	movs	r3, #2
 8016ee0:	e02d      	b.n	8016f3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2201      	movs	r2, #1
 8016ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2224      	movs	r2, #36	; 0x24
 8016eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	681a      	ldr	r2, [r3, #0]
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	f022 0201 	bic.w	r2, r2, #1
 8016f08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	689b      	ldr	r3, [r3, #8]
 8016f10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	683a      	ldr	r2, [r7, #0]
 8016f1a:	430a      	orrs	r2, r1
 8016f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f000 f812 	bl	8016f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	68fa      	ldr	r2, [r7, #12]
 8016f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2220      	movs	r2, #32
 8016f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2200      	movs	r2, #0
 8016f38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016f3c:	2300      	movs	r3, #0
}
 8016f3e:	4618      	mov	r0, r3
 8016f40:	3710      	adds	r7, #16
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bd80      	pop	{r7, pc}
	...

08016f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016f48:	b480      	push	{r7}
 8016f4a:	b085      	sub	sp, #20
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d108      	bne.n	8016f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2201      	movs	r2, #1
 8016f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2201      	movs	r2, #1
 8016f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016f68:	e031      	b.n	8016fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016f6a:	2310      	movs	r3, #16
 8016f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016f6e:	2310      	movs	r3, #16
 8016f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	689b      	ldr	r3, [r3, #8]
 8016f78:	0e5b      	lsrs	r3, r3, #25
 8016f7a:	b2db      	uxtb	r3, r3
 8016f7c:	f003 0307 	and.w	r3, r3, #7
 8016f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	689b      	ldr	r3, [r3, #8]
 8016f88:	0f5b      	lsrs	r3, r3, #29
 8016f8a:	b2db      	uxtb	r3, r3
 8016f8c:	f003 0307 	and.w	r3, r3, #7
 8016f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016f92:	7bbb      	ldrb	r3, [r7, #14]
 8016f94:	7b3a      	ldrb	r2, [r7, #12]
 8016f96:	4911      	ldr	r1, [pc, #68]	; (8016fdc <UARTEx_SetNbDataToProcess+0x94>)
 8016f98:	5c8a      	ldrb	r2, [r1, r2]
 8016f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016f9e:	7b3a      	ldrb	r2, [r7, #12]
 8016fa0:	490f      	ldr	r1, [pc, #60]	; (8016fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8016fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fa8:	b29a      	uxth	r2, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016fb0:	7bfb      	ldrb	r3, [r7, #15]
 8016fb2:	7b7a      	ldrb	r2, [r7, #13]
 8016fb4:	4909      	ldr	r1, [pc, #36]	; (8016fdc <UARTEx_SetNbDataToProcess+0x94>)
 8016fb6:	5c8a      	ldrb	r2, [r1, r2]
 8016fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016fbc:	7b7a      	ldrb	r2, [r7, #13]
 8016fbe:	4908      	ldr	r1, [pc, #32]	; (8016fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8016fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016fce:	bf00      	nop
 8016fd0:	3714      	adds	r7, #20
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd8:	4770      	bx	lr
 8016fda:	bf00      	nop
 8016fdc:	0801b574 	.word	0x0801b574
 8016fe0:	0801b57c 	.word	0x0801b57c

08016fe4 <__NVIC_SetPriority>:
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b083      	sub	sp, #12
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	4603      	mov	r3, r0
 8016fec:	6039      	str	r1, [r7, #0]
 8016fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	db0a      	blt.n	801700e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	b2da      	uxtb	r2, r3
 8016ffc:	490c      	ldr	r1, [pc, #48]	; (8017030 <__NVIC_SetPriority+0x4c>)
 8016ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017002:	0112      	lsls	r2, r2, #4
 8017004:	b2d2      	uxtb	r2, r2
 8017006:	440b      	add	r3, r1
 8017008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801700c:	e00a      	b.n	8017024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	b2da      	uxtb	r2, r3
 8017012:	4908      	ldr	r1, [pc, #32]	; (8017034 <__NVIC_SetPriority+0x50>)
 8017014:	88fb      	ldrh	r3, [r7, #6]
 8017016:	f003 030f 	and.w	r3, r3, #15
 801701a:	3b04      	subs	r3, #4
 801701c:	0112      	lsls	r2, r2, #4
 801701e:	b2d2      	uxtb	r2, r2
 8017020:	440b      	add	r3, r1
 8017022:	761a      	strb	r2, [r3, #24]
}
 8017024:	bf00      	nop
 8017026:	370c      	adds	r7, #12
 8017028:	46bd      	mov	sp, r7
 801702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702e:	4770      	bx	lr
 8017030:	e000e100 	.word	0xe000e100
 8017034:	e000ed00 	.word	0xe000ed00

08017038 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017038:	b580      	push	{r7, lr}
 801703a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801703c:	4b05      	ldr	r3, [pc, #20]	; (8017054 <SysTick_Handler+0x1c>)
 801703e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017040:	f002 faa0 	bl	8019584 <xTaskGetSchedulerState>
 8017044:	4603      	mov	r3, r0
 8017046:	2b01      	cmp	r3, #1
 8017048:	d001      	beq.n	801704e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801704a:	f003 f8bd 	bl	801a1c8 <xPortSysTickHandler>
  }
}
 801704e:	bf00      	nop
 8017050:	bd80      	pop	{r7, pc}
 8017052:	bf00      	nop
 8017054:	e000e010 	.word	0xe000e010

08017058 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017058:	b580      	push	{r7, lr}
 801705a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801705c:	2100      	movs	r1, #0
 801705e:	f06f 0004 	mvn.w	r0, #4
 8017062:	f7ff ffbf 	bl	8016fe4 <__NVIC_SetPriority>
#endif
}
 8017066:	bf00      	nop
 8017068:	bd80      	pop	{r7, pc}
	...

0801706c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801706c:	b480      	push	{r7}
 801706e:	b083      	sub	sp, #12
 8017070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017072:	f3ef 8305 	mrs	r3, IPSR
 8017076:	603b      	str	r3, [r7, #0]
  return(result);
 8017078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801707a:	2b00      	cmp	r3, #0
 801707c:	d003      	beq.n	8017086 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801707e:	f06f 0305 	mvn.w	r3, #5
 8017082:	607b      	str	r3, [r7, #4]
 8017084:	e00c      	b.n	80170a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017086:	4b0a      	ldr	r3, [pc, #40]	; (80170b0 <osKernelInitialize+0x44>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d105      	bne.n	801709a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801708e:	4b08      	ldr	r3, [pc, #32]	; (80170b0 <osKernelInitialize+0x44>)
 8017090:	2201      	movs	r2, #1
 8017092:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017094:	2300      	movs	r3, #0
 8017096:	607b      	str	r3, [r7, #4]
 8017098:	e002      	b.n	80170a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801709a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801709e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80170a0:	687b      	ldr	r3, [r7, #4]
}
 80170a2:	4618      	mov	r0, r3
 80170a4:	370c      	adds	r7, #12
 80170a6:	46bd      	mov	sp, r7
 80170a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ac:	4770      	bx	lr
 80170ae:	bf00      	nop
 80170b0:	2400201c 	.word	0x2400201c

080170b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170ba:	f3ef 8305 	mrs	r3, IPSR
 80170be:	603b      	str	r3, [r7, #0]
  return(result);
 80170c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d003      	beq.n	80170ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80170c6:	f06f 0305 	mvn.w	r3, #5
 80170ca:	607b      	str	r3, [r7, #4]
 80170cc:	e010      	b.n	80170f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80170ce:	4b0b      	ldr	r3, [pc, #44]	; (80170fc <osKernelStart+0x48>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2b01      	cmp	r3, #1
 80170d4:	d109      	bne.n	80170ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80170d6:	f7ff ffbf 	bl	8017058 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80170da:	4b08      	ldr	r3, [pc, #32]	; (80170fc <osKernelStart+0x48>)
 80170dc:	2202      	movs	r2, #2
 80170de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80170e0:	f001 fd54 	bl	8018b8c <vTaskStartScheduler>
      stat = osOK;
 80170e4:	2300      	movs	r3, #0
 80170e6:	607b      	str	r3, [r7, #4]
 80170e8:	e002      	b.n	80170f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80170ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80170f0:	687b      	ldr	r3, [r7, #4]
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	3708      	adds	r7, #8
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
 80170fa:	bf00      	nop
 80170fc:	2400201c 	.word	0x2400201c

08017100 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017100:	b580      	push	{r7, lr}
 8017102:	b08e      	sub	sp, #56	; 0x38
 8017104:	af04      	add	r7, sp, #16
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801710c:	2300      	movs	r3, #0
 801710e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017110:	f3ef 8305 	mrs	r3, IPSR
 8017114:	617b      	str	r3, [r7, #20]
  return(result);
 8017116:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017118:	2b00      	cmp	r3, #0
 801711a:	d17e      	bne.n	801721a <osThreadNew+0x11a>
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d07b      	beq.n	801721a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017122:	2380      	movs	r3, #128	; 0x80
 8017124:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017126:	2318      	movs	r3, #24
 8017128:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801712a:	2300      	movs	r3, #0
 801712c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801712e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d045      	beq.n	80171c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d002      	beq.n	8017148 <osThreadNew+0x48>
        name = attr->name;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	699b      	ldr	r3, [r3, #24]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d002      	beq.n	8017156 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	699b      	ldr	r3, [r3, #24]
 8017154:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017156:	69fb      	ldr	r3, [r7, #28]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d008      	beq.n	801716e <osThreadNew+0x6e>
 801715c:	69fb      	ldr	r3, [r7, #28]
 801715e:	2b38      	cmp	r3, #56	; 0x38
 8017160:	d805      	bhi.n	801716e <osThreadNew+0x6e>
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	f003 0301 	and.w	r3, r3, #1
 801716a:	2b00      	cmp	r3, #0
 801716c:	d001      	beq.n	8017172 <osThreadNew+0x72>
        return (NULL);
 801716e:	2300      	movs	r3, #0
 8017170:	e054      	b.n	801721c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	695b      	ldr	r3, [r3, #20]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d003      	beq.n	8017182 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	695b      	ldr	r3, [r3, #20]
 801717e:	089b      	lsrs	r3, r3, #2
 8017180:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	689b      	ldr	r3, [r3, #8]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d00e      	beq.n	80171a8 <osThreadNew+0xa8>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	68db      	ldr	r3, [r3, #12]
 801718e:	2b5b      	cmp	r3, #91	; 0x5b
 8017190:	d90a      	bls.n	80171a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017196:	2b00      	cmp	r3, #0
 8017198:	d006      	beq.n	80171a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	695b      	ldr	r3, [r3, #20]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d002      	beq.n	80171a8 <osThreadNew+0xa8>
        mem = 1;
 80171a2:	2301      	movs	r3, #1
 80171a4:	61bb      	str	r3, [r7, #24]
 80171a6:	e010      	b.n	80171ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	689b      	ldr	r3, [r3, #8]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d10c      	bne.n	80171ca <osThreadNew+0xca>
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	68db      	ldr	r3, [r3, #12]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d108      	bne.n	80171ca <osThreadNew+0xca>
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	691b      	ldr	r3, [r3, #16]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d104      	bne.n	80171ca <osThreadNew+0xca>
          mem = 0;
 80171c0:	2300      	movs	r3, #0
 80171c2:	61bb      	str	r3, [r7, #24]
 80171c4:	e001      	b.n	80171ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80171c6:	2300      	movs	r3, #0
 80171c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80171ca:	69bb      	ldr	r3, [r7, #24]
 80171cc:	2b01      	cmp	r3, #1
 80171ce:	d110      	bne.n	80171f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171d8:	9202      	str	r2, [sp, #8]
 80171da:	9301      	str	r3, [sp, #4]
 80171dc:	69fb      	ldr	r3, [r7, #28]
 80171de:	9300      	str	r3, [sp, #0]
 80171e0:	68bb      	ldr	r3, [r7, #8]
 80171e2:	6a3a      	ldr	r2, [r7, #32]
 80171e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80171e6:	68f8      	ldr	r0, [r7, #12]
 80171e8:	f001 f9f4 	bl	80185d4 <xTaskCreateStatic>
 80171ec:	4603      	mov	r3, r0
 80171ee:	613b      	str	r3, [r7, #16]
 80171f0:	e013      	b.n	801721a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80171f2:	69bb      	ldr	r3, [r7, #24]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d110      	bne.n	801721a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80171f8:	6a3b      	ldr	r3, [r7, #32]
 80171fa:	b29a      	uxth	r2, r3
 80171fc:	f107 0310 	add.w	r3, r7, #16
 8017200:	9301      	str	r3, [sp, #4]
 8017202:	69fb      	ldr	r3, [r7, #28]
 8017204:	9300      	str	r3, [sp, #0]
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801720a:	68f8      	ldr	r0, [r7, #12]
 801720c:	f001 fa3f 	bl	801868e <xTaskCreate>
 8017210:	4603      	mov	r3, r0
 8017212:	2b01      	cmp	r3, #1
 8017214:	d001      	beq.n	801721a <osThreadNew+0x11a>
            hTask = NULL;
 8017216:	2300      	movs	r3, #0
 8017218:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801721a:	693b      	ldr	r3, [r7, #16]
}
 801721c:	4618      	mov	r0, r3
 801721e:	3728      	adds	r7, #40	; 0x28
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8017224:	b480      	push	{r7}
 8017226:	b083      	sub	sp, #12
 8017228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801722a:	f3ef 8305 	mrs	r3, IPSR
 801722e:	603b      	str	r3, [r7, #0]
  return(result);
 8017230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017232:	2b00      	cmp	r3, #0
 8017234:	d003      	beq.n	801723e <osThreadYield+0x1a>
    stat = osErrorISR;
 8017236:	f06f 0305 	mvn.w	r3, #5
 801723a:	607b      	str	r3, [r7, #4]
 801723c:	e009      	b.n	8017252 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801723e:	2300      	movs	r3, #0
 8017240:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8017242:	4b07      	ldr	r3, [pc, #28]	; (8017260 <osThreadYield+0x3c>)
 8017244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	f3bf 8f4f 	dsb	sy
 801724e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8017252:	687b      	ldr	r3, [r7, #4]
}
 8017254:	4618      	mov	r0, r3
 8017256:	370c      	adds	r7, #12
 8017258:	46bd      	mov	sp, r7
 801725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725e:	4770      	bx	lr
 8017260:	e000ed04 	.word	0xe000ed04

08017264 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8017264:	b580      	push	{r7, lr}
 8017266:	b086      	sub	sp, #24
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017270:	f3ef 8305 	mrs	r3, IPSR
 8017274:	60fb      	str	r3, [r7, #12]
  return(result);
 8017276:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017278:	2b00      	cmp	r3, #0
 801727a:	d003      	beq.n	8017284 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801727c:	f06f 0305 	mvn.w	r3, #5
 8017280:	617b      	str	r3, [r7, #20]
 8017282:	e00b      	b.n	801729c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d103      	bne.n	8017292 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801728a:	f06f 0303 	mvn.w	r3, #3
 801728e:	617b      	str	r3, [r7, #20]
 8017290:	e004      	b.n	801729c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8017292:	2300      	movs	r3, #0
 8017294:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8017296:	6938      	ldr	r0, [r7, #16]
 8017298:	f001 fb72 	bl	8018980 <vTaskSuspend>
  }

  return (stat);
 801729c:	697b      	ldr	r3, [r7, #20]
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3718      	adds	r7, #24
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b086      	sub	sp, #24
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172b2:	f3ef 8305 	mrs	r3, IPSR
 80172b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80172b8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d003      	beq.n	80172c6 <osThreadResume+0x20>
    stat = osErrorISR;
 80172be:	f06f 0305 	mvn.w	r3, #5
 80172c2:	617b      	str	r3, [r7, #20]
 80172c4:	e00b      	b.n	80172de <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80172c6:	693b      	ldr	r3, [r7, #16]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d103      	bne.n	80172d4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80172cc:	f06f 0303 	mvn.w	r3, #3
 80172d0:	617b      	str	r3, [r7, #20]
 80172d2:	e004      	b.n	80172de <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80172d4:	2300      	movs	r3, #0
 80172d6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80172d8:	6938      	ldr	r0, [r7, #16]
 80172da:	f001 fbf9 	bl	8018ad0 <vTaskResume>
  }

  return (stat);
 80172de:	697b      	ldr	r3, [r7, #20]
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3718      	adds	r7, #24
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}

080172e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b084      	sub	sp, #16
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172f0:	f3ef 8305 	mrs	r3, IPSR
 80172f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80172f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d003      	beq.n	8017304 <osDelay+0x1c>
    stat = osErrorISR;
 80172fc:	f06f 0305 	mvn.w	r3, #5
 8017300:	60fb      	str	r3, [r7, #12]
 8017302:	e007      	b.n	8017314 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017304:	2300      	movs	r3, #0
 8017306:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d002      	beq.n	8017314 <osDelay+0x2c>
      vTaskDelay(ticks);
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f001 fb02 	bl	8018918 <vTaskDelay>
    }
  }

  return (stat);
 8017314:	68fb      	ldr	r3, [r7, #12]
}
 8017316:	4618      	mov	r0, r3
 8017318:	3710      	adds	r7, #16
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}

0801731e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801731e:	b580      	push	{r7, lr}
 8017320:	b086      	sub	sp, #24
 8017322:	af00      	add	r7, sp, #0
 8017324:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8017326:	2300      	movs	r3, #0
 8017328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801732a:	f3ef 8305 	mrs	r3, IPSR
 801732e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017330:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8017332:	2b00      	cmp	r3, #0
 8017334:	d12d      	bne.n	8017392 <osEventFlagsNew+0x74>
    mem = -1;
 8017336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801733a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d015      	beq.n	801736e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	689b      	ldr	r3, [r3, #8]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d006      	beq.n	8017358 <osEventFlagsNew+0x3a>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	68db      	ldr	r3, [r3, #12]
 801734e:	2b1f      	cmp	r3, #31
 8017350:	d902      	bls.n	8017358 <osEventFlagsNew+0x3a>
        mem = 1;
 8017352:	2301      	movs	r3, #1
 8017354:	613b      	str	r3, [r7, #16]
 8017356:	e00c      	b.n	8017372 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	689b      	ldr	r3, [r3, #8]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d108      	bne.n	8017372 <osEventFlagsNew+0x54>
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	68db      	ldr	r3, [r3, #12]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d104      	bne.n	8017372 <osEventFlagsNew+0x54>
          mem = 0;
 8017368:	2300      	movs	r3, #0
 801736a:	613b      	str	r3, [r7, #16]
 801736c:	e001      	b.n	8017372 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801736e:	2300      	movs	r3, #0
 8017370:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	2b01      	cmp	r3, #1
 8017376:	d106      	bne.n	8017386 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	689b      	ldr	r3, [r3, #8]
 801737c:	4618      	mov	r0, r3
 801737e:	f000 f91d 	bl	80175bc <xEventGroupCreateStatic>
 8017382:	6178      	str	r0, [r7, #20]
 8017384:	e005      	b.n	8017392 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8017386:	693b      	ldr	r3, [r7, #16]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d102      	bne.n	8017392 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801738c:	f000 f94d 	bl	801762a <xEventGroupCreate>
 8017390:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8017392:	697b      	ldr	r3, [r7, #20]
}
 8017394:	4618      	mov	r0, r3
 8017396:	3718      	adds	r7, #24
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801739c:	b580      	push	{r7, lr}
 801739e:	b086      	sub	sp, #24
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d004      	beq.n	80173ba <osEventFlagsSet+0x1e>
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d003      	beq.n	80173c2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80173ba:	f06f 0303 	mvn.w	r3, #3
 80173be:	617b      	str	r3, [r7, #20]
 80173c0:	e028      	b.n	8017414 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80173c2:	f3ef 8305 	mrs	r3, IPSR
 80173c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80173c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d01d      	beq.n	801740a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80173ce:	2300      	movs	r3, #0
 80173d0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80173d2:	f107 0308 	add.w	r3, r7, #8
 80173d6:	461a      	mov	r2, r3
 80173d8:	6839      	ldr	r1, [r7, #0]
 80173da:	6938      	ldr	r0, [r7, #16]
 80173dc:	f000 fb46 	bl	8017a6c <xEventGroupSetBitsFromISR>
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d103      	bne.n	80173ee <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80173e6:	f06f 0302 	mvn.w	r3, #2
 80173ea:	617b      	str	r3, [r7, #20]
 80173ec:	e012      	b.n	8017414 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80173f2:	68bb      	ldr	r3, [r7, #8]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d00d      	beq.n	8017414 <osEventFlagsSet+0x78>
 80173f8:	4b09      	ldr	r3, [pc, #36]	; (8017420 <osEventFlagsSet+0x84>)
 80173fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173fe:	601a      	str	r2, [r3, #0]
 8017400:	f3bf 8f4f 	dsb	sy
 8017404:	f3bf 8f6f 	isb	sy
 8017408:	e004      	b.n	8017414 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801740a:	6839      	ldr	r1, [r7, #0]
 801740c:	6938      	ldr	r0, [r7, #16]
 801740e:	f000 fa65 	bl	80178dc <xEventGroupSetBits>
 8017412:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8017414:	697b      	ldr	r3, [r7, #20]
}
 8017416:	4618      	mov	r0, r3
 8017418:	3718      	adds	r7, #24
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}
 801741e:	bf00      	nop
 8017420:	e000ed04 	.word	0xe000ed04

08017424 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8017424:	b580      	push	{r7, lr}
 8017426:	b086      	sub	sp, #24
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017432:	693b      	ldr	r3, [r7, #16]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d004      	beq.n	8017442 <osEventFlagsClear+0x1e>
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801743e:	2b00      	cmp	r3, #0
 8017440:	d003      	beq.n	801744a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017442:	f06f 0303 	mvn.w	r3, #3
 8017446:	617b      	str	r3, [r7, #20]
 8017448:	e019      	b.n	801747e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801744a:	f3ef 8305 	mrs	r3, IPSR
 801744e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017450:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017452:	2b00      	cmp	r3, #0
 8017454:	d00e      	beq.n	8017474 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8017456:	6938      	ldr	r0, [r7, #16]
 8017458:	f000 fa1c 	bl	8017894 <xEventGroupGetBitsFromISR>
 801745c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801745e:	6839      	ldr	r1, [r7, #0]
 8017460:	6938      	ldr	r0, [r7, #16]
 8017462:	f000 fa03 	bl	801786c <xEventGroupClearBitsFromISR>
 8017466:	4603      	mov	r3, r0
 8017468:	2b00      	cmp	r3, #0
 801746a:	d108      	bne.n	801747e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801746c:	f06f 0302 	mvn.w	r3, #2
 8017470:	617b      	str	r3, [r7, #20]
 8017472:	e004      	b.n	801747e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8017474:	6839      	ldr	r1, [r7, #0]
 8017476:	6938      	ldr	r0, [r7, #16]
 8017478:	f000 f9c0 	bl	80177fc <xEventGroupClearBits>
 801747c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801747e:	697b      	ldr	r3, [r7, #20]
}
 8017480:	4618      	mov	r0, r3
 8017482:	3718      	adds	r7, #24
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}

08017488 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8017488:	b580      	push	{r7, lr}
 801748a:	b08c      	sub	sp, #48	; 0x30
 801748c:	af02      	add	r7, sp, #8
 801748e:	60f8      	str	r0, [r7, #12]
 8017490:	60b9      	str	r1, [r7, #8]
 8017492:	607a      	str	r2, [r7, #4]
 8017494:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801749a:	69bb      	ldr	r3, [r7, #24]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d004      	beq.n	80174aa <osEventFlagsWait+0x22>
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d003      	beq.n	80174b2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80174aa:	f06f 0303 	mvn.w	r3, #3
 80174ae:	61fb      	str	r3, [r7, #28]
 80174b0:	e04b      	b.n	801754a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174b2:	f3ef 8305 	mrs	r3, IPSR
 80174b6:	617b      	str	r3, [r7, #20]
  return(result);
 80174b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d003      	beq.n	80174c6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80174be:	f06f 0305 	mvn.w	r3, #5
 80174c2:	61fb      	str	r3, [r7, #28]
 80174c4:	e041      	b.n	801754a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	f003 0301 	and.w	r3, r3, #1
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d002      	beq.n	80174d6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80174d0:	2301      	movs	r3, #1
 80174d2:	627b      	str	r3, [r7, #36]	; 0x24
 80174d4:	e001      	b.n	80174da <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80174d6:	2300      	movs	r3, #0
 80174d8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	f003 0302 	and.w	r3, r3, #2
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d002      	beq.n	80174ea <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80174e4:	2300      	movs	r3, #0
 80174e6:	623b      	str	r3, [r7, #32]
 80174e8:	e001      	b.n	80174ee <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80174ea:	2301      	movs	r3, #1
 80174ec:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	9300      	str	r3, [sp, #0]
 80174f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f4:	6a3a      	ldr	r2, [r7, #32]
 80174f6:	68b9      	ldr	r1, [r7, #8]
 80174f8:	69b8      	ldr	r0, [r7, #24]
 80174fa:	f000 f8b1 	bl	8017660 <xEventGroupWaitBits>
 80174fe:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f003 0301 	and.w	r3, r3, #1
 8017506:	2b00      	cmp	r3, #0
 8017508:	d010      	beq.n	801752c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801750a:	68ba      	ldr	r2, [r7, #8]
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	4013      	ands	r3, r2
 8017510:	68ba      	ldr	r2, [r7, #8]
 8017512:	429a      	cmp	r2, r3
 8017514:	d019      	beq.n	801754a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d003      	beq.n	8017524 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801751c:	f06f 0301 	mvn.w	r3, #1
 8017520:	61fb      	str	r3, [r7, #28]
 8017522:	e012      	b.n	801754a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017524:	f06f 0302 	mvn.w	r3, #2
 8017528:	61fb      	str	r3, [r7, #28]
 801752a:	e00e      	b.n	801754a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801752c:	68ba      	ldr	r2, [r7, #8]
 801752e:	69fb      	ldr	r3, [r7, #28]
 8017530:	4013      	ands	r3, r2
 8017532:	2b00      	cmp	r3, #0
 8017534:	d109      	bne.n	801754a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d003      	beq.n	8017544 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801753c:	f06f 0301 	mvn.w	r3, #1
 8017540:	61fb      	str	r3, [r7, #28]
 8017542:	e002      	b.n	801754a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017544:	f06f 0302 	mvn.w	r3, #2
 8017548:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801754a:	69fb      	ldr	r3, [r7, #28]
}
 801754c:	4618      	mov	r0, r3
 801754e:	3728      	adds	r7, #40	; 0x28
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}

08017554 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017554:	b480      	push	{r7}
 8017556:	b085      	sub	sp, #20
 8017558:	af00      	add	r7, sp, #0
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	4a07      	ldr	r2, [pc, #28]	; (8017580 <vApplicationGetIdleTaskMemory+0x2c>)
 8017564:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	4a06      	ldr	r2, [pc, #24]	; (8017584 <vApplicationGetIdleTaskMemory+0x30>)
 801756a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	2280      	movs	r2, #128	; 0x80
 8017570:	601a      	str	r2, [r3, #0]
}
 8017572:	bf00      	nop
 8017574:	3714      	adds	r7, #20
 8017576:	46bd      	mov	sp, r7
 8017578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757c:	4770      	bx	lr
 801757e:	bf00      	nop
 8017580:	24002020 	.word	0x24002020
 8017584:	2400207c 	.word	0x2400207c

08017588 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017588:	b480      	push	{r7}
 801758a:	b085      	sub	sp, #20
 801758c:	af00      	add	r7, sp, #0
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	4a07      	ldr	r2, [pc, #28]	; (80175b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8017598:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	4a06      	ldr	r2, [pc, #24]	; (80175b8 <vApplicationGetTimerTaskMemory+0x30>)
 801759e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80175a6:	601a      	str	r2, [r3, #0]
}
 80175a8:	bf00      	nop
 80175aa:	3714      	adds	r7, #20
 80175ac:	46bd      	mov	sp, r7
 80175ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b2:	4770      	bx	lr
 80175b4:	2400227c 	.word	0x2400227c
 80175b8:	240022d8 	.word	0x240022d8

080175bc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b086      	sub	sp, #24
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d10a      	bne.n	80175e0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80175ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ce:	f383 8811 	msr	BASEPRI, r3
 80175d2:	f3bf 8f6f 	isb	sy
 80175d6:	f3bf 8f4f 	dsb	sy
 80175da:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80175dc:	bf00      	nop
 80175de:	e7fe      	b.n	80175de <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80175e0:	2320      	movs	r3, #32
 80175e2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	2b20      	cmp	r3, #32
 80175e8:	d00a      	beq.n	8017600 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80175ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ee:	f383 8811 	msr	BASEPRI, r3
 80175f2:	f3bf 8f6f 	isb	sy
 80175f6:	f3bf 8f4f 	dsb	sy
 80175fa:	60fb      	str	r3, [r7, #12]
}
 80175fc:	bf00      	nop
 80175fe:	e7fe      	b.n	80175fe <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017604:	697b      	ldr	r3, [r7, #20]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d00a      	beq.n	8017620 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801760a:	697b      	ldr	r3, [r7, #20]
 801760c:	2200      	movs	r2, #0
 801760e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	3304      	adds	r3, #4
 8017614:	4618      	mov	r0, r3
 8017616:	f000 fa3d 	bl	8017a94 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	2201      	movs	r2, #1
 801761e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017620:	697b      	ldr	r3, [r7, #20]
	}
 8017622:	4618      	mov	r0, r3
 8017624:	3718      	adds	r7, #24
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}

0801762a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801762a:	b580      	push	{r7, lr}
 801762c:	b082      	sub	sp, #8
 801762e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017630:	2020      	movs	r0, #32
 8017632:	f002 fe59 	bl	801a2e8 <pvPortMalloc>
 8017636:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d00a      	beq.n	8017654 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	2200      	movs	r2, #0
 8017642:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	3304      	adds	r3, #4
 8017648:	4618      	mov	r0, r3
 801764a:	f000 fa23 	bl	8017a94 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	2200      	movs	r2, #0
 8017652:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017654:	687b      	ldr	r3, [r7, #4]
	}
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
	...

08017660 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b090      	sub	sp, #64	; 0x40
 8017664:	af00      	add	r7, sp, #0
 8017666:	60f8      	str	r0, [r7, #12]
 8017668:	60b9      	str	r1, [r7, #8]
 801766a:	607a      	str	r2, [r7, #4]
 801766c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017672:	2300      	movs	r3, #0
 8017674:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8017676:	2300      	movs	r3, #0
 8017678:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d10a      	bne.n	8017696 <xEventGroupWaitBits+0x36>
	__asm volatile
 8017680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017684:	f383 8811 	msr	BASEPRI, r3
 8017688:	f3bf 8f6f 	isb	sy
 801768c:	f3bf 8f4f 	dsb	sy
 8017690:	623b      	str	r3, [r7, #32]
}
 8017692:	bf00      	nop
 8017694:	e7fe      	b.n	8017694 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801769c:	2b00      	cmp	r3, #0
 801769e:	d00a      	beq.n	80176b6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80176a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a4:	f383 8811 	msr	BASEPRI, r3
 80176a8:	f3bf 8f6f 	isb	sy
 80176ac:	f3bf 8f4f 	dsb	sy
 80176b0:	61fb      	str	r3, [r7, #28]
}
 80176b2:	bf00      	nop
 80176b4:	e7fe      	b.n	80176b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d10a      	bne.n	80176d2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80176bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c0:	f383 8811 	msr	BASEPRI, r3
 80176c4:	f3bf 8f6f 	isb	sy
 80176c8:	f3bf 8f4f 	dsb	sy
 80176cc:	61bb      	str	r3, [r7, #24]
}
 80176ce:	bf00      	nop
 80176d0:	e7fe      	b.n	80176d0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80176d2:	f001 ff57 	bl	8019584 <xTaskGetSchedulerState>
 80176d6:	4603      	mov	r3, r0
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d102      	bne.n	80176e2 <xEventGroupWaitBits+0x82>
 80176dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d101      	bne.n	80176e6 <xEventGroupWaitBits+0x86>
 80176e2:	2301      	movs	r3, #1
 80176e4:	e000      	b.n	80176e8 <xEventGroupWaitBits+0x88>
 80176e6:	2300      	movs	r3, #0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d10a      	bne.n	8017702 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80176ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f0:	f383 8811 	msr	BASEPRI, r3
 80176f4:	f3bf 8f6f 	isb	sy
 80176f8:	f3bf 8f4f 	dsb	sy
 80176fc:	617b      	str	r3, [r7, #20]
}
 80176fe:	bf00      	nop
 8017700:	e7fe      	b.n	8017700 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017702:	f001 faa9 	bl	8018c58 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801770c:	683a      	ldr	r2, [r7, #0]
 801770e:	68b9      	ldr	r1, [r7, #8]
 8017710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017712:	f000 f988 	bl	8017a26 <prvTestWaitCondition>
 8017716:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771a:	2b00      	cmp	r3, #0
 801771c:	d00e      	beq.n	801773c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017720:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017722:	2300      	movs	r3, #0
 8017724:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d028      	beq.n	801777e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	68bb      	ldr	r3, [r7, #8]
 8017732:	43db      	mvns	r3, r3
 8017734:	401a      	ands	r2, r3
 8017736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017738:	601a      	str	r2, [r3, #0]
 801773a:	e020      	b.n	801777e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801773c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801773e:	2b00      	cmp	r3, #0
 8017740:	d104      	bne.n	801774c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017744:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017746:	2301      	movs	r3, #1
 8017748:	633b      	str	r3, [r7, #48]	; 0x30
 801774a:	e018      	b.n	801777e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d003      	beq.n	801775a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017758:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d003      	beq.n	8017768 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017762:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017766:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801776a:	1d18      	adds	r0, r3, #4
 801776c:	68ba      	ldr	r2, [r7, #8]
 801776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017770:	4313      	orrs	r3, r2
 8017772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017774:	4619      	mov	r1, r3
 8017776:	f001 fc7d 	bl	8019074 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801777a:	2300      	movs	r3, #0
 801777c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801777e:	f001 fa79 	bl	8018c74 <xTaskResumeAll>
 8017782:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017786:	2b00      	cmp	r3, #0
 8017788:	d031      	beq.n	80177ee <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778c:	2b00      	cmp	r3, #0
 801778e:	d107      	bne.n	80177a0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017790:	4b19      	ldr	r3, [pc, #100]	; (80177f8 <xEventGroupWaitBits+0x198>)
 8017792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017796:	601a      	str	r2, [r3, #0]
 8017798:	f3bf 8f4f 	dsb	sy
 801779c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80177a0:	f001 ff7c 	bl	801969c <uxTaskResetEventItemValue>
 80177a4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80177a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d11a      	bne.n	80177e6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80177b0:	f002 fc78 	bl	801a0a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80177b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80177ba:	683a      	ldr	r2, [r7, #0]
 80177bc:	68b9      	ldr	r1, [r7, #8]
 80177be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80177c0:	f000 f931 	bl	8017a26 <prvTestWaitCondition>
 80177c4:	4603      	mov	r3, r0
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d009      	beq.n	80177de <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d006      	beq.n	80177de <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80177d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177d2:	681a      	ldr	r2, [r3, #0]
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	43db      	mvns	r3, r3
 80177d8:	401a      	ands	r2, r3
 80177da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177dc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80177de:	2301      	movs	r3, #1
 80177e0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80177e2:	f002 fc8f 	bl	801a104 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80177e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80177ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80177ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	3740      	adds	r7, #64	; 0x40
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	e000ed04 	.word	0xe000ed04

080177fc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b086      	sub	sp, #24
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
 8017804:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d10a      	bne.n	8017826 <xEventGroupClearBits+0x2a>
	__asm volatile
 8017810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017814:	f383 8811 	msr	BASEPRI, r3
 8017818:	f3bf 8f6f 	isb	sy
 801781c:	f3bf 8f4f 	dsb	sy
 8017820:	60fb      	str	r3, [r7, #12]
}
 8017822:	bf00      	nop
 8017824:	e7fe      	b.n	8017824 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017826:	683b      	ldr	r3, [r7, #0]
 8017828:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801782c:	2b00      	cmp	r3, #0
 801782e:	d00a      	beq.n	8017846 <xEventGroupClearBits+0x4a>
	__asm volatile
 8017830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017834:	f383 8811 	msr	BASEPRI, r3
 8017838:	f3bf 8f6f 	isb	sy
 801783c:	f3bf 8f4f 	dsb	sy
 8017840:	60bb      	str	r3, [r7, #8]
}
 8017842:	bf00      	nop
 8017844:	e7fe      	b.n	8017844 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017846:	f002 fc2d 	bl	801a0a4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	683b      	ldr	r3, [r7, #0]
 8017856:	43db      	mvns	r3, r3
 8017858:	401a      	ands	r2, r3
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801785e:	f002 fc51 	bl	801a104 <vPortExitCritical>

	return uxReturn;
 8017862:	693b      	ldr	r3, [r7, #16]
}
 8017864:	4618      	mov	r0, r3
 8017866:	3718      	adds	r7, #24
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}

0801786c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801786c:	b580      	push	{r7, lr}
 801786e:	b084      	sub	sp, #16
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017876:	2300      	movs	r3, #0
 8017878:	683a      	ldr	r2, [r7, #0]
 801787a:	6879      	ldr	r1, [r7, #4]
 801787c:	4804      	ldr	r0, [pc, #16]	; (8017890 <xEventGroupClearBitsFromISR+0x24>)
 801787e:	f002 fac7 	bl	8019e10 <xTimerPendFunctionCallFromISR>
 8017882:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017884:	68fb      	ldr	r3, [r7, #12]
	}
 8017886:	4618      	mov	r0, r3
 8017888:	3710      	adds	r7, #16
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
 801788e:	bf00      	nop
 8017890:	08017a0d 	.word	0x08017a0d

08017894 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017894:	b480      	push	{r7}
 8017896:	b089      	sub	sp, #36	; 0x24
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80178a0:	f3ef 8211 	mrs	r2, BASEPRI
 80178a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178a8:	f383 8811 	msr	BASEPRI, r3
 80178ac:	f3bf 8f6f 	isb	sy
 80178b0:	f3bf 8f4f 	dsb	sy
 80178b4:	60fa      	str	r2, [r7, #12]
 80178b6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80178b8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80178ba:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80178bc:	69fb      	ldr	r3, [r7, #28]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	617b      	str	r3, [r7, #20]
 80178c2:	69bb      	ldr	r3, [r7, #24]
 80178c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80178c6:	693b      	ldr	r3, [r7, #16]
 80178c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80178cc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80178ce:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80178d0:	4618      	mov	r0, r3
 80178d2:	3724      	adds	r7, #36	; 0x24
 80178d4:	46bd      	mov	sp, r7
 80178d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178da:	4770      	bx	lr

080178dc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b08e      	sub	sp, #56	; 0x38
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80178e6:	2300      	movs	r3, #0
 80178e8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80178ee:	2300      	movs	r3, #0
 80178f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d10a      	bne.n	801790e <xEventGroupSetBits+0x32>
	__asm volatile
 80178f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178fc:	f383 8811 	msr	BASEPRI, r3
 8017900:	f3bf 8f6f 	isb	sy
 8017904:	f3bf 8f4f 	dsb	sy
 8017908:	613b      	str	r3, [r7, #16]
}
 801790a:	bf00      	nop
 801790c:	e7fe      	b.n	801790c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801790e:	683b      	ldr	r3, [r7, #0]
 8017910:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017914:	2b00      	cmp	r3, #0
 8017916:	d00a      	beq.n	801792e <xEventGroupSetBits+0x52>
	__asm volatile
 8017918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791c:	f383 8811 	msr	BASEPRI, r3
 8017920:	f3bf 8f6f 	isb	sy
 8017924:	f3bf 8f4f 	dsb	sy
 8017928:	60fb      	str	r3, [r7, #12]
}
 801792a:	bf00      	nop
 801792c:	e7fe      	b.n	801792c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017930:	3304      	adds	r3, #4
 8017932:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017936:	3308      	adds	r3, #8
 8017938:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801793a:	f001 f98d 	bl	8018c58 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017940:	68db      	ldr	r3, [r3, #12]
 8017942:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017946:	681a      	ldr	r2, [r3, #0]
 8017948:	683b      	ldr	r3, [r7, #0]
 801794a:	431a      	orrs	r2, r3
 801794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801794e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017950:	e03c      	b.n	80179cc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801795e:	2300      	movs	r3, #0
 8017960:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017962:	69bb      	ldr	r3, [r7, #24]
 8017964:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017968:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801796a:	69bb      	ldr	r3, [r7, #24]
 801796c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017970:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017978:	2b00      	cmp	r3, #0
 801797a:	d108      	bne.n	801798e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801797e:	681a      	ldr	r2, [r3, #0]
 8017980:	69bb      	ldr	r3, [r7, #24]
 8017982:	4013      	ands	r3, r2
 8017984:	2b00      	cmp	r3, #0
 8017986:	d00b      	beq.n	80179a0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017988:	2301      	movs	r3, #1
 801798a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801798c:	e008      	b.n	80179a0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	69bb      	ldr	r3, [r7, #24]
 8017994:	4013      	ands	r3, r2
 8017996:	69ba      	ldr	r2, [r7, #24]
 8017998:	429a      	cmp	r2, r3
 801799a:	d101      	bne.n	80179a0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801799c:	2301      	movs	r3, #1
 801799e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80179a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d010      	beq.n	80179c8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d003      	beq.n	80179b8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80179b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179b2:	69bb      	ldr	r3, [r7, #24]
 80179b4:	4313      	orrs	r3, r2
 80179b6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80179b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80179c0:	4619      	mov	r1, r3
 80179c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80179c4:	f001 fc22 	bl	801920c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80179c8:	69fb      	ldr	r3, [r7, #28]
 80179ca:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80179cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179ce:	6a3b      	ldr	r3, [r7, #32]
 80179d0:	429a      	cmp	r2, r3
 80179d2:	d1be      	bne.n	8017952 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80179d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179d6:	681a      	ldr	r2, [r3, #0]
 80179d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179da:	43db      	mvns	r3, r3
 80179dc:	401a      	ands	r2, r3
 80179de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80179e2:	f001 f947 	bl	8018c74 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80179e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e8:	681b      	ldr	r3, [r3, #0]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3738      	adds	r7, #56	; 0x38
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}

080179f2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80179f2:	b580      	push	{r7, lr}
 80179f4:	b082      	sub	sp, #8
 80179f6:	af00      	add	r7, sp, #0
 80179f8:	6078      	str	r0, [r7, #4]
 80179fa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80179fc:	6839      	ldr	r1, [r7, #0]
 80179fe:	6878      	ldr	r0, [r7, #4]
 8017a00:	f7ff ff6c 	bl	80178dc <xEventGroupSetBits>
}
 8017a04:	bf00      	nop
 8017a06:	3708      	adds	r7, #8
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017a16:	6839      	ldr	r1, [r7, #0]
 8017a18:	6878      	ldr	r0, [r7, #4]
 8017a1a:	f7ff feef 	bl	80177fc <xEventGroupClearBits>
}
 8017a1e:	bf00      	nop
 8017a20:	3708      	adds	r7, #8
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}

08017a26 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017a26:	b480      	push	{r7}
 8017a28:	b087      	sub	sp, #28
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	60f8      	str	r0, [r7, #12]
 8017a2e:	60b9      	str	r1, [r7, #8]
 8017a30:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017a32:	2300      	movs	r3, #0
 8017a34:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d107      	bne.n	8017a4c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017a3c:	68fa      	ldr	r2, [r7, #12]
 8017a3e:	68bb      	ldr	r3, [r7, #8]
 8017a40:	4013      	ands	r3, r2
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d00a      	beq.n	8017a5c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017a46:	2301      	movs	r3, #1
 8017a48:	617b      	str	r3, [r7, #20]
 8017a4a:	e007      	b.n	8017a5c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017a4c:	68fa      	ldr	r2, [r7, #12]
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	4013      	ands	r3, r2
 8017a52:	68ba      	ldr	r2, [r7, #8]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d101      	bne.n	8017a5c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017a58:	2301      	movs	r3, #1
 8017a5a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017a5c:	697b      	ldr	r3, [r7, #20]
}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	371c      	adds	r7, #28
 8017a62:	46bd      	mov	sp, r7
 8017a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a68:	4770      	bx	lr
	...

08017a6c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b086      	sub	sp, #24
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	68ba      	ldr	r2, [r7, #8]
 8017a7c:	68f9      	ldr	r1, [r7, #12]
 8017a7e:	4804      	ldr	r0, [pc, #16]	; (8017a90 <xEventGroupSetBitsFromISR+0x24>)
 8017a80:	f002 f9c6 	bl	8019e10 <xTimerPendFunctionCallFromISR>
 8017a84:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017a86:	697b      	ldr	r3, [r7, #20]
	}
 8017a88:	4618      	mov	r0, r3
 8017a8a:	3718      	adds	r7, #24
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	080179f3 	.word	0x080179f3

08017a94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017a94:	b480      	push	{r7}
 8017a96:	b083      	sub	sp, #12
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	f103 0208 	add.w	r2, r3, #8
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017aac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f103 0208 	add.w	r2, r3, #8
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	f103 0208 	add.w	r2, r3, #8
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017ac8:	bf00      	nop
 8017aca:	370c      	adds	r7, #12
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr

08017ad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	b083      	sub	sp, #12
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	2200      	movs	r2, #0
 8017ae0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017ae2:	bf00      	nop
 8017ae4:	370c      	adds	r7, #12
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aec:	4770      	bx	lr

08017aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017aee:	b480      	push	{r7}
 8017af0:	b085      	sub	sp, #20
 8017af2:	af00      	add	r7, sp, #0
 8017af4:	6078      	str	r0, [r7, #4]
 8017af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	68fa      	ldr	r2, [r7, #12]
 8017b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	689a      	ldr	r2, [r3, #8]
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	689b      	ldr	r3, [r3, #8]
 8017b10:	683a      	ldr	r2, [r7, #0]
 8017b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	683a      	ldr	r2, [r7, #0]
 8017b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017b1a:	683b      	ldr	r3, [r7, #0]
 8017b1c:	687a      	ldr	r2, [r7, #4]
 8017b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	1c5a      	adds	r2, r3, #1
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	601a      	str	r2, [r3, #0]
}
 8017b2a:	bf00      	nop
 8017b2c:	3714      	adds	r7, #20
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b34:	4770      	bx	lr

08017b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017b36:	b480      	push	{r7}
 8017b38:	b085      	sub	sp, #20
 8017b3a:	af00      	add	r7, sp, #0
 8017b3c:	6078      	str	r0, [r7, #4]
 8017b3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b4c:	d103      	bne.n	8017b56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	691b      	ldr	r3, [r3, #16]
 8017b52:	60fb      	str	r3, [r7, #12]
 8017b54:	e00c      	b.n	8017b70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	3308      	adds	r3, #8
 8017b5a:	60fb      	str	r3, [r7, #12]
 8017b5c:	e002      	b.n	8017b64 <vListInsert+0x2e>
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	685b      	ldr	r3, [r3, #4]
 8017b62:	60fb      	str	r3, [r7, #12]
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	685b      	ldr	r3, [r3, #4]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	68ba      	ldr	r2, [r7, #8]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d2f6      	bcs.n	8017b5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	685a      	ldr	r2, [r3, #4]
 8017b74:	683b      	ldr	r3, [r7, #0]
 8017b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	685b      	ldr	r3, [r3, #4]
 8017b7c:	683a      	ldr	r2, [r7, #0]
 8017b7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	68fa      	ldr	r2, [r7, #12]
 8017b84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	683a      	ldr	r2, [r7, #0]
 8017b8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017b8c:	683b      	ldr	r3, [r7, #0]
 8017b8e:	687a      	ldr	r2, [r7, #4]
 8017b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	1c5a      	adds	r2, r3, #1
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	601a      	str	r2, [r3, #0]
}
 8017b9c:	bf00      	nop
 8017b9e:	3714      	adds	r7, #20
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba6:	4770      	bx	lr

08017ba8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017ba8:	b480      	push	{r7}
 8017baa:	b085      	sub	sp, #20
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	691b      	ldr	r3, [r3, #16]
 8017bb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	687a      	ldr	r2, [r7, #4]
 8017bbc:	6892      	ldr	r2, [r2, #8]
 8017bbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	689b      	ldr	r3, [r3, #8]
 8017bc4:	687a      	ldr	r2, [r7, #4]
 8017bc6:	6852      	ldr	r2, [r2, #4]
 8017bc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	685b      	ldr	r3, [r3, #4]
 8017bce:	687a      	ldr	r2, [r7, #4]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d103      	bne.n	8017bdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	689a      	ldr	r2, [r3, #8]
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2200      	movs	r2, #0
 8017be0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	1e5a      	subs	r2, r3, #1
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	681b      	ldr	r3, [r3, #0]
}
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	3714      	adds	r7, #20
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfa:	4770      	bx	lr

08017bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b084      	sub	sp, #16
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
 8017c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d10a      	bne.n	8017c26 <xQueueGenericReset+0x2a>
	__asm volatile
 8017c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c14:	f383 8811 	msr	BASEPRI, r3
 8017c18:	f3bf 8f6f 	isb	sy
 8017c1c:	f3bf 8f4f 	dsb	sy
 8017c20:	60bb      	str	r3, [r7, #8]
}
 8017c22:	bf00      	nop
 8017c24:	e7fe      	b.n	8017c24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017c26:	f002 fa3d 	bl	801a0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c32:	68f9      	ldr	r1, [r7, #12]
 8017c34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017c36:	fb01 f303 	mul.w	r3, r1, r3
 8017c3a:	441a      	add	r2, r3
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2200      	movs	r2, #0
 8017c44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	681a      	ldr	r2, [r3, #0]
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c56:	3b01      	subs	r3, #1
 8017c58:	68f9      	ldr	r1, [r7, #12]
 8017c5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017c5c:	fb01 f303 	mul.w	r3, r1, r3
 8017c60:	441a      	add	r2, r3
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	22ff      	movs	r2, #255	; 0xff
 8017c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	22ff      	movs	r2, #255	; 0xff
 8017c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d114      	bne.n	8017ca6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	691b      	ldr	r3, [r3, #16]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d01a      	beq.n	8017cba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	3310      	adds	r3, #16
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f001 fa5b 	bl	8019144 <xTaskRemoveFromEventList>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d012      	beq.n	8017cba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017c94:	4b0c      	ldr	r3, [pc, #48]	; (8017cc8 <xQueueGenericReset+0xcc>)
 8017c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c9a:	601a      	str	r2, [r3, #0]
 8017c9c:	f3bf 8f4f 	dsb	sy
 8017ca0:	f3bf 8f6f 	isb	sy
 8017ca4:	e009      	b.n	8017cba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	3310      	adds	r3, #16
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7ff fef2 	bl	8017a94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	3324      	adds	r3, #36	; 0x24
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f7ff feed 	bl	8017a94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017cba:	f002 fa23 	bl	801a104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017cbe:	2301      	movs	r3, #1
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	3710      	adds	r7, #16
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd80      	pop	{r7, pc}
 8017cc8:	e000ed04 	.word	0xe000ed04

08017ccc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b08e      	sub	sp, #56	; 0x38
 8017cd0:	af02      	add	r7, sp, #8
 8017cd2:	60f8      	str	r0, [r7, #12]
 8017cd4:	60b9      	str	r1, [r7, #8]
 8017cd6:	607a      	str	r2, [r7, #4]
 8017cd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d10a      	bne.n	8017cf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce4:	f383 8811 	msr	BASEPRI, r3
 8017ce8:	f3bf 8f6f 	isb	sy
 8017cec:	f3bf 8f4f 	dsb	sy
 8017cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017cf2:	bf00      	nop
 8017cf4:	e7fe      	b.n	8017cf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d10a      	bne.n	8017d12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d00:	f383 8811 	msr	BASEPRI, r3
 8017d04:	f3bf 8f6f 	isb	sy
 8017d08:	f3bf 8f4f 	dsb	sy
 8017d0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017d0e:	bf00      	nop
 8017d10:	e7fe      	b.n	8017d10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d002      	beq.n	8017d1e <xQueueGenericCreateStatic+0x52>
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d001      	beq.n	8017d22 <xQueueGenericCreateStatic+0x56>
 8017d1e:	2301      	movs	r3, #1
 8017d20:	e000      	b.n	8017d24 <xQueueGenericCreateStatic+0x58>
 8017d22:	2300      	movs	r3, #0
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d10a      	bne.n	8017d3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d2c:	f383 8811 	msr	BASEPRI, r3
 8017d30:	f3bf 8f6f 	isb	sy
 8017d34:	f3bf 8f4f 	dsb	sy
 8017d38:	623b      	str	r3, [r7, #32]
}
 8017d3a:	bf00      	nop
 8017d3c:	e7fe      	b.n	8017d3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d102      	bne.n	8017d4a <xQueueGenericCreateStatic+0x7e>
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d101      	bne.n	8017d4e <xQueueGenericCreateStatic+0x82>
 8017d4a:	2301      	movs	r3, #1
 8017d4c:	e000      	b.n	8017d50 <xQueueGenericCreateStatic+0x84>
 8017d4e:	2300      	movs	r3, #0
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d10a      	bne.n	8017d6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d58:	f383 8811 	msr	BASEPRI, r3
 8017d5c:	f3bf 8f6f 	isb	sy
 8017d60:	f3bf 8f4f 	dsb	sy
 8017d64:	61fb      	str	r3, [r7, #28]
}
 8017d66:	bf00      	nop
 8017d68:	e7fe      	b.n	8017d68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017d6a:	2350      	movs	r3, #80	; 0x50
 8017d6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017d6e:	697b      	ldr	r3, [r7, #20]
 8017d70:	2b50      	cmp	r3, #80	; 0x50
 8017d72:	d00a      	beq.n	8017d8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d78:	f383 8811 	msr	BASEPRI, r3
 8017d7c:	f3bf 8f6f 	isb	sy
 8017d80:	f3bf 8f4f 	dsb	sy
 8017d84:	61bb      	str	r3, [r7, #24]
}
 8017d86:	bf00      	nop
 8017d88:	e7fe      	b.n	8017d88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017d8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017d8c:	683b      	ldr	r3, [r7, #0]
 8017d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d00d      	beq.n	8017db2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d98:	2201      	movs	r2, #1
 8017d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017d9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da4:	9300      	str	r3, [sp, #0]
 8017da6:	4613      	mov	r3, r2
 8017da8:	687a      	ldr	r2, [r7, #4]
 8017daa:	68b9      	ldr	r1, [r7, #8]
 8017dac:	68f8      	ldr	r0, [r7, #12]
 8017dae:	f000 f805 	bl	8017dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017db4:	4618      	mov	r0, r3
 8017db6:	3730      	adds	r7, #48	; 0x30
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}

08017dbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b084      	sub	sp, #16
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	60f8      	str	r0, [r7, #12]
 8017dc4:	60b9      	str	r1, [r7, #8]
 8017dc6:	607a      	str	r2, [r7, #4]
 8017dc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017dca:	68bb      	ldr	r3, [r7, #8]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d103      	bne.n	8017dd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017dd0:	69bb      	ldr	r3, [r7, #24]
 8017dd2:	69ba      	ldr	r2, [r7, #24]
 8017dd4:	601a      	str	r2, [r3, #0]
 8017dd6:	e002      	b.n	8017dde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	687a      	ldr	r2, [r7, #4]
 8017ddc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017dde:	69bb      	ldr	r3, [r7, #24]
 8017de0:	68fa      	ldr	r2, [r7, #12]
 8017de2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017de4:	69bb      	ldr	r3, [r7, #24]
 8017de6:	68ba      	ldr	r2, [r7, #8]
 8017de8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017dea:	2101      	movs	r1, #1
 8017dec:	69b8      	ldr	r0, [r7, #24]
 8017dee:	f7ff ff05 	bl	8017bfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017df2:	69bb      	ldr	r3, [r7, #24]
 8017df4:	78fa      	ldrb	r2, [r7, #3]
 8017df6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017dfa:	bf00      	nop
 8017dfc:	3710      	adds	r7, #16
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}
	...

08017e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b08e      	sub	sp, #56	; 0x38
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	607a      	str	r2, [r7, #4]
 8017e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017e12:	2300      	movs	r3, #0
 8017e14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d10a      	bne.n	8017e36 <xQueueGenericSend+0x32>
	__asm volatile
 8017e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e24:	f383 8811 	msr	BASEPRI, r3
 8017e28:	f3bf 8f6f 	isb	sy
 8017e2c:	f3bf 8f4f 	dsb	sy
 8017e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017e32:	bf00      	nop
 8017e34:	e7fe      	b.n	8017e34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e36:	68bb      	ldr	r3, [r7, #8]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d103      	bne.n	8017e44 <xQueueGenericSend+0x40>
 8017e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d101      	bne.n	8017e48 <xQueueGenericSend+0x44>
 8017e44:	2301      	movs	r3, #1
 8017e46:	e000      	b.n	8017e4a <xQueueGenericSend+0x46>
 8017e48:	2300      	movs	r3, #0
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d10a      	bne.n	8017e64 <xQueueGenericSend+0x60>
	__asm volatile
 8017e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e52:	f383 8811 	msr	BASEPRI, r3
 8017e56:	f3bf 8f6f 	isb	sy
 8017e5a:	f3bf 8f4f 	dsb	sy
 8017e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e60:	bf00      	nop
 8017e62:	e7fe      	b.n	8017e62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017e64:	683b      	ldr	r3, [r7, #0]
 8017e66:	2b02      	cmp	r3, #2
 8017e68:	d103      	bne.n	8017e72 <xQueueGenericSend+0x6e>
 8017e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e6e:	2b01      	cmp	r3, #1
 8017e70:	d101      	bne.n	8017e76 <xQueueGenericSend+0x72>
 8017e72:	2301      	movs	r3, #1
 8017e74:	e000      	b.n	8017e78 <xQueueGenericSend+0x74>
 8017e76:	2300      	movs	r3, #0
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d10a      	bne.n	8017e92 <xQueueGenericSend+0x8e>
	__asm volatile
 8017e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e80:	f383 8811 	msr	BASEPRI, r3
 8017e84:	f3bf 8f6f 	isb	sy
 8017e88:	f3bf 8f4f 	dsb	sy
 8017e8c:	623b      	str	r3, [r7, #32]
}
 8017e8e:	bf00      	nop
 8017e90:	e7fe      	b.n	8017e90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017e92:	f001 fb77 	bl	8019584 <xTaskGetSchedulerState>
 8017e96:	4603      	mov	r3, r0
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d102      	bne.n	8017ea2 <xQueueGenericSend+0x9e>
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d101      	bne.n	8017ea6 <xQueueGenericSend+0xa2>
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	e000      	b.n	8017ea8 <xQueueGenericSend+0xa4>
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d10a      	bne.n	8017ec2 <xQueueGenericSend+0xbe>
	__asm volatile
 8017eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb0:	f383 8811 	msr	BASEPRI, r3
 8017eb4:	f3bf 8f6f 	isb	sy
 8017eb8:	f3bf 8f4f 	dsb	sy
 8017ebc:	61fb      	str	r3, [r7, #28]
}
 8017ebe:	bf00      	nop
 8017ec0:	e7fe      	b.n	8017ec0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ec2:	f002 f8ef 	bl	801a0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d302      	bcc.n	8017ed8 <xQueueGenericSend+0xd4>
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	2b02      	cmp	r3, #2
 8017ed6:	d129      	bne.n	8017f2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ed8:	683a      	ldr	r2, [r7, #0]
 8017eda:	68b9      	ldr	r1, [r7, #8]
 8017edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ede:	f000 fa0b 	bl	80182f8 <prvCopyDataToQueue>
 8017ee2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d010      	beq.n	8017f0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eee:	3324      	adds	r3, #36	; 0x24
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f001 f927 	bl	8019144 <xTaskRemoveFromEventList>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d013      	beq.n	8017f24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017efc:	4b3f      	ldr	r3, [pc, #252]	; (8017ffc <xQueueGenericSend+0x1f8>)
 8017efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f02:	601a      	str	r2, [r3, #0]
 8017f04:	f3bf 8f4f 	dsb	sy
 8017f08:	f3bf 8f6f 	isb	sy
 8017f0c:	e00a      	b.n	8017f24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d007      	beq.n	8017f24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017f14:	4b39      	ldr	r3, [pc, #228]	; (8017ffc <xQueueGenericSend+0x1f8>)
 8017f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f1a:	601a      	str	r2, [r3, #0]
 8017f1c:	f3bf 8f4f 	dsb	sy
 8017f20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017f24:	f002 f8ee 	bl	801a104 <vPortExitCritical>
				return pdPASS;
 8017f28:	2301      	movs	r3, #1
 8017f2a:	e063      	b.n	8017ff4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d103      	bne.n	8017f3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017f32:	f002 f8e7 	bl	801a104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017f36:	2300      	movs	r3, #0
 8017f38:	e05c      	b.n	8017ff4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d106      	bne.n	8017f4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017f40:	f107 0314 	add.w	r3, r7, #20
 8017f44:	4618      	mov	r0, r3
 8017f46:	f001 f9c3 	bl	80192d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017f4e:	f002 f8d9 	bl	801a104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017f52:	f000 fe81 	bl	8018c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017f56:	f002 f8a5 	bl	801a0a4 <vPortEnterCritical>
 8017f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f60:	b25b      	sxtb	r3, r3
 8017f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f66:	d103      	bne.n	8017f70 <xQueueGenericSend+0x16c>
 8017f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f76:	b25b      	sxtb	r3, r3
 8017f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f7c:	d103      	bne.n	8017f86 <xQueueGenericSend+0x182>
 8017f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f80:	2200      	movs	r2, #0
 8017f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017f86:	f002 f8bd 	bl	801a104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017f8a:	1d3a      	adds	r2, r7, #4
 8017f8c:	f107 0314 	add.w	r3, r7, #20
 8017f90:	4611      	mov	r1, r2
 8017f92:	4618      	mov	r0, r3
 8017f94:	f001 f9b2 	bl	80192fc <xTaskCheckForTimeOut>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d124      	bne.n	8017fe8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fa0:	f000 faa2 	bl	80184e8 <prvIsQueueFull>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d018      	beq.n	8017fdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fac:	3310      	adds	r3, #16
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	4611      	mov	r1, r2
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f001 f83a 	bl	801902c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fba:	f000 fa2d 	bl	8018418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017fbe:	f000 fe59 	bl	8018c74 <xTaskResumeAll>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	f47f af7c 	bne.w	8017ec2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017fca:	4b0c      	ldr	r3, [pc, #48]	; (8017ffc <xQueueGenericSend+0x1f8>)
 8017fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fd0:	601a      	str	r2, [r3, #0]
 8017fd2:	f3bf 8f4f 	dsb	sy
 8017fd6:	f3bf 8f6f 	isb	sy
 8017fda:	e772      	b.n	8017ec2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fde:	f000 fa1b 	bl	8018418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017fe2:	f000 fe47 	bl	8018c74 <xTaskResumeAll>
 8017fe6:	e76c      	b.n	8017ec2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fea:	f000 fa15 	bl	8018418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017fee:	f000 fe41 	bl	8018c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017ff2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3738      	adds	r7, #56	; 0x38
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}
 8017ffc:	e000ed04 	.word	0xe000ed04

08018000 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b090      	sub	sp, #64	; 0x40
 8018004:	af00      	add	r7, sp, #0
 8018006:	60f8      	str	r0, [r7, #12]
 8018008:	60b9      	str	r1, [r7, #8]
 801800a:	607a      	str	r2, [r7, #4]
 801800c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8018012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018014:	2b00      	cmp	r3, #0
 8018016:	d10a      	bne.n	801802e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8018018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801801c:	f383 8811 	msr	BASEPRI, r3
 8018020:	f3bf 8f6f 	isb	sy
 8018024:	f3bf 8f4f 	dsb	sy
 8018028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801802a:	bf00      	nop
 801802c:	e7fe      	b.n	801802c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d103      	bne.n	801803c <xQueueGenericSendFromISR+0x3c>
 8018034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018038:	2b00      	cmp	r3, #0
 801803a:	d101      	bne.n	8018040 <xQueueGenericSendFromISR+0x40>
 801803c:	2301      	movs	r3, #1
 801803e:	e000      	b.n	8018042 <xQueueGenericSendFromISR+0x42>
 8018040:	2300      	movs	r3, #0
 8018042:	2b00      	cmp	r3, #0
 8018044:	d10a      	bne.n	801805c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8018046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801804a:	f383 8811 	msr	BASEPRI, r3
 801804e:	f3bf 8f6f 	isb	sy
 8018052:	f3bf 8f4f 	dsb	sy
 8018056:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018058:	bf00      	nop
 801805a:	e7fe      	b.n	801805a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	2b02      	cmp	r3, #2
 8018060:	d103      	bne.n	801806a <xQueueGenericSendFromISR+0x6a>
 8018062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018066:	2b01      	cmp	r3, #1
 8018068:	d101      	bne.n	801806e <xQueueGenericSendFromISR+0x6e>
 801806a:	2301      	movs	r3, #1
 801806c:	e000      	b.n	8018070 <xQueueGenericSendFromISR+0x70>
 801806e:	2300      	movs	r3, #0
 8018070:	2b00      	cmp	r3, #0
 8018072:	d10a      	bne.n	801808a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018078:	f383 8811 	msr	BASEPRI, r3
 801807c:	f3bf 8f6f 	isb	sy
 8018080:	f3bf 8f4f 	dsb	sy
 8018084:	623b      	str	r3, [r7, #32]
}
 8018086:	bf00      	nop
 8018088:	e7fe      	b.n	8018088 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801808a:	f002 f8ed 	bl	801a268 <vPortValidateInterruptPriority>
	__asm volatile
 801808e:	f3ef 8211 	mrs	r2, BASEPRI
 8018092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018096:	f383 8811 	msr	BASEPRI, r3
 801809a:	f3bf 8f6f 	isb	sy
 801809e:	f3bf 8f4f 	dsb	sy
 80180a2:	61fa      	str	r2, [r7, #28]
 80180a4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80180a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80180a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80180aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180b2:	429a      	cmp	r2, r3
 80180b4:	d302      	bcc.n	80180bc <xQueueGenericSendFromISR+0xbc>
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	2b02      	cmp	r3, #2
 80180ba:	d12f      	bne.n	801811c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80180bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80180c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80180c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80180cc:	683a      	ldr	r2, [r7, #0]
 80180ce:	68b9      	ldr	r1, [r7, #8]
 80180d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80180d2:	f000 f911 	bl	80182f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80180d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80180da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80180de:	d112      	bne.n	8018106 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80180e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d016      	beq.n	8018116 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80180e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ea:	3324      	adds	r3, #36	; 0x24
 80180ec:	4618      	mov	r0, r3
 80180ee:	f001 f829 	bl	8019144 <xTaskRemoveFromEventList>
 80180f2:	4603      	mov	r3, r0
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d00e      	beq.n	8018116 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d00b      	beq.n	8018116 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	2201      	movs	r2, #1
 8018102:	601a      	str	r2, [r3, #0]
 8018104:	e007      	b.n	8018116 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018106:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801810a:	3301      	adds	r3, #1
 801810c:	b2db      	uxtb	r3, r3
 801810e:	b25a      	sxtb	r2, r3
 8018110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018116:	2301      	movs	r3, #1
 8018118:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801811a:	e001      	b.n	8018120 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801811c:	2300      	movs	r3, #0
 801811e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018122:	617b      	str	r3, [r7, #20]
	__asm volatile
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	f383 8811 	msr	BASEPRI, r3
}
 801812a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801812c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801812e:	4618      	mov	r0, r3
 8018130:	3740      	adds	r7, #64	; 0x40
 8018132:	46bd      	mov	sp, r7
 8018134:	bd80      	pop	{r7, pc}
	...

08018138 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b08c      	sub	sp, #48	; 0x30
 801813c:	af00      	add	r7, sp, #0
 801813e:	60f8      	str	r0, [r7, #12]
 8018140:	60b9      	str	r1, [r7, #8]
 8018142:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018144:	2300      	movs	r3, #0
 8018146:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801814e:	2b00      	cmp	r3, #0
 8018150:	d10a      	bne.n	8018168 <xQueueReceive+0x30>
	__asm volatile
 8018152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018156:	f383 8811 	msr	BASEPRI, r3
 801815a:	f3bf 8f6f 	isb	sy
 801815e:	f3bf 8f4f 	dsb	sy
 8018162:	623b      	str	r3, [r7, #32]
}
 8018164:	bf00      	nop
 8018166:	e7fe      	b.n	8018166 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d103      	bne.n	8018176 <xQueueReceive+0x3e>
 801816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018172:	2b00      	cmp	r3, #0
 8018174:	d101      	bne.n	801817a <xQueueReceive+0x42>
 8018176:	2301      	movs	r3, #1
 8018178:	e000      	b.n	801817c <xQueueReceive+0x44>
 801817a:	2300      	movs	r3, #0
 801817c:	2b00      	cmp	r3, #0
 801817e:	d10a      	bne.n	8018196 <xQueueReceive+0x5e>
	__asm volatile
 8018180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018184:	f383 8811 	msr	BASEPRI, r3
 8018188:	f3bf 8f6f 	isb	sy
 801818c:	f3bf 8f4f 	dsb	sy
 8018190:	61fb      	str	r3, [r7, #28]
}
 8018192:	bf00      	nop
 8018194:	e7fe      	b.n	8018194 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018196:	f001 f9f5 	bl	8019584 <xTaskGetSchedulerState>
 801819a:	4603      	mov	r3, r0
 801819c:	2b00      	cmp	r3, #0
 801819e:	d102      	bne.n	80181a6 <xQueueReceive+0x6e>
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d101      	bne.n	80181aa <xQueueReceive+0x72>
 80181a6:	2301      	movs	r3, #1
 80181a8:	e000      	b.n	80181ac <xQueueReceive+0x74>
 80181aa:	2300      	movs	r3, #0
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d10a      	bne.n	80181c6 <xQueueReceive+0x8e>
	__asm volatile
 80181b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b4:	f383 8811 	msr	BASEPRI, r3
 80181b8:	f3bf 8f6f 	isb	sy
 80181bc:	f3bf 8f4f 	dsb	sy
 80181c0:	61bb      	str	r3, [r7, #24]
}
 80181c2:	bf00      	nop
 80181c4:	e7fe      	b.n	80181c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80181c6:	f001 ff6d 	bl	801a0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80181ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80181d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d01f      	beq.n	8018216 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80181d6:	68b9      	ldr	r1, [r7, #8]
 80181d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181da:	f000 f8f7 	bl	80183cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80181de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e0:	1e5a      	subs	r2, r3, #1
 80181e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e8:	691b      	ldr	r3, [r3, #16]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d00f      	beq.n	801820e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f0:	3310      	adds	r3, #16
 80181f2:	4618      	mov	r0, r3
 80181f4:	f000 ffa6 	bl	8019144 <xTaskRemoveFromEventList>
 80181f8:	4603      	mov	r3, r0
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d007      	beq.n	801820e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80181fe:	4b3d      	ldr	r3, [pc, #244]	; (80182f4 <xQueueReceive+0x1bc>)
 8018200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018204:	601a      	str	r2, [r3, #0]
 8018206:	f3bf 8f4f 	dsb	sy
 801820a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801820e:	f001 ff79 	bl	801a104 <vPortExitCritical>
				return pdPASS;
 8018212:	2301      	movs	r3, #1
 8018214:	e069      	b.n	80182ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d103      	bne.n	8018224 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801821c:	f001 ff72 	bl	801a104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018220:	2300      	movs	r3, #0
 8018222:	e062      	b.n	80182ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018226:	2b00      	cmp	r3, #0
 8018228:	d106      	bne.n	8018238 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801822a:	f107 0310 	add.w	r3, r7, #16
 801822e:	4618      	mov	r0, r3
 8018230:	f001 f84e 	bl	80192d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018234:	2301      	movs	r3, #1
 8018236:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018238:	f001 ff64 	bl	801a104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801823c:	f000 fd0c 	bl	8018c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018240:	f001 ff30 	bl	801a0a4 <vPortEnterCritical>
 8018244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801824a:	b25b      	sxtb	r3, r3
 801824c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018250:	d103      	bne.n	801825a <xQueueReceive+0x122>
 8018252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018254:	2200      	movs	r2, #0
 8018256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801825c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018260:	b25b      	sxtb	r3, r3
 8018262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018266:	d103      	bne.n	8018270 <xQueueReceive+0x138>
 8018268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801826a:	2200      	movs	r2, #0
 801826c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018270:	f001 ff48 	bl	801a104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018274:	1d3a      	adds	r2, r7, #4
 8018276:	f107 0310 	add.w	r3, r7, #16
 801827a:	4611      	mov	r1, r2
 801827c:	4618      	mov	r0, r3
 801827e:	f001 f83d 	bl	80192fc <xTaskCheckForTimeOut>
 8018282:	4603      	mov	r3, r0
 8018284:	2b00      	cmp	r3, #0
 8018286:	d123      	bne.n	80182d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801828a:	f000 f917 	bl	80184bc <prvIsQueueEmpty>
 801828e:	4603      	mov	r3, r0
 8018290:	2b00      	cmp	r3, #0
 8018292:	d017      	beq.n	80182c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018296:	3324      	adds	r3, #36	; 0x24
 8018298:	687a      	ldr	r2, [r7, #4]
 801829a:	4611      	mov	r1, r2
 801829c:	4618      	mov	r0, r3
 801829e:	f000 fec5 	bl	801902c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80182a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182a4:	f000 f8b8 	bl	8018418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80182a8:	f000 fce4 	bl	8018c74 <xTaskResumeAll>
 80182ac:	4603      	mov	r3, r0
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d189      	bne.n	80181c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80182b2:	4b10      	ldr	r3, [pc, #64]	; (80182f4 <xQueueReceive+0x1bc>)
 80182b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182b8:	601a      	str	r2, [r3, #0]
 80182ba:	f3bf 8f4f 	dsb	sy
 80182be:	f3bf 8f6f 	isb	sy
 80182c2:	e780      	b.n	80181c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80182c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182c6:	f000 f8a7 	bl	8018418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80182ca:	f000 fcd3 	bl	8018c74 <xTaskResumeAll>
 80182ce:	e77a      	b.n	80181c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80182d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182d2:	f000 f8a1 	bl	8018418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80182d6:	f000 fccd 	bl	8018c74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182dc:	f000 f8ee 	bl	80184bc <prvIsQueueEmpty>
 80182e0:	4603      	mov	r3, r0
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	f43f af6f 	beq.w	80181c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80182e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	3730      	adds	r7, #48	; 0x30
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}
 80182f2:	bf00      	nop
 80182f4:	e000ed04 	.word	0xe000ed04

080182f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b086      	sub	sp, #24
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	60f8      	str	r0, [r7, #12]
 8018300:	60b9      	str	r1, [r7, #8]
 8018302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018304:	2300      	movs	r3, #0
 8018306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801830c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018312:	2b00      	cmp	r3, #0
 8018314:	d10d      	bne.n	8018332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d14d      	bne.n	80183ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	689b      	ldr	r3, [r3, #8]
 8018322:	4618      	mov	r0, r3
 8018324:	f001 f94c 	bl	80195c0 <xTaskPriorityDisinherit>
 8018328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	2200      	movs	r2, #0
 801832e:	609a      	str	r2, [r3, #8]
 8018330:	e043      	b.n	80183ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d119      	bne.n	801836c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	6858      	ldr	r0, [r3, #4]
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018340:	461a      	mov	r2, r3
 8018342:	68b9      	ldr	r1, [r7, #8]
 8018344:	f002 f9e4 	bl	801a710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	685a      	ldr	r2, [r3, #4]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018350:	441a      	add	r2, r3
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	685a      	ldr	r2, [r3, #4]
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	689b      	ldr	r3, [r3, #8]
 801835e:	429a      	cmp	r2, r3
 8018360:	d32b      	bcc.n	80183ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	681a      	ldr	r2, [r3, #0]
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	605a      	str	r2, [r3, #4]
 801836a:	e026      	b.n	80183ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	68d8      	ldr	r0, [r3, #12]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018374:	461a      	mov	r2, r3
 8018376:	68b9      	ldr	r1, [r7, #8]
 8018378:	f002 f9ca 	bl	801a710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	68da      	ldr	r2, [r3, #12]
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018384:	425b      	negs	r3, r3
 8018386:	441a      	add	r2, r3
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	68da      	ldr	r2, [r3, #12]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	429a      	cmp	r2, r3
 8018396:	d207      	bcs.n	80183a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	689a      	ldr	r2, [r3, #8]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183a0:	425b      	negs	r3, r3
 80183a2:	441a      	add	r2, r3
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2b02      	cmp	r3, #2
 80183ac:	d105      	bne.n	80183ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80183ae:	693b      	ldr	r3, [r7, #16]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d002      	beq.n	80183ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80183b4:	693b      	ldr	r3, [r7, #16]
 80183b6:	3b01      	subs	r3, #1
 80183b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80183ba:	693b      	ldr	r3, [r7, #16]
 80183bc:	1c5a      	adds	r2, r3, #1
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80183c2:	697b      	ldr	r3, [r7, #20]
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	3718      	adds	r7, #24
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}

080183cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b082      	sub	sp, #8
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
 80183d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d018      	beq.n	8018410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	68da      	ldr	r2, [r3, #12]
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183e6:	441a      	add	r2, r3
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	68da      	ldr	r2, [r3, #12]
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	689b      	ldr	r3, [r3, #8]
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d303      	bcc.n	8018400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681a      	ldr	r2, [r3, #0]
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	68d9      	ldr	r1, [r3, #12]
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018408:	461a      	mov	r2, r3
 801840a:	6838      	ldr	r0, [r7, #0]
 801840c:	f002 f980 	bl	801a710 <memcpy>
	}
}
 8018410:	bf00      	nop
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}

08018418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b084      	sub	sp, #16
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018420:	f001 fe40 	bl	801a0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801842a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801842c:	e011      	b.n	8018452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018432:	2b00      	cmp	r3, #0
 8018434:	d012      	beq.n	801845c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	3324      	adds	r3, #36	; 0x24
 801843a:	4618      	mov	r0, r3
 801843c:	f000 fe82 	bl	8019144 <xTaskRemoveFromEventList>
 8018440:	4603      	mov	r3, r0
 8018442:	2b00      	cmp	r3, #0
 8018444:	d001      	beq.n	801844a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018446:	f000 ffbb 	bl	80193c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801844a:	7bfb      	ldrb	r3, [r7, #15]
 801844c:	3b01      	subs	r3, #1
 801844e:	b2db      	uxtb	r3, r3
 8018450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018456:	2b00      	cmp	r3, #0
 8018458:	dce9      	bgt.n	801842e <prvUnlockQueue+0x16>
 801845a:	e000      	b.n	801845e <prvUnlockQueue+0x46>
					break;
 801845c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	22ff      	movs	r2, #255	; 0xff
 8018462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018466:	f001 fe4d 	bl	801a104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801846a:	f001 fe1b 	bl	801a0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018476:	e011      	b.n	801849c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	691b      	ldr	r3, [r3, #16]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d012      	beq.n	80184a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	3310      	adds	r3, #16
 8018484:	4618      	mov	r0, r3
 8018486:	f000 fe5d 	bl	8019144 <xTaskRemoveFromEventList>
 801848a:	4603      	mov	r3, r0
 801848c:	2b00      	cmp	r3, #0
 801848e:	d001      	beq.n	8018494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018490:	f000 ff96 	bl	80193c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018494:	7bbb      	ldrb	r3, [r7, #14]
 8018496:	3b01      	subs	r3, #1
 8018498:	b2db      	uxtb	r3, r3
 801849a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801849c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	dce9      	bgt.n	8018478 <prvUnlockQueue+0x60>
 80184a4:	e000      	b.n	80184a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80184a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	22ff      	movs	r2, #255	; 0xff
 80184ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80184b0:	f001 fe28 	bl	801a104 <vPortExitCritical>
}
 80184b4:	bf00      	nop
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b084      	sub	sp, #16
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80184c4:	f001 fdee 	bl	801a0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d102      	bne.n	80184d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80184d0:	2301      	movs	r3, #1
 80184d2:	60fb      	str	r3, [r7, #12]
 80184d4:	e001      	b.n	80184da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80184d6:	2300      	movs	r3, #0
 80184d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80184da:	f001 fe13 	bl	801a104 <vPortExitCritical>

	return xReturn;
 80184de:	68fb      	ldr	r3, [r7, #12]
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3710      	adds	r7, #16
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}

080184e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80184f0:	f001 fdd8 	bl	801a0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d102      	bne.n	8018506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018500:	2301      	movs	r3, #1
 8018502:	60fb      	str	r3, [r7, #12]
 8018504:	e001      	b.n	801850a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018506:	2300      	movs	r3, #0
 8018508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801850a:	f001 fdfb 	bl	801a104 <vPortExitCritical>

	return xReturn;
 801850e:	68fb      	ldr	r3, [r7, #12]
}
 8018510:	4618      	mov	r0, r3
 8018512:	3710      	adds	r7, #16
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}

08018518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018518:	b480      	push	{r7}
 801851a:	b085      	sub	sp, #20
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
 8018520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018522:	2300      	movs	r3, #0
 8018524:	60fb      	str	r3, [r7, #12]
 8018526:	e014      	b.n	8018552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018528:	4a0f      	ldr	r2, [pc, #60]	; (8018568 <vQueueAddToRegistry+0x50>)
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d10b      	bne.n	801854c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018534:	490c      	ldr	r1, [pc, #48]	; (8018568 <vQueueAddToRegistry+0x50>)
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	683a      	ldr	r2, [r7, #0]
 801853a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801853e:	4a0a      	ldr	r2, [pc, #40]	; (8018568 <vQueueAddToRegistry+0x50>)
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	00db      	lsls	r3, r3, #3
 8018544:	4413      	add	r3, r2
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801854a:	e006      	b.n	801855a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	3301      	adds	r3, #1
 8018550:	60fb      	str	r3, [r7, #12]
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	2b07      	cmp	r3, #7
 8018556:	d9e7      	bls.n	8018528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018558:	bf00      	nop
 801855a:	bf00      	nop
 801855c:	3714      	adds	r7, #20
 801855e:	46bd      	mov	sp, r7
 8018560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018564:	4770      	bx	lr
 8018566:	bf00      	nop
 8018568:	240026d8 	.word	0x240026d8

0801856c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801856c:	b580      	push	{r7, lr}
 801856e:	b086      	sub	sp, #24
 8018570:	af00      	add	r7, sp, #0
 8018572:	60f8      	str	r0, [r7, #12]
 8018574:	60b9      	str	r1, [r7, #8]
 8018576:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801857c:	f001 fd92 	bl	801a0a4 <vPortEnterCritical>
 8018580:	697b      	ldr	r3, [r7, #20]
 8018582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018586:	b25b      	sxtb	r3, r3
 8018588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801858c:	d103      	bne.n	8018596 <vQueueWaitForMessageRestricted+0x2a>
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	2200      	movs	r2, #0
 8018592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801859c:	b25b      	sxtb	r3, r3
 801859e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80185a2:	d103      	bne.n	80185ac <vQueueWaitForMessageRestricted+0x40>
 80185a4:	697b      	ldr	r3, [r7, #20]
 80185a6:	2200      	movs	r2, #0
 80185a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80185ac:	f001 fdaa 	bl	801a104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80185b0:	697b      	ldr	r3, [r7, #20]
 80185b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d106      	bne.n	80185c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	3324      	adds	r3, #36	; 0x24
 80185bc:	687a      	ldr	r2, [r7, #4]
 80185be:	68b9      	ldr	r1, [r7, #8]
 80185c0:	4618      	mov	r0, r3
 80185c2:	f000 fd93 	bl	80190ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80185c6:	6978      	ldr	r0, [r7, #20]
 80185c8:	f7ff ff26 	bl	8018418 <prvUnlockQueue>
	}
 80185cc:	bf00      	nop
 80185ce:	3718      	adds	r7, #24
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}

080185d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b08e      	sub	sp, #56	; 0x38
 80185d8:	af04      	add	r7, sp, #16
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	607a      	str	r2, [r7, #4]
 80185e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80185e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d10a      	bne.n	80185fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80185e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185ec:	f383 8811 	msr	BASEPRI, r3
 80185f0:	f3bf 8f6f 	isb	sy
 80185f4:	f3bf 8f4f 	dsb	sy
 80185f8:	623b      	str	r3, [r7, #32]
}
 80185fa:	bf00      	nop
 80185fc:	e7fe      	b.n	80185fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80185fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018600:	2b00      	cmp	r3, #0
 8018602:	d10a      	bne.n	801861a <xTaskCreateStatic+0x46>
	__asm volatile
 8018604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018608:	f383 8811 	msr	BASEPRI, r3
 801860c:	f3bf 8f6f 	isb	sy
 8018610:	f3bf 8f4f 	dsb	sy
 8018614:	61fb      	str	r3, [r7, #28]
}
 8018616:	bf00      	nop
 8018618:	e7fe      	b.n	8018618 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801861a:	235c      	movs	r3, #92	; 0x5c
 801861c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801861e:	693b      	ldr	r3, [r7, #16]
 8018620:	2b5c      	cmp	r3, #92	; 0x5c
 8018622:	d00a      	beq.n	801863a <xTaskCreateStatic+0x66>
	__asm volatile
 8018624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018628:	f383 8811 	msr	BASEPRI, r3
 801862c:	f3bf 8f6f 	isb	sy
 8018630:	f3bf 8f4f 	dsb	sy
 8018634:	61bb      	str	r3, [r7, #24]
}
 8018636:	bf00      	nop
 8018638:	e7fe      	b.n	8018638 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801863a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801863e:	2b00      	cmp	r3, #0
 8018640:	d01e      	beq.n	8018680 <xTaskCreateStatic+0xac>
 8018642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018644:	2b00      	cmp	r3, #0
 8018646:	d01b      	beq.n	8018680 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801864a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801864e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018650:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018654:	2202      	movs	r2, #2
 8018656:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801865a:	2300      	movs	r3, #0
 801865c:	9303      	str	r3, [sp, #12]
 801865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018660:	9302      	str	r3, [sp, #8]
 8018662:	f107 0314 	add.w	r3, r7, #20
 8018666:	9301      	str	r3, [sp, #4]
 8018668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801866a:	9300      	str	r3, [sp, #0]
 801866c:	683b      	ldr	r3, [r7, #0]
 801866e:	687a      	ldr	r2, [r7, #4]
 8018670:	68b9      	ldr	r1, [r7, #8]
 8018672:	68f8      	ldr	r0, [r7, #12]
 8018674:	f000 f850 	bl	8018718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801867a:	f000 f8dd 	bl	8018838 <prvAddNewTaskToReadyList>
 801867e:	e001      	b.n	8018684 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018680:	2300      	movs	r3, #0
 8018682:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018684:	697b      	ldr	r3, [r7, #20]
	}
 8018686:	4618      	mov	r0, r3
 8018688:	3728      	adds	r7, #40	; 0x28
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}

0801868e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801868e:	b580      	push	{r7, lr}
 8018690:	b08c      	sub	sp, #48	; 0x30
 8018692:	af04      	add	r7, sp, #16
 8018694:	60f8      	str	r0, [r7, #12]
 8018696:	60b9      	str	r1, [r7, #8]
 8018698:	603b      	str	r3, [r7, #0]
 801869a:	4613      	mov	r3, r2
 801869c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801869e:	88fb      	ldrh	r3, [r7, #6]
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	4618      	mov	r0, r3
 80186a4:	f001 fe20 	bl	801a2e8 <pvPortMalloc>
 80186a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d00e      	beq.n	80186ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80186b0:	205c      	movs	r0, #92	; 0x5c
 80186b2:	f001 fe19 	bl	801a2e8 <pvPortMalloc>
 80186b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80186b8:	69fb      	ldr	r3, [r7, #28]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d003      	beq.n	80186c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80186be:	69fb      	ldr	r3, [r7, #28]
 80186c0:	697a      	ldr	r2, [r7, #20]
 80186c2:	631a      	str	r2, [r3, #48]	; 0x30
 80186c4:	e005      	b.n	80186d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80186c6:	6978      	ldr	r0, [r7, #20]
 80186c8:	f001 feda 	bl	801a480 <vPortFree>
 80186cc:	e001      	b.n	80186d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80186ce:	2300      	movs	r3, #0
 80186d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80186d2:	69fb      	ldr	r3, [r7, #28]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d017      	beq.n	8018708 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80186d8:	69fb      	ldr	r3, [r7, #28]
 80186da:	2200      	movs	r2, #0
 80186dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80186e0:	88fa      	ldrh	r2, [r7, #6]
 80186e2:	2300      	movs	r3, #0
 80186e4:	9303      	str	r3, [sp, #12]
 80186e6:	69fb      	ldr	r3, [r7, #28]
 80186e8:	9302      	str	r3, [sp, #8]
 80186ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ec:	9301      	str	r3, [sp, #4]
 80186ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f0:	9300      	str	r3, [sp, #0]
 80186f2:	683b      	ldr	r3, [r7, #0]
 80186f4:	68b9      	ldr	r1, [r7, #8]
 80186f6:	68f8      	ldr	r0, [r7, #12]
 80186f8:	f000 f80e 	bl	8018718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80186fc:	69f8      	ldr	r0, [r7, #28]
 80186fe:	f000 f89b 	bl	8018838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018702:	2301      	movs	r3, #1
 8018704:	61bb      	str	r3, [r7, #24]
 8018706:	e002      	b.n	801870e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801870c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801870e:	69bb      	ldr	r3, [r7, #24]
	}
 8018710:	4618      	mov	r0, r3
 8018712:	3720      	adds	r7, #32
 8018714:	46bd      	mov	sp, r7
 8018716:	bd80      	pop	{r7, pc}

08018718 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b088      	sub	sp, #32
 801871c:	af00      	add	r7, sp, #0
 801871e:	60f8      	str	r0, [r7, #12]
 8018720:	60b9      	str	r1, [r7, #8]
 8018722:	607a      	str	r2, [r7, #4]
 8018724:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018728:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	009b      	lsls	r3, r3, #2
 801872e:	461a      	mov	r2, r3
 8018730:	21a5      	movs	r1, #165	; 0xa5
 8018732:	f001 fffb 	bl	801a72c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801873a:	6879      	ldr	r1, [r7, #4]
 801873c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018740:	440b      	add	r3, r1
 8018742:	009b      	lsls	r3, r3, #2
 8018744:	4413      	add	r3, r2
 8018746:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018748:	69bb      	ldr	r3, [r7, #24]
 801874a:	f023 0307 	bic.w	r3, r3, #7
 801874e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018750:	69bb      	ldr	r3, [r7, #24]
 8018752:	f003 0307 	and.w	r3, r3, #7
 8018756:	2b00      	cmp	r3, #0
 8018758:	d00a      	beq.n	8018770 <prvInitialiseNewTask+0x58>
	__asm volatile
 801875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801875e:	f383 8811 	msr	BASEPRI, r3
 8018762:	f3bf 8f6f 	isb	sy
 8018766:	f3bf 8f4f 	dsb	sy
 801876a:	617b      	str	r3, [r7, #20]
}
 801876c:	bf00      	nop
 801876e:	e7fe      	b.n	801876e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d01f      	beq.n	80187b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018776:	2300      	movs	r3, #0
 8018778:	61fb      	str	r3, [r7, #28]
 801877a:	e012      	b.n	80187a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801877c:	68ba      	ldr	r2, [r7, #8]
 801877e:	69fb      	ldr	r3, [r7, #28]
 8018780:	4413      	add	r3, r2
 8018782:	7819      	ldrb	r1, [r3, #0]
 8018784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018786:	69fb      	ldr	r3, [r7, #28]
 8018788:	4413      	add	r3, r2
 801878a:	3334      	adds	r3, #52	; 0x34
 801878c:	460a      	mov	r2, r1
 801878e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018790:	68ba      	ldr	r2, [r7, #8]
 8018792:	69fb      	ldr	r3, [r7, #28]
 8018794:	4413      	add	r3, r2
 8018796:	781b      	ldrb	r3, [r3, #0]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d006      	beq.n	80187aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801879c:	69fb      	ldr	r3, [r7, #28]
 801879e:	3301      	adds	r3, #1
 80187a0:	61fb      	str	r3, [r7, #28]
 80187a2:	69fb      	ldr	r3, [r7, #28]
 80187a4:	2b0f      	cmp	r3, #15
 80187a6:	d9e9      	bls.n	801877c <prvInitialiseNewTask+0x64>
 80187a8:	e000      	b.n	80187ac <prvInitialiseNewTask+0x94>
			{
				break;
 80187aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80187ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ae:	2200      	movs	r2, #0
 80187b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80187b4:	e003      	b.n	80187be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80187b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b8:	2200      	movs	r2, #0
 80187ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80187be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c0:	2b37      	cmp	r3, #55	; 0x37
 80187c2:	d901      	bls.n	80187c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80187c4:	2337      	movs	r3, #55	; 0x37
 80187c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80187c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80187ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80187d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d6:	2200      	movs	r2, #0
 80187d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80187da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187dc:	3304      	adds	r3, #4
 80187de:	4618      	mov	r0, r3
 80187e0:	f7ff f978 	bl	8017ad4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80187e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187e6:	3318      	adds	r3, #24
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7ff f973 	bl	8017ad4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80187ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80187f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80187fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80187fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018802:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018806:	2200      	movs	r2, #0
 8018808:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801880c:	2200      	movs	r2, #0
 801880e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018812:	683a      	ldr	r2, [r7, #0]
 8018814:	68f9      	ldr	r1, [r7, #12]
 8018816:	69b8      	ldr	r0, [r7, #24]
 8018818:	f001 fb1a 	bl	8019e50 <pxPortInitialiseStack>
 801881c:	4602      	mov	r2, r0
 801881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018824:	2b00      	cmp	r3, #0
 8018826:	d002      	beq.n	801882e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801882a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801882c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801882e:	bf00      	nop
 8018830:	3720      	adds	r7, #32
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
	...

08018838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018840:	f001 fc30 	bl	801a0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018844:	4b2d      	ldr	r3, [pc, #180]	; (80188fc <prvAddNewTaskToReadyList+0xc4>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	3301      	adds	r3, #1
 801884a:	4a2c      	ldr	r2, [pc, #176]	; (80188fc <prvAddNewTaskToReadyList+0xc4>)
 801884c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801884e:	4b2c      	ldr	r3, [pc, #176]	; (8018900 <prvAddNewTaskToReadyList+0xc8>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d109      	bne.n	801886a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018856:	4a2a      	ldr	r2, [pc, #168]	; (8018900 <prvAddNewTaskToReadyList+0xc8>)
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801885c:	4b27      	ldr	r3, [pc, #156]	; (80188fc <prvAddNewTaskToReadyList+0xc4>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	2b01      	cmp	r3, #1
 8018862:	d110      	bne.n	8018886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018864:	f000 fdd0 	bl	8019408 <prvInitialiseTaskLists>
 8018868:	e00d      	b.n	8018886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801886a:	4b26      	ldr	r3, [pc, #152]	; (8018904 <prvAddNewTaskToReadyList+0xcc>)
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d109      	bne.n	8018886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018872:	4b23      	ldr	r3, [pc, #140]	; (8018900 <prvAddNewTaskToReadyList+0xc8>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801887c:	429a      	cmp	r2, r3
 801887e:	d802      	bhi.n	8018886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018880:	4a1f      	ldr	r2, [pc, #124]	; (8018900 <prvAddNewTaskToReadyList+0xc8>)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018886:	4b20      	ldr	r3, [pc, #128]	; (8018908 <prvAddNewTaskToReadyList+0xd0>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	3301      	adds	r3, #1
 801888c:	4a1e      	ldr	r2, [pc, #120]	; (8018908 <prvAddNewTaskToReadyList+0xd0>)
 801888e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018890:	4b1d      	ldr	r3, [pc, #116]	; (8018908 <prvAddNewTaskToReadyList+0xd0>)
 8018892:	681a      	ldr	r2, [r3, #0]
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801889c:	4b1b      	ldr	r3, [pc, #108]	; (801890c <prvAddNewTaskToReadyList+0xd4>)
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d903      	bls.n	80188ac <prvAddNewTaskToReadyList+0x74>
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188a8:	4a18      	ldr	r2, [pc, #96]	; (801890c <prvAddNewTaskToReadyList+0xd4>)
 80188aa:	6013      	str	r3, [r2, #0]
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188b0:	4613      	mov	r3, r2
 80188b2:	009b      	lsls	r3, r3, #2
 80188b4:	4413      	add	r3, r2
 80188b6:	009b      	lsls	r3, r3, #2
 80188b8:	4a15      	ldr	r2, [pc, #84]	; (8018910 <prvAddNewTaskToReadyList+0xd8>)
 80188ba:	441a      	add	r2, r3
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	3304      	adds	r3, #4
 80188c0:	4619      	mov	r1, r3
 80188c2:	4610      	mov	r0, r2
 80188c4:	f7ff f913 	bl	8017aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80188c8:	f001 fc1c 	bl	801a104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80188cc:	4b0d      	ldr	r3, [pc, #52]	; (8018904 <prvAddNewTaskToReadyList+0xcc>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d00e      	beq.n	80188f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80188d4:	4b0a      	ldr	r3, [pc, #40]	; (8018900 <prvAddNewTaskToReadyList+0xc8>)
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188de:	429a      	cmp	r2, r3
 80188e0:	d207      	bcs.n	80188f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80188e2:	4b0c      	ldr	r3, [pc, #48]	; (8018914 <prvAddNewTaskToReadyList+0xdc>)
 80188e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80188e8:	601a      	str	r2, [r3, #0]
 80188ea:	f3bf 8f4f 	dsb	sy
 80188ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188f2:	bf00      	nop
 80188f4:	3708      	adds	r7, #8
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd80      	pop	{r7, pc}
 80188fa:	bf00      	nop
 80188fc:	24002bec 	.word	0x24002bec
 8018900:	24002718 	.word	0x24002718
 8018904:	24002bf8 	.word	0x24002bf8
 8018908:	24002c08 	.word	0x24002c08
 801890c:	24002bf4 	.word	0x24002bf4
 8018910:	2400271c 	.word	0x2400271c
 8018914:	e000ed04 	.word	0xe000ed04

08018918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018918:	b580      	push	{r7, lr}
 801891a:	b084      	sub	sp, #16
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018920:	2300      	movs	r3, #0
 8018922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d017      	beq.n	801895a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801892a:	4b13      	ldr	r3, [pc, #76]	; (8018978 <vTaskDelay+0x60>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d00a      	beq.n	8018948 <vTaskDelay+0x30>
	__asm volatile
 8018932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018936:	f383 8811 	msr	BASEPRI, r3
 801893a:	f3bf 8f6f 	isb	sy
 801893e:	f3bf 8f4f 	dsb	sy
 8018942:	60bb      	str	r3, [r7, #8]
}
 8018944:	bf00      	nop
 8018946:	e7fe      	b.n	8018946 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018948:	f000 f986 	bl	8018c58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801894c:	2100      	movs	r1, #0
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f000 febc 	bl	80196cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018954:	f000 f98e 	bl	8018c74 <xTaskResumeAll>
 8018958:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d107      	bne.n	8018970 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018960:	4b06      	ldr	r3, [pc, #24]	; (801897c <vTaskDelay+0x64>)
 8018962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018966:	601a      	str	r2, [r3, #0]
 8018968:	f3bf 8f4f 	dsb	sy
 801896c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018970:	bf00      	nop
 8018972:	3710      	adds	r7, #16
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}
 8018978:	24002c14 	.word	0x24002c14
 801897c:	e000ed04 	.word	0xe000ed04

08018980 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8018980:	b580      	push	{r7, lr}
 8018982:	b084      	sub	sp, #16
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018988:	f001 fb8c 	bl	801a0a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d102      	bne.n	8018998 <vTaskSuspend+0x18>
 8018992:	4b30      	ldr	r3, [pc, #192]	; (8018a54 <vTaskSuspend+0xd4>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	e000      	b.n	801899a <vTaskSuspend+0x1a>
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	3304      	adds	r3, #4
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7ff f901 	bl	8017ba8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d004      	beq.n	80189b8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	3318      	adds	r3, #24
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7ff f8f8 	bl	8017ba8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	3304      	adds	r3, #4
 80189bc:	4619      	mov	r1, r3
 80189be:	4826      	ldr	r0, [pc, #152]	; (8018a58 <vTaskSuspend+0xd8>)
 80189c0:	f7ff f895 	bl	8017aee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	2b01      	cmp	r3, #1
 80189ce:	d103      	bne.n	80189d8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	2200      	movs	r2, #0
 80189d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80189d8:	f001 fb94 	bl	801a104 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80189dc:	4b1f      	ldr	r3, [pc, #124]	; (8018a5c <vTaskSuspend+0xdc>)
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d005      	beq.n	80189f0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80189e4:	f001 fb5e 	bl	801a0a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80189e8:	f000 fdac 	bl	8019544 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80189ec:	f001 fb8a 	bl	801a104 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80189f0:	4b18      	ldr	r3, [pc, #96]	; (8018a54 <vTaskSuspend+0xd4>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	68fa      	ldr	r2, [r7, #12]
 80189f6:	429a      	cmp	r2, r3
 80189f8:	d127      	bne.n	8018a4a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80189fa:	4b18      	ldr	r3, [pc, #96]	; (8018a5c <vTaskSuspend+0xdc>)
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d017      	beq.n	8018a32 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018a02:	4b17      	ldr	r3, [pc, #92]	; (8018a60 <vTaskSuspend+0xe0>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d00a      	beq.n	8018a20 <vTaskSuspend+0xa0>
	__asm volatile
 8018a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a0e:	f383 8811 	msr	BASEPRI, r3
 8018a12:	f3bf 8f6f 	isb	sy
 8018a16:	f3bf 8f4f 	dsb	sy
 8018a1a:	60bb      	str	r3, [r7, #8]
}
 8018a1c:	bf00      	nop
 8018a1e:	e7fe      	b.n	8018a1e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8018a20:	4b10      	ldr	r3, [pc, #64]	; (8018a64 <vTaskSuspend+0xe4>)
 8018a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a26:	601a      	str	r2, [r3, #0]
 8018a28:	f3bf 8f4f 	dsb	sy
 8018a2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a30:	e00b      	b.n	8018a4a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018a32:	4b09      	ldr	r3, [pc, #36]	; (8018a58 <vTaskSuspend+0xd8>)
 8018a34:	681a      	ldr	r2, [r3, #0]
 8018a36:	4b0c      	ldr	r3, [pc, #48]	; (8018a68 <vTaskSuspend+0xe8>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	429a      	cmp	r2, r3
 8018a3c:	d103      	bne.n	8018a46 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8018a3e:	4b05      	ldr	r3, [pc, #20]	; (8018a54 <vTaskSuspend+0xd4>)
 8018a40:	2200      	movs	r2, #0
 8018a42:	601a      	str	r2, [r3, #0]
	}
 8018a44:	e001      	b.n	8018a4a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8018a46:	f000 fa85 	bl	8018f54 <vTaskSwitchContext>
	}
 8018a4a:	bf00      	nop
 8018a4c:	3710      	adds	r7, #16
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}
 8018a52:	bf00      	nop
 8018a54:	24002718 	.word	0x24002718
 8018a58:	24002bd8 	.word	0x24002bd8
 8018a5c:	24002bf8 	.word	0x24002bf8
 8018a60:	24002c14 	.word	0x24002c14
 8018a64:	e000ed04 	.word	0xe000ed04
 8018a68:	24002bec 	.word	0x24002bec

08018a6c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018a6c:	b480      	push	{r7}
 8018a6e:	b087      	sub	sp, #28
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018a74:	2300      	movs	r3, #0
 8018a76:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d10a      	bne.n	8018a98 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a86:	f383 8811 	msr	BASEPRI, r3
 8018a8a:	f3bf 8f6f 	isb	sy
 8018a8e:	f3bf 8f4f 	dsb	sy
 8018a92:	60fb      	str	r3, [r7, #12]
}
 8018a94:	bf00      	nop
 8018a96:	e7fe      	b.n	8018a96 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018a98:	693b      	ldr	r3, [r7, #16]
 8018a9a:	695b      	ldr	r3, [r3, #20]
 8018a9c:	4a0a      	ldr	r2, [pc, #40]	; (8018ac8 <prvTaskIsTaskSuspended+0x5c>)
 8018a9e:	4293      	cmp	r3, r2
 8018aa0:	d10a      	bne.n	8018ab8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aa6:	4a09      	ldr	r2, [pc, #36]	; (8018acc <prvTaskIsTaskSuspended+0x60>)
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	d005      	beq.n	8018ab8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018aac:	693b      	ldr	r3, [r7, #16]
 8018aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d101      	bne.n	8018ab8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018ab8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018aba:	4618      	mov	r0, r3
 8018abc:	371c      	adds	r7, #28
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop
 8018ac8:	24002bd8 	.word	0x24002bd8
 8018acc:	24002bac 	.word	0x24002bac

08018ad0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b084      	sub	sp, #16
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d10a      	bne.n	8018af8 <vTaskResume+0x28>
	__asm volatile
 8018ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ae6:	f383 8811 	msr	BASEPRI, r3
 8018aea:	f3bf 8f6f 	isb	sy
 8018aee:	f3bf 8f4f 	dsb	sy
 8018af2:	60bb      	str	r3, [r7, #8]
}
 8018af4:	bf00      	nop
 8018af6:	e7fe      	b.n	8018af6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018af8:	4b20      	ldr	r3, [pc, #128]	; (8018b7c <vTaskResume+0xac>)
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	68fa      	ldr	r2, [r7, #12]
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d038      	beq.n	8018b74 <vTaskResume+0xa4>
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d035      	beq.n	8018b74 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8018b08:	f001 facc 	bl	801a0a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018b0c:	68f8      	ldr	r0, [r7, #12]
 8018b0e:	f7ff ffad 	bl	8018a6c <prvTaskIsTaskSuspended>
 8018b12:	4603      	mov	r3, r0
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d02b      	beq.n	8018b70 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	3304      	adds	r3, #4
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	f7ff f843 	bl	8017ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b26:	4b16      	ldr	r3, [pc, #88]	; (8018b80 <vTaskResume+0xb0>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	429a      	cmp	r2, r3
 8018b2c:	d903      	bls.n	8018b36 <vTaskResume+0x66>
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b32:	4a13      	ldr	r2, [pc, #76]	; (8018b80 <vTaskResume+0xb0>)
 8018b34:	6013      	str	r3, [r2, #0]
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b3a:	4613      	mov	r3, r2
 8018b3c:	009b      	lsls	r3, r3, #2
 8018b3e:	4413      	add	r3, r2
 8018b40:	009b      	lsls	r3, r3, #2
 8018b42:	4a10      	ldr	r2, [pc, #64]	; (8018b84 <vTaskResume+0xb4>)
 8018b44:	441a      	add	r2, r3
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	3304      	adds	r3, #4
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	4610      	mov	r0, r2
 8018b4e:	f7fe ffce 	bl	8017aee <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b56:	4b09      	ldr	r3, [pc, #36]	; (8018b7c <vTaskResume+0xac>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b5c:	429a      	cmp	r2, r3
 8018b5e:	d307      	bcc.n	8018b70 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018b60:	4b09      	ldr	r3, [pc, #36]	; (8018b88 <vTaskResume+0xb8>)
 8018b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b66:	601a      	str	r2, [r3, #0]
 8018b68:	f3bf 8f4f 	dsb	sy
 8018b6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018b70:	f001 fac8 	bl	801a104 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018b74:	bf00      	nop
 8018b76:	3710      	adds	r7, #16
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	24002718 	.word	0x24002718
 8018b80:	24002bf4 	.word	0x24002bf4
 8018b84:	2400271c 	.word	0x2400271c
 8018b88:	e000ed04 	.word	0xe000ed04

08018b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b08a      	sub	sp, #40	; 0x28
 8018b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018b92:	2300      	movs	r3, #0
 8018b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018b96:	2300      	movs	r3, #0
 8018b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018b9a:	463a      	mov	r2, r7
 8018b9c:	1d39      	adds	r1, r7, #4
 8018b9e:	f107 0308 	add.w	r3, r7, #8
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7fe fcd6 	bl	8017554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018ba8:	6839      	ldr	r1, [r7, #0]
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	68ba      	ldr	r2, [r7, #8]
 8018bae:	9202      	str	r2, [sp, #8]
 8018bb0:	9301      	str	r3, [sp, #4]
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	9300      	str	r3, [sp, #0]
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	460a      	mov	r2, r1
 8018bba:	4921      	ldr	r1, [pc, #132]	; (8018c40 <vTaskStartScheduler+0xb4>)
 8018bbc:	4821      	ldr	r0, [pc, #132]	; (8018c44 <vTaskStartScheduler+0xb8>)
 8018bbe:	f7ff fd09 	bl	80185d4 <xTaskCreateStatic>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	4a20      	ldr	r2, [pc, #128]	; (8018c48 <vTaskStartScheduler+0xbc>)
 8018bc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018bc8:	4b1f      	ldr	r3, [pc, #124]	; (8018c48 <vTaskStartScheduler+0xbc>)
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d002      	beq.n	8018bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	617b      	str	r3, [r7, #20]
 8018bd4:	e001      	b.n	8018bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	2b01      	cmp	r3, #1
 8018bde:	d102      	bne.n	8018be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018be0:	f000 fdc8 	bl	8019774 <xTimerCreateTimerTask>
 8018be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018be6:	697b      	ldr	r3, [r7, #20]
 8018be8:	2b01      	cmp	r3, #1
 8018bea:	d116      	bne.n	8018c1a <vTaskStartScheduler+0x8e>
	__asm volatile
 8018bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bf0:	f383 8811 	msr	BASEPRI, r3
 8018bf4:	f3bf 8f6f 	isb	sy
 8018bf8:	f3bf 8f4f 	dsb	sy
 8018bfc:	613b      	str	r3, [r7, #16]
}
 8018bfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018c00:	4b12      	ldr	r3, [pc, #72]	; (8018c4c <vTaskStartScheduler+0xc0>)
 8018c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018c08:	4b11      	ldr	r3, [pc, #68]	; (8018c50 <vTaskStartScheduler+0xc4>)
 8018c0a:	2201      	movs	r2, #1
 8018c0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018c0e:	4b11      	ldr	r3, [pc, #68]	; (8018c54 <vTaskStartScheduler+0xc8>)
 8018c10:	2200      	movs	r2, #0
 8018c12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018c14:	f001 f9a4 	bl	8019f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018c18:	e00e      	b.n	8018c38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c20:	d10a      	bne.n	8018c38 <vTaskStartScheduler+0xac>
	__asm volatile
 8018c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c26:	f383 8811 	msr	BASEPRI, r3
 8018c2a:	f3bf 8f6f 	isb	sy
 8018c2e:	f3bf 8f4f 	dsb	sy
 8018c32:	60fb      	str	r3, [r7, #12]
}
 8018c34:	bf00      	nop
 8018c36:	e7fe      	b.n	8018c36 <vTaskStartScheduler+0xaa>
}
 8018c38:	bf00      	nop
 8018c3a:	3718      	adds	r7, #24
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	0801b3a0 	.word	0x0801b3a0
 8018c44:	080193d9 	.word	0x080193d9
 8018c48:	24002c10 	.word	0x24002c10
 8018c4c:	24002c0c 	.word	0x24002c0c
 8018c50:	24002bf8 	.word	0x24002bf8
 8018c54:	24002bf0 	.word	0x24002bf0

08018c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018c58:	b480      	push	{r7}
 8018c5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018c5c:	4b04      	ldr	r3, [pc, #16]	; (8018c70 <vTaskSuspendAll+0x18>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	3301      	adds	r3, #1
 8018c62:	4a03      	ldr	r2, [pc, #12]	; (8018c70 <vTaskSuspendAll+0x18>)
 8018c64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018c66:	bf00      	nop
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6e:	4770      	bx	lr
 8018c70:	24002c14 	.word	0x24002c14

08018c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018c82:	4b42      	ldr	r3, [pc, #264]	; (8018d8c <xTaskResumeAll+0x118>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d10a      	bne.n	8018ca0 <xTaskResumeAll+0x2c>
	__asm volatile
 8018c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c8e:	f383 8811 	msr	BASEPRI, r3
 8018c92:	f3bf 8f6f 	isb	sy
 8018c96:	f3bf 8f4f 	dsb	sy
 8018c9a:	603b      	str	r3, [r7, #0]
}
 8018c9c:	bf00      	nop
 8018c9e:	e7fe      	b.n	8018c9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018ca0:	f001 fa00 	bl	801a0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018ca4:	4b39      	ldr	r3, [pc, #228]	; (8018d8c <xTaskResumeAll+0x118>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	3b01      	subs	r3, #1
 8018caa:	4a38      	ldr	r2, [pc, #224]	; (8018d8c <xTaskResumeAll+0x118>)
 8018cac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018cae:	4b37      	ldr	r3, [pc, #220]	; (8018d8c <xTaskResumeAll+0x118>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d162      	bne.n	8018d7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018cb6:	4b36      	ldr	r3, [pc, #216]	; (8018d90 <xTaskResumeAll+0x11c>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d05e      	beq.n	8018d7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018cbe:	e02f      	b.n	8018d20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018cc0:	4b34      	ldr	r3, [pc, #208]	; (8018d94 <xTaskResumeAll+0x120>)
 8018cc2:	68db      	ldr	r3, [r3, #12]
 8018cc4:	68db      	ldr	r3, [r3, #12]
 8018cc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	3318      	adds	r3, #24
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7fe ff6b 	bl	8017ba8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	3304      	adds	r3, #4
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7fe ff66 	bl	8017ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ce0:	4b2d      	ldr	r3, [pc, #180]	; (8018d98 <xTaskResumeAll+0x124>)
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d903      	bls.n	8018cf0 <xTaskResumeAll+0x7c>
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cec:	4a2a      	ldr	r2, [pc, #168]	; (8018d98 <xTaskResumeAll+0x124>)
 8018cee:	6013      	str	r3, [r2, #0]
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cf4:	4613      	mov	r3, r2
 8018cf6:	009b      	lsls	r3, r3, #2
 8018cf8:	4413      	add	r3, r2
 8018cfa:	009b      	lsls	r3, r3, #2
 8018cfc:	4a27      	ldr	r2, [pc, #156]	; (8018d9c <xTaskResumeAll+0x128>)
 8018cfe:	441a      	add	r2, r3
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	3304      	adds	r3, #4
 8018d04:	4619      	mov	r1, r3
 8018d06:	4610      	mov	r0, r2
 8018d08:	f7fe fef1 	bl	8017aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d10:	4b23      	ldr	r3, [pc, #140]	; (8018da0 <xTaskResumeAll+0x12c>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d16:	429a      	cmp	r2, r3
 8018d18:	d302      	bcc.n	8018d20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018d1a:	4b22      	ldr	r3, [pc, #136]	; (8018da4 <xTaskResumeAll+0x130>)
 8018d1c:	2201      	movs	r2, #1
 8018d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d20:	4b1c      	ldr	r3, [pc, #112]	; (8018d94 <xTaskResumeAll+0x120>)
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d1cb      	bne.n	8018cc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d001      	beq.n	8018d32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018d2e:	f000 fc09 	bl	8019544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018d32:	4b1d      	ldr	r3, [pc, #116]	; (8018da8 <xTaskResumeAll+0x134>)
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d010      	beq.n	8018d60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018d3e:	f000 f847 	bl	8018dd0 <xTaskIncrementTick>
 8018d42:	4603      	mov	r3, r0
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d002      	beq.n	8018d4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018d48:	4b16      	ldr	r3, [pc, #88]	; (8018da4 <xTaskResumeAll+0x130>)
 8018d4a:	2201      	movs	r2, #1
 8018d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	3b01      	subs	r3, #1
 8018d52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d1f1      	bne.n	8018d3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018d5a:	4b13      	ldr	r3, [pc, #76]	; (8018da8 <xTaskResumeAll+0x134>)
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018d60:	4b10      	ldr	r3, [pc, #64]	; (8018da4 <xTaskResumeAll+0x130>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d009      	beq.n	8018d7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018d68:	2301      	movs	r3, #1
 8018d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018d6c:	4b0f      	ldr	r3, [pc, #60]	; (8018dac <xTaskResumeAll+0x138>)
 8018d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d72:	601a      	str	r2, [r3, #0]
 8018d74:	f3bf 8f4f 	dsb	sy
 8018d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018d7c:	f001 f9c2 	bl	801a104 <vPortExitCritical>

	return xAlreadyYielded;
 8018d80:	68bb      	ldr	r3, [r7, #8]
}
 8018d82:	4618      	mov	r0, r3
 8018d84:	3710      	adds	r7, #16
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd80      	pop	{r7, pc}
 8018d8a:	bf00      	nop
 8018d8c:	24002c14 	.word	0x24002c14
 8018d90:	24002bec 	.word	0x24002bec
 8018d94:	24002bac 	.word	0x24002bac
 8018d98:	24002bf4 	.word	0x24002bf4
 8018d9c:	2400271c 	.word	0x2400271c
 8018da0:	24002718 	.word	0x24002718
 8018da4:	24002c00 	.word	0x24002c00
 8018da8:	24002bfc 	.word	0x24002bfc
 8018dac:	e000ed04 	.word	0xe000ed04

08018db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018db0:	b480      	push	{r7}
 8018db2:	b083      	sub	sp, #12
 8018db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018db6:	4b05      	ldr	r3, [pc, #20]	; (8018dcc <xTaskGetTickCount+0x1c>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018dbc:	687b      	ldr	r3, [r7, #4]
}
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	370c      	adds	r7, #12
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc8:	4770      	bx	lr
 8018dca:	bf00      	nop
 8018dcc:	24002bf0 	.word	0x24002bf0

08018dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b086      	sub	sp, #24
 8018dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018dda:	4b53      	ldr	r3, [pc, #332]	; (8018f28 <xTaskIncrementTick+0x158>)
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	f040 8095 	bne.w	8018f0e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018de4:	4b51      	ldr	r3, [pc, #324]	; (8018f2c <xTaskIncrementTick+0x15c>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	3301      	adds	r3, #1
 8018dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018dec:	4a4f      	ldr	r2, [pc, #316]	; (8018f2c <xTaskIncrementTick+0x15c>)
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018df2:	693b      	ldr	r3, [r7, #16]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d120      	bne.n	8018e3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018df8:	4b4d      	ldr	r3, [pc, #308]	; (8018f30 <xTaskIncrementTick+0x160>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d00a      	beq.n	8018e18 <xTaskIncrementTick+0x48>
	__asm volatile
 8018e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e06:	f383 8811 	msr	BASEPRI, r3
 8018e0a:	f3bf 8f6f 	isb	sy
 8018e0e:	f3bf 8f4f 	dsb	sy
 8018e12:	603b      	str	r3, [r7, #0]
}
 8018e14:	bf00      	nop
 8018e16:	e7fe      	b.n	8018e16 <xTaskIncrementTick+0x46>
 8018e18:	4b45      	ldr	r3, [pc, #276]	; (8018f30 <xTaskIncrementTick+0x160>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	60fb      	str	r3, [r7, #12]
 8018e1e:	4b45      	ldr	r3, [pc, #276]	; (8018f34 <xTaskIncrementTick+0x164>)
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	4a43      	ldr	r2, [pc, #268]	; (8018f30 <xTaskIncrementTick+0x160>)
 8018e24:	6013      	str	r3, [r2, #0]
 8018e26:	4a43      	ldr	r2, [pc, #268]	; (8018f34 <xTaskIncrementTick+0x164>)
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	6013      	str	r3, [r2, #0]
 8018e2c:	4b42      	ldr	r3, [pc, #264]	; (8018f38 <xTaskIncrementTick+0x168>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	3301      	adds	r3, #1
 8018e32:	4a41      	ldr	r2, [pc, #260]	; (8018f38 <xTaskIncrementTick+0x168>)
 8018e34:	6013      	str	r3, [r2, #0]
 8018e36:	f000 fb85 	bl	8019544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018e3a:	4b40      	ldr	r3, [pc, #256]	; (8018f3c <xTaskIncrementTick+0x16c>)
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	693a      	ldr	r2, [r7, #16]
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d349      	bcc.n	8018ed8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e44:	4b3a      	ldr	r3, [pc, #232]	; (8018f30 <xTaskIncrementTick+0x160>)
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d104      	bne.n	8018e58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e4e:	4b3b      	ldr	r3, [pc, #236]	; (8018f3c <xTaskIncrementTick+0x16c>)
 8018e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e54:	601a      	str	r2, [r3, #0]
					break;
 8018e56:	e03f      	b.n	8018ed8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e58:	4b35      	ldr	r3, [pc, #212]	; (8018f30 <xTaskIncrementTick+0x160>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	68db      	ldr	r3, [r3, #12]
 8018e5e:	68db      	ldr	r3, [r3, #12]
 8018e60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018e62:	68bb      	ldr	r3, [r7, #8]
 8018e64:	685b      	ldr	r3, [r3, #4]
 8018e66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018e68:	693a      	ldr	r2, [r7, #16]
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	d203      	bcs.n	8018e78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018e70:	4a32      	ldr	r2, [pc, #200]	; (8018f3c <xTaskIncrementTick+0x16c>)
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018e76:	e02f      	b.n	8018ed8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e78:	68bb      	ldr	r3, [r7, #8]
 8018e7a:	3304      	adds	r3, #4
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f7fe fe93 	bl	8017ba8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d004      	beq.n	8018e94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	3318      	adds	r3, #24
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7fe fe8a 	bl	8017ba8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e98:	4b29      	ldr	r3, [pc, #164]	; (8018f40 <xTaskIncrementTick+0x170>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	d903      	bls.n	8018ea8 <xTaskIncrementTick+0xd8>
 8018ea0:	68bb      	ldr	r3, [r7, #8]
 8018ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ea4:	4a26      	ldr	r2, [pc, #152]	; (8018f40 <xTaskIncrementTick+0x170>)
 8018ea6:	6013      	str	r3, [r2, #0]
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eac:	4613      	mov	r3, r2
 8018eae:	009b      	lsls	r3, r3, #2
 8018eb0:	4413      	add	r3, r2
 8018eb2:	009b      	lsls	r3, r3, #2
 8018eb4:	4a23      	ldr	r2, [pc, #140]	; (8018f44 <xTaskIncrementTick+0x174>)
 8018eb6:	441a      	add	r2, r3
 8018eb8:	68bb      	ldr	r3, [r7, #8]
 8018eba:	3304      	adds	r3, #4
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	4610      	mov	r0, r2
 8018ec0:	f7fe fe15 	bl	8017aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ec4:	68bb      	ldr	r3, [r7, #8]
 8018ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ec8:	4b1f      	ldr	r3, [pc, #124]	; (8018f48 <xTaskIncrementTick+0x178>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	d3b8      	bcc.n	8018e44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ed6:	e7b5      	b.n	8018e44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018ed8:	4b1b      	ldr	r3, [pc, #108]	; (8018f48 <xTaskIncrementTick+0x178>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ede:	4919      	ldr	r1, [pc, #100]	; (8018f44 <xTaskIncrementTick+0x174>)
 8018ee0:	4613      	mov	r3, r2
 8018ee2:	009b      	lsls	r3, r3, #2
 8018ee4:	4413      	add	r3, r2
 8018ee6:	009b      	lsls	r3, r3, #2
 8018ee8:	440b      	add	r3, r1
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d901      	bls.n	8018ef4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018ef4:	4b15      	ldr	r3, [pc, #84]	; (8018f4c <xTaskIncrementTick+0x17c>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d101      	bne.n	8018f00 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018efc:	f7e9 fade 	bl	80024bc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018f00:	4b13      	ldr	r3, [pc, #76]	; (8018f50 <xTaskIncrementTick+0x180>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d009      	beq.n	8018f1c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018f08:	2301      	movs	r3, #1
 8018f0a:	617b      	str	r3, [r7, #20]
 8018f0c:	e006      	b.n	8018f1c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018f0e:	4b0f      	ldr	r3, [pc, #60]	; (8018f4c <xTaskIncrementTick+0x17c>)
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	3301      	adds	r3, #1
 8018f14:	4a0d      	ldr	r2, [pc, #52]	; (8018f4c <xTaskIncrementTick+0x17c>)
 8018f16:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018f18:	f7e9 fad0 	bl	80024bc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018f1c:	697b      	ldr	r3, [r7, #20]
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	3718      	adds	r7, #24
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}
 8018f26:	bf00      	nop
 8018f28:	24002c14 	.word	0x24002c14
 8018f2c:	24002bf0 	.word	0x24002bf0
 8018f30:	24002ba4 	.word	0x24002ba4
 8018f34:	24002ba8 	.word	0x24002ba8
 8018f38:	24002c04 	.word	0x24002c04
 8018f3c:	24002c0c 	.word	0x24002c0c
 8018f40:	24002bf4 	.word	0x24002bf4
 8018f44:	2400271c 	.word	0x2400271c
 8018f48:	24002718 	.word	0x24002718
 8018f4c:	24002bfc 	.word	0x24002bfc
 8018f50:	24002c00 	.word	0x24002c00

08018f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b084      	sub	sp, #16
 8018f58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018f5a:	4b2f      	ldr	r3, [pc, #188]	; (8019018 <vTaskSwitchContext+0xc4>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d003      	beq.n	8018f6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018f62:	4b2e      	ldr	r3, [pc, #184]	; (801901c <vTaskSwitchContext+0xc8>)
 8018f64:	2201      	movs	r2, #1
 8018f66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018f68:	e052      	b.n	8019010 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018f6a:	4b2c      	ldr	r3, [pc, #176]	; (801901c <vTaskSwitchContext+0xc8>)
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018f70:	4b2b      	ldr	r3, [pc, #172]	; (8019020 <vTaskSwitchContext+0xcc>)
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	4b2a      	ldr	r3, [pc, #168]	; (8019020 <vTaskSwitchContext+0xcc>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	d808      	bhi.n	8018f92 <vTaskSwitchContext+0x3e>
 8018f80:	4b27      	ldr	r3, [pc, #156]	; (8019020 <vTaskSwitchContext+0xcc>)
 8018f82:	681a      	ldr	r2, [r3, #0]
 8018f84:	4b26      	ldr	r3, [pc, #152]	; (8019020 <vTaskSwitchContext+0xcc>)
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	3334      	adds	r3, #52	; 0x34
 8018f8a:	4619      	mov	r1, r3
 8018f8c:	4610      	mov	r0, r2
 8018f8e:	f7e9 faa3 	bl	80024d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f92:	4b24      	ldr	r3, [pc, #144]	; (8019024 <vTaskSwitchContext+0xd0>)
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	60fb      	str	r3, [r7, #12]
 8018f98:	e010      	b.n	8018fbc <vTaskSwitchContext+0x68>
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d10a      	bne.n	8018fb6 <vTaskSwitchContext+0x62>
	__asm volatile
 8018fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa4:	f383 8811 	msr	BASEPRI, r3
 8018fa8:	f3bf 8f6f 	isb	sy
 8018fac:	f3bf 8f4f 	dsb	sy
 8018fb0:	607b      	str	r3, [r7, #4]
}
 8018fb2:	bf00      	nop
 8018fb4:	e7fe      	b.n	8018fb4 <vTaskSwitchContext+0x60>
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	60fb      	str	r3, [r7, #12]
 8018fbc:	491a      	ldr	r1, [pc, #104]	; (8019028 <vTaskSwitchContext+0xd4>)
 8018fbe:	68fa      	ldr	r2, [r7, #12]
 8018fc0:	4613      	mov	r3, r2
 8018fc2:	009b      	lsls	r3, r3, #2
 8018fc4:	4413      	add	r3, r2
 8018fc6:	009b      	lsls	r3, r3, #2
 8018fc8:	440b      	add	r3, r1
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d0e4      	beq.n	8018f9a <vTaskSwitchContext+0x46>
 8018fd0:	68fa      	ldr	r2, [r7, #12]
 8018fd2:	4613      	mov	r3, r2
 8018fd4:	009b      	lsls	r3, r3, #2
 8018fd6:	4413      	add	r3, r2
 8018fd8:	009b      	lsls	r3, r3, #2
 8018fda:	4a13      	ldr	r2, [pc, #76]	; (8019028 <vTaskSwitchContext+0xd4>)
 8018fdc:	4413      	add	r3, r2
 8018fde:	60bb      	str	r3, [r7, #8]
 8018fe0:	68bb      	ldr	r3, [r7, #8]
 8018fe2:	685b      	ldr	r3, [r3, #4]
 8018fe4:	685a      	ldr	r2, [r3, #4]
 8018fe6:	68bb      	ldr	r3, [r7, #8]
 8018fe8:	605a      	str	r2, [r3, #4]
 8018fea:	68bb      	ldr	r3, [r7, #8]
 8018fec:	685a      	ldr	r2, [r3, #4]
 8018fee:	68bb      	ldr	r3, [r7, #8]
 8018ff0:	3308      	adds	r3, #8
 8018ff2:	429a      	cmp	r2, r3
 8018ff4:	d104      	bne.n	8019000 <vTaskSwitchContext+0xac>
 8018ff6:	68bb      	ldr	r3, [r7, #8]
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	685a      	ldr	r2, [r3, #4]
 8018ffc:	68bb      	ldr	r3, [r7, #8]
 8018ffe:	605a      	str	r2, [r3, #4]
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	685b      	ldr	r3, [r3, #4]
 8019004:	68db      	ldr	r3, [r3, #12]
 8019006:	4a06      	ldr	r2, [pc, #24]	; (8019020 <vTaskSwitchContext+0xcc>)
 8019008:	6013      	str	r3, [r2, #0]
 801900a:	4a06      	ldr	r2, [pc, #24]	; (8019024 <vTaskSwitchContext+0xd0>)
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	6013      	str	r3, [r2, #0]
}
 8019010:	bf00      	nop
 8019012:	3710      	adds	r7, #16
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}
 8019018:	24002c14 	.word	0x24002c14
 801901c:	24002c00 	.word	0x24002c00
 8019020:	24002718 	.word	0x24002718
 8019024:	24002bf4 	.word	0x24002bf4
 8019028:	2400271c 	.word	0x2400271c

0801902c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b084      	sub	sp, #16
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
 8019034:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d10a      	bne.n	8019052 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019040:	f383 8811 	msr	BASEPRI, r3
 8019044:	f3bf 8f6f 	isb	sy
 8019048:	f3bf 8f4f 	dsb	sy
 801904c:	60fb      	str	r3, [r7, #12]
}
 801904e:	bf00      	nop
 8019050:	e7fe      	b.n	8019050 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019052:	4b07      	ldr	r3, [pc, #28]	; (8019070 <vTaskPlaceOnEventList+0x44>)
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	3318      	adds	r3, #24
 8019058:	4619      	mov	r1, r3
 801905a:	6878      	ldr	r0, [r7, #4]
 801905c:	f7fe fd6b 	bl	8017b36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019060:	2101      	movs	r1, #1
 8019062:	6838      	ldr	r0, [r7, #0]
 8019064:	f000 fb32 	bl	80196cc <prvAddCurrentTaskToDelayedList>
}
 8019068:	bf00      	nop
 801906a:	3710      	adds	r7, #16
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}
 8019070:	24002718 	.word	0x24002718

08019074 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b086      	sub	sp, #24
 8019078:	af00      	add	r7, sp, #0
 801907a:	60f8      	str	r0, [r7, #12]
 801907c:	60b9      	str	r1, [r7, #8]
 801907e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	2b00      	cmp	r3, #0
 8019084:	d10a      	bne.n	801909c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8019086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801908a:	f383 8811 	msr	BASEPRI, r3
 801908e:	f3bf 8f6f 	isb	sy
 8019092:	f3bf 8f4f 	dsb	sy
 8019096:	617b      	str	r3, [r7, #20]
}
 8019098:	bf00      	nop
 801909a:	e7fe      	b.n	801909a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801909c:	4b11      	ldr	r3, [pc, #68]	; (80190e4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d10a      	bne.n	80190ba <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80190a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190a8:	f383 8811 	msr	BASEPRI, r3
 80190ac:	f3bf 8f6f 	isb	sy
 80190b0:	f3bf 8f4f 	dsb	sy
 80190b4:	613b      	str	r3, [r7, #16]
}
 80190b6:	bf00      	nop
 80190b8:	e7fe      	b.n	80190b8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80190ba:	4b0b      	ldr	r3, [pc, #44]	; (80190e8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	68ba      	ldr	r2, [r7, #8]
 80190c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80190c4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190c6:	4b08      	ldr	r3, [pc, #32]	; (80190e8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	3318      	adds	r3, #24
 80190cc:	4619      	mov	r1, r3
 80190ce:	68f8      	ldr	r0, [r7, #12]
 80190d0:	f7fe fd0d 	bl	8017aee <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80190d4:	2101      	movs	r1, #1
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f000 faf8 	bl	80196cc <prvAddCurrentTaskToDelayedList>
}
 80190dc:	bf00      	nop
 80190de:	3718      	adds	r7, #24
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	24002c14 	.word	0x24002c14
 80190e8:	24002718 	.word	0x24002718

080190ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b086      	sub	sp, #24
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	60f8      	str	r0, [r7, #12]
 80190f4:	60b9      	str	r1, [r7, #8]
 80190f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d10a      	bne.n	8019114 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80190fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019102:	f383 8811 	msr	BASEPRI, r3
 8019106:	f3bf 8f6f 	isb	sy
 801910a:	f3bf 8f4f 	dsb	sy
 801910e:	617b      	str	r3, [r7, #20]
}
 8019110:	bf00      	nop
 8019112:	e7fe      	b.n	8019112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019114:	4b0a      	ldr	r3, [pc, #40]	; (8019140 <vTaskPlaceOnEventListRestricted+0x54>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	3318      	adds	r3, #24
 801911a:	4619      	mov	r1, r3
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	f7fe fce6 	bl	8017aee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d002      	beq.n	801912e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801912c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801912e:	6879      	ldr	r1, [r7, #4]
 8019130:	68b8      	ldr	r0, [r7, #8]
 8019132:	f000 facb 	bl	80196cc <prvAddCurrentTaskToDelayedList>
	}
 8019136:	bf00      	nop
 8019138:	3718      	adds	r7, #24
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	24002718 	.word	0x24002718

08019144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b086      	sub	sp, #24
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	68db      	ldr	r3, [r3, #12]
 8019150:	68db      	ldr	r3, [r3, #12]
 8019152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019154:	693b      	ldr	r3, [r7, #16]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d10a      	bne.n	8019170 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801915e:	f383 8811 	msr	BASEPRI, r3
 8019162:	f3bf 8f6f 	isb	sy
 8019166:	f3bf 8f4f 	dsb	sy
 801916a:	60fb      	str	r3, [r7, #12]
}
 801916c:	bf00      	nop
 801916e:	e7fe      	b.n	801916e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019170:	693b      	ldr	r3, [r7, #16]
 8019172:	3318      	adds	r3, #24
 8019174:	4618      	mov	r0, r3
 8019176:	f7fe fd17 	bl	8017ba8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801917a:	4b1e      	ldr	r3, [pc, #120]	; (80191f4 <xTaskRemoveFromEventList+0xb0>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d11d      	bne.n	80191be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019182:	693b      	ldr	r3, [r7, #16]
 8019184:	3304      	adds	r3, #4
 8019186:	4618      	mov	r0, r3
 8019188:	f7fe fd0e 	bl	8017ba8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019190:	4b19      	ldr	r3, [pc, #100]	; (80191f8 <xTaskRemoveFromEventList+0xb4>)
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	429a      	cmp	r2, r3
 8019196:	d903      	bls.n	80191a0 <xTaskRemoveFromEventList+0x5c>
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801919c:	4a16      	ldr	r2, [pc, #88]	; (80191f8 <xTaskRemoveFromEventList+0xb4>)
 801919e:	6013      	str	r3, [r2, #0]
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191a4:	4613      	mov	r3, r2
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	4413      	add	r3, r2
 80191aa:	009b      	lsls	r3, r3, #2
 80191ac:	4a13      	ldr	r2, [pc, #76]	; (80191fc <xTaskRemoveFromEventList+0xb8>)
 80191ae:	441a      	add	r2, r3
 80191b0:	693b      	ldr	r3, [r7, #16]
 80191b2:	3304      	adds	r3, #4
 80191b4:	4619      	mov	r1, r3
 80191b6:	4610      	mov	r0, r2
 80191b8:	f7fe fc99 	bl	8017aee <vListInsertEnd>
 80191bc:	e005      	b.n	80191ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80191be:	693b      	ldr	r3, [r7, #16]
 80191c0:	3318      	adds	r3, #24
 80191c2:	4619      	mov	r1, r3
 80191c4:	480e      	ldr	r0, [pc, #56]	; (8019200 <xTaskRemoveFromEventList+0xbc>)
 80191c6:	f7fe fc92 	bl	8017aee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80191ca:	693b      	ldr	r3, [r7, #16]
 80191cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191ce:	4b0d      	ldr	r3, [pc, #52]	; (8019204 <xTaskRemoveFromEventList+0xc0>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191d4:	429a      	cmp	r2, r3
 80191d6:	d905      	bls.n	80191e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80191d8:	2301      	movs	r3, #1
 80191da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80191dc:	4b0a      	ldr	r3, [pc, #40]	; (8019208 <xTaskRemoveFromEventList+0xc4>)
 80191de:	2201      	movs	r2, #1
 80191e0:	601a      	str	r2, [r3, #0]
 80191e2:	e001      	b.n	80191e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80191e4:	2300      	movs	r3, #0
 80191e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80191e8:	697b      	ldr	r3, [r7, #20]
}
 80191ea:	4618      	mov	r0, r3
 80191ec:	3718      	adds	r7, #24
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}
 80191f2:	bf00      	nop
 80191f4:	24002c14 	.word	0x24002c14
 80191f8:	24002bf4 	.word	0x24002bf4
 80191fc:	2400271c 	.word	0x2400271c
 8019200:	24002bac 	.word	0x24002bac
 8019204:	24002718 	.word	0x24002718
 8019208:	24002c00 	.word	0x24002c00

0801920c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b086      	sub	sp, #24
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8019216:	4b29      	ldr	r3, [pc, #164]	; (80192bc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d10a      	bne.n	8019234 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019222:	f383 8811 	msr	BASEPRI, r3
 8019226:	f3bf 8f6f 	isb	sy
 801922a:	f3bf 8f4f 	dsb	sy
 801922e:	613b      	str	r3, [r7, #16]
}
 8019230:	bf00      	nop
 8019232:	e7fe      	b.n	8019232 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8019234:	683b      	ldr	r3, [r7, #0]
 8019236:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d10a      	bne.n	8019260 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801924e:	f383 8811 	msr	BASEPRI, r3
 8019252:	f3bf 8f6f 	isb	sy
 8019256:	f3bf 8f4f 	dsb	sy
 801925a:	60fb      	str	r3, [r7, #12]
}
 801925c:	bf00      	nop
 801925e:	e7fe      	b.n	801925e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7fe fca1 	bl	8017ba8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	3304      	adds	r3, #4
 801926a:	4618      	mov	r0, r3
 801926c:	f7fe fc9c 	bl	8017ba8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8019270:	697b      	ldr	r3, [r7, #20]
 8019272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019274:	4b12      	ldr	r3, [pc, #72]	; (80192c0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	429a      	cmp	r2, r3
 801927a:	d903      	bls.n	8019284 <vTaskRemoveFromUnorderedEventList+0x78>
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019280:	4a0f      	ldr	r2, [pc, #60]	; (80192c0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019282:	6013      	str	r3, [r2, #0]
 8019284:	697b      	ldr	r3, [r7, #20]
 8019286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019288:	4613      	mov	r3, r2
 801928a:	009b      	lsls	r3, r3, #2
 801928c:	4413      	add	r3, r2
 801928e:	009b      	lsls	r3, r3, #2
 8019290:	4a0c      	ldr	r2, [pc, #48]	; (80192c4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8019292:	441a      	add	r2, r3
 8019294:	697b      	ldr	r3, [r7, #20]
 8019296:	3304      	adds	r3, #4
 8019298:	4619      	mov	r1, r3
 801929a:	4610      	mov	r0, r2
 801929c:	f7fe fc27 	bl	8017aee <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80192a0:	697b      	ldr	r3, [r7, #20]
 80192a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192a4:	4b08      	ldr	r3, [pc, #32]	; (80192c8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d902      	bls.n	80192b4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80192ae:	4b07      	ldr	r3, [pc, #28]	; (80192cc <vTaskRemoveFromUnorderedEventList+0xc0>)
 80192b0:	2201      	movs	r2, #1
 80192b2:	601a      	str	r2, [r3, #0]
	}
}
 80192b4:	bf00      	nop
 80192b6:	3718      	adds	r7, #24
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	24002c14 	.word	0x24002c14
 80192c0:	24002bf4 	.word	0x24002bf4
 80192c4:	2400271c 	.word	0x2400271c
 80192c8:	24002718 	.word	0x24002718
 80192cc:	24002c00 	.word	0x24002c00

080192d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80192d0:	b480      	push	{r7}
 80192d2:	b083      	sub	sp, #12
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80192d8:	4b06      	ldr	r3, [pc, #24]	; (80192f4 <vTaskInternalSetTimeOutState+0x24>)
 80192da:	681a      	ldr	r2, [r3, #0]
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80192e0:	4b05      	ldr	r3, [pc, #20]	; (80192f8 <vTaskInternalSetTimeOutState+0x28>)
 80192e2:	681a      	ldr	r2, [r3, #0]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	605a      	str	r2, [r3, #4]
}
 80192e8:	bf00      	nop
 80192ea:	370c      	adds	r7, #12
 80192ec:	46bd      	mov	sp, r7
 80192ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f2:	4770      	bx	lr
 80192f4:	24002c04 	.word	0x24002c04
 80192f8:	24002bf0 	.word	0x24002bf0

080192fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b088      	sub	sp, #32
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d10a      	bne.n	8019322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019310:	f383 8811 	msr	BASEPRI, r3
 8019314:	f3bf 8f6f 	isb	sy
 8019318:	f3bf 8f4f 	dsb	sy
 801931c:	613b      	str	r3, [r7, #16]
}
 801931e:	bf00      	nop
 8019320:	e7fe      	b.n	8019320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d10a      	bne.n	801933e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801932c:	f383 8811 	msr	BASEPRI, r3
 8019330:	f3bf 8f6f 	isb	sy
 8019334:	f3bf 8f4f 	dsb	sy
 8019338:	60fb      	str	r3, [r7, #12]
}
 801933a:	bf00      	nop
 801933c:	e7fe      	b.n	801933c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801933e:	f000 feb1 	bl	801a0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019342:	4b1d      	ldr	r3, [pc, #116]	; (80193b8 <xTaskCheckForTimeOut+0xbc>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	69ba      	ldr	r2, [r7, #24]
 801934e:	1ad3      	subs	r3, r2, r3
 8019350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801935a:	d102      	bne.n	8019362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801935c:	2300      	movs	r3, #0
 801935e:	61fb      	str	r3, [r7, #28]
 8019360:	e023      	b.n	80193aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	4b15      	ldr	r3, [pc, #84]	; (80193bc <xTaskCheckForTimeOut+0xc0>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	429a      	cmp	r2, r3
 801936c:	d007      	beq.n	801937e <xTaskCheckForTimeOut+0x82>
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	685b      	ldr	r3, [r3, #4]
 8019372:	69ba      	ldr	r2, [r7, #24]
 8019374:	429a      	cmp	r2, r3
 8019376:	d302      	bcc.n	801937e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019378:	2301      	movs	r3, #1
 801937a:	61fb      	str	r3, [r7, #28]
 801937c:	e015      	b.n	80193aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	697a      	ldr	r2, [r7, #20]
 8019384:	429a      	cmp	r2, r3
 8019386:	d20b      	bcs.n	80193a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019388:	683b      	ldr	r3, [r7, #0]
 801938a:	681a      	ldr	r2, [r3, #0]
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	1ad2      	subs	r2, r2, r3
 8019390:	683b      	ldr	r3, [r7, #0]
 8019392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019394:	6878      	ldr	r0, [r7, #4]
 8019396:	f7ff ff9b 	bl	80192d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801939a:	2300      	movs	r3, #0
 801939c:	61fb      	str	r3, [r7, #28]
 801939e:	e004      	b.n	80193aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	2200      	movs	r2, #0
 80193a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80193a6:	2301      	movs	r3, #1
 80193a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80193aa:	f000 feab 	bl	801a104 <vPortExitCritical>

	return xReturn;
 80193ae:	69fb      	ldr	r3, [r7, #28]
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	3720      	adds	r7, #32
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}
 80193b8:	24002bf0 	.word	0x24002bf0
 80193bc:	24002c04 	.word	0x24002c04

080193c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80193c0:	b480      	push	{r7}
 80193c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80193c4:	4b03      	ldr	r3, [pc, #12]	; (80193d4 <vTaskMissedYield+0x14>)
 80193c6:	2201      	movs	r2, #1
 80193c8:	601a      	str	r2, [r3, #0]
}
 80193ca:	bf00      	nop
 80193cc:	46bd      	mov	sp, r7
 80193ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d2:	4770      	bx	lr
 80193d4:	24002c00 	.word	0x24002c00

080193d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80193e0:	f000 f852 	bl	8019488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80193e4:	4b06      	ldr	r3, [pc, #24]	; (8019400 <prvIdleTask+0x28>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2b01      	cmp	r3, #1
 80193ea:	d9f9      	bls.n	80193e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80193ec:	4b05      	ldr	r3, [pc, #20]	; (8019404 <prvIdleTask+0x2c>)
 80193ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193f2:	601a      	str	r2, [r3, #0]
 80193f4:	f3bf 8f4f 	dsb	sy
 80193f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80193fc:	e7f0      	b.n	80193e0 <prvIdleTask+0x8>
 80193fe:	bf00      	nop
 8019400:	2400271c 	.word	0x2400271c
 8019404:	e000ed04 	.word	0xe000ed04

08019408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801940e:	2300      	movs	r3, #0
 8019410:	607b      	str	r3, [r7, #4]
 8019412:	e00c      	b.n	801942e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	4613      	mov	r3, r2
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	4413      	add	r3, r2
 801941c:	009b      	lsls	r3, r3, #2
 801941e:	4a12      	ldr	r2, [pc, #72]	; (8019468 <prvInitialiseTaskLists+0x60>)
 8019420:	4413      	add	r3, r2
 8019422:	4618      	mov	r0, r3
 8019424:	f7fe fb36 	bl	8017a94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	3301      	adds	r3, #1
 801942c:	607b      	str	r3, [r7, #4]
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	2b37      	cmp	r3, #55	; 0x37
 8019432:	d9ef      	bls.n	8019414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019434:	480d      	ldr	r0, [pc, #52]	; (801946c <prvInitialiseTaskLists+0x64>)
 8019436:	f7fe fb2d 	bl	8017a94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801943a:	480d      	ldr	r0, [pc, #52]	; (8019470 <prvInitialiseTaskLists+0x68>)
 801943c:	f7fe fb2a 	bl	8017a94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019440:	480c      	ldr	r0, [pc, #48]	; (8019474 <prvInitialiseTaskLists+0x6c>)
 8019442:	f7fe fb27 	bl	8017a94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019446:	480c      	ldr	r0, [pc, #48]	; (8019478 <prvInitialiseTaskLists+0x70>)
 8019448:	f7fe fb24 	bl	8017a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801944c:	480b      	ldr	r0, [pc, #44]	; (801947c <prvInitialiseTaskLists+0x74>)
 801944e:	f7fe fb21 	bl	8017a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019452:	4b0b      	ldr	r3, [pc, #44]	; (8019480 <prvInitialiseTaskLists+0x78>)
 8019454:	4a05      	ldr	r2, [pc, #20]	; (801946c <prvInitialiseTaskLists+0x64>)
 8019456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019458:	4b0a      	ldr	r3, [pc, #40]	; (8019484 <prvInitialiseTaskLists+0x7c>)
 801945a:	4a05      	ldr	r2, [pc, #20]	; (8019470 <prvInitialiseTaskLists+0x68>)
 801945c:	601a      	str	r2, [r3, #0]
}
 801945e:	bf00      	nop
 8019460:	3708      	adds	r7, #8
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	bf00      	nop
 8019468:	2400271c 	.word	0x2400271c
 801946c:	24002b7c 	.word	0x24002b7c
 8019470:	24002b90 	.word	0x24002b90
 8019474:	24002bac 	.word	0x24002bac
 8019478:	24002bc0 	.word	0x24002bc0
 801947c:	24002bd8 	.word	0x24002bd8
 8019480:	24002ba4 	.word	0x24002ba4
 8019484:	24002ba8 	.word	0x24002ba8

08019488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b082      	sub	sp, #8
 801948c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801948e:	e019      	b.n	80194c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019490:	f000 fe08 	bl	801a0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019494:	4b10      	ldr	r3, [pc, #64]	; (80194d8 <prvCheckTasksWaitingTermination+0x50>)
 8019496:	68db      	ldr	r3, [r3, #12]
 8019498:	68db      	ldr	r3, [r3, #12]
 801949a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	3304      	adds	r3, #4
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7fe fb81 	bl	8017ba8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80194a6:	4b0d      	ldr	r3, [pc, #52]	; (80194dc <prvCheckTasksWaitingTermination+0x54>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	3b01      	subs	r3, #1
 80194ac:	4a0b      	ldr	r2, [pc, #44]	; (80194dc <prvCheckTasksWaitingTermination+0x54>)
 80194ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80194b0:	4b0b      	ldr	r3, [pc, #44]	; (80194e0 <prvCheckTasksWaitingTermination+0x58>)
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	3b01      	subs	r3, #1
 80194b6:	4a0a      	ldr	r2, [pc, #40]	; (80194e0 <prvCheckTasksWaitingTermination+0x58>)
 80194b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80194ba:	f000 fe23 	bl	801a104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80194be:	6878      	ldr	r0, [r7, #4]
 80194c0:	f000 f810 	bl	80194e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194c4:	4b06      	ldr	r3, [pc, #24]	; (80194e0 <prvCheckTasksWaitingTermination+0x58>)
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d1e1      	bne.n	8019490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80194cc:	bf00      	nop
 80194ce:	bf00      	nop
 80194d0:	3708      	adds	r7, #8
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd80      	pop	{r7, pc}
 80194d6:	bf00      	nop
 80194d8:	24002bc0 	.word	0x24002bc0
 80194dc:	24002bec 	.word	0x24002bec
 80194e0:	24002bd4 	.word	0x24002bd4

080194e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d108      	bne.n	8019508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194fa:	4618      	mov	r0, r3
 80194fc:	f000 ffc0 	bl	801a480 <vPortFree>
				vPortFree( pxTCB );
 8019500:	6878      	ldr	r0, [r7, #4]
 8019502:	f000 ffbd 	bl	801a480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019506:	e018      	b.n	801953a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801950e:	2b01      	cmp	r3, #1
 8019510:	d103      	bne.n	801951a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019512:	6878      	ldr	r0, [r7, #4]
 8019514:	f000 ffb4 	bl	801a480 <vPortFree>
	}
 8019518:	e00f      	b.n	801953a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019520:	2b02      	cmp	r3, #2
 8019522:	d00a      	beq.n	801953a <prvDeleteTCB+0x56>
	__asm volatile
 8019524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019528:	f383 8811 	msr	BASEPRI, r3
 801952c:	f3bf 8f6f 	isb	sy
 8019530:	f3bf 8f4f 	dsb	sy
 8019534:	60fb      	str	r3, [r7, #12]
}
 8019536:	bf00      	nop
 8019538:	e7fe      	b.n	8019538 <prvDeleteTCB+0x54>
	}
 801953a:	bf00      	nop
 801953c:	3710      	adds	r7, #16
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}
	...

08019544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019544:	b480      	push	{r7}
 8019546:	b083      	sub	sp, #12
 8019548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801954a:	4b0c      	ldr	r3, [pc, #48]	; (801957c <prvResetNextTaskUnblockTime+0x38>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d104      	bne.n	801955e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019554:	4b0a      	ldr	r3, [pc, #40]	; (8019580 <prvResetNextTaskUnblockTime+0x3c>)
 8019556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801955a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801955c:	e008      	b.n	8019570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801955e:	4b07      	ldr	r3, [pc, #28]	; (801957c <prvResetNextTaskUnblockTime+0x38>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	68db      	ldr	r3, [r3, #12]
 8019564:	68db      	ldr	r3, [r3, #12]
 8019566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	4a04      	ldr	r2, [pc, #16]	; (8019580 <prvResetNextTaskUnblockTime+0x3c>)
 801956e:	6013      	str	r3, [r2, #0]
}
 8019570:	bf00      	nop
 8019572:	370c      	adds	r7, #12
 8019574:	46bd      	mov	sp, r7
 8019576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801957a:	4770      	bx	lr
 801957c:	24002ba4 	.word	0x24002ba4
 8019580:	24002c0c 	.word	0x24002c0c

08019584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019584:	b480      	push	{r7}
 8019586:	b083      	sub	sp, #12
 8019588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801958a:	4b0b      	ldr	r3, [pc, #44]	; (80195b8 <xTaskGetSchedulerState+0x34>)
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d102      	bne.n	8019598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019592:	2301      	movs	r3, #1
 8019594:	607b      	str	r3, [r7, #4]
 8019596:	e008      	b.n	80195aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019598:	4b08      	ldr	r3, [pc, #32]	; (80195bc <xTaskGetSchedulerState+0x38>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	2b00      	cmp	r3, #0
 801959e:	d102      	bne.n	80195a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80195a0:	2302      	movs	r3, #2
 80195a2:	607b      	str	r3, [r7, #4]
 80195a4:	e001      	b.n	80195aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80195a6:	2300      	movs	r3, #0
 80195a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80195aa:	687b      	ldr	r3, [r7, #4]
	}
 80195ac:	4618      	mov	r0, r3
 80195ae:	370c      	adds	r7, #12
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr
 80195b8:	24002bf8 	.word	0x24002bf8
 80195bc:	24002c14 	.word	0x24002c14

080195c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b086      	sub	sp, #24
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80195cc:	2300      	movs	r3, #0
 80195ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d056      	beq.n	8019684 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80195d6:	4b2e      	ldr	r3, [pc, #184]	; (8019690 <xTaskPriorityDisinherit+0xd0>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	693a      	ldr	r2, [r7, #16]
 80195dc:	429a      	cmp	r2, r3
 80195de:	d00a      	beq.n	80195f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80195e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e4:	f383 8811 	msr	BASEPRI, r3
 80195e8:	f3bf 8f6f 	isb	sy
 80195ec:	f3bf 8f4f 	dsb	sy
 80195f0:	60fb      	str	r3, [r7, #12]
}
 80195f2:	bf00      	nop
 80195f4:	e7fe      	b.n	80195f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80195f6:	693b      	ldr	r3, [r7, #16]
 80195f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d10a      	bne.n	8019614 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80195fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019602:	f383 8811 	msr	BASEPRI, r3
 8019606:	f3bf 8f6f 	isb	sy
 801960a:	f3bf 8f4f 	dsb	sy
 801960e:	60bb      	str	r3, [r7, #8]
}
 8019610:	bf00      	nop
 8019612:	e7fe      	b.n	8019612 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019614:	693b      	ldr	r3, [r7, #16]
 8019616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019618:	1e5a      	subs	r2, r3, #1
 801961a:	693b      	ldr	r3, [r7, #16]
 801961c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801961e:	693b      	ldr	r3, [r7, #16]
 8019620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019622:	693b      	ldr	r3, [r7, #16]
 8019624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019626:	429a      	cmp	r2, r3
 8019628:	d02c      	beq.n	8019684 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801962a:	693b      	ldr	r3, [r7, #16]
 801962c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801962e:	2b00      	cmp	r3, #0
 8019630:	d128      	bne.n	8019684 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019632:	693b      	ldr	r3, [r7, #16]
 8019634:	3304      	adds	r3, #4
 8019636:	4618      	mov	r0, r3
 8019638:	f7fe fab6 	bl	8017ba8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801963c:	693b      	ldr	r3, [r7, #16]
 801963e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019640:	693b      	ldr	r3, [r7, #16]
 8019642:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019644:	693b      	ldr	r3, [r7, #16]
 8019646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019648:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801964c:	693b      	ldr	r3, [r7, #16]
 801964e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019654:	4b0f      	ldr	r3, [pc, #60]	; (8019694 <xTaskPriorityDisinherit+0xd4>)
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	429a      	cmp	r2, r3
 801965a:	d903      	bls.n	8019664 <xTaskPriorityDisinherit+0xa4>
 801965c:	693b      	ldr	r3, [r7, #16]
 801965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019660:	4a0c      	ldr	r2, [pc, #48]	; (8019694 <xTaskPriorityDisinherit+0xd4>)
 8019662:	6013      	str	r3, [r2, #0]
 8019664:	693b      	ldr	r3, [r7, #16]
 8019666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019668:	4613      	mov	r3, r2
 801966a:	009b      	lsls	r3, r3, #2
 801966c:	4413      	add	r3, r2
 801966e:	009b      	lsls	r3, r3, #2
 8019670:	4a09      	ldr	r2, [pc, #36]	; (8019698 <xTaskPriorityDisinherit+0xd8>)
 8019672:	441a      	add	r2, r3
 8019674:	693b      	ldr	r3, [r7, #16]
 8019676:	3304      	adds	r3, #4
 8019678:	4619      	mov	r1, r3
 801967a:	4610      	mov	r0, r2
 801967c:	f7fe fa37 	bl	8017aee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019680:	2301      	movs	r3, #1
 8019682:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019684:	697b      	ldr	r3, [r7, #20]
	}
 8019686:	4618      	mov	r0, r3
 8019688:	3718      	adds	r7, #24
 801968a:	46bd      	mov	sp, r7
 801968c:	bd80      	pop	{r7, pc}
 801968e:	bf00      	nop
 8019690:	24002718 	.word	0x24002718
 8019694:	24002bf4 	.word	0x24002bf4
 8019698:	2400271c 	.word	0x2400271c

0801969c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801969c:	b480      	push	{r7}
 801969e:	b083      	sub	sp, #12
 80196a0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80196a2:	4b09      	ldr	r3, [pc, #36]	; (80196c8 <uxTaskResetEventItemValue+0x2c>)
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	699b      	ldr	r3, [r3, #24]
 80196a8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196aa:	4b07      	ldr	r3, [pc, #28]	; (80196c8 <uxTaskResetEventItemValue+0x2c>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196b0:	4b05      	ldr	r3, [pc, #20]	; (80196c8 <uxTaskResetEventItemValue+0x2c>)
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80196b8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80196ba:	687b      	ldr	r3, [r7, #4]
}
 80196bc:	4618      	mov	r0, r3
 80196be:	370c      	adds	r7, #12
 80196c0:	46bd      	mov	sp, r7
 80196c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c6:	4770      	bx	lr
 80196c8:	24002718 	.word	0x24002718

080196cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b084      	sub	sp, #16
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
 80196d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80196d6:	4b21      	ldr	r3, [pc, #132]	; (801975c <prvAddCurrentTaskToDelayedList+0x90>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80196dc:	4b20      	ldr	r3, [pc, #128]	; (8019760 <prvAddCurrentTaskToDelayedList+0x94>)
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	3304      	adds	r3, #4
 80196e2:	4618      	mov	r0, r3
 80196e4:	f7fe fa60 	bl	8017ba8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80196ee:	d10a      	bne.n	8019706 <prvAddCurrentTaskToDelayedList+0x3a>
 80196f0:	683b      	ldr	r3, [r7, #0]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d007      	beq.n	8019706 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80196f6:	4b1a      	ldr	r3, [pc, #104]	; (8019760 <prvAddCurrentTaskToDelayedList+0x94>)
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	3304      	adds	r3, #4
 80196fc:	4619      	mov	r1, r3
 80196fe:	4819      	ldr	r0, [pc, #100]	; (8019764 <prvAddCurrentTaskToDelayedList+0x98>)
 8019700:	f7fe f9f5 	bl	8017aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019704:	e026      	b.n	8019754 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019706:	68fa      	ldr	r2, [r7, #12]
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	4413      	add	r3, r2
 801970c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801970e:	4b14      	ldr	r3, [pc, #80]	; (8019760 <prvAddCurrentTaskToDelayedList+0x94>)
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	68ba      	ldr	r2, [r7, #8]
 8019714:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019716:	68ba      	ldr	r2, [r7, #8]
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	429a      	cmp	r2, r3
 801971c:	d209      	bcs.n	8019732 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801971e:	4b12      	ldr	r3, [pc, #72]	; (8019768 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019720:	681a      	ldr	r2, [r3, #0]
 8019722:	4b0f      	ldr	r3, [pc, #60]	; (8019760 <prvAddCurrentTaskToDelayedList+0x94>)
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	3304      	adds	r3, #4
 8019728:	4619      	mov	r1, r3
 801972a:	4610      	mov	r0, r2
 801972c:	f7fe fa03 	bl	8017b36 <vListInsert>
}
 8019730:	e010      	b.n	8019754 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019732:	4b0e      	ldr	r3, [pc, #56]	; (801976c <prvAddCurrentTaskToDelayedList+0xa0>)
 8019734:	681a      	ldr	r2, [r3, #0]
 8019736:	4b0a      	ldr	r3, [pc, #40]	; (8019760 <prvAddCurrentTaskToDelayedList+0x94>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	3304      	adds	r3, #4
 801973c:	4619      	mov	r1, r3
 801973e:	4610      	mov	r0, r2
 8019740:	f7fe f9f9 	bl	8017b36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019744:	4b0a      	ldr	r3, [pc, #40]	; (8019770 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	68ba      	ldr	r2, [r7, #8]
 801974a:	429a      	cmp	r2, r3
 801974c:	d202      	bcs.n	8019754 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801974e:	4a08      	ldr	r2, [pc, #32]	; (8019770 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	6013      	str	r3, [r2, #0]
}
 8019754:	bf00      	nop
 8019756:	3710      	adds	r7, #16
 8019758:	46bd      	mov	sp, r7
 801975a:	bd80      	pop	{r7, pc}
 801975c:	24002bf0 	.word	0x24002bf0
 8019760:	24002718 	.word	0x24002718
 8019764:	24002bd8 	.word	0x24002bd8
 8019768:	24002ba8 	.word	0x24002ba8
 801976c:	24002ba4 	.word	0x24002ba4
 8019770:	24002c0c 	.word	0x24002c0c

08019774 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b08a      	sub	sp, #40	; 0x28
 8019778:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801977a:	2300      	movs	r3, #0
 801977c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801977e:	f000 fb07 	bl	8019d90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019782:	4b1c      	ldr	r3, [pc, #112]	; (80197f4 <xTimerCreateTimerTask+0x80>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d021      	beq.n	80197ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801978a:	2300      	movs	r3, #0
 801978c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801978e:	2300      	movs	r3, #0
 8019790:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019792:	1d3a      	adds	r2, r7, #4
 8019794:	f107 0108 	add.w	r1, r7, #8
 8019798:	f107 030c 	add.w	r3, r7, #12
 801979c:	4618      	mov	r0, r3
 801979e:	f7fd fef3 	bl	8017588 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80197a2:	6879      	ldr	r1, [r7, #4]
 80197a4:	68bb      	ldr	r3, [r7, #8]
 80197a6:	68fa      	ldr	r2, [r7, #12]
 80197a8:	9202      	str	r2, [sp, #8]
 80197aa:	9301      	str	r3, [sp, #4]
 80197ac:	2302      	movs	r3, #2
 80197ae:	9300      	str	r3, [sp, #0]
 80197b0:	2300      	movs	r3, #0
 80197b2:	460a      	mov	r2, r1
 80197b4:	4910      	ldr	r1, [pc, #64]	; (80197f8 <xTimerCreateTimerTask+0x84>)
 80197b6:	4811      	ldr	r0, [pc, #68]	; (80197fc <xTimerCreateTimerTask+0x88>)
 80197b8:	f7fe ff0c 	bl	80185d4 <xTaskCreateStatic>
 80197bc:	4603      	mov	r3, r0
 80197be:	4a10      	ldr	r2, [pc, #64]	; (8019800 <xTimerCreateTimerTask+0x8c>)
 80197c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80197c2:	4b0f      	ldr	r3, [pc, #60]	; (8019800 <xTimerCreateTimerTask+0x8c>)
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d001      	beq.n	80197ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80197ca:	2301      	movs	r3, #1
 80197cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d10a      	bne.n	80197ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80197d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197d8:	f383 8811 	msr	BASEPRI, r3
 80197dc:	f3bf 8f6f 	isb	sy
 80197e0:	f3bf 8f4f 	dsb	sy
 80197e4:	613b      	str	r3, [r7, #16]
}
 80197e6:	bf00      	nop
 80197e8:	e7fe      	b.n	80197e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80197ea:	697b      	ldr	r3, [r7, #20]
}
 80197ec:	4618      	mov	r0, r3
 80197ee:	3718      	adds	r7, #24
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}
 80197f4:	24002c48 	.word	0x24002c48
 80197f8:	0801b3a8 	.word	0x0801b3a8
 80197fc:	08019939 	.word	0x08019939
 8019800:	24002c4c 	.word	0x24002c4c

08019804 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b08a      	sub	sp, #40	; 0x28
 8019808:	af00      	add	r7, sp, #0
 801980a:	60f8      	str	r0, [r7, #12]
 801980c:	60b9      	str	r1, [r7, #8]
 801980e:	607a      	str	r2, [r7, #4]
 8019810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019812:	2300      	movs	r3, #0
 8019814:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d10a      	bne.n	8019832 <xTimerGenericCommand+0x2e>
	__asm volatile
 801981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019820:	f383 8811 	msr	BASEPRI, r3
 8019824:	f3bf 8f6f 	isb	sy
 8019828:	f3bf 8f4f 	dsb	sy
 801982c:	623b      	str	r3, [r7, #32]
}
 801982e:	bf00      	nop
 8019830:	e7fe      	b.n	8019830 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019832:	4b1a      	ldr	r3, [pc, #104]	; (801989c <xTimerGenericCommand+0x98>)
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d02a      	beq.n	8019890 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801983a:	68bb      	ldr	r3, [r7, #8]
 801983c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019846:	68bb      	ldr	r3, [r7, #8]
 8019848:	2b05      	cmp	r3, #5
 801984a:	dc18      	bgt.n	801987e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801984c:	f7ff fe9a 	bl	8019584 <xTaskGetSchedulerState>
 8019850:	4603      	mov	r3, r0
 8019852:	2b02      	cmp	r3, #2
 8019854:	d109      	bne.n	801986a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019856:	4b11      	ldr	r3, [pc, #68]	; (801989c <xTimerGenericCommand+0x98>)
 8019858:	6818      	ldr	r0, [r3, #0]
 801985a:	f107 0110 	add.w	r1, r7, #16
 801985e:	2300      	movs	r3, #0
 8019860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019862:	f7fe facf 	bl	8017e04 <xQueueGenericSend>
 8019866:	6278      	str	r0, [r7, #36]	; 0x24
 8019868:	e012      	b.n	8019890 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801986a:	4b0c      	ldr	r3, [pc, #48]	; (801989c <xTimerGenericCommand+0x98>)
 801986c:	6818      	ldr	r0, [r3, #0]
 801986e:	f107 0110 	add.w	r1, r7, #16
 8019872:	2300      	movs	r3, #0
 8019874:	2200      	movs	r2, #0
 8019876:	f7fe fac5 	bl	8017e04 <xQueueGenericSend>
 801987a:	6278      	str	r0, [r7, #36]	; 0x24
 801987c:	e008      	b.n	8019890 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801987e:	4b07      	ldr	r3, [pc, #28]	; (801989c <xTimerGenericCommand+0x98>)
 8019880:	6818      	ldr	r0, [r3, #0]
 8019882:	f107 0110 	add.w	r1, r7, #16
 8019886:	2300      	movs	r3, #0
 8019888:	683a      	ldr	r2, [r7, #0]
 801988a:	f7fe fbb9 	bl	8018000 <xQueueGenericSendFromISR>
 801988e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019892:	4618      	mov	r0, r3
 8019894:	3728      	adds	r7, #40	; 0x28
 8019896:	46bd      	mov	sp, r7
 8019898:	bd80      	pop	{r7, pc}
 801989a:	bf00      	nop
 801989c:	24002c48 	.word	0x24002c48

080198a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b088      	sub	sp, #32
 80198a4:	af02      	add	r7, sp, #8
 80198a6:	6078      	str	r0, [r7, #4]
 80198a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198aa:	4b22      	ldr	r3, [pc, #136]	; (8019934 <prvProcessExpiredTimer+0x94>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	68db      	ldr	r3, [r3, #12]
 80198b0:	68db      	ldr	r3, [r3, #12]
 80198b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80198b4:	697b      	ldr	r3, [r7, #20]
 80198b6:	3304      	adds	r3, #4
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7fe f975 	bl	8017ba8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198c4:	f003 0304 	and.w	r3, r3, #4
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d022      	beq.n	8019912 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	699a      	ldr	r2, [r3, #24]
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	18d1      	adds	r1, r2, r3
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	683a      	ldr	r2, [r7, #0]
 80198d8:	6978      	ldr	r0, [r7, #20]
 80198da:	f000 f8d1 	bl	8019a80 <prvInsertTimerInActiveList>
 80198de:	4603      	mov	r3, r0
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d01f      	beq.n	8019924 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80198e4:	2300      	movs	r3, #0
 80198e6:	9300      	str	r3, [sp, #0]
 80198e8:	2300      	movs	r3, #0
 80198ea:	687a      	ldr	r2, [r7, #4]
 80198ec:	2100      	movs	r1, #0
 80198ee:	6978      	ldr	r0, [r7, #20]
 80198f0:	f7ff ff88 	bl	8019804 <xTimerGenericCommand>
 80198f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80198f6:	693b      	ldr	r3, [r7, #16]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d113      	bne.n	8019924 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80198fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019900:	f383 8811 	msr	BASEPRI, r3
 8019904:	f3bf 8f6f 	isb	sy
 8019908:	f3bf 8f4f 	dsb	sy
 801990c:	60fb      	str	r3, [r7, #12]
}
 801990e:	bf00      	nop
 8019910:	e7fe      	b.n	8019910 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019918:	f023 0301 	bic.w	r3, r3, #1
 801991c:	b2da      	uxtb	r2, r3
 801991e:	697b      	ldr	r3, [r7, #20]
 8019920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019924:	697b      	ldr	r3, [r7, #20]
 8019926:	6a1b      	ldr	r3, [r3, #32]
 8019928:	6978      	ldr	r0, [r7, #20]
 801992a:	4798      	blx	r3
}
 801992c:	bf00      	nop
 801992e:	3718      	adds	r7, #24
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}
 8019934:	24002c40 	.word	0x24002c40

08019938 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b084      	sub	sp, #16
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019940:	f107 0308 	add.w	r3, r7, #8
 8019944:	4618      	mov	r0, r3
 8019946:	f000 f857 	bl	80199f8 <prvGetNextExpireTime>
 801994a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801994c:	68bb      	ldr	r3, [r7, #8]
 801994e:	4619      	mov	r1, r3
 8019950:	68f8      	ldr	r0, [r7, #12]
 8019952:	f000 f803 	bl	801995c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019956:	f000 f8d5 	bl	8019b04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801995a:	e7f1      	b.n	8019940 <prvTimerTask+0x8>

0801995c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b084      	sub	sp, #16
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
 8019964:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019966:	f7ff f977 	bl	8018c58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801996a:	f107 0308 	add.w	r3, r7, #8
 801996e:	4618      	mov	r0, r3
 8019970:	f000 f866 	bl	8019a40 <prvSampleTimeNow>
 8019974:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019976:	68bb      	ldr	r3, [r7, #8]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d130      	bne.n	80199de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801997c:	683b      	ldr	r3, [r7, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d10a      	bne.n	8019998 <prvProcessTimerOrBlockTask+0x3c>
 8019982:	687a      	ldr	r2, [r7, #4]
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	429a      	cmp	r2, r3
 8019988:	d806      	bhi.n	8019998 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801998a:	f7ff f973 	bl	8018c74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801998e:	68f9      	ldr	r1, [r7, #12]
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f7ff ff85 	bl	80198a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019996:	e024      	b.n	80199e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d008      	beq.n	80199b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801999e:	4b13      	ldr	r3, [pc, #76]	; (80199ec <prvProcessTimerOrBlockTask+0x90>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d101      	bne.n	80199ac <prvProcessTimerOrBlockTask+0x50>
 80199a8:	2301      	movs	r3, #1
 80199aa:	e000      	b.n	80199ae <prvProcessTimerOrBlockTask+0x52>
 80199ac:	2300      	movs	r3, #0
 80199ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80199b0:	4b0f      	ldr	r3, [pc, #60]	; (80199f0 <prvProcessTimerOrBlockTask+0x94>)
 80199b2:	6818      	ldr	r0, [r3, #0]
 80199b4:	687a      	ldr	r2, [r7, #4]
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	1ad3      	subs	r3, r2, r3
 80199ba:	683a      	ldr	r2, [r7, #0]
 80199bc:	4619      	mov	r1, r3
 80199be:	f7fe fdd5 	bl	801856c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80199c2:	f7ff f957 	bl	8018c74 <xTaskResumeAll>
 80199c6:	4603      	mov	r3, r0
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d10a      	bne.n	80199e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80199cc:	4b09      	ldr	r3, [pc, #36]	; (80199f4 <prvProcessTimerOrBlockTask+0x98>)
 80199ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199d2:	601a      	str	r2, [r3, #0]
 80199d4:	f3bf 8f4f 	dsb	sy
 80199d8:	f3bf 8f6f 	isb	sy
}
 80199dc:	e001      	b.n	80199e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80199de:	f7ff f949 	bl	8018c74 <xTaskResumeAll>
}
 80199e2:	bf00      	nop
 80199e4:	3710      	adds	r7, #16
 80199e6:	46bd      	mov	sp, r7
 80199e8:	bd80      	pop	{r7, pc}
 80199ea:	bf00      	nop
 80199ec:	24002c44 	.word	0x24002c44
 80199f0:	24002c48 	.word	0x24002c48
 80199f4:	e000ed04 	.word	0xe000ed04

080199f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80199f8:	b480      	push	{r7}
 80199fa:	b085      	sub	sp, #20
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019a00:	4b0e      	ldr	r3, [pc, #56]	; (8019a3c <prvGetNextExpireTime+0x44>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d101      	bne.n	8019a0e <prvGetNextExpireTime+0x16>
 8019a0a:	2201      	movs	r2, #1
 8019a0c:	e000      	b.n	8019a10 <prvGetNextExpireTime+0x18>
 8019a0e:	2200      	movs	r2, #0
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d105      	bne.n	8019a28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019a1c:	4b07      	ldr	r3, [pc, #28]	; (8019a3c <prvGetNextExpireTime+0x44>)
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	68db      	ldr	r3, [r3, #12]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	60fb      	str	r3, [r7, #12]
 8019a26:	e001      	b.n	8019a2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019a28:	2300      	movs	r3, #0
 8019a2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019a2c:	68fb      	ldr	r3, [r7, #12]
}
 8019a2e:	4618      	mov	r0, r3
 8019a30:	3714      	adds	r7, #20
 8019a32:	46bd      	mov	sp, r7
 8019a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a38:	4770      	bx	lr
 8019a3a:	bf00      	nop
 8019a3c:	24002c40 	.word	0x24002c40

08019a40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b084      	sub	sp, #16
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019a48:	f7ff f9b2 	bl	8018db0 <xTaskGetTickCount>
 8019a4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019a4e:	4b0b      	ldr	r3, [pc, #44]	; (8019a7c <prvSampleTimeNow+0x3c>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	68fa      	ldr	r2, [r7, #12]
 8019a54:	429a      	cmp	r2, r3
 8019a56:	d205      	bcs.n	8019a64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019a58:	f000 f936 	bl	8019cc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	2201      	movs	r2, #1
 8019a60:	601a      	str	r2, [r3, #0]
 8019a62:	e002      	b.n	8019a6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	2200      	movs	r2, #0
 8019a68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019a6a:	4a04      	ldr	r2, [pc, #16]	; (8019a7c <prvSampleTimeNow+0x3c>)
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019a70:	68fb      	ldr	r3, [r7, #12]
}
 8019a72:	4618      	mov	r0, r3
 8019a74:	3710      	adds	r7, #16
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bd80      	pop	{r7, pc}
 8019a7a:	bf00      	nop
 8019a7c:	24002c50 	.word	0x24002c50

08019a80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b086      	sub	sp, #24
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	60f8      	str	r0, [r7, #12]
 8019a88:	60b9      	str	r1, [r7, #8]
 8019a8a:	607a      	str	r2, [r7, #4]
 8019a8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019a8e:	2300      	movs	r3, #0
 8019a90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	68ba      	ldr	r2, [r7, #8]
 8019a96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	68fa      	ldr	r2, [r7, #12]
 8019a9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019a9e:	68ba      	ldr	r2, [r7, #8]
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d812      	bhi.n	8019acc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019aa6:	687a      	ldr	r2, [r7, #4]
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	1ad2      	subs	r2, r2, r3
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	699b      	ldr	r3, [r3, #24]
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	d302      	bcc.n	8019aba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019ab4:	2301      	movs	r3, #1
 8019ab6:	617b      	str	r3, [r7, #20]
 8019ab8:	e01b      	b.n	8019af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019aba:	4b10      	ldr	r3, [pc, #64]	; (8019afc <prvInsertTimerInActiveList+0x7c>)
 8019abc:	681a      	ldr	r2, [r3, #0]
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	3304      	adds	r3, #4
 8019ac2:	4619      	mov	r1, r3
 8019ac4:	4610      	mov	r0, r2
 8019ac6:	f7fe f836 	bl	8017b36 <vListInsert>
 8019aca:	e012      	b.n	8019af2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019acc:	687a      	ldr	r2, [r7, #4]
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d206      	bcs.n	8019ae2 <prvInsertTimerInActiveList+0x62>
 8019ad4:	68ba      	ldr	r2, [r7, #8]
 8019ad6:	683b      	ldr	r3, [r7, #0]
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d302      	bcc.n	8019ae2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019adc:	2301      	movs	r3, #1
 8019ade:	617b      	str	r3, [r7, #20]
 8019ae0:	e007      	b.n	8019af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019ae2:	4b07      	ldr	r3, [pc, #28]	; (8019b00 <prvInsertTimerInActiveList+0x80>)
 8019ae4:	681a      	ldr	r2, [r3, #0]
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	3304      	adds	r3, #4
 8019aea:	4619      	mov	r1, r3
 8019aec:	4610      	mov	r0, r2
 8019aee:	f7fe f822 	bl	8017b36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019af2:	697b      	ldr	r3, [r7, #20]
}
 8019af4:	4618      	mov	r0, r3
 8019af6:	3718      	adds	r7, #24
 8019af8:	46bd      	mov	sp, r7
 8019afa:	bd80      	pop	{r7, pc}
 8019afc:	24002c44 	.word	0x24002c44
 8019b00:	24002c40 	.word	0x24002c40

08019b04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b08e      	sub	sp, #56	; 0x38
 8019b08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019b0a:	e0ca      	b.n	8019ca2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	da18      	bge.n	8019b44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019b12:	1d3b      	adds	r3, r7, #4
 8019b14:	3304      	adds	r3, #4
 8019b16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d10a      	bne.n	8019b34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b22:	f383 8811 	msr	BASEPRI, r3
 8019b26:	f3bf 8f6f 	isb	sy
 8019b2a:	f3bf 8f4f 	dsb	sy
 8019b2e:	61fb      	str	r3, [r7, #28]
}
 8019b30:	bf00      	nop
 8019b32:	e7fe      	b.n	8019b32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b3a:	6850      	ldr	r0, [r2, #4]
 8019b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b3e:	6892      	ldr	r2, [r2, #8]
 8019b40:	4611      	mov	r1, r2
 8019b42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	f2c0 80aa 	blt.w	8019ca0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b52:	695b      	ldr	r3, [r3, #20]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d004      	beq.n	8019b62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b5a:	3304      	adds	r3, #4
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7fe f823 	bl	8017ba8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b62:	463b      	mov	r3, r7
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7ff ff6b 	bl	8019a40 <prvSampleTimeNow>
 8019b6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2b09      	cmp	r3, #9
 8019b70:	f200 8097 	bhi.w	8019ca2 <prvProcessReceivedCommands+0x19e>
 8019b74:	a201      	add	r2, pc, #4	; (adr r2, 8019b7c <prvProcessReceivedCommands+0x78>)
 8019b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b7a:	bf00      	nop
 8019b7c:	08019ba5 	.word	0x08019ba5
 8019b80:	08019ba5 	.word	0x08019ba5
 8019b84:	08019ba5 	.word	0x08019ba5
 8019b88:	08019c19 	.word	0x08019c19
 8019b8c:	08019c2d 	.word	0x08019c2d
 8019b90:	08019c77 	.word	0x08019c77
 8019b94:	08019ba5 	.word	0x08019ba5
 8019b98:	08019ba5 	.word	0x08019ba5
 8019b9c:	08019c19 	.word	0x08019c19
 8019ba0:	08019c2d 	.word	0x08019c2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019baa:	f043 0301 	orr.w	r3, r3, #1
 8019bae:	b2da      	uxtb	r2, r3
 8019bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019bb6:	68ba      	ldr	r2, [r7, #8]
 8019bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bba:	699b      	ldr	r3, [r3, #24]
 8019bbc:	18d1      	adds	r1, r2, r3
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bc4:	f7ff ff5c 	bl	8019a80 <prvInsertTimerInActiveList>
 8019bc8:	4603      	mov	r3, r0
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d069      	beq.n	8019ca2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bd0:	6a1b      	ldr	r3, [r3, #32]
 8019bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bdc:	f003 0304 	and.w	r3, r3, #4
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d05e      	beq.n	8019ca2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019be4:	68ba      	ldr	r2, [r7, #8]
 8019be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be8:	699b      	ldr	r3, [r3, #24]
 8019bea:	441a      	add	r2, r3
 8019bec:	2300      	movs	r3, #0
 8019bee:	9300      	str	r3, [sp, #0]
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	2100      	movs	r1, #0
 8019bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bf6:	f7ff fe05 	bl	8019804 <xTimerGenericCommand>
 8019bfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019bfc:	6a3b      	ldr	r3, [r7, #32]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d14f      	bne.n	8019ca2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c06:	f383 8811 	msr	BASEPRI, r3
 8019c0a:	f3bf 8f6f 	isb	sy
 8019c0e:	f3bf 8f4f 	dsb	sy
 8019c12:	61bb      	str	r3, [r7, #24]
}
 8019c14:	bf00      	nop
 8019c16:	e7fe      	b.n	8019c16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c1e:	f023 0301 	bic.w	r3, r3, #1
 8019c22:	b2da      	uxtb	r2, r3
 8019c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019c2a:	e03a      	b.n	8019ca2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c32:	f043 0301 	orr.w	r3, r3, #1
 8019c36:	b2da      	uxtb	r2, r3
 8019c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019c3e:	68ba      	ldr	r2, [r7, #8]
 8019c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c46:	699b      	ldr	r3, [r3, #24]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d10a      	bne.n	8019c62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c50:	f383 8811 	msr	BASEPRI, r3
 8019c54:	f3bf 8f6f 	isb	sy
 8019c58:	f3bf 8f4f 	dsb	sy
 8019c5c:	617b      	str	r3, [r7, #20]
}
 8019c5e:	bf00      	nop
 8019c60:	e7fe      	b.n	8019c60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c64:	699a      	ldr	r2, [r3, #24]
 8019c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c68:	18d1      	adds	r1, r2, r3
 8019c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c70:	f7ff ff06 	bl	8019a80 <prvInsertTimerInActiveList>
					break;
 8019c74:	e015      	b.n	8019ca2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c7c:	f003 0302 	and.w	r3, r3, #2
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d103      	bne.n	8019c8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c86:	f000 fbfb 	bl	801a480 <vPortFree>
 8019c8a:	e00a      	b.n	8019ca2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c92:	f023 0301 	bic.w	r3, r3, #1
 8019c96:	b2da      	uxtb	r2, r3
 8019c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019c9e:	e000      	b.n	8019ca2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019ca0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019ca2:	4b08      	ldr	r3, [pc, #32]	; (8019cc4 <prvProcessReceivedCommands+0x1c0>)
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	1d39      	adds	r1, r7, #4
 8019ca8:	2200      	movs	r2, #0
 8019caa:	4618      	mov	r0, r3
 8019cac:	f7fe fa44 	bl	8018138 <xQueueReceive>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	f47f af2a 	bne.w	8019b0c <prvProcessReceivedCommands+0x8>
	}
}
 8019cb8:	bf00      	nop
 8019cba:	bf00      	nop
 8019cbc:	3730      	adds	r7, #48	; 0x30
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	bd80      	pop	{r7, pc}
 8019cc2:	bf00      	nop
 8019cc4:	24002c48 	.word	0x24002c48

08019cc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019cc8:	b580      	push	{r7, lr}
 8019cca:	b088      	sub	sp, #32
 8019ccc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019cce:	e048      	b.n	8019d62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019cd0:	4b2d      	ldr	r3, [pc, #180]	; (8019d88 <prvSwitchTimerLists+0xc0>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	68db      	ldr	r3, [r3, #12]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cda:	4b2b      	ldr	r3, [pc, #172]	; (8019d88 <prvSwitchTimerLists+0xc0>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	68db      	ldr	r3, [r3, #12]
 8019ce0:	68db      	ldr	r3, [r3, #12]
 8019ce2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	3304      	adds	r3, #4
 8019ce8:	4618      	mov	r0, r3
 8019cea:	f7fd ff5d 	bl	8017ba8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	6a1b      	ldr	r3, [r3, #32]
 8019cf2:	68f8      	ldr	r0, [r7, #12]
 8019cf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019cfc:	f003 0304 	and.w	r3, r3, #4
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d02e      	beq.n	8019d62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	699b      	ldr	r3, [r3, #24]
 8019d08:	693a      	ldr	r2, [r7, #16]
 8019d0a:	4413      	add	r3, r2
 8019d0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019d0e:	68ba      	ldr	r2, [r7, #8]
 8019d10:	693b      	ldr	r3, [r7, #16]
 8019d12:	429a      	cmp	r2, r3
 8019d14:	d90e      	bls.n	8019d34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	68ba      	ldr	r2, [r7, #8]
 8019d1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	68fa      	ldr	r2, [r7, #12]
 8019d20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d22:	4b19      	ldr	r3, [pc, #100]	; (8019d88 <prvSwitchTimerLists+0xc0>)
 8019d24:	681a      	ldr	r2, [r3, #0]
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	3304      	adds	r3, #4
 8019d2a:	4619      	mov	r1, r3
 8019d2c:	4610      	mov	r0, r2
 8019d2e:	f7fd ff02 	bl	8017b36 <vListInsert>
 8019d32:	e016      	b.n	8019d62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d34:	2300      	movs	r3, #0
 8019d36:	9300      	str	r3, [sp, #0]
 8019d38:	2300      	movs	r3, #0
 8019d3a:	693a      	ldr	r2, [r7, #16]
 8019d3c:	2100      	movs	r1, #0
 8019d3e:	68f8      	ldr	r0, [r7, #12]
 8019d40:	f7ff fd60 	bl	8019804 <xTimerGenericCommand>
 8019d44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d10a      	bne.n	8019d62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d50:	f383 8811 	msr	BASEPRI, r3
 8019d54:	f3bf 8f6f 	isb	sy
 8019d58:	f3bf 8f4f 	dsb	sy
 8019d5c:	603b      	str	r3, [r7, #0]
}
 8019d5e:	bf00      	nop
 8019d60:	e7fe      	b.n	8019d60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019d62:	4b09      	ldr	r3, [pc, #36]	; (8019d88 <prvSwitchTimerLists+0xc0>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d1b1      	bne.n	8019cd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019d6c:	4b06      	ldr	r3, [pc, #24]	; (8019d88 <prvSwitchTimerLists+0xc0>)
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019d72:	4b06      	ldr	r3, [pc, #24]	; (8019d8c <prvSwitchTimerLists+0xc4>)
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	4a04      	ldr	r2, [pc, #16]	; (8019d88 <prvSwitchTimerLists+0xc0>)
 8019d78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019d7a:	4a04      	ldr	r2, [pc, #16]	; (8019d8c <prvSwitchTimerLists+0xc4>)
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	6013      	str	r3, [r2, #0]
}
 8019d80:	bf00      	nop
 8019d82:	3718      	adds	r7, #24
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bd80      	pop	{r7, pc}
 8019d88:	24002c40 	.word	0x24002c40
 8019d8c:	24002c44 	.word	0x24002c44

08019d90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b082      	sub	sp, #8
 8019d94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019d96:	f000 f985 	bl	801a0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019d9a:	4b15      	ldr	r3, [pc, #84]	; (8019df0 <prvCheckForValidListAndQueue+0x60>)
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d120      	bne.n	8019de4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019da2:	4814      	ldr	r0, [pc, #80]	; (8019df4 <prvCheckForValidListAndQueue+0x64>)
 8019da4:	f7fd fe76 	bl	8017a94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019da8:	4813      	ldr	r0, [pc, #76]	; (8019df8 <prvCheckForValidListAndQueue+0x68>)
 8019daa:	f7fd fe73 	bl	8017a94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019dae:	4b13      	ldr	r3, [pc, #76]	; (8019dfc <prvCheckForValidListAndQueue+0x6c>)
 8019db0:	4a10      	ldr	r2, [pc, #64]	; (8019df4 <prvCheckForValidListAndQueue+0x64>)
 8019db2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019db4:	4b12      	ldr	r3, [pc, #72]	; (8019e00 <prvCheckForValidListAndQueue+0x70>)
 8019db6:	4a10      	ldr	r2, [pc, #64]	; (8019df8 <prvCheckForValidListAndQueue+0x68>)
 8019db8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019dba:	2300      	movs	r3, #0
 8019dbc:	9300      	str	r3, [sp, #0]
 8019dbe:	4b11      	ldr	r3, [pc, #68]	; (8019e04 <prvCheckForValidListAndQueue+0x74>)
 8019dc0:	4a11      	ldr	r2, [pc, #68]	; (8019e08 <prvCheckForValidListAndQueue+0x78>)
 8019dc2:	2110      	movs	r1, #16
 8019dc4:	200a      	movs	r0, #10
 8019dc6:	f7fd ff81 	bl	8017ccc <xQueueGenericCreateStatic>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	4a08      	ldr	r2, [pc, #32]	; (8019df0 <prvCheckForValidListAndQueue+0x60>)
 8019dce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019dd0:	4b07      	ldr	r3, [pc, #28]	; (8019df0 <prvCheckForValidListAndQueue+0x60>)
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d005      	beq.n	8019de4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019dd8:	4b05      	ldr	r3, [pc, #20]	; (8019df0 <prvCheckForValidListAndQueue+0x60>)
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	490b      	ldr	r1, [pc, #44]	; (8019e0c <prvCheckForValidListAndQueue+0x7c>)
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7fe fb9a 	bl	8018518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019de4:	f000 f98e 	bl	801a104 <vPortExitCritical>
}
 8019de8:	bf00      	nop
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}
 8019dee:	bf00      	nop
 8019df0:	24002c48 	.word	0x24002c48
 8019df4:	24002c18 	.word	0x24002c18
 8019df8:	24002c2c 	.word	0x24002c2c
 8019dfc:	24002c40 	.word	0x24002c40
 8019e00:	24002c44 	.word	0x24002c44
 8019e04:	24002cf4 	.word	0x24002cf4
 8019e08:	24002c54 	.word	0x24002c54
 8019e0c:	0801b3b0 	.word	0x0801b3b0

08019e10 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b08a      	sub	sp, #40	; 0x28
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	60f8      	str	r0, [r7, #12]
 8019e18:	60b9      	str	r1, [r7, #8]
 8019e1a:	607a      	str	r2, [r7, #4]
 8019e1c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019e1e:	f06f 0301 	mvn.w	r3, #1
 8019e22:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019e28:	68bb      	ldr	r3, [r7, #8]
 8019e2a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019e30:	4b06      	ldr	r3, [pc, #24]	; (8019e4c <xTimerPendFunctionCallFromISR+0x3c>)
 8019e32:	6818      	ldr	r0, [r3, #0]
 8019e34:	f107 0114 	add.w	r1, r7, #20
 8019e38:	2300      	movs	r3, #0
 8019e3a:	683a      	ldr	r2, [r7, #0]
 8019e3c:	f7fe f8e0 	bl	8018000 <xQueueGenericSendFromISR>
 8019e40:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019e44:	4618      	mov	r0, r3
 8019e46:	3728      	adds	r7, #40	; 0x28
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	bd80      	pop	{r7, pc}
 8019e4c:	24002c48 	.word	0x24002c48

08019e50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019e50:	b480      	push	{r7}
 8019e52:	b085      	sub	sp, #20
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	60f8      	str	r0, [r7, #12]
 8019e58:	60b9      	str	r1, [r7, #8]
 8019e5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	3b04      	subs	r3, #4
 8019e60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	3b04      	subs	r3, #4
 8019e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019e70:	68bb      	ldr	r3, [r7, #8]
 8019e72:	f023 0201 	bic.w	r2, r3, #1
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	3b04      	subs	r3, #4
 8019e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019e80:	4a0c      	ldr	r2, [pc, #48]	; (8019eb4 <pxPortInitialiseStack+0x64>)
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	3b14      	subs	r3, #20
 8019e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019e8c:	687a      	ldr	r2, [r7, #4]
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	3b04      	subs	r3, #4
 8019e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	f06f 0202 	mvn.w	r2, #2
 8019e9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	3b20      	subs	r3, #32
 8019ea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019ea6:	68fb      	ldr	r3, [r7, #12]
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3714      	adds	r7, #20
 8019eac:	46bd      	mov	sp, r7
 8019eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb2:	4770      	bx	lr
 8019eb4:	08019eb9 	.word	0x08019eb9

08019eb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019eb8:	b480      	push	{r7}
 8019eba:	b085      	sub	sp, #20
 8019ebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019ec2:	4b12      	ldr	r3, [pc, #72]	; (8019f0c <prvTaskExitError+0x54>)
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019eca:	d00a      	beq.n	8019ee2 <prvTaskExitError+0x2a>
	__asm volatile
 8019ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ed0:	f383 8811 	msr	BASEPRI, r3
 8019ed4:	f3bf 8f6f 	isb	sy
 8019ed8:	f3bf 8f4f 	dsb	sy
 8019edc:	60fb      	str	r3, [r7, #12]
}
 8019ede:	bf00      	nop
 8019ee0:	e7fe      	b.n	8019ee0 <prvTaskExitError+0x28>
	__asm volatile
 8019ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ee6:	f383 8811 	msr	BASEPRI, r3
 8019eea:	f3bf 8f6f 	isb	sy
 8019eee:	f3bf 8f4f 	dsb	sy
 8019ef2:	60bb      	str	r3, [r7, #8]
}
 8019ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019ef6:	bf00      	nop
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d0fc      	beq.n	8019ef8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019efe:	bf00      	nop
 8019f00:	bf00      	nop
 8019f02:	3714      	adds	r7, #20
 8019f04:	46bd      	mov	sp, r7
 8019f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0a:	4770      	bx	lr
 8019f0c:	240000d0 	.word	0x240000d0

08019f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019f10:	4b07      	ldr	r3, [pc, #28]	; (8019f30 <pxCurrentTCBConst2>)
 8019f12:	6819      	ldr	r1, [r3, #0]
 8019f14:	6808      	ldr	r0, [r1, #0]
 8019f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f1a:	f380 8809 	msr	PSP, r0
 8019f1e:	f3bf 8f6f 	isb	sy
 8019f22:	f04f 0000 	mov.w	r0, #0
 8019f26:	f380 8811 	msr	BASEPRI, r0
 8019f2a:	4770      	bx	lr
 8019f2c:	f3af 8000 	nop.w

08019f30 <pxCurrentTCBConst2>:
 8019f30:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019f34:	bf00      	nop
 8019f36:	bf00      	nop

08019f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019f38:	4808      	ldr	r0, [pc, #32]	; (8019f5c <prvPortStartFirstTask+0x24>)
 8019f3a:	6800      	ldr	r0, [r0, #0]
 8019f3c:	6800      	ldr	r0, [r0, #0]
 8019f3e:	f380 8808 	msr	MSP, r0
 8019f42:	f04f 0000 	mov.w	r0, #0
 8019f46:	f380 8814 	msr	CONTROL, r0
 8019f4a:	b662      	cpsie	i
 8019f4c:	b661      	cpsie	f
 8019f4e:	f3bf 8f4f 	dsb	sy
 8019f52:	f3bf 8f6f 	isb	sy
 8019f56:	df00      	svc	0
 8019f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019f5a:	bf00      	nop
 8019f5c:	e000ed08 	.word	0xe000ed08

08019f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b086      	sub	sp, #24
 8019f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019f66:	4b46      	ldr	r3, [pc, #280]	; (801a080 <xPortStartScheduler+0x120>)
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	4a46      	ldr	r2, [pc, #280]	; (801a084 <xPortStartScheduler+0x124>)
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d10a      	bne.n	8019f86 <xPortStartScheduler+0x26>
	__asm volatile
 8019f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f74:	f383 8811 	msr	BASEPRI, r3
 8019f78:	f3bf 8f6f 	isb	sy
 8019f7c:	f3bf 8f4f 	dsb	sy
 8019f80:	613b      	str	r3, [r7, #16]
}
 8019f82:	bf00      	nop
 8019f84:	e7fe      	b.n	8019f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019f86:	4b3e      	ldr	r3, [pc, #248]	; (801a080 <xPortStartScheduler+0x120>)
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	4a3f      	ldr	r2, [pc, #252]	; (801a088 <xPortStartScheduler+0x128>)
 8019f8c:	4293      	cmp	r3, r2
 8019f8e:	d10a      	bne.n	8019fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8019f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f94:	f383 8811 	msr	BASEPRI, r3
 8019f98:	f3bf 8f6f 	isb	sy
 8019f9c:	f3bf 8f4f 	dsb	sy
 8019fa0:	60fb      	str	r3, [r7, #12]
}
 8019fa2:	bf00      	nop
 8019fa4:	e7fe      	b.n	8019fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019fa6:	4b39      	ldr	r3, [pc, #228]	; (801a08c <xPortStartScheduler+0x12c>)
 8019fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	781b      	ldrb	r3, [r3, #0]
 8019fae:	b2db      	uxtb	r3, r3
 8019fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	22ff      	movs	r2, #255	; 0xff
 8019fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	781b      	ldrb	r3, [r3, #0]
 8019fbc:	b2db      	uxtb	r3, r3
 8019fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019fc0:	78fb      	ldrb	r3, [r7, #3]
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019fc8:	b2da      	uxtb	r2, r3
 8019fca:	4b31      	ldr	r3, [pc, #196]	; (801a090 <xPortStartScheduler+0x130>)
 8019fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019fce:	4b31      	ldr	r3, [pc, #196]	; (801a094 <xPortStartScheduler+0x134>)
 8019fd0:	2207      	movs	r2, #7
 8019fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fd4:	e009      	b.n	8019fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019fd6:	4b2f      	ldr	r3, [pc, #188]	; (801a094 <xPortStartScheduler+0x134>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	3b01      	subs	r3, #1
 8019fdc:	4a2d      	ldr	r2, [pc, #180]	; (801a094 <xPortStartScheduler+0x134>)
 8019fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019fe0:	78fb      	ldrb	r3, [r7, #3]
 8019fe2:	b2db      	uxtb	r3, r3
 8019fe4:	005b      	lsls	r3, r3, #1
 8019fe6:	b2db      	uxtb	r3, r3
 8019fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fea:	78fb      	ldrb	r3, [r7, #3]
 8019fec:	b2db      	uxtb	r3, r3
 8019fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ff2:	2b80      	cmp	r3, #128	; 0x80
 8019ff4:	d0ef      	beq.n	8019fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019ff6:	4b27      	ldr	r3, [pc, #156]	; (801a094 <xPortStartScheduler+0x134>)
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	f1c3 0307 	rsb	r3, r3, #7
 8019ffe:	2b04      	cmp	r3, #4
 801a000:	d00a      	beq.n	801a018 <xPortStartScheduler+0xb8>
	__asm volatile
 801a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a006:	f383 8811 	msr	BASEPRI, r3
 801a00a:	f3bf 8f6f 	isb	sy
 801a00e:	f3bf 8f4f 	dsb	sy
 801a012:	60bb      	str	r3, [r7, #8]
}
 801a014:	bf00      	nop
 801a016:	e7fe      	b.n	801a016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a018:	4b1e      	ldr	r3, [pc, #120]	; (801a094 <xPortStartScheduler+0x134>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	021b      	lsls	r3, r3, #8
 801a01e:	4a1d      	ldr	r2, [pc, #116]	; (801a094 <xPortStartScheduler+0x134>)
 801a020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a022:	4b1c      	ldr	r3, [pc, #112]	; (801a094 <xPortStartScheduler+0x134>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a02a:	4a1a      	ldr	r2, [pc, #104]	; (801a094 <xPortStartScheduler+0x134>)
 801a02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	b2da      	uxtb	r2, r3
 801a032:	697b      	ldr	r3, [r7, #20]
 801a034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a036:	4b18      	ldr	r3, [pc, #96]	; (801a098 <xPortStartScheduler+0x138>)
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	4a17      	ldr	r2, [pc, #92]	; (801a098 <xPortStartScheduler+0x138>)
 801a03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a042:	4b15      	ldr	r3, [pc, #84]	; (801a098 <xPortStartScheduler+0x138>)
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	4a14      	ldr	r2, [pc, #80]	; (801a098 <xPortStartScheduler+0x138>)
 801a048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a04e:	f000 f8dd 	bl	801a20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a052:	4b12      	ldr	r3, [pc, #72]	; (801a09c <xPortStartScheduler+0x13c>)
 801a054:	2200      	movs	r2, #0
 801a056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a058:	f000 f8fc 	bl	801a254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a05c:	4b10      	ldr	r3, [pc, #64]	; (801a0a0 <xPortStartScheduler+0x140>)
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	4a0f      	ldr	r2, [pc, #60]	; (801a0a0 <xPortStartScheduler+0x140>)
 801a062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a068:	f7ff ff66 	bl	8019f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a06c:	f7fe ff72 	bl	8018f54 <vTaskSwitchContext>
	prvTaskExitError();
 801a070:	f7ff ff22 	bl	8019eb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a074:	2300      	movs	r3, #0
}
 801a076:	4618      	mov	r0, r3
 801a078:	3718      	adds	r7, #24
 801a07a:	46bd      	mov	sp, r7
 801a07c:	bd80      	pop	{r7, pc}
 801a07e:	bf00      	nop
 801a080:	e000ed00 	.word	0xe000ed00
 801a084:	410fc271 	.word	0x410fc271
 801a088:	410fc270 	.word	0x410fc270
 801a08c:	e000e400 	.word	0xe000e400
 801a090:	24002d44 	.word	0x24002d44
 801a094:	24002d48 	.word	0x24002d48
 801a098:	e000ed20 	.word	0xe000ed20
 801a09c:	240000d0 	.word	0x240000d0
 801a0a0:	e000ef34 	.word	0xe000ef34

0801a0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a0a4:	b480      	push	{r7}
 801a0a6:	b083      	sub	sp, #12
 801a0a8:	af00      	add	r7, sp, #0
	__asm volatile
 801a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0ae:	f383 8811 	msr	BASEPRI, r3
 801a0b2:	f3bf 8f6f 	isb	sy
 801a0b6:	f3bf 8f4f 	dsb	sy
 801a0ba:	607b      	str	r3, [r7, #4]
}
 801a0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a0be:	4b0f      	ldr	r3, [pc, #60]	; (801a0fc <vPortEnterCritical+0x58>)
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	3301      	adds	r3, #1
 801a0c4:	4a0d      	ldr	r2, [pc, #52]	; (801a0fc <vPortEnterCritical+0x58>)
 801a0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a0c8:	4b0c      	ldr	r3, [pc, #48]	; (801a0fc <vPortEnterCritical+0x58>)
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	2b01      	cmp	r3, #1
 801a0ce:	d10f      	bne.n	801a0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a0d0:	4b0b      	ldr	r3, [pc, #44]	; (801a100 <vPortEnterCritical+0x5c>)
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	b2db      	uxtb	r3, r3
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d00a      	beq.n	801a0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 801a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0de:	f383 8811 	msr	BASEPRI, r3
 801a0e2:	f3bf 8f6f 	isb	sy
 801a0e6:	f3bf 8f4f 	dsb	sy
 801a0ea:	603b      	str	r3, [r7, #0]
}
 801a0ec:	bf00      	nop
 801a0ee:	e7fe      	b.n	801a0ee <vPortEnterCritical+0x4a>
	}
}
 801a0f0:	bf00      	nop
 801a0f2:	370c      	adds	r7, #12
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fa:	4770      	bx	lr
 801a0fc:	240000d0 	.word	0x240000d0
 801a100:	e000ed04 	.word	0xe000ed04

0801a104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a104:	b480      	push	{r7}
 801a106:	b083      	sub	sp, #12
 801a108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a10a:	4b12      	ldr	r3, [pc, #72]	; (801a154 <vPortExitCritical+0x50>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d10a      	bne.n	801a128 <vPortExitCritical+0x24>
	__asm volatile
 801a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a116:	f383 8811 	msr	BASEPRI, r3
 801a11a:	f3bf 8f6f 	isb	sy
 801a11e:	f3bf 8f4f 	dsb	sy
 801a122:	607b      	str	r3, [r7, #4]
}
 801a124:	bf00      	nop
 801a126:	e7fe      	b.n	801a126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a128:	4b0a      	ldr	r3, [pc, #40]	; (801a154 <vPortExitCritical+0x50>)
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	3b01      	subs	r3, #1
 801a12e:	4a09      	ldr	r2, [pc, #36]	; (801a154 <vPortExitCritical+0x50>)
 801a130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a132:	4b08      	ldr	r3, [pc, #32]	; (801a154 <vPortExitCritical+0x50>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d105      	bne.n	801a146 <vPortExitCritical+0x42>
 801a13a:	2300      	movs	r3, #0
 801a13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a13e:	683b      	ldr	r3, [r7, #0]
 801a140:	f383 8811 	msr	BASEPRI, r3
}
 801a144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a146:	bf00      	nop
 801a148:	370c      	adds	r7, #12
 801a14a:	46bd      	mov	sp, r7
 801a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a150:	4770      	bx	lr
 801a152:	bf00      	nop
 801a154:	240000d0 	.word	0x240000d0
	...

0801a160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a160:	f3ef 8009 	mrs	r0, PSP
 801a164:	f3bf 8f6f 	isb	sy
 801a168:	4b15      	ldr	r3, [pc, #84]	; (801a1c0 <pxCurrentTCBConst>)
 801a16a:	681a      	ldr	r2, [r3, #0]
 801a16c:	f01e 0f10 	tst.w	lr, #16
 801a170:	bf08      	it	eq
 801a172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17a:	6010      	str	r0, [r2, #0]
 801a17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a180:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a184:	f380 8811 	msr	BASEPRI, r0
 801a188:	f3bf 8f4f 	dsb	sy
 801a18c:	f3bf 8f6f 	isb	sy
 801a190:	f7fe fee0 	bl	8018f54 <vTaskSwitchContext>
 801a194:	f04f 0000 	mov.w	r0, #0
 801a198:	f380 8811 	msr	BASEPRI, r0
 801a19c:	bc09      	pop	{r0, r3}
 801a19e:	6819      	ldr	r1, [r3, #0]
 801a1a0:	6808      	ldr	r0, [r1, #0]
 801a1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1a6:	f01e 0f10 	tst.w	lr, #16
 801a1aa:	bf08      	it	eq
 801a1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a1b0:	f380 8809 	msr	PSP, r0
 801a1b4:	f3bf 8f6f 	isb	sy
 801a1b8:	4770      	bx	lr
 801a1ba:	bf00      	nop
 801a1bc:	f3af 8000 	nop.w

0801a1c0 <pxCurrentTCBConst>:
 801a1c0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a1c4:	bf00      	nop
 801a1c6:	bf00      	nop

0801a1c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b082      	sub	sp, #8
 801a1cc:	af00      	add	r7, sp, #0
	__asm volatile
 801a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1d2:	f383 8811 	msr	BASEPRI, r3
 801a1d6:	f3bf 8f6f 	isb	sy
 801a1da:	f3bf 8f4f 	dsb	sy
 801a1de:	607b      	str	r3, [r7, #4]
}
 801a1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a1e2:	f7fe fdf5 	bl	8018dd0 <xTaskIncrementTick>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d003      	beq.n	801a1f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a1ec:	4b06      	ldr	r3, [pc, #24]	; (801a208 <xPortSysTickHandler+0x40>)
 801a1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1f2:	601a      	str	r2, [r3, #0]
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a1f8:	683b      	ldr	r3, [r7, #0]
 801a1fa:	f383 8811 	msr	BASEPRI, r3
}
 801a1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a200:	bf00      	nop
 801a202:	3708      	adds	r7, #8
 801a204:	46bd      	mov	sp, r7
 801a206:	bd80      	pop	{r7, pc}
 801a208:	e000ed04 	.word	0xe000ed04

0801a20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a20c:	b480      	push	{r7}
 801a20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a210:	4b0b      	ldr	r3, [pc, #44]	; (801a240 <vPortSetupTimerInterrupt+0x34>)
 801a212:	2200      	movs	r2, #0
 801a214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a216:	4b0b      	ldr	r3, [pc, #44]	; (801a244 <vPortSetupTimerInterrupt+0x38>)
 801a218:	2200      	movs	r2, #0
 801a21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a21c:	4b0a      	ldr	r3, [pc, #40]	; (801a248 <vPortSetupTimerInterrupt+0x3c>)
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	4a0a      	ldr	r2, [pc, #40]	; (801a24c <vPortSetupTimerInterrupt+0x40>)
 801a222:	fba2 2303 	umull	r2, r3, r2, r3
 801a226:	099b      	lsrs	r3, r3, #6
 801a228:	4a09      	ldr	r2, [pc, #36]	; (801a250 <vPortSetupTimerInterrupt+0x44>)
 801a22a:	3b01      	subs	r3, #1
 801a22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a22e:	4b04      	ldr	r3, [pc, #16]	; (801a240 <vPortSetupTimerInterrupt+0x34>)
 801a230:	2207      	movs	r2, #7
 801a232:	601a      	str	r2, [r3, #0]
}
 801a234:	bf00      	nop
 801a236:	46bd      	mov	sp, r7
 801a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23c:	4770      	bx	lr
 801a23e:	bf00      	nop
 801a240:	e000e010 	.word	0xe000e010
 801a244:	e000e018 	.word	0xe000e018
 801a248:	240000c0 	.word	0x240000c0
 801a24c:	10624dd3 	.word	0x10624dd3
 801a250:	e000e014 	.word	0xe000e014

0801a254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a264 <vPortEnableVFP+0x10>
 801a258:	6801      	ldr	r1, [r0, #0]
 801a25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a25e:	6001      	str	r1, [r0, #0]
 801a260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a262:	bf00      	nop
 801a264:	e000ed88 	.word	0xe000ed88

0801a268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a268:	b480      	push	{r7}
 801a26a:	b085      	sub	sp, #20
 801a26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a26e:	f3ef 8305 	mrs	r3, IPSR
 801a272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	2b0f      	cmp	r3, #15
 801a278:	d914      	bls.n	801a2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a27a:	4a17      	ldr	r2, [pc, #92]	; (801a2d8 <vPortValidateInterruptPriority+0x70>)
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	4413      	add	r3, r2
 801a280:	781b      	ldrb	r3, [r3, #0]
 801a282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a284:	4b15      	ldr	r3, [pc, #84]	; (801a2dc <vPortValidateInterruptPriority+0x74>)
 801a286:	781b      	ldrb	r3, [r3, #0]
 801a288:	7afa      	ldrb	r2, [r7, #11]
 801a28a:	429a      	cmp	r2, r3
 801a28c:	d20a      	bcs.n	801a2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a292:	f383 8811 	msr	BASEPRI, r3
 801a296:	f3bf 8f6f 	isb	sy
 801a29a:	f3bf 8f4f 	dsb	sy
 801a29e:	607b      	str	r3, [r7, #4]
}
 801a2a0:	bf00      	nop
 801a2a2:	e7fe      	b.n	801a2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a2a4:	4b0e      	ldr	r3, [pc, #56]	; (801a2e0 <vPortValidateInterruptPriority+0x78>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a2ac:	4b0d      	ldr	r3, [pc, #52]	; (801a2e4 <vPortValidateInterruptPriority+0x7c>)
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	429a      	cmp	r2, r3
 801a2b2:	d90a      	bls.n	801a2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2b8:	f383 8811 	msr	BASEPRI, r3
 801a2bc:	f3bf 8f6f 	isb	sy
 801a2c0:	f3bf 8f4f 	dsb	sy
 801a2c4:	603b      	str	r3, [r7, #0]
}
 801a2c6:	bf00      	nop
 801a2c8:	e7fe      	b.n	801a2c8 <vPortValidateInterruptPriority+0x60>
	}
 801a2ca:	bf00      	nop
 801a2cc:	3714      	adds	r7, #20
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d4:	4770      	bx	lr
 801a2d6:	bf00      	nop
 801a2d8:	e000e3f0 	.word	0xe000e3f0
 801a2dc:	24002d44 	.word	0x24002d44
 801a2e0:	e000ed0c 	.word	0xe000ed0c
 801a2e4:	24002d48 	.word	0x24002d48

0801a2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b08a      	sub	sp, #40	; 0x28
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a2f4:	f7fe fcb0 	bl	8018c58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a2f8:	4b5b      	ldr	r3, [pc, #364]	; (801a468 <pvPortMalloc+0x180>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d101      	bne.n	801a304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a300:	f000 f920 	bl	801a544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a304:	4b59      	ldr	r3, [pc, #356]	; (801a46c <pvPortMalloc+0x184>)
 801a306:	681a      	ldr	r2, [r3, #0]
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	4013      	ands	r3, r2
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	f040 8093 	bne.w	801a438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d01d      	beq.n	801a354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a318:	2208      	movs	r2, #8
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	4413      	add	r3, r2
 801a31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	f003 0307 	and.w	r3, r3, #7
 801a326:	2b00      	cmp	r3, #0
 801a328:	d014      	beq.n	801a354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	f023 0307 	bic.w	r3, r3, #7
 801a330:	3308      	adds	r3, #8
 801a332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	f003 0307 	and.w	r3, r3, #7
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d00a      	beq.n	801a354 <pvPortMalloc+0x6c>
	__asm volatile
 801a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a342:	f383 8811 	msr	BASEPRI, r3
 801a346:	f3bf 8f6f 	isb	sy
 801a34a:	f3bf 8f4f 	dsb	sy
 801a34e:	617b      	str	r3, [r7, #20]
}
 801a350:	bf00      	nop
 801a352:	e7fe      	b.n	801a352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d06e      	beq.n	801a438 <pvPortMalloc+0x150>
 801a35a:	4b45      	ldr	r3, [pc, #276]	; (801a470 <pvPortMalloc+0x188>)
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	687a      	ldr	r2, [r7, #4]
 801a360:	429a      	cmp	r2, r3
 801a362:	d869      	bhi.n	801a438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a364:	4b43      	ldr	r3, [pc, #268]	; (801a474 <pvPortMalloc+0x18c>)
 801a366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a368:	4b42      	ldr	r3, [pc, #264]	; (801a474 <pvPortMalloc+0x18c>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a36e:	e004      	b.n	801a37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37c:	685b      	ldr	r3, [r3, #4]
 801a37e:	687a      	ldr	r2, [r7, #4]
 801a380:	429a      	cmp	r2, r3
 801a382:	d903      	bls.n	801a38c <pvPortMalloc+0xa4>
 801a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d1f1      	bne.n	801a370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a38c:	4b36      	ldr	r3, [pc, #216]	; (801a468 <pvPortMalloc+0x180>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a392:	429a      	cmp	r2, r3
 801a394:	d050      	beq.n	801a438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a396:	6a3b      	ldr	r3, [r7, #32]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	2208      	movs	r2, #8
 801a39c:	4413      	add	r3, r2
 801a39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a2:	681a      	ldr	r2, [r3, #0]
 801a3a4:	6a3b      	ldr	r3, [r7, #32]
 801a3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3aa:	685a      	ldr	r2, [r3, #4]
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	1ad2      	subs	r2, r2, r3
 801a3b0:	2308      	movs	r3, #8
 801a3b2:	005b      	lsls	r3, r3, #1
 801a3b4:	429a      	cmp	r2, r3
 801a3b6:	d91f      	bls.n	801a3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	4413      	add	r3, r2
 801a3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3c0:	69bb      	ldr	r3, [r7, #24]
 801a3c2:	f003 0307 	and.w	r3, r3, #7
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d00a      	beq.n	801a3e0 <pvPortMalloc+0xf8>
	__asm volatile
 801a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ce:	f383 8811 	msr	BASEPRI, r3
 801a3d2:	f3bf 8f6f 	isb	sy
 801a3d6:	f3bf 8f4f 	dsb	sy
 801a3da:	613b      	str	r3, [r7, #16]
}
 801a3dc:	bf00      	nop
 801a3de:	e7fe      	b.n	801a3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3e2:	685a      	ldr	r2, [r3, #4]
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	1ad2      	subs	r2, r2, r3
 801a3e8:	69bb      	ldr	r3, [r7, #24]
 801a3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ee:	687a      	ldr	r2, [r7, #4]
 801a3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a3f2:	69b8      	ldr	r0, [r7, #24]
 801a3f4:	f000 f908 	bl	801a608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a3f8:	4b1d      	ldr	r3, [pc, #116]	; (801a470 <pvPortMalloc+0x188>)
 801a3fa:	681a      	ldr	r2, [r3, #0]
 801a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3fe:	685b      	ldr	r3, [r3, #4]
 801a400:	1ad3      	subs	r3, r2, r3
 801a402:	4a1b      	ldr	r2, [pc, #108]	; (801a470 <pvPortMalloc+0x188>)
 801a404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a406:	4b1a      	ldr	r3, [pc, #104]	; (801a470 <pvPortMalloc+0x188>)
 801a408:	681a      	ldr	r2, [r3, #0]
 801a40a:	4b1b      	ldr	r3, [pc, #108]	; (801a478 <pvPortMalloc+0x190>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	429a      	cmp	r2, r3
 801a410:	d203      	bcs.n	801a41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a412:	4b17      	ldr	r3, [pc, #92]	; (801a470 <pvPortMalloc+0x188>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	4a18      	ldr	r2, [pc, #96]	; (801a478 <pvPortMalloc+0x190>)
 801a418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a41c:	685a      	ldr	r2, [r3, #4]
 801a41e:	4b13      	ldr	r3, [pc, #76]	; (801a46c <pvPortMalloc+0x184>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	431a      	orrs	r2, r3
 801a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a42a:	2200      	movs	r2, #0
 801a42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a42e:	4b13      	ldr	r3, [pc, #76]	; (801a47c <pvPortMalloc+0x194>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	3301      	adds	r3, #1
 801a434:	4a11      	ldr	r2, [pc, #68]	; (801a47c <pvPortMalloc+0x194>)
 801a436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a438:	f7fe fc1c 	bl	8018c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a43c:	69fb      	ldr	r3, [r7, #28]
 801a43e:	f003 0307 	and.w	r3, r3, #7
 801a442:	2b00      	cmp	r3, #0
 801a444:	d00a      	beq.n	801a45c <pvPortMalloc+0x174>
	__asm volatile
 801a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a44a:	f383 8811 	msr	BASEPRI, r3
 801a44e:	f3bf 8f6f 	isb	sy
 801a452:	f3bf 8f4f 	dsb	sy
 801a456:	60fb      	str	r3, [r7, #12]
}
 801a458:	bf00      	nop
 801a45a:	e7fe      	b.n	801a45a <pvPortMalloc+0x172>
	return pvReturn;
 801a45c:	69fb      	ldr	r3, [r7, #28]
}
 801a45e:	4618      	mov	r0, r3
 801a460:	3728      	adds	r7, #40	; 0x28
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}
 801a466:	bf00      	nop
 801a468:	24006954 	.word	0x24006954
 801a46c:	24006968 	.word	0x24006968
 801a470:	24006958 	.word	0x24006958
 801a474:	2400694c 	.word	0x2400694c
 801a478:	2400695c 	.word	0x2400695c
 801a47c:	24006960 	.word	0x24006960

0801a480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a480:	b580      	push	{r7, lr}
 801a482:	b086      	sub	sp, #24
 801a484:	af00      	add	r7, sp, #0
 801a486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d04d      	beq.n	801a52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a492:	2308      	movs	r3, #8
 801a494:	425b      	negs	r3, r3
 801a496:	697a      	ldr	r2, [r7, #20]
 801a498:	4413      	add	r3, r2
 801a49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a49c:	697b      	ldr	r3, [r7, #20]
 801a49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a4a0:	693b      	ldr	r3, [r7, #16]
 801a4a2:	685a      	ldr	r2, [r3, #4]
 801a4a4:	4b24      	ldr	r3, [pc, #144]	; (801a538 <vPortFree+0xb8>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	4013      	ands	r3, r2
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d10a      	bne.n	801a4c4 <vPortFree+0x44>
	__asm volatile
 801a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4b2:	f383 8811 	msr	BASEPRI, r3
 801a4b6:	f3bf 8f6f 	isb	sy
 801a4ba:	f3bf 8f4f 	dsb	sy
 801a4be:	60fb      	str	r3, [r7, #12]
}
 801a4c0:	bf00      	nop
 801a4c2:	e7fe      	b.n	801a4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a4c4:	693b      	ldr	r3, [r7, #16]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d00a      	beq.n	801a4e2 <vPortFree+0x62>
	__asm volatile
 801a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4d0:	f383 8811 	msr	BASEPRI, r3
 801a4d4:	f3bf 8f6f 	isb	sy
 801a4d8:	f3bf 8f4f 	dsb	sy
 801a4dc:	60bb      	str	r3, [r7, #8]
}
 801a4de:	bf00      	nop
 801a4e0:	e7fe      	b.n	801a4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a4e2:	693b      	ldr	r3, [r7, #16]
 801a4e4:	685a      	ldr	r2, [r3, #4]
 801a4e6:	4b14      	ldr	r3, [pc, #80]	; (801a538 <vPortFree+0xb8>)
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	4013      	ands	r3, r2
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d01e      	beq.n	801a52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a4f0:	693b      	ldr	r3, [r7, #16]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d11a      	bne.n	801a52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a4f8:	693b      	ldr	r3, [r7, #16]
 801a4fa:	685a      	ldr	r2, [r3, #4]
 801a4fc:	4b0e      	ldr	r3, [pc, #56]	; (801a538 <vPortFree+0xb8>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	43db      	mvns	r3, r3
 801a502:	401a      	ands	r2, r3
 801a504:	693b      	ldr	r3, [r7, #16]
 801a506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a508:	f7fe fba6 	bl	8018c58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a50c:	693b      	ldr	r3, [r7, #16]
 801a50e:	685a      	ldr	r2, [r3, #4]
 801a510:	4b0a      	ldr	r3, [pc, #40]	; (801a53c <vPortFree+0xbc>)
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	4413      	add	r3, r2
 801a516:	4a09      	ldr	r2, [pc, #36]	; (801a53c <vPortFree+0xbc>)
 801a518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a51a:	6938      	ldr	r0, [r7, #16]
 801a51c:	f000 f874 	bl	801a608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a520:	4b07      	ldr	r3, [pc, #28]	; (801a540 <vPortFree+0xc0>)
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	3301      	adds	r3, #1
 801a526:	4a06      	ldr	r2, [pc, #24]	; (801a540 <vPortFree+0xc0>)
 801a528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a52a:	f7fe fba3 	bl	8018c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a52e:	bf00      	nop
 801a530:	3718      	adds	r7, #24
 801a532:	46bd      	mov	sp, r7
 801a534:	bd80      	pop	{r7, pc}
 801a536:	bf00      	nop
 801a538:	24006968 	.word	0x24006968
 801a53c:	24006958 	.word	0x24006958
 801a540:	24006964 	.word	0x24006964

0801a544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a544:	b480      	push	{r7}
 801a546:	b085      	sub	sp, #20
 801a548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a54a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a550:	4b27      	ldr	r3, [pc, #156]	; (801a5f0 <prvHeapInit+0xac>)
 801a552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	f003 0307 	and.w	r3, r3, #7
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d00c      	beq.n	801a578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	3307      	adds	r3, #7
 801a562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	f023 0307 	bic.w	r3, r3, #7
 801a56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a56c:	68ba      	ldr	r2, [r7, #8]
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	1ad3      	subs	r3, r2, r3
 801a572:	4a1f      	ldr	r2, [pc, #124]	; (801a5f0 <prvHeapInit+0xac>)
 801a574:	4413      	add	r3, r2
 801a576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a57c:	4a1d      	ldr	r2, [pc, #116]	; (801a5f4 <prvHeapInit+0xb0>)
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a582:	4b1c      	ldr	r3, [pc, #112]	; (801a5f4 <prvHeapInit+0xb0>)
 801a584:	2200      	movs	r2, #0
 801a586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	68ba      	ldr	r2, [r7, #8]
 801a58c:	4413      	add	r3, r2
 801a58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a590:	2208      	movs	r2, #8
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	1a9b      	subs	r3, r3, r2
 801a596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	f023 0307 	bic.w	r3, r3, #7
 801a59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	4a15      	ldr	r2, [pc, #84]	; (801a5f8 <prvHeapInit+0xb4>)
 801a5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a5a6:	4b14      	ldr	r3, [pc, #80]	; (801a5f8 <prvHeapInit+0xb4>)
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a5ae:	4b12      	ldr	r3, [pc, #72]	; (801a5f8 <prvHeapInit+0xb4>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	68fa      	ldr	r2, [r7, #12]
 801a5be:	1ad2      	subs	r2, r2, r3
 801a5c0:	683b      	ldr	r3, [r7, #0]
 801a5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a5c4:	4b0c      	ldr	r3, [pc, #48]	; (801a5f8 <prvHeapInit+0xb4>)
 801a5c6:	681a      	ldr	r2, [r3, #0]
 801a5c8:	683b      	ldr	r3, [r7, #0]
 801a5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	685b      	ldr	r3, [r3, #4]
 801a5d0:	4a0a      	ldr	r2, [pc, #40]	; (801a5fc <prvHeapInit+0xb8>)
 801a5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5d4:	683b      	ldr	r3, [r7, #0]
 801a5d6:	685b      	ldr	r3, [r3, #4]
 801a5d8:	4a09      	ldr	r2, [pc, #36]	; (801a600 <prvHeapInit+0xbc>)
 801a5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a5dc:	4b09      	ldr	r3, [pc, #36]	; (801a604 <prvHeapInit+0xc0>)
 801a5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a5e2:	601a      	str	r2, [r3, #0]
}
 801a5e4:	bf00      	nop
 801a5e6:	3714      	adds	r7, #20
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ee:	4770      	bx	lr
 801a5f0:	24002d4c 	.word	0x24002d4c
 801a5f4:	2400694c 	.word	0x2400694c
 801a5f8:	24006954 	.word	0x24006954
 801a5fc:	2400695c 	.word	0x2400695c
 801a600:	24006958 	.word	0x24006958
 801a604:	24006968 	.word	0x24006968

0801a608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a608:	b480      	push	{r7}
 801a60a:	b085      	sub	sp, #20
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a610:	4b28      	ldr	r3, [pc, #160]	; (801a6b4 <prvInsertBlockIntoFreeList+0xac>)
 801a612:	60fb      	str	r3, [r7, #12]
 801a614:	e002      	b.n	801a61c <prvInsertBlockIntoFreeList+0x14>
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	60fb      	str	r3, [r7, #12]
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	687a      	ldr	r2, [r7, #4]
 801a622:	429a      	cmp	r2, r3
 801a624:	d8f7      	bhi.n	801a616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	685b      	ldr	r3, [r3, #4]
 801a62e:	68ba      	ldr	r2, [r7, #8]
 801a630:	4413      	add	r3, r2
 801a632:	687a      	ldr	r2, [r7, #4]
 801a634:	429a      	cmp	r2, r3
 801a636:	d108      	bne.n	801a64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	685a      	ldr	r2, [r3, #4]
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	441a      	add	r2, r3
 801a642:	68fb      	ldr	r3, [r7, #12]
 801a644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	68ba      	ldr	r2, [r7, #8]
 801a654:	441a      	add	r2, r3
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	429a      	cmp	r2, r3
 801a65c:	d118      	bne.n	801a690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	681a      	ldr	r2, [r3, #0]
 801a662:	4b15      	ldr	r3, [pc, #84]	; (801a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	429a      	cmp	r2, r3
 801a668:	d00d      	beq.n	801a686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	685a      	ldr	r2, [r3, #4]
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	685b      	ldr	r3, [r3, #4]
 801a674:	441a      	add	r2, r3
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	681a      	ldr	r2, [r3, #0]
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	601a      	str	r2, [r3, #0]
 801a684:	e008      	b.n	801a698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a686:	4b0c      	ldr	r3, [pc, #48]	; (801a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 801a688:	681a      	ldr	r2, [r3, #0]
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	601a      	str	r2, [r3, #0]
 801a68e:	e003      	b.n	801a698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	681a      	ldr	r2, [r3, #0]
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a698:	68fa      	ldr	r2, [r7, #12]
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	429a      	cmp	r2, r3
 801a69e:	d002      	beq.n	801a6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	687a      	ldr	r2, [r7, #4]
 801a6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a6a6:	bf00      	nop
 801a6a8:	3714      	adds	r7, #20
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b0:	4770      	bx	lr
 801a6b2:	bf00      	nop
 801a6b4:	2400694c 	.word	0x2400694c
 801a6b8:	24006954 	.word	0x24006954

0801a6bc <__errno>:
 801a6bc:	4b01      	ldr	r3, [pc, #4]	; (801a6c4 <__errno+0x8>)
 801a6be:	6818      	ldr	r0, [r3, #0]
 801a6c0:	4770      	bx	lr
 801a6c2:	bf00      	nop
 801a6c4:	240000d4 	.word	0x240000d4

0801a6c8 <__libc_init_array>:
 801a6c8:	b570      	push	{r4, r5, r6, lr}
 801a6ca:	4d0d      	ldr	r5, [pc, #52]	; (801a700 <__libc_init_array+0x38>)
 801a6cc:	4c0d      	ldr	r4, [pc, #52]	; (801a704 <__libc_init_array+0x3c>)
 801a6ce:	1b64      	subs	r4, r4, r5
 801a6d0:	10a4      	asrs	r4, r4, #2
 801a6d2:	2600      	movs	r6, #0
 801a6d4:	42a6      	cmp	r6, r4
 801a6d6:	d109      	bne.n	801a6ec <__libc_init_array+0x24>
 801a6d8:	4d0b      	ldr	r5, [pc, #44]	; (801a708 <__libc_init_array+0x40>)
 801a6da:	4c0c      	ldr	r4, [pc, #48]	; (801a70c <__libc_init_array+0x44>)
 801a6dc:	f000 fd2c 	bl	801b138 <_init>
 801a6e0:	1b64      	subs	r4, r4, r5
 801a6e2:	10a4      	asrs	r4, r4, #2
 801a6e4:	2600      	movs	r6, #0
 801a6e6:	42a6      	cmp	r6, r4
 801a6e8:	d105      	bne.n	801a6f6 <__libc_init_array+0x2e>
 801a6ea:	bd70      	pop	{r4, r5, r6, pc}
 801a6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6f0:	4798      	blx	r3
 801a6f2:	3601      	adds	r6, #1
 801a6f4:	e7ee      	b.n	801a6d4 <__libc_init_array+0xc>
 801a6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6fa:	4798      	blx	r3
 801a6fc:	3601      	adds	r6, #1
 801a6fe:	e7f2      	b.n	801a6e6 <__libc_init_array+0x1e>
 801a700:	0801b5f0 	.word	0x0801b5f0
 801a704:	0801b5f0 	.word	0x0801b5f0
 801a708:	0801b5f0 	.word	0x0801b5f0
 801a70c:	0801b5f4 	.word	0x0801b5f4

0801a710 <memcpy>:
 801a710:	440a      	add	r2, r1
 801a712:	4291      	cmp	r1, r2
 801a714:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a718:	d100      	bne.n	801a71c <memcpy+0xc>
 801a71a:	4770      	bx	lr
 801a71c:	b510      	push	{r4, lr}
 801a71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a722:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a726:	4291      	cmp	r1, r2
 801a728:	d1f9      	bne.n	801a71e <memcpy+0xe>
 801a72a:	bd10      	pop	{r4, pc}

0801a72c <memset>:
 801a72c:	4402      	add	r2, r0
 801a72e:	4603      	mov	r3, r0
 801a730:	4293      	cmp	r3, r2
 801a732:	d100      	bne.n	801a736 <memset+0xa>
 801a734:	4770      	bx	lr
 801a736:	f803 1b01 	strb.w	r1, [r3], #1
 801a73a:	e7f9      	b.n	801a730 <memset+0x4>

0801a73c <_puts_r>:
 801a73c:	b570      	push	{r4, r5, r6, lr}
 801a73e:	460e      	mov	r6, r1
 801a740:	4605      	mov	r5, r0
 801a742:	b118      	cbz	r0, 801a74c <_puts_r+0x10>
 801a744:	6983      	ldr	r3, [r0, #24]
 801a746:	b90b      	cbnz	r3, 801a74c <_puts_r+0x10>
 801a748:	f000 fa48 	bl	801abdc <__sinit>
 801a74c:	69ab      	ldr	r3, [r5, #24]
 801a74e:	68ac      	ldr	r4, [r5, #8]
 801a750:	b913      	cbnz	r3, 801a758 <_puts_r+0x1c>
 801a752:	4628      	mov	r0, r5
 801a754:	f000 fa42 	bl	801abdc <__sinit>
 801a758:	4b2c      	ldr	r3, [pc, #176]	; (801a80c <_puts_r+0xd0>)
 801a75a:	429c      	cmp	r4, r3
 801a75c:	d120      	bne.n	801a7a0 <_puts_r+0x64>
 801a75e:	686c      	ldr	r4, [r5, #4]
 801a760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a762:	07db      	lsls	r3, r3, #31
 801a764:	d405      	bmi.n	801a772 <_puts_r+0x36>
 801a766:	89a3      	ldrh	r3, [r4, #12]
 801a768:	0598      	lsls	r0, r3, #22
 801a76a:	d402      	bmi.n	801a772 <_puts_r+0x36>
 801a76c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a76e:	f000 fad3 	bl	801ad18 <__retarget_lock_acquire_recursive>
 801a772:	89a3      	ldrh	r3, [r4, #12]
 801a774:	0719      	lsls	r1, r3, #28
 801a776:	d51d      	bpl.n	801a7b4 <_puts_r+0x78>
 801a778:	6923      	ldr	r3, [r4, #16]
 801a77a:	b1db      	cbz	r3, 801a7b4 <_puts_r+0x78>
 801a77c:	3e01      	subs	r6, #1
 801a77e:	68a3      	ldr	r3, [r4, #8]
 801a780:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a784:	3b01      	subs	r3, #1
 801a786:	60a3      	str	r3, [r4, #8]
 801a788:	bb39      	cbnz	r1, 801a7da <_puts_r+0x9e>
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	da38      	bge.n	801a800 <_puts_r+0xc4>
 801a78e:	4622      	mov	r2, r4
 801a790:	210a      	movs	r1, #10
 801a792:	4628      	mov	r0, r5
 801a794:	f000 f848 	bl	801a828 <__swbuf_r>
 801a798:	3001      	adds	r0, #1
 801a79a:	d011      	beq.n	801a7c0 <_puts_r+0x84>
 801a79c:	250a      	movs	r5, #10
 801a79e:	e011      	b.n	801a7c4 <_puts_r+0x88>
 801a7a0:	4b1b      	ldr	r3, [pc, #108]	; (801a810 <_puts_r+0xd4>)
 801a7a2:	429c      	cmp	r4, r3
 801a7a4:	d101      	bne.n	801a7aa <_puts_r+0x6e>
 801a7a6:	68ac      	ldr	r4, [r5, #8]
 801a7a8:	e7da      	b.n	801a760 <_puts_r+0x24>
 801a7aa:	4b1a      	ldr	r3, [pc, #104]	; (801a814 <_puts_r+0xd8>)
 801a7ac:	429c      	cmp	r4, r3
 801a7ae:	bf08      	it	eq
 801a7b0:	68ec      	ldreq	r4, [r5, #12]
 801a7b2:	e7d5      	b.n	801a760 <_puts_r+0x24>
 801a7b4:	4621      	mov	r1, r4
 801a7b6:	4628      	mov	r0, r5
 801a7b8:	f000 f888 	bl	801a8cc <__swsetup_r>
 801a7bc:	2800      	cmp	r0, #0
 801a7be:	d0dd      	beq.n	801a77c <_puts_r+0x40>
 801a7c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a7c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a7c6:	07da      	lsls	r2, r3, #31
 801a7c8:	d405      	bmi.n	801a7d6 <_puts_r+0x9a>
 801a7ca:	89a3      	ldrh	r3, [r4, #12]
 801a7cc:	059b      	lsls	r3, r3, #22
 801a7ce:	d402      	bmi.n	801a7d6 <_puts_r+0x9a>
 801a7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7d2:	f000 faa2 	bl	801ad1a <__retarget_lock_release_recursive>
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	bd70      	pop	{r4, r5, r6, pc}
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	da04      	bge.n	801a7e8 <_puts_r+0xac>
 801a7de:	69a2      	ldr	r2, [r4, #24]
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	dc06      	bgt.n	801a7f2 <_puts_r+0xb6>
 801a7e4:	290a      	cmp	r1, #10
 801a7e6:	d004      	beq.n	801a7f2 <_puts_r+0xb6>
 801a7e8:	6823      	ldr	r3, [r4, #0]
 801a7ea:	1c5a      	adds	r2, r3, #1
 801a7ec:	6022      	str	r2, [r4, #0]
 801a7ee:	7019      	strb	r1, [r3, #0]
 801a7f0:	e7c5      	b.n	801a77e <_puts_r+0x42>
 801a7f2:	4622      	mov	r2, r4
 801a7f4:	4628      	mov	r0, r5
 801a7f6:	f000 f817 	bl	801a828 <__swbuf_r>
 801a7fa:	3001      	adds	r0, #1
 801a7fc:	d1bf      	bne.n	801a77e <_puts_r+0x42>
 801a7fe:	e7df      	b.n	801a7c0 <_puts_r+0x84>
 801a800:	6823      	ldr	r3, [r4, #0]
 801a802:	250a      	movs	r5, #10
 801a804:	1c5a      	adds	r2, r3, #1
 801a806:	6022      	str	r2, [r4, #0]
 801a808:	701d      	strb	r5, [r3, #0]
 801a80a:	e7db      	b.n	801a7c4 <_puts_r+0x88>
 801a80c:	0801b5a8 	.word	0x0801b5a8
 801a810:	0801b5c8 	.word	0x0801b5c8
 801a814:	0801b588 	.word	0x0801b588

0801a818 <puts>:
 801a818:	4b02      	ldr	r3, [pc, #8]	; (801a824 <puts+0xc>)
 801a81a:	4601      	mov	r1, r0
 801a81c:	6818      	ldr	r0, [r3, #0]
 801a81e:	f7ff bf8d 	b.w	801a73c <_puts_r>
 801a822:	bf00      	nop
 801a824:	240000d4 	.word	0x240000d4

0801a828 <__swbuf_r>:
 801a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a82a:	460e      	mov	r6, r1
 801a82c:	4614      	mov	r4, r2
 801a82e:	4605      	mov	r5, r0
 801a830:	b118      	cbz	r0, 801a83a <__swbuf_r+0x12>
 801a832:	6983      	ldr	r3, [r0, #24]
 801a834:	b90b      	cbnz	r3, 801a83a <__swbuf_r+0x12>
 801a836:	f000 f9d1 	bl	801abdc <__sinit>
 801a83a:	4b21      	ldr	r3, [pc, #132]	; (801a8c0 <__swbuf_r+0x98>)
 801a83c:	429c      	cmp	r4, r3
 801a83e:	d12b      	bne.n	801a898 <__swbuf_r+0x70>
 801a840:	686c      	ldr	r4, [r5, #4]
 801a842:	69a3      	ldr	r3, [r4, #24]
 801a844:	60a3      	str	r3, [r4, #8]
 801a846:	89a3      	ldrh	r3, [r4, #12]
 801a848:	071a      	lsls	r2, r3, #28
 801a84a:	d52f      	bpl.n	801a8ac <__swbuf_r+0x84>
 801a84c:	6923      	ldr	r3, [r4, #16]
 801a84e:	b36b      	cbz	r3, 801a8ac <__swbuf_r+0x84>
 801a850:	6923      	ldr	r3, [r4, #16]
 801a852:	6820      	ldr	r0, [r4, #0]
 801a854:	1ac0      	subs	r0, r0, r3
 801a856:	6963      	ldr	r3, [r4, #20]
 801a858:	b2f6      	uxtb	r6, r6
 801a85a:	4283      	cmp	r3, r0
 801a85c:	4637      	mov	r7, r6
 801a85e:	dc04      	bgt.n	801a86a <__swbuf_r+0x42>
 801a860:	4621      	mov	r1, r4
 801a862:	4628      	mov	r0, r5
 801a864:	f000 f926 	bl	801aab4 <_fflush_r>
 801a868:	bb30      	cbnz	r0, 801a8b8 <__swbuf_r+0x90>
 801a86a:	68a3      	ldr	r3, [r4, #8]
 801a86c:	3b01      	subs	r3, #1
 801a86e:	60a3      	str	r3, [r4, #8]
 801a870:	6823      	ldr	r3, [r4, #0]
 801a872:	1c5a      	adds	r2, r3, #1
 801a874:	6022      	str	r2, [r4, #0]
 801a876:	701e      	strb	r6, [r3, #0]
 801a878:	6963      	ldr	r3, [r4, #20]
 801a87a:	3001      	adds	r0, #1
 801a87c:	4283      	cmp	r3, r0
 801a87e:	d004      	beq.n	801a88a <__swbuf_r+0x62>
 801a880:	89a3      	ldrh	r3, [r4, #12]
 801a882:	07db      	lsls	r3, r3, #31
 801a884:	d506      	bpl.n	801a894 <__swbuf_r+0x6c>
 801a886:	2e0a      	cmp	r6, #10
 801a888:	d104      	bne.n	801a894 <__swbuf_r+0x6c>
 801a88a:	4621      	mov	r1, r4
 801a88c:	4628      	mov	r0, r5
 801a88e:	f000 f911 	bl	801aab4 <_fflush_r>
 801a892:	b988      	cbnz	r0, 801a8b8 <__swbuf_r+0x90>
 801a894:	4638      	mov	r0, r7
 801a896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a898:	4b0a      	ldr	r3, [pc, #40]	; (801a8c4 <__swbuf_r+0x9c>)
 801a89a:	429c      	cmp	r4, r3
 801a89c:	d101      	bne.n	801a8a2 <__swbuf_r+0x7a>
 801a89e:	68ac      	ldr	r4, [r5, #8]
 801a8a0:	e7cf      	b.n	801a842 <__swbuf_r+0x1a>
 801a8a2:	4b09      	ldr	r3, [pc, #36]	; (801a8c8 <__swbuf_r+0xa0>)
 801a8a4:	429c      	cmp	r4, r3
 801a8a6:	bf08      	it	eq
 801a8a8:	68ec      	ldreq	r4, [r5, #12]
 801a8aa:	e7ca      	b.n	801a842 <__swbuf_r+0x1a>
 801a8ac:	4621      	mov	r1, r4
 801a8ae:	4628      	mov	r0, r5
 801a8b0:	f000 f80c 	bl	801a8cc <__swsetup_r>
 801a8b4:	2800      	cmp	r0, #0
 801a8b6:	d0cb      	beq.n	801a850 <__swbuf_r+0x28>
 801a8b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a8bc:	e7ea      	b.n	801a894 <__swbuf_r+0x6c>
 801a8be:	bf00      	nop
 801a8c0:	0801b5a8 	.word	0x0801b5a8
 801a8c4:	0801b5c8 	.word	0x0801b5c8
 801a8c8:	0801b588 	.word	0x0801b588

0801a8cc <__swsetup_r>:
 801a8cc:	4b32      	ldr	r3, [pc, #200]	; (801a998 <__swsetup_r+0xcc>)
 801a8ce:	b570      	push	{r4, r5, r6, lr}
 801a8d0:	681d      	ldr	r5, [r3, #0]
 801a8d2:	4606      	mov	r6, r0
 801a8d4:	460c      	mov	r4, r1
 801a8d6:	b125      	cbz	r5, 801a8e2 <__swsetup_r+0x16>
 801a8d8:	69ab      	ldr	r3, [r5, #24]
 801a8da:	b913      	cbnz	r3, 801a8e2 <__swsetup_r+0x16>
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f000 f97d 	bl	801abdc <__sinit>
 801a8e2:	4b2e      	ldr	r3, [pc, #184]	; (801a99c <__swsetup_r+0xd0>)
 801a8e4:	429c      	cmp	r4, r3
 801a8e6:	d10f      	bne.n	801a908 <__swsetup_r+0x3c>
 801a8e8:	686c      	ldr	r4, [r5, #4]
 801a8ea:	89a3      	ldrh	r3, [r4, #12]
 801a8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a8f0:	0719      	lsls	r1, r3, #28
 801a8f2:	d42c      	bmi.n	801a94e <__swsetup_r+0x82>
 801a8f4:	06dd      	lsls	r5, r3, #27
 801a8f6:	d411      	bmi.n	801a91c <__swsetup_r+0x50>
 801a8f8:	2309      	movs	r3, #9
 801a8fa:	6033      	str	r3, [r6, #0]
 801a8fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a900:	81a3      	strh	r3, [r4, #12]
 801a902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a906:	e03e      	b.n	801a986 <__swsetup_r+0xba>
 801a908:	4b25      	ldr	r3, [pc, #148]	; (801a9a0 <__swsetup_r+0xd4>)
 801a90a:	429c      	cmp	r4, r3
 801a90c:	d101      	bne.n	801a912 <__swsetup_r+0x46>
 801a90e:	68ac      	ldr	r4, [r5, #8]
 801a910:	e7eb      	b.n	801a8ea <__swsetup_r+0x1e>
 801a912:	4b24      	ldr	r3, [pc, #144]	; (801a9a4 <__swsetup_r+0xd8>)
 801a914:	429c      	cmp	r4, r3
 801a916:	bf08      	it	eq
 801a918:	68ec      	ldreq	r4, [r5, #12]
 801a91a:	e7e6      	b.n	801a8ea <__swsetup_r+0x1e>
 801a91c:	0758      	lsls	r0, r3, #29
 801a91e:	d512      	bpl.n	801a946 <__swsetup_r+0x7a>
 801a920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a922:	b141      	cbz	r1, 801a936 <__swsetup_r+0x6a>
 801a924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a928:	4299      	cmp	r1, r3
 801a92a:	d002      	beq.n	801a932 <__swsetup_r+0x66>
 801a92c:	4630      	mov	r0, r6
 801a92e:	f000 fa5b 	bl	801ade8 <_free_r>
 801a932:	2300      	movs	r3, #0
 801a934:	6363      	str	r3, [r4, #52]	; 0x34
 801a936:	89a3      	ldrh	r3, [r4, #12]
 801a938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a93c:	81a3      	strh	r3, [r4, #12]
 801a93e:	2300      	movs	r3, #0
 801a940:	6063      	str	r3, [r4, #4]
 801a942:	6923      	ldr	r3, [r4, #16]
 801a944:	6023      	str	r3, [r4, #0]
 801a946:	89a3      	ldrh	r3, [r4, #12]
 801a948:	f043 0308 	orr.w	r3, r3, #8
 801a94c:	81a3      	strh	r3, [r4, #12]
 801a94e:	6923      	ldr	r3, [r4, #16]
 801a950:	b94b      	cbnz	r3, 801a966 <__swsetup_r+0x9a>
 801a952:	89a3      	ldrh	r3, [r4, #12]
 801a954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a95c:	d003      	beq.n	801a966 <__swsetup_r+0x9a>
 801a95e:	4621      	mov	r1, r4
 801a960:	4630      	mov	r0, r6
 801a962:	f000 fa01 	bl	801ad68 <__smakebuf_r>
 801a966:	89a0      	ldrh	r0, [r4, #12]
 801a968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a96c:	f010 0301 	ands.w	r3, r0, #1
 801a970:	d00a      	beq.n	801a988 <__swsetup_r+0xbc>
 801a972:	2300      	movs	r3, #0
 801a974:	60a3      	str	r3, [r4, #8]
 801a976:	6963      	ldr	r3, [r4, #20]
 801a978:	425b      	negs	r3, r3
 801a97a:	61a3      	str	r3, [r4, #24]
 801a97c:	6923      	ldr	r3, [r4, #16]
 801a97e:	b943      	cbnz	r3, 801a992 <__swsetup_r+0xc6>
 801a980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a984:	d1ba      	bne.n	801a8fc <__swsetup_r+0x30>
 801a986:	bd70      	pop	{r4, r5, r6, pc}
 801a988:	0781      	lsls	r1, r0, #30
 801a98a:	bf58      	it	pl
 801a98c:	6963      	ldrpl	r3, [r4, #20]
 801a98e:	60a3      	str	r3, [r4, #8]
 801a990:	e7f4      	b.n	801a97c <__swsetup_r+0xb0>
 801a992:	2000      	movs	r0, #0
 801a994:	e7f7      	b.n	801a986 <__swsetup_r+0xba>
 801a996:	bf00      	nop
 801a998:	240000d4 	.word	0x240000d4
 801a99c:	0801b5a8 	.word	0x0801b5a8
 801a9a0:	0801b5c8 	.word	0x0801b5c8
 801a9a4:	0801b588 	.word	0x0801b588

0801a9a8 <__sflush_r>:
 801a9a8:	898a      	ldrh	r2, [r1, #12]
 801a9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ae:	4605      	mov	r5, r0
 801a9b0:	0710      	lsls	r0, r2, #28
 801a9b2:	460c      	mov	r4, r1
 801a9b4:	d458      	bmi.n	801aa68 <__sflush_r+0xc0>
 801a9b6:	684b      	ldr	r3, [r1, #4]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	dc05      	bgt.n	801a9c8 <__sflush_r+0x20>
 801a9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	dc02      	bgt.n	801a9c8 <__sflush_r+0x20>
 801a9c2:	2000      	movs	r0, #0
 801a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9ca:	2e00      	cmp	r6, #0
 801a9cc:	d0f9      	beq.n	801a9c2 <__sflush_r+0x1a>
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a9d4:	682f      	ldr	r7, [r5, #0]
 801a9d6:	602b      	str	r3, [r5, #0]
 801a9d8:	d032      	beq.n	801aa40 <__sflush_r+0x98>
 801a9da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a9dc:	89a3      	ldrh	r3, [r4, #12]
 801a9de:	075a      	lsls	r2, r3, #29
 801a9e0:	d505      	bpl.n	801a9ee <__sflush_r+0x46>
 801a9e2:	6863      	ldr	r3, [r4, #4]
 801a9e4:	1ac0      	subs	r0, r0, r3
 801a9e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a9e8:	b10b      	cbz	r3, 801a9ee <__sflush_r+0x46>
 801a9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a9ec:	1ac0      	subs	r0, r0, r3
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	4602      	mov	r2, r0
 801a9f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9f4:	6a21      	ldr	r1, [r4, #32]
 801a9f6:	4628      	mov	r0, r5
 801a9f8:	47b0      	blx	r6
 801a9fa:	1c43      	adds	r3, r0, #1
 801a9fc:	89a3      	ldrh	r3, [r4, #12]
 801a9fe:	d106      	bne.n	801aa0e <__sflush_r+0x66>
 801aa00:	6829      	ldr	r1, [r5, #0]
 801aa02:	291d      	cmp	r1, #29
 801aa04:	d82c      	bhi.n	801aa60 <__sflush_r+0xb8>
 801aa06:	4a2a      	ldr	r2, [pc, #168]	; (801aab0 <__sflush_r+0x108>)
 801aa08:	40ca      	lsrs	r2, r1
 801aa0a:	07d6      	lsls	r6, r2, #31
 801aa0c:	d528      	bpl.n	801aa60 <__sflush_r+0xb8>
 801aa0e:	2200      	movs	r2, #0
 801aa10:	6062      	str	r2, [r4, #4]
 801aa12:	04d9      	lsls	r1, r3, #19
 801aa14:	6922      	ldr	r2, [r4, #16]
 801aa16:	6022      	str	r2, [r4, #0]
 801aa18:	d504      	bpl.n	801aa24 <__sflush_r+0x7c>
 801aa1a:	1c42      	adds	r2, r0, #1
 801aa1c:	d101      	bne.n	801aa22 <__sflush_r+0x7a>
 801aa1e:	682b      	ldr	r3, [r5, #0]
 801aa20:	b903      	cbnz	r3, 801aa24 <__sflush_r+0x7c>
 801aa22:	6560      	str	r0, [r4, #84]	; 0x54
 801aa24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa26:	602f      	str	r7, [r5, #0]
 801aa28:	2900      	cmp	r1, #0
 801aa2a:	d0ca      	beq.n	801a9c2 <__sflush_r+0x1a>
 801aa2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa30:	4299      	cmp	r1, r3
 801aa32:	d002      	beq.n	801aa3a <__sflush_r+0x92>
 801aa34:	4628      	mov	r0, r5
 801aa36:	f000 f9d7 	bl	801ade8 <_free_r>
 801aa3a:	2000      	movs	r0, #0
 801aa3c:	6360      	str	r0, [r4, #52]	; 0x34
 801aa3e:	e7c1      	b.n	801a9c4 <__sflush_r+0x1c>
 801aa40:	6a21      	ldr	r1, [r4, #32]
 801aa42:	2301      	movs	r3, #1
 801aa44:	4628      	mov	r0, r5
 801aa46:	47b0      	blx	r6
 801aa48:	1c41      	adds	r1, r0, #1
 801aa4a:	d1c7      	bne.n	801a9dc <__sflush_r+0x34>
 801aa4c:	682b      	ldr	r3, [r5, #0]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d0c4      	beq.n	801a9dc <__sflush_r+0x34>
 801aa52:	2b1d      	cmp	r3, #29
 801aa54:	d001      	beq.n	801aa5a <__sflush_r+0xb2>
 801aa56:	2b16      	cmp	r3, #22
 801aa58:	d101      	bne.n	801aa5e <__sflush_r+0xb6>
 801aa5a:	602f      	str	r7, [r5, #0]
 801aa5c:	e7b1      	b.n	801a9c2 <__sflush_r+0x1a>
 801aa5e:	89a3      	ldrh	r3, [r4, #12]
 801aa60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa64:	81a3      	strh	r3, [r4, #12]
 801aa66:	e7ad      	b.n	801a9c4 <__sflush_r+0x1c>
 801aa68:	690f      	ldr	r7, [r1, #16]
 801aa6a:	2f00      	cmp	r7, #0
 801aa6c:	d0a9      	beq.n	801a9c2 <__sflush_r+0x1a>
 801aa6e:	0793      	lsls	r3, r2, #30
 801aa70:	680e      	ldr	r6, [r1, #0]
 801aa72:	bf08      	it	eq
 801aa74:	694b      	ldreq	r3, [r1, #20]
 801aa76:	600f      	str	r7, [r1, #0]
 801aa78:	bf18      	it	ne
 801aa7a:	2300      	movne	r3, #0
 801aa7c:	eba6 0807 	sub.w	r8, r6, r7
 801aa80:	608b      	str	r3, [r1, #8]
 801aa82:	f1b8 0f00 	cmp.w	r8, #0
 801aa86:	dd9c      	ble.n	801a9c2 <__sflush_r+0x1a>
 801aa88:	6a21      	ldr	r1, [r4, #32]
 801aa8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aa8c:	4643      	mov	r3, r8
 801aa8e:	463a      	mov	r2, r7
 801aa90:	4628      	mov	r0, r5
 801aa92:	47b0      	blx	r6
 801aa94:	2800      	cmp	r0, #0
 801aa96:	dc06      	bgt.n	801aaa6 <__sflush_r+0xfe>
 801aa98:	89a3      	ldrh	r3, [r4, #12]
 801aa9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa9e:	81a3      	strh	r3, [r4, #12]
 801aaa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aaa4:	e78e      	b.n	801a9c4 <__sflush_r+0x1c>
 801aaa6:	4407      	add	r7, r0
 801aaa8:	eba8 0800 	sub.w	r8, r8, r0
 801aaac:	e7e9      	b.n	801aa82 <__sflush_r+0xda>
 801aaae:	bf00      	nop
 801aab0:	20400001 	.word	0x20400001

0801aab4 <_fflush_r>:
 801aab4:	b538      	push	{r3, r4, r5, lr}
 801aab6:	690b      	ldr	r3, [r1, #16]
 801aab8:	4605      	mov	r5, r0
 801aaba:	460c      	mov	r4, r1
 801aabc:	b913      	cbnz	r3, 801aac4 <_fflush_r+0x10>
 801aabe:	2500      	movs	r5, #0
 801aac0:	4628      	mov	r0, r5
 801aac2:	bd38      	pop	{r3, r4, r5, pc}
 801aac4:	b118      	cbz	r0, 801aace <_fflush_r+0x1a>
 801aac6:	6983      	ldr	r3, [r0, #24]
 801aac8:	b90b      	cbnz	r3, 801aace <_fflush_r+0x1a>
 801aaca:	f000 f887 	bl	801abdc <__sinit>
 801aace:	4b14      	ldr	r3, [pc, #80]	; (801ab20 <_fflush_r+0x6c>)
 801aad0:	429c      	cmp	r4, r3
 801aad2:	d11b      	bne.n	801ab0c <_fflush_r+0x58>
 801aad4:	686c      	ldr	r4, [r5, #4]
 801aad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d0ef      	beq.n	801aabe <_fflush_r+0xa>
 801aade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aae0:	07d0      	lsls	r0, r2, #31
 801aae2:	d404      	bmi.n	801aaee <_fflush_r+0x3a>
 801aae4:	0599      	lsls	r1, r3, #22
 801aae6:	d402      	bmi.n	801aaee <_fflush_r+0x3a>
 801aae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aaea:	f000 f915 	bl	801ad18 <__retarget_lock_acquire_recursive>
 801aaee:	4628      	mov	r0, r5
 801aaf0:	4621      	mov	r1, r4
 801aaf2:	f7ff ff59 	bl	801a9a8 <__sflush_r>
 801aaf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aaf8:	07da      	lsls	r2, r3, #31
 801aafa:	4605      	mov	r5, r0
 801aafc:	d4e0      	bmi.n	801aac0 <_fflush_r+0xc>
 801aafe:	89a3      	ldrh	r3, [r4, #12]
 801ab00:	059b      	lsls	r3, r3, #22
 801ab02:	d4dd      	bmi.n	801aac0 <_fflush_r+0xc>
 801ab04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab06:	f000 f908 	bl	801ad1a <__retarget_lock_release_recursive>
 801ab0a:	e7d9      	b.n	801aac0 <_fflush_r+0xc>
 801ab0c:	4b05      	ldr	r3, [pc, #20]	; (801ab24 <_fflush_r+0x70>)
 801ab0e:	429c      	cmp	r4, r3
 801ab10:	d101      	bne.n	801ab16 <_fflush_r+0x62>
 801ab12:	68ac      	ldr	r4, [r5, #8]
 801ab14:	e7df      	b.n	801aad6 <_fflush_r+0x22>
 801ab16:	4b04      	ldr	r3, [pc, #16]	; (801ab28 <_fflush_r+0x74>)
 801ab18:	429c      	cmp	r4, r3
 801ab1a:	bf08      	it	eq
 801ab1c:	68ec      	ldreq	r4, [r5, #12]
 801ab1e:	e7da      	b.n	801aad6 <_fflush_r+0x22>
 801ab20:	0801b5a8 	.word	0x0801b5a8
 801ab24:	0801b5c8 	.word	0x0801b5c8
 801ab28:	0801b588 	.word	0x0801b588

0801ab2c <std>:
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	b510      	push	{r4, lr}
 801ab30:	4604      	mov	r4, r0
 801ab32:	e9c0 3300 	strd	r3, r3, [r0]
 801ab36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab3a:	6083      	str	r3, [r0, #8]
 801ab3c:	8181      	strh	r1, [r0, #12]
 801ab3e:	6643      	str	r3, [r0, #100]	; 0x64
 801ab40:	81c2      	strh	r2, [r0, #14]
 801ab42:	6183      	str	r3, [r0, #24]
 801ab44:	4619      	mov	r1, r3
 801ab46:	2208      	movs	r2, #8
 801ab48:	305c      	adds	r0, #92	; 0x5c
 801ab4a:	f7ff fdef 	bl	801a72c <memset>
 801ab4e:	4b05      	ldr	r3, [pc, #20]	; (801ab64 <std+0x38>)
 801ab50:	6263      	str	r3, [r4, #36]	; 0x24
 801ab52:	4b05      	ldr	r3, [pc, #20]	; (801ab68 <std+0x3c>)
 801ab54:	62a3      	str	r3, [r4, #40]	; 0x28
 801ab56:	4b05      	ldr	r3, [pc, #20]	; (801ab6c <std+0x40>)
 801ab58:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab5a:	4b05      	ldr	r3, [pc, #20]	; (801ab70 <std+0x44>)
 801ab5c:	6224      	str	r4, [r4, #32]
 801ab5e:	6323      	str	r3, [r4, #48]	; 0x30
 801ab60:	bd10      	pop	{r4, pc}
 801ab62:	bf00      	nop
 801ab64:	0801afc9 	.word	0x0801afc9
 801ab68:	0801afeb 	.word	0x0801afeb
 801ab6c:	0801b023 	.word	0x0801b023
 801ab70:	0801b047 	.word	0x0801b047

0801ab74 <_cleanup_r>:
 801ab74:	4901      	ldr	r1, [pc, #4]	; (801ab7c <_cleanup_r+0x8>)
 801ab76:	f000 b8af 	b.w	801acd8 <_fwalk_reent>
 801ab7a:	bf00      	nop
 801ab7c:	0801aab5 	.word	0x0801aab5

0801ab80 <__sfmoreglue>:
 801ab80:	b570      	push	{r4, r5, r6, lr}
 801ab82:	2268      	movs	r2, #104	; 0x68
 801ab84:	1e4d      	subs	r5, r1, #1
 801ab86:	4355      	muls	r5, r2
 801ab88:	460e      	mov	r6, r1
 801ab8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ab8e:	f000 f997 	bl	801aec0 <_malloc_r>
 801ab92:	4604      	mov	r4, r0
 801ab94:	b140      	cbz	r0, 801aba8 <__sfmoreglue+0x28>
 801ab96:	2100      	movs	r1, #0
 801ab98:	e9c0 1600 	strd	r1, r6, [r0]
 801ab9c:	300c      	adds	r0, #12
 801ab9e:	60a0      	str	r0, [r4, #8]
 801aba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aba4:	f7ff fdc2 	bl	801a72c <memset>
 801aba8:	4620      	mov	r0, r4
 801abaa:	bd70      	pop	{r4, r5, r6, pc}

0801abac <__sfp_lock_acquire>:
 801abac:	4801      	ldr	r0, [pc, #4]	; (801abb4 <__sfp_lock_acquire+0x8>)
 801abae:	f000 b8b3 	b.w	801ad18 <__retarget_lock_acquire_recursive>
 801abb2:	bf00      	nop
 801abb4:	2400696d 	.word	0x2400696d

0801abb8 <__sfp_lock_release>:
 801abb8:	4801      	ldr	r0, [pc, #4]	; (801abc0 <__sfp_lock_release+0x8>)
 801abba:	f000 b8ae 	b.w	801ad1a <__retarget_lock_release_recursive>
 801abbe:	bf00      	nop
 801abc0:	2400696d 	.word	0x2400696d

0801abc4 <__sinit_lock_acquire>:
 801abc4:	4801      	ldr	r0, [pc, #4]	; (801abcc <__sinit_lock_acquire+0x8>)
 801abc6:	f000 b8a7 	b.w	801ad18 <__retarget_lock_acquire_recursive>
 801abca:	bf00      	nop
 801abcc:	2400696e 	.word	0x2400696e

0801abd0 <__sinit_lock_release>:
 801abd0:	4801      	ldr	r0, [pc, #4]	; (801abd8 <__sinit_lock_release+0x8>)
 801abd2:	f000 b8a2 	b.w	801ad1a <__retarget_lock_release_recursive>
 801abd6:	bf00      	nop
 801abd8:	2400696e 	.word	0x2400696e

0801abdc <__sinit>:
 801abdc:	b510      	push	{r4, lr}
 801abde:	4604      	mov	r4, r0
 801abe0:	f7ff fff0 	bl	801abc4 <__sinit_lock_acquire>
 801abe4:	69a3      	ldr	r3, [r4, #24]
 801abe6:	b11b      	cbz	r3, 801abf0 <__sinit+0x14>
 801abe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abec:	f7ff bff0 	b.w	801abd0 <__sinit_lock_release>
 801abf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801abf4:	6523      	str	r3, [r4, #80]	; 0x50
 801abf6:	4b13      	ldr	r3, [pc, #76]	; (801ac44 <__sinit+0x68>)
 801abf8:	4a13      	ldr	r2, [pc, #76]	; (801ac48 <__sinit+0x6c>)
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	62a2      	str	r2, [r4, #40]	; 0x28
 801abfe:	42a3      	cmp	r3, r4
 801ac00:	bf04      	itt	eq
 801ac02:	2301      	moveq	r3, #1
 801ac04:	61a3      	streq	r3, [r4, #24]
 801ac06:	4620      	mov	r0, r4
 801ac08:	f000 f820 	bl	801ac4c <__sfp>
 801ac0c:	6060      	str	r0, [r4, #4]
 801ac0e:	4620      	mov	r0, r4
 801ac10:	f000 f81c 	bl	801ac4c <__sfp>
 801ac14:	60a0      	str	r0, [r4, #8]
 801ac16:	4620      	mov	r0, r4
 801ac18:	f000 f818 	bl	801ac4c <__sfp>
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	60e0      	str	r0, [r4, #12]
 801ac20:	2104      	movs	r1, #4
 801ac22:	6860      	ldr	r0, [r4, #4]
 801ac24:	f7ff ff82 	bl	801ab2c <std>
 801ac28:	68a0      	ldr	r0, [r4, #8]
 801ac2a:	2201      	movs	r2, #1
 801ac2c:	2109      	movs	r1, #9
 801ac2e:	f7ff ff7d 	bl	801ab2c <std>
 801ac32:	68e0      	ldr	r0, [r4, #12]
 801ac34:	2202      	movs	r2, #2
 801ac36:	2112      	movs	r1, #18
 801ac38:	f7ff ff78 	bl	801ab2c <std>
 801ac3c:	2301      	movs	r3, #1
 801ac3e:	61a3      	str	r3, [r4, #24]
 801ac40:	e7d2      	b.n	801abe8 <__sinit+0xc>
 801ac42:	bf00      	nop
 801ac44:	0801b584 	.word	0x0801b584
 801ac48:	0801ab75 	.word	0x0801ab75

0801ac4c <__sfp>:
 801ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac4e:	4607      	mov	r7, r0
 801ac50:	f7ff ffac 	bl	801abac <__sfp_lock_acquire>
 801ac54:	4b1e      	ldr	r3, [pc, #120]	; (801acd0 <__sfp+0x84>)
 801ac56:	681e      	ldr	r6, [r3, #0]
 801ac58:	69b3      	ldr	r3, [r6, #24]
 801ac5a:	b913      	cbnz	r3, 801ac62 <__sfp+0x16>
 801ac5c:	4630      	mov	r0, r6
 801ac5e:	f7ff ffbd 	bl	801abdc <__sinit>
 801ac62:	3648      	adds	r6, #72	; 0x48
 801ac64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac68:	3b01      	subs	r3, #1
 801ac6a:	d503      	bpl.n	801ac74 <__sfp+0x28>
 801ac6c:	6833      	ldr	r3, [r6, #0]
 801ac6e:	b30b      	cbz	r3, 801acb4 <__sfp+0x68>
 801ac70:	6836      	ldr	r6, [r6, #0]
 801ac72:	e7f7      	b.n	801ac64 <__sfp+0x18>
 801ac74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ac78:	b9d5      	cbnz	r5, 801acb0 <__sfp+0x64>
 801ac7a:	4b16      	ldr	r3, [pc, #88]	; (801acd4 <__sfp+0x88>)
 801ac7c:	60e3      	str	r3, [r4, #12]
 801ac7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ac82:	6665      	str	r5, [r4, #100]	; 0x64
 801ac84:	f000 f847 	bl	801ad16 <__retarget_lock_init_recursive>
 801ac88:	f7ff ff96 	bl	801abb8 <__sfp_lock_release>
 801ac8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ac90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ac94:	6025      	str	r5, [r4, #0]
 801ac96:	61a5      	str	r5, [r4, #24]
 801ac98:	2208      	movs	r2, #8
 801ac9a:	4629      	mov	r1, r5
 801ac9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aca0:	f7ff fd44 	bl	801a72c <memset>
 801aca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801acac:	4620      	mov	r0, r4
 801acae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acb0:	3468      	adds	r4, #104	; 0x68
 801acb2:	e7d9      	b.n	801ac68 <__sfp+0x1c>
 801acb4:	2104      	movs	r1, #4
 801acb6:	4638      	mov	r0, r7
 801acb8:	f7ff ff62 	bl	801ab80 <__sfmoreglue>
 801acbc:	4604      	mov	r4, r0
 801acbe:	6030      	str	r0, [r6, #0]
 801acc0:	2800      	cmp	r0, #0
 801acc2:	d1d5      	bne.n	801ac70 <__sfp+0x24>
 801acc4:	f7ff ff78 	bl	801abb8 <__sfp_lock_release>
 801acc8:	230c      	movs	r3, #12
 801acca:	603b      	str	r3, [r7, #0]
 801accc:	e7ee      	b.n	801acac <__sfp+0x60>
 801acce:	bf00      	nop
 801acd0:	0801b584 	.word	0x0801b584
 801acd4:	ffff0001 	.word	0xffff0001

0801acd8 <_fwalk_reent>:
 801acd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801acdc:	4606      	mov	r6, r0
 801acde:	4688      	mov	r8, r1
 801ace0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ace4:	2700      	movs	r7, #0
 801ace6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801acea:	f1b9 0901 	subs.w	r9, r9, #1
 801acee:	d505      	bpl.n	801acfc <_fwalk_reent+0x24>
 801acf0:	6824      	ldr	r4, [r4, #0]
 801acf2:	2c00      	cmp	r4, #0
 801acf4:	d1f7      	bne.n	801ace6 <_fwalk_reent+0xe>
 801acf6:	4638      	mov	r0, r7
 801acf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acfc:	89ab      	ldrh	r3, [r5, #12]
 801acfe:	2b01      	cmp	r3, #1
 801ad00:	d907      	bls.n	801ad12 <_fwalk_reent+0x3a>
 801ad02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad06:	3301      	adds	r3, #1
 801ad08:	d003      	beq.n	801ad12 <_fwalk_reent+0x3a>
 801ad0a:	4629      	mov	r1, r5
 801ad0c:	4630      	mov	r0, r6
 801ad0e:	47c0      	blx	r8
 801ad10:	4307      	orrs	r7, r0
 801ad12:	3568      	adds	r5, #104	; 0x68
 801ad14:	e7e9      	b.n	801acea <_fwalk_reent+0x12>

0801ad16 <__retarget_lock_init_recursive>:
 801ad16:	4770      	bx	lr

0801ad18 <__retarget_lock_acquire_recursive>:
 801ad18:	4770      	bx	lr

0801ad1a <__retarget_lock_release_recursive>:
 801ad1a:	4770      	bx	lr

0801ad1c <__swhatbuf_r>:
 801ad1c:	b570      	push	{r4, r5, r6, lr}
 801ad1e:	460e      	mov	r6, r1
 801ad20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad24:	2900      	cmp	r1, #0
 801ad26:	b096      	sub	sp, #88	; 0x58
 801ad28:	4614      	mov	r4, r2
 801ad2a:	461d      	mov	r5, r3
 801ad2c:	da08      	bge.n	801ad40 <__swhatbuf_r+0x24>
 801ad2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad32:	2200      	movs	r2, #0
 801ad34:	602a      	str	r2, [r5, #0]
 801ad36:	061a      	lsls	r2, r3, #24
 801ad38:	d410      	bmi.n	801ad5c <__swhatbuf_r+0x40>
 801ad3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad3e:	e00e      	b.n	801ad5e <__swhatbuf_r+0x42>
 801ad40:	466a      	mov	r2, sp
 801ad42:	f000 f9a7 	bl	801b094 <_fstat_r>
 801ad46:	2800      	cmp	r0, #0
 801ad48:	dbf1      	blt.n	801ad2e <__swhatbuf_r+0x12>
 801ad4a:	9a01      	ldr	r2, [sp, #4]
 801ad4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ad50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ad54:	425a      	negs	r2, r3
 801ad56:	415a      	adcs	r2, r3
 801ad58:	602a      	str	r2, [r5, #0]
 801ad5a:	e7ee      	b.n	801ad3a <__swhatbuf_r+0x1e>
 801ad5c:	2340      	movs	r3, #64	; 0x40
 801ad5e:	2000      	movs	r0, #0
 801ad60:	6023      	str	r3, [r4, #0]
 801ad62:	b016      	add	sp, #88	; 0x58
 801ad64:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ad68 <__smakebuf_r>:
 801ad68:	898b      	ldrh	r3, [r1, #12]
 801ad6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad6c:	079d      	lsls	r5, r3, #30
 801ad6e:	4606      	mov	r6, r0
 801ad70:	460c      	mov	r4, r1
 801ad72:	d507      	bpl.n	801ad84 <__smakebuf_r+0x1c>
 801ad74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad78:	6023      	str	r3, [r4, #0]
 801ad7a:	6123      	str	r3, [r4, #16]
 801ad7c:	2301      	movs	r3, #1
 801ad7e:	6163      	str	r3, [r4, #20]
 801ad80:	b002      	add	sp, #8
 801ad82:	bd70      	pop	{r4, r5, r6, pc}
 801ad84:	ab01      	add	r3, sp, #4
 801ad86:	466a      	mov	r2, sp
 801ad88:	f7ff ffc8 	bl	801ad1c <__swhatbuf_r>
 801ad8c:	9900      	ldr	r1, [sp, #0]
 801ad8e:	4605      	mov	r5, r0
 801ad90:	4630      	mov	r0, r6
 801ad92:	f000 f895 	bl	801aec0 <_malloc_r>
 801ad96:	b948      	cbnz	r0, 801adac <__smakebuf_r+0x44>
 801ad98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad9c:	059a      	lsls	r2, r3, #22
 801ad9e:	d4ef      	bmi.n	801ad80 <__smakebuf_r+0x18>
 801ada0:	f023 0303 	bic.w	r3, r3, #3
 801ada4:	f043 0302 	orr.w	r3, r3, #2
 801ada8:	81a3      	strh	r3, [r4, #12]
 801adaa:	e7e3      	b.n	801ad74 <__smakebuf_r+0xc>
 801adac:	4b0d      	ldr	r3, [pc, #52]	; (801ade4 <__smakebuf_r+0x7c>)
 801adae:	62b3      	str	r3, [r6, #40]	; 0x28
 801adb0:	89a3      	ldrh	r3, [r4, #12]
 801adb2:	6020      	str	r0, [r4, #0]
 801adb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adb8:	81a3      	strh	r3, [r4, #12]
 801adba:	9b00      	ldr	r3, [sp, #0]
 801adbc:	6163      	str	r3, [r4, #20]
 801adbe:	9b01      	ldr	r3, [sp, #4]
 801adc0:	6120      	str	r0, [r4, #16]
 801adc2:	b15b      	cbz	r3, 801addc <__smakebuf_r+0x74>
 801adc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adc8:	4630      	mov	r0, r6
 801adca:	f000 f975 	bl	801b0b8 <_isatty_r>
 801adce:	b128      	cbz	r0, 801addc <__smakebuf_r+0x74>
 801add0:	89a3      	ldrh	r3, [r4, #12]
 801add2:	f023 0303 	bic.w	r3, r3, #3
 801add6:	f043 0301 	orr.w	r3, r3, #1
 801adda:	81a3      	strh	r3, [r4, #12]
 801addc:	89a0      	ldrh	r0, [r4, #12]
 801adde:	4305      	orrs	r5, r0
 801ade0:	81a5      	strh	r5, [r4, #12]
 801ade2:	e7cd      	b.n	801ad80 <__smakebuf_r+0x18>
 801ade4:	0801ab75 	.word	0x0801ab75

0801ade8 <_free_r>:
 801ade8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adea:	2900      	cmp	r1, #0
 801adec:	d044      	beq.n	801ae78 <_free_r+0x90>
 801adee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adf2:	9001      	str	r0, [sp, #4]
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	f1a1 0404 	sub.w	r4, r1, #4
 801adfa:	bfb8      	it	lt
 801adfc:	18e4      	addlt	r4, r4, r3
 801adfe:	f000 f97d 	bl	801b0fc <__malloc_lock>
 801ae02:	4a1e      	ldr	r2, [pc, #120]	; (801ae7c <_free_r+0x94>)
 801ae04:	9801      	ldr	r0, [sp, #4]
 801ae06:	6813      	ldr	r3, [r2, #0]
 801ae08:	b933      	cbnz	r3, 801ae18 <_free_r+0x30>
 801ae0a:	6063      	str	r3, [r4, #4]
 801ae0c:	6014      	str	r4, [r2, #0]
 801ae0e:	b003      	add	sp, #12
 801ae10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae14:	f000 b978 	b.w	801b108 <__malloc_unlock>
 801ae18:	42a3      	cmp	r3, r4
 801ae1a:	d908      	bls.n	801ae2e <_free_r+0x46>
 801ae1c:	6825      	ldr	r5, [r4, #0]
 801ae1e:	1961      	adds	r1, r4, r5
 801ae20:	428b      	cmp	r3, r1
 801ae22:	bf01      	itttt	eq
 801ae24:	6819      	ldreq	r1, [r3, #0]
 801ae26:	685b      	ldreq	r3, [r3, #4]
 801ae28:	1949      	addeq	r1, r1, r5
 801ae2a:	6021      	streq	r1, [r4, #0]
 801ae2c:	e7ed      	b.n	801ae0a <_free_r+0x22>
 801ae2e:	461a      	mov	r2, r3
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	b10b      	cbz	r3, 801ae38 <_free_r+0x50>
 801ae34:	42a3      	cmp	r3, r4
 801ae36:	d9fa      	bls.n	801ae2e <_free_r+0x46>
 801ae38:	6811      	ldr	r1, [r2, #0]
 801ae3a:	1855      	adds	r5, r2, r1
 801ae3c:	42a5      	cmp	r5, r4
 801ae3e:	d10b      	bne.n	801ae58 <_free_r+0x70>
 801ae40:	6824      	ldr	r4, [r4, #0]
 801ae42:	4421      	add	r1, r4
 801ae44:	1854      	adds	r4, r2, r1
 801ae46:	42a3      	cmp	r3, r4
 801ae48:	6011      	str	r1, [r2, #0]
 801ae4a:	d1e0      	bne.n	801ae0e <_free_r+0x26>
 801ae4c:	681c      	ldr	r4, [r3, #0]
 801ae4e:	685b      	ldr	r3, [r3, #4]
 801ae50:	6053      	str	r3, [r2, #4]
 801ae52:	4421      	add	r1, r4
 801ae54:	6011      	str	r1, [r2, #0]
 801ae56:	e7da      	b.n	801ae0e <_free_r+0x26>
 801ae58:	d902      	bls.n	801ae60 <_free_r+0x78>
 801ae5a:	230c      	movs	r3, #12
 801ae5c:	6003      	str	r3, [r0, #0]
 801ae5e:	e7d6      	b.n	801ae0e <_free_r+0x26>
 801ae60:	6825      	ldr	r5, [r4, #0]
 801ae62:	1961      	adds	r1, r4, r5
 801ae64:	428b      	cmp	r3, r1
 801ae66:	bf04      	itt	eq
 801ae68:	6819      	ldreq	r1, [r3, #0]
 801ae6a:	685b      	ldreq	r3, [r3, #4]
 801ae6c:	6063      	str	r3, [r4, #4]
 801ae6e:	bf04      	itt	eq
 801ae70:	1949      	addeq	r1, r1, r5
 801ae72:	6021      	streq	r1, [r4, #0]
 801ae74:	6054      	str	r4, [r2, #4]
 801ae76:	e7ca      	b.n	801ae0e <_free_r+0x26>
 801ae78:	b003      	add	sp, #12
 801ae7a:	bd30      	pop	{r4, r5, pc}
 801ae7c:	24006970 	.word	0x24006970

0801ae80 <sbrk_aligned>:
 801ae80:	b570      	push	{r4, r5, r6, lr}
 801ae82:	4e0e      	ldr	r6, [pc, #56]	; (801aebc <sbrk_aligned+0x3c>)
 801ae84:	460c      	mov	r4, r1
 801ae86:	6831      	ldr	r1, [r6, #0]
 801ae88:	4605      	mov	r5, r0
 801ae8a:	b911      	cbnz	r1, 801ae92 <sbrk_aligned+0x12>
 801ae8c:	f000 f88c 	bl	801afa8 <_sbrk_r>
 801ae90:	6030      	str	r0, [r6, #0]
 801ae92:	4621      	mov	r1, r4
 801ae94:	4628      	mov	r0, r5
 801ae96:	f000 f887 	bl	801afa8 <_sbrk_r>
 801ae9a:	1c43      	adds	r3, r0, #1
 801ae9c:	d00a      	beq.n	801aeb4 <sbrk_aligned+0x34>
 801ae9e:	1cc4      	adds	r4, r0, #3
 801aea0:	f024 0403 	bic.w	r4, r4, #3
 801aea4:	42a0      	cmp	r0, r4
 801aea6:	d007      	beq.n	801aeb8 <sbrk_aligned+0x38>
 801aea8:	1a21      	subs	r1, r4, r0
 801aeaa:	4628      	mov	r0, r5
 801aeac:	f000 f87c 	bl	801afa8 <_sbrk_r>
 801aeb0:	3001      	adds	r0, #1
 801aeb2:	d101      	bne.n	801aeb8 <sbrk_aligned+0x38>
 801aeb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801aeb8:	4620      	mov	r0, r4
 801aeba:	bd70      	pop	{r4, r5, r6, pc}
 801aebc:	24006974 	.word	0x24006974

0801aec0 <_malloc_r>:
 801aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aec4:	1ccd      	adds	r5, r1, #3
 801aec6:	f025 0503 	bic.w	r5, r5, #3
 801aeca:	3508      	adds	r5, #8
 801aecc:	2d0c      	cmp	r5, #12
 801aece:	bf38      	it	cc
 801aed0:	250c      	movcc	r5, #12
 801aed2:	2d00      	cmp	r5, #0
 801aed4:	4607      	mov	r7, r0
 801aed6:	db01      	blt.n	801aedc <_malloc_r+0x1c>
 801aed8:	42a9      	cmp	r1, r5
 801aeda:	d905      	bls.n	801aee8 <_malloc_r+0x28>
 801aedc:	230c      	movs	r3, #12
 801aede:	603b      	str	r3, [r7, #0]
 801aee0:	2600      	movs	r6, #0
 801aee2:	4630      	mov	r0, r6
 801aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee8:	4e2e      	ldr	r6, [pc, #184]	; (801afa4 <_malloc_r+0xe4>)
 801aeea:	f000 f907 	bl	801b0fc <__malloc_lock>
 801aeee:	6833      	ldr	r3, [r6, #0]
 801aef0:	461c      	mov	r4, r3
 801aef2:	bb34      	cbnz	r4, 801af42 <_malloc_r+0x82>
 801aef4:	4629      	mov	r1, r5
 801aef6:	4638      	mov	r0, r7
 801aef8:	f7ff ffc2 	bl	801ae80 <sbrk_aligned>
 801aefc:	1c43      	adds	r3, r0, #1
 801aefe:	4604      	mov	r4, r0
 801af00:	d14d      	bne.n	801af9e <_malloc_r+0xde>
 801af02:	6834      	ldr	r4, [r6, #0]
 801af04:	4626      	mov	r6, r4
 801af06:	2e00      	cmp	r6, #0
 801af08:	d140      	bne.n	801af8c <_malloc_r+0xcc>
 801af0a:	6823      	ldr	r3, [r4, #0]
 801af0c:	4631      	mov	r1, r6
 801af0e:	4638      	mov	r0, r7
 801af10:	eb04 0803 	add.w	r8, r4, r3
 801af14:	f000 f848 	bl	801afa8 <_sbrk_r>
 801af18:	4580      	cmp	r8, r0
 801af1a:	d13a      	bne.n	801af92 <_malloc_r+0xd2>
 801af1c:	6821      	ldr	r1, [r4, #0]
 801af1e:	3503      	adds	r5, #3
 801af20:	1a6d      	subs	r5, r5, r1
 801af22:	f025 0503 	bic.w	r5, r5, #3
 801af26:	3508      	adds	r5, #8
 801af28:	2d0c      	cmp	r5, #12
 801af2a:	bf38      	it	cc
 801af2c:	250c      	movcc	r5, #12
 801af2e:	4629      	mov	r1, r5
 801af30:	4638      	mov	r0, r7
 801af32:	f7ff ffa5 	bl	801ae80 <sbrk_aligned>
 801af36:	3001      	adds	r0, #1
 801af38:	d02b      	beq.n	801af92 <_malloc_r+0xd2>
 801af3a:	6823      	ldr	r3, [r4, #0]
 801af3c:	442b      	add	r3, r5
 801af3e:	6023      	str	r3, [r4, #0]
 801af40:	e00e      	b.n	801af60 <_malloc_r+0xa0>
 801af42:	6822      	ldr	r2, [r4, #0]
 801af44:	1b52      	subs	r2, r2, r5
 801af46:	d41e      	bmi.n	801af86 <_malloc_r+0xc6>
 801af48:	2a0b      	cmp	r2, #11
 801af4a:	d916      	bls.n	801af7a <_malloc_r+0xba>
 801af4c:	1961      	adds	r1, r4, r5
 801af4e:	42a3      	cmp	r3, r4
 801af50:	6025      	str	r5, [r4, #0]
 801af52:	bf18      	it	ne
 801af54:	6059      	strne	r1, [r3, #4]
 801af56:	6863      	ldr	r3, [r4, #4]
 801af58:	bf08      	it	eq
 801af5a:	6031      	streq	r1, [r6, #0]
 801af5c:	5162      	str	r2, [r4, r5]
 801af5e:	604b      	str	r3, [r1, #4]
 801af60:	4638      	mov	r0, r7
 801af62:	f104 060b 	add.w	r6, r4, #11
 801af66:	f000 f8cf 	bl	801b108 <__malloc_unlock>
 801af6a:	f026 0607 	bic.w	r6, r6, #7
 801af6e:	1d23      	adds	r3, r4, #4
 801af70:	1af2      	subs	r2, r6, r3
 801af72:	d0b6      	beq.n	801aee2 <_malloc_r+0x22>
 801af74:	1b9b      	subs	r3, r3, r6
 801af76:	50a3      	str	r3, [r4, r2]
 801af78:	e7b3      	b.n	801aee2 <_malloc_r+0x22>
 801af7a:	6862      	ldr	r2, [r4, #4]
 801af7c:	42a3      	cmp	r3, r4
 801af7e:	bf0c      	ite	eq
 801af80:	6032      	streq	r2, [r6, #0]
 801af82:	605a      	strne	r2, [r3, #4]
 801af84:	e7ec      	b.n	801af60 <_malloc_r+0xa0>
 801af86:	4623      	mov	r3, r4
 801af88:	6864      	ldr	r4, [r4, #4]
 801af8a:	e7b2      	b.n	801aef2 <_malloc_r+0x32>
 801af8c:	4634      	mov	r4, r6
 801af8e:	6876      	ldr	r6, [r6, #4]
 801af90:	e7b9      	b.n	801af06 <_malloc_r+0x46>
 801af92:	230c      	movs	r3, #12
 801af94:	603b      	str	r3, [r7, #0]
 801af96:	4638      	mov	r0, r7
 801af98:	f000 f8b6 	bl	801b108 <__malloc_unlock>
 801af9c:	e7a1      	b.n	801aee2 <_malloc_r+0x22>
 801af9e:	6025      	str	r5, [r4, #0]
 801afa0:	e7de      	b.n	801af60 <_malloc_r+0xa0>
 801afa2:	bf00      	nop
 801afa4:	24006970 	.word	0x24006970

0801afa8 <_sbrk_r>:
 801afa8:	b538      	push	{r3, r4, r5, lr}
 801afaa:	4d06      	ldr	r5, [pc, #24]	; (801afc4 <_sbrk_r+0x1c>)
 801afac:	2300      	movs	r3, #0
 801afae:	4604      	mov	r4, r0
 801afb0:	4608      	mov	r0, r1
 801afb2:	602b      	str	r3, [r5, #0]
 801afb4:	f7e9 fd86 	bl	8004ac4 <_sbrk>
 801afb8:	1c43      	adds	r3, r0, #1
 801afba:	d102      	bne.n	801afc2 <_sbrk_r+0x1a>
 801afbc:	682b      	ldr	r3, [r5, #0]
 801afbe:	b103      	cbz	r3, 801afc2 <_sbrk_r+0x1a>
 801afc0:	6023      	str	r3, [r4, #0]
 801afc2:	bd38      	pop	{r3, r4, r5, pc}
 801afc4:	24006978 	.word	0x24006978

0801afc8 <__sread>:
 801afc8:	b510      	push	{r4, lr}
 801afca:	460c      	mov	r4, r1
 801afcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afd0:	f000 f8a0 	bl	801b114 <_read_r>
 801afd4:	2800      	cmp	r0, #0
 801afd6:	bfab      	itete	ge
 801afd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801afda:	89a3      	ldrhlt	r3, [r4, #12]
 801afdc:	181b      	addge	r3, r3, r0
 801afde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801afe2:	bfac      	ite	ge
 801afe4:	6563      	strge	r3, [r4, #84]	; 0x54
 801afe6:	81a3      	strhlt	r3, [r4, #12]
 801afe8:	bd10      	pop	{r4, pc}

0801afea <__swrite>:
 801afea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afee:	461f      	mov	r7, r3
 801aff0:	898b      	ldrh	r3, [r1, #12]
 801aff2:	05db      	lsls	r3, r3, #23
 801aff4:	4605      	mov	r5, r0
 801aff6:	460c      	mov	r4, r1
 801aff8:	4616      	mov	r6, r2
 801affa:	d505      	bpl.n	801b008 <__swrite+0x1e>
 801affc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b000:	2302      	movs	r3, #2
 801b002:	2200      	movs	r2, #0
 801b004:	f000 f868 	bl	801b0d8 <_lseek_r>
 801b008:	89a3      	ldrh	r3, [r4, #12]
 801b00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b012:	81a3      	strh	r3, [r4, #12]
 801b014:	4632      	mov	r2, r6
 801b016:	463b      	mov	r3, r7
 801b018:	4628      	mov	r0, r5
 801b01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b01e:	f000 b817 	b.w	801b050 <_write_r>

0801b022 <__sseek>:
 801b022:	b510      	push	{r4, lr}
 801b024:	460c      	mov	r4, r1
 801b026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b02a:	f000 f855 	bl	801b0d8 <_lseek_r>
 801b02e:	1c43      	adds	r3, r0, #1
 801b030:	89a3      	ldrh	r3, [r4, #12]
 801b032:	bf15      	itete	ne
 801b034:	6560      	strne	r0, [r4, #84]	; 0x54
 801b036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b03e:	81a3      	strheq	r3, [r4, #12]
 801b040:	bf18      	it	ne
 801b042:	81a3      	strhne	r3, [r4, #12]
 801b044:	bd10      	pop	{r4, pc}

0801b046 <__sclose>:
 801b046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b04a:	f000 b813 	b.w	801b074 <_close_r>
	...

0801b050 <_write_r>:
 801b050:	b538      	push	{r3, r4, r5, lr}
 801b052:	4d07      	ldr	r5, [pc, #28]	; (801b070 <_write_r+0x20>)
 801b054:	4604      	mov	r4, r0
 801b056:	4608      	mov	r0, r1
 801b058:	4611      	mov	r1, r2
 801b05a:	2200      	movs	r2, #0
 801b05c:	602a      	str	r2, [r5, #0]
 801b05e:	461a      	mov	r2, r3
 801b060:	f7e9 fcdf 	bl	8004a22 <_write>
 801b064:	1c43      	adds	r3, r0, #1
 801b066:	d102      	bne.n	801b06e <_write_r+0x1e>
 801b068:	682b      	ldr	r3, [r5, #0]
 801b06a:	b103      	cbz	r3, 801b06e <_write_r+0x1e>
 801b06c:	6023      	str	r3, [r4, #0]
 801b06e:	bd38      	pop	{r3, r4, r5, pc}
 801b070:	24006978 	.word	0x24006978

0801b074 <_close_r>:
 801b074:	b538      	push	{r3, r4, r5, lr}
 801b076:	4d06      	ldr	r5, [pc, #24]	; (801b090 <_close_r+0x1c>)
 801b078:	2300      	movs	r3, #0
 801b07a:	4604      	mov	r4, r0
 801b07c:	4608      	mov	r0, r1
 801b07e:	602b      	str	r3, [r5, #0]
 801b080:	f7e9 fceb 	bl	8004a5a <_close>
 801b084:	1c43      	adds	r3, r0, #1
 801b086:	d102      	bne.n	801b08e <_close_r+0x1a>
 801b088:	682b      	ldr	r3, [r5, #0]
 801b08a:	b103      	cbz	r3, 801b08e <_close_r+0x1a>
 801b08c:	6023      	str	r3, [r4, #0]
 801b08e:	bd38      	pop	{r3, r4, r5, pc}
 801b090:	24006978 	.word	0x24006978

0801b094 <_fstat_r>:
 801b094:	b538      	push	{r3, r4, r5, lr}
 801b096:	4d07      	ldr	r5, [pc, #28]	; (801b0b4 <_fstat_r+0x20>)
 801b098:	2300      	movs	r3, #0
 801b09a:	4604      	mov	r4, r0
 801b09c:	4608      	mov	r0, r1
 801b09e:	4611      	mov	r1, r2
 801b0a0:	602b      	str	r3, [r5, #0]
 801b0a2:	f7e9 fce6 	bl	8004a72 <_fstat>
 801b0a6:	1c43      	adds	r3, r0, #1
 801b0a8:	d102      	bne.n	801b0b0 <_fstat_r+0x1c>
 801b0aa:	682b      	ldr	r3, [r5, #0]
 801b0ac:	b103      	cbz	r3, 801b0b0 <_fstat_r+0x1c>
 801b0ae:	6023      	str	r3, [r4, #0]
 801b0b0:	bd38      	pop	{r3, r4, r5, pc}
 801b0b2:	bf00      	nop
 801b0b4:	24006978 	.word	0x24006978

0801b0b8 <_isatty_r>:
 801b0b8:	b538      	push	{r3, r4, r5, lr}
 801b0ba:	4d06      	ldr	r5, [pc, #24]	; (801b0d4 <_isatty_r+0x1c>)
 801b0bc:	2300      	movs	r3, #0
 801b0be:	4604      	mov	r4, r0
 801b0c0:	4608      	mov	r0, r1
 801b0c2:	602b      	str	r3, [r5, #0]
 801b0c4:	f7e9 fce5 	bl	8004a92 <_isatty>
 801b0c8:	1c43      	adds	r3, r0, #1
 801b0ca:	d102      	bne.n	801b0d2 <_isatty_r+0x1a>
 801b0cc:	682b      	ldr	r3, [r5, #0]
 801b0ce:	b103      	cbz	r3, 801b0d2 <_isatty_r+0x1a>
 801b0d0:	6023      	str	r3, [r4, #0]
 801b0d2:	bd38      	pop	{r3, r4, r5, pc}
 801b0d4:	24006978 	.word	0x24006978

0801b0d8 <_lseek_r>:
 801b0d8:	b538      	push	{r3, r4, r5, lr}
 801b0da:	4d07      	ldr	r5, [pc, #28]	; (801b0f8 <_lseek_r+0x20>)
 801b0dc:	4604      	mov	r4, r0
 801b0de:	4608      	mov	r0, r1
 801b0e0:	4611      	mov	r1, r2
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	602a      	str	r2, [r5, #0]
 801b0e6:	461a      	mov	r2, r3
 801b0e8:	f7e9 fcde 	bl	8004aa8 <_lseek>
 801b0ec:	1c43      	adds	r3, r0, #1
 801b0ee:	d102      	bne.n	801b0f6 <_lseek_r+0x1e>
 801b0f0:	682b      	ldr	r3, [r5, #0]
 801b0f2:	b103      	cbz	r3, 801b0f6 <_lseek_r+0x1e>
 801b0f4:	6023      	str	r3, [r4, #0]
 801b0f6:	bd38      	pop	{r3, r4, r5, pc}
 801b0f8:	24006978 	.word	0x24006978

0801b0fc <__malloc_lock>:
 801b0fc:	4801      	ldr	r0, [pc, #4]	; (801b104 <__malloc_lock+0x8>)
 801b0fe:	f7ff be0b 	b.w	801ad18 <__retarget_lock_acquire_recursive>
 801b102:	bf00      	nop
 801b104:	2400696c 	.word	0x2400696c

0801b108 <__malloc_unlock>:
 801b108:	4801      	ldr	r0, [pc, #4]	; (801b110 <__malloc_unlock+0x8>)
 801b10a:	f7ff be06 	b.w	801ad1a <__retarget_lock_release_recursive>
 801b10e:	bf00      	nop
 801b110:	2400696c 	.word	0x2400696c

0801b114 <_read_r>:
 801b114:	b538      	push	{r3, r4, r5, lr}
 801b116:	4d07      	ldr	r5, [pc, #28]	; (801b134 <_read_r+0x20>)
 801b118:	4604      	mov	r4, r0
 801b11a:	4608      	mov	r0, r1
 801b11c:	4611      	mov	r1, r2
 801b11e:	2200      	movs	r2, #0
 801b120:	602a      	str	r2, [r5, #0]
 801b122:	461a      	mov	r2, r3
 801b124:	f7e9 fc60 	bl	80049e8 <_read>
 801b128:	1c43      	adds	r3, r0, #1
 801b12a:	d102      	bne.n	801b132 <_read_r+0x1e>
 801b12c:	682b      	ldr	r3, [r5, #0]
 801b12e:	b103      	cbz	r3, 801b132 <_read_r+0x1e>
 801b130:	6023      	str	r3, [r4, #0]
 801b132:	bd38      	pop	{r3, r4, r5, pc}
 801b134:	24006978 	.word	0x24006978

0801b138 <_init>:
 801b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b13a:	bf00      	nop
 801b13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b13e:	bc08      	pop	{r3}
 801b140:	469e      	mov	lr, r3
 801b142:	4770      	bx	lr

0801b144 <_fini>:
 801b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b146:	bf00      	nop
 801b148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b14a:	bc08      	pop	{r3}
 801b14c:	469e      	mov	lr, r3
 801b14e:	4770      	bx	lr
