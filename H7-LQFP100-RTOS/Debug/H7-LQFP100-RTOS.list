
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a550  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a7f0  0801a7f0  0002a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ac88  0801ac88  0002ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ac90  0801ac90  0002ac90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ac94  0801ac94  0002ac94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  24000000  0801ac98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000687c  24000140  0801adcc  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240069bc  0801adcc  000369bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040d69  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007cf8  00000000  00000000  00070ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ba0  00000000  00000000  00078bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002858  00000000  00000000  0007b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000467e3  00000000  00000000  0007dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000432e1  00000000  00000000  000c47a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001969fb  00000000  00000000  00107a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e47f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bc8c  00000000  00000000  0029e4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a7d8 	.word	0x0801a7d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801a7d8 	.word	0x0801a7d8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fa93 	bl	8005b94 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f836 	bl	80036e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fbae 	bl	8006de4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f829 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fcf1 	bl	800609c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f810 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fce3 	bl	800609c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f802 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fcd5 	bl	800609c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f002 fff4 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fcc7 	bl	800609c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f002 ffe6 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fcb8 	bl	800609c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f002 ffd7 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fca9 	bl	800609c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f002 ffc8 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fc9a 	bl	800609c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f002 ffb9 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fc8b 	bl	800609c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 ffaa 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fc7c 	bl	800609c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 ff9b 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fc6d 	bl	800609c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 ff8c 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fc5e 	bl	800609c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 ff7d 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 f97b 	bl	8005b94 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 ff1e 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fbe6 	bl	800609c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 ff05 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fbd8 	bl	800609c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 fef7 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fbca 	bl	800609c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 fee9 	bl	80036e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fbbc 	bl	800609c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 fedb 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a f95e 	bl	800acbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a f952 	bl	800acbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a f946 	bl	800acbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f006 fff1 	bl	8007a5c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 fe30 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 fe34 	bl	800574c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 fe2e 	bl	800574c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 ff91 	bl	8007a5c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 fdd0 	bl	80036e4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 f91d 	bl	8019dcc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fb59 	bl	8007250 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fd9e 	bl	80036e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fd74 	bl	80076b0 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fd89 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f831 	bl	800acbc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 fedc 	bl	8007a5c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fd1b 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fa26 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fa3d 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 f9fd 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fa14 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 f9f5 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fa0c 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 f9ed 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fa04 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 f9e5 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 f9fc 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 f9dd 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 f9f4 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 f9d5 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 f9ec 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 f9cd 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 f9e4 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 f9c5 	bl	8007110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 f9dc 	bl	8007144 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f018 fffe 	bl	8019dcc <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fdb4 	bl	800a9d8 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fd59 	bl	800a9d8 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fba6 	bl	800a708 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1a      	cmp	r3, #26
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fafa 	bl	800a708 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fc06 	bl	800a9d8 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fba3 	bl	800a9d8 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 f9f0 	bl	800a708 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 face 	bl	800a9d8 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1a      	cmp	r3, #26
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 f8d9 	bl	800a708 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 f9e6 	bl	800a9d8 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 faea 	bl	8019dcc <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 f8c1 	bl	800a9d8 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f008 ff0f 	bl	800a708 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f823 	bl	800a9d8 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 f985 	bl	8019dcc <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 f97c 	bl	8019dcc <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 fddb 	bl	800a708 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 fdc8 	bl	800a708 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f8c7 	bl	8019dcc <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f8c0 	bl	8019dcc <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fd21 	bl	800a708 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1a      	cmp	r3, #26
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fd39 	bl	800a82c <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 fde1 	bl	800a9d8 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fc2d 	bl	800a708 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NB_OF_VAR];

void handle_error(ERROR_STRUCT error) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]
//		break;
//	default:
//		send_error_packet(error);
//		break;
//	}
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <error_counter_init>:

void error_counter_init() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
	// Starting up EEPROM Emulator
	HAL_FLASH_Unlock();
 8001f4a:	f008 fc6f 	bl	800a82c <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001f4e:	f7fe ff23 	bl	8000d98 <EE_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <error_counter_init+0x18>
		Error_Handler();
 8001f58:	f001 fbc4 	bl	80036e4 <Error_Handler>
	}

	// Updating our local copy of error counters from EE
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	e013      	b.n	8001f8a <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <error_counter_init+0x58>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <error_counter_init+0x5c>)
 8001f70:	440b      	add	r3, r1
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f7ff fbc7 	bl	8001708 <EE_ReadVariable>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <error_counter_init+0x40>
			Error_Handler();
 8001f80:	f001 fbb0 	bl	80036e4 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3301      	adds	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b1a      	cmp	r3, #26
 8001f8e:	dde8      	ble.n	8001f62 <error_counter_init+0x1e>
		}
	}


}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	24000000 	.word	0x24000000
 8001fa0:	240003dc 	.word	0x240003dc

08001fa4 <reset_error_counters>:
		}
	}
}


void reset_error_counters() {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	e013      	b.n	8001fd8 <reset_error_counters+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], VarDataTab[i])) != HAL_OK) {
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <reset_error_counters+0x44>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <reset_error_counters+0x48>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f7ff fbe8 	bl	8001798 <EE_WriteVariable>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <reset_error_counters+0x2e>
			Error_Handler();
 8001fce:	f001 fb89 	bl	80036e4 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b1a      	cmp	r3, #26
 8001fdc:	dde8      	ble.n	8001fb0 <reset_error_counters+0xc>
		}
	}
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000000 	.word	0x24000000
 8001fec:	240003a4 	.word	0x240003a4

08001ff0 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <vApplicationTickHook+0x18>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	4a03      	ldr	r2, [pc, #12]	; (8002008 <vApplicationTickHook+0x18>)
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	24001b18 	.word	0x24001b18

0800200c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <MX_FREERTOS_Init+0x98>)
 800202a:	2100      	movs	r1, #0
 800202c:	4824      	ldr	r0, [pc, #144]	; (80020c0 <MX_FREERTOS_Init+0x9c>)
 800202e:	f014 fcf9 	bl	8016a24 <osThreadNew>
 8002032:	4603      	mov	r3, r0
 8002034:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <MX_FREERTOS_Init+0xa0>)
 8002036:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <MX_FREERTOS_Init+0xa4>)
 800203a:	2100      	movs	r1, #0
 800203c:	4823      	ldr	r0, [pc, #140]	; (80020cc <MX_FREERTOS_Init+0xa8>)
 800203e:	f014 fcf1 	bl	8016a24 <osThreadNew>
 8002042:	4603      	mov	r3, r0
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <MX_FREERTOS_Init+0xac>)
 8002046:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <MX_FREERTOS_Init+0xb0>)
 800204a:	2100      	movs	r1, #0
 800204c:	4822      	ldr	r0, [pc, #136]	; (80020d8 <MX_FREERTOS_Init+0xb4>)
 800204e:	f014 fce9 	bl	8016a24 <osThreadNew>
 8002052:	4603      	mov	r3, r0
 8002054:	4a21      	ldr	r2, [pc, #132]	; (80020dc <MX_FREERTOS_Init+0xb8>)
 8002056:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <MX_FREERTOS_Init+0xbc>)
 800205a:	2100      	movs	r1, #0
 800205c:	4821      	ldr	r0, [pc, #132]	; (80020e4 <MX_FREERTOS_Init+0xc0>)
 800205e:	f014 fce1 	bl	8016a24 <osThreadNew>
 8002062:	4603      	mov	r3, r0
 8002064:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <MX_FREERTOS_Init+0xc4>)
 8002066:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002068:	4a20      	ldr	r2, [pc, #128]	; (80020ec <MX_FREERTOS_Init+0xc8>)
 800206a:	2100      	movs	r1, #0
 800206c:	4820      	ldr	r0, [pc, #128]	; (80020f0 <MX_FREERTOS_Init+0xcc>)
 800206e:	f014 fcd9 	bl	8016a24 <osThreadNew>
 8002072:	4603      	mov	r3, r0
 8002074:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <MX_FREERTOS_Init+0xd0>)
 8002076:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002078:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <MX_FREERTOS_Init+0xd4>)
 800207a:	2100      	movs	r1, #0
 800207c:	481f      	ldr	r0, [pc, #124]	; (80020fc <MX_FREERTOS_Init+0xd8>)
 800207e:	f014 fcd1 	bl	8016a24 <osThreadNew>
 8002082:	4603      	mov	r3, r0
 8002084:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <MX_FREERTOS_Init+0xdc>)
 8002086:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <MX_FREERTOS_Init+0xe0>)
 800208a:	2100      	movs	r1, #0
 800208c:	481e      	ldr	r0, [pc, #120]	; (8002108 <MX_FREERTOS_Init+0xe4>)
 800208e:	f014 fcc9 	bl	8016a24 <osThreadNew>
 8002092:	4603      	mov	r3, r0
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <MX_FREERTOS_Init+0xe8>)
 8002096:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <MX_FREERTOS_Init+0xec>)
 800209a:	2100      	movs	r1, #0
 800209c:	481d      	ldr	r0, [pc, #116]	; (8002114 <MX_FREERTOS_Init+0xf0>)
 800209e:	f014 fcc1 	bl	8016a24 <osThreadNew>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <MX_FREERTOS_Init+0xf4>)
 80020a6:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 80020a8:	4a1c      	ldr	r2, [pc, #112]	; (800211c <MX_FREERTOS_Init+0xf8>)
 80020aa:	2100      	movs	r1, #0
 80020ac:	481c      	ldr	r0, [pc, #112]	; (8002120 <MX_FREERTOS_Init+0xfc>)
 80020ae:	f014 fcb9 	bl	8016a24 <osThreadNew>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <MX_FREERTOS_Init+0x100>)
 80020b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	0801aa58 	.word	0x0801aa58
 80020c0:	08002129 	.word	0x08002129
 80020c4:	24000414 	.word	0x24000414
 80020c8:	0801aa7c 	.word	0x0801aa7c
 80020cc:	08002151 	.word	0x08002151
 80020d0:	24000674 	.word	0x24000674
 80020d4:	0801aaa0 	.word	0x0801aaa0
 80020d8:	08002179 	.word	0x08002179
 80020dc:	240008d4 	.word	0x240008d4
 80020e0:	0801aac4 	.word	0x0801aac4
 80020e4:	080021a1 	.word	0x080021a1
 80020e8:	24000b34 	.word	0x24000b34
 80020ec:	0801aae8 	.word	0x0801aae8
 80020f0:	08002219 	.word	0x08002219
 80020f4:	24000d94 	.word	0x24000d94
 80020f8:	0801ab0c 	.word	0x0801ab0c
 80020fc:	08002291 	.word	0x08002291
 8002100:	24000ff4 	.word	0x24000ff4
 8002104:	0801ab30 	.word	0x0801ab30
 8002108:	080022c1 	.word	0x080022c1
 800210c:	24001254 	.word	0x24001254
 8002110:	0801ab54 	.word	0x0801ab54
 8002114:	080022f1 	.word	0x080022f1
 8002118:	240014b4 	.word	0x240014b4
 800211c:	0801ab78 	.word	0x0801ab78
 8002120:	080023c1 	.word	0x080023c1
 8002124:	24001714 	.word	0x24001714

08002128 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <PMT_init+0x24>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002138:	2200      	movs	r2, #0
 800213a:	2101      	movs	r1, #1
 800213c:	f014 fdf4 	bl	8016d28 <osEventFlagsWait>

		create_pmt_packet();
 8002140:	f001 fade 	bl	8003700 <create_pmt_packet>

		osThreadYield();
 8002144:	f014 fd00 	bl	8016b48 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002148:	e7f2      	b.n	8002130 <PMT_init+0x8>
 800214a:	bf00      	nop
 800214c:	24001ac8 	.word	0x24001ac8

08002150 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <ERPA_init+0x24>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002160:	2200      	movs	r2, #0
 8002162:	2102      	movs	r1, #2
 8002164:	f014 fde0 	bl	8016d28 <osEventFlagsWait>

		create_erpa_packet();
 8002168:	f001 fb10 	bl	800378c <create_erpa_packet>

		osThreadYield();
 800216c:	f014 fcec 	bl	8016b48 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002170:	e7f2      	b.n	8002158 <ERPA_init+0x8>
 8002172:	bf00      	nop
 8002174:	24001ac8 	.word	0x24001ac8

08002178 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HK_init+0x24>)
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002188:	2200      	movs	r2, #0
 800218a:	2104      	movs	r1, #4
 800218c:	f014 fdcc 	bl	8016d28 <osEventFlagsWait>

		create_hk_packet();
 8002190:	f001 fb5a 	bl	8003848 <create_hk_packet>

		osThreadYield();
 8002194:	f014 fcd8 	bl	8016b48 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002198:	e7f2      	b.n	8002180 <HK_init+0x8>
 800219a:	bf00      	nop
 800219c:	24001ac8 	.word	0x24001ac8

080021a0 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <AUTOINIT_init+0x70>)
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021b0:	2200      	movs	r2, #0
 80021b2:	2104      	movs	r1, #4
 80021b4:	f014 fdb8 	bl	8016d28 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e012      	b.n	80021e4 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <AUTOINIT_init+0x74>)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <AUTOINIT_init+0x74>)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4619      	mov	r1, r3
 80021d4:	f008 ff3a 	bl	800b04c <HAL_GPIO_WritePin>
			osDelay(100);
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	f014 fcd5 	bl	8016b88 <osDelay>
		for (int i = 0; i < 7; i++) {
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3301      	adds	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	dde9      	ble.n	80021be <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80021ea:	2308      	movs	r3, #8
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	e008      	b.n	8002202 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2101      	movs	r1, #1
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 f8a2 	bl	8005340 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3301      	adds	r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b0d      	cmp	r3, #13
 8002206:	ddf3      	ble.n	80021f0 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8002208:	f014 fc9e 	bl	8016b48 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800220c:	e7cc      	b.n	80021a8 <AUTOINIT_init+0x8>
 800220e:	bf00      	nop
 8002210:	24001acc 	.word	0x24001acc
 8002214:	0801ab9c 	.word	0x0801ab9c

08002218 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <AUTODEINIT_init+0x70>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002228:	2200      	movs	r2, #0
 800222a:	2108      	movs	r1, #8
 800222c:	f014 fd7c 	bl	8016d28 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002230:	230d      	movs	r3, #13
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e008      	b.n	8002248 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f87f 	bl	8005340 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b01      	subs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b07      	cmp	r3, #7
 800224c:	dcf3      	bgt.n	8002236 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800224e:	2306      	movs	r3, #6
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	e012      	b.n	800227a <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <AUTODEINIT_init+0x74>)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <AUTODEINIT_init+0x74>)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	889b      	ldrh	r3, [r3, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	4619      	mov	r1, r3
 800226a:	f008 feef 	bl	800b04c <HAL_GPIO_WritePin>
			osDelay(100);
 800226e:	2064      	movs	r0, #100	; 0x64
 8002270:	f014 fc8a 	bl	8016b88 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	3b01      	subs	r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	dae9      	bge.n	8002254 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8002280:	f014 fc62 	bl	8016b48 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002284:	e7cc      	b.n	8002220 <AUTODEINIT_init+0x8>
 8002286:	bf00      	nop
 8002288:	24001acc 	.word	0x24001acc
 800228c:	0801ab9c 	.word	0x0801ab9c

08002290 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <Voltage_Monitor_init+0x28>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a0:	2200      	movs	r2, #0
 80022a2:	2101      	movs	r1, #1
 80022a4:	f014 fd40 	bl	8016d28 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <Voltage_Monitor_init+0x2c>)
 80022aa:	f00b fa9c 	bl	800d7e6 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 80022ae:	f003 f867 	bl	8005380 <set_rail_monitor>
	  monitor_rails();
 80022b2:	f003 f8e9 	bl	8005488 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80022b6:	e7ef      	b.n	8002298 <Voltage_Monitor_init+0x8>
 80022b8:	24001acc 	.word	0x24001acc
 80022bc:	24001ab8 	.word	0x24001ab8

080022c0 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <STOP_init+0x2c>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d0:	2200      	movs	r2, #0
 80022d2:	2102      	movs	r1, #2
 80022d4:	f014 fd28 	bl	8016d28 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <STOP_init+0x2c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f014 fcf0 	bl	8016cc4 <osEventFlagsClear>

	  enter_stop();
 80022e4:	f001 f99e 	bl	8003624 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80022e8:	e7ee      	b.n	80022c8 <STOP_init+0x8>
 80022ea:	bf00      	nop
 80022ec:	24001acc 	.word	0x24001acc

080022f0 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <Science_init+0xb0>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002300:	2200      	movs	r2, #0
 8002302:	2101      	movs	r1, #1
 8002304:	f014 fd10 	bl	8016d28 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e012      	b.n	8002334 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800230e:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <Science_init+0xb4>)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002316:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <Science_init+0xb4>)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	889b      	ldrh	r3, [r3, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	4619      	mov	r1, r3
 8002324:	f008 fe92 	bl	800b04c <HAL_GPIO_WritePin>
			osDelay(200);
 8002328:	20c8      	movs	r0, #200	; 0xc8
 800232a:	f014 fc2d 	bl	8016b88 <osDelay>
		for (int i = 0; i < 9; i++) {
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b08      	cmp	r3, #8
 8002338:	dde9      	ble.n	800230e <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800233a:	2308      	movs	r3, #8
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	e008      	b.n	8002352 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2101      	movs	r1, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fffa 	bl	8005340 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b10      	cmp	r3, #16
 8002356:	ddf3      	ble.n	8002340 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2320      	movs	r3, #32
 8002362:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <Science_init+0xb8>)
 8002364:	2100      	movs	r1, #0
 8002366:	4811      	ldr	r0, [pc, #68]	; (80023ac <Science_init+0xbc>)
 8002368:	f004 ffec 	bl	8007344 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <Science_init+0xc0>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <Science_init+0xc4>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <Science_init+0xc8>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800237e:	f001 fbb1 	bl	8003ae4 <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 8002382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002386:	f44f 729c 	mov.w	r2, #312	; 0x138
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800238c:	2100      	movs	r1, #0
 800238e:	480b      	ldr	r0, [pc, #44]	; (80023bc <Science_init+0xcc>)
 8002390:	f010 f966 	bl	8012660 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002394:	b662      	cpsie	i
}
 8002396:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002398:	f014 fbd6 	bl	8016b48 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800239c:	e7ac      	b.n	80022f8 <Science_init+0x8>
 800239e:	bf00      	nop
 80023a0:	24001ad0 	.word	0x24001ad0
 80023a4:	0801ab9c 	.word	0x0801ab9c
 80023a8:	24000038 	.word	0x24000038
 80023ac:	24000314 	.word	0x24000314
 80023b0:	24001b14 	.word	0x24001b14
 80023b4:	24001b15 	.word	0x24001b15
 80023b8:	24001b18 	.word	0x24001b18
 80023bc:	24001de4 	.word	0x24001de4

080023c0 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <Idle_init+0x94>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d0:	2200      	movs	r2, #0
 80023d2:	2102      	movs	r1, #2
 80023d4:	f014 fca8 	bl	8016d28 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <Idle_init+0x98>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80023de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80023e6:	2100      	movs	r1, #0
 80023e8:	481c      	ldr	r0, [pc, #112]	; (800245c <Idle_init+0x9c>)
 80023ea:	f010 fa93 	bl	8012914 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <Idle_init+0xa0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80023f4:	2100      	movs	r1, #0
 80023f6:	481b      	ldr	r0, [pc, #108]	; (8002464 <Idle_init+0xa4>)
 80023f8:	f005 f864 	bl	80074c4 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80023fc:	2310      	movs	r3, #16
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e008      	b.n	8002414 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f002 ff99 	bl	8005340 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3b01      	subs	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b07      	cmp	r3, #7
 8002418:	dcf3      	bgt.n	8002402 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 800241a:	2308      	movs	r3, #8
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	e012      	b.n	8002446 <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002420:	4a11      	ldr	r2, [pc, #68]	; (8002468 <Idle_init+0xa8>)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <Idle_init+0xa8>)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	889b      	ldrh	r3, [r3, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	f008 fe09 	bl	800b04c <HAL_GPIO_WritePin>
			osDelay(200);
 800243a:	20c8      	movs	r0, #200	; 0xc8
 800243c:	f014 fba4 	bl	8016b88 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3b01      	subs	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	dae9      	bge.n	8002420 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 800244c:	f014 fb7c 	bl	8016b48 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002450:	e7ba      	b.n	80023c8 <Idle_init+0x8>
 8002452:	bf00      	nop
 8002454:	24001ad0 	.word	0x24001ad0
 8002458:	24001b15 	.word	0x24001b15
 800245c:	24001de4 	.word	0x24001de4
 8002460:	24001b14 	.word	0x24001b14
 8002464:	24000314 	.word	0x24000314
 8002468:	0801ab9c 	.word	0x0801ab9c

0800246c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	4b34      	ldr	r3, [pc, #208]	; (8002554 <MX_GPIO_Init+0xe8>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002488:	4a32      	ldr	r2, [pc, #200]	; (8002554 <MX_GPIO_Init+0xe8>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <MX_GPIO_Init+0xe8>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a6:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <MX_GPIO_Init+0xe8>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80024fa:	2200      	movs	r2, #0
 80024fc:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002500:	4815      	ldr	r0, [pc, #84]	; (8002558 <MX_GPIO_Init+0xec>)
 8002502:	f008 fda3 	bl	800b04c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	2164      	movs	r1, #100	; 0x64
 800250a:	4814      	ldr	r0, [pc, #80]	; (800255c <MX_GPIO_Init+0xf0>)
 800250c:	f008 fd9e 	bl	800b04c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002510:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002514:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800251a:	2302      	movs	r3, #2
 800251c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	480b      	ldr	r0, [pc, #44]	; (8002558 <MX_GPIO_Init+0xec>)
 800252a:	f008 fbc7 	bl	800acbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800252e:	2364      	movs	r3, #100	; 0x64
 8002530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002532:	2301      	movs	r3, #1
 8002534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002536:	2302      	movs	r3, #2
 8002538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_GPIO_Init+0xf0>)
 8002546:	f008 fbb9 	bl	800acbc <HAL_GPIO_Init>

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	; 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	58024400 	.word	0x58024400
 8002558:	58020800 	.word	0x58020800
 800255c:	58020400 	.word	0x58020400

08002560 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <MX_I2C1_Init+0x78>)
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <MX_I2C1_Init+0x7c>)
 8002568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <MX_I2C1_Init+0x78>)
 800256c:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <MX_I2C1_Init+0x80>)
 800256e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <MX_I2C1_Init+0x78>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <MX_I2C1_Init+0x78>)
 8002578:	2201      	movs	r2, #1
 800257a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <MX_I2C1_Init+0x78>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <MX_I2C1_Init+0x78>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <MX_I2C1_Init+0x78>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <MX_I2C1_Init+0x78>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <MX_I2C1_Init+0x78>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800259a:	480f      	ldr	r0, [pc, #60]	; (80025d8 <MX_I2C1_Init+0x78>)
 800259c:	f008 fd70 	bl	800b080 <HAL_I2C_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025a6:	f001 f89d 	bl	80036e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025aa:	2100      	movs	r1, #0
 80025ac:	480a      	ldr	r0, [pc, #40]	; (80025d8 <MX_I2C1_Init+0x78>)
 80025ae:	f00b f80f 	bl	800d5d0 <HAL_I2CEx_ConfigAnalogFilter>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025b8:	f001 f894 	bl	80036e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025bc:	2100      	movs	r1, #0
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <MX_I2C1_Init+0x78>)
 80025c0:	f00b f851 	bl	800d666 <HAL_I2CEx_ConfigDigitalFilter>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025ca:	f001 f88b 	bl	80036e4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f00b f896 	bl	800d700 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	24001974 	.word	0x24001974
 80025dc:	40005400 	.word	0x40005400
 80025e0:	00100517 	.word	0x00100517

080025e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0ba      	sub	sp, #232	; 0xe8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	22c0      	movs	r2, #192	; 0xc0
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f017 fbe1 	bl	8019dcc <memset>
  if(i2cHandle->Instance==I2C1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_I2C_MspInit+0x1a0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	f040 80b3 	bne.w	800277c <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002616:	f04f 0208 	mov.w	r2, #8
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4618      	mov	r0, r3
 800262e:	f00c f989 	bl	800e944 <HAL_RCCEx_PeriphCLKConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002638:	f001 f854 	bl	80036e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263c:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_I2C_MspInit+0x1a4>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002642:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_I2C_MspInit+0x1a4>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264c:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <HAL_I2C_MspInit+0x1a4>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800265a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002662:	2312      	movs	r3, #18
 8002664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002674:	2304      	movs	r3, #4
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800267e:	4619      	mov	r1, r3
 8002680:	4842      	ldr	r0, [pc, #264]	; (800278c <HAL_I2C_MspInit+0x1a8>)
 8002682:	f008 fb1b 	bl	800acbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_I2C_MspInit+0x1a4>)
 8002688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800268c:	4a3e      	ldr	r2, [pc, #248]	; (8002788 <HAL_I2C_MspInit+0x1a4>)
 800268e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002692:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002696:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <HAL_I2C_MspInit+0x1a4>)
 8002698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026a6:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <HAL_I2C_MspInit+0x1b0>)
 80026a8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026ac:	2222      	movs	r2, #34	; 0x22
 80026ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b6:	4b36      	ldr	r3, [pc, #216]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026dc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80026e4:	482a      	ldr	r0, [pc, #168]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026e6:	f005 f9b9 	bl	8007a5c <HAL_DMA_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 80026f0:	f000 fff8 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a26      	ldr	r2, [pc, #152]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
 80026fa:	4a25      	ldr	r2, [pc, #148]	; (8002790 <HAL_I2C_MspInit+0x1ac>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_I2C_MspInit+0x1b8>)
 8002704:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002708:	2221      	movs	r2, #33	; 0x21
 800270a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 800271a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800271e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002722:	2200      	movs	r2, #0
 8002724:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002734:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002738:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002740:	4815      	ldr	r0, [pc, #84]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002742:	f005 f98b 	bl	8007a5c <HAL_DMA_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 800274c:	f000 ffca 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <HAL_I2C_MspInit+0x1b4>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2105      	movs	r1, #5
 8002760:	201f      	movs	r0, #31
 8002762:	f004 fcd5 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002766:	201f      	movs	r0, #31
 8002768:	f004 fcec 	bl	8007144 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2105      	movs	r1, #5
 8002770:	2020      	movs	r0, #32
 8002772:	f004 fccd 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002776:	2020      	movs	r0, #32
 8002778:	f004 fce4 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800277c:	bf00      	nop
 800277e:	37e8      	adds	r7, #232	; 0xe8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40005400 	.word	0x40005400
 8002788:	58024400 	.word	0x58024400
 800278c:	58020400 	.word	0x58020400
 8002790:	240019c8 	.word	0x240019c8
 8002794:	400200a0 	.word	0x400200a0
 8002798:	24001a40 	.word	0x24001a40
 800279c:	400200b8 	.word	0x400200b8

080027a0 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_IWDG1_Init+0x34>)
 80027a6:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <MX_IWDG1_Init+0x38>)
 80027a8:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <MX_IWDG1_Init+0x34>)
 80027ac:	2204      	movs	r2, #4
 80027ae:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <MX_IWDG1_Init+0x34>)
 80027b2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80027b6:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_IWDG1_Init+0x34>)
 80027ba:	f240 12f3 	movw	r2, #499	; 0x1f3
 80027be:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <MX_IWDG1_Init+0x34>)
 80027c2:	f00a ffc1 	bl	800d748 <HAL_IWDG_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80027cc:	f000 ff8a 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	24001ab8 	.word	0x24001ab8
 80027d8:	58004800 	.word	0x58004800

080027dc <__NVIC_SystemReset>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80027e0:	f3bf 8f4f 	dsb	sy
}
 80027e4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <__NVIC_SystemReset+0x24>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027ee:	4904      	ldr	r1, [pc, #16]	; (8002800 <__NVIC_SystemReset+0x24>)
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_SystemReset+0x28>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80027f6:	f3bf 8f4f 	dsb	sy
}
 80027fa:	bf00      	nop
    __NOP();
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <__NVIC_SystemReset+0x20>
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	05fa0004 	.word	0x05fa0004

08002808 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d106      	bne.n	8002826 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f014 fa0c 	bl	8016c3c <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002824:	e032      	b.n	800288c <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d12b      	bne.n	8002886 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2102      	movs	r1, #2
 800283e:	4618      	mov	r0, r3
 8002840:	f014 f9fc 	bl	8016c3c <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	d113      	bne.n	8002876 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f014 f9f1 	bl	8016c3c <osEventFlagsSet>
			if (HK_ENABLED){
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2104      	movs	r1, #4
 800286a:	4618      	mov	r0, r3
 800286c:	f014 f9e6 	bl	8016c3c <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002882:	701a      	strb	r2, [r3, #0]
}
 8002884:	e002      	b.n	800288c <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002886:	480a      	ldr	r0, [pc, #40]	; (80028b0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002888:	f017 fb16 	bl	8019eb8 <puts>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	24001de4 	.word	0x24001de4
 8002898:	24001ac8 	.word	0x24001ac8
 800289c:	24001e30 	.word	0x24001e30
 80028a0:	24001b15 	.word	0x24001b15
 80028a4:	24001b1c 	.word	0x24001b1c
 80028a8:	24001acc 	.word	0x24001acc
 80028ac:	24001b14 	.word	0x24001b14
 80028b0:	0801a868 	.word	0x0801a868

080028b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80028bc:	2201      	movs	r2, #1
 80028be:	49f2      	ldr	r1, [pc, #968]	; (8002c88 <HAL_UART_RxCpltCallback+0x3d4>)
 80028c0:	48f2      	ldr	r0, [pc, #968]	; (8002c8c <HAL_UART_RxCpltCallback+0x3d8>)
 80028c2:	f011 fbad 	bl	8014020 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 80028c6:	4bf0      	ldr	r3, [pc, #960]	; (8002c88 <HAL_UART_RxCpltCallback+0x3d4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2be0      	cmp	r3, #224	; 0xe0
 80028d0:	f200 8424 	bhi.w	800311c <HAL_UART_RxCpltCallback+0x868>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <HAL_UART_RxCpltCallback+0x28>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	08002c75 	.word	0x08002c75
 80028e0:	08002cb9 	.word	0x08002cb9
 80028e4:	08002d29 	.word	0x08002d29
 80028e8:	08002d63 	.word	0x08002d63
 80028ec:	08002d9b 	.word	0x08002d9b
 80028f0:	08002dd5 	.word	0x08002dd5
 80028f4:	08002e11 	.word	0x08002e11
 80028f8:	08002e4d 	.word	0x08002e4d
 80028fc:	08002e87 	.word	0x08002e87
 8002900:	08002ebb 	.word	0x08002ebb
 8002904:	08002eef 	.word	0x08002eef
 8002908:	08002f21 	.word	0x08002f21
 800290c:	08002f4b 	.word	0x08002f4b
 8002910:	08003029 	.word	0x08003029
 8002914:	08003091 	.word	0x08003091
 8002918:	080030b9 	.word	0x080030b9
 800291c:	08002c61 	.word	0x08002c61
 8002920:	08002c9d 	.word	0x08002c9d
 8002924:	08002d0b 	.word	0x08002d0b
 8002928:	08002d47 	.word	0x08002d47
 800292c:	08002d7f 	.word	0x08002d7f
 8002930:	08002db7 	.word	0x08002db7
 8002934:	08002df3 	.word	0x08002df3
 8002938:	08002e2f 	.word	0x08002e2f
 800293c:	08002e6b 	.word	0x08002e6b
 8002940:	08002ea3 	.word	0x08002ea3
 8002944:	08002ecb 	.word	0x08002ecb
 8002948:	08002f05 	.word	0x08002f05
 800294c:	08002f31 	.word	0x08002f31
 8002950:	08002f59 	.word	0x08002f59
 8002954:	08003069 	.word	0x08003069
 8002958:	0800311d 	.word	0x0800311d
 800295c:	0800311d 	.word	0x0800311d
 8002960:	0800311d 	.word	0x0800311d
 8002964:	0800311d 	.word	0x0800311d
 8002968:	0800311d 	.word	0x0800311d
 800296c:	0800311d 	.word	0x0800311d
 8002970:	0800311d 	.word	0x0800311d
 8002974:	0800311d 	.word	0x0800311d
 8002978:	0800311d 	.word	0x0800311d
 800297c:	0800311d 	.word	0x0800311d
 8002980:	0800311d 	.word	0x0800311d
 8002984:	0800311d 	.word	0x0800311d
 8002988:	0800311d 	.word	0x0800311d
 800298c:	0800311d 	.word	0x0800311d
 8002990:	0800311d 	.word	0x0800311d
 8002994:	0800311d 	.word	0x0800311d
 8002998:	0800311d 	.word	0x0800311d
 800299c:	0800311d 	.word	0x0800311d
 80029a0:	0800311d 	.word	0x0800311d
 80029a4:	0800311d 	.word	0x0800311d
 80029a8:	0800311d 	.word	0x0800311d
 80029ac:	0800311d 	.word	0x0800311d
 80029b0:	0800311d 	.word	0x0800311d
 80029b4:	0800311d 	.word	0x0800311d
 80029b8:	0800311d 	.word	0x0800311d
 80029bc:	0800311d 	.word	0x0800311d
 80029c0:	0800311d 	.word	0x0800311d
 80029c4:	0800311d 	.word	0x0800311d
 80029c8:	0800311d 	.word	0x0800311d
 80029cc:	0800311d 	.word	0x0800311d
 80029d0:	0800311d 	.word	0x0800311d
 80029d4:	0800311d 	.word	0x0800311d
 80029d8:	0800311d 	.word	0x0800311d
 80029dc:	0800311d 	.word	0x0800311d
 80029e0:	0800311d 	.word	0x0800311d
 80029e4:	0800311d 	.word	0x0800311d
 80029e8:	0800311d 	.word	0x0800311d
 80029ec:	0800311d 	.word	0x0800311d
 80029f0:	0800311d 	.word	0x0800311d
 80029f4:	0800311d 	.word	0x0800311d
 80029f8:	0800311d 	.word	0x0800311d
 80029fc:	0800311d 	.word	0x0800311d
 8002a00:	0800311d 	.word	0x0800311d
 8002a04:	0800311d 	.word	0x0800311d
 8002a08:	0800311d 	.word	0x0800311d
 8002a0c:	0800311d 	.word	0x0800311d
 8002a10:	0800311d 	.word	0x0800311d
 8002a14:	0800311d 	.word	0x0800311d
 8002a18:	0800311d 	.word	0x0800311d
 8002a1c:	0800311d 	.word	0x0800311d
 8002a20:	0800311d 	.word	0x0800311d
 8002a24:	0800311d 	.word	0x0800311d
 8002a28:	0800311d 	.word	0x0800311d
 8002a2c:	0800311d 	.word	0x0800311d
 8002a30:	0800311d 	.word	0x0800311d
 8002a34:	0800311d 	.word	0x0800311d
 8002a38:	0800311d 	.word	0x0800311d
 8002a3c:	0800311d 	.word	0x0800311d
 8002a40:	0800311d 	.word	0x0800311d
 8002a44:	0800311d 	.word	0x0800311d
 8002a48:	0800311d 	.word	0x0800311d
 8002a4c:	0800311d 	.word	0x0800311d
 8002a50:	0800311d 	.word	0x0800311d
 8002a54:	0800311d 	.word	0x0800311d
 8002a58:	0800311d 	.word	0x0800311d
 8002a5c:	0800311d 	.word	0x0800311d
 8002a60:	0800311d 	.word	0x0800311d
 8002a64:	0800311d 	.word	0x0800311d
 8002a68:	0800311d 	.word	0x0800311d
 8002a6c:	0800311d 	.word	0x0800311d
 8002a70:	0800311d 	.word	0x0800311d
 8002a74:	0800311d 	.word	0x0800311d
 8002a78:	0800311d 	.word	0x0800311d
 8002a7c:	0800311d 	.word	0x0800311d
 8002a80:	0800311d 	.word	0x0800311d
 8002a84:	0800311d 	.word	0x0800311d
 8002a88:	0800311d 	.word	0x0800311d
 8002a8c:	0800311d 	.word	0x0800311d
 8002a90:	0800311d 	.word	0x0800311d
 8002a94:	0800311d 	.word	0x0800311d
 8002a98:	0800311d 	.word	0x0800311d
 8002a9c:	0800311d 	.word	0x0800311d
 8002aa0:	0800311d 	.word	0x0800311d
 8002aa4:	0800311d 	.word	0x0800311d
 8002aa8:	0800311d 	.word	0x0800311d
 8002aac:	0800311d 	.word	0x0800311d
 8002ab0:	0800311d 	.word	0x0800311d
 8002ab4:	0800311d 	.word	0x0800311d
 8002ab8:	0800311d 	.word	0x0800311d
 8002abc:	0800311d 	.word	0x0800311d
 8002ac0:	0800311d 	.word	0x0800311d
 8002ac4:	0800311d 	.word	0x0800311d
 8002ac8:	0800311d 	.word	0x0800311d
 8002acc:	0800311d 	.word	0x0800311d
 8002ad0:	0800311d 	.word	0x0800311d
 8002ad4:	0800311d 	.word	0x0800311d
 8002ad8:	0800311d 	.word	0x0800311d
 8002adc:	0800311d 	.word	0x0800311d
 8002ae0:	0800311d 	.word	0x0800311d
 8002ae4:	0800311d 	.word	0x0800311d
 8002ae8:	0800311d 	.word	0x0800311d
 8002aec:	0800311d 	.word	0x0800311d
 8002af0:	0800311d 	.word	0x0800311d
 8002af4:	0800311d 	.word	0x0800311d
 8002af8:	0800311d 	.word	0x0800311d
 8002afc:	0800311d 	.word	0x0800311d
 8002b00:	0800311d 	.word	0x0800311d
 8002b04:	0800311d 	.word	0x0800311d
 8002b08:	0800311d 	.word	0x0800311d
 8002b0c:	0800311d 	.word	0x0800311d
 8002b10:	0800311d 	.word	0x0800311d
 8002b14:	0800311d 	.word	0x0800311d
 8002b18:	0800311d 	.word	0x0800311d
 8002b1c:	0800311d 	.word	0x0800311d
 8002b20:	0800311d 	.word	0x0800311d
 8002b24:	0800311d 	.word	0x0800311d
 8002b28:	0800311d 	.word	0x0800311d
 8002b2c:	0800311d 	.word	0x0800311d
 8002b30:	0800311d 	.word	0x0800311d
 8002b34:	0800311d 	.word	0x0800311d
 8002b38:	0800311d 	.word	0x0800311d
 8002b3c:	0800311d 	.word	0x0800311d
 8002b40:	0800311d 	.word	0x0800311d
 8002b44:	0800311d 	.word	0x0800311d
 8002b48:	0800311d 	.word	0x0800311d
 8002b4c:	0800311d 	.word	0x0800311d
 8002b50:	0800311d 	.word	0x0800311d
 8002b54:	0800311d 	.word	0x0800311d
 8002b58:	0800311d 	.word	0x0800311d
 8002b5c:	0800311d 	.word	0x0800311d
 8002b60:	0800311d 	.word	0x0800311d
 8002b64:	0800311d 	.word	0x0800311d
 8002b68:	0800311d 	.word	0x0800311d
 8002b6c:	0800311d 	.word	0x0800311d
 8002b70:	0800311d 	.word	0x0800311d
 8002b74:	0800311d 	.word	0x0800311d
 8002b78:	0800311d 	.word	0x0800311d
 8002b7c:	0800311d 	.word	0x0800311d
 8002b80:	0800311d 	.word	0x0800311d
 8002b84:	0800311d 	.word	0x0800311d
 8002b88:	0800311d 	.word	0x0800311d
 8002b8c:	0800311d 	.word	0x0800311d
 8002b90:	0800311d 	.word	0x0800311d
 8002b94:	0800311d 	.word	0x0800311d
 8002b98:	080030f5 	.word	0x080030f5
 8002b9c:	0800311d 	.word	0x0800311d
 8002ba0:	0800311d 	.word	0x0800311d
 8002ba4:	0800311d 	.word	0x0800311d
 8002ba8:	0800311d 	.word	0x0800311d
 8002bac:	0800311d 	.word	0x0800311d
 8002bb0:	0800311d 	.word	0x0800311d
 8002bb4:	0800311d 	.word	0x0800311d
 8002bb8:	0800311d 	.word	0x0800311d
 8002bbc:	0800311d 	.word	0x0800311d
 8002bc0:	0800311d 	.word	0x0800311d
 8002bc4:	0800311d 	.word	0x0800311d
 8002bc8:	0800311d 	.word	0x0800311d
 8002bcc:	0800311d 	.word	0x0800311d
 8002bd0:	0800311d 	.word	0x0800311d
 8002bd4:	0800311d 	.word	0x0800311d
 8002bd8:	080030fb 	.word	0x080030fb
 8002bdc:	0800311d 	.word	0x0800311d
 8002be0:	0800311d 	.word	0x0800311d
 8002be4:	0800311d 	.word	0x0800311d
 8002be8:	0800311d 	.word	0x0800311d
 8002bec:	0800311d 	.word	0x0800311d
 8002bf0:	0800311d 	.word	0x0800311d
 8002bf4:	0800311d 	.word	0x0800311d
 8002bf8:	0800311d 	.word	0x0800311d
 8002bfc:	0800311d 	.word	0x0800311d
 8002c00:	0800311d 	.word	0x0800311d
 8002c04:	0800311d 	.word	0x0800311d
 8002c08:	0800311d 	.word	0x0800311d
 8002c0c:	0800311d 	.word	0x0800311d
 8002c10:	0800311d 	.word	0x0800311d
 8002c14:	0800311d 	.word	0x0800311d
 8002c18:	08003109 	.word	0x08003109
 8002c1c:	080030e1 	.word	0x080030e1
 8002c20:	0800311d 	.word	0x0800311d
 8002c24:	0800311d 	.word	0x0800311d
 8002c28:	0800311d 	.word	0x0800311d
 8002c2c:	0800311d 	.word	0x0800311d
 8002c30:	0800311d 	.word	0x0800311d
 8002c34:	0800311d 	.word	0x0800311d
 8002c38:	0800311d 	.word	0x0800311d
 8002c3c:	0800311d 	.word	0x0800311d
 8002c40:	0800311d 	.word	0x0800311d
 8002c44:	0800311d 	.word	0x0800311d
 8002c48:	0800311d 	.word	0x0800311d
 8002c4c:	0800311d 	.word	0x0800311d
 8002c50:	0800311d 	.word	0x0800311d
 8002c54:	0800311d 	.word	0x0800311d
 8002c58:	08003117 	.word	0x08003117
 8002c5c:	080030cd 	.word	0x080030cd
	case 0x10: {
		printf("SDN1 ON\n");
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <HAL_UART_RxCpltCallback+0x3dc>)
 8002c62:	f017 f929 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_UART_RxCpltCallback+0x3e0>)
 8002c68:	2104      	movs	r1, #4
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f008 f9ed 	bl	800b04c <HAL_GPIO_WritePin>
		break;
 8002c72:	e25e      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002c74:	4808      	ldr	r0, [pc, #32]	; (8002c98 <HAL_UART_RxCpltCallback+0x3e4>)
 8002c76:	f017 f91f 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_UART_RxCpltCallback+0x3e0>)
 8002c7c:	2104      	movs	r1, #4
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f008 f9e3 	bl	800b04c <HAL_GPIO_WritePin>
		break;
 8002c86:	e254      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
 8002c88:	24001ad4 	.word	0x24001ad4
 8002c8c:	24001e7c 	.word	0x24001e7c
 8002c90:	0801a880 	.word	0x0801a880
 8002c94:	58020400 	.word	0x58020400
 8002c98:	0801a888 	.word	0x0801a888
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002c9c:	48bf      	ldr	r0, [pc, #764]	; (8002f9c <HAL_UART_RxCpltCallback+0x6e8>)
 8002c9e:	f017 f90b 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002ca2:	4bbf      	ldr	r3, [pc, #764]	; (8002fa0 <HAL_UART_RxCpltCallback+0x6ec>)
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f008 f9cf 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2008      	movs	r0, #8
 8002cb2:	f002 fb45 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002cb6:	e23c      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002cb8:	48ba      	ldr	r0, [pc, #744]	; (8002fa4 <HAL_UART_RxCpltCallback+0x6f0>)
 8002cba:	f017 f8fd 	bl	8019eb8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e00f      	b.n	8002ce4 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002cc4:	4ab8      	ldr	r2, [pc, #736]	; (8002fa8 <HAL_UART_RxCpltCallback+0x6f4>)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002ccc:	4ab6      	ldr	r2, [pc, #728]	; (8002fa8 <HAL_UART_RxCpltCallback+0x6f4>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	889b      	ldrh	r3, [r3, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f008 f9b7 	bl	800b04c <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	dcec      	bgt.n	8002cc4 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002cea:	2310      	movs	r3, #16
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	e008      	b.n	8002d02 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fb22 	bl	8005340 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b07      	cmp	r3, #7
 8002d06:	dcf3      	bgt.n	8002cf0 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8002d08:	e213      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8002d0a:	48a8      	ldr	r0, [pc, #672]	; (8002fac <HAL_UART_RxCpltCallback+0x6f8>)
 8002d0c:	f017 f8d4 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002d10:	4ba7      	ldr	r3, [pc, #668]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d16:	2201      	movs	r2, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f008 f997 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002d1e:	2101      	movs	r1, #1
 8002d20:	2009      	movs	r0, #9
 8002d22:	f002 fb0d 	bl	8005340 <set_rail_monitor_enable>

		break;
 8002d26:	e204      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002d28:	48a2      	ldr	r0, [pc, #648]	; (8002fb4 <HAL_UART_RxCpltCallback+0x700>)
 8002d2a:	f017 f8c5 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002d2e:	4ba0      	ldr	r3, [pc, #640]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d34:	2200      	movs	r2, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f008 f988 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2009      	movs	r0, #9
 8002d40:	f002 fafe 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002d44:	e1f5      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8002d46:	489c      	ldr	r0, [pc, #624]	; (8002fb8 <HAL_UART_RxCpltCallback+0x704>)
 8002d48:	f017 f8b6 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002d4c:	4b98      	ldr	r3, [pc, #608]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	2201      	movs	r2, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f008 f97a 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8002d58:	2101      	movs	r1, #1
 8002d5a:	200a      	movs	r0, #10
 8002d5c:	f002 faf0 	bl	8005340 <set_rail_monitor_enable>

		break;
 8002d60:	e1e7      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002d62:	4896      	ldr	r0, [pc, #600]	; (8002fbc <HAL_UART_RxCpltCallback+0x708>)
 8002d64:	f017 f8a8 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8002d68:	4b91      	ldr	r3, [pc, #580]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f008 f96c 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002d74:	2100      	movs	r1, #0
 8002d76:	200a      	movs	r0, #10
 8002d78:	f002 fae2 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002d7c:	e1d9      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8002d7e:	4890      	ldr	r0, [pc, #576]	; (8002fc0 <HAL_UART_RxCpltCallback+0x70c>)
 8002d80:	f017 f89a 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002d84:	4b8a      	ldr	r3, [pc, #552]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f008 f95e 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002d90:	2101      	movs	r1, #1
 8002d92:	200b      	movs	r0, #11
 8002d94:	f002 fad4 	bl	8005340 <set_rail_monitor_enable>

		break;
 8002d98:	e1cb      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8002d9a:	488a      	ldr	r0, [pc, #552]	; (8002fc4 <HAL_UART_RxCpltCallback+0x710>)
 8002d9c:	f017 f88c 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002da0:	4b83      	ldr	r3, [pc, #524]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002da2:	2140      	movs	r1, #64	; 0x40
 8002da4:	2200      	movs	r2, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f008 f950 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8002dac:	2100      	movs	r1, #0
 8002dae:	200b      	movs	r0, #11
 8002db0:	f002 fac6 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002db4:	e1bd      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8002db6:	4884      	ldr	r0, [pc, #528]	; (8002fc8 <HAL_UART_RxCpltCallback+0x714>)
 8002db8:	f017 f87e 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002dbc:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f008 f941 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8002dca:	2101      	movs	r1, #1
 8002dcc:	200c      	movs	r0, #12
 8002dce:	f002 fab7 	bl	8005340 <set_rail_monitor_enable>

		break;
 8002dd2:	e1ae      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8002dd4:	487d      	ldr	r0, [pc, #500]	; (8002fcc <HAL_UART_RxCpltCallback+0x718>)
 8002dd6:	f017 f86f 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8002dda:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de0:	2200      	movs	r2, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f008 f932 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8002de8:	2100      	movs	r1, #0
 8002dea:	200c      	movs	r0, #12
 8002dec:	f002 faa8 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002df0:	e19f      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8002df2:	4877      	ldr	r0, [pc, #476]	; (8002fd0 <HAL_UART_RxCpltCallback+0x71c>)
 8002df4:	f017 f860 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8002df8:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f008 f923 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8002e06:	2101      	movs	r1, #1
 8002e08:	200d      	movs	r0, #13
 8002e0a:	f002 fa99 	bl	8005340 <set_rail_monitor_enable>

		break;
 8002e0e:	e190      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002e10:	4870      	ldr	r0, [pc, #448]	; (8002fd4 <HAL_UART_RxCpltCallback+0x720>)
 8002e12:	f017 f851 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f008 f914 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002e24:	2100      	movs	r1, #0
 8002e26:	200d      	movs	r0, #13
 8002e28:	f002 fa8a 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002e2c:	e181      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002e2e:	486a      	ldr	r0, [pc, #424]	; (8002fd8 <HAL_UART_RxCpltCallback+0x724>)
 8002e30:	f017 f842 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002e34:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f008 f905 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8002e42:	2101      	movs	r1, #1
 8002e44:	200f      	movs	r0, #15
 8002e46:	f002 fa7b 	bl	8005340 <set_rail_monitor_enable>

		break;
 8002e4a:	e172      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002e4c:	4863      	ldr	r0, [pc, #396]	; (8002fdc <HAL_UART_RxCpltCallback+0x728>)
 8002e4e:	f017 f833 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002e52:	4b57      	ldr	r3, [pc, #348]	; (8002fb0 <HAL_UART_RxCpltCallback+0x6fc>)
 8002e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f008 f8f6 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8002e60:	2100      	movs	r1, #0
 8002e62:	200f      	movs	r0, #15
 8002e64:	f002 fa6c 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002e68:	e163      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8002e6a:	485d      	ldr	r0, [pc, #372]	; (8002fe0 <HAL_UART_RxCpltCallback+0x72c>)
 8002e6c:	f017 f824 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8002e70:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_UART_RxCpltCallback+0x6ec>)
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	2201      	movs	r2, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f008 f8e8 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	2010      	movs	r0, #16
 8002e80:	f002 fa5e 	bl	8005340 <set_rail_monitor_enable>

		break;
 8002e84:	e155      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8002e86:	4857      	ldr	r0, [pc, #348]	; (8002fe4 <HAL_UART_RxCpltCallback+0x730>)
 8002e88:	f017 f816 	bl	8019eb8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8002e8c:	4b44      	ldr	r3, [pc, #272]	; (8002fa0 <HAL_UART_RxCpltCallback+0x6ec>)
 8002e8e:	2140      	movs	r1, #64	; 0x40
 8002e90:	2200      	movs	r2, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f008 f8da 	bl	800b04c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2010      	movs	r0, #16
 8002e9c:	f002 fa50 	bl	8005340 <set_rail_monitor_enable>
		break;
 8002ea0:	e147      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8002ea2:	4851      	ldr	r0, [pc, #324]	; (8002fe8 <HAL_UART_RxCpltCallback+0x734>)
 8002ea4:	f017 f808 	bl	8019eb8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2320      	movs	r3, #32
 8002eae:	4a4f      	ldr	r2, [pc, #316]	; (8002fec <HAL_UART_RxCpltCallback+0x738>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	484f      	ldr	r0, [pc, #316]	; (8002ff0 <HAL_UART_RxCpltCallback+0x73c>)
 8002eb4:	f004 fa46 	bl	8007344 <HAL_DAC_Start_DMA>
		break;
 8002eb8:	e13b      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8002eba:	484e      	ldr	r0, [pc, #312]	; (8002ff4 <HAL_UART_RxCpltCallback+0x740>)
 8002ebc:	f016 fffc 	bl	8019eb8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	484b      	ldr	r0, [pc, #300]	; (8002ff0 <HAL_UART_RxCpltCallback+0x73c>)
 8002ec4:	f004 fafe 	bl	80074c4 <HAL_DAC_Stop_DMA>
		break;
 8002ec8:	e133      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8002eca:	484b      	ldr	r0, [pc, #300]	; (8002ff8 <HAL_UART_RxCpltCallback+0x744>)
 8002ecc:	f016 fff4 	bl	8019eb8 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_UART_RxCpltCallback+0x748>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f013 feb0 	bl	8016c3c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ee0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8002ee6:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_UART_RxCpltCallback+0x74c>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]

		break;
 8002eec:	e121      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8002eee:	4845      	ldr	r0, [pc, #276]	; (8003004 <HAL_UART_RxCpltCallback+0x750>)
 8002ef0:	f016 ffe2 	bl	8019eb8 <puts>
		ERPA_ENABLED = 0;
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_UART_RxCpltCallback+0x74c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002f02:	e116      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8002f04:	4840      	ldr	r0, [pc, #256]	; (8003008 <HAL_UART_RxCpltCallback+0x754>)
 8002f06:	f016 ffd7 	bl	8019eb8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	483f      	ldr	r0, [pc, #252]	; (800300c <HAL_UART_RxCpltCallback+0x758>)
 8002f0e:	f00f fba7 	bl	8012660 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002f12:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <HAL_UART_RxCpltCallback+0x748>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f013 fe8f 	bl	8016c3c <osEventFlagsSet>
		break;
 8002f1e:	e108      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8002f20:	483b      	ldr	r0, [pc, #236]	; (8003010 <HAL_UART_RxCpltCallback+0x75c>)
 8002f22:	f016 ffc9 	bl	8019eb8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002f26:	2100      	movs	r1, #0
 8002f28:	4838      	ldr	r0, [pc, #224]	; (800300c <HAL_UART_RxCpltCallback+0x758>)
 8002f2a:	f00f fcf3 	bl	8012914 <HAL_TIM_OC_Stop_IT>
		break;
 8002f2e:	e100      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 8002f30:	4838      	ldr	r0, [pc, #224]	; (8003014 <HAL_UART_RxCpltCallback+0x760>)
 8002f32:	f016 ffc1 	bl	8019eb8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_UART_RxCpltCallback+0x748>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f013 fe7d 	bl	8016c3c <osEventFlagsSet>
		HK_ENABLED = 1;
 8002f42:	4b35      	ldr	r3, [pc, #212]	; (8003018 <HAL_UART_RxCpltCallback+0x764>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
		break;
 8002f48:	e0f3      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8002f4a:	4834      	ldr	r0, [pc, #208]	; (800301c <HAL_UART_RxCpltCallback+0x768>)
 8002f4c:	f016 ffb4 	bl	8019eb8 <puts>
		HK_ENABLED = 0;
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_UART_RxCpltCallback+0x764>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
		break;
 8002f56:	e0ec      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 8002f58:	4831      	ldr	r0, [pc, #196]	; (8003020 <HAL_UART_RxCpltCallback+0x76c>)
 8002f5a:	f016 ffad 	bl	8019eb8 <puts>
		if (step < 14) {
 8002f5e:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_UART_RxCpltCallback+0x770>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b0d      	cmp	r3, #13
 8002f66:	f200 80dd 	bhi.w	8003124 <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_UART_RxCpltCallback+0x770>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3302      	adds	r3, #2
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_UART_RxCpltCallback+0x770>)
 8002f76:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_UART_RxCpltCallback+0x770>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_UART_RxCpltCallback+0x738>)
 8002f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4819      	ldr	r0, [pc, #100]	; (8002ff0 <HAL_UART_RxCpltCallback+0x73c>)
 8002f8c:	f004 fb3d 	bl	800760a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002f90:	2100      	movs	r1, #0
 8002f92:	4817      	ldr	r0, [pc, #92]	; (8002ff0 <HAL_UART_RxCpltCallback+0x73c>)
 8002f94:	f004 f97e 	bl	8007294 <HAL_DAC_Start>
		}
		break;
 8002f98:	e0c4      	b.n	8003124 <HAL_UART_RxCpltCallback+0x870>
 8002f9a:	bf00      	nop
 8002f9c:	0801a894 	.word	0x0801a894
 8002fa0:	58020400 	.word	0x58020400
 8002fa4:	0801a8a0 	.word	0x0801a8a0
 8002fa8:	0801ab9c 	.word	0x0801ab9c
 8002fac:	0801a8ac 	.word	0x0801a8ac
 8002fb0:	58020800 	.word	0x58020800
 8002fb4:	0801a8b8 	.word	0x0801a8b8
 8002fb8:	0801a8c8 	.word	0x0801a8c8
 8002fbc:	0801a8d4 	.word	0x0801a8d4
 8002fc0:	0801a8e0 	.word	0x0801a8e0
 8002fc4:	0801a8ec 	.word	0x0801a8ec
 8002fc8:	0801a8fc 	.word	0x0801a8fc
 8002fcc:	0801a908 	.word	0x0801a908
 8002fd0:	0801a914 	.word	0x0801a914
 8002fd4:	0801a920 	.word	0x0801a920
 8002fd8:	0801a92c 	.word	0x0801a92c
 8002fdc:	0801a93c 	.word	0x0801a93c
 8002fe0:	0801a94c 	.word	0x0801a94c
 8002fe4:	0801a958 	.word	0x0801a958
 8002fe8:	0801a968 	.word	0x0801a968
 8002fec:	24000038 	.word	0x24000038
 8002ff0:	24000314 	.word	0x24000314
 8002ff4:	0801a978 	.word	0x0801a978
 8002ff8:	0801a988 	.word	0x0801a988
 8002ffc:	24001ac8 	.word	0x24001ac8
 8003000:	24001b15 	.word	0x24001b15
 8003004:	0801a990 	.word	0x0801a990
 8003008:	0801a99c 	.word	0x0801a99c
 800300c:	24001de4 	.word	0x24001de4
 8003010:	0801a9a4 	.word	0x0801a9a4
 8003014:	0801a9ac 	.word	0x0801a9ac
 8003018:	24001b14 	.word	0x24001b14
 800301c:	0801a9b4 	.word	0x0801a9b4
 8003020:	0801a9bc 	.word	0x0801a9bc
 8003024:	24001b16 	.word	0x24001b16
	}
	case 0x0D: {
		printf("Step Down\n");
 8003028:	4844      	ldr	r0, [pc, #272]	; (800313c <HAL_UART_RxCpltCallback+0x888>)
 800302a:	f016 ff45 	bl	8019eb8 <puts>
		if (step > 1) {
 800302e:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_UART_RxCpltCallback+0x88c>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d977      	bls.n	8003128 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 8003038:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_UART_RxCpltCallback+0x88c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3b02      	subs	r3, #2
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <HAL_UART_RxCpltCallback+0x88c>)
 8003044:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003046:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_UART_RxCpltCallback+0x88c>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_UART_RxCpltCallback+0x890>)
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	483b      	ldr	r0, [pc, #236]	; (8003148 <HAL_UART_RxCpltCallback+0x894>)
 800305a:	f004 fad6 	bl	800760a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800305e:	2100      	movs	r1, #0
 8003060:	4839      	ldr	r0, [pc, #228]	; (8003148 <HAL_UART_RxCpltCallback+0x894>)
 8003062:	f004 f917 	bl	8007294 <HAL_DAC_Start>
		}
		break;
 8003066:	e05f      	b.n	8003128 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003068:	4838      	ldr	r0, [pc, #224]	; (800314c <HAL_UART_RxCpltCallback+0x898>)
 800306a:	f016 ff25 	bl	8019eb8 <puts>
		if (cadence <= 50000) {
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003076:	4293      	cmp	r3, r2
 8003078:	d858      	bhi.n	800312c <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 800307a:	4b35      	ldr	r3, [pc, #212]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4a33      	ldr	r2, [pc, #204]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 8003082:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800308e:	e04d      	b.n	800312c <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003090:	4830      	ldr	r0, [pc, #192]	; (8003154 <HAL_UART_RxCpltCallback+0x8a0>)
 8003092:	f016 ff11 	bl	8019eb8 <puts>
		if (cadence >= 6250) {
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f641 0269 	movw	r2, #6249	; 0x1869
 800309e:	4293      	cmp	r3, r2
 80030a0:	d946      	bls.n	8003130 <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 80030a2:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	4a29      	ldr	r2, [pc, #164]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 80030aa:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80030ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_UART_RxCpltCallback+0x89c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80030b6:	e03b      	b.n	8003130 <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80030b8:	4827      	ldr	r0, [pc, #156]	; (8003158 <HAL_UART_RxCpltCallback+0x8a4>)
 80030ba:	f016 fefd 	bl	8019eb8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_UART_RxCpltCallback+0x8a8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2102      	movs	r1, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f013 fdb9 	bl	8016c3c <osEventFlagsSet>
		break;
 80030ca:	e032      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80030cc:	4824      	ldr	r0, [pc, #144]	; (8003160 <HAL_UART_RxCpltCallback+0x8ac>)
 80030ce:	f016 fef3 	bl	8019eb8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_UART_RxCpltCallback+0x8a8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2104      	movs	r1, #4
 80030d8:	4618      	mov	r0, r3
 80030da:	f013 fdaf 	bl	8016c3c <osEventFlagsSet>
		break;
 80030de:	e028      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80030e0:	4820      	ldr	r0, [pc, #128]	; (8003164 <HAL_UART_RxCpltCallback+0x8b0>)
 80030e2:	f016 fee9 	bl	8019eb8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_UART_RxCpltCallback+0x8a8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2108      	movs	r1, #8
 80030ec:	4618      	mov	r0, r3
 80030ee:	f013 fda5 	bl	8016c3c <osEventFlagsSet>
		break;
 80030f2:	e01e      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 80030f4:	f000 f9fe 	bl	80034f4 <sync>
		break;
 80030f8:	e01b      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_UART_RxCpltCallback+0x8b4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f013 fd9b 	bl	8016c3c <osEventFlagsSet>
		break;
 8003106:	e014      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_UART_RxCpltCallback+0x8b4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2102      	movs	r1, #2
 800310e:	4618      	mov	r0, r3
 8003110:	f013 fd94 	bl	8016c3c <osEventFlagsSet>
		break;
 8003114:	e00d      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_error_counters();
 8003116:	f7fe ff45 	bl	8001fa4 <reset_error_counters>
		break;
 800311a:	e00a      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 800311c:	4813      	ldr	r0, [pc, #76]	; (800316c <HAL_UART_RxCpltCallback+0x8b8>)
 800311e:	f016 fecb 	bl	8019eb8 <puts>
		break;
 8003122:	e006      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003124:	bf00      	nop
 8003126:	e004      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003128:	bf00      	nop
 800312a:	e002      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
		break;
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003130:	bf00      	nop
	}
	}
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	0801a9c4 	.word	0x0801a9c4
 8003140:	24001b16 	.word	0x24001b16
 8003144:	24000038 	.word	0x24000038
 8003148:	24000314 	.word	0x24000314
 800314c:	0801a9d0 	.word	0x0801a9d0
 8003150:	240000b8 	.word	0x240000b8
 8003154:	0801a9dc 	.word	0x0801a9dc
 8003158:	0801a9e8 	.word	0x0801a9e8
 800315c:	24001acc 	.word	0x24001acc
 8003160:	0801a9f8 	.word	0x0801a9f8
 8003164:	0801aa04 	.word	0x0801aa04
 8003168:	24001ad0 	.word	0x24001ad0
 800316c:	0801aa10 	.word	0x0801aa10

08003170 <get_reset_cause>:

void get_reset_cause()
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <get_reset_cause+0x58>)
 8003178:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800317c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 8003184:	2304      	movs	r3, #4
 8003186:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003188:	231a      	movs	r3, #26
 800318a:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7fe fecf 	bl	8001f30 <handle_error>
 8003192:	e00d      	b.n	80031b0 <get_reset_cause+0x40>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <get_reset_cause+0x58>)
 8003196:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800319a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <get_reset_cause+0x40>
    {
        error.category = EC_brownout;
 80031a2:	2303      	movs	r3, #3
 80031a4:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 80031a6:	231a      	movs	r3, #26
 80031a8:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fec0 	bl	8001f30 <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <get_reset_cause+0x58>)
 80031b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <get_reset_cause+0x58>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	58024400 	.word	0x58024400

080031cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80031d2:	f000 fa33 	bl	800363c <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <main+0x128>)
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11b      	bne.n	800321a <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80031e2:	f3bf 8f4f 	dsb	sy
}
 80031e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031e8:	f3bf 8f6f 	isb	sy
}
 80031ec:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <main+0x128>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80031f6:	f3bf 8f4f 	dsb	sy
}
 80031fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031fc:	f3bf 8f6f 	isb	sy
}
 8003200:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003202:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <main+0x128>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4a3b      	ldr	r2, [pc, #236]	; (80032f4 <main+0x128>)
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800320e:	f3bf 8f4f 	dsb	sy
}
 8003212:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003214:	f3bf 8f6f 	isb	sy
}
 8003218:	e000      	b.n	800321c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800321a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800321c:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <main+0x128>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d138      	bne.n	800329a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003228:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <main+0x128>)
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003230:	f3bf 8f4f 	dsb	sy
}
 8003234:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003236:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <main+0x128>)
 8003238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0b5b      	lsrs	r3, r3, #13
 8003242:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003246:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003250:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800325a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003260:	4924      	ldr	r1, [pc, #144]	; (80032f4 <main+0x128>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ef      	bne.n	8003252 <main+0x86>
    } while(sets-- != 0U);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1e5a      	subs	r2, r3, #1
 8003276:	60ba      	str	r2, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e5      	bne.n	8003248 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800327c:	f3bf 8f4f 	dsb	sy
}
 8003280:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <main+0x128>)
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <main+0x128>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800328e:	f3bf 8f4f 	dsb	sy
}
 8003292:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003294:	f3bf 8f6f 	isb	sy
}
 8003298:	e000      	b.n	800329c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800329a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800329c:	f002 f9ee 	bl	800567c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032a0:	f000 f82a 	bl	80032f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80032a4:	f000 f8aa 	bl	80033fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a8:	f7ff f8e0 	bl	800246c <MX_GPIO_Init>
  MX_DMA_Init();
 80032ac:	f7fd fd1c 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80032b0:	f001 fd7e 	bl	8004db0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80032b4:	f7ff f954 	bl	8002560 <MX_I2C1_Init>
  MX_SPI2_Init();
 80032b8:	f000 feb4 	bl	8004024 <MX_SPI2_Init>
  MX_TIM2_Init();
 80032bc:	f001 fba0 	bl	8004a00 <MX_TIM2_Init>
  MX_TIM1_Init();
 80032c0:	f001 faf0 	bl	80048a4 <MX_TIM1_Init>
  MX_ADC3_Init();
 80032c4:	f7fd fab0 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80032c8:	f7fd f98c 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80032cc:	f7fd fc58 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80032d0:	f000 fe50 	bl	8003f74 <MX_SPI1_Init>
  MX_RTC_Init();
 80032d4:	f000 fc1c 	bl	8003b10 <MX_RTC_Init>
  MX_IWDG1_Init();
 80032d8:	f7ff fa62 	bl	80027a0 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */
  get_reset_cause();
 80032dc:	f7ff ff48 	bl	8003170 <get_reset_cause>
  system_setup();
 80032e0:	f000 f8bc 	bl	800345c <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80032e4:	f013 fb54 	bl	8016990 <osKernelInitialize>
  MX_FREERTOS_Init();
 80032e8:	f7fe fe9c 	bl	8002024 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032ec:	f013 fb74 	bl	80169d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80032f0:	e7fe      	b.n	80032f0 <main+0x124>
 80032f2:	bf00      	nop
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b09c      	sub	sp, #112	; 0x70
 80032fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003302:	224c      	movs	r2, #76	; 0x4c
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f016 fd60 	bl	8019dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	2220      	movs	r2, #32
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f016 fd5a 	bl	8019dcc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003318:	2002      	movs	r0, #2
 800331a:	f00a fab1 	bl	800d880 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800331e:	2300      	movs	r3, #0
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <SystemClock_Config+0xfc>)
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <SystemClock_Config+0xfc>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <SystemClock_Config+0xfc>)
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <SystemClock_Config+0x100>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003340:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <SystemClock_Config+0x100>)
 8003342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <SystemClock_Config+0x100>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003354:	bf00      	nop
 8003356:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <SystemClock_Config+0x100>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003362:	d1f8      	bne.n	8003356 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003364:	230b      	movs	r3, #11
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800336e:	2309      	movs	r3, #9
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003376:	2301      	movs	r3, #1
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800337a:	2302      	movs	r3, #2
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800337e:	2302      	movs	r3, #2
 8003380:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003382:	2304      	movs	r3, #4
 8003384:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003386:	2318      	movs	r3, #24
 8003388:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800338a:	2302      	movs	r3, #2
 800338c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800338e:	2302      	movs	r3, #2
 8003390:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003392:	2302      	movs	r3, #2
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003396:	2308      	movs	r3, #8
 8003398:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800339a:	2302      	movs	r3, #2
 800339c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a6:	4618      	mov	r0, r3
 80033a8:	f00a faa4 	bl	800d8f4 <HAL_RCC_OscConfig>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80033b2:	f000 f997 	bl	80036e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b6:	233f      	movs	r3, #63	; 0x3f
 80033b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033ba:	2303      	movs	r3, #3
 80033bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80033ca:	2340      	movs	r3, #64	; 0x40
 80033cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2101      	movs	r1, #1
 80033da:	4618      	mov	r0, r3
 80033dc:	f00a fee4 	bl	800e1a8 <HAL_RCC_ClockConfig>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80033e6:	f000 f97d 	bl	80036e4 <Error_Handler>
  }
}
 80033ea:	bf00      	nop
 80033ec:	3770      	adds	r7, #112	; 0x70
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	58000400 	.word	0x58000400
 80033f8:	58024800 	.word	0x58024800

080033fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b0b0      	sub	sp, #192	; 0xc0
 8003400:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003402:	463b      	mov	r3, r7
 8003404:	22c0      	movs	r2, #192	; 0xc0
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f016 fcdf 	bl	8019dcc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800340e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800341a:	2304      	movs	r3, #4
 800341c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800341e:	2318      	movs	r3, #24
 8003420:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003422:	2308      	movs	r3, #8
 8003424:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003426:	2302      	movs	r3, #2
 8003428:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800342a:	2302      	movs	r3, #2
 800342c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003432:	2320      	movs	r3, #32
 8003434:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003440:	463b      	mov	r3, r7
 8003442:	4618      	mov	r0, r3
 8003444:	f00b fa7e 	bl	800e944 <HAL_RCCEx_PeriphCLKConfig>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800344e:	f000 f949 	bl	80036e4 <Error_Handler>
  }
}
 8003452:	bf00      	nop
 8003454:	37c0      	adds	r7, #192	; 0xc0
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	// 3 -- Init rail monitor
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	error_counter_init();
 8003460:	f7fe fd70 	bl	8001f44 <error_counter_init>


	packet_event_flags = osEventFlagsNew(NULL);
 8003464:	2000      	movs	r0, #0
 8003466:	f013 fbaa 	bl	8016bbe <osEventFlagsNew>
 800346a:	4603      	mov	r3, r0
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <system_setup+0x80>)
 800346e:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <system_setup+0x80>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d100      	bne.n	800347a <system_setup+0x1e>
        while (1);
 8003478:	e7fe      	b.n	8003478 <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800347a:	2000      	movs	r0, #0
 800347c:	f013 fb9f 	bl	8016bbe <osEventFlagsNew>
 8003480:	4603      	mov	r3, r0
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <system_setup+0x84>)
 8003484:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <system_setup+0x84>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d100      	bne.n	8003490 <system_setup+0x34>
        while (1);
 800348e:	e7fe      	b.n	800348e <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003490:	2000      	movs	r0, #0
 8003492:	f013 fb94 	bl	8016bbe <osEventFlagsNew>
 8003496:	4603      	mov	r3, r0
 8003498:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <system_setup+0x88>)
 800349a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <system_setup+0x88>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d100      	bne.n	80034a6 <system_setup+0x4a>
        while (1);
 80034a4:	e7fe      	b.n	80034a4 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 80034a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80034ae:	210c      	movs	r1, #12
 80034b0:	480d      	ldr	r0, [pc, #52]	; (80034e8 <system_setup+0x8c>)
 80034b2:	f00f f8d5 	bl	8012660 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80034b6:	f001 fd85 	bl	8004fc4 <voltage_monitor_init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d100      	bne.n	80034c2 <system_setup+0x66>
		while (1);
 80034c0:	e7fe      	b.n	80034c0 <system_setup+0x64>
	}

	if (!init_adc_dma()) {
 80034c2:	f000 fbb7 	bl	8003c34 <init_adc_dma>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d100      	bne.n	80034ce <system_setup+0x72>
		while (1);
 80034cc:	e7fe      	b.n	80034cc <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80034ce:	2201      	movs	r2, #1
 80034d0:	4906      	ldr	r1, [pc, #24]	; (80034ec <system_setup+0x90>)
 80034d2:	4807      	ldr	r0, [pc, #28]	; (80034f0 <system_setup+0x94>)
 80034d4:	f010 fda4 	bl	8014020 <HAL_UART_Receive_IT>

}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	24001ac8 	.word	0x24001ac8
 80034e0:	24001acc 	.word	0x24001acc
 80034e4:	24001ad0 	.word	0x24001ad0
 80034e8:	24001e30 	.word	0x24001e30
 80034ec:	24001ad4 	.word	0x24001ad4
 80034f0:	24001e7c 	.word	0x24001e7c

080034f4 <sync>:

void sync() {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
	send_ACK();
 80034fa:	f000 f81f 	bl	800353c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80034fe:	480d      	ldr	r0, [pc, #52]	; (8003534 <sync+0x40>)
 8003500:	f010 fdda 	bl	80140b8 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003504:	2364      	movs	r3, #100	; 0x64
 8003506:	2209      	movs	r2, #9
 8003508:	490b      	ldr	r1, [pc, #44]	; (8003538 <sync+0x44>)
 800350a:	480a      	ldr	r0, [pc, #40]	; (8003534 <sync+0x40>)
 800350c:	f010 fcc0 	bl	8013e90 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <sync+0x44>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2bff      	cmp	r3, #255	; 0xff
 800351a:	d1f3      	bne.n	8003504 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800351c:	2201      	movs	r2, #1
 800351e:	4906      	ldr	r1, [pc, #24]	; (8003538 <sync+0x44>)
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <sync+0x40>)
 8003522:	f010 fd7d 	bl	8014020 <HAL_UART_Receive_IT>

	send_ACK();
 8003526:	f000 f809 	bl	800353c <send_ACK>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	24001e7c 	.word	0x24001e7c
 8003538:	24001ad4 	.word	0x24001ad4

0800353c <send_ACK>:

void send_ACK() {
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <send_ACK+0x1c>)
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003546:	2364      	movs	r3, #100	; 0x64
 8003548:	2201      	movs	r2, #1
 800354a:	4903      	ldr	r1, [pc, #12]	; (8003558 <send_ACK+0x1c>)
 800354c:	4803      	ldr	r0, [pc, #12]	; (800355c <send_ACK+0x20>)
 800354e:	f010 fc11 	bl	8013d74 <HAL_UART_Transmit>
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	24001b20 	.word	0x24001b20
 800355c:	24001e7c 	.word	0x24001e7c

08003560 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003566:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <get_current_step+0xc0>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003572:	4293      	cmp	r3, r2
 8003574:	d04a      	beq.n	800360c <get_current_step+0xac>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357c:	da48      	bge.n	8003610 <get_current_step+0xb0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003584:	4293      	cmp	r3, r2
 8003586:	d03f      	beq.n	8003608 <get_current_step+0xa8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f640 628b 	movw	r2, #3723	; 0xe8b
 800358e:	4293      	cmp	r3, r2
 8003590:	dc3e      	bgt.n	8003610 <get_current_step+0xb0>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003598:	4293      	cmp	r3, r2
 800359a:	d033      	beq.n	8003604 <get_current_step+0xa4>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80035a2:	da35      	bge.n	8003610 <get_current_step+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d028      	beq.n	8003600 <get_current_step+0xa0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80035b4:	4293      	cmp	r3, r2
 80035b6:	dc2b      	bgt.n	8003610 <get_current_step+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f240 7245 	movw	r2, #1861	; 0x745
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01c      	beq.n	80035fc <get_current_step+0x9c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f240 7245 	movw	r2, #1861	; 0x745
 80035c8:	4293      	cmp	r3, r2
 80035ca:	dc21      	bgt.n	8003610 <get_current_step+0xb0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d010      	beq.n	80035f8 <get_current_step+0x98>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80035dc:	4293      	cmp	r3, r2
 80035de:	dc17      	bgt.n	8003610 <get_current_step+0xb0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <get_current_step+0x90>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80035ec:	d002      	beq.n	80035f4 <get_current_step+0x94>
 80035ee:	e00f      	b.n	8003610 <get_current_step+0xb0>
	case 0:
		return 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e00e      	b.n	8003612 <get_current_step+0xb2>
	case 620:
		return 1;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e00c      	b.n	8003612 <get_current_step+0xb2>
	case 1241:
		return 2;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e00a      	b.n	8003612 <get_current_step+0xb2>
	case 1861:
		return 3;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e008      	b.n	8003612 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003600:	2304      	movs	r3, #4
 8003602:	e006      	b.n	8003612 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003604:	2305      	movs	r3, #5
 8003606:	e004      	b.n	8003612 <get_current_step+0xb2>
	case 3723:
		return 6;
 8003608:	2306      	movs	r3, #6
 800360a:	e002      	b.n	8003612 <get_current_step+0xb2>
	case 4095:
		return 7;
 800360c:	2307      	movs	r3, #7
 800360e:	e000      	b.n	8003612 <get_current_step+0xb2>
	default:
		return -1;
 8003610:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40007400 	.word	0x40007400

08003624 <enter_stop>:

void enter_stop() {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	  send_ACK();
 8003628:	f7ff ff88 	bl	800353c <send_ACK>

	  vTaskSuspendAll();
 800362c:	f014 fe5e 	bl	80182ec <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003630:	2101      	movs	r1, #1
 8003632:	2001      	movs	r0, #1
 8003634:	f00a f8e8 	bl	800d808 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003638:	f7ff f8d0 	bl	80027dc <__NVIC_SystemReset>

0800363c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003642:	463b      	mov	r3, r7
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800364e:	f003 fd87 	bl	8007160 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003652:	2301      	movs	r3, #1
 8003654:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003656:	2300      	movs	r3, #0
 8003658:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800365e:	231f      	movs	r3, #31
 8003660:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003662:	2387      	movs	r3, #135	; 0x87
 8003664:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003666:	2300      	movs	r3, #0
 8003668:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800366a:	2300      	movs	r3, #0
 800366c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800366e:	2301      	movs	r3, #1
 8003670:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003672:	2301      	movs	r3, #1
 8003674:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800367e:	463b      	mov	r3, r7
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fda5 	bl	80071d0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003686:	2301      	movs	r3, #1
 8003688:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <MPU_Config+0x80>)
 800368c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800368e:	2311      	movs	r3, #17
 8003690:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8003692:	2300      	movs	r3, #0
 8003694:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003696:	2301      	movs	r3, #1
 8003698:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800369a:	2303      	movs	r3, #3
 800369c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036a6:	463b      	mov	r3, r7
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 fd91 	bl	80071d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80036ae:	2004      	movs	r0, #4
 80036b0:	f003 fd6e 	bl	8007190 <HAL_MPU_Enable>

}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	081c0000 	.word	0x081c0000

080036c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036d2:	f002 f80f 	bl	80056f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40001000 	.word	0x40001000

080036e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 80036ea:	2302      	movs	r3, #2
 80036ec:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 80036ee:	231a      	movs	r3, #26
 80036f0:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fc1c 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003706:	bf00      	nop
 8003708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370c:	481c      	ldr	r0, [pc, #112]	; (8003780 <create_pmt_packet+0x80>)
 800370e:	f007 fc85 	bl	800b01c <HAL_GPIO_ReadPin>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f7      	bne.n	8003708 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f001 faa8 	bl	8004c70 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fad9 	bl	8003cdc <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 800372a:	23bb      	movs	r3, #187	; 0xbb
 800372c:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 800372e:	23bb      	movs	r3, #187	; 0xbb
 8003730:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <create_pmt_packet+0x84>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <create_pmt_packet+0x84>)
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003746:	7a3b      	ldrb	r3, [r7, #8]
 8003748:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 800374a:	7a7b      	ldrb	r3, [r7, #9]
 800374c:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 800374e:	793b      	ldrb	r3, [r7, #4]
 8003750:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003752:	797b      	ldrb	r3, [r7, #5]
 8003754:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003756:	79bb      	ldrb	r3, [r7, #6]
 8003758:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800375e:	f107 010c 	add.w	r1, r7, #12
 8003762:	2364      	movs	r3, #100	; 0x64
 8003764:	220a      	movs	r2, #10
 8003766:	4808      	ldr	r0, [pc, #32]	; (8003788 <create_pmt_packet+0x88>)
 8003768:	f010 fb04 	bl	8013d74 <HAL_UART_Transmit>

	pmt_seq++;
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <create_pmt_packet+0x84>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <create_pmt_packet+0x84>)
 8003776:	801a      	strh	r2, [r3, #0]
}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	58020000 	.word	0x58020000
 8003784:	24001b22 	.word	0x24001b22
 8003788:	24001e7c 	.word	0x24001e7c

0800378c <create_erpa_packet>:


void create_erpa_packet() {
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003792:	bf00      	nop
 8003794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003798:	4828      	ldr	r0, [pc, #160]	; (800383c <create_erpa_packet+0xb0>)
 800379a:	f007 fc3f 	bl	800b01c <HAL_GPIO_ReadPin>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f7      	bne.n	8003794 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 80037a4:	23ff      	movs	r3, #255	; 0xff
 80037a6:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fa60 	bl	8004c70 <get_uptime>
	sweep_step = get_current_step();
 80037b0:	f7ff fed6 	bl	8003560 <get_current_step>
 80037b4:	4603      	mov	r3, r0
 80037b6:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 faad 	bl	8003d1c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fac8 	bl	8003d5c <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80037cc:	23aa      	movs	r3, #170	; 0xaa
 80037ce:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 80037d0:	23aa      	movs	r3, #170	; 0xaa
 80037d2:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80037d4:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <create_erpa_packet+0xb4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <create_erpa_packet+0xb4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <create_erpa_packet+0xb4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
 80037f2:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80037fe:	893b      	ldrh	r3, [r7, #8]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003804:	7b3b      	ldrb	r3, [r7, #12]
 8003806:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003808:	7b7b      	ldrb	r3, [r7, #13]
 800380a:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 800380c:	793b      	ldrb	r3, [r7, #4]
 800380e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003810:	797b      	ldrb	r3, [r7, #5]
 8003812:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003814:	79bb      	ldrb	r3, [r7, #6]
 8003816:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 800381c:	f107 0110 	add.w	r1, r7, #16
 8003820:	2364      	movs	r3, #100	; 0x64
 8003822:	220e      	movs	r2, #14
 8003824:	4807      	ldr	r0, [pc, #28]	; (8003844 <create_erpa_packet+0xb8>)
 8003826:	f010 faa5 	bl	8013d74 <HAL_UART_Transmit>

	erpa_seq++;
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <create_erpa_packet+0xb4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a03      	ldr	r2, [pc, #12]	; (8003840 <create_erpa_packet+0xb4>)
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	58020400 	.word	0x58020400
 8003840:	24001b24 	.word	0x24001b24
 8003844:	24001e7c 	.word	0x24001e7c

08003848 <create_hk_packet>:


void create_hk_packet() {
 8003848:	b580      	push	{r7, lr}
 800384a:	b094      	sub	sp, #80	; 0x50
 800384c:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	4618      	mov	r0, r3
 8003852:	f001 fa0d 	bl	8004c70 <get_uptime>
	get_timestamp(timestamp);
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fa58 	bl	8004d10 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003860:	f001 fdf0 	bl	8005444 <get_rail_monitor>
 8003864:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003866:	23cc      	movs	r3, #204	; 0xcc
 8003868:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800386a:	23cc      	movs	r3, #204	; 0xcc
 800386c:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800386e:	4b9b      	ldr	r3, [pc, #620]	; (8003adc <create_hk_packet+0x294>)
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	b29b      	uxth	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800387a:	4b98      	ldr	r3, [pc, #608]	; (8003adc <create_hk_packet+0x294>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	889b      	ldrh	r3, [r3, #4]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	b29b      	uxth	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800388e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003890:	889b      	ldrh	r3, [r3, #4]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003898:	330a      	adds	r3, #10
 800389a:	889b      	ldrh	r3, [r3, #4]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a6:	330a      	adds	r3, #10
 80038a8:	889b      	ldrh	r3, [r3, #4]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 80038ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b0:	3314      	adds	r3, #20
 80038b2:	889b      	ldrh	r3, [r3, #4]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80038bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038be:	3314      	adds	r3, #20
 80038c0:	889b      	ldrh	r3, [r3, #4]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80038c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c8:	331e      	adds	r3, #30
 80038ca:	889b      	ldrh	r3, [r3, #4]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80038d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d6:	331e      	adds	r3, #30
 80038d8:	889b      	ldrh	r3, [r3, #4]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80038de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e0:	3328      	adds	r3, #40	; 0x28
 80038e2:	889b      	ldrh	r3, [r3, #4]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	3328      	adds	r3, #40	; 0x28
 80038f2:	889b      	ldrh	r3, [r3, #4]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	3332      	adds	r3, #50	; 0x32
 80038fe:	889b      	ldrh	r3, [r3, #4]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	b29b      	uxth	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390c:	3332      	adds	r3, #50	; 0x32
 800390e:	889b      	ldrh	r3, [r3, #4]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	333c      	adds	r3, #60	; 0x3c
 800391a:	889b      	ldrh	r3, [r3, #4]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	b29b      	uxth	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	333c      	adds	r3, #60	; 0x3c
 800392a:	889b      	ldrh	r3, [r3, #4]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003934:	3346      	adds	r3, #70	; 0x46
 8003936:	889b      	ldrh	r3, [r3, #4]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	b29b      	uxth	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003944:	3346      	adds	r3, #70	; 0x46
 8003946:	889b      	ldrh	r3, [r3, #4]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	3350      	adds	r3, #80	; 0x50
 8003952:	889b      	ldrh	r3, [r3, #4]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	b29b      	uxth	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800395e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003960:	3350      	adds	r3, #80	; 0x50
 8003962:	889b      	ldrh	r3, [r3, #4]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 800396a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396c:	335a      	adds	r3, #90	; 0x5a
 800396e:	889b      	ldrh	r3, [r3, #4]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	b29b      	uxth	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 800397a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397c:	335a      	adds	r3, #90	; 0x5a
 800397e:	889b      	ldrh	r3, [r3, #4]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003988:	3364      	adds	r3, #100	; 0x64
 800398a:	889b      	ldrh	r3, [r3, #4]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	b29b      	uxth	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003998:	3364      	adds	r3, #100	; 0x64
 800399a:	889b      	ldrh	r3, [r3, #4]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	336e      	adds	r3, #110	; 0x6e
 80039a6:	889b      	ldrh	r3, [r3, #4]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	336e      	adds	r3, #110	; 0x6e
 80039b6:	889b      	ldrh	r3, [r3, #4]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	3378      	adds	r3, #120	; 0x78
 80039c2:	889b      	ldrh	r3, [r3, #4]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	3378      	adds	r3, #120	; 0x78
 80039d2:	889b      	ldrh	r3, [r3, #4]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80039da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039dc:	3382      	adds	r3, #130	; 0x82
 80039de:	889b      	ldrh	r3, [r3, #4]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80039ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ec:	3382      	adds	r3, #130	; 0x82
 80039ee:	889b      	ldrh	r3, [r3, #4]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	338c      	adds	r3, #140	; 0x8c
 80039fa:	889b      	ldrh	r3, [r3, #4]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	338c      	adds	r3, #140	; 0x8c
 8003a0a:	889b      	ldrh	r3, [r3, #4]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	3396      	adds	r3, #150	; 0x96
 8003a16:	889b      	ldrh	r3, [r3, #4]
 8003a18:	0a1b      	lsrs	r3, r3, #8
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	3396      	adds	r3, #150	; 0x96
 8003a26:	889b      	ldrh	r3, [r3, #4]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a30:	33a0      	adds	r3, #160	; 0xa0
 8003a32:	889b      	ldrh	r3, [r3, #4]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	33a0      	adds	r3, #160	; 0xa0
 8003a42:	889b      	ldrh	r3, [r3, #4]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	33aa      	adds	r3, #170	; 0xaa
 8003a4e:	889b      	ldrh	r3, [r3, #4]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5c:	33aa      	adds	r3, #170	; 0xaa
 8003a5e:	889b      	ldrh	r3, [r3, #4]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003a66:	7a3b      	ldrb	r3, [r7, #8]
 8003a68:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003a6c:	7a7b      	ldrb	r3, [r7, #9]
 8003a6e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003a72:	7abb      	ldrb	r3, [r7, #10]
 8003a74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003a78:	7afb      	ldrb	r3, [r7, #11]
 8003a7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003a7e:	7b3b      	ldrb	r3, [r7, #12]
 8003a80:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003a84:	7b7b      	ldrb	r3, [r7, #13]
 8003a86:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003a8a:	7bbb      	ldrb	r3, [r7, #14]
 8003a8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003a96:	7c3b      	ldrb	r3, [r7, #16]
 8003a98:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003a9c:	7c7b      	ldrb	r3, [r7, #17]
 8003a9e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003aa2:	793b      	ldrb	r3, [r7, #4]
 8003aa4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003aa8:	797b      	ldrb	r3, [r7, #5]
 8003aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003aae:	79bb      	ldrb	r3, [r7, #6]
 8003ab0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003aba:	f107 0114 	add.w	r1, r7, #20
 8003abe:	2364      	movs	r3, #100	; 0x64
 8003ac0:	2236      	movs	r2, #54	; 0x36
 8003ac2:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <create_hk_packet+0x298>)
 8003ac4:	f010 f956 	bl	8013d74 <HAL_UART_Transmit>

	hk_seq++;
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <create_hk_packet+0x294>)
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <create_hk_packet+0x294>)
 8003ad2:	801a      	strh	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3750      	adds	r7, #80	; 0x50
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	24001b28 	.word	0x24001b28
 8003ae0:	24001e7c 	.word	0x24001e7c

08003ae4 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <reset_packet_sequence_numbers+0x20>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <reset_packet_sequence_numbers+0x24>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <reset_packet_sequence_numbers+0x28>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	801a      	strh	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	24001b22 	.word	0x24001b22
 8003b08:	24001b24 	.word	0x24001b24
 8003b0c:	24001b28 	.word	0x24001b28

08003b10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003b24:	2300      	movs	r3, #0
 8003b26:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <MX_RTC_Init+0xb8>)
 8003b2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003b34:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b36:	2263      	movs	r2, #99	; 0x63
 8003b38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b40:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003b48:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b5a:	481a      	ldr	r0, [pc, #104]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b5c:	f00d fbf0 	bl	8011340 <HAL_RTC_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003b66:	f7ff fdbd 	bl	80036e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	2201      	movs	r2, #1
 8003b82:	4619      	mov	r1, r3
 8003b84:	480f      	ldr	r0, [pc, #60]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003b86:	f00d fc5d 	bl	8011444 <HAL_RTC_SetTime>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003b90:	f7ff fda8 	bl	80036e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003b94:	2301      	movs	r3, #1
 8003b96:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4806      	ldr	r0, [pc, #24]	; (8003bc4 <MX_RTC_Init+0xb4>)
 8003bac:	f00d fd44 	bl	8011638 <HAL_RTC_SetDate>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003bb6:	f7ff fd95 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	24001b2c 	.word	0x24001b2c
 8003bc8:	58004000 	.word	0x58004000

08003bcc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b0b2      	sub	sp, #200	; 0xc8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	22c0      	movs	r2, #192	; 0xc0
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f016 f8f5 	bl	8019dcc <memset>
  if(rtcHandle->Instance==RTC)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <HAL_RTC_MspInit+0x5c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d118      	bne.n	8003c1e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003bec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <HAL_RTC_MspInit+0x60>)
 8003bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00a fe9e 	bl	800e944 <HAL_RCCEx_PeriphCLKConfig>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003c0e:	f7ff fd69 	bl	80036e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <HAL_RTC_MspInit+0x64>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a06      	ldr	r2, [pc, #24]	; (8003c30 <HAL_RTC_MspInit+0x64>)
 8003c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003c1e:	bf00      	nop
 8003c20:	37c8      	adds	r7, #200	; 0xc8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	58004000 	.word	0x58004000
 8003c2c:	00019300 	.word	0x00019300
 8003c30:	58024400 	.word	0x58024400

08003c34 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003c3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c46:	481f      	ldr	r0, [pc, #124]	; (8003cc4 <init_adc_dma+0x90>)
 8003c48:	f003 f868 	bl	8006d1c <HAL_ADCEx_Calibration_Start>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003c52:	f7ff fd47 	bl	80036e4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003c56:	220b      	movs	r2, #11
 8003c58:	491b      	ldr	r1, [pc, #108]	; (8003cc8 <init_adc_dma+0x94>)
 8003c5a:	481a      	ldr	r0, [pc, #104]	; (8003cc4 <init_adc_dma+0x90>)
 8003c5c:	f002 f93c 	bl	8005ed8 <HAL_ADC_Start_DMA>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003c66:	f7ff fd3d 	bl	80036e4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003c6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c72:	4816      	ldr	r0, [pc, #88]	; (8003ccc <init_adc_dma+0x98>)
 8003c74:	f003 f852 	bl	8006d1c <HAL_ADCEx_Calibration_Start>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003c7e:	f7ff fd31 	bl	80036e4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003c82:	2204      	movs	r2, #4
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <init_adc_dma+0x9c>)
 8003c86:	4811      	ldr	r0, [pc, #68]	; (8003ccc <init_adc_dma+0x98>)
 8003c88:	f002 f926 	bl	8005ed8 <HAL_ADC_Start_DMA>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003c92:	f7ff fd27 	bl	80036e4 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <init_adc_dma+0xa0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <init_adc_dma+0xa0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca4:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <init_adc_dma+0xa4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <init_adc_dma+0xa4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb4:	601a      	str	r2, [r3, #0]


	status = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	71fb      	strb	r3, [r7, #7]

	return status;
 8003cba:	79fb      	ldrb	r3, [r7, #7]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2400015c 	.word	0x2400015c
 8003cc8:	24001b60 	.word	0x24001b60
 8003ccc:	240001c0 	.word	0x240001c0
 8003cd0:	24001b80 	.word	0x24001b80
 8003cd4:	24001c1c 	.word	0x24001c1c
 8003cd8:	24001b94 	.word	0x24001b94

08003cdc <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	490b      	ldr	r1, [pc, #44]	; (8003d14 <sample_pmt_spi+0x38>)
 8003ce8:	480b      	ldr	r0, [pc, #44]	; (8003d18 <sample_pmt_spi+0x3c>)
 8003cea:	f00d ff6f 	bl	8011bcc <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <sample_pmt_spi+0x38>)
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <sample_pmt_spi+0x38>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3301      	adds	r3, #1
 8003d08:	7bba      	ldrb	r2, [r7, #14]
 8003d0a:	701a      	strb	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	24001b8c 	.word	0x24001b8c
 8003d18:	24001b94 	.word	0x24001b94

08003d1c <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003d24:	2201      	movs	r2, #1
 8003d26:	490b      	ldr	r1, [pc, #44]	; (8003d54 <sample_erpa_spi+0x38>)
 8003d28:	480b      	ldr	r0, [pc, #44]	; (8003d58 <sample_erpa_spi+0x3c>)
 8003d2a:	f00d ff4f 	bl	8011bcc <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <sample_erpa_spi+0x38>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <sample_erpa_spi+0x38>)
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3301      	adds	r3, #1
 8003d48:	7bba      	ldrb	r2, [r7, #14]
 8003d4a:	701a      	strb	r2, [r3, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	24001b88 	.word	0x24001b88
 8003d58:	24001c1c 	.word	0x24001c1c

08003d5c <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <sample_erpa_adc+0x20>)
 8003d66:	885b      	ldrh	r3, [r3, #2]
 8003d68:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	89fa      	ldrh	r2, [r7, #14]
 8003d6e:	801a      	strh	r2, [r3, #0]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	24001b60 	.word	0x24001b60

08003d80 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003d88:	2390      	movs	r3, #144	; 0x90
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f8a2 	bl	8003ed4 <poll_i2c_sensor>
 8003d90:	4603      	mov	r3, r0
 8003d92:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003d94:	2394      	movs	r3, #148	; 0x94
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f89c 	bl	8003ed4 <poll_i2c_sensor>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003da0:	2392      	movs	r3, #146	; 0x92
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f896 	bl	8003ed4 <poll_i2c_sensor>
 8003da8:	4603      	mov	r3, r0
 8003daa:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003dac:	2396      	movs	r3, #150	; 0x96
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f890 	bl	8003ed4 <poll_i2c_sensor>
 8003db4:	4603      	mov	r3, r0
 8003db6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	89fa      	ldrh	r2, [r7, #14]
 8003dbc:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	89ba      	ldrh	r2, [r7, #12]
 8003dc4:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	897a      	ldrh	r2, [r7, #10]
 8003dcc:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3306      	adds	r3, #6
 8003dd2:	893a      	ldrh	r2, [r7, #8]
 8003dd4:	801a      	strh	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003dea:	8a9b      	ldrh	r3, [r3, #20]
 8003dec:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003dee:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003df0:	8a1b      	ldrh	r3, [r3, #16]
 8003df2:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8003df4:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003df6:	899b      	ldrh	r3, [r3, #12]
 8003df8:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003dfa:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003dfc:	8a5b      	ldrh	r3, [r3, #18]
 8003dfe:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003e00:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003e02:	889b      	ldrh	r3, [r3, #4]
 8003e04:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003e08:	88db      	ldrh	r3, [r3, #6]
 8003e0a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003e0e:	89db      	ldrh	r3, [r3, #14]
 8003e10:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003e14:	891b      	ldrh	r3, [r3, #8]
 8003e16:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <sample_hk_adc1+0xa0>)
 8003e20:	895b      	ldrh	r3, [r3, #10]
 8003e22:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8bfa      	ldrh	r2, [r7, #30]
 8003e28:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	8bba      	ldrh	r2, [r7, #28]
 8003e30:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	8b7a      	ldrh	r2, [r7, #26]
 8003e38:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3306      	adds	r3, #6
 8003e3e:	8b3a      	ldrh	r2, [r7, #24]
 8003e40:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3308      	adds	r3, #8
 8003e46:	8afa      	ldrh	r2, [r7, #22]
 8003e48:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	330a      	adds	r3, #10
 8003e4e:	8aba      	ldrh	r2, [r7, #20]
 8003e50:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	330c      	adds	r3, #12
 8003e56:	8a7a      	ldrh	r2, [r7, #18]
 8003e58:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	330e      	adds	r3, #14
 8003e5e:	8a3a      	ldrh	r2, [r7, #16]
 8003e60:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3310      	adds	r3, #16
 8003e66:	89fa      	ldrh	r2, [r7, #14]
 8003e68:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3312      	adds	r3, #18
 8003e6e:	89ba      	ldrh	r2, [r7, #12]
 8003e70:	801a      	strh	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	3724      	adds	r7, #36	; 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	24001b60 	.word	0x24001b60

08003e84 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <sample_hk_adc3+0x4c>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <sample_hk_adc3+0x4c>)
 8003e94:	885b      	ldrh	r3, [r3, #2]
 8003e96:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <sample_hk_adc3+0x4c>)
 8003e9a:	889b      	ldrh	r3, [r3, #4]
 8003e9c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <sample_hk_adc3+0x4c>)
 8003ea0:	88db      	ldrh	r3, [r3, #6]
 8003ea2:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	89fa      	ldrh	r2, [r7, #14]
 8003ea8:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3302      	adds	r3, #2
 8003eae:	89ba      	ldrh	r2, [r7, #12]
 8003eb0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	897a      	ldrh	r2, [r7, #10]
 8003eb8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3306      	adds	r3, #6
 8003ebe:	893a      	ldrh	r2, [r7, #8]
 8003ec0:	801a      	strh	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	24001b80 	.word	0x24001b80

08003ed4 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <poll_i2c_sensor+0x90>)
 8003ee2:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <poll_i2c_sensor+0x90>)
 8003eec:	481e      	ldr	r0, [pc, #120]	; (8003f68 <poll_i2c_sensor+0x94>)
 8003eee:	f007 f963 	bl	800b1b8 <HAL_I2C_Master_Transmit_DMA>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8003ef6:	7b7b      	ldrb	r3, [r7, #13]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8003efc:	481b      	ldr	r0, [pc, #108]	; (8003f6c <poll_i2c_sensor+0x98>)
 8003efe:	f015 ffdb 	bl	8019eb8 <puts>
 8003f02:	e028      	b.n	8003f56 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003f04:	bf00      	nop
 8003f06:	4818      	ldr	r0, [pc, #96]	; (8003f68 <poll_i2c_sensor+0x94>)
 8003f08:	f007 fc3d 	bl	800b786 <HAL_I2C_GetState>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d1f9      	bne.n	8003f06 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	b299      	uxth	r1, r3
 8003f16:	2302      	movs	r3, #2
 8003f18:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <poll_i2c_sensor+0x90>)
 8003f1a:	4813      	ldr	r0, [pc, #76]	; (8003f68 <poll_i2c_sensor+0x94>)
 8003f1c:	f007 fa60 	bl	800b3e0 <HAL_I2C_Master_Receive_DMA>
 8003f20:	4603      	mov	r3, r0
 8003f22:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8003f24:	7b7b      	ldrb	r3, [r7, #13]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8003f2a:	4811      	ldr	r0, [pc, #68]	; (8003f70 <poll_i2c_sensor+0x9c>)
 8003f2c:	f015 ffc4 	bl	8019eb8 <puts>
 8003f30:	e011      	b.n	8003f56 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8003f32:	bf00      	nop
 8003f34:	480c      	ldr	r0, [pc, #48]	; (8003f68 <poll_i2c_sensor+0x94>)
 8003f36:	f007 fc26 	bl	800b786 <HAL_I2C_GetState>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d1f9      	bne.n	8003f34 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <poll_i2c_sensor+0x90>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8003f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f4c:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <poll_i2c_sensor+0x90>)
 8003f4e:	7852      	ldrb	r2, [r2, #1]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	10db      	asrs	r3, r3, #3
 8003f54:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8003f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	24001b90 	.word	0x24001b90
 8003f68:	24001974 	.word	0x24001974
 8003f6c:	0801aa20 	.word	0x0801aa20
 8003f70:	0801aa30 	.word	0x0801aa30

08003f74 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003f78:	4b28      	ldr	r3, [pc, #160]	; (800401c <MX_SPI1_Init+0xa8>)
 8003f7a:	4a29      	ldr	r2, [pc, #164]	; (8004020 <MX_SPI1_Init+0xac>)
 8003f7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <MX_SPI1_Init+0xa8>)
 8003f80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003f86:	4b25      	ldr	r3, [pc, #148]	; (800401c <MX_SPI1_Init+0xa8>)
 8003f88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003f8c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <MX_SPI1_Init+0xa8>)
 8003f90:	220f      	movs	r2, #15
 8003f92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <MX_SPI1_Init+0xa8>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <MX_SPI1_Init+0xa8>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fa6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <MX_SPI1_Init+0xa8>)
 8003faa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fb6:	4b19      	ldr	r3, [pc, #100]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003fc2:	4b16      	ldr	r3, [pc, #88]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003fc8:	4b14      	ldr	r3, [pc, #80]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <MX_SPI1_Init+0xa8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <MX_SPI1_Init+0xa8>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <MX_SPI1_Init+0xa8>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <MX_SPI1_Init+0xa8>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <MX_SPI1_Init+0xa8>)
 8004002:	2200      	movs	r2, #0
 8004004:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004006:	4805      	ldr	r0, [pc, #20]	; (800401c <MX_SPI1_Init+0xa8>)
 8004008:	f00d fcbc 	bl	8011984 <HAL_SPI_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004012:	f7ff fb67 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	24001b94 	.word	0x24001b94
 8004020:	40013000 	.word	0x40013000

08004024 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <MX_SPI2_Init+0xa8>)
 800402a:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <MX_SPI2_Init+0xac>)
 800402c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800402e:	4b27      	ldr	r3, [pc, #156]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004030:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004034:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004036:	4b25      	ldr	r3, [pc, #148]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004038:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800403c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004040:	220f      	movs	r2, #15
 8004042:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004044:	4b21      	ldr	r3, [pc, #132]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <MX_SPI2_Init+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004052:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004056:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004058:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <MX_SPI2_Init+0xa8>)
 800405a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800405e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004062:	2200      	movs	r2, #0
 8004064:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004068:	2200      	movs	r2, #0
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <MX_SPI2_Init+0xa8>)
 800406e:	2200      	movs	r2, #0
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004074:	2200      	movs	r2, #0
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <MX_SPI2_Init+0xa8>)
 800407a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800407e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004082:	2200      	movs	r2, #0
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004088:	2200      	movs	r2, #0
 800408a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <MX_SPI2_Init+0xa8>)
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <MX_SPI2_Init+0xa8>)
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <MX_SPI2_Init+0xa8>)
 800409a:	2200      	movs	r2, #0
 800409c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <MX_SPI2_Init+0xa8>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <MX_SPI2_Init+0xa8>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <MX_SPI2_Init+0xa8>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <MX_SPI2_Init+0xa8>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <MX_SPI2_Init+0xa8>)
 80040b8:	f00d fc64 	bl	8011984 <HAL_SPI_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80040c2:	f7ff fb0f 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	24001c1c 	.word	0x24001c1c
 80040d0:	40003800 	.word	0x40003800

080040d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b0bc      	sub	sp, #240	; 0xf0
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040ec:	f107 0318 	add.w	r3, r7, #24
 80040f0:	22c0      	movs	r2, #192	; 0xc0
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f015 fe69 	bl	8019dcc <memset>
  if(spiHandle->Instance==SPI1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a83      	ldr	r2, [pc, #524]	; (800430c <HAL_SPI_MspInit+0x238>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d17c      	bne.n	80041fe <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004110:	2300      	movs	r3, #0
 8004112:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004114:	f107 0318 	add.w	r3, r7, #24
 8004118:	4618      	mov	r0, r3
 800411a:	f00a fc13 	bl	800e944 <HAL_RCCEx_PeriphCLKConfig>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004124:	f7ff fade 	bl	80036e4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004128:	4b79      	ldr	r3, [pc, #484]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 800412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412e:	4a78      	ldr	r2, [pc, #480]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 8004130:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004134:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004138:	4b75      	ldr	r3, [pc, #468]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 800413a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800413e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 8004148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800414c:	4a70      	ldr	r2, [pc, #448]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 800414e:	f043 0302 	orr.w	r3, r3, #2
 8004152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004156:	4b6e      	ldr	r3, [pc, #440]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 8004158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004164:	2318      	movs	r3, #24
 8004166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800417c:	2305      	movs	r3, #5
 800417e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004182:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004186:	4619      	mov	r1, r3
 8004188:	4862      	ldr	r0, [pc, #392]	; (8004314 <HAL_SPI_MspInit+0x240>)
 800418a:	f006 fd97 	bl	800acbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800418e:	4b62      	ldr	r3, [pc, #392]	; (8004318 <HAL_SPI_MspInit+0x244>)
 8004190:	4a62      	ldr	r2, [pc, #392]	; (800431c <HAL_SPI_MspInit+0x248>)
 8004192:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004194:	4b60      	ldr	r3, [pc, #384]	; (8004318 <HAL_SPI_MspInit+0x244>)
 8004196:	2225      	movs	r2, #37	; 0x25
 8004198:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800419a:	4b5f      	ldr	r3, [pc, #380]	; (8004318 <HAL_SPI_MspInit+0x244>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041a0:	4b5d      	ldr	r3, [pc, #372]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041a6:	4b5c      	ldr	r3, [pc, #368]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041ae:	4b5a      	ldr	r3, [pc, #360]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041b6:	4b58      	ldr	r3, [pc, #352]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80041be:	4b56      	ldr	r3, [pc, #344]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041c4:	4b54      	ldr	r3, [pc, #336]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80041d0:	4851      	ldr	r0, [pc, #324]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041d2:	f003 fc43 	bl	8007a5c <HAL_DMA_Init>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80041dc:	f7ff fa82 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a4d      	ldr	r2, [pc, #308]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80041e6:	4a4c      	ldr	r2, [pc, #304]	; (8004318 <HAL_SPI_MspInit+0x244>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80041ec:	2200      	movs	r2, #0
 80041ee:	2105      	movs	r1, #5
 80041f0:	2023      	movs	r0, #35	; 0x23
 80041f2:	f002 ff8d 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80041f6:	2023      	movs	r0, #35	; 0x23
 80041f8:	f002 ffa4 	bl	8007144 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80041fc:	e081      	b.n	8004302 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a47      	ldr	r2, [pc, #284]	; (8004320 <HAL_SPI_MspInit+0x24c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d17c      	bne.n	8004302 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004214:	2300      	movs	r3, #0
 8004216:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004218:	f107 0318 	add.w	r3, r7, #24
 800421c:	4618      	mov	r0, r3
 800421e:	f00a fb91 	bl	800e944 <HAL_RCCEx_PeriphCLKConfig>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004228:	f7ff fa5c 	bl	80036e4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800422c:	4b38      	ldr	r3, [pc, #224]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 800422e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004238:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800423c:	4b34      	ldr	r3, [pc, #208]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 800423e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 800424c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004250:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800425a:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <HAL_SPI_MspInit+0x23c>)
 800425c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004268:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800426c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004270:	2302      	movs	r3, #2
 8004272:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004282:	2305      	movs	r3, #5
 8004284:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004288:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800428c:	4619      	mov	r1, r3
 800428e:	4821      	ldr	r0, [pc, #132]	; (8004314 <HAL_SPI_MspInit+0x240>)
 8004290:	f006 fd14 	bl	800acbc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004294:	4b23      	ldr	r3, [pc, #140]	; (8004324 <HAL_SPI_MspInit+0x250>)
 8004296:	4a24      	ldr	r2, [pc, #144]	; (8004328 <HAL_SPI_MspInit+0x254>)
 8004298:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_SPI_MspInit+0x250>)
 800429c:	2227      	movs	r2, #39	; 0x27
 800429e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042a6:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80042c4:	4b17      	ldr	r3, [pc, #92]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042ca:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80042d6:	4813      	ldr	r0, [pc, #76]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042d8:	f003 fbc0 	bl	8007a5c <HAL_DMA_Init>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80042e2:	f7ff f9ff 	bl	80036e4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80042ec:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <HAL_SPI_MspInit+0x250>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80042f2:	2200      	movs	r2, #0
 80042f4:	2105      	movs	r1, #5
 80042f6:	2024      	movs	r0, #36	; 0x24
 80042f8:	f002 ff0a 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80042fc:	2024      	movs	r0, #36	; 0x24
 80042fe:	f002 ff21 	bl	8007144 <HAL_NVIC_EnableIRQ>
}
 8004302:	bf00      	nop
 8004304:	37f0      	adds	r7, #240	; 0xf0
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40013000 	.word	0x40013000
 8004310:	58024400 	.word	0x58024400
 8004314:	58020400 	.word	0x58020400
 8004318:	24001ca4 	.word	0x24001ca4
 800431c:	40020070 	.word	0x40020070
 8004320:	40003800 	.word	0x40003800
 8004324:	24001d1c 	.word	0x24001d1c
 8004328:	40020058 	.word	0x40020058

0800432c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_MspInit+0x38>)
 8004334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <HAL_MspInit+0x38>)
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_MspInit+0x38>)
 8004344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004350:	2200      	movs	r2, #0
 8004352:	210f      	movs	r1, #15
 8004354:	f06f 0001 	mvn.w	r0, #1
 8004358:	f002 feda 	bl	8007110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	58024400 	.word	0x58024400

08004368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b090      	sub	sp, #64	; 0x40
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	d827      	bhi.n	80043c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004376:	2200      	movs	r2, #0
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	2036      	movs	r0, #54	; 0x36
 800437c:	f002 fec8 	bl	8007110 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004380:	2036      	movs	r0, #54	; 0x36
 8004382:	f002 fedf 	bl	8007144 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004386:	4a29      	ldr	r2, [pc, #164]	; (800442c <HAL_InitTick+0xc4>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <HAL_InitTick+0xc8>)
 800438e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004392:	4a27      	ldr	r2, [pc, #156]	; (8004430 <HAL_InitTick+0xc8>)
 8004394:	f043 0310 	orr.w	r3, r3, #16
 8004398:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_InitTick+0xc8>)
 800439e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043aa:	f107 0210 	add.w	r2, r7, #16
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f00a fa83 	bl	800e8c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <HAL_InitTick+0x6a>
 80043c4:	e001      	b.n	80043ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e02b      	b.n	8004422 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043ca:	f00a fa4d 	bl	800e868 <HAL_RCC_GetPCLK1Freq>
 80043ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 80043d0:	e004      	b.n	80043dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80043d2:	f00a fa49 	bl	800e868 <HAL_RCC_GetPCLK1Freq>
 80043d6:	4603      	mov	r3, r0
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043de:	4a15      	ldr	r2, [pc, #84]	; (8004434 <HAL_InitTick+0xcc>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	0c9b      	lsrs	r3, r3, #18
 80043e6:	3b01      	subs	r3, #1
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80043ea:	4b13      	ldr	r3, [pc, #76]	; (8004438 <HAL_InitTick+0xd0>)
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <HAL_InitTick+0xd4>)
 80043ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_InitTick+0xd0>)
 80043f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80043f8:	4a0f      	ldr	r2, [pc, #60]	; (8004438 <HAL_InitTick+0xd0>)
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_InitTick+0xd0>)
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_InitTick+0xd0>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800440a:	480b      	ldr	r0, [pc, #44]	; (8004438 <HAL_InitTick+0xd0>)
 800440c:	f00e f859 	bl	80124c2 <HAL_TIM_Base_Init>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004416:	4808      	ldr	r0, [pc, #32]	; (8004438 <HAL_InitTick+0xd0>)
 8004418:	f00e f8aa 	bl	8012570 <HAL_TIM_Base_Start_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	e000      	b.n	8004422 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	3740      	adds	r7, #64	; 0x40
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	240000c4 	.word	0x240000c4
 8004430:	58024400 	.word	0x58024400
 8004434:	431bde83 	.word	0x431bde83
 8004438:	24001d94 	.word	0x24001d94
 800443c:	40001000 	.word	0x40001000

08004440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004444:	e7fe      	b.n	8004444 <NMI_Handler+0x4>

08004446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004446:	b480      	push	{r7}
 8004448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800444a:	e7fe      	b.n	800444a <HardFault_Handler+0x4>

0800444c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004450:	e7fe      	b.n	8004450 <MemManage_Handler+0x4>

08004452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004456:	e7fe      	b.n	8004456 <BusFault_Handler+0x4>

08004458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800445c:	e7fe      	b.n	800445c <UsageFault_Handler+0x4>

0800445e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004470:	4802      	ldr	r0, [pc, #8]	; (800447c <DMA1_Stream0_IRQHandler+0x10>)
 8004472:	f004 fe1d 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	24000224 	.word	0x24000224

08004480 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004484:	4802      	ldr	r0, [pc, #8]	; (8004490 <DMA1_Stream1_IRQHandler+0x10>)
 8004486:	f004 fe13 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2400029c 	.word	0x2400029c

08004494 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004498:	4802      	ldr	r0, [pc, #8]	; (80044a4 <DMA1_Stream2_IRQHandler+0x10>)
 800449a:	f004 fe09 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	24001f10 	.word	0x24001f10

080044a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80044ac:	4802      	ldr	r0, [pc, #8]	; (80044b8 <DMA1_Stream3_IRQHandler+0x10>)
 80044ae:	f004 fdff 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	24001d1c 	.word	0x24001d1c

080044bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80044c0:	4802      	ldr	r0, [pc, #8]	; (80044cc <DMA1_Stream4_IRQHandler+0x10>)
 80044c2:	f004 fdf5 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	24001ca4 	.word	0x24001ca4

080044d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80044d4:	4802      	ldr	r0, [pc, #8]	; (80044e0 <DMA1_Stream5_IRQHandler+0x10>)
 80044d6:	f004 fdeb 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	24000328 	.word	0x24000328

080044e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <DMA1_Stream6_IRQHandler+0x10>)
 80044ea:	f004 fde1 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	240019c8 	.word	0x240019c8

080044f8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044fc:	4802      	ldr	r0, [pc, #8]	; (8004508 <TIM1_BRK_IRQHandler+0x10>)
 80044fe:	f00e fb4e 	bl	8012b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	24001de4 	.word	0x24001de4

0800450c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <TIM1_UP_IRQHandler+0x10>)
 8004512:	f00e fb44 	bl	8012b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	24001de4 	.word	0x24001de4

08004520 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004524:	4802      	ldr	r0, [pc, #8]	; (8004530 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004526:	f00e fb3a 	bl	8012b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	24001de4 	.word	0x24001de4

08004534 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <TIM1_CC_IRQHandler+0x10>)
 800453a:	f00e fb30 	bl	8012b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	24001de4 	.word	0x24001de4

08004548 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800454c:	4802      	ldr	r0, [pc, #8]	; (8004558 <TIM2_IRQHandler+0x10>)
 800454e:	f00e fb26 	bl	8012b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	24001e30 	.word	0x24001e30

0800455c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <I2C1_EV_IRQHandler+0x10>)
 8004562:	f007 f82d 	bl	800b5c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	24001974 	.word	0x24001974

08004570 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <I2C1_ER_IRQHandler+0x10>)
 8004576:	f007 f83d 	bl	800b5f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	24001974 	.word	0x24001974

08004584 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004588:	4802      	ldr	r0, [pc, #8]	; (8004594 <SPI1_IRQHandler+0x10>)
 800458a:	f00d fc67 	bl	8011e5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	24001b94 	.word	0x24001b94

08004598 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800459c:	4802      	ldr	r0, [pc, #8]	; (80045a8 <SPI2_IRQHandler+0x10>)
 800459e:	f00d fc5d 	bl	8011e5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	24001c1c 	.word	0x24001c1c

080045ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045b0:	4802      	ldr	r0, [pc, #8]	; (80045bc <USART1_IRQHandler+0x10>)
 80045b2:	f00f fe37 	bl	8014224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	24001e7c 	.word	0x24001e7c

080045c0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80045c4:	4802      	ldr	r0, [pc, #8]	; (80045d0 <DMA1_Stream7_IRQHandler+0x10>)
 80045c6:	f004 fd73 	bl	80090b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	24001a40 	.word	0x24001a40

080045d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <TIM6_DAC_IRQHandler+0x20>)
 80045da:	791b      	ldrb	r3, [r3, #4]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80045e2:	4804      	ldr	r0, [pc, #16]	; (80045f4 <TIM6_DAC_IRQHandler+0x20>)
 80045e4:	f002 ffbb 	bl	800755e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80045e8:	4803      	ldr	r0, [pc, #12]	; (80045f8 <TIM6_DAC_IRQHandler+0x24>)
 80045ea:	f00e fad8 	bl	8012b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	24000314 	.word	0x24000314
 80045f8:	24001d94 	.word	0x24001d94

080045fc <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004606:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <ITM_SendChar+0x48>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <ITM_SendChar+0x48>)
 800460c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004610:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <ITM_SendChar+0x4c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <ITM_SendChar+0x4c>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800461e:	bf00      	nop
 8004620:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f8      	beq.n	8004620 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800462e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	6013      	str	r3, [r2, #0]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	e000edfc 	.word	0xe000edfc
 8004648:	e0000e00 	.word	0xe0000e00

0800464c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e00a      	b.n	8004674 <_read+0x28>
		*ptr++ = __io_getchar();
 800465e:	f3af 8000 	nop.w
 8004662:	4601      	mov	r1, r0
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	60ba      	str	r2, [r7, #8]
 800466a:	b2ca      	uxtb	r2, r1
 800466c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3301      	adds	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	dbf0      	blt.n	800465e <_read+0x12>
	}

	return len;
 800467c:	687b      	ldr	r3, [r7, #4]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004686:	b580      	push	{r7, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e009      	b.n	80046ac <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	60ba      	str	r2, [r7, #8]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ffab 	bl	80045fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3301      	adds	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	dbf1      	blt.n	8004698 <_write+0x12>
	}
	return len;
 80046b4:	687b      	ldr	r3, [r7, #4]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <_close>:

int _close(int file) {
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046e6:	605a      	str	r2, [r3, #4]
	return 0;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <_isatty>:

int _isatty(int file) {
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80046fe:	2301      	movs	r3, #1
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800473c:	4b13      	ldr	r3, [pc, #76]	; (800478c <_sbrk+0x64>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <_sbrk+0x64>)
 8004746:	4a12      	ldr	r2, [pc, #72]	; (8004790 <_sbrk+0x68>)
 8004748:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <_sbrk+0x64>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d207      	bcs.n	8004768 <_sbrk+0x40>
		errno = ENOMEM;
 8004758:	f015 fb00 	bl	8019d5c <__errno>
 800475c:	4603      	mov	r3, r0
 800475e:	220c      	movs	r2, #12
 8004760:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004766:	e009      	b.n	800477c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <_sbrk+0x64>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <_sbrk+0x64>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <_sbrk+0x64>)
 8004778:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800477a:	68fb      	ldr	r3, [r7, #12]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	24080000 	.word	0x24080000
 8004788:	00000400 	.word	0x00000400
 800478c:	24001de0 	.word	0x24001de0
 8004790:	240069c0 	.word	0x240069c0

08004794 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004798:	4b37      	ldr	r3, [pc, #220]	; (8004878 <SystemInit+0xe4>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	4a36      	ldr	r2, [pc, #216]	; (8004878 <SystemInit+0xe4>)
 80047a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80047a8:	4b34      	ldr	r3, [pc, #208]	; (800487c <SystemInit+0xe8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d807      	bhi.n	80047c4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80047b4:	4b31      	ldr	r3, [pc, #196]	; (800487c <SystemInit+0xe8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f023 030f 	bic.w	r3, r3, #15
 80047bc:	4a2f      	ldr	r2, [pc, #188]	; (800487c <SystemInit+0xe8>)
 80047be:	f043 0307 	orr.w	r3, r3, #7
 80047c2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80047c4:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <SystemInit+0xec>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2d      	ldr	r2, [pc, #180]	; (8004880 <SystemInit+0xec>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <SystemInit+0xec>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <SystemInit+0xec>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4929      	ldr	r1, [pc, #164]	; (8004880 <SystemInit+0xec>)
 80047dc:	4b29      	ldr	r3, [pc, #164]	; (8004884 <SystemInit+0xf0>)
 80047de:	4013      	ands	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <SystemInit+0xe8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <SystemInit+0xe8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 030f 	bic.w	r3, r3, #15
 80047f6:	4a21      	ldr	r2, [pc, #132]	; (800487c <SystemInit+0xe8>)
 80047f8:	f043 0307 	orr.w	r3, r3, #7
 80047fc:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <SystemInit+0xec>)
 8004800:	2200      	movs	r2, #0
 8004802:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <SystemInit+0xec>)
 8004806:	2200      	movs	r2, #0
 8004808:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <SystemInit+0xec>)
 800480c:	2200      	movs	r2, #0
 800480e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <SystemInit+0xec>)
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <SystemInit+0xf4>)
 8004814:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <SystemInit+0xec>)
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <SystemInit+0xf8>)
 800481a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <SystemInit+0xec>)
 800481e:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <SystemInit+0xfc>)
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <SystemInit+0xec>)
 8004824:	2200      	movs	r2, #0
 8004826:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <SystemInit+0xec>)
 800482a:	4a19      	ldr	r2, [pc, #100]	; (8004890 <SystemInit+0xfc>)
 800482c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <SystemInit+0xec>)
 8004830:	2200      	movs	r2, #0
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <SystemInit+0xec>)
 8004836:	4a16      	ldr	r2, [pc, #88]	; (8004890 <SystemInit+0xfc>)
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <SystemInit+0xec>)
 800483c:	2200      	movs	r2, #0
 800483e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <SystemInit+0xec>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <SystemInit+0xec>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <SystemInit+0xec>)
 800484e:	2200      	movs	r2, #0
 8004850:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <SystemInit+0x100>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <SystemInit+0x104>)
 8004858:	4013      	ands	r3, r2
 800485a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800485e:	d202      	bcs.n	8004866 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <SystemInit+0x108>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <SystemInit+0x10c>)
 8004868:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800486c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	e000ed00 	.word	0xe000ed00
 800487c:	52002000 	.word	0x52002000
 8004880:	58024400 	.word	0x58024400
 8004884:	eaf6ed7f 	.word	0xeaf6ed7f
 8004888:	02020200 	.word	0x02020200
 800488c:	01ff0000 	.word	0x01ff0000
 8004890:	01010280 	.word	0x01010280
 8004894:	5c001000 	.word	0x5c001000
 8004898:	ffff0000 	.word	0xffff0000
 800489c:	51008108 	.word	0x51008108
 80048a0:	52004000 	.word	0x52004000

080048a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b09a      	sub	sp, #104	; 0x68
 80048a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
 80048d4:	615a      	str	r2, [r3, #20]
 80048d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	222c      	movs	r2, #44	; 0x2c
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f015 fa74 	bl	8019dcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80048e4:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <MX_TIM1_Init+0x154>)
 80048e6:	4a45      	ldr	r2, [pc, #276]	; (80049fc <MX_TIM1_Init+0x158>)
 80048e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 80048ea:	4b43      	ldr	r3, [pc, #268]	; (80049f8 <MX_TIM1_Init+0x154>)
 80048ec:	224a      	movs	r2, #74	; 0x4a
 80048ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f0:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <MX_TIM1_Init+0x154>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80048f6:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <MX_TIM1_Init+0x154>)
 80048f8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80048fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048fe:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <MX_TIM1_Init+0x154>)
 8004900:	2200      	movs	r2, #0
 8004902:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004904:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <MX_TIM1_Init+0x154>)
 8004906:	2200      	movs	r2, #0
 8004908:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <MX_TIM1_Init+0x154>)
 800490c:	2200      	movs	r2, #0
 800490e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004910:	4839      	ldr	r0, [pc, #228]	; (80049f8 <MX_TIM1_Init+0x154>)
 8004912:	f00d fdd6 	bl	80124c2 <HAL_TIM_Base_Init>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800491c:	f7fe fee2 	bl	80036e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004924:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004926:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800492a:	4619      	mov	r1, r3
 800492c:	4832      	ldr	r0, [pc, #200]	; (80049f8 <MX_TIM1_Init+0x154>)
 800492e:	f00e fb51 	bl	8012fd4 <HAL_TIM_ConfigClockSource>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004938:	f7fe fed4 	bl	80036e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800493c:	482e      	ldr	r0, [pc, #184]	; (80049f8 <MX_TIM1_Init+0x154>)
 800493e:	f00e f8cd 	bl	8012adc <HAL_TIM_PWM_Init>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004948:	f7fe fecc 	bl	80036e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800494c:	2300      	movs	r3, #0
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004950:	2300      	movs	r3, #0
 8004952:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004954:	2300      	movs	r3, #0
 8004956:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004958:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800495c:	4619      	mov	r1, r3
 800495e:	4826      	ldr	r0, [pc, #152]	; (80049f8 <MX_TIM1_Init+0x154>)
 8004960:	f00f f88e 	bl	8013a80 <HAL_TIMEx_MasterConfigSynchronization>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800496a:	f7fe febb 	bl	80036e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800496e:	2360      	movs	r3, #96	; 0x60
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004972:	f240 13df 	movw	r3, #479	; 0x1df
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004978:	2300      	movs	r3, #0
 800497a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800497c:	2300      	movs	r3, #0
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004980:	2300      	movs	r3, #0
 8004982:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004984:	2300      	movs	r3, #0
 8004986:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004988:	2300      	movs	r3, #0
 800498a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800498c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004990:	2200      	movs	r2, #0
 8004992:	4619      	mov	r1, r3
 8004994:	4818      	ldr	r0, [pc, #96]	; (80049f8 <MX_TIM1_Init+0x154>)
 8004996:	f00e fa09 	bl	8012dac <HAL_TIM_PWM_ConfigChannel>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80049a0:	f7fe fea0 	bl	80036e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80049c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80049d4:	1d3b      	adds	r3, r7, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4807      	ldr	r0, [pc, #28]	; (80049f8 <MX_TIM1_Init+0x154>)
 80049da:	f00f f8df 	bl	8013b9c <HAL_TIMEx_ConfigBreakDeadTime>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80049e4:	f7fe fe7e 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80049e8:	4803      	ldr	r0, [pc, #12]	; (80049f8 <MX_TIM1_Init+0x154>)
 80049ea:	f000 f8dd 	bl	8004ba8 <HAL_TIM_MspPostInit>

}
 80049ee:	bf00      	nop
 80049f0:	3768      	adds	r7, #104	; 0x68
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	24001de4 	.word	0x24001de4
 80049fc:	40010000 	.word	0x40010000

08004a00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	609a      	str	r2, [r3, #8]
 8004a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a14:	f107 031c 	add.w	r3, r7, #28
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a20:	463b      	mov	r3, r7
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	609a      	str	r2, [r3, #8]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	611a      	str	r2, [r3, #16]
 8004a2e:	615a      	str	r2, [r3, #20]
 8004a30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a32:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a3c:	224a      	movs	r2, #74	; 0x4a
 8004a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a40:	4b29      	ldr	r3, [pc, #164]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004a46:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a48:	f640 4234 	movw	r2, #3124	; 0xc34
 8004a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a4e:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a54:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a5a:	4823      	ldr	r0, [pc, #140]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a5c:	f00d fd31 	bl	80124c2 <HAL_TIM_Base_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004a66:	f7fe fe3d 	bl	80036e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a74:	4619      	mov	r1, r3
 8004a76:	481c      	ldr	r0, [pc, #112]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a78:	f00e faac 	bl	8012fd4 <HAL_TIM_ConfigClockSource>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004a82:	f7fe fe2f 	bl	80036e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a86:	4818      	ldr	r0, [pc, #96]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004a88:	f00e f828 	bl	8012adc <HAL_TIM_PWM_Init>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004a92:	f7fe fe27 	bl	80036e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a96:	2320      	movs	r3, #32
 8004a98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a9e:	f107 031c 	add.w	r3, r7, #28
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4810      	ldr	r0, [pc, #64]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004aa6:	f00e ffeb 	bl	8013a80 <HAL_TIMEx_MasterConfigSynchronization>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004ab0:	f7fe fe18 	bl	80036e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ab4:	2360      	movs	r3, #96	; 0x60
 8004ab6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	220c      	movs	r2, #12
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4807      	ldr	r0, [pc, #28]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004acc:	f00e f96e 	bl	8012dac <HAL_TIM_PWM_ConfigChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004ad6:	f7fe fe05 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004ada:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <MX_TIM2_Init+0xe8>)
 8004adc:	f000 f864 	bl	8004ba8 <HAL_TIM_MspPostInit>

}
 8004ae0:	bf00      	nop
 8004ae2:	3738      	adds	r7, #56	; 0x38
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	24001e30 	.word	0x24001e30

08004aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a29      	ldr	r2, [pc, #164]	; (8004ba0 <HAL_TIM_Base_MspInit+0xb4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d12f      	bne.n	8004b5e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004afe:	4b29      	ldr	r3, [pc, #164]	; (8004ba4 <HAL_TIM_Base_MspInit+0xb8>)
 8004b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b04:	4a27      	ldr	r2, [pc, #156]	; (8004ba4 <HAL_TIM_Base_MspInit+0xb8>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004b0e:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_TIM_Base_MspInit+0xb8>)
 8004b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2105      	movs	r1, #5
 8004b20:	2018      	movs	r0, #24
 8004b22:	f002 faf5 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004b26:	2018      	movs	r0, #24
 8004b28:	f002 fb0c 	bl	8007144 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2105      	movs	r1, #5
 8004b30:	2019      	movs	r0, #25
 8004b32:	f002 faed 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004b36:	2019      	movs	r0, #25
 8004b38:	f002 fb04 	bl	8007144 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2105      	movs	r1, #5
 8004b40:	201a      	movs	r0, #26
 8004b42:	f002 fae5 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004b46:	201a      	movs	r0, #26
 8004b48:	f002 fafc 	bl	8007144 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2105      	movs	r1, #5
 8004b50:	201b      	movs	r0, #27
 8004b52:	f002 fadd 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004b56:	201b      	movs	r0, #27
 8004b58:	f002 faf4 	bl	8007144 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004b5c:	e01b      	b.n	8004b96 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b66:	d116      	bne.n	8004b96 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b68:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_TIM_Base_MspInit+0xb8>)
 8004b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <HAL_TIM_Base_MspInit+0xb8>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_TIM_Base_MspInit+0xb8>)
 8004b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004b86:	2200      	movs	r2, #0
 8004b88:	2105      	movs	r1, #5
 8004b8a:	201c      	movs	r0, #28
 8004b8c:	f002 fac0 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b90:	201c      	movs	r0, #28
 8004b92:	f002 fad7 	bl	8007144 <HAL_NVIC_EnableIRQ>
}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	58024400 	.word	0x58024400

08004ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb0:	f107 0314 	add.w	r3, r7, #20
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <HAL_TIM_MspPostInit+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d120      	bne.n	8004c0c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_TIM_MspPostInit+0xbc>)
 8004bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <HAL_TIM_MspPostInit+0xbc>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bda:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <HAL_TIM_MspPostInit+0xbc>)
 8004bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	4619      	mov	r1, r3
 8004c04:	4818      	ldr	r0, [pc, #96]	; (8004c68 <HAL_TIM_MspPostInit+0xc0>)
 8004c06:	f006 f859 	bl	800acbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004c0a:	e024      	b.n	8004c56 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d11f      	bne.n	8004c56 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_TIM_MspPostInit+0xbc>)
 8004c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c1c:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <HAL_TIM_MspPostInit+0xbc>)
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <HAL_TIM_MspPostInit+0xbc>)
 8004c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c42:	2300      	movs	r3, #0
 8004c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c46:	2301      	movs	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4a:	f107 0314 	add.w	r3, r7, #20
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4806      	ldr	r0, [pc, #24]	; (8004c6c <HAL_TIM_MspPostInit+0xc4>)
 8004c52:	f006 f833 	bl	800acbc <HAL_GPIO_Init>
}
 8004c56:	bf00      	nop
 8004c58:	3728      	adds	r7, #40	; 0x28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	58024400 	.word	0x58024400
 8004c68:	58020000 	.word	0x58020000
 8004c6c:	58020400 	.word	0x58020400

08004c70 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004c7c:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <get_uptime+0x94>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004c82:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <get_uptime+0x98>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004c88:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <get_uptime+0x94>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d005      	beq.n	8004c9e <get_uptime+0x2e>
		ms = uptime_millis;
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <get_uptime+0x94>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <get_uptime+0x98>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ca4:	fb03 f202 	mul.w	r2, r3, r2
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <get_uptime+0x98>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	3301      	adds	r3, #1
 8004cae:	4917      	ldr	r1, [pc, #92]	; (8004d0c <get_uptime+0x9c>)
 8004cb0:	fba1 1303 	umull	r1, r3, r1, r3
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <get_uptime+0x5a>
		uptime = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	0e1b      	lsrs	r3, r3, #24
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	0c1a      	lsrs	r2, r3, #16
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	0a1a      	lsrs	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3303      	adds	r3, #3
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	24001b18 	.word	0x24001b18
 8004d08:	e000e010 	.word	0xe000e010
 8004d0c:	10624dd3 	.word	0x10624dd3

08004d10 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4821      	ldr	r0, [pc, #132]	; (8004da8 <get_timestamp+0x98>)
 8004d22:	f00c fc2d 	bl	8011580 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	481e      	ldr	r0, [pc, #120]	; (8004da8 <get_timestamp+0x98>)
 8004d30:	f00c fd0a 	bl	8011748 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2264      	movs	r2, #100	; 0x64
 8004d38:	fb03 f202 	mul.w	r2, r3, r2
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <get_timestamp+0x9c>)
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	7b7a      	ldrb	r2, [r7, #13]
 8004d4e:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3302      	adds	r3, #2
 8004d54:	7bba      	ldrb	r2, [r7, #14]
 8004d56:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	7c3a      	ldrb	r2, [r7, #16]
 8004d5e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	7c7a      	ldrb	r2, [r7, #17]
 8004d66:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3305      	adds	r3, #5
 8004d6c:	7cba      	ldrb	r2, [r7, #18]
 8004d6e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	0e1a      	lsrs	r2, r3, #24
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3306      	adds	r3, #6
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	0c1a      	lsrs	r2, r3, #16
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3307      	adds	r3, #7
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	0a1a      	lsrs	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3309      	adds	r3, #9
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3728      	adds	r7, #40	; 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	24001b2c 	.word	0x24001b2c
 8004dac:	000f4240 	.word	0x000f4240

08004db0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004db4:	4b30      	ldr	r3, [pc, #192]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004db6:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <MX_USART1_UART_Init+0xcc>)
 8004db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004dbc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004dce:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004dd6:	220c      	movs	r2, #12
 8004dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dda:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004de6:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004dec:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004df2:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004df8:	481f      	ldr	r0, [pc, #124]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004dfa:	f00e ff6b 	bl	8013cd4 <HAL_UART_Init>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004e04:	f7fe fc6e 	bl	80036e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e08:	2100      	movs	r1, #0
 8004e0a:	481b      	ldr	r0, [pc, #108]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e0c:	f011 fcb1 	bl	8016772 <HAL_UARTEx_SetTxFifoThreshold>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004e16:	f7fe fc65 	bl	80036e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4816      	ldr	r0, [pc, #88]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e1e:	f011 fce6 	bl	80167ee <HAL_UARTEx_SetRxFifoThreshold>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004e28:	f7fe fc5c 	bl	80036e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004e2c:	4812      	ldr	r0, [pc, #72]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e2e:	f011 fc67 	bl	8016700 <HAL_UARTEx_DisableFifoMode>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004e38:	f7fe fc54 	bl	80036e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8004e3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e40:	480d      	ldr	r0, [pc, #52]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e42:	f011 fcd4 	bl	80167ee <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8004e46:	480c      	ldr	r0, [pc, #48]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e48:	f011 fc1f 	bl	801668a <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8004e4c:	480a      	ldr	r0, [pc, #40]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e4e:	f011 fbe9 	bl	8016624 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e60:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <MX_USART1_UART_Init+0xc8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004e70:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	24001e7c 	.word	0x24001e7c
 8004e7c:	40011000 	.word	0x40011000

08004e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b0ba      	sub	sp, #232	; 0xe8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e98:	f107 0310 	add.w	r3, r7, #16
 8004e9c:	22c0      	movs	r2, #192	; 0xc0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f014 ff93 	bl	8019dcc <memset>
  if(uartHandle->Instance==USART1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a41      	ldr	r2, [pc, #260]	; (8004fb0 <HAL_UART_MspInit+0x130>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d17b      	bne.n	8004fa8 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004eb0:	f04f 0201 	mov.w	r2, #1
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8004ebc:	2318      	movs	r3, #24
 8004ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ec2:	f107 0310 	add.w	r3, r7, #16
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f009 fd3c 	bl	800e944 <HAL_RCCEx_PeriphCLKConfig>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004ed2:	f7fe fc07 	bl	80036e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <HAL_UART_MspInit+0x134>)
 8004ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004edc:	4a35      	ldr	r2, [pc, #212]	; (8004fb4 <HAL_UART_MspInit+0x134>)
 8004ede:	f043 0310 	orr.w	r3, r3, #16
 8004ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ee6:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <HAL_UART_MspInit+0x134>)
 8004ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef4:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <HAL_UART_MspInit+0x134>)
 8004ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004efa:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <HAL_UART_MspInit+0x134>)
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <HAL_UART_MspInit+0x134>)
 8004f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004f12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f2c:	2307      	movs	r3, #7
 8004f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f36:	4619      	mov	r1, r3
 8004f38:	481f      	ldr	r0, [pc, #124]	; (8004fb8 <HAL_UART_MspInit+0x138>)
 8004f3a:	f005 febf 	bl	800acbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f40:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <HAL_UART_MspInit+0x140>)
 8004f42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f46:	222a      	movs	r2, #42	; 0x2a
 8004f48:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f4c:	2240      	movs	r2, #64	; 0x40
 8004f4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f56:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004f7c:	480f      	ldr	r0, [pc, #60]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f7e:	f002 fd6d 	bl	8007a5c <HAL_DMA_Init>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004f88:	f7fe fbac 	bl	80036e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f90:	67da      	str	r2, [r3, #124]	; 0x7c
 8004f92:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <HAL_UART_MspInit+0x13c>)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2105      	movs	r1, #5
 8004f9c:	2025      	movs	r0, #37	; 0x25
 8004f9e:	f002 f8b7 	bl	8007110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004fa2:	2025      	movs	r0, #37	; 0x25
 8004fa4:	f002 f8ce 	bl	8007144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004fa8:	bf00      	nop
 8004faa:	37e8      	adds	r7, #232	; 0xe8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40011000 	.word	0x40011000
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	58020000 	.word	0x58020000
 8004fbc:	24001f10 	.word	0x24001f10
 8004fc0:	40020040 	.word	0x40020040

08004fc4 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8004fce:	4bc2      	ldr	r3, [pc, #776]	; (80052d8 <voltage_monitor_init+0x314>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8004fd4:	4bc0      	ldr	r3, [pc, #768]	; (80052d8 <voltage_monitor_init+0x314>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8004fda:	4bbf      	ldr	r3, [pc, #764]	; (80052d8 <voltage_monitor_init+0x314>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8004fe0:	4bbd      	ldr	r3, [pc, #756]	; (80052d8 <voltage_monitor_init+0x314>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004fe6:	4bbc      	ldr	r3, [pc, #752]	; (80052d8 <voltage_monitor_init+0x314>)
 8004fe8:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fec:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8004fee:	4bba      	ldr	r3, [pc, #744]	; (80052d8 <voltage_monitor_init+0x314>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8004ff4:	4bb8      	ldr	r3, [pc, #736]	; (80052d8 <voltage_monitor_init+0x314>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8004ffa:	4bb7      	ldr	r3, [pc, #732]	; (80052d8 <voltage_monitor_init+0x314>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005000:	4bb5      	ldr	r3, [pc, #724]	; (80052d8 <voltage_monitor_init+0x314>)
 8005002:	2201      	movs	r2, #1
 8005004:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8005006:	4bb4      	ldr	r3, [pc, #720]	; (80052d8 <voltage_monitor_init+0x314>)
 8005008:	2200      	movs	r2, #0
 800500a:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 800500c:	4bb2      	ldr	r3, [pc, #712]	; (80052d8 <voltage_monitor_init+0x314>)
 800500e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005012:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8005014:	4bb0      	ldr	r3, [pc, #704]	; (80052d8 <voltage_monitor_init+0x314>)
 8005016:	2200      	movs	r2, #0
 8005018:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800501a:	4baf      	ldr	r3, [pc, #700]	; (80052d8 <voltage_monitor_init+0x314>)
 800501c:	2202      	movs	r2, #2
 800501e:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005020:	4bad      	ldr	r3, [pc, #692]	; (80052d8 <voltage_monitor_init+0x314>)
 8005022:	2200      	movs	r2, #0
 8005024:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8005026:	4bac      	ldr	r3, [pc, #688]	; (80052d8 <voltage_monitor_init+0x314>)
 8005028:	2201      	movs	r2, #1
 800502a:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 800502c:	4baa      	ldr	r3, [pc, #680]	; (80052d8 <voltage_monitor_init+0x314>)
 800502e:	2200      	movs	r2, #0
 8005030:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005032:	4ba9      	ldr	r3, [pc, #676]	; (80052d8 <voltage_monitor_init+0x314>)
 8005034:	f242 7210 	movw	r2, #10000	; 0x2710
 8005038:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 800503a:	4ba7      	ldr	r3, [pc, #668]	; (80052d8 <voltage_monitor_init+0x314>)
 800503c:	2200      	movs	r2, #0
 800503e:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005040:	4ba5      	ldr	r3, [pc, #660]	; (80052d8 <voltage_monitor_init+0x314>)
 8005042:	2203      	movs	r2, #3
 8005044:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8005046:	4ba4      	ldr	r3, [pc, #656]	; (80052d8 <voltage_monitor_init+0x314>)
 8005048:	2200      	movs	r2, #0
 800504a:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 800504c:	4ba2      	ldr	r3, [pc, #648]	; (80052d8 <voltage_monitor_init+0x314>)
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005054:	4ba0      	ldr	r3, [pc, #640]	; (80052d8 <voltage_monitor_init+0x314>)
 8005056:	2200      	movs	r2, #0
 8005058:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800505a:	4b9f      	ldr	r3, [pc, #636]	; (80052d8 <voltage_monitor_init+0x314>)
 800505c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005060:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005062:	4b9d      	ldr	r3, [pc, #628]	; (80052d8 <voltage_monitor_init+0x314>)
 8005064:	2200      	movs	r2, #0
 8005066:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8005068:	4b9b      	ldr	r3, [pc, #620]	; (80052d8 <voltage_monitor_init+0x314>)
 800506a:	2204      	movs	r2, #4
 800506c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005070:	4b99      	ldr	r3, [pc, #612]	; (80052d8 <voltage_monitor_init+0x314>)
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8005078:	4b97      	ldr	r3, [pc, #604]	; (80052d8 <voltage_monitor_init+0x314>)
 800507a:	2201      	movs	r2, #1
 800507c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005080:	4b95      	ldr	r3, [pc, #596]	; (80052d8 <voltage_monitor_init+0x314>)
 8005082:	2200      	movs	r2, #0
 8005084:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005086:	4b94      	ldr	r3, [pc, #592]	; (80052d8 <voltage_monitor_init+0x314>)
 8005088:	f242 7210 	movw	r2, #10000	; 0x2710
 800508c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 800508e:	4b92      	ldr	r3, [pc, #584]	; (80052d8 <voltage_monitor_init+0x314>)
 8005090:	2200      	movs	r2, #0
 8005092:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005094:	4b90      	ldr	r3, [pc, #576]	; (80052d8 <voltage_monitor_init+0x314>)
 8005096:	2205      	movs	r2, #5
 8005098:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 800509c:	4b8e      	ldr	r3, [pc, #568]	; (80052d8 <voltage_monitor_init+0x314>)
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80050a4:	4b8c      	ldr	r3, [pc, #560]	; (80052d8 <voltage_monitor_init+0x314>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 80050ac:	4b8a      	ldr	r3, [pc, #552]	; (80052d8 <voltage_monitor_init+0x314>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050b2:	4b89      	ldr	r3, [pc, #548]	; (80052d8 <voltage_monitor_init+0x314>)
 80050b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80050b8:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 80050ba:	4b87      	ldr	r3, [pc, #540]	; (80052d8 <voltage_monitor_init+0x314>)
 80050bc:	2200      	movs	r2, #0
 80050be:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80050c0:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <voltage_monitor_init+0x314>)
 80050c2:	2206      	movs	r2, #6
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80050c8:	4b83      	ldr	r3, [pc, #524]	; (80052d8 <voltage_monitor_init+0x314>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80050d0:	4b81      	ldr	r3, [pc, #516]	; (80052d8 <voltage_monitor_init+0x314>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80050d8:	4b7f      	ldr	r3, [pc, #508]	; (80052d8 <voltage_monitor_init+0x314>)
 80050da:	2200      	movs	r2, #0
 80050dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80050e0:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <voltage_monitor_init+0x314>)
 80050e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80050e6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80050ea:	4b7b      	ldr	r3, [pc, #492]	; (80052d8 <voltage_monitor_init+0x314>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80050f2:	4b79      	ldr	r3, [pc, #484]	; (80052d8 <voltage_monitor_init+0x314>)
 80050f4:	2207      	movs	r2, #7
 80050f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80050fa:	4b77      	ldr	r3, [pc, #476]	; (80052d8 <voltage_monitor_init+0x314>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8005102:	4b75      	ldr	r3, [pc, #468]	; (80052d8 <voltage_monitor_init+0x314>)
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 800510a:	4b73      	ldr	r3, [pc, #460]	; (80052d8 <voltage_monitor_init+0x314>)
 800510c:	2200      	movs	r2, #0
 800510e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005112:	4b71      	ldr	r3, [pc, #452]	; (80052d8 <voltage_monitor_init+0x314>)
 8005114:	f242 7210 	movw	r2, #10000	; 0x2710
 8005118:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 800511c:	4b6e      	ldr	r3, [pc, #440]	; (80052d8 <voltage_monitor_init+0x314>)
 800511e:	2200      	movs	r2, #0
 8005120:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8005124:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <voltage_monitor_init+0x314>)
 8005126:	2208      	movs	r2, #8
 8005128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 800512c:	4b6a      	ldr	r3, [pc, #424]	; (80052d8 <voltage_monitor_init+0x314>)
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8005134:	4b68      	ldr	r3, [pc, #416]	; (80052d8 <voltage_monitor_init+0x314>)
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 800513c:	4b66      	ldr	r3, [pc, #408]	; (80052d8 <voltage_monitor_init+0x314>)
 800513e:	2200      	movs	r2, #0
 8005140:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8005144:	4b64      	ldr	r3, [pc, #400]	; (80052d8 <voltage_monitor_init+0x314>)
 8005146:	f640 42b9 	movw	r2, #3257	; 0xcb9
 800514a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 800514e:	4b62      	ldr	r3, [pc, #392]	; (80052d8 <voltage_monitor_init+0x314>)
 8005150:	f640 3283 	movw	r2, #2947	; 0xb83
 8005154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005158:	4b5f      	ldr	r3, [pc, #380]	; (80052d8 <voltage_monitor_init+0x314>)
 800515a:	2209      	movs	r2, #9
 800515c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005160:	4b5d      	ldr	r3, [pc, #372]	; (80052d8 <voltage_monitor_init+0x314>)
 8005162:	2200      	movs	r2, #0
 8005164:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005168:	4b5b      	ldr	r3, [pc, #364]	; (80052d8 <voltage_monitor_init+0x314>)
 800516a:	2200      	movs	r2, #0
 800516c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005170:	4b59      	ldr	r3, [pc, #356]	; (80052d8 <voltage_monitor_init+0x314>)
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8005178:	4b57      	ldr	r3, [pc, #348]	; (80052d8 <voltage_monitor_init+0x314>)
 800517a:	f640 7245 	movw	r2, #3909	; 0xf45
 800517e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005182:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <voltage_monitor_init+0x314>)
 8005184:	2200      	movs	r2, #0
 8005186:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800518a:	4b53      	ldr	r3, [pc, #332]	; (80052d8 <voltage_monitor_init+0x314>)
 800518c:	220a      	movs	r2, #10
 800518e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005192:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <voltage_monitor_init+0x314>)
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800519a:	4b4f      	ldr	r3, [pc, #316]	; (80052d8 <voltage_monitor_init+0x314>)
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 80051a2:	4b4d      	ldr	r3, [pc, #308]	; (80052d8 <voltage_monitor_init+0x314>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 80051aa:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <voltage_monitor_init+0x314>)
 80051ac:	f640 7245 	movw	r2, #3909	; 0xf45
 80051b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 80051b4:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <voltage_monitor_init+0x314>)
 80051b6:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80051ba:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80051be:	4b46      	ldr	r3, [pc, #280]	; (80052d8 <voltage_monitor_init+0x314>)
 80051c0:	220b      	movs	r2, #11
 80051c2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80051c6:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <voltage_monitor_init+0x314>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80051ce:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <voltage_monitor_init+0x314>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80051d6:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <voltage_monitor_init+0x314>)
 80051d8:	2200      	movs	r2, #0
 80051da:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80051de:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <voltage_monitor_init+0x314>)
 80051e0:	f640 72fb 	movw	r2, #4091	; 0xffb
 80051e4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80051e8:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <voltage_monitor_init+0x314>)
 80051ea:	f640 6276 	movw	r2, #3702	; 0xe76
 80051ee:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80051f2:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <voltage_monitor_init+0x314>)
 80051f4:	220c      	movs	r2, #12
 80051f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80051fa:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <voltage_monitor_init+0x314>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005202:	4b35      	ldr	r3, [pc, #212]	; (80052d8 <voltage_monitor_init+0x314>)
 8005204:	2200      	movs	r2, #0
 8005206:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 800520a:	4b33      	ldr	r3, [pc, #204]	; (80052d8 <voltage_monitor_init+0x314>)
 800520c:	2200      	movs	r2, #0
 800520e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8005212:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <voltage_monitor_init+0x314>)
 8005214:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005218:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 800521c:	4b2e      	ldr	r3, [pc, #184]	; (80052d8 <voltage_monitor_init+0x314>)
 800521e:	2200      	movs	r2, #0
 8005220:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005224:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <voltage_monitor_init+0x314>)
 8005226:	220d      	movs	r2, #13
 8005228:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 800522c:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <voltage_monitor_init+0x314>)
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005234:	4b28      	ldr	r3, [pc, #160]	; (80052d8 <voltage_monitor_init+0x314>)
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 800523c:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <voltage_monitor_init+0x314>)
 800523e:	2200      	movs	r2, #0
 8005240:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005244:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <voltage_monitor_init+0x314>)
 8005246:	f640 7238 	movw	r2, #3896	; 0xf38
 800524a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <voltage_monitor_init+0x314>)
 8005250:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005254:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <voltage_monitor_init+0x314>)
 800525a:	220e      	movs	r2, #14
 800525c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <voltage_monitor_init+0x314>)
 8005262:	2200      	movs	r2, #0
 8005264:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <voltage_monitor_init+0x314>)
 800526a:	2200      	movs	r2, #0
 800526c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <voltage_monitor_init+0x314>)
 8005272:	2200      	movs	r2, #0
 8005274:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <voltage_monitor_init+0x314>)
 800527a:	f640 7245 	movw	r2, #3909	; 0xf45
 800527e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <voltage_monitor_init+0x314>)
 8005284:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005288:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800528c:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <voltage_monitor_init+0x314>)
 800528e:	220f      	movs	r2, #15
 8005290:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <voltage_monitor_init+0x314>)
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 800529c:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <voltage_monitor_init+0x314>)
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <voltage_monitor_init+0x314>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <voltage_monitor_init+0x314>)
 80052ae:	f241 0264 	movw	r2, #4196	; 0x1064
 80052b2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <voltage_monitor_init+0x314>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <voltage_monitor_init+0x314>)
 80052c0:	2210      	movs	r2, #16
 80052c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <voltage_monitor_init+0x314>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80052ce:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <voltage_monitor_init+0x314>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80052d6:	e001      	b.n	80052dc <voltage_monitor_init+0x318>
 80052d8:	24001f88 	.word	0x24001f88
	rail_monitor[RAIL_n800v].data = 0;
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <voltage_monitor_init+0x378>)
 80052de:	2200      	movs	r2, #0
 80052e0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80052e4:	4b15      	ldr	r3, [pc, #84]	; (800533c <voltage_monitor_init+0x378>)
 80052e6:	f640 5208 	movw	r2, #3336	; 0xd08
 80052ea:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <voltage_monitor_init+0x378>)
 80052f0:	f640 32ca 	movw	r2, #3018	; 0xbca
 80052f4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80052f8:	4b10      	ldr	r3, [pc, #64]	; (800533c <voltage_monitor_init+0x378>)
 80052fa:	2211      	movs	r2, #17
 80052fc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <voltage_monitor_init+0x378>)
 8005302:	2200      	movs	r2, #0
 8005304:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <voltage_monitor_init+0x378>)
 800530a:	2201      	movs	r2, #1
 800530c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <voltage_monitor_init+0x378>)
 8005312:	2200      	movs	r2, #0
 8005314:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <voltage_monitor_init+0x378>)
 800531a:	f242 7210 	movw	r2, #10000	; 0x2710
 800531e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <voltage_monitor_init+0x378>)
 8005324:	2200      	movs	r2, #0
 8005326:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	71fb      	strb	r3, [r7, #7]

	return status;
 800532e:	79fb      	ldrb	r3, [r7, #7]
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	24001f88 	.word	0x24001f88

08005340 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	460a      	mov	r2, r1
 800534a:	71fb      	strb	r3, [r7, #7]
 800534c:	4613      	mov	r3, r2
 800534e:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005354:	79fa      	ldrb	r2, [r7, #7]
 8005356:	4909      	ldr	r1, [pc, #36]	; (800537c <set_rail_monitor_enable+0x3c>)
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	440b      	add	r3, r1
 8005362:	3302      	adds	r3, #2
 8005364:	79ba      	ldrb	r2, [r7, #6]
 8005366:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]

	return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	24001f88 	.word	0x24001f88

08005380 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 800538c:	463b      	mov	r3, r7
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fcf6 	bl	8003d80 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005394:	f107 0310 	add.w	r3, r7, #16
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe fd21 	bl	8003de0 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 800539e:	f107 0308 	add.w	r3, r7, #8
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fd6e 	bl	8003e84 <sample_hk_adc3>
 80053a8:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 80053aa:	4b25      	ldr	r3, [pc, #148]	; (8005440 <set_rail_monitor+0xc0>)
 80053ac:	809a      	strh	r2, [r3, #4]
 80053ae:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <set_rail_monitor+0xc0>)
 80053b2:	81da      	strh	r2, [r3, #14]
 80053b4:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 80053b6:	4b22      	ldr	r3, [pc, #136]	; (8005440 <set_rail_monitor+0xc0>)
 80053b8:	831a      	strh	r2, [r3, #24]
 80053ba:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 80053bc:	4b20      	ldr	r3, [pc, #128]	; (8005440 <set_rail_monitor+0xc0>)
 80053be:	845a      	strh	r2, [r3, #34]	; 0x22
 80053c0:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 80053c2:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <set_rail_monitor+0xc0>)
 80053c4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80053c6:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <set_rail_monitor+0xc0>)
 80053ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80053cc:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 80053ce:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <set_rail_monitor+0xc0>)
 80053d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80053d4:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <set_rail_monitor+0xc0>)
 80053d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80053dc:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <set_rail_monitor+0xc0>)
 80053e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80053e4:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <set_rail_monitor+0xc0>)
 80053e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80053ec:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80053ee:	4b14      	ldr	r3, [pc, #80]	; (8005440 <set_rail_monitor+0xc0>)
 80053f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80053f4:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <set_rail_monitor+0xc0>)
 80053f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80053fc:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <set_rail_monitor+0xc0>)
 8005400:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005404:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005406:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <set_rail_monitor+0xc0>)
 8005408:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800540c:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <set_rail_monitor+0xc0>)
 8005410:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005414:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <set_rail_monitor+0xc0>)
 8005418:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800541c:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 800541e:	4b08      	ldr	r3, [pc, #32]	; (8005440 <set_rail_monitor+0xc0>)
 8005420:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005424:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <set_rail_monitor+0xc0>)
 8005428:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005436:	4618      	mov	r0, r3
 8005438:	3728      	adds	r7, #40	; 0x28
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	24001f88 	.word	0x24001f88

08005444 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <get_rail_monitor+0x10>)
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	24001f88 	.word	0x24001f88

08005458 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005466:	89fb      	ldrh	r3, [r7, #14]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	db05      	blt.n	800547a <in_range+0x22>
 800546e:	89fb      	ldrh	r3, [r7, #14]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	dc01      	bgt.n	800547a <in_range+0x22>
		return 1;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <in_range+0x24>
	}
	return 0;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <monitor_rails>:


void monitor_rails() {
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	e062      	b.n	800555a <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005494:	4935      	ldr	r1, [pc, #212]	; (800556c <monitor_rails+0xe4>)
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	440b      	add	r3, r1
 80054a2:	3302      	adds	r3, #2
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d054      	beq.n	8005554 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 80054aa:	4930      	ldr	r1, [pc, #192]	; (800556c <monitor_rails+0xe4>)
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	440b      	add	r3, r1
 80054b8:	3304      	adds	r3, #4
 80054ba:	8818      	ldrh	r0, [r3, #0]
 80054bc:	492b      	ldr	r1, [pc, #172]	; (800556c <monitor_rails+0xe4>)
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	440b      	add	r3, r1
 80054ca:	3308      	adds	r3, #8
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	461c      	mov	r4, r3
 80054d0:	4926      	ldr	r1, [pc, #152]	; (800556c <monitor_rails+0xe4>)
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	440b      	add	r3, r1
 80054de:	3306      	adds	r3, #6
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	4621      	mov	r1, r4
 80054e6:	f7ff ffb7 	bl	8005458 <in_range>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d131      	bne.n	8005554 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80054f0:	491e      	ldr	r1, [pc, #120]	; (800556c <monitor_rails+0xe4>)
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	440b      	add	r3, r1
 80054fe:	3301      	adds	r3, #1
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	b2d8      	uxtb	r0, r3
 8005506:	4919      	ldr	r1, [pc, #100]	; (800556c <monitor_rails+0xe4>)
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	440b      	add	r3, r1
 8005514:	3301      	adds	r3, #1
 8005516:	4602      	mov	r2, r0
 8005518:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 800551a:	4914      	ldr	r1, [pc, #80]	; (800556c <monitor_rails+0xe4>)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	440b      	add	r3, r1
 8005528:	3301      	adds	r3, #1
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d111      	bne.n	8005554 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005530:	490e      	ldr	r1, [pc, #56]	; (800556c <monitor_rails+0xe4>)
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	440b      	add	r3, r1
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 f815 	bl	8005570 <get_rail_name_error_detail>
 8005546:	4603      	mov	r3, r0
 8005548:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 800554a:	2300      	movs	r3, #0
 800554c:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 800554e:	6838      	ldr	r0, [r7, #0]
 8005550:	f7fc fcee 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3301      	adds	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b11      	cmp	r3, #17
 800555e:	dd99      	ble.n	8005494 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	24001f88 	.word	0x24001f88

08005570 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	2b11      	cmp	r3, #17
 800557e:	d84b      	bhi.n	8005618 <get_rail_name_error_detail+0xa8>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <get_rail_name_error_detail+0x18>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055d1 	.word	0x080055d1
 800558c:	080055d5 	.word	0x080055d5
 8005590:	080055d9 	.word	0x080055d9
 8005594:	080055dd 	.word	0x080055dd
 8005598:	080055e1 	.word	0x080055e1
 800559c:	080055e5 	.word	0x080055e5
 80055a0:	080055e9 	.word	0x080055e9
 80055a4:	080055ed 	.word	0x080055ed
 80055a8:	080055f1 	.word	0x080055f1
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	08005601 	.word	0x08005601
 80055bc:	08005605 	.word	0x08005605
 80055c0:	08005609 	.word	0x08005609
 80055c4:	0800560d 	.word	0x0800560d
 80055c8:	08005611 	.word	0x08005611
 80055cc:	08005615 	.word	0x08005615
	case RAIL_vsense:
		return ED_vsense;
 80055d0:	2306      	movs	r3, #6
 80055d2:	e022      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 80055d4:	2307      	movs	r3, #7
 80055d6:	e020      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80055d8:	2308      	movs	r3, #8
 80055da:	e01e      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80055dc:	2309      	movs	r3, #9
 80055de:	e01c      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80055e0:	230a      	movs	r3, #10
 80055e2:	e01a      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80055e4:	230b      	movs	r3, #11
 80055e6:	e018      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80055e8:	230c      	movs	r3, #12
 80055ea:	e016      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80055ec:	230d      	movs	r3, #13
 80055ee:	e014      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80055f0:	230e      	movs	r3, #14
 80055f2:	e012      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80055f4:	230f      	movs	r3, #15
 80055f6:	e010      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80055f8:	2310      	movs	r3, #16
 80055fa:	e00e      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80055fc:	2311      	movs	r3, #17
 80055fe:	e00c      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005600:	2312      	movs	r3, #18
 8005602:	e00a      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005604:	2313      	movs	r3, #19
 8005606:	e008      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005608:	2314      	movs	r3, #20
 800560a:	e006      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 800560c:	2315      	movs	r3, #21
 800560e:	e004      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005610:	2316      	movs	r3, #22
 8005612:	e002      	b.n	800561a <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005614:	2317      	movs	r3, #23
 8005616:	e000      	b.n	800561a <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005618:	231a      	movs	r3, #26
	}
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop

08005628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800562c:	f7ff f8b2 	bl	8004794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005630:	480c      	ldr	r0, [pc, #48]	; (8005664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005632:	490d      	ldr	r1, [pc, #52]	; (8005668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005634:	4a0d      	ldr	r2, [pc, #52]	; (800566c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005638:	e002      	b.n	8005640 <LoopCopyDataInit>

0800563a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800563a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800563c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800563e:	3304      	adds	r3, #4

08005640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005644:	d3f9      	bcc.n	800563a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005646:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005648:	4c0a      	ldr	r4, [pc, #40]	; (8005674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800564a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800564c:	e001      	b.n	8005652 <LoopFillZerobss>

0800564e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800564e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005650:	3204      	adds	r2, #4

08005652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005654:	d3fb      	bcc.n	800564e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005656:	f014 fb87 	bl	8019d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800565a:	f7fd fdb7 	bl	80031cc <main>
  bx  lr
 800565e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005660:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005664:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005668:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 800566c:	0801ac98 	.word	0x0801ac98
  ldr r2, =_sbss
 8005670:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005674:	240069bc 	.word	0x240069bc

08005678 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005678:	e7fe      	b.n	8005678 <ADC3_IRQHandler>
	...

0800567c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005682:	2003      	movs	r0, #3
 8005684:	f001 fd39 	bl	80070fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005688:	f008 ff44 	bl	800e514 <HAL_RCC_GetSysClockFreq>
 800568c:	4602      	mov	r2, r0
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <HAL_Init+0x68>)
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	4913      	ldr	r1, [pc, #76]	; (80056e8 <HAL_Init+0x6c>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <HAL_Init+0x68>)
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <HAL_Init+0x6c>)
 80056b0:	5cd3      	ldrb	r3, [r2, r3]
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <HAL_Init+0x70>)
 80056be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056c0:	4a0b      	ldr	r2, [pc, #44]	; (80056f0 <HAL_Init+0x74>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056c6:	2005      	movs	r0, #5
 80056c8:	f7fe fe4e 	bl	8004368 <HAL_InitTick>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e002      	b.n	80056dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80056d6:	f7fe fe29 	bl	800432c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	58024400 	.word	0x58024400
 80056e8:	0801abe4 	.word	0x0801abe4
 80056ec:	240000c0 	.word	0x240000c0
 80056f0:	240000bc 	.word	0x240000bc

080056f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_IncTick+0x20>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_IncTick+0x24>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4413      	add	r3, r2
 8005704:	4a04      	ldr	r2, [pc, #16]	; (8005718 <HAL_IncTick+0x24>)
 8005706:	6013      	str	r3, [r2, #0]
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	240000c8 	.word	0x240000c8
 8005718:	2400203c 	.word	0x2400203c

0800571c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  return uwTick;
 8005720:	4b03      	ldr	r3, [pc, #12]	; (8005730 <HAL_GetTick+0x14>)
 8005722:	681b      	ldr	r3, [r3, #0]
}
 8005724:	4618      	mov	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	2400203c 	.word	0x2400203c

08005734 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <HAL_GetREVID+0x14>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0c1b      	lsrs	r3, r3, #16
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	5c001000 	.word	0x5c001000

0800574c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	43db      	mvns	r3, r3
 800575e:	401a      	ands	r2, r3
 8005760:	4904      	ldr	r1, [pc, #16]	; (8005774 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	4313      	orrs	r3, r2
 8005766:	604b      	str	r3, [r1, #4]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	58000400 	.word	0x58000400

08005778 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	609a      	str	r2, [r3, #8]
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3360      	adds	r3, #96	; 0x60
 80057f2:	461a      	mov	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	430b      	orrs	r3, r1
 800580e:	431a      	orrs	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	611a      	str	r2, [r3, #16]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005852:	b480      	push	{r7}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3360      	adds	r3, #96	; 0x60
 8005862:	461a      	mov	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	431a      	orrs	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	601a      	str	r2, [r3, #0]
  }
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b087      	sub	sp, #28
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3330      	adds	r3, #48	; 0x30
 80058be:	461a      	mov	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	0a1b      	lsrs	r3, r3, #8
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	4413      	add	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	211f      	movs	r1, #31
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	401a      	ands	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	0e9b      	lsrs	r3, r3, #26
 80058e6:	f003 011f 	and.w	r1, r3, #31
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	431a      	orrs	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f023 0203 	bic.w	r2, r3, #3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3314      	adds	r3, #20
 800593c:	461a      	mov	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0e5b      	lsrs	r3, r3, #25
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	4413      	add	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	0d1b      	lsrs	r3, r3, #20
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2107      	movs	r1, #7
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	401a      	ands	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	0d1b      	lsrs	r3, r3, #20
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	431a      	orrs	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800599c:	43db      	mvns	r3, r3
 800599e:	401a      	ands	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f003 0318 	and.w	r3, r3, #24
 80059a6:	4908      	ldr	r1, [pc, #32]	; (80059c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80059a8:	40d9      	lsrs	r1, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	400b      	ands	r3, r1
 80059ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059b2:	431a      	orrs	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	000fffff 	.word	0x000fffff

080059cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 031f 	and.w	r3, r3, #31
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <LL_ADC_DisableDeepPowerDown+0x20>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6093      	str	r3, [r2, #8]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	5fffffc0 	.word	0x5fffffc0

08005a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a20:	d101      	bne.n	8005a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <LL_ADC_EnableInternalRegulator+0x24>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	6fffffc0 	.word	0x6fffffc0

08005a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a70:	d101      	bne.n	8005a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <LL_ADC_Enable+0x24>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	f043 0201 	orr.w	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	7fffffc0 	.word	0x7fffffc0

08005aac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <LL_ADC_Disable+0x24>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	f043 0202 	orr.w	r2, r3, #2
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	7fffffc0 	.word	0x7fffffc0

08005ad4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <LL_ADC_IsEnabled+0x18>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <LL_ADC_IsEnabled+0x1a>
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d101      	bne.n	8005b12 <LL_ADC_IsDisableOngoing+0x18>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <LL_ADC_IsDisableOngoing+0x1a>
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <LL_ADC_REG_StartConversion+0x24>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	7fffffc0 	.word	0x7fffffc0

08005b48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d101      	bne.n	8005b60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d101      	bne.n	8005b86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e18f      	b.n	8005ece <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7fa fec5 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff ff19 	bl	8005a0c <LL_ADC_IsDeepPowerDownEnabled>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff feff 	bl	80059e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ff34 	bl	8005a5c <LL_ADC_IsInternalRegulatorEnabled>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d114      	bne.n	8005c24 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff ff18 	bl	8005a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c04:	4b87      	ldr	r3, [pc, #540]	; (8005e24 <HAL_ADC_Init+0x290>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	099b      	lsrs	r3, r3, #6
 8005c0a:	4a87      	ldr	r2, [pc, #540]	; (8005e28 <HAL_ADC_Init+0x294>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	099b      	lsrs	r3, r3, #6
 8005c12:	3301      	adds	r3, #1
 8005c14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c16:	e002      	b.n	8005c1e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f9      	bne.n	8005c18 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ff17 	bl	8005a5c <LL_ADC_IsInternalRegulatorEnabled>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f043 0210 	orr.w	r2, r3, #16
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c44:	f043 0201 	orr.w	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff77 	bl	8005b48 <LL_ADC_REG_IsConversionOngoing>
 8005c5a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8129 	bne.w	8005ebc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 8125 	bne.w	8005ebc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c7a:	f043 0202 	orr.w	r2, r3, #2
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff ff24 	bl	8005ad4 <LL_ADC_IsEnabled>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d136      	bne.n	8005d00 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a65      	ldr	r2, [pc, #404]	; (8005e2c <HAL_ADC_Init+0x298>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_ADC_Init+0x112>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a63      	ldr	r2, [pc, #396]	; (8005e30 <HAL_ADC_Init+0x29c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d10e      	bne.n	8005cc4 <HAL_ADC_Init+0x130>
 8005ca6:	4861      	ldr	r0, [pc, #388]	; (8005e2c <HAL_ADC_Init+0x298>)
 8005ca8:	f7ff ff14 	bl	8005ad4 <LL_ADC_IsEnabled>
 8005cac:	4604      	mov	r4, r0
 8005cae:	4860      	ldr	r0, [pc, #384]	; (8005e30 <HAL_ADC_Init+0x29c>)
 8005cb0:	f7ff ff10 	bl	8005ad4 <LL_ADC_IsEnabled>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4323      	orrs	r3, r4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf0c      	ite	eq
 8005cbc:	2301      	moveq	r3, #1
 8005cbe:	2300      	movne	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e008      	b.n	8005cd6 <HAL_ADC_Init+0x142>
 8005cc4:	485b      	ldr	r0, [pc, #364]	; (8005e34 <HAL_ADC_Init+0x2a0>)
 8005cc6:	f7ff ff05 	bl	8005ad4 <LL_ADC_IsEnabled>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d012      	beq.n	8005d00 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a53      	ldr	r2, [pc, #332]	; (8005e2c <HAL_ADC_Init+0x298>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_ADC_Init+0x15a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a51      	ldr	r2, [pc, #324]	; (8005e30 <HAL_ADC_Init+0x29c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d101      	bne.n	8005cf2 <HAL_ADC_Init+0x15e>
 8005cee:	4a52      	ldr	r2, [pc, #328]	; (8005e38 <HAL_ADC_Init+0x2a4>)
 8005cf0:	e000      	b.n	8005cf4 <HAL_ADC_Init+0x160>
 8005cf2:	4a52      	ldr	r2, [pc, #328]	; (8005e3c <HAL_ADC_Init+0x2a8>)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7ff fd3c 	bl	8005778 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005d00:	f7ff fd18 	bl	8005734 <HAL_GetREVID>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d914      	bls.n	8005d38 <HAL_ADC_Init+0x1a4>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d110      	bne.n	8005d38 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7d5b      	ldrb	r3, [r3, #21]
 8005d1a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d20:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005d26:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7f1b      	ldrb	r3, [r3, #28]
 8005d2c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005d2e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d30:	f043 030c 	orr.w	r3, r3, #12
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	e00d      	b.n	8005d54 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7d5b      	ldrb	r3, [r3, #21]
 8005d3c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d42:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005d48:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7f1b      	ldrb	r3, [r3, #28]
 8005d4e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7f1b      	ldrb	r3, [r3, #28]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d106      	bne.n	8005d6a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	045b      	lsls	r3, r3, #17
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	4b2c      	ldr	r3, [pc, #176]	; (8005e40 <HAL_ADC_Init+0x2ac>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	430b      	orrs	r3, r1
 8005d98:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fed2 	bl	8005b48 <LL_ADC_REG_IsConversionOngoing>
 8005da4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fedf 	bl	8005b6e <LL_ADC_INJ_IsConversionOngoing>
 8005db0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d15f      	bne.n	8005e78 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d15c      	bne.n	8005e78 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7d1b      	ldrb	r3, [r3, #20]
 8005dc2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <HAL_ADC_Init+0x2b0>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d130      	bne.n	8005e4c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <HAL_ADC_Init+0x2b4>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dfe:	3a01      	subs	r2, #1
 8005e00:	0411      	lsls	r1, r2, #16
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e06:	4311      	orrs	r1, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e12:	430a      	orrs	r2, r1
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	611a      	str	r2, [r3, #16]
 8005e20:	e01c      	b.n	8005e5c <HAL_ADC_Init+0x2c8>
 8005e22:	bf00      	nop
 8005e24:	240000bc 	.word	0x240000bc
 8005e28:	053e2d63 	.word	0x053e2d63
 8005e2c:	40022000 	.word	0x40022000
 8005e30:	40022100 	.word	0x40022100
 8005e34:	58026000 	.word	0x58026000
 8005e38:	40022300 	.word	0x40022300
 8005e3c:	58026300 	.word	0x58026300
 8005e40:	fff0c003 	.word	0xfff0c003
 8005e44:	ffffbffc 	.word	0xffffbffc
 8005e48:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fdec 	bl	8006a50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10c      	bne.n	8005e9a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f023 010f 	bic.w	r1, r3, #15
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
 8005e98:	e007      	b.n	8005eaa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 020f 	bic.w	r2, r2, #15
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	f043 0201 	orr.w	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	655a      	str	r2, [r3, #84]	; 0x54
 8005eba:	e007      	b.n	8005ecc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f043 0210 	orr.w	r2, r3, #16
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3724      	adds	r7, #36	; 0x24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd90      	pop	{r4, r7, pc}
 8005ed6:	bf00      	nop

08005ed8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a55      	ldr	r2, [pc, #340]	; (8006040 <HAL_ADC_Start_DMA+0x168>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_ADC_Start_DMA+0x20>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a54      	ldr	r2, [pc, #336]	; (8006044 <HAL_ADC_Start_DMA+0x16c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_ADC_Start_DMA+0x24>
 8005ef8:	4b53      	ldr	r3, [pc, #332]	; (8006048 <HAL_ADC_Start_DMA+0x170>)
 8005efa:	e000      	b.n	8005efe <HAL_ADC_Start_DMA+0x26>
 8005efc:	4b53      	ldr	r3, [pc, #332]	; (800604c <HAL_ADC_Start_DMA+0x174>)
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fd64 	bl	80059cc <LL_ADC_GetMultimode>
 8005f04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fe1c 	bl	8005b48 <LL_ADC_REG_IsConversionOngoing>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 808c 	bne.w	8006030 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_ADC_Start_DMA+0x4e>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e087      	b.n	8006036 <HAL_ADC_Start_DMA+0x15e>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d002      	beq.n	8005f40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b09      	cmp	r3, #9
 8005f3e:	d170      	bne.n	8006022 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fc07 	bl	8006754 <ADC_Enable>
 8005f46:	4603      	mov	r3, r0
 8005f48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d163      	bne.n	8006018 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f54:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <HAL_ADC_Start_DMA+0x178>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a37      	ldr	r2, [pc, #220]	; (8006044 <HAL_ADC_Start_DMA+0x16c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d002      	beq.n	8005f70 <HAL_ADC_Start_DMA+0x98>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	e000      	b.n	8005f72 <HAL_ADC_Start_DMA+0x9a>
 8005f70:	4b33      	ldr	r3, [pc, #204]	; (8006040 <HAL_ADC_Start_DMA+0x168>)
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d002      	beq.n	8005f80 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	f023 0206 	bic.w	r2, r3, #6
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8005fa4:	e002      	b.n	8005fac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb0:	4a28      	ldr	r2, [pc, #160]	; (8006054 <HAL_ADC_Start_DMA+0x17c>)
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb8:	4a27      	ldr	r2, [pc, #156]	; (8006058 <HAL_ADC_Start_DMA+0x180>)
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc0:	4a26      	ldr	r2, [pc, #152]	; (800605c <HAL_ADC_Start_DMA+0x184>)
 8005fc2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	221c      	movs	r2, #28
 8005fca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0210 	orr.w	r2, r2, #16
 8005fe2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7ff fc89 	bl	8005906 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3340      	adds	r3, #64	; 0x40
 8005ffe:	4619      	mov	r1, r3
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f002 f886 	bl	8008114 <HAL_DMA_Start_IT>
 8006008:	4603      	mov	r3, r0
 800600a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff fd85 	bl	8005b20 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006016:	e00d      	b.n	8006034 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006020:	e008      	b.n	8006034 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800602e:	e001      	b.n	8006034 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006030:	2302      	movs	r3, #2
 8006032:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40022000 	.word	0x40022000
 8006044:	40022100 	.word	0x40022100
 8006048:	40022300 	.word	0x40022300
 800604c:	58026300 	.word	0x58026300
 8006050:	fffff0fe 	.word	0xfffff0fe
 8006054:	08006927 	.word	0x08006927
 8006058:	080069ff 	.word	0x080069ff
 800605c:	08006a1b 	.word	0x08006a1b

08006060 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800609c:	b590      	push	{r4, r7, lr}
 800609e:	b0a1      	sub	sp, #132	; 0x84
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4a65      	ldr	r2, [pc, #404]	; (800624c <HAL_ADC_ConfigChannel+0x1b0>)
 80060b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x2a>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e32e      	b.n	8006724 <HAL_ADC_ConfigChannel+0x688>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fd38 	bl	8005b48 <LL_ADC_REG_IsConversionOngoing>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 8313 	bne.w	8006706 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	db2c      	blt.n	8006142 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d108      	bne.n	8006106 <HAL_ADC_ConfigChannel+0x6a>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	0e9b      	lsrs	r3, r3, #26
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2201      	movs	r2, #1
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	e016      	b.n	8006134 <HAL_ADC_ConfigChannel+0x98>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610e:	fa93 f3a3 	rbit	r3, r3
 8006112:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006114:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006116:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800611e:	2320      	movs	r3, #32
 8006120:	e003      	b.n	800612a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006124:	fab3 f383 	clz	r3, r3
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2201      	movs	r2, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	69d1      	ldr	r1, [r2, #28]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	430b      	orrs	r3, r1
 8006140:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	f7ff fbad 	bl	80058ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fcf5 	bl	8005b48 <LL_ADC_REG_IsConversionOngoing>
 800615e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fd02 	bl	8005b6e <LL_ADC_INJ_IsConversionOngoing>
 800616a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800616c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 80b8 	bne.w	80062e4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006176:	2b00      	cmp	r3, #0
 8006178:	f040 80b4 	bne.w	80062e4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	461a      	mov	r2, r3
 800618a:	f7ff fbcf 	bl	800592c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800618e:	4b30      	ldr	r3, [pc, #192]	; (8006250 <HAL_ADC_ConfigChannel+0x1b4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800619a:	d10b      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0x118>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695a      	ldr	r2, [r3, #20]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	e01d      	b.n	80061f0 <HAL_ADC_ConfigChannel+0x154>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <HAL_ADC_ConfigChannel+0x13e>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	089b      	lsrs	r3, r3, #2
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	e00a      	b.n	80061f0 <HAL_ADC_ConfigChannel+0x154>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695a      	ldr	r2, [r3, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	089b      	lsrs	r3, r3, #2
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d02c      	beq.n	8006254 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6919      	ldr	r1, [r3, #16]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006208:	f7ff faea 	bl	80057e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	6919      	ldr	r1, [r3, #16]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	7e5b      	ldrb	r3, [r3, #25]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d102      	bne.n	8006222 <HAL_ADC_ConfigChannel+0x186>
 800621c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006220:	e000      	b.n	8006224 <HAL_ADC_ConfigChannel+0x188>
 8006222:	2300      	movs	r3, #0
 8006224:	461a      	mov	r2, r3
 8006226:	f7ff fb14 	bl	8005852 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6919      	ldr	r1, [r3, #16]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	7e1b      	ldrb	r3, [r3, #24]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d102      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x1a4>
 800623a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800623e:	e000      	b.n	8006242 <HAL_ADC_ConfigChannel+0x1a6>
 8006240:	2300      	movs	r3, #0
 8006242:	461a      	mov	r2, r3
 8006244:	f7ff faec 	bl	8005820 <LL_ADC_SetDataRightShift>
 8006248:	e04c      	b.n	80062e4 <HAL_ADC_ConfigChannel+0x248>
 800624a:	bf00      	nop
 800624c:	47ff0000 	.word	0x47ff0000
 8006250:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	069b      	lsls	r3, r3, #26
 8006264:	429a      	cmp	r2, r3
 8006266:	d107      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006276:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800627e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	069b      	lsls	r3, r3, #26
 8006288:	429a      	cmp	r2, r3
 800628a:	d107      	bne.n	800629c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800629a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	069b      	lsls	r3, r3, #26
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d107      	bne.n	80062c0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062be:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	069b      	lsls	r3, r3, #26
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d107      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fbf3 	bl	8005ad4 <LL_ADC_IsEnabled>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 8211 	bne.w	8006718 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6819      	ldr	r1, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	461a      	mov	r2, r3
 8006304:	f7ff fb3e 	bl	8005984 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	4aa1      	ldr	r2, [pc, #644]	; (8006594 <HAL_ADC_ConfigChannel+0x4f8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	f040 812e 	bne.w	8006570 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <HAL_ADC_ConfigChannel+0x2a0>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	0e9b      	lsrs	r3, r3, #26
 800632a:	3301      	adds	r3, #1
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	2b09      	cmp	r3, #9
 8006332:	bf94      	ite	ls
 8006334:	2301      	movls	r3, #1
 8006336:	2300      	movhi	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	e019      	b.n	8006370 <HAL_ADC_ConfigChannel+0x2d4>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006344:	fa93 f3a3 	rbit	r3, r3
 8006348:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800634e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006354:	2320      	movs	r3, #32
 8006356:	e003      	b.n	8006360 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800635a:	fab3 f383 	clz	r3, r3
 800635e:	b2db      	uxtb	r3, r3
 8006360:	3301      	adds	r3, #1
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2b09      	cmp	r3, #9
 8006368:	bf94      	ite	ls
 800636a:	2301      	movls	r3, #1
 800636c:	2300      	movhi	r3, #0
 800636e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006370:	2b00      	cmp	r3, #0
 8006372:	d079      	beq.n	8006468 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800637c:	2b00      	cmp	r3, #0
 800637e:	d107      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x2f4>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	0e9b      	lsrs	r3, r3, #26
 8006386:	3301      	adds	r3, #1
 8006388:	069b      	lsls	r3, r3, #26
 800638a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800638e:	e015      	b.n	80063bc <HAL_ADC_ConfigChannel+0x320>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800639e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80063a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80063a8:	2320      	movs	r3, #32
 80063aa:	e003      	b.n	80063b4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80063ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ae:	fab3 f383 	clz	r3, r3
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	3301      	adds	r3, #1
 80063b6:	069b      	lsls	r3, r3, #26
 80063b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d109      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x340>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	0e9b      	lsrs	r3, r3, #26
 80063ce:	3301      	adds	r3, #1
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2101      	movs	r1, #1
 80063d6:	fa01 f303 	lsl.w	r3, r1, r3
 80063da:	e017      	b.n	800640c <HAL_ADC_ConfigChannel+0x370>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e4:	fa93 f3a3 	rbit	r3, r3
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80063ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80063ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80063f4:	2320      	movs	r3, #32
 80063f6:	e003      	b.n	8006400 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80063f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fa:	fab3 f383 	clz	r3, r3
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	3301      	adds	r3, #1
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2101      	movs	r1, #1
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	ea42 0103 	orr.w	r1, r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <HAL_ADC_ConfigChannel+0x396>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	0e9b      	lsrs	r3, r3, #26
 8006422:	3301      	adds	r3, #1
 8006424:	f003 021f 	and.w	r2, r3, #31
 8006428:	4613      	mov	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	4413      	add	r3, r2
 800642e:	051b      	lsls	r3, r3, #20
 8006430:	e018      	b.n	8006464 <HAL_ADC_ConfigChannel+0x3c8>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800644a:	2320      	movs	r3, #32
 800644c:	e003      	b.n	8006456 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	fab3 f383 	clz	r3, r3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	3301      	adds	r3, #1
 8006458:	f003 021f 	and.w	r2, r3, #31
 800645c:	4613      	mov	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4413      	add	r3, r2
 8006462:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006464:	430b      	orrs	r3, r1
 8006466:	e07e      	b.n	8006566 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006470:	2b00      	cmp	r3, #0
 8006472:	d107      	bne.n	8006484 <HAL_ADC_ConfigChannel+0x3e8>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	0e9b      	lsrs	r3, r3, #26
 800647a:	3301      	adds	r3, #1
 800647c:	069b      	lsls	r3, r3, #26
 800647e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006482:	e015      	b.n	80064b0 <HAL_ADC_ConfigChannel+0x414>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	fa93 f3a3 	rbit	r3, r3
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800649c:	2320      	movs	r3, #32
 800649e:	e003      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	fab3 f383 	clz	r3, r3
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	3301      	adds	r3, #1
 80064aa:	069b      	lsls	r3, r3, #26
 80064ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x434>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0e9b      	lsrs	r3, r3, #26
 80064c2:	3301      	adds	r3, #1
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	2101      	movs	r1, #1
 80064ca:	fa01 f303 	lsl.w	r3, r1, r3
 80064ce:	e017      	b.n	8006500 <HAL_ADC_ConfigChannel+0x464>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	fa93 f3a3 	rbit	r3, r3
 80064dc:	61bb      	str	r3, [r7, #24]
  return result;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80064e8:	2320      	movs	r3, #32
 80064ea:	e003      	b.n	80064f4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	fab3 f383 	clz	r3, r3
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	3301      	adds	r3, #1
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2101      	movs	r1, #1
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	ea42 0103 	orr.w	r1, r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10d      	bne.n	800652c <HAL_ADC_ConfigChannel+0x490>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	0e9b      	lsrs	r3, r3, #26
 8006516:	3301      	adds	r3, #1
 8006518:	f003 021f 	and.w	r2, r3, #31
 800651c:	4613      	mov	r3, r2
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	4413      	add	r3, r2
 8006522:	3b1e      	subs	r3, #30
 8006524:	051b      	lsls	r3, r3, #20
 8006526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800652a:	e01b      	b.n	8006564 <HAL_ADC_ConfigChannel+0x4c8>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	fa93 f3a3 	rbit	r3, r3
 8006538:	60fb      	str	r3, [r7, #12]
  return result;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006544:	2320      	movs	r3, #32
 8006546:	e003      	b.n	8006550 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	fab3 f383 	clz	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	3301      	adds	r3, #1
 8006552:	f003 021f 	and.w	r2, r3, #31
 8006556:	4613      	mov	r3, r2
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	4413      	add	r3, r2
 800655c:	3b1e      	subs	r3, #30
 800655e:	051b      	lsls	r3, r3, #20
 8006560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006564:	430b      	orrs	r3, r1
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	6892      	ldr	r2, [r2, #8]
 800656a:	4619      	mov	r1, r3
 800656c:	f7ff f9de 	bl	800592c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f280 80cf 	bge.w	8006718 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a06      	ldr	r2, [pc, #24]	; (8006598 <HAL_ADC_ConfigChannel+0x4fc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d004      	beq.n	800658e <HAL_ADC_ConfigChannel+0x4f2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a04      	ldr	r2, [pc, #16]	; (800659c <HAL_ADC_ConfigChannel+0x500>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d10a      	bne.n	80065a4 <HAL_ADC_ConfigChannel+0x508>
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <HAL_ADC_ConfigChannel+0x504>)
 8006590:	e009      	b.n	80065a6 <HAL_ADC_ConfigChannel+0x50a>
 8006592:	bf00      	nop
 8006594:	47ff0000 	.word	0x47ff0000
 8006598:	40022000 	.word	0x40022000
 800659c:	40022100 	.word	0x40022100
 80065a0:	40022300 	.word	0x40022300
 80065a4:	4b61      	ldr	r3, [pc, #388]	; (800672c <HAL_ADC_ConfigChannel+0x690>)
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff f90c 	bl	80057c4 <LL_ADC_GetCommonPathInternalCh>
 80065ac:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a5f      	ldr	r2, [pc, #380]	; (8006730 <HAL_ADC_ConfigChannel+0x694>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_ADC_ConfigChannel+0x526>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5d      	ldr	r2, [pc, #372]	; (8006734 <HAL_ADC_ConfigChannel+0x698>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10e      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x544>
 80065c2:	485b      	ldr	r0, [pc, #364]	; (8006730 <HAL_ADC_ConfigChannel+0x694>)
 80065c4:	f7ff fa86 	bl	8005ad4 <LL_ADC_IsEnabled>
 80065c8:	4604      	mov	r4, r0
 80065ca:	485a      	ldr	r0, [pc, #360]	; (8006734 <HAL_ADC_ConfigChannel+0x698>)
 80065cc:	f7ff fa82 	bl	8005ad4 <LL_ADC_IsEnabled>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4323      	orrs	r3, r4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	e008      	b.n	80065f2 <HAL_ADC_ConfigChannel+0x556>
 80065e0:	4855      	ldr	r0, [pc, #340]	; (8006738 <HAL_ADC_ConfigChannel+0x69c>)
 80065e2:	f7ff fa77 	bl	8005ad4 <LL_ADC_IsEnabled>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d07d      	beq.n	80066f2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a50      	ldr	r2, [pc, #320]	; (800673c <HAL_ADC_ConfigChannel+0x6a0>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d130      	bne.n	8006662 <HAL_ADC_ConfigChannel+0x5c6>
 8006600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d12b      	bne.n	8006662 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <HAL_ADC_ConfigChannel+0x69c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	f040 8081 	bne.w	8006718 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a45      	ldr	r2, [pc, #276]	; (8006730 <HAL_ADC_ConfigChannel+0x694>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_ADC_ConfigChannel+0x58e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a43      	ldr	r2, [pc, #268]	; (8006734 <HAL_ADC_ConfigChannel+0x698>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d101      	bne.n	800662e <HAL_ADC_ConfigChannel+0x592>
 800662a:	4a45      	ldr	r2, [pc, #276]	; (8006740 <HAL_ADC_ConfigChannel+0x6a4>)
 800662c:	e000      	b.n	8006630 <HAL_ADC_ConfigChannel+0x594>
 800662e:	4a3f      	ldr	r2, [pc, #252]	; (800672c <HAL_ADC_ConfigChannel+0x690>)
 8006630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006632:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7ff f8b0 	bl	800579e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800663e:	4b41      	ldr	r3, [pc, #260]	; (8006744 <HAL_ADC_ConfigChannel+0x6a8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	099b      	lsrs	r3, r3, #6
 8006644:	4a40      	ldr	r2, [pc, #256]	; (8006748 <HAL_ADC_ConfigChannel+0x6ac>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	099b      	lsrs	r3, r3, #6
 800664c:	3301      	adds	r3, #1
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006652:	e002      	b.n	800665a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3b01      	subs	r3, #1
 8006658:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f9      	bne.n	8006654 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006660:	e05a      	b.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a39      	ldr	r2, [pc, #228]	; (800674c <HAL_ADC_ConfigChannel+0x6b0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d11e      	bne.n	80066aa <HAL_ADC_ConfigChannel+0x60e>
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d119      	bne.n	80066aa <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2f      	ldr	r2, [pc, #188]	; (8006738 <HAL_ADC_ConfigChannel+0x69c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d14b      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2a      	ldr	r2, [pc, #168]	; (8006730 <HAL_ADC_ConfigChannel+0x694>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_ADC_ConfigChannel+0x5f8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a29      	ldr	r2, [pc, #164]	; (8006734 <HAL_ADC_ConfigChannel+0x698>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <HAL_ADC_ConfigChannel+0x5fc>
 8006694:	4a2a      	ldr	r2, [pc, #168]	; (8006740 <HAL_ADC_ConfigChannel+0x6a4>)
 8006696:	e000      	b.n	800669a <HAL_ADC_ConfigChannel+0x5fe>
 8006698:	4a24      	ldr	r2, [pc, #144]	; (800672c <HAL_ADC_ConfigChannel+0x690>)
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f7ff f87b 	bl	800579e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066a8:	e036      	b.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a28      	ldr	r2, [pc, #160]	; (8006750 <HAL_ADC_ConfigChannel+0x6b4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d131      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d12c      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <HAL_ADC_ConfigChannel+0x69c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d127      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_ADC_ConfigChannel+0x694>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_ADC_ConfigChannel+0x640>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a17      	ldr	r2, [pc, #92]	; (8006734 <HAL_ADC_ConfigChannel+0x698>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d101      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x644>
 80066dc:	4a18      	ldr	r2, [pc, #96]	; (8006740 <HAL_ADC_ConfigChannel+0x6a4>)
 80066de:	e000      	b.n	80066e2 <HAL_ADC_ConfigChannel+0x646>
 80066e0:	4a12      	ldr	r2, [pc, #72]	; (800672c <HAL_ADC_ConfigChannel+0x690>)
 80066e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7ff f857 	bl	800579e <LL_ADC_SetCommonPathInternalCh>
 80066f0:	e012      	b.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f043 0220 	orr.w	r2, r3, #32
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006704:	e008      	b.n	8006718 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670a:	f043 0220 	orr.w	r2, r3, #32
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006720:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006724:	4618      	mov	r0, r3
 8006726:	3784      	adds	r7, #132	; 0x84
 8006728:	46bd      	mov	sp, r7
 800672a:	bd90      	pop	{r4, r7, pc}
 800672c:	58026300 	.word	0x58026300
 8006730:	40022000 	.word	0x40022000
 8006734:	40022100 	.word	0x40022100
 8006738:	58026000 	.word	0x58026000
 800673c:	cb840000 	.word	0xcb840000
 8006740:	40022300 	.word	0x40022300
 8006744:	240000bc 	.word	0x240000bc
 8006748:	053e2d63 	.word	0x053e2d63
 800674c:	c7520000 	.word	0xc7520000
 8006750:	cfb80000 	.word	0xcfb80000

08006754 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff f9b7 	bl	8005ad4 <LL_ADC_IsEnabled>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d16e      	bne.n	800684a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <ADC_Enable+0x100>)
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	f043 0201 	orr.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e05a      	b.n	800684c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff f972 	bl	8005a84 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80067a0:	f7fe ffbc 	bl	800571c <HAL_GetTick>
 80067a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <ADC_Enable+0x104>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d004      	beq.n	80067ba <ADC_Enable+0x66>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a29      	ldr	r2, [pc, #164]	; (800685c <ADC_Enable+0x108>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d101      	bne.n	80067be <ADC_Enable+0x6a>
 80067ba:	4b29      	ldr	r3, [pc, #164]	; (8006860 <ADC_Enable+0x10c>)
 80067bc:	e000      	b.n	80067c0 <ADC_Enable+0x6c>
 80067be:	4b29      	ldr	r3, [pc, #164]	; (8006864 <ADC_Enable+0x110>)
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff f903 	bl	80059cc <LL_ADC_GetMultimode>
 80067c6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <ADC_Enable+0x108>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d002      	beq.n	80067d8 <ADC_Enable+0x84>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	e000      	b.n	80067da <ADC_Enable+0x86>
 80067d8:	4b1f      	ldr	r3, [pc, #124]	; (8006858 <ADC_Enable+0x104>)
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d02c      	beq.n	800683c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d130      	bne.n	800684a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067e8:	e028      	b.n	800683c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff f970 	bl	8005ad4 <LL_ADC_IsEnabled>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff f940 	bl	8005a84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006804:	f7fe ff8a 	bl	800571c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d914      	bls.n	800683c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b01      	cmp	r3, #1
 800681e:	d00d      	beq.n	800683c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	f043 0210 	orr.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006830:	f043 0201 	orr.w	r2, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e007      	b.n	800684c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b01      	cmp	r3, #1
 8006848:	d1cf      	bne.n	80067ea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	8000003f 	.word	0x8000003f
 8006858:	40022000 	.word	0x40022000
 800685c:	40022100 	.word	0x40022100
 8006860:	40022300 	.word	0x40022300
 8006864:	58026300 	.word	0x58026300

08006868 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff f940 	bl	8005afa <LL_ADC_IsDisableOngoing>
 800687a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff f927 	bl	8005ad4 <LL_ADC_IsEnabled>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d047      	beq.n	800691c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d144      	bne.n	800691c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 030d 	and.w	r3, r3, #13
 800689c:	2b01      	cmp	r3, #1
 800689e:	d10c      	bne.n	80068ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff f901 	bl	8005aac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2203      	movs	r2, #3
 80068b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80068b2:	f7fe ff33 	bl	800571c <HAL_GetTick>
 80068b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068b8:	e029      	b.n	800690e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	f043 0210 	orr.w	r2, r3, #16
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ca:	f043 0201 	orr.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e023      	b.n	800691e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80068d6:	f7fe ff21 	bl	800571c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d914      	bls.n	800690e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f043 0210 	orr.w	r2, r3, #16
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e007      	b.n	800691e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1dc      	bne.n	80068d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006938:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800693c:	2b00      	cmp	r3, #0
 800693e:	d14b      	bne.n	80069d8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d021      	beq.n	800699e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe ff92 	bl	8005888 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d032      	beq.n	80069d0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d12b      	bne.n	80069d0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d11f      	bne.n	80069d0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006994:	f043 0201 	orr.w	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	655a      	str	r2, [r3, #84]	; 0x54
 800699c:	e018      	b.n	80069d0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d111      	bne.n	80069d0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d105      	bne.n	80069d0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f043 0201 	orr.w	r2, r3, #1
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff fb45 	bl	8006060 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80069d6:	e00e      	b.n	80069f6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7ff fb4f 	bl	8006088 <HAL_ADC_ErrorCallback>
}
 80069ea:	e004      	b.n	80069f6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
}
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff fb31 	bl	8006074 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a38:	f043 0204 	orr.w	r2, r3, #4
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff fb21 	bl	8006088 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a7a      	ldr	r2, [pc, #488]	; (8006c48 <ADC_ConfigureBoostMode+0x1f8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d004      	beq.n	8006a6c <ADC_ConfigureBoostMode+0x1c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a79      	ldr	r2, [pc, #484]	; (8006c4c <ADC_ConfigureBoostMode+0x1fc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <ADC_ConfigureBoostMode+0x30>
 8006a6c:	4b78      	ldr	r3, [pc, #480]	; (8006c50 <ADC_ConfigureBoostMode+0x200>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	e008      	b.n	8006a92 <ADC_ConfigureBoostMode+0x42>
 8006a80:	4b74      	ldr	r3, [pc, #464]	; (8006c54 <ADC_ConfigureBoostMode+0x204>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01c      	beq.n	8006ad0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006a96:	f007 feb7 	bl	800e808 <HAL_RCC_GetHCLKFreq>
 8006a9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006aa4:	d010      	beq.n	8006ac8 <ADC_ConfigureBoostMode+0x78>
 8006aa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006aaa:	d873      	bhi.n	8006b94 <ADC_ConfigureBoostMode+0x144>
 8006aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab0:	d002      	beq.n	8006ab8 <ADC_ConfigureBoostMode+0x68>
 8006ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab6:	d16d      	bne.n	8006b94 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	0c1b      	lsrs	r3, r3, #16
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	60fb      	str	r3, [r7, #12]
        break;
 8006ac6:	e068      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	089b      	lsrs	r3, r3, #2
 8006acc:	60fb      	str	r3, [r7, #12]
        break;
 8006ace:	e064      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006ad0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ad4:	f04f 0100 	mov.w	r1, #0
 8006ad8:	f009 f93e 	bl	800fd58 <HAL_RCCEx_GetPeriphCLKFreq>
 8006adc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006ae6:	d051      	beq.n	8006b8c <ADC_ConfigureBoostMode+0x13c>
 8006ae8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006aec:	d854      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006aee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006af2:	d047      	beq.n	8006b84 <ADC_ConfigureBoostMode+0x134>
 8006af4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006af8:	d84e      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006afa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006afe:	d03d      	beq.n	8006b7c <ADC_ConfigureBoostMode+0x12c>
 8006b00:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006b04:	d848      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b0a:	d033      	beq.n	8006b74 <ADC_ConfigureBoostMode+0x124>
 8006b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b10:	d842      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006b12:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006b16:	d029      	beq.n	8006b6c <ADC_ConfigureBoostMode+0x11c>
 8006b18:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006b1c:	d83c      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006b1e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b22:	d01a      	beq.n	8006b5a <ADC_ConfigureBoostMode+0x10a>
 8006b24:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b28:	d836      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006b2a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006b2e:	d014      	beq.n	8006b5a <ADC_ConfigureBoostMode+0x10a>
 8006b30:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006b34:	d830      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3a:	d00e      	beq.n	8006b5a <ADC_ConfigureBoostMode+0x10a>
 8006b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b40:	d82a      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006b42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b46:	d008      	beq.n	8006b5a <ADC_ConfigureBoostMode+0x10a>
 8006b48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b4c:	d824      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x148>
 8006b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b52:	d002      	beq.n	8006b5a <ADC_ConfigureBoostMode+0x10a>
 8006b54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b58:	d11e      	bne.n	8006b98 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	0c9b      	lsrs	r3, r3, #18
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	60fb      	str	r3, [r7, #12]
        break;
 8006b6a:	e016      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	60fb      	str	r3, [r7, #12]
        break;
 8006b72:	e012      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	60fb      	str	r3, [r7, #12]
        break;
 8006b7a:	e00e      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	099b      	lsrs	r3, r3, #6
 8006b80:	60fb      	str	r3, [r7, #12]
        break;
 8006b82:	e00a      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	09db      	lsrs	r3, r3, #7
 8006b88:	60fb      	str	r3, [r7, #12]
        break;
 8006b8a:	e006      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	60fb      	str	r3, [r7, #12]
        break;
 8006b92:	e002      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006b98:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b9a:	f7fe fdcb 	bl	8005734 <HAL_GetREVID>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d815      	bhi.n	8006bd4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4a2b      	ldr	r2, [pc, #172]	; (8006c58 <ADC_ConfigureBoostMode+0x208>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d908      	bls.n	8006bc2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bbe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006bc0:	e03e      	b.n	8006c40 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bd0:	609a      	str	r2, [r3, #8]
}
 8006bd2:	e035      	b.n	8006c40 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <ADC_ConfigureBoostMode+0x20c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d808      	bhi.n	8006bf4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006bf0:	609a      	str	r2, [r3, #8]
}
 8006bf2:	e025      	b.n	8006c40 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a1a      	ldr	r2, [pc, #104]	; (8006c60 <ADC_ConfigureBoostMode+0x210>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d80a      	bhi.n	8006c12 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c0e:	609a      	str	r2, [r3, #8]
}
 8006c10:	e016      	b.n	8006c40 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <ADC_ConfigureBoostMode+0x214>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d80a      	bhi.n	8006c30 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2c:	609a      	str	r2, [r3, #8]
}
 8006c2e:	e007      	b.n	8006c40 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006c3e:	609a      	str	r2, [r3, #8]
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40022000 	.word	0x40022000
 8006c4c:	40022100 	.word	0x40022100
 8006c50:	40022300 	.word	0x40022300
 8006c54:	58026300 	.word	0x58026300
 8006c58:	01312d00 	.word	0x01312d00
 8006c5c:	005f5e10 	.word	0x005f5e10
 8006c60:	00bebc20 	.word	0x00bebc20
 8006c64:	017d7840 	.word	0x017d7840

08006c68 <LL_ADC_IsEnabled>:
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <LL_ADC_IsEnabled+0x18>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <LL_ADC_IsEnabled+0x1a>
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <LL_ADC_StartCalibration>:
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <LL_ADC_StartCalibration+0x38>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	609a      	str	r2, [r3, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	3ffeffc0 	.word	0x3ffeffc0

08006ccc <LL_ADC_IsCalibrationOnGoing>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce0:	d101      	bne.n	8006ce6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LL_ADC_REG_IsConversionOngoing>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d101      	bne.n	8006d0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
	...

08006d1c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_ADCEx_Calibration_Start+0x1e>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e04c      	b.n	8006dd4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff fd90 	bl	8006868 <ADC_Disable>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d135      	bne.n	8006dbe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d56:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <HAL_ADCEx_Calibration_Start+0xc0>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	f043 0202 	orr.w	r2, r3, #2
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff ff90 	bl	8006c90 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d70:	e014      	b.n	8006d9c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4a19      	ldr	r2, [pc, #100]	; (8006de0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d30d      	bcc.n	8006d9c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d84:	f023 0312 	bic.w	r3, r3, #18
 8006d88:	f043 0210 	orr.w	r2, r3, #16
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e01b      	b.n	8006dd4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff93 	bl	8006ccc <LL_ADC_IsCalibrationOnGoing>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e2      	bne.n	8006d72 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	f023 0303 	bic.w	r3, r3, #3
 8006db4:	f043 0201 	orr.w	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	655a      	str	r2, [r3, #84]	; 0x54
 8006dbc:	e005      	b.n	8006dca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	f043 0210 	orr.w	r2, r3, #16
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	ffffeefd 	.word	0xffffeefd
 8006de0:	25c3f800 	.word	0x25c3f800

08006de4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b09f      	sub	sp, #124	; 0x7c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e0be      	b.n	8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a5c      	ldr	r2, [pc, #368]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d102      	bne.n	8006e22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e1c:	4b5b      	ldr	r3, [pc, #364]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	e001      	b.n	8006e26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e22:	2300      	movs	r3, #0
 8006e24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	f043 0220 	orr.w	r2, r3, #32
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e09d      	b.n	8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff ff54 	bl	8006cf4 <LL_ADC_REG_IsConversionOngoing>
 8006e4c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff ff4e 	bl	8006cf4 <LL_ADC_REG_IsConversionOngoing>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d17f      	bne.n	8006f5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d17c      	bne.n	8006f5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a47      	ldr	r2, [pc, #284]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a46      	ldr	r2, [pc, #280]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006e78:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e7a:	e000      	b.n	8006e7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006e7c:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e7e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d039      	beq.n	8006efc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	431a      	orrs	r2, r3
 8006e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a3a      	ldr	r2, [pc, #232]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d004      	beq.n	8006eae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a38      	ldr	r2, [pc, #224]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d10e      	bne.n	8006ecc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006eae:	4836      	ldr	r0, [pc, #216]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006eb0:	f7ff feda 	bl	8006c68 <LL_ADC_IsEnabled>
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	4835      	ldr	r0, [pc, #212]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006eb8:	f7ff fed6 	bl	8006c68 <LL_ADC_IsEnabled>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	4323      	orrs	r3, r4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2301      	moveq	r3, #1
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	e008      	b.n	8006ede <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006ecc:	4832      	ldr	r0, [pc, #200]	; (8006f98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006ece:	f7ff fecb 	bl	8006c68 <LL_ADC_IsEnabled>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d047      	beq.n	8006f72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	4b2d      	ldr	r3, [pc, #180]	; (8006f9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	6811      	ldr	r1, [r2, #0]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	6892      	ldr	r2, [r2, #8]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006efa:	e03a      	b.n	8006f72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1e      	ldr	r2, [pc, #120]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10e      	bne.n	8006f3a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006f1c:	481a      	ldr	r0, [pc, #104]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006f1e:	f7ff fea3 	bl	8006c68 <LL_ADC_IsEnabled>
 8006f22:	4604      	mov	r4, r0
 8006f24:	4819      	ldr	r0, [pc, #100]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006f26:	f7ff fe9f 	bl	8006c68 <LL_ADC_IsEnabled>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4323      	orrs	r3, r4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf0c      	ite	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	2300      	movne	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	e008      	b.n	8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006f3a:	4817      	ldr	r0, [pc, #92]	; (8006f98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f3c:	f7ff fe94 	bl	8006c68 <LL_ADC_IsEnabled>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bf0c      	ite	eq
 8006f46:	2301      	moveq	r3, #1
 8006f48:	2300      	movne	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f5c:	e009      	b.n	8006f72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f043 0220 	orr.w	r2, r3, #32
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006f70:	e000      	b.n	8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	377c      	adds	r7, #124	; 0x7c
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd90      	pop	{r4, r7, pc}
 8006f88:	40022000 	.word	0x40022000
 8006f8c:	40022100 	.word	0x40022100
 8006f90:	40022300 	.word	0x40022300
 8006f94:	58026300 	.word	0x58026300
 8006f98:	58026000 	.word	0x58026000
 8006f9c:	fffff0e0 	.word	0xfffff0e0

08006fa0 <__NVIC_SetPriorityGrouping>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fce:	4a04      	ldr	r2, [pc, #16]	; (8006fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	60d3      	str	r3, [r2, #12]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	e000ed00 	.word	0xe000ed00
 8006fe4:	05fa0000 	.word	0x05fa0000

08006fe8 <__NVIC_GetPriorityGrouping>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <__NVIC_GetPriorityGrouping+0x18>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	f003 0307 	and.w	r3, r3, #7
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	e000ed00 	.word	0xe000ed00

08007004 <__NVIC_EnableIRQ>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800700e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007012:	2b00      	cmp	r3, #0
 8007014:	db0b      	blt.n	800702e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	f003 021f 	and.w	r2, r3, #31
 800701c:	4907      	ldr	r1, [pc, #28]	; (800703c <__NVIC_EnableIRQ+0x38>)
 800701e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	2001      	movs	r0, #1
 8007026:	fa00 f202 	lsl.w	r2, r0, r2
 800702a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	e000e100 	.word	0xe000e100

08007040 <__NVIC_SetPriority>:
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	6039      	str	r1, [r7, #0]
 800704a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800704c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007050:	2b00      	cmp	r3, #0
 8007052:	db0a      	blt.n	800706a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	490c      	ldr	r1, [pc, #48]	; (800708c <__NVIC_SetPriority+0x4c>)
 800705a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800705e:	0112      	lsls	r2, r2, #4
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	440b      	add	r3, r1
 8007064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007068:	e00a      	b.n	8007080 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	4908      	ldr	r1, [pc, #32]	; (8007090 <__NVIC_SetPriority+0x50>)
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	3b04      	subs	r3, #4
 8007078:	0112      	lsls	r2, r2, #4
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	440b      	add	r3, r1
 800707e:	761a      	strb	r2, [r3, #24]
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	e000e100 	.word	0xe000e100
 8007090:	e000ed00 	.word	0xe000ed00

08007094 <NVIC_EncodePriority>:
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f1c3 0307 	rsb	r3, r3, #7
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	bf28      	it	cs
 80070b2:	2304      	movcs	r3, #4
 80070b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	3304      	adds	r3, #4
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d902      	bls.n	80070c4 <NVIC_EncodePriority+0x30>
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	3b03      	subs	r3, #3
 80070c2:	e000      	b.n	80070c6 <NVIC_EncodePriority+0x32>
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	fa02 f303 	lsl.w	r3, r2, r3
 80070d2:	43da      	mvns	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	401a      	ands	r2, r3
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	fa01 f303 	lsl.w	r3, r1, r3
 80070e6:	43d9      	mvns	r1, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070ec:	4313      	orrs	r3, r2
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3724      	adds	r7, #36	; 0x24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff ff4c 	bl	8006fa0 <__NVIC_SetPriorityGrouping>
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800711e:	f7ff ff63 	bl	8006fe8 <__NVIC_GetPriorityGrouping>
 8007122:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f7ff ffb3 	bl	8007094 <NVIC_EncodePriority>
 800712e:	4602      	mov	r2, r0
 8007130:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff ff82 	bl	8007040 <__NVIC_SetPriority>
}
 800713c:	bf00      	nop
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800714e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff ff56 	bl	8007004 <__NVIC_EnableIRQ>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007164:	f3bf 8f5f 	dmb	sy
}
 8007168:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <HAL_MPU_Disable+0x28>)
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	4a06      	ldr	r2, [pc, #24]	; (8007188 <HAL_MPU_Disable+0x28>)
 8007170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007174:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007176:	4b05      	ldr	r3, [pc, #20]	; (800718c <HAL_MPU_Disable+0x2c>)
 8007178:	2200      	movs	r2, #0
 800717a:	605a      	str	r2, [r3, #4]
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	e000ed00 	.word	0xe000ed00
 800718c:	e000ed90 	.word	0xe000ed90

08007190 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007198:	4a0b      	ldr	r2, [pc, #44]	; (80071c8 <HAL_MPU_Enable+0x38>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f043 0301 	orr.w	r3, r3, #1
 80071a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <HAL_MPU_Enable+0x3c>)
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	4a09      	ldr	r2, [pc, #36]	; (80071cc <HAL_MPU_Enable+0x3c>)
 80071a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80071ae:	f3bf 8f4f 	dsb	sy
}
 80071b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071b4:	f3bf 8f6f 	isb	sy
}
 80071b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	e000ed90 	.word	0xe000ed90
 80071cc:	e000ed00 	.word	0xe000ed00

080071d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	785a      	ldrb	r2, [r3, #1]
 80071dc:	4b1b      	ldr	r3, [pc, #108]	; (800724c <HAL_MPU_ConfigRegion+0x7c>)
 80071de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80071e0:	4b1a      	ldr	r3, [pc, #104]	; (800724c <HAL_MPU_ConfigRegion+0x7c>)
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	4a19      	ldr	r2, [pc, #100]	; (800724c <HAL_MPU_ConfigRegion+0x7c>)
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80071ec:	4a17      	ldr	r2, [pc, #92]	; (800724c <HAL_MPU_ConfigRegion+0x7c>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7b1b      	ldrb	r3, [r3, #12]
 80071f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7adb      	ldrb	r3, [r3, #11]
 80071fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7a9b      	ldrb	r3, [r3, #10]
 8007206:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7b5b      	ldrb	r3, [r3, #13]
 800720e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007210:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7b9b      	ldrb	r3, [r3, #14]
 8007216:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007218:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7bdb      	ldrb	r3, [r3, #15]
 800721e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007220:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7a5b      	ldrb	r3, [r3, #9]
 8007226:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007228:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7a1b      	ldrb	r3, [r3, #8]
 800722e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007230:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	7812      	ldrb	r2, [r2, #0]
 8007236:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007238:	4a04      	ldr	r2, [pc, #16]	; (800724c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800723a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800723c:	6113      	str	r3, [r2, #16]
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	e000ed90 	.word	0xe000ed90

08007250 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e014      	b.n	800728c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	791b      	ldrb	r3, [r3, #4]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7f9 fcb6 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e046      	b.n	8007336 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	795b      	ldrb	r3, [r3, #5]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_DAC_Start+0x20>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e040      	b.n	8007336 <HAL_DAC_Start+0xa2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6819      	ldr	r1, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2201      	movs	r2, #1
 80072ce:	409a      	lsls	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10f      	bne.n	80072fe <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d11d      	bne.n	8007328 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	605a      	str	r2, [r3, #4]
 80072fc:	e014      	b.n	8007328 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f003 0310 	and.w	r3, r3, #16
 800730e:	2102      	movs	r1, #2
 8007310:	fa01 f303 	lsl.w	r3, r1, r3
 8007314:	429a      	cmp	r2, r3
 8007316:	d107      	bne.n	8007328 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0202 	orr.w	r2, r2, #2
 8007326:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0a2      	b.n	80074a2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	795b      	ldrb	r3, [r3, #5]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_DAC_Start_DMA+0x24>
 8007364:	2302      	movs	r3, #2
 8007366:	e09c      	b.n	80074a2 <HAL_DAC_Start_DMA+0x15e>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2202      	movs	r2, #2
 8007372:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d129      	bne.n	80073ce <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	4a4b      	ldr	r2, [pc, #300]	; (80074ac <HAL_DAC_Start_DMA+0x168>)
 8007380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	4a4a      	ldr	r2, [pc, #296]	; (80074b0 <HAL_DAC_Start_DMA+0x16c>)
 8007388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	4a49      	ldr	r2, [pc, #292]	; (80074b4 <HAL_DAC_Start_DMA+0x170>)
 8007390:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073a0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_DAC_Start_DMA+0x6c>
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d005      	beq.n	80073ba <HAL_DAC_Start_DMA+0x76>
 80073ae:	e009      	b.n	80073c4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	613b      	str	r3, [r7, #16]
        break;
 80073b8:	e033      	b.n	8007422 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	330c      	adds	r3, #12
 80073c0:	613b      	str	r3, [r7, #16]
        break;
 80073c2:	e02e      	b.n	8007422 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3310      	adds	r3, #16
 80073ca:	613b      	str	r3, [r7, #16]
        break;
 80073cc:	e029      	b.n	8007422 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	4a39      	ldr	r2, [pc, #228]	; (80074b8 <HAL_DAC_Start_DMA+0x174>)
 80073d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	4a38      	ldr	r2, [pc, #224]	; (80074bc <HAL_DAC_Start_DMA+0x178>)
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	4a37      	ldr	r2, [pc, #220]	; (80074c0 <HAL_DAC_Start_DMA+0x17c>)
 80073e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <HAL_DAC_Start_DMA+0xc0>
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d005      	beq.n	800740e <HAL_DAC_Start_DMA+0xca>
 8007402:	e009      	b.n	8007418 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3314      	adds	r3, #20
 800740a:	613b      	str	r3, [r7, #16]
        break;
 800740c:	e009      	b.n	8007422 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3318      	adds	r3, #24
 8007414:	613b      	str	r3, [r7, #16]
        break;
 8007416:	e004      	b.n	8007422 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	331c      	adds	r3, #28
 800741e:	613b      	str	r3, [r7, #16]
        break;
 8007420:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d111      	bne.n	800744c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007436:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6898      	ldr	r0, [r3, #8]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	f000 fe67 	bl	8008114 <HAL_DMA_Start_IT>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]
 800744a:	e010      	b.n	800746e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800745a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68d8      	ldr	r0, [r3, #12]
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	f000 fe55 	bl	8008114 <HAL_DMA_Start_IT>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10c      	bne.n	8007494 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2201      	movs	r2, #1
 8007488:	409a      	lsls	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e005      	b.n	80074a0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f043 0204 	orr.w	r2, r3, #4
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	08007935 	.word	0x08007935
 80074b0:	08007957 	.word	0x08007957
 80074b4:	08007973 	.word	0x08007973
 80074b8:	080079f1 	.word	0x080079f1
 80074bc:	08007a13 	.word	0x08007a13
 80074c0:	08007a2f 	.word	0x08007a2f

080074c4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e03e      	b.n	8007556 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6819      	ldr	r1, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074e8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ec:	43da      	mvns	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	400a      	ands	r2, r1
 80074f4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6819      	ldr	r1, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2201      	movs	r2, #1
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	43da      	mvns	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	400a      	ands	r2, r1
 8007510:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10d      	bne.n	8007534 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4618      	mov	r0, r3
 800751e:	f001 f863 	bl	80085e8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e00c      	b.n	800754e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4618      	mov	r0, r3
 800753a:	f001 f855 	bl	80085e8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800754c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007574:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01d      	beq.n	80075bc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d018      	beq.n	80075bc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f043 0201 	orr.w	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075b4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f86f 	bl	800769a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01d      	beq.n	8007602 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d018      	beq.n	8007602 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2204      	movs	r2, #4
 80075d4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f043 0202 	orr.w	r2, r3, #2
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80075ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9ed 	bl	80079dc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800760a:	b480      	push	{r7}
 800760c:	b087      	sub	sp, #28
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
 8007616:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e015      	b.n	8007652 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4413      	add	r3, r2
 8007638:	3308      	adds	r3, #8
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	e004      	b.n	8007648 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3314      	adds	r3, #20
 8007646:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	461a      	mov	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
	...

080076b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <HAL_DAC_ConfigChannel+0x1e>
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e12a      	b.n	8007928 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	795b      	ldrb	r3, [r3, #5]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_DAC_ConfigChannel+0x2e>
 80076da:	2302      	movs	r3, #2
 80076dc:	e124      	b.n	8007928 <HAL_DAC_ConfigChannel+0x278>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2202      	movs	r2, #2
 80076e8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d17a      	bne.n	80077e8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80076f2:	f7fe f813 	bl	800571c <HAL_GetTick>
 80076f6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d13d      	bne.n	800777a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076fe:	e018      	b.n	8007732 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007700:	f7fe f80c 	bl	800571c <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b01      	cmp	r3, #1
 800770c:	d911      	bls.n	8007732 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007714:	4b86      	ldr	r3, [pc, #536]	; (8007930 <HAL_DAC_ConfigChannel+0x280>)
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	f043 0208 	orr.w	r2, r3, #8
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2203      	movs	r2, #3
 800772c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e0fa      	b.n	8007928 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007738:	4b7d      	ldr	r3, [pc, #500]	; (8007930 <HAL_DAC_ConfigChannel+0x280>)
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1df      	bne.n	8007700 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	6992      	ldr	r2, [r2, #24]
 8007748:	641a      	str	r2, [r3, #64]	; 0x40
 800774a:	e020      	b.n	800778e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800774c:	f7fd ffe6 	bl	800571c <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d90f      	bls.n	800777a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0a      	bge.n	800777a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f043 0208 	orr.w	r2, r3, #8
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2203      	movs	r2, #3
 8007774:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e0d6      	b.n	8007928 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007780:	2b00      	cmp	r3, #0
 8007782:	dbe3      	blt.n	800774c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	6992      	ldr	r2, [r2, #24]
 800778c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800779e:	fa01 f303 	lsl.w	r3, r1, r3
 80077a2:	43db      	mvns	r3, r3
 80077a4:	ea02 0103 	and.w	r1, r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f003 0310 	and.w	r3, r3, #16
 80077b2:	409a      	lsls	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	21ff      	movs	r1, #255	; 0xff
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	ea02 0103 	and.w	r1, r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6a1a      	ldr	r2, [r3, #32]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	409a      	lsls	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d11d      	bne.n	800782c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	221f      	movs	r2, #31
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	43db      	mvns	r3, r3
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	4013      	ands	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	4313      	orrs	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2207      	movs	r2, #7
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	43db      	mvns	r3, r3
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	4013      	ands	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007850:	2300      	movs	r3, #0
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
 8007854:	e00f      	b.n	8007876 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d102      	bne.n	8007864 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800785e:	2301      	movs	r3, #1
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
 8007862:	e008      	b.n	8007876 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d102      	bne.n	8007872 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800786c:	2301      	movs	r3, #1
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
 8007870:	e001      	b.n	8007876 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007872:	2300      	movs	r3, #0
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	4313      	orrs	r3, r2
 8007880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f003 0310 	and.w	r3, r3, #16
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	4313      	orrs	r3, r2
 8007896:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6819      	ldr	r1, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	43da      	mvns	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	400a      	ands	r2, r1
 80078bc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	43db      	mvns	r3, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4013      	ands	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6819      	ldr	r1, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	22c0      	movs	r2, #192	; 0xc0
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	43da      	mvns	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	400a      	ands	r2, r1
 8007916:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	; 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20008000 	.word	0x20008000

08007934 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fe8b 	bl	800765e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	711a      	strb	r2, [r3, #4]
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff fe84 	bl	8007672 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f043 0204 	orr.w	r2, r3, #4
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff fe7a 	bl	8007686 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	711a      	strb	r2, [r3, #4]
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f7ff ffce 	bl	80079a0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	711a      	strb	r2, [r3, #4]
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff ffc7 	bl	80079b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	f043 0204 	orr.w	r2, r3, #4
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff ffbd 	bl	80079c8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	711a      	strb	r2, [r3, #4]
}
 8007a54:	bf00      	nop
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007a64:	f7fd fe5a 	bl	800571c <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e316      	b.n	80080a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a66      	ldr	r2, [pc, #408]	; (8007c14 <HAL_DMA_Init+0x1b8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d04a      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a65      	ldr	r2, [pc, #404]	; (8007c18 <HAL_DMA_Init+0x1bc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d045      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a63      	ldr	r2, [pc, #396]	; (8007c1c <HAL_DMA_Init+0x1c0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d040      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a62      	ldr	r2, [pc, #392]	; (8007c20 <HAL_DMA_Init+0x1c4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d03b      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a60      	ldr	r2, [pc, #384]	; (8007c24 <HAL_DMA_Init+0x1c8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d036      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a5f      	ldr	r2, [pc, #380]	; (8007c28 <HAL_DMA_Init+0x1cc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d031      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a5d      	ldr	r2, [pc, #372]	; (8007c2c <HAL_DMA_Init+0x1d0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d02c      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a5c      	ldr	r2, [pc, #368]	; (8007c30 <HAL_DMA_Init+0x1d4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d027      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a5a      	ldr	r2, [pc, #360]	; (8007c34 <HAL_DMA_Init+0x1d8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d022      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a59      	ldr	r2, [pc, #356]	; (8007c38 <HAL_DMA_Init+0x1dc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d01d      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a57      	ldr	r2, [pc, #348]	; (8007c3c <HAL_DMA_Init+0x1e0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d018      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a56      	ldr	r2, [pc, #344]	; (8007c40 <HAL_DMA_Init+0x1e4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a54      	ldr	r2, [pc, #336]	; (8007c44 <HAL_DMA_Init+0x1e8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00e      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a53      	ldr	r2, [pc, #332]	; (8007c48 <HAL_DMA_Init+0x1ec>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d009      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a51      	ldr	r2, [pc, #324]	; (8007c4c <HAL_DMA_Init+0x1f0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d004      	beq.n	8007b14 <HAL_DMA_Init+0xb8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a50      	ldr	r2, [pc, #320]	; (8007c50 <HAL_DMA_Init+0x1f4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d101      	bne.n	8007b18 <HAL_DMA_Init+0xbc>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <HAL_DMA_Init+0xbe>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 813b 	beq.w	8007d96 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a37      	ldr	r2, [pc, #220]	; (8007c14 <HAL_DMA_Init+0x1b8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d04a      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a36      	ldr	r2, [pc, #216]	; (8007c18 <HAL_DMA_Init+0x1bc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d045      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a34      	ldr	r2, [pc, #208]	; (8007c1c <HAL_DMA_Init+0x1c0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d040      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a33      	ldr	r2, [pc, #204]	; (8007c20 <HAL_DMA_Init+0x1c4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d03b      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a31      	ldr	r2, [pc, #196]	; (8007c24 <HAL_DMA_Init+0x1c8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d036      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a30      	ldr	r2, [pc, #192]	; (8007c28 <HAL_DMA_Init+0x1cc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d031      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a2e      	ldr	r2, [pc, #184]	; (8007c2c <HAL_DMA_Init+0x1d0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d02c      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a2d      	ldr	r2, [pc, #180]	; (8007c30 <HAL_DMA_Init+0x1d4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d027      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a2b      	ldr	r2, [pc, #172]	; (8007c34 <HAL_DMA_Init+0x1d8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d022      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a2a      	ldr	r2, [pc, #168]	; (8007c38 <HAL_DMA_Init+0x1dc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d01d      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a28      	ldr	r2, [pc, #160]	; (8007c3c <HAL_DMA_Init+0x1e0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d018      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a27      	ldr	r2, [pc, #156]	; (8007c40 <HAL_DMA_Init+0x1e4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d013      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a25      	ldr	r2, [pc, #148]	; (8007c44 <HAL_DMA_Init+0x1e8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00e      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a24      	ldr	r2, [pc, #144]	; (8007c48 <HAL_DMA_Init+0x1ec>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d009      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a22      	ldr	r2, [pc, #136]	; (8007c4c <HAL_DMA_Init+0x1f0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <HAL_DMA_Init+0x174>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <HAL_DMA_Init+0x1f4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d108      	bne.n	8007be2 <HAL_DMA_Init+0x186>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0201 	bic.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e007      	b.n	8007bf2 <HAL_DMA_Init+0x196>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007bf2:	e02f      	b.n	8007c54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bf4:	f7fd fd92 	bl	800571c <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d928      	bls.n	8007c54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e246      	b.n	80080a2 <HAL_DMA_Init+0x646>
 8007c14:	40020010 	.word	0x40020010
 8007c18:	40020028 	.word	0x40020028
 8007c1c:	40020040 	.word	0x40020040
 8007c20:	40020058 	.word	0x40020058
 8007c24:	40020070 	.word	0x40020070
 8007c28:	40020088 	.word	0x40020088
 8007c2c:	400200a0 	.word	0x400200a0
 8007c30:	400200b8 	.word	0x400200b8
 8007c34:	40020410 	.word	0x40020410
 8007c38:	40020428 	.word	0x40020428
 8007c3c:	40020440 	.word	0x40020440
 8007c40:	40020458 	.word	0x40020458
 8007c44:	40020470 	.word	0x40020470
 8007c48:	40020488 	.word	0x40020488
 8007c4c:	400204a0 	.word	0x400204a0
 8007c50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1c8      	bne.n	8007bf4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4b83      	ldr	r3, [pc, #524]	; (8007e7c <HAL_DMA_Init+0x420>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007c7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d107      	bne.n	8007cb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007cb8:	4b71      	ldr	r3, [pc, #452]	; (8007e80 <HAL_DMA_Init+0x424>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	4b71      	ldr	r3, [pc, #452]	; (8007e84 <HAL_DMA_Init+0x428>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc4:	d328      	bcc.n	8007d18 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b28      	cmp	r3, #40	; 0x28
 8007ccc:	d903      	bls.n	8007cd6 <HAL_DMA_Init+0x27a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd4:	d917      	bls.n	8007d06 <HAL_DMA_Init+0x2aa>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b3e      	cmp	r3, #62	; 0x3e
 8007cdc:	d903      	bls.n	8007ce6 <HAL_DMA_Init+0x28a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b42      	cmp	r3, #66	; 0x42
 8007ce4:	d90f      	bls.n	8007d06 <HAL_DMA_Init+0x2aa>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2b46      	cmp	r3, #70	; 0x46
 8007cec:	d903      	bls.n	8007cf6 <HAL_DMA_Init+0x29a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b48      	cmp	r3, #72	; 0x48
 8007cf4:	d907      	bls.n	8007d06 <HAL_DMA_Init+0x2aa>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b4e      	cmp	r3, #78	; 0x4e
 8007cfc:	d905      	bls.n	8007d0a <HAL_DMA_Init+0x2ae>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b52      	cmp	r3, #82	; 0x52
 8007d04:	d801      	bhi.n	8007d0a <HAL_DMA_Init+0x2ae>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <HAL_DMA_Init+0x2b0>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d16:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f023 0307 	bic.w	r3, r3, #7
 8007d2e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d117      	bne.n	8007d72 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00e      	beq.n	8007d72 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f002 fb4d 	bl	800a3f4 <DMA_CheckFifoParam>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2240      	movs	r2, #64	; 0x40
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e197      	b.n	80080a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f002 fa88 	bl	800a290 <DMA_CalcBaseAndBitshift>
 8007d80:	4603      	mov	r3, r0
 8007d82:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	223f      	movs	r2, #63	; 0x3f
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	609a      	str	r2, [r3, #8]
 8007d94:	e0cd      	b.n	8007f32 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a3b      	ldr	r2, [pc, #236]	; (8007e88 <HAL_DMA_Init+0x42c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d022      	beq.n	8007de6 <HAL_DMA_Init+0x38a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a39      	ldr	r2, [pc, #228]	; (8007e8c <HAL_DMA_Init+0x430>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01d      	beq.n	8007de6 <HAL_DMA_Init+0x38a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a38      	ldr	r2, [pc, #224]	; (8007e90 <HAL_DMA_Init+0x434>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <HAL_DMA_Init+0x38a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a36      	ldr	r2, [pc, #216]	; (8007e94 <HAL_DMA_Init+0x438>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_DMA_Init+0x38a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a35      	ldr	r2, [pc, #212]	; (8007e98 <HAL_DMA_Init+0x43c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <HAL_DMA_Init+0x38a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a33      	ldr	r2, [pc, #204]	; (8007e9c <HAL_DMA_Init+0x440>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <HAL_DMA_Init+0x38a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a32      	ldr	r2, [pc, #200]	; (8007ea0 <HAL_DMA_Init+0x444>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_DMA_Init+0x38a>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a30      	ldr	r2, [pc, #192]	; (8007ea4 <HAL_DMA_Init+0x448>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d101      	bne.n	8007dea <HAL_DMA_Init+0x38e>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <HAL_DMA_Init+0x390>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8097 	beq.w	8007f20 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a24      	ldr	r2, [pc, #144]	; (8007e88 <HAL_DMA_Init+0x42c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d021      	beq.n	8007e40 <HAL_DMA_Init+0x3e4>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a22      	ldr	r2, [pc, #136]	; (8007e8c <HAL_DMA_Init+0x430>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01c      	beq.n	8007e40 <HAL_DMA_Init+0x3e4>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a21      	ldr	r2, [pc, #132]	; (8007e90 <HAL_DMA_Init+0x434>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d017      	beq.n	8007e40 <HAL_DMA_Init+0x3e4>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <HAL_DMA_Init+0x438>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d012      	beq.n	8007e40 <HAL_DMA_Init+0x3e4>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1e      	ldr	r2, [pc, #120]	; (8007e98 <HAL_DMA_Init+0x43c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00d      	beq.n	8007e40 <HAL_DMA_Init+0x3e4>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1c      	ldr	r2, [pc, #112]	; (8007e9c <HAL_DMA_Init+0x440>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d008      	beq.n	8007e40 <HAL_DMA_Init+0x3e4>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1b      	ldr	r2, [pc, #108]	; (8007ea0 <HAL_DMA_Init+0x444>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d003      	beq.n	8007e40 <HAL_DMA_Init+0x3e4>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	; (8007ea4 <HAL_DMA_Init+0x448>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <HAL_DMA_Init+0x44c>)
 8007e5e:	4013      	ands	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d020      	beq.n	8007eac <HAL_DMA_Init+0x450>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b80      	cmp	r3, #128	; 0x80
 8007e70:	d102      	bne.n	8007e78 <HAL_DMA_Init+0x41c>
 8007e72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e76:	e01a      	b.n	8007eae <HAL_DMA_Init+0x452>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	e018      	b.n	8007eae <HAL_DMA_Init+0x452>
 8007e7c:	fe10803f 	.word	0xfe10803f
 8007e80:	5c001000 	.word	0x5c001000
 8007e84:	ffff0000 	.word	0xffff0000
 8007e88:	58025408 	.word	0x58025408
 8007e8c:	5802541c 	.word	0x5802541c
 8007e90:	58025430 	.word	0x58025430
 8007e94:	58025444 	.word	0x58025444
 8007e98:	58025458 	.word	0x58025458
 8007e9c:	5802546c 	.word	0x5802546c
 8007ea0:	58025480 	.word	0x58025480
 8007ea4:	58025494 	.word	0x58025494
 8007ea8:	fffe000f 	.word	0xfffe000f
 8007eac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	68d2      	ldr	r2, [r2, #12]
 8007eb2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ecc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ed4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007edc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4b6e      	ldr	r3, [pc, #440]	; (80080ac <HAL_DMA_Init+0x650>)
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4a6e      	ldr	r2, [pc, #440]	; (80080b0 <HAL_DMA_Init+0x654>)
 8007ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	009a      	lsls	r2, r3, #2
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f002 f9c3 	bl	800a290 <DMA_CalcBaseAndBitshift>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	2201      	movs	r2, #1
 8007f18:	409a      	lsls	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]
 8007f1e:	e008      	b.n	8007f32 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2240      	movs	r2, #64	; 0x40
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e0b7      	b.n	80080a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a5f      	ldr	r2, [pc, #380]	; (80080b4 <HAL_DMA_Init+0x658>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d072      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a5d      	ldr	r2, [pc, #372]	; (80080b8 <HAL_DMA_Init+0x65c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d06d      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a5c      	ldr	r2, [pc, #368]	; (80080bc <HAL_DMA_Init+0x660>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d068      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a5a      	ldr	r2, [pc, #360]	; (80080c0 <HAL_DMA_Init+0x664>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d063      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a59      	ldr	r2, [pc, #356]	; (80080c4 <HAL_DMA_Init+0x668>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d05e      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a57      	ldr	r2, [pc, #348]	; (80080c8 <HAL_DMA_Init+0x66c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d059      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a56      	ldr	r2, [pc, #344]	; (80080cc <HAL_DMA_Init+0x670>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d054      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a54      	ldr	r2, [pc, #336]	; (80080d0 <HAL_DMA_Init+0x674>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d04f      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a53      	ldr	r2, [pc, #332]	; (80080d4 <HAL_DMA_Init+0x678>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d04a      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a51      	ldr	r2, [pc, #324]	; (80080d8 <HAL_DMA_Init+0x67c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d045      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a50      	ldr	r2, [pc, #320]	; (80080dc <HAL_DMA_Init+0x680>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d040      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a4e      	ldr	r2, [pc, #312]	; (80080e0 <HAL_DMA_Init+0x684>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d03b      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a4d      	ldr	r2, [pc, #308]	; (80080e4 <HAL_DMA_Init+0x688>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d036      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a4b      	ldr	r2, [pc, #300]	; (80080e8 <HAL_DMA_Init+0x68c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d031      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a4a      	ldr	r2, [pc, #296]	; (80080ec <HAL_DMA_Init+0x690>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d02c      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a48      	ldr	r2, [pc, #288]	; (80080f0 <HAL_DMA_Init+0x694>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d027      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a47      	ldr	r2, [pc, #284]	; (80080f4 <HAL_DMA_Init+0x698>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d022      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a45      	ldr	r2, [pc, #276]	; (80080f8 <HAL_DMA_Init+0x69c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01d      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a44      	ldr	r2, [pc, #272]	; (80080fc <HAL_DMA_Init+0x6a0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d018      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a42      	ldr	r2, [pc, #264]	; (8008100 <HAL_DMA_Init+0x6a4>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d013      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a41      	ldr	r2, [pc, #260]	; (8008104 <HAL_DMA_Init+0x6a8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d00e      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a3f      	ldr	r2, [pc, #252]	; (8008108 <HAL_DMA_Init+0x6ac>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d009      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a3e      	ldr	r2, [pc, #248]	; (800810c <HAL_DMA_Init+0x6b0>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d004      	beq.n	8008022 <HAL_DMA_Init+0x5c6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a3c      	ldr	r2, [pc, #240]	; (8008110 <HAL_DMA_Init+0x6b4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d101      	bne.n	8008026 <HAL_DMA_Init+0x5ca>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <HAL_DMA_Init+0x5cc>
 8008026:	2300      	movs	r3, #0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d032      	beq.n	8008092 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f002 fa5d 	bl	800a4ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	2b80      	cmp	r3, #128	; 0x80
 8008038:	d102      	bne.n	8008040 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008054:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d010      	beq.n	8008080 <HAL_DMA_Init+0x624>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b08      	cmp	r3, #8
 8008064:	d80c      	bhi.n	8008080 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f002 fada 	bl	800a620 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	e008      	b.n	8008092 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	a7fdabf8 	.word	0xa7fdabf8
 80080b0:	cccccccd 	.word	0xcccccccd
 80080b4:	40020010 	.word	0x40020010
 80080b8:	40020028 	.word	0x40020028
 80080bc:	40020040 	.word	0x40020040
 80080c0:	40020058 	.word	0x40020058
 80080c4:	40020070 	.word	0x40020070
 80080c8:	40020088 	.word	0x40020088
 80080cc:	400200a0 	.word	0x400200a0
 80080d0:	400200b8 	.word	0x400200b8
 80080d4:	40020410 	.word	0x40020410
 80080d8:	40020428 	.word	0x40020428
 80080dc:	40020440 	.word	0x40020440
 80080e0:	40020458 	.word	0x40020458
 80080e4:	40020470 	.word	0x40020470
 80080e8:	40020488 	.word	0x40020488
 80080ec:	400204a0 	.word	0x400204a0
 80080f0:	400204b8 	.word	0x400204b8
 80080f4:	58025408 	.word	0x58025408
 80080f8:	5802541c 	.word	0x5802541c
 80080fc:	58025430 	.word	0x58025430
 8008100:	58025444 	.word	0x58025444
 8008104:	58025458 	.word	0x58025458
 8008108:	5802546c 	.word	0x5802546c
 800810c:	58025480 	.word	0x58025480
 8008110:	58025494 	.word	0x58025494

08008114 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e226      	b.n	800857e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_DMA_Start_IT+0x2a>
 800813a:	2302      	movs	r3, #2
 800813c:	e21f      	b.n	800857e <HAL_DMA_Start_IT+0x46a>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b01      	cmp	r3, #1
 8008150:	f040 820a 	bne.w	8008568 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a68      	ldr	r2, [pc, #416]	; (8008308 <HAL_DMA_Start_IT+0x1f4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d04a      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a66      	ldr	r2, [pc, #408]	; (800830c <HAL_DMA_Start_IT+0x1f8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d045      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a65      	ldr	r2, [pc, #404]	; (8008310 <HAL_DMA_Start_IT+0x1fc>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d040      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a63      	ldr	r2, [pc, #396]	; (8008314 <HAL_DMA_Start_IT+0x200>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d03b      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a62      	ldr	r2, [pc, #392]	; (8008318 <HAL_DMA_Start_IT+0x204>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d036      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a60      	ldr	r2, [pc, #384]	; (800831c <HAL_DMA_Start_IT+0x208>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d031      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a5f      	ldr	r2, [pc, #380]	; (8008320 <HAL_DMA_Start_IT+0x20c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d02c      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a5d      	ldr	r2, [pc, #372]	; (8008324 <HAL_DMA_Start_IT+0x210>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d027      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a5c      	ldr	r2, [pc, #368]	; (8008328 <HAL_DMA_Start_IT+0x214>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d022      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a5a      	ldr	r2, [pc, #360]	; (800832c <HAL_DMA_Start_IT+0x218>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d01d      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a59      	ldr	r2, [pc, #356]	; (8008330 <HAL_DMA_Start_IT+0x21c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d018      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a57      	ldr	r2, [pc, #348]	; (8008334 <HAL_DMA_Start_IT+0x220>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a56      	ldr	r2, [pc, #344]	; (8008338 <HAL_DMA_Start_IT+0x224>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00e      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a54      	ldr	r2, [pc, #336]	; (800833c <HAL_DMA_Start_IT+0x228>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d009      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a53      	ldr	r2, [pc, #332]	; (8008340 <HAL_DMA_Start_IT+0x22c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d004      	beq.n	8008202 <HAL_DMA_Start_IT+0xee>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a51      	ldr	r2, [pc, #324]	; (8008344 <HAL_DMA_Start_IT+0x230>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d108      	bne.n	8008214 <HAL_DMA_Start_IT+0x100>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e007      	b.n	8008224 <HAL_DMA_Start_IT+0x110>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 fe84 	bl	8009f38 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a34      	ldr	r2, [pc, #208]	; (8008308 <HAL_DMA_Start_IT+0x1f4>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d04a      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a33      	ldr	r2, [pc, #204]	; (800830c <HAL_DMA_Start_IT+0x1f8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d045      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a31      	ldr	r2, [pc, #196]	; (8008310 <HAL_DMA_Start_IT+0x1fc>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d040      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a30      	ldr	r2, [pc, #192]	; (8008314 <HAL_DMA_Start_IT+0x200>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d03b      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a2e      	ldr	r2, [pc, #184]	; (8008318 <HAL_DMA_Start_IT+0x204>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d036      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a2d      	ldr	r2, [pc, #180]	; (800831c <HAL_DMA_Start_IT+0x208>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d031      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a2b      	ldr	r2, [pc, #172]	; (8008320 <HAL_DMA_Start_IT+0x20c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d02c      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a2a      	ldr	r2, [pc, #168]	; (8008324 <HAL_DMA_Start_IT+0x210>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d027      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a28      	ldr	r2, [pc, #160]	; (8008328 <HAL_DMA_Start_IT+0x214>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d022      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a27      	ldr	r2, [pc, #156]	; (800832c <HAL_DMA_Start_IT+0x218>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d01d      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a25      	ldr	r2, [pc, #148]	; (8008330 <HAL_DMA_Start_IT+0x21c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d018      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a24      	ldr	r2, [pc, #144]	; (8008334 <HAL_DMA_Start_IT+0x220>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d013      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a22      	ldr	r2, [pc, #136]	; (8008338 <HAL_DMA_Start_IT+0x224>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00e      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a21      	ldr	r2, [pc, #132]	; (800833c <HAL_DMA_Start_IT+0x228>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d009      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <HAL_DMA_Start_IT+0x22c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d004      	beq.n	80082d0 <HAL_DMA_Start_IT+0x1bc>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <HAL_DMA_Start_IT+0x230>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d101      	bne.n	80082d4 <HAL_DMA_Start_IT+0x1c0>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <HAL_DMA_Start_IT+0x1c2>
 80082d4:	2300      	movs	r3, #0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d036      	beq.n	8008348 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f023 021e 	bic.w	r2, r3, #30
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0216 	orr.w	r2, r2, #22
 80082ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d03e      	beq.n	8008374 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0208 	orr.w	r2, r2, #8
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	e035      	b.n	8008374 <HAL_DMA_Start_IT+0x260>
 8008308:	40020010 	.word	0x40020010
 800830c:	40020028 	.word	0x40020028
 8008310:	40020040 	.word	0x40020040
 8008314:	40020058 	.word	0x40020058
 8008318:	40020070 	.word	0x40020070
 800831c:	40020088 	.word	0x40020088
 8008320:	400200a0 	.word	0x400200a0
 8008324:	400200b8 	.word	0x400200b8
 8008328:	40020410 	.word	0x40020410
 800832c:	40020428 	.word	0x40020428
 8008330:	40020440 	.word	0x40020440
 8008334:	40020458 	.word	0x40020458
 8008338:	40020470 	.word	0x40020470
 800833c:	40020488 	.word	0x40020488
 8008340:	400204a0 	.word	0x400204a0
 8008344:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f023 020e 	bic.w	r2, r3, #14
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 020a 	orr.w	r2, r2, #10
 800835a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 0204 	orr.w	r2, r2, #4
 8008372:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a83      	ldr	r2, [pc, #524]	; (8008588 <HAL_DMA_Start_IT+0x474>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d072      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a82      	ldr	r2, [pc, #520]	; (800858c <HAL_DMA_Start_IT+0x478>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d06d      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a80      	ldr	r2, [pc, #512]	; (8008590 <HAL_DMA_Start_IT+0x47c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d068      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a7f      	ldr	r2, [pc, #508]	; (8008594 <HAL_DMA_Start_IT+0x480>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d063      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a7d      	ldr	r2, [pc, #500]	; (8008598 <HAL_DMA_Start_IT+0x484>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d05e      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a7c      	ldr	r2, [pc, #496]	; (800859c <HAL_DMA_Start_IT+0x488>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d059      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a7a      	ldr	r2, [pc, #488]	; (80085a0 <HAL_DMA_Start_IT+0x48c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d054      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a79      	ldr	r2, [pc, #484]	; (80085a4 <HAL_DMA_Start_IT+0x490>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d04f      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a77      	ldr	r2, [pc, #476]	; (80085a8 <HAL_DMA_Start_IT+0x494>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d04a      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a76      	ldr	r2, [pc, #472]	; (80085ac <HAL_DMA_Start_IT+0x498>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d045      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a74      	ldr	r2, [pc, #464]	; (80085b0 <HAL_DMA_Start_IT+0x49c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d040      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a73      	ldr	r2, [pc, #460]	; (80085b4 <HAL_DMA_Start_IT+0x4a0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d03b      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a71      	ldr	r2, [pc, #452]	; (80085b8 <HAL_DMA_Start_IT+0x4a4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d036      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a70      	ldr	r2, [pc, #448]	; (80085bc <HAL_DMA_Start_IT+0x4a8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d031      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a6e      	ldr	r2, [pc, #440]	; (80085c0 <HAL_DMA_Start_IT+0x4ac>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d02c      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a6d      	ldr	r2, [pc, #436]	; (80085c4 <HAL_DMA_Start_IT+0x4b0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d027      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a6b      	ldr	r2, [pc, #428]	; (80085c8 <HAL_DMA_Start_IT+0x4b4>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d022      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a6a      	ldr	r2, [pc, #424]	; (80085cc <HAL_DMA_Start_IT+0x4b8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d01d      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a68      	ldr	r2, [pc, #416]	; (80085d0 <HAL_DMA_Start_IT+0x4bc>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d018      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a67      	ldr	r2, [pc, #412]	; (80085d4 <HAL_DMA_Start_IT+0x4c0>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d013      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a65      	ldr	r2, [pc, #404]	; (80085d8 <HAL_DMA_Start_IT+0x4c4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00e      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a64      	ldr	r2, [pc, #400]	; (80085dc <HAL_DMA_Start_IT+0x4c8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d009      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a62      	ldr	r2, [pc, #392]	; (80085e0 <HAL_DMA_Start_IT+0x4cc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <HAL_DMA_Start_IT+0x350>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a61      	ldr	r2, [pc, #388]	; (80085e4 <HAL_DMA_Start_IT+0x4d0>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d101      	bne.n	8008468 <HAL_DMA_Start_IT+0x354>
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <HAL_DMA_Start_IT+0x356>
 8008468:	2300      	movs	r3, #0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01a      	beq.n	80084a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d007      	beq.n	800848c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800848a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800849e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a37      	ldr	r2, [pc, #220]	; (8008588 <HAL_DMA_Start_IT+0x474>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d04a      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a36      	ldr	r2, [pc, #216]	; (800858c <HAL_DMA_Start_IT+0x478>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d045      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a34      	ldr	r2, [pc, #208]	; (8008590 <HAL_DMA_Start_IT+0x47c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d040      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a33      	ldr	r2, [pc, #204]	; (8008594 <HAL_DMA_Start_IT+0x480>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d03b      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a31      	ldr	r2, [pc, #196]	; (8008598 <HAL_DMA_Start_IT+0x484>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d036      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a30      	ldr	r2, [pc, #192]	; (800859c <HAL_DMA_Start_IT+0x488>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d031      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a2e      	ldr	r2, [pc, #184]	; (80085a0 <HAL_DMA_Start_IT+0x48c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d02c      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a2d      	ldr	r2, [pc, #180]	; (80085a4 <HAL_DMA_Start_IT+0x490>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d027      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a2b      	ldr	r2, [pc, #172]	; (80085a8 <HAL_DMA_Start_IT+0x494>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d022      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a2a      	ldr	r2, [pc, #168]	; (80085ac <HAL_DMA_Start_IT+0x498>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d01d      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a28      	ldr	r2, [pc, #160]	; (80085b0 <HAL_DMA_Start_IT+0x49c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d018      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a27      	ldr	r2, [pc, #156]	; (80085b4 <HAL_DMA_Start_IT+0x4a0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a25      	ldr	r2, [pc, #148]	; (80085b8 <HAL_DMA_Start_IT+0x4a4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00e      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a24      	ldr	r2, [pc, #144]	; (80085bc <HAL_DMA_Start_IT+0x4a8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a22      	ldr	r2, [pc, #136]	; (80085c0 <HAL_DMA_Start_IT+0x4ac>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_DMA_Start_IT+0x430>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a21      	ldr	r2, [pc, #132]	; (80085c4 <HAL_DMA_Start_IT+0x4b0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d108      	bne.n	8008556 <HAL_DMA_Start_IT+0x442>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e012      	b.n	800857c <HAL_DMA_Start_IT+0x468>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	e009      	b.n	800857c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800856e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800857c:	7dfb      	ldrb	r3, [r7, #23]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40020010 	.word	0x40020010
 800858c:	40020028 	.word	0x40020028
 8008590:	40020040 	.word	0x40020040
 8008594:	40020058 	.word	0x40020058
 8008598:	40020070 	.word	0x40020070
 800859c:	40020088 	.word	0x40020088
 80085a0:	400200a0 	.word	0x400200a0
 80085a4:	400200b8 	.word	0x400200b8
 80085a8:	40020410 	.word	0x40020410
 80085ac:	40020428 	.word	0x40020428
 80085b0:	40020440 	.word	0x40020440
 80085b4:	40020458 	.word	0x40020458
 80085b8:	40020470 	.word	0x40020470
 80085bc:	40020488 	.word	0x40020488
 80085c0:	400204a0 	.word	0x400204a0
 80085c4:	400204b8 	.word	0x400204b8
 80085c8:	58025408 	.word	0x58025408
 80085cc:	5802541c 	.word	0x5802541c
 80085d0:	58025430 	.word	0x58025430
 80085d4:	58025444 	.word	0x58025444
 80085d8:	58025458 	.word	0x58025458
 80085dc:	5802546c 	.word	0x5802546c
 80085e0:	58025480 	.word	0x58025480
 80085e4:	58025494 	.word	0x58025494

080085e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80085f0:	f7fd f894 	bl	800571c <HAL_GetTick>
 80085f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e2dc      	b.n	8008bba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d008      	beq.n	800861e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2280      	movs	r2, #128	; 0x80
 8008610:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e2cd      	b.n	8008bba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a76      	ldr	r2, [pc, #472]	; (80087fc <HAL_DMA_Abort+0x214>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d04a      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a74      	ldr	r2, [pc, #464]	; (8008800 <HAL_DMA_Abort+0x218>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d045      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a73      	ldr	r2, [pc, #460]	; (8008804 <HAL_DMA_Abort+0x21c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d040      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a71      	ldr	r2, [pc, #452]	; (8008808 <HAL_DMA_Abort+0x220>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d03b      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a70      	ldr	r2, [pc, #448]	; (800880c <HAL_DMA_Abort+0x224>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d036      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a6e      	ldr	r2, [pc, #440]	; (8008810 <HAL_DMA_Abort+0x228>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d031      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a6d      	ldr	r2, [pc, #436]	; (8008814 <HAL_DMA_Abort+0x22c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d02c      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a6b      	ldr	r2, [pc, #428]	; (8008818 <HAL_DMA_Abort+0x230>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d027      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a6a      	ldr	r2, [pc, #424]	; (800881c <HAL_DMA_Abort+0x234>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d022      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a68      	ldr	r2, [pc, #416]	; (8008820 <HAL_DMA_Abort+0x238>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d01d      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a67      	ldr	r2, [pc, #412]	; (8008824 <HAL_DMA_Abort+0x23c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d018      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a65      	ldr	r2, [pc, #404]	; (8008828 <HAL_DMA_Abort+0x240>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d013      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a64      	ldr	r2, [pc, #400]	; (800882c <HAL_DMA_Abort+0x244>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00e      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a62      	ldr	r2, [pc, #392]	; (8008830 <HAL_DMA_Abort+0x248>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d009      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a61      	ldr	r2, [pc, #388]	; (8008834 <HAL_DMA_Abort+0x24c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d004      	beq.n	80086be <HAL_DMA_Abort+0xd6>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a5f      	ldr	r2, [pc, #380]	; (8008838 <HAL_DMA_Abort+0x250>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d101      	bne.n	80086c2 <HAL_DMA_Abort+0xda>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_DMA_Abort+0xdc>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d013      	beq.n	80086f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 021e 	bic.w	r2, r2, #30
 80086d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695a      	ldr	r2, [r3, #20]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	e00a      	b.n	8008706 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 020e 	bic.w	r2, r2, #14
 80086fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a3c      	ldr	r2, [pc, #240]	; (80087fc <HAL_DMA_Abort+0x214>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d072      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a3a      	ldr	r2, [pc, #232]	; (8008800 <HAL_DMA_Abort+0x218>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d06d      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a39      	ldr	r2, [pc, #228]	; (8008804 <HAL_DMA_Abort+0x21c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d068      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a37      	ldr	r2, [pc, #220]	; (8008808 <HAL_DMA_Abort+0x220>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d063      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a36      	ldr	r2, [pc, #216]	; (800880c <HAL_DMA_Abort+0x224>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d05e      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a34      	ldr	r2, [pc, #208]	; (8008810 <HAL_DMA_Abort+0x228>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d059      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a33      	ldr	r2, [pc, #204]	; (8008814 <HAL_DMA_Abort+0x22c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d054      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a31      	ldr	r2, [pc, #196]	; (8008818 <HAL_DMA_Abort+0x230>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d04f      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a30      	ldr	r2, [pc, #192]	; (800881c <HAL_DMA_Abort+0x234>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d04a      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a2e      	ldr	r2, [pc, #184]	; (8008820 <HAL_DMA_Abort+0x238>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d045      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a2d      	ldr	r2, [pc, #180]	; (8008824 <HAL_DMA_Abort+0x23c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d040      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a2b      	ldr	r2, [pc, #172]	; (8008828 <HAL_DMA_Abort+0x240>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d03b      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a2a      	ldr	r2, [pc, #168]	; (800882c <HAL_DMA_Abort+0x244>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d036      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a28      	ldr	r2, [pc, #160]	; (8008830 <HAL_DMA_Abort+0x248>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d031      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a27      	ldr	r2, [pc, #156]	; (8008834 <HAL_DMA_Abort+0x24c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d02c      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a25      	ldr	r2, [pc, #148]	; (8008838 <HAL_DMA_Abort+0x250>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d027      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a24      	ldr	r2, [pc, #144]	; (800883c <HAL_DMA_Abort+0x254>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d022      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a22      	ldr	r2, [pc, #136]	; (8008840 <HAL_DMA_Abort+0x258>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d01d      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a21      	ldr	r2, [pc, #132]	; (8008844 <HAL_DMA_Abort+0x25c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d018      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a1f      	ldr	r2, [pc, #124]	; (8008848 <HAL_DMA_Abort+0x260>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d013      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1e      	ldr	r2, [pc, #120]	; (800884c <HAL_DMA_Abort+0x264>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00e      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1c      	ldr	r2, [pc, #112]	; (8008850 <HAL_DMA_Abort+0x268>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d009      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1b      	ldr	r2, [pc, #108]	; (8008854 <HAL_DMA_Abort+0x26c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d004      	beq.n	80087f6 <HAL_DMA_Abort+0x20e>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a19      	ldr	r2, [pc, #100]	; (8008858 <HAL_DMA_Abort+0x270>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d132      	bne.n	800885c <HAL_DMA_Abort+0x274>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e031      	b.n	800885e <HAL_DMA_Abort+0x276>
 80087fa:	bf00      	nop
 80087fc:	40020010 	.word	0x40020010
 8008800:	40020028 	.word	0x40020028
 8008804:	40020040 	.word	0x40020040
 8008808:	40020058 	.word	0x40020058
 800880c:	40020070 	.word	0x40020070
 8008810:	40020088 	.word	0x40020088
 8008814:	400200a0 	.word	0x400200a0
 8008818:	400200b8 	.word	0x400200b8
 800881c:	40020410 	.word	0x40020410
 8008820:	40020428 	.word	0x40020428
 8008824:	40020440 	.word	0x40020440
 8008828:	40020458 	.word	0x40020458
 800882c:	40020470 	.word	0x40020470
 8008830:	40020488 	.word	0x40020488
 8008834:	400204a0 	.word	0x400204a0
 8008838:	400204b8 	.word	0x400204b8
 800883c:	58025408 	.word	0x58025408
 8008840:	5802541c 	.word	0x5802541c
 8008844:	58025430 	.word	0x58025430
 8008848:	58025444 	.word	0x58025444
 800884c:	58025458 	.word	0x58025458
 8008850:	5802546c 	.word	0x5802546c
 8008854:	58025480 	.word	0x58025480
 8008858:	58025494 	.word	0x58025494
 800885c:	2300      	movs	r3, #0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008870:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a6d      	ldr	r2, [pc, #436]	; (8008a2c <HAL_DMA_Abort+0x444>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d04a      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a6b      	ldr	r2, [pc, #428]	; (8008a30 <HAL_DMA_Abort+0x448>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d045      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a6a      	ldr	r2, [pc, #424]	; (8008a34 <HAL_DMA_Abort+0x44c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d040      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a68      	ldr	r2, [pc, #416]	; (8008a38 <HAL_DMA_Abort+0x450>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d03b      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a67      	ldr	r2, [pc, #412]	; (8008a3c <HAL_DMA_Abort+0x454>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d036      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a65      	ldr	r2, [pc, #404]	; (8008a40 <HAL_DMA_Abort+0x458>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d031      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a64      	ldr	r2, [pc, #400]	; (8008a44 <HAL_DMA_Abort+0x45c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d02c      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a62      	ldr	r2, [pc, #392]	; (8008a48 <HAL_DMA_Abort+0x460>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d027      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a61      	ldr	r2, [pc, #388]	; (8008a4c <HAL_DMA_Abort+0x464>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d022      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a5f      	ldr	r2, [pc, #380]	; (8008a50 <HAL_DMA_Abort+0x468>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01d      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a5e      	ldr	r2, [pc, #376]	; (8008a54 <HAL_DMA_Abort+0x46c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d018      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a5c      	ldr	r2, [pc, #368]	; (8008a58 <HAL_DMA_Abort+0x470>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a5b      	ldr	r2, [pc, #364]	; (8008a5c <HAL_DMA_Abort+0x474>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00e      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a59      	ldr	r2, [pc, #356]	; (8008a60 <HAL_DMA_Abort+0x478>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a58      	ldr	r2, [pc, #352]	; (8008a64 <HAL_DMA_Abort+0x47c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_DMA_Abort+0x32a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a56      	ldr	r2, [pc, #344]	; (8008a68 <HAL_DMA_Abort+0x480>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d108      	bne.n	8008924 <HAL_DMA_Abort+0x33c>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0201 	bic.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	e007      	b.n	8008934 <HAL_DMA_Abort+0x34c>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008934:	e013      	b.n	800895e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008936:	f7fc fef1 	bl	800571c <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b05      	cmp	r3, #5
 8008942:	d90c      	bls.n	800895e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2203      	movs	r2, #3
 800894e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e12d      	b.n	8008bba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e5      	bne.n	8008936 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a2f      	ldr	r2, [pc, #188]	; (8008a2c <HAL_DMA_Abort+0x444>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d04a      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a2d      	ldr	r2, [pc, #180]	; (8008a30 <HAL_DMA_Abort+0x448>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d045      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a2c      	ldr	r2, [pc, #176]	; (8008a34 <HAL_DMA_Abort+0x44c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d040      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a2a      	ldr	r2, [pc, #168]	; (8008a38 <HAL_DMA_Abort+0x450>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d03b      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a29      	ldr	r2, [pc, #164]	; (8008a3c <HAL_DMA_Abort+0x454>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d036      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a27      	ldr	r2, [pc, #156]	; (8008a40 <HAL_DMA_Abort+0x458>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d031      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a26      	ldr	r2, [pc, #152]	; (8008a44 <HAL_DMA_Abort+0x45c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d02c      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a24      	ldr	r2, [pc, #144]	; (8008a48 <HAL_DMA_Abort+0x460>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d027      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a23      	ldr	r2, [pc, #140]	; (8008a4c <HAL_DMA_Abort+0x464>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d022      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a21      	ldr	r2, [pc, #132]	; (8008a50 <HAL_DMA_Abort+0x468>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d01d      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a20      	ldr	r2, [pc, #128]	; (8008a54 <HAL_DMA_Abort+0x46c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d018      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <HAL_DMA_Abort+0x470>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1d      	ldr	r2, [pc, #116]	; (8008a5c <HAL_DMA_Abort+0x474>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00e      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <HAL_DMA_Abort+0x478>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d009      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a1a      	ldr	r2, [pc, #104]	; (8008a64 <HAL_DMA_Abort+0x47c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <HAL_DMA_Abort+0x422>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a18      	ldr	r2, [pc, #96]	; (8008a68 <HAL_DMA_Abort+0x480>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d101      	bne.n	8008a0e <HAL_DMA_Abort+0x426>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <HAL_DMA_Abort+0x428>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d02b      	beq.n	8008a6c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a18:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	223f      	movs	r2, #63	; 0x3f
 8008a24:	409a      	lsls	r2, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	609a      	str	r2, [r3, #8]
 8008a2a:	e02a      	b.n	8008a82 <HAL_DMA_Abort+0x49a>
 8008a2c:	40020010 	.word	0x40020010
 8008a30:	40020028 	.word	0x40020028
 8008a34:	40020040 	.word	0x40020040
 8008a38:	40020058 	.word	0x40020058
 8008a3c:	40020070 	.word	0x40020070
 8008a40:	40020088 	.word	0x40020088
 8008a44:	400200a0 	.word	0x400200a0
 8008a48:	400200b8 	.word	0x400200b8
 8008a4c:	40020410 	.word	0x40020410
 8008a50:	40020428 	.word	0x40020428
 8008a54:	40020440 	.word	0x40020440
 8008a58:	40020458 	.word	0x40020458
 8008a5c:	40020470 	.word	0x40020470
 8008a60:	40020488 	.word	0x40020488
 8008a64:	400204a0 	.word	0x400204a0
 8008a68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a70:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	409a      	lsls	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a4f      	ldr	r2, [pc, #316]	; (8008bc4 <HAL_DMA_Abort+0x5dc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d072      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a4d      	ldr	r2, [pc, #308]	; (8008bc8 <HAL_DMA_Abort+0x5e0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d06d      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a4c      	ldr	r2, [pc, #304]	; (8008bcc <HAL_DMA_Abort+0x5e4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d068      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a4a      	ldr	r2, [pc, #296]	; (8008bd0 <HAL_DMA_Abort+0x5e8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d063      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a49      	ldr	r2, [pc, #292]	; (8008bd4 <HAL_DMA_Abort+0x5ec>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d05e      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a47      	ldr	r2, [pc, #284]	; (8008bd8 <HAL_DMA_Abort+0x5f0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d059      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a46      	ldr	r2, [pc, #280]	; (8008bdc <HAL_DMA_Abort+0x5f4>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d054      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a44      	ldr	r2, [pc, #272]	; (8008be0 <HAL_DMA_Abort+0x5f8>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d04f      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a43      	ldr	r2, [pc, #268]	; (8008be4 <HAL_DMA_Abort+0x5fc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d04a      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a41      	ldr	r2, [pc, #260]	; (8008be8 <HAL_DMA_Abort+0x600>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d045      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a40      	ldr	r2, [pc, #256]	; (8008bec <HAL_DMA_Abort+0x604>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d040      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a3e      	ldr	r2, [pc, #248]	; (8008bf0 <HAL_DMA_Abort+0x608>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d03b      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a3d      	ldr	r2, [pc, #244]	; (8008bf4 <HAL_DMA_Abort+0x60c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d036      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a3b      	ldr	r2, [pc, #236]	; (8008bf8 <HAL_DMA_Abort+0x610>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d031      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a3a      	ldr	r2, [pc, #232]	; (8008bfc <HAL_DMA_Abort+0x614>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d02c      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a38      	ldr	r2, [pc, #224]	; (8008c00 <HAL_DMA_Abort+0x618>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d027      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a37      	ldr	r2, [pc, #220]	; (8008c04 <HAL_DMA_Abort+0x61c>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d022      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a35      	ldr	r2, [pc, #212]	; (8008c08 <HAL_DMA_Abort+0x620>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01d      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a34      	ldr	r2, [pc, #208]	; (8008c0c <HAL_DMA_Abort+0x624>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d018      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a32      	ldr	r2, [pc, #200]	; (8008c10 <HAL_DMA_Abort+0x628>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d013      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a31      	ldr	r2, [pc, #196]	; (8008c14 <HAL_DMA_Abort+0x62c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00e      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a2f      	ldr	r2, [pc, #188]	; (8008c18 <HAL_DMA_Abort+0x630>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d009      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a2e      	ldr	r2, [pc, #184]	; (8008c1c <HAL_DMA_Abort+0x634>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d004      	beq.n	8008b72 <HAL_DMA_Abort+0x58a>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a2c      	ldr	r2, [pc, #176]	; (8008c20 <HAL_DMA_Abort+0x638>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d101      	bne.n	8008b76 <HAL_DMA_Abort+0x58e>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <HAL_DMA_Abort+0x590>
 8008b76:	2300      	movs	r3, #0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d015      	beq.n	8008ba8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b84:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00c      	beq.n	8008ba8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b9c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ba6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	40020010 	.word	0x40020010
 8008bc8:	40020028 	.word	0x40020028
 8008bcc:	40020040 	.word	0x40020040
 8008bd0:	40020058 	.word	0x40020058
 8008bd4:	40020070 	.word	0x40020070
 8008bd8:	40020088 	.word	0x40020088
 8008bdc:	400200a0 	.word	0x400200a0
 8008be0:	400200b8 	.word	0x400200b8
 8008be4:	40020410 	.word	0x40020410
 8008be8:	40020428 	.word	0x40020428
 8008bec:	40020440 	.word	0x40020440
 8008bf0:	40020458 	.word	0x40020458
 8008bf4:	40020470 	.word	0x40020470
 8008bf8:	40020488 	.word	0x40020488
 8008bfc:	400204a0 	.word	0x400204a0
 8008c00:	400204b8 	.word	0x400204b8
 8008c04:	58025408 	.word	0x58025408
 8008c08:	5802541c 	.word	0x5802541c
 8008c0c:	58025430 	.word	0x58025430
 8008c10:	58025444 	.word	0x58025444
 8008c14:	58025458 	.word	0x58025458
 8008c18:	5802546c 	.word	0x5802546c
 8008c1c:	58025480 	.word	0x58025480
 8008c20:	58025494 	.word	0x58025494

08008c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e237      	b.n	80090a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d004      	beq.n	8008c4c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2280      	movs	r2, #128	; 0x80
 8008c46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e22c      	b.n	80090a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a5c      	ldr	r2, [pc, #368]	; (8008dc4 <HAL_DMA_Abort_IT+0x1a0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d04a      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a5b      	ldr	r2, [pc, #364]	; (8008dc8 <HAL_DMA_Abort_IT+0x1a4>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d045      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a59      	ldr	r2, [pc, #356]	; (8008dcc <HAL_DMA_Abort_IT+0x1a8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d040      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a58      	ldr	r2, [pc, #352]	; (8008dd0 <HAL_DMA_Abort_IT+0x1ac>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d03b      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a56      	ldr	r2, [pc, #344]	; (8008dd4 <HAL_DMA_Abort_IT+0x1b0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d036      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a55      	ldr	r2, [pc, #340]	; (8008dd8 <HAL_DMA_Abort_IT+0x1b4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d031      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a53      	ldr	r2, [pc, #332]	; (8008ddc <HAL_DMA_Abort_IT+0x1b8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d02c      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a52      	ldr	r2, [pc, #328]	; (8008de0 <HAL_DMA_Abort_IT+0x1bc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d027      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a50      	ldr	r2, [pc, #320]	; (8008de4 <HAL_DMA_Abort_IT+0x1c0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d022      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a4f      	ldr	r2, [pc, #316]	; (8008de8 <HAL_DMA_Abort_IT+0x1c4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d01d      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a4d      	ldr	r2, [pc, #308]	; (8008dec <HAL_DMA_Abort_IT+0x1c8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d018      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a4c      	ldr	r2, [pc, #304]	; (8008df0 <HAL_DMA_Abort_IT+0x1cc>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d013      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a4a      	ldr	r2, [pc, #296]	; (8008df4 <HAL_DMA_Abort_IT+0x1d0>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00e      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a49      	ldr	r2, [pc, #292]	; (8008df8 <HAL_DMA_Abort_IT+0x1d4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d009      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a47      	ldr	r2, [pc, #284]	; (8008dfc <HAL_DMA_Abort_IT+0x1d8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_DMA_Abort_IT+0xc8>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a46      	ldr	r2, [pc, #280]	; (8008e00 <HAL_DMA_Abort_IT+0x1dc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d101      	bne.n	8008cf0 <HAL_DMA_Abort_IT+0xcc>
 8008cec:	2301      	movs	r3, #1
 8008cee:	e000      	b.n	8008cf2 <HAL_DMA_Abort_IT+0xce>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8086 	beq.w	8008e04 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a2f      	ldr	r2, [pc, #188]	; (8008dc4 <HAL_DMA_Abort_IT+0x1a0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d04a      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a2e      	ldr	r2, [pc, #184]	; (8008dc8 <HAL_DMA_Abort_IT+0x1a4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d045      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a2c      	ldr	r2, [pc, #176]	; (8008dcc <HAL_DMA_Abort_IT+0x1a8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d040      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a2b      	ldr	r2, [pc, #172]	; (8008dd0 <HAL_DMA_Abort_IT+0x1ac>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d03b      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a29      	ldr	r2, [pc, #164]	; (8008dd4 <HAL_DMA_Abort_IT+0x1b0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d036      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a28      	ldr	r2, [pc, #160]	; (8008dd8 <HAL_DMA_Abort_IT+0x1b4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d031      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a26      	ldr	r2, [pc, #152]	; (8008ddc <HAL_DMA_Abort_IT+0x1b8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d02c      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a25      	ldr	r2, [pc, #148]	; (8008de0 <HAL_DMA_Abort_IT+0x1bc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d027      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a23      	ldr	r2, [pc, #140]	; (8008de4 <HAL_DMA_Abort_IT+0x1c0>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d022      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a22      	ldr	r2, [pc, #136]	; (8008de8 <HAL_DMA_Abort_IT+0x1c4>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d01d      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a20      	ldr	r2, [pc, #128]	; (8008dec <HAL_DMA_Abort_IT+0x1c8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d018      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <HAL_DMA_Abort_IT+0x1cc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d013      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <HAL_DMA_Abort_IT+0x1d0>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00e      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1c      	ldr	r2, [pc, #112]	; (8008df8 <HAL_DMA_Abort_IT+0x1d4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d009      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1a      	ldr	r2, [pc, #104]	; (8008dfc <HAL_DMA_Abort_IT+0x1d8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d004      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <HAL_DMA_Abort_IT+0x1dc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d108      	bne.n	8008db2 <HAL_DMA_Abort_IT+0x18e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e178      	b.n	80090a4 <HAL_DMA_Abort_IT+0x480>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e16f      	b.n	80090a4 <HAL_DMA_Abort_IT+0x480>
 8008dc4:	40020010 	.word	0x40020010
 8008dc8:	40020028 	.word	0x40020028
 8008dcc:	40020040 	.word	0x40020040
 8008dd0:	40020058 	.word	0x40020058
 8008dd4:	40020070 	.word	0x40020070
 8008dd8:	40020088 	.word	0x40020088
 8008ddc:	400200a0 	.word	0x400200a0
 8008de0:	400200b8 	.word	0x400200b8
 8008de4:	40020410 	.word	0x40020410
 8008de8:	40020428 	.word	0x40020428
 8008dec:	40020440 	.word	0x40020440
 8008df0:	40020458 	.word	0x40020458
 8008df4:	40020470 	.word	0x40020470
 8008df8:	40020488 	.word	0x40020488
 8008dfc:	400204a0 	.word	0x400204a0
 8008e00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 020e 	bic.w	r2, r2, #14
 8008e12:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a6c      	ldr	r2, [pc, #432]	; (8008fcc <HAL_DMA_Abort_IT+0x3a8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d04a      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a6b      	ldr	r2, [pc, #428]	; (8008fd0 <HAL_DMA_Abort_IT+0x3ac>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d045      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a69      	ldr	r2, [pc, #420]	; (8008fd4 <HAL_DMA_Abort_IT+0x3b0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d040      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a68      	ldr	r2, [pc, #416]	; (8008fd8 <HAL_DMA_Abort_IT+0x3b4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d03b      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a66      	ldr	r2, [pc, #408]	; (8008fdc <HAL_DMA_Abort_IT+0x3b8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d036      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a65      	ldr	r2, [pc, #404]	; (8008fe0 <HAL_DMA_Abort_IT+0x3bc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d031      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a63      	ldr	r2, [pc, #396]	; (8008fe4 <HAL_DMA_Abort_IT+0x3c0>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d02c      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a62      	ldr	r2, [pc, #392]	; (8008fe8 <HAL_DMA_Abort_IT+0x3c4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d027      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a60      	ldr	r2, [pc, #384]	; (8008fec <HAL_DMA_Abort_IT+0x3c8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d022      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a5f      	ldr	r2, [pc, #380]	; (8008ff0 <HAL_DMA_Abort_IT+0x3cc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d01d      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a5d      	ldr	r2, [pc, #372]	; (8008ff4 <HAL_DMA_Abort_IT+0x3d0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d018      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a5c      	ldr	r2, [pc, #368]	; (8008ff8 <HAL_DMA_Abort_IT+0x3d4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d013      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a5a      	ldr	r2, [pc, #360]	; (8008ffc <HAL_DMA_Abort_IT+0x3d8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00e      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a59      	ldr	r2, [pc, #356]	; (8009000 <HAL_DMA_Abort_IT+0x3dc>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d009      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a57      	ldr	r2, [pc, #348]	; (8009004 <HAL_DMA_Abort_IT+0x3e0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d004      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x290>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a56      	ldr	r2, [pc, #344]	; (8009008 <HAL_DMA_Abort_IT+0x3e4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d108      	bne.n	8008ec6 <HAL_DMA_Abort_IT+0x2a2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0201 	bic.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e007      	b.n	8008ed6 <HAL_DMA_Abort_IT+0x2b2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0201 	bic.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a3c      	ldr	r2, [pc, #240]	; (8008fcc <HAL_DMA_Abort_IT+0x3a8>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d072      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a3a      	ldr	r2, [pc, #232]	; (8008fd0 <HAL_DMA_Abort_IT+0x3ac>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d06d      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a39      	ldr	r2, [pc, #228]	; (8008fd4 <HAL_DMA_Abort_IT+0x3b0>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d068      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a37      	ldr	r2, [pc, #220]	; (8008fd8 <HAL_DMA_Abort_IT+0x3b4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d063      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a36      	ldr	r2, [pc, #216]	; (8008fdc <HAL_DMA_Abort_IT+0x3b8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d05e      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a34      	ldr	r2, [pc, #208]	; (8008fe0 <HAL_DMA_Abort_IT+0x3bc>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d059      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a33      	ldr	r2, [pc, #204]	; (8008fe4 <HAL_DMA_Abort_IT+0x3c0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d054      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a31      	ldr	r2, [pc, #196]	; (8008fe8 <HAL_DMA_Abort_IT+0x3c4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d04f      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a30      	ldr	r2, [pc, #192]	; (8008fec <HAL_DMA_Abort_IT+0x3c8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d04a      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a2e      	ldr	r2, [pc, #184]	; (8008ff0 <HAL_DMA_Abort_IT+0x3cc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d045      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a2d      	ldr	r2, [pc, #180]	; (8008ff4 <HAL_DMA_Abort_IT+0x3d0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d040      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2b      	ldr	r2, [pc, #172]	; (8008ff8 <HAL_DMA_Abort_IT+0x3d4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d03b      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a2a      	ldr	r2, [pc, #168]	; (8008ffc <HAL_DMA_Abort_IT+0x3d8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d036      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a28      	ldr	r2, [pc, #160]	; (8009000 <HAL_DMA_Abort_IT+0x3dc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d031      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a27      	ldr	r2, [pc, #156]	; (8009004 <HAL_DMA_Abort_IT+0x3e0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d02c      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a25      	ldr	r2, [pc, #148]	; (8009008 <HAL_DMA_Abort_IT+0x3e4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d027      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a24      	ldr	r2, [pc, #144]	; (800900c <HAL_DMA_Abort_IT+0x3e8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d022      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a22      	ldr	r2, [pc, #136]	; (8009010 <HAL_DMA_Abort_IT+0x3ec>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d01d      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a21      	ldr	r2, [pc, #132]	; (8009014 <HAL_DMA_Abort_IT+0x3f0>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d018      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a1f      	ldr	r2, [pc, #124]	; (8009018 <HAL_DMA_Abort_IT+0x3f4>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d013      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a1e      	ldr	r2, [pc, #120]	; (800901c <HAL_DMA_Abort_IT+0x3f8>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00e      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a1c      	ldr	r2, [pc, #112]	; (8009020 <HAL_DMA_Abort_IT+0x3fc>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d009      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a1b      	ldr	r2, [pc, #108]	; (8009024 <HAL_DMA_Abort_IT+0x400>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d004      	beq.n	8008fc6 <HAL_DMA_Abort_IT+0x3a2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a19      	ldr	r2, [pc, #100]	; (8009028 <HAL_DMA_Abort_IT+0x404>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d132      	bne.n	800902c <HAL_DMA_Abort_IT+0x408>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e031      	b.n	800902e <HAL_DMA_Abort_IT+0x40a>
 8008fca:	bf00      	nop
 8008fcc:	40020010 	.word	0x40020010
 8008fd0:	40020028 	.word	0x40020028
 8008fd4:	40020040 	.word	0x40020040
 8008fd8:	40020058 	.word	0x40020058
 8008fdc:	40020070 	.word	0x40020070
 8008fe0:	40020088 	.word	0x40020088
 8008fe4:	400200a0 	.word	0x400200a0
 8008fe8:	400200b8 	.word	0x400200b8
 8008fec:	40020410 	.word	0x40020410
 8008ff0:	40020428 	.word	0x40020428
 8008ff4:	40020440 	.word	0x40020440
 8008ff8:	40020458 	.word	0x40020458
 8008ffc:	40020470 	.word	0x40020470
 8009000:	40020488 	.word	0x40020488
 8009004:	400204a0 	.word	0x400204a0
 8009008:	400204b8 	.word	0x400204b8
 800900c:	58025408 	.word	0x58025408
 8009010:	5802541c 	.word	0x5802541c
 8009014:	58025430 	.word	0x58025430
 8009018:	58025444 	.word	0x58025444
 800901c:	58025458 	.word	0x58025458
 8009020:	5802546c 	.word	0x5802546c
 8009024:	58025480 	.word	0x58025480
 8009028:	58025494 	.word	0x58025494
 800902c:	2300      	movs	r3, #0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d028      	beq.n	8009084 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800903c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009040:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904c:	f003 031f 	and.w	r3, r3, #31
 8009050:	2201      	movs	r2, #1
 8009052:	409a      	lsls	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009060:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009078:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009082:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop

080090b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80090bc:	4b67      	ldr	r3, [pc, #412]	; (800925c <HAL_DMA_IRQHandler+0x1ac>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a67      	ldr	r2, [pc, #412]	; (8009260 <HAL_DMA_IRQHandler+0x1b0>)
 80090c2:	fba2 2303 	umull	r2, r3, r2, r3
 80090c6:	0a9b      	lsrs	r3, r3, #10
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a5f      	ldr	r2, [pc, #380]	; (8009264 <HAL_DMA_IRQHandler+0x1b4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d04a      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a5d      	ldr	r2, [pc, #372]	; (8009268 <HAL_DMA_IRQHandler+0x1b8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d045      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a5c      	ldr	r2, [pc, #368]	; (800926c <HAL_DMA_IRQHandler+0x1bc>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d040      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a5a      	ldr	r2, [pc, #360]	; (8009270 <HAL_DMA_IRQHandler+0x1c0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d03b      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a59      	ldr	r2, [pc, #356]	; (8009274 <HAL_DMA_IRQHandler+0x1c4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d036      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a57      	ldr	r2, [pc, #348]	; (8009278 <HAL_DMA_IRQHandler+0x1c8>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d031      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a56      	ldr	r2, [pc, #344]	; (800927c <HAL_DMA_IRQHandler+0x1cc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d02c      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a54      	ldr	r2, [pc, #336]	; (8009280 <HAL_DMA_IRQHandler+0x1d0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d027      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a53      	ldr	r2, [pc, #332]	; (8009284 <HAL_DMA_IRQHandler+0x1d4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d022      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a51      	ldr	r2, [pc, #324]	; (8009288 <HAL_DMA_IRQHandler+0x1d8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d01d      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a50      	ldr	r2, [pc, #320]	; (800928c <HAL_DMA_IRQHandler+0x1dc>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d018      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a4e      	ldr	r2, [pc, #312]	; (8009290 <HAL_DMA_IRQHandler+0x1e0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a4d      	ldr	r2, [pc, #308]	; (8009294 <HAL_DMA_IRQHandler+0x1e4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d00e      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a4b      	ldr	r2, [pc, #300]	; (8009298 <HAL_DMA_IRQHandler+0x1e8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d009      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a4a      	ldr	r2, [pc, #296]	; (800929c <HAL_DMA_IRQHandler+0x1ec>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d004      	beq.n	8009182 <HAL_DMA_IRQHandler+0xd2>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a48      	ldr	r2, [pc, #288]	; (80092a0 <HAL_DMA_IRQHandler+0x1f0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d101      	bne.n	8009186 <HAL_DMA_IRQHandler+0xd6>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <HAL_DMA_IRQHandler+0xd8>
 8009186:	2300      	movs	r3, #0
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 842b 	beq.w	80099e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009192:	f003 031f 	and.w	r3, r3, #31
 8009196:	2208      	movs	r2, #8
 8009198:	409a      	lsls	r2, r3
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	4013      	ands	r3, r2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 80a2 	beq.w	80092e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a2e      	ldr	r2, [pc, #184]	; (8009264 <HAL_DMA_IRQHandler+0x1b4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d04a      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a2d      	ldr	r2, [pc, #180]	; (8009268 <HAL_DMA_IRQHandler+0x1b8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d045      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a2b      	ldr	r2, [pc, #172]	; (800926c <HAL_DMA_IRQHandler+0x1bc>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d040      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a2a      	ldr	r2, [pc, #168]	; (8009270 <HAL_DMA_IRQHandler+0x1c0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d03b      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a28      	ldr	r2, [pc, #160]	; (8009274 <HAL_DMA_IRQHandler+0x1c4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d036      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a27      	ldr	r2, [pc, #156]	; (8009278 <HAL_DMA_IRQHandler+0x1c8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d031      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a25      	ldr	r2, [pc, #148]	; (800927c <HAL_DMA_IRQHandler+0x1cc>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d02c      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a24      	ldr	r2, [pc, #144]	; (8009280 <HAL_DMA_IRQHandler+0x1d0>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d027      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a22      	ldr	r2, [pc, #136]	; (8009284 <HAL_DMA_IRQHandler+0x1d4>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d022      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a21      	ldr	r2, [pc, #132]	; (8009288 <HAL_DMA_IRQHandler+0x1d8>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d01d      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1f      	ldr	r2, [pc, #124]	; (800928c <HAL_DMA_IRQHandler+0x1dc>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d018      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1e      	ldr	r2, [pc, #120]	; (8009290 <HAL_DMA_IRQHandler+0x1e0>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d013      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a1c      	ldr	r2, [pc, #112]	; (8009294 <HAL_DMA_IRQHandler+0x1e4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00e      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <HAL_DMA_IRQHandler+0x1e8>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d009      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a19      	ldr	r2, [pc, #100]	; (800929c <HAL_DMA_IRQHandler+0x1ec>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d004      	beq.n	8009244 <HAL_DMA_IRQHandler+0x194>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <HAL_DMA_IRQHandler+0x1f0>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d12f      	bne.n	80092a4 <HAL_DMA_IRQHandler+0x1f4>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b00      	cmp	r3, #0
 8009250:	bf14      	ite	ne
 8009252:	2301      	movne	r3, #1
 8009254:	2300      	moveq	r3, #0
 8009256:	b2db      	uxtb	r3, r3
 8009258:	e02e      	b.n	80092b8 <HAL_DMA_IRQHandler+0x208>
 800925a:	bf00      	nop
 800925c:	240000bc 	.word	0x240000bc
 8009260:	1b4e81b5 	.word	0x1b4e81b5
 8009264:	40020010 	.word	0x40020010
 8009268:	40020028 	.word	0x40020028
 800926c:	40020040 	.word	0x40020040
 8009270:	40020058 	.word	0x40020058
 8009274:	40020070 	.word	0x40020070
 8009278:	40020088 	.word	0x40020088
 800927c:	400200a0 	.word	0x400200a0
 8009280:	400200b8 	.word	0x400200b8
 8009284:	40020410 	.word	0x40020410
 8009288:	40020428 	.word	0x40020428
 800928c:	40020440 	.word	0x40020440
 8009290:	40020458 	.word	0x40020458
 8009294:	40020470 	.word	0x40020470
 8009298:	40020488 	.word	0x40020488
 800929c:	400204a0 	.word	0x400204a0
 80092a0:	400204b8 	.word	0x400204b8
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0308 	and.w	r3, r3, #8
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bf14      	ite	ne
 80092b2:	2301      	movne	r3, #1
 80092b4:	2300      	moveq	r3, #0
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d015      	beq.n	80092e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0204 	bic.w	r2, r2, #4
 80092ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d0:	f003 031f 	and.w	r3, r3, #31
 80092d4:	2208      	movs	r2, #8
 80092d6:	409a      	lsls	r2, r3
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e0:	f043 0201 	orr.w	r2, r3, #1
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ec:	f003 031f 	and.w	r3, r3, #31
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d06e      	beq.n	80093dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a69      	ldr	r2, [pc, #420]	; (80094a8 <HAL_DMA_IRQHandler+0x3f8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d04a      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a67      	ldr	r2, [pc, #412]	; (80094ac <HAL_DMA_IRQHandler+0x3fc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d045      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a66      	ldr	r2, [pc, #408]	; (80094b0 <HAL_DMA_IRQHandler+0x400>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d040      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a64      	ldr	r2, [pc, #400]	; (80094b4 <HAL_DMA_IRQHandler+0x404>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d03b      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a63      	ldr	r2, [pc, #396]	; (80094b8 <HAL_DMA_IRQHandler+0x408>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d036      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a61      	ldr	r2, [pc, #388]	; (80094bc <HAL_DMA_IRQHandler+0x40c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d031      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a60      	ldr	r2, [pc, #384]	; (80094c0 <HAL_DMA_IRQHandler+0x410>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d02c      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a5e      	ldr	r2, [pc, #376]	; (80094c4 <HAL_DMA_IRQHandler+0x414>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d027      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a5d      	ldr	r2, [pc, #372]	; (80094c8 <HAL_DMA_IRQHandler+0x418>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d022      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a5b      	ldr	r2, [pc, #364]	; (80094cc <HAL_DMA_IRQHandler+0x41c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d01d      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a5a      	ldr	r2, [pc, #360]	; (80094d0 <HAL_DMA_IRQHandler+0x420>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d018      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a58      	ldr	r2, [pc, #352]	; (80094d4 <HAL_DMA_IRQHandler+0x424>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d013      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a57      	ldr	r2, [pc, #348]	; (80094d8 <HAL_DMA_IRQHandler+0x428>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00e      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a55      	ldr	r2, [pc, #340]	; (80094dc <HAL_DMA_IRQHandler+0x42c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d009      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a54      	ldr	r2, [pc, #336]	; (80094e0 <HAL_DMA_IRQHandler+0x430>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d004      	beq.n	800939e <HAL_DMA_IRQHandler+0x2ee>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a52      	ldr	r2, [pc, #328]	; (80094e4 <HAL_DMA_IRQHandler+0x434>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d10a      	bne.n	80093b4 <HAL_DMA_IRQHandler+0x304>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bf14      	ite	ne
 80093ac:	2301      	movne	r3, #1
 80093ae:	2300      	moveq	r3, #0
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	e003      	b.n	80093bc <HAL_DMA_IRQHandler+0x30c>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2300      	movs	r3, #0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00d      	beq.n	80093dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c4:	f003 031f 	and.w	r3, r3, #31
 80093c8:	2201      	movs	r2, #1
 80093ca:	409a      	lsls	r2, r3
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d4:	f043 0202 	orr.w	r2, r3, #2
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e0:	f003 031f 	and.w	r3, r3, #31
 80093e4:	2204      	movs	r2, #4
 80093e6:	409a      	lsls	r2, r3
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 808f 	beq.w	8009510 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2c      	ldr	r2, [pc, #176]	; (80094a8 <HAL_DMA_IRQHandler+0x3f8>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d04a      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a2a      	ldr	r2, [pc, #168]	; (80094ac <HAL_DMA_IRQHandler+0x3fc>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d045      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <HAL_DMA_IRQHandler+0x400>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d040      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a27      	ldr	r2, [pc, #156]	; (80094b4 <HAL_DMA_IRQHandler+0x404>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d03b      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a26      	ldr	r2, [pc, #152]	; (80094b8 <HAL_DMA_IRQHandler+0x408>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d036      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a24      	ldr	r2, [pc, #144]	; (80094bc <HAL_DMA_IRQHandler+0x40c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d031      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a23      	ldr	r2, [pc, #140]	; (80094c0 <HAL_DMA_IRQHandler+0x410>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d02c      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a21      	ldr	r2, [pc, #132]	; (80094c4 <HAL_DMA_IRQHandler+0x414>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d027      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a20      	ldr	r2, [pc, #128]	; (80094c8 <HAL_DMA_IRQHandler+0x418>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d022      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a1e      	ldr	r2, [pc, #120]	; (80094cc <HAL_DMA_IRQHandler+0x41c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d01d      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a1d      	ldr	r2, [pc, #116]	; (80094d0 <HAL_DMA_IRQHandler+0x420>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d018      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a1b      	ldr	r2, [pc, #108]	; (80094d4 <HAL_DMA_IRQHandler+0x424>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d013      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a1a      	ldr	r2, [pc, #104]	; (80094d8 <HAL_DMA_IRQHandler+0x428>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d00e      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a18      	ldr	r2, [pc, #96]	; (80094dc <HAL_DMA_IRQHandler+0x42c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d009      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a17      	ldr	r2, [pc, #92]	; (80094e0 <HAL_DMA_IRQHandler+0x430>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d004      	beq.n	8009492 <HAL_DMA_IRQHandler+0x3e2>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a15      	ldr	r2, [pc, #84]	; (80094e4 <HAL_DMA_IRQHandler+0x434>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d12a      	bne.n	80094e8 <HAL_DMA_IRQHandler+0x438>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf14      	ite	ne
 80094a0:	2301      	movne	r3, #1
 80094a2:	2300      	moveq	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	e023      	b.n	80094f0 <HAL_DMA_IRQHandler+0x440>
 80094a8:	40020010 	.word	0x40020010
 80094ac:	40020028 	.word	0x40020028
 80094b0:	40020040 	.word	0x40020040
 80094b4:	40020058 	.word	0x40020058
 80094b8:	40020070 	.word	0x40020070
 80094bc:	40020088 	.word	0x40020088
 80094c0:	400200a0 	.word	0x400200a0
 80094c4:	400200b8 	.word	0x400200b8
 80094c8:	40020410 	.word	0x40020410
 80094cc:	40020428 	.word	0x40020428
 80094d0:	40020440 	.word	0x40020440
 80094d4:	40020458 	.word	0x40020458
 80094d8:	40020470 	.word	0x40020470
 80094dc:	40020488 	.word	0x40020488
 80094e0:	400204a0 	.word	0x400204a0
 80094e4:	400204b8 	.word	0x400204b8
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00d      	beq.n	8009510 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094f8:	f003 031f 	and.w	r3, r3, #31
 80094fc:	2204      	movs	r2, #4
 80094fe:	409a      	lsls	r2, r3
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009508:	f043 0204 	orr.w	r2, r3, #4
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009514:	f003 031f 	and.w	r3, r3, #31
 8009518:	2210      	movs	r2, #16
 800951a:	409a      	lsls	r2, r3
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	4013      	ands	r3, r2
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 80a6 	beq.w	8009672 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a85      	ldr	r2, [pc, #532]	; (8009740 <HAL_DMA_IRQHandler+0x690>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d04a      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a83      	ldr	r2, [pc, #524]	; (8009744 <HAL_DMA_IRQHandler+0x694>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d045      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a82      	ldr	r2, [pc, #520]	; (8009748 <HAL_DMA_IRQHandler+0x698>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d040      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a80      	ldr	r2, [pc, #512]	; (800974c <HAL_DMA_IRQHandler+0x69c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d03b      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a7f      	ldr	r2, [pc, #508]	; (8009750 <HAL_DMA_IRQHandler+0x6a0>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d036      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a7d      	ldr	r2, [pc, #500]	; (8009754 <HAL_DMA_IRQHandler+0x6a4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d031      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a7c      	ldr	r2, [pc, #496]	; (8009758 <HAL_DMA_IRQHandler+0x6a8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d02c      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a7a      	ldr	r2, [pc, #488]	; (800975c <HAL_DMA_IRQHandler+0x6ac>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d027      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a79      	ldr	r2, [pc, #484]	; (8009760 <HAL_DMA_IRQHandler+0x6b0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d022      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a77      	ldr	r2, [pc, #476]	; (8009764 <HAL_DMA_IRQHandler+0x6b4>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d01d      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a76      	ldr	r2, [pc, #472]	; (8009768 <HAL_DMA_IRQHandler+0x6b8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d018      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a74      	ldr	r2, [pc, #464]	; (800976c <HAL_DMA_IRQHandler+0x6bc>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d013      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a73      	ldr	r2, [pc, #460]	; (8009770 <HAL_DMA_IRQHandler+0x6c0>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00e      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a71      	ldr	r2, [pc, #452]	; (8009774 <HAL_DMA_IRQHandler+0x6c4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d009      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a70      	ldr	r2, [pc, #448]	; (8009778 <HAL_DMA_IRQHandler+0x6c8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d004      	beq.n	80095c6 <HAL_DMA_IRQHandler+0x516>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a6e      	ldr	r2, [pc, #440]	; (800977c <HAL_DMA_IRQHandler+0x6cc>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d10a      	bne.n	80095dc <HAL_DMA_IRQHandler+0x52c>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0308 	and.w	r3, r3, #8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	bf14      	ite	ne
 80095d4:	2301      	movne	r3, #1
 80095d6:	2300      	moveq	r3, #0
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	e009      	b.n	80095f0 <HAL_DMA_IRQHandler+0x540>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0304 	and.w	r3, r3, #4
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bf14      	ite	ne
 80095ea:	2301      	movne	r3, #1
 80095ec:	2300      	moveq	r3, #0
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d03e      	beq.n	8009672 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	2210      	movs	r2, #16
 80095fe:	409a      	lsls	r2, r3
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d018      	beq.n	8009644 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d024      	beq.n	8009672 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	4798      	blx	r3
 8009630:	e01f      	b.n	8009672 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009636:	2b00      	cmp	r3, #0
 8009638:	d01b      	beq.n	8009672 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
 8009642:	e016      	b.n	8009672 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964e:	2b00      	cmp	r3, #0
 8009650:	d107      	bne.n	8009662 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0208 	bic.w	r2, r2, #8
 8009660:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009676:	f003 031f 	and.w	r3, r3, #31
 800967a:	2220      	movs	r2, #32
 800967c:	409a      	lsls	r2, r3
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	4013      	ands	r3, r2
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 8110 	beq.w	80098a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a2c      	ldr	r2, [pc, #176]	; (8009740 <HAL_DMA_IRQHandler+0x690>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d04a      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a2b      	ldr	r2, [pc, #172]	; (8009744 <HAL_DMA_IRQHandler+0x694>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d045      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a29      	ldr	r2, [pc, #164]	; (8009748 <HAL_DMA_IRQHandler+0x698>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d040      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a28      	ldr	r2, [pc, #160]	; (800974c <HAL_DMA_IRQHandler+0x69c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d03b      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a26      	ldr	r2, [pc, #152]	; (8009750 <HAL_DMA_IRQHandler+0x6a0>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d036      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a25      	ldr	r2, [pc, #148]	; (8009754 <HAL_DMA_IRQHandler+0x6a4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d031      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a23      	ldr	r2, [pc, #140]	; (8009758 <HAL_DMA_IRQHandler+0x6a8>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d02c      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a22      	ldr	r2, [pc, #136]	; (800975c <HAL_DMA_IRQHandler+0x6ac>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d027      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a20      	ldr	r2, [pc, #128]	; (8009760 <HAL_DMA_IRQHandler+0x6b0>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d022      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a1f      	ldr	r2, [pc, #124]	; (8009764 <HAL_DMA_IRQHandler+0x6b4>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d01d      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a1d      	ldr	r2, [pc, #116]	; (8009768 <HAL_DMA_IRQHandler+0x6b8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d018      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a1c      	ldr	r2, [pc, #112]	; (800976c <HAL_DMA_IRQHandler+0x6bc>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d013      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a1a      	ldr	r2, [pc, #104]	; (8009770 <HAL_DMA_IRQHandler+0x6c0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00e      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a19      	ldr	r2, [pc, #100]	; (8009774 <HAL_DMA_IRQHandler+0x6c4>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d009      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a17      	ldr	r2, [pc, #92]	; (8009778 <HAL_DMA_IRQHandler+0x6c8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d004      	beq.n	8009728 <HAL_DMA_IRQHandler+0x678>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a16      	ldr	r2, [pc, #88]	; (800977c <HAL_DMA_IRQHandler+0x6cc>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d12b      	bne.n	8009780 <HAL_DMA_IRQHandler+0x6d0>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0310 	and.w	r3, r3, #16
 8009732:	2b00      	cmp	r3, #0
 8009734:	bf14      	ite	ne
 8009736:	2301      	movne	r3, #1
 8009738:	2300      	moveq	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	e02a      	b.n	8009794 <HAL_DMA_IRQHandler+0x6e4>
 800973e:	bf00      	nop
 8009740:	40020010 	.word	0x40020010
 8009744:	40020028 	.word	0x40020028
 8009748:	40020040 	.word	0x40020040
 800974c:	40020058 	.word	0x40020058
 8009750:	40020070 	.word	0x40020070
 8009754:	40020088 	.word	0x40020088
 8009758:	400200a0 	.word	0x400200a0
 800975c:	400200b8 	.word	0x400200b8
 8009760:	40020410 	.word	0x40020410
 8009764:	40020428 	.word	0x40020428
 8009768:	40020440 	.word	0x40020440
 800976c:	40020458 	.word	0x40020458
 8009770:	40020470 	.word	0x40020470
 8009774:	40020488 	.word	0x40020488
 8009778:	400204a0 	.word	0x400204a0
 800977c:	400204b8 	.word	0x400204b8
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	bf14      	ite	ne
 800978e:	2301      	movne	r3, #1
 8009790:	2300      	moveq	r3, #0
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 8087 	beq.w	80098a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800979e:	f003 031f 	and.w	r3, r3, #31
 80097a2:	2220      	movs	r2, #32
 80097a4:	409a      	lsls	r2, r3
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d139      	bne.n	800982a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0216 	bic.w	r2, r2, #22
 80097c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	695a      	ldr	r2, [r3, #20]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d103      	bne.n	80097e6 <HAL_DMA_IRQHandler+0x736>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0208 	bic.w	r2, r2, #8
 80097f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	223f      	movs	r2, #63	; 0x3f
 8009800:	409a      	lsls	r2, r3
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 834a 	beq.w	8009eb4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	4798      	blx	r3
          }
          return;
 8009828:	e344      	b.n	8009eb4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d018      	beq.n	800986a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d108      	bne.n	8009858 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	2b00      	cmp	r3, #0
 800984c:	d02c      	beq.n	80098a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
 8009856:	e027      	b.n	80098a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985c:	2b00      	cmp	r3, #0
 800985e:	d023      	beq.n	80098a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
 8009868:	e01e      	b.n	80098a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10f      	bne.n	8009898 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0210 	bic.w	r2, r2, #16
 8009886:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8306 	beq.w	8009ebe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 8088 	beq.w	80099d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2204      	movs	r2, #4
 80098c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a7a      	ldr	r2, [pc, #488]	; (8009ab8 <HAL_DMA_IRQHandler+0xa08>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d04a      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a79      	ldr	r2, [pc, #484]	; (8009abc <HAL_DMA_IRQHandler+0xa0c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d045      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a77      	ldr	r2, [pc, #476]	; (8009ac0 <HAL_DMA_IRQHandler+0xa10>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d040      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a76      	ldr	r2, [pc, #472]	; (8009ac4 <HAL_DMA_IRQHandler+0xa14>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d03b      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a74      	ldr	r2, [pc, #464]	; (8009ac8 <HAL_DMA_IRQHandler+0xa18>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d036      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a73      	ldr	r2, [pc, #460]	; (8009acc <HAL_DMA_IRQHandler+0xa1c>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d031      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a71      	ldr	r2, [pc, #452]	; (8009ad0 <HAL_DMA_IRQHandler+0xa20>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d02c      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a70      	ldr	r2, [pc, #448]	; (8009ad4 <HAL_DMA_IRQHandler+0xa24>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d027      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a6e      	ldr	r2, [pc, #440]	; (8009ad8 <HAL_DMA_IRQHandler+0xa28>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d022      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a6d      	ldr	r2, [pc, #436]	; (8009adc <HAL_DMA_IRQHandler+0xa2c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d01d      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a6b      	ldr	r2, [pc, #428]	; (8009ae0 <HAL_DMA_IRQHandler+0xa30>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d018      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a6a      	ldr	r2, [pc, #424]	; (8009ae4 <HAL_DMA_IRQHandler+0xa34>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d013      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a68      	ldr	r2, [pc, #416]	; (8009ae8 <HAL_DMA_IRQHandler+0xa38>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00e      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a67      	ldr	r2, [pc, #412]	; (8009aec <HAL_DMA_IRQHandler+0xa3c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d009      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a65      	ldr	r2, [pc, #404]	; (8009af0 <HAL_DMA_IRQHandler+0xa40>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d004      	beq.n	8009968 <HAL_DMA_IRQHandler+0x8b8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a64      	ldr	r2, [pc, #400]	; (8009af4 <HAL_DMA_IRQHandler+0xa44>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d108      	bne.n	800997a <HAL_DMA_IRQHandler+0x8ca>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0201 	bic.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e007      	b.n	800998a <HAL_DMA_IRQHandler+0x8da>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0201 	bic.w	r2, r2, #1
 8009988:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3301      	adds	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009992:	429a      	cmp	r2, r3
 8009994:	d307      	bcc.n	80099a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f2      	bne.n	800998a <HAL_DMA_IRQHandler+0x8da>
 80099a4:	e000      	b.n	80099a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80099a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2203      	movs	r2, #3
 80099ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80099be:	e003      	b.n	80099c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 8272 	beq.w	8009ebe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	4798      	blx	r3
 80099e2:	e26c      	b.n	8009ebe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a43      	ldr	r2, [pc, #268]	; (8009af8 <HAL_DMA_IRQHandler+0xa48>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d022      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x984>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a42      	ldr	r2, [pc, #264]	; (8009afc <HAL_DMA_IRQHandler+0xa4c>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d01d      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x984>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a40      	ldr	r2, [pc, #256]	; (8009b00 <HAL_DMA_IRQHandler+0xa50>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d018      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x984>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a3f      	ldr	r2, [pc, #252]	; (8009b04 <HAL_DMA_IRQHandler+0xa54>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d013      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x984>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a3d      	ldr	r2, [pc, #244]	; (8009b08 <HAL_DMA_IRQHandler+0xa58>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d00e      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x984>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a3c      	ldr	r2, [pc, #240]	; (8009b0c <HAL_DMA_IRQHandler+0xa5c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d009      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x984>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a3a      	ldr	r2, [pc, #232]	; (8009b10 <HAL_DMA_IRQHandler+0xa60>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x984>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a39      	ldr	r2, [pc, #228]	; (8009b14 <HAL_DMA_IRQHandler+0xa64>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d101      	bne.n	8009a38 <HAL_DMA_IRQHandler+0x988>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <HAL_DMA_IRQHandler+0x98a>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 823f 	beq.w	8009ebe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4c:	f003 031f 	and.w	r3, r3, #31
 8009a50:	2204      	movs	r2, #4
 8009a52:	409a      	lsls	r2, r3
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	4013      	ands	r3, r2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 80cd 	beq.w	8009bf8 <HAL_DMA_IRQHandler+0xb48>
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f003 0304 	and.w	r3, r3, #4
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 80c7 	beq.w	8009bf8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6e:	f003 031f 	and.w	r3, r3, #31
 8009a72:	2204      	movs	r2, #4
 8009a74:	409a      	lsls	r2, r3
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d049      	beq.n	8009b18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 8210 	beq.w	8009eb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009aa0:	e20a      	b.n	8009eb8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 8206 	beq.w	8009eb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ab4:	e200      	b.n	8009eb8 <HAL_DMA_IRQHandler+0xe08>
 8009ab6:	bf00      	nop
 8009ab8:	40020010 	.word	0x40020010
 8009abc:	40020028 	.word	0x40020028
 8009ac0:	40020040 	.word	0x40020040
 8009ac4:	40020058 	.word	0x40020058
 8009ac8:	40020070 	.word	0x40020070
 8009acc:	40020088 	.word	0x40020088
 8009ad0:	400200a0 	.word	0x400200a0
 8009ad4:	400200b8 	.word	0x400200b8
 8009ad8:	40020410 	.word	0x40020410
 8009adc:	40020428 	.word	0x40020428
 8009ae0:	40020440 	.word	0x40020440
 8009ae4:	40020458 	.word	0x40020458
 8009ae8:	40020470 	.word	0x40020470
 8009aec:	40020488 	.word	0x40020488
 8009af0:	400204a0 	.word	0x400204a0
 8009af4:	400204b8 	.word	0x400204b8
 8009af8:	58025408 	.word	0x58025408
 8009afc:	5802541c 	.word	0x5802541c
 8009b00:	58025430 	.word	0x58025430
 8009b04:	58025444 	.word	0x58025444
 8009b08:	58025458 	.word	0x58025458
 8009b0c:	5802546c 	.word	0x5802546c
 8009b10:	58025480 	.word	0x58025480
 8009b14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d160      	bne.n	8009be4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a7f      	ldr	r2, [pc, #508]	; (8009d24 <HAL_DMA_IRQHandler+0xc74>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d04a      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a7d      	ldr	r2, [pc, #500]	; (8009d28 <HAL_DMA_IRQHandler+0xc78>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d045      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a7c      	ldr	r2, [pc, #496]	; (8009d2c <HAL_DMA_IRQHandler+0xc7c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d040      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a7a      	ldr	r2, [pc, #488]	; (8009d30 <HAL_DMA_IRQHandler+0xc80>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d03b      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a79      	ldr	r2, [pc, #484]	; (8009d34 <HAL_DMA_IRQHandler+0xc84>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d036      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a77      	ldr	r2, [pc, #476]	; (8009d38 <HAL_DMA_IRQHandler+0xc88>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d031      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a76      	ldr	r2, [pc, #472]	; (8009d3c <HAL_DMA_IRQHandler+0xc8c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d02c      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a74      	ldr	r2, [pc, #464]	; (8009d40 <HAL_DMA_IRQHandler+0xc90>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d027      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a73      	ldr	r2, [pc, #460]	; (8009d44 <HAL_DMA_IRQHandler+0xc94>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d022      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a71      	ldr	r2, [pc, #452]	; (8009d48 <HAL_DMA_IRQHandler+0xc98>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d01d      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a70      	ldr	r2, [pc, #448]	; (8009d4c <HAL_DMA_IRQHandler+0xc9c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d018      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a6e      	ldr	r2, [pc, #440]	; (8009d50 <HAL_DMA_IRQHandler+0xca0>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d013      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a6d      	ldr	r2, [pc, #436]	; (8009d54 <HAL_DMA_IRQHandler+0xca4>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00e      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a6b      	ldr	r2, [pc, #428]	; (8009d58 <HAL_DMA_IRQHandler+0xca8>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d009      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a6a      	ldr	r2, [pc, #424]	; (8009d5c <HAL_DMA_IRQHandler+0xcac>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d004      	beq.n	8009bc2 <HAL_DMA_IRQHandler+0xb12>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a68      	ldr	r2, [pc, #416]	; (8009d60 <HAL_DMA_IRQHandler+0xcb0>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d108      	bne.n	8009bd4 <HAL_DMA_IRQHandler+0xb24>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0208 	bic.w	r2, r2, #8
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	e007      	b.n	8009be4 <HAL_DMA_IRQHandler+0xb34>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0204 	bic.w	r2, r2, #4
 8009be2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8165 	beq.w	8009eb8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bf6:	e15f      	b.n	8009eb8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	2202      	movs	r2, #2
 8009c02:	409a      	lsls	r2, r3
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	4013      	ands	r3, r2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 80c5 	beq.w	8009d98 <HAL_DMA_IRQHandler+0xce8>
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 80bf 	beq.w	8009d98 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1e:	f003 031f 	and.w	r3, r3, #31
 8009c22:	2202      	movs	r2, #2
 8009c24:	409a      	lsls	r2, r3
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d018      	beq.n	8009c66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 813a 	beq.w	8009ebc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c50:	e134      	b.n	8009ebc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8130 	beq.w	8009ebc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c64:	e12a      	b.n	8009ebc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f003 0320 	and.w	r3, r3, #32
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 8089 	bne.w	8009d84 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a2b      	ldr	r2, [pc, #172]	; (8009d24 <HAL_DMA_IRQHandler+0xc74>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d04a      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a29      	ldr	r2, [pc, #164]	; (8009d28 <HAL_DMA_IRQHandler+0xc78>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d045      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a28      	ldr	r2, [pc, #160]	; (8009d2c <HAL_DMA_IRQHandler+0xc7c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d040      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a26      	ldr	r2, [pc, #152]	; (8009d30 <HAL_DMA_IRQHandler+0xc80>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d03b      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a25      	ldr	r2, [pc, #148]	; (8009d34 <HAL_DMA_IRQHandler+0xc84>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d036      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a23      	ldr	r2, [pc, #140]	; (8009d38 <HAL_DMA_IRQHandler+0xc88>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d031      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a22      	ldr	r2, [pc, #136]	; (8009d3c <HAL_DMA_IRQHandler+0xc8c>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d02c      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a20      	ldr	r2, [pc, #128]	; (8009d40 <HAL_DMA_IRQHandler+0xc90>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d027      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a1f      	ldr	r2, [pc, #124]	; (8009d44 <HAL_DMA_IRQHandler+0xc94>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d022      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a1d      	ldr	r2, [pc, #116]	; (8009d48 <HAL_DMA_IRQHandler+0xc98>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d01d      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a1c      	ldr	r2, [pc, #112]	; (8009d4c <HAL_DMA_IRQHandler+0xc9c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d018      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a1a      	ldr	r2, [pc, #104]	; (8009d50 <HAL_DMA_IRQHandler+0xca0>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d013      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a19      	ldr	r2, [pc, #100]	; (8009d54 <HAL_DMA_IRQHandler+0xca4>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d00e      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a17      	ldr	r2, [pc, #92]	; (8009d58 <HAL_DMA_IRQHandler+0xca8>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d009      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a16      	ldr	r2, [pc, #88]	; (8009d5c <HAL_DMA_IRQHandler+0xcac>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d004      	beq.n	8009d12 <HAL_DMA_IRQHandler+0xc62>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a14      	ldr	r2, [pc, #80]	; (8009d60 <HAL_DMA_IRQHandler+0xcb0>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d128      	bne.n	8009d64 <HAL_DMA_IRQHandler+0xcb4>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 0214 	bic.w	r2, r2, #20
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	e027      	b.n	8009d74 <HAL_DMA_IRQHandler+0xcc4>
 8009d24:	40020010 	.word	0x40020010
 8009d28:	40020028 	.word	0x40020028
 8009d2c:	40020040 	.word	0x40020040
 8009d30:	40020058 	.word	0x40020058
 8009d34:	40020070 	.word	0x40020070
 8009d38:	40020088 	.word	0x40020088
 8009d3c:	400200a0 	.word	0x400200a0
 8009d40:	400200b8 	.word	0x400200b8
 8009d44:	40020410 	.word	0x40020410
 8009d48:	40020428 	.word	0x40020428
 8009d4c:	40020440 	.word	0x40020440
 8009d50:	40020458 	.word	0x40020458
 8009d54:	40020470 	.word	0x40020470
 8009d58:	40020488 	.word	0x40020488
 8009d5c:	400204a0 	.word	0x400204a0
 8009d60:	400204b8 	.word	0x400204b8
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 020a 	bic.w	r2, r2, #10
 8009d72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 8097 	beq.w	8009ebc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d96:	e091      	b.n	8009ebc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9c:	f003 031f 	and.w	r3, r3, #31
 8009da0:	2208      	movs	r2, #8
 8009da2:	409a      	lsls	r2, r3
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8088 	beq.w	8009ebe <HAL_DMA_IRQHandler+0xe0e>
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 8082 	beq.w	8009ebe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a41      	ldr	r2, [pc, #260]	; (8009ec4 <HAL_DMA_IRQHandler+0xe14>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d04a      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a3f      	ldr	r2, [pc, #252]	; (8009ec8 <HAL_DMA_IRQHandler+0xe18>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d045      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a3e      	ldr	r2, [pc, #248]	; (8009ecc <HAL_DMA_IRQHandler+0xe1c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d040      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a3c      	ldr	r2, [pc, #240]	; (8009ed0 <HAL_DMA_IRQHandler+0xe20>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d03b      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a3b      	ldr	r2, [pc, #236]	; (8009ed4 <HAL_DMA_IRQHandler+0xe24>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d036      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a39      	ldr	r2, [pc, #228]	; (8009ed8 <HAL_DMA_IRQHandler+0xe28>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d031      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a38      	ldr	r2, [pc, #224]	; (8009edc <HAL_DMA_IRQHandler+0xe2c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d02c      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a36      	ldr	r2, [pc, #216]	; (8009ee0 <HAL_DMA_IRQHandler+0xe30>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d027      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a35      	ldr	r2, [pc, #212]	; (8009ee4 <HAL_DMA_IRQHandler+0xe34>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d022      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a33      	ldr	r2, [pc, #204]	; (8009ee8 <HAL_DMA_IRQHandler+0xe38>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d01d      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a32      	ldr	r2, [pc, #200]	; (8009eec <HAL_DMA_IRQHandler+0xe3c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d018      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a30      	ldr	r2, [pc, #192]	; (8009ef0 <HAL_DMA_IRQHandler+0xe40>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2f      	ldr	r2, [pc, #188]	; (8009ef4 <HAL_DMA_IRQHandler+0xe44>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d00e      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a2d      	ldr	r2, [pc, #180]	; (8009ef8 <HAL_DMA_IRQHandler+0xe48>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d009      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a2c      	ldr	r2, [pc, #176]	; (8009efc <HAL_DMA_IRQHandler+0xe4c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d004      	beq.n	8009e5a <HAL_DMA_IRQHandler+0xdaa>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a2a      	ldr	r2, [pc, #168]	; (8009f00 <HAL_DMA_IRQHandler+0xe50>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d108      	bne.n	8009e6c <HAL_DMA_IRQHandler+0xdbc>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 021c 	bic.w	r2, r2, #28
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e007      	b.n	8009e7c <HAL_DMA_IRQHandler+0xdcc>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 020e 	bic.w	r2, r2, #14
 8009e7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e80:	f003 031f 	and.w	r3, r3, #31
 8009e84:	2201      	movs	r2, #1
 8009e86:	409a      	lsls	r2, r3
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
 8009eb2:	e004      	b.n	8009ebe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009eb4:	bf00      	nop
 8009eb6:	e002      	b.n	8009ebe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009eb8:	bf00      	nop
 8009eba:	e000      	b.n	8009ebe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ebc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009ebe:	3728      	adds	r7, #40	; 0x28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	40020010 	.word	0x40020010
 8009ec8:	40020028 	.word	0x40020028
 8009ecc:	40020040 	.word	0x40020040
 8009ed0:	40020058 	.word	0x40020058
 8009ed4:	40020070 	.word	0x40020070
 8009ed8:	40020088 	.word	0x40020088
 8009edc:	400200a0 	.word	0x400200a0
 8009ee0:	400200b8 	.word	0x400200b8
 8009ee4:	40020410 	.word	0x40020410
 8009ee8:	40020428 	.word	0x40020428
 8009eec:	40020440 	.word	0x40020440
 8009ef0:	40020458 	.word	0x40020458
 8009ef4:	40020470 	.word	0x40020470
 8009ef8:	40020488 	.word	0x40020488
 8009efc:	400204a0 	.word	0x400204a0
 8009f00:	400204b8 	.word	0x400204b8

08009f04 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f12:	b2db      	uxtb	r3, r3
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f4a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f50:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a7f      	ldr	r2, [pc, #508]	; (800a154 <DMA_SetConfig+0x21c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d072      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a7d      	ldr	r2, [pc, #500]	; (800a158 <DMA_SetConfig+0x220>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d06d      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a7c      	ldr	r2, [pc, #496]	; (800a15c <DMA_SetConfig+0x224>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d068      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a7a      	ldr	r2, [pc, #488]	; (800a160 <DMA_SetConfig+0x228>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d063      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a79      	ldr	r2, [pc, #484]	; (800a164 <DMA_SetConfig+0x22c>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d05e      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a77      	ldr	r2, [pc, #476]	; (800a168 <DMA_SetConfig+0x230>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d059      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a76      	ldr	r2, [pc, #472]	; (800a16c <DMA_SetConfig+0x234>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d054      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a74      	ldr	r2, [pc, #464]	; (800a170 <DMA_SetConfig+0x238>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d04f      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a73      	ldr	r2, [pc, #460]	; (800a174 <DMA_SetConfig+0x23c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d04a      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a71      	ldr	r2, [pc, #452]	; (800a178 <DMA_SetConfig+0x240>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d045      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a70      	ldr	r2, [pc, #448]	; (800a17c <DMA_SetConfig+0x244>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d040      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a6e      	ldr	r2, [pc, #440]	; (800a180 <DMA_SetConfig+0x248>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d03b      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a6d      	ldr	r2, [pc, #436]	; (800a184 <DMA_SetConfig+0x24c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d036      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a6b      	ldr	r2, [pc, #428]	; (800a188 <DMA_SetConfig+0x250>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d031      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a6a      	ldr	r2, [pc, #424]	; (800a18c <DMA_SetConfig+0x254>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d02c      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a68      	ldr	r2, [pc, #416]	; (800a190 <DMA_SetConfig+0x258>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d027      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a67      	ldr	r2, [pc, #412]	; (800a194 <DMA_SetConfig+0x25c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d022      	beq.n	800a042 <DMA_SetConfig+0x10a>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a65      	ldr	r2, [pc, #404]	; (800a198 <DMA_SetConfig+0x260>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d01d      	beq.n	800a042 <DMA_SetConfig+0x10a>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a64      	ldr	r2, [pc, #400]	; (800a19c <DMA_SetConfig+0x264>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d018      	beq.n	800a042 <DMA_SetConfig+0x10a>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a62      	ldr	r2, [pc, #392]	; (800a1a0 <DMA_SetConfig+0x268>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d013      	beq.n	800a042 <DMA_SetConfig+0x10a>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a61      	ldr	r2, [pc, #388]	; (800a1a4 <DMA_SetConfig+0x26c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00e      	beq.n	800a042 <DMA_SetConfig+0x10a>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a5f      	ldr	r2, [pc, #380]	; (800a1a8 <DMA_SetConfig+0x270>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d009      	beq.n	800a042 <DMA_SetConfig+0x10a>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a5e      	ldr	r2, [pc, #376]	; (800a1ac <DMA_SetConfig+0x274>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d004      	beq.n	800a042 <DMA_SetConfig+0x10a>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a5c      	ldr	r2, [pc, #368]	; (800a1b0 <DMA_SetConfig+0x278>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d101      	bne.n	800a046 <DMA_SetConfig+0x10e>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <DMA_SetConfig+0x110>
 800a046:	2300      	movs	r3, #0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00d      	beq.n	800a068 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a054:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d004      	beq.n	800a068 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a066:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a39      	ldr	r2, [pc, #228]	; (800a154 <DMA_SetConfig+0x21c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d04a      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a38      	ldr	r2, [pc, #224]	; (800a158 <DMA_SetConfig+0x220>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d045      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a36      	ldr	r2, [pc, #216]	; (800a15c <DMA_SetConfig+0x224>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d040      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a35      	ldr	r2, [pc, #212]	; (800a160 <DMA_SetConfig+0x228>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d03b      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a33      	ldr	r2, [pc, #204]	; (800a164 <DMA_SetConfig+0x22c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d036      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a32      	ldr	r2, [pc, #200]	; (800a168 <DMA_SetConfig+0x230>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d031      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a30      	ldr	r2, [pc, #192]	; (800a16c <DMA_SetConfig+0x234>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d02c      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a2f      	ldr	r2, [pc, #188]	; (800a170 <DMA_SetConfig+0x238>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d027      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a2d      	ldr	r2, [pc, #180]	; (800a174 <DMA_SetConfig+0x23c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d022      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a2c      	ldr	r2, [pc, #176]	; (800a178 <DMA_SetConfig+0x240>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d01d      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a2a      	ldr	r2, [pc, #168]	; (800a17c <DMA_SetConfig+0x244>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d018      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a29      	ldr	r2, [pc, #164]	; (800a180 <DMA_SetConfig+0x248>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d013      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a27      	ldr	r2, [pc, #156]	; (800a184 <DMA_SetConfig+0x24c>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00e      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a26      	ldr	r2, [pc, #152]	; (800a188 <DMA_SetConfig+0x250>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d009      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a24      	ldr	r2, [pc, #144]	; (800a18c <DMA_SetConfig+0x254>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d004      	beq.n	800a108 <DMA_SetConfig+0x1d0>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a23      	ldr	r2, [pc, #140]	; (800a190 <DMA_SetConfig+0x258>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d101      	bne.n	800a10c <DMA_SetConfig+0x1d4>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <DMA_SetConfig+0x1d6>
 800a10c:	2300      	movs	r3, #0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d059      	beq.n	800a1c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a116:	f003 031f 	and.w	r3, r3, #31
 800a11a:	223f      	movs	r2, #63	; 0x3f
 800a11c:	409a      	lsls	r2, r3
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a130:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	2b40      	cmp	r3, #64	; 0x40
 800a140:	d138      	bne.n	800a1b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a152:	e086      	b.n	800a262 <DMA_SetConfig+0x32a>
 800a154:	40020010 	.word	0x40020010
 800a158:	40020028 	.word	0x40020028
 800a15c:	40020040 	.word	0x40020040
 800a160:	40020058 	.word	0x40020058
 800a164:	40020070 	.word	0x40020070
 800a168:	40020088 	.word	0x40020088
 800a16c:	400200a0 	.word	0x400200a0
 800a170:	400200b8 	.word	0x400200b8
 800a174:	40020410 	.word	0x40020410
 800a178:	40020428 	.word	0x40020428
 800a17c:	40020440 	.word	0x40020440
 800a180:	40020458 	.word	0x40020458
 800a184:	40020470 	.word	0x40020470
 800a188:	40020488 	.word	0x40020488
 800a18c:	400204a0 	.word	0x400204a0
 800a190:	400204b8 	.word	0x400204b8
 800a194:	58025408 	.word	0x58025408
 800a198:	5802541c 	.word	0x5802541c
 800a19c:	58025430 	.word	0x58025430
 800a1a0:	58025444 	.word	0x58025444
 800a1a4:	58025458 	.word	0x58025458
 800a1a8:	5802546c 	.word	0x5802546c
 800a1ac:	58025480 	.word	0x58025480
 800a1b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	60da      	str	r2, [r3, #12]
}
 800a1c4:	e04d      	b.n	800a262 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a29      	ldr	r2, [pc, #164]	; (800a270 <DMA_SetConfig+0x338>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d022      	beq.n	800a216 <DMA_SetConfig+0x2de>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a27      	ldr	r2, [pc, #156]	; (800a274 <DMA_SetConfig+0x33c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d01d      	beq.n	800a216 <DMA_SetConfig+0x2de>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a26      	ldr	r2, [pc, #152]	; (800a278 <DMA_SetConfig+0x340>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d018      	beq.n	800a216 <DMA_SetConfig+0x2de>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a24      	ldr	r2, [pc, #144]	; (800a27c <DMA_SetConfig+0x344>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <DMA_SetConfig+0x2de>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a23      	ldr	r2, [pc, #140]	; (800a280 <DMA_SetConfig+0x348>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00e      	beq.n	800a216 <DMA_SetConfig+0x2de>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a21      	ldr	r2, [pc, #132]	; (800a284 <DMA_SetConfig+0x34c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d009      	beq.n	800a216 <DMA_SetConfig+0x2de>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a20      	ldr	r2, [pc, #128]	; (800a288 <DMA_SetConfig+0x350>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d004      	beq.n	800a216 <DMA_SetConfig+0x2de>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a1e      	ldr	r2, [pc, #120]	; (800a28c <DMA_SetConfig+0x354>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d101      	bne.n	800a21a <DMA_SetConfig+0x2e2>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <DMA_SetConfig+0x2e4>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d020      	beq.n	800a262 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a224:	f003 031f 	and.w	r3, r3, #31
 800a228:	2201      	movs	r2, #1
 800a22a:	409a      	lsls	r2, r3
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2b40      	cmp	r3, #64	; 0x40
 800a23e:	d108      	bne.n	800a252 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	60da      	str	r2, [r3, #12]
}
 800a250:	e007      	b.n	800a262 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	60da      	str	r2, [r3, #12]
}
 800a262:	bf00      	nop
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	58025408 	.word	0x58025408
 800a274:	5802541c 	.word	0x5802541c
 800a278:	58025430 	.word	0x58025430
 800a27c:	58025444 	.word	0x58025444
 800a280:	58025458 	.word	0x58025458
 800a284:	5802546c 	.word	0x5802546c
 800a288:	58025480 	.word	0x58025480
 800a28c:	58025494 	.word	0x58025494

0800a290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a42      	ldr	r2, [pc, #264]	; (800a3a8 <DMA_CalcBaseAndBitshift+0x118>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d04a      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a41      	ldr	r2, [pc, #260]	; (800a3ac <DMA_CalcBaseAndBitshift+0x11c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d045      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a3f      	ldr	r2, [pc, #252]	; (800a3b0 <DMA_CalcBaseAndBitshift+0x120>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d040      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a3e      	ldr	r2, [pc, #248]	; (800a3b4 <DMA_CalcBaseAndBitshift+0x124>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d03b      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a3c      	ldr	r2, [pc, #240]	; (800a3b8 <DMA_CalcBaseAndBitshift+0x128>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d036      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a3b      	ldr	r2, [pc, #236]	; (800a3bc <DMA_CalcBaseAndBitshift+0x12c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d031      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a39      	ldr	r2, [pc, #228]	; (800a3c0 <DMA_CalcBaseAndBitshift+0x130>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d02c      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a38      	ldr	r2, [pc, #224]	; (800a3c4 <DMA_CalcBaseAndBitshift+0x134>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d027      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a36      	ldr	r2, [pc, #216]	; (800a3c8 <DMA_CalcBaseAndBitshift+0x138>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d022      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a35      	ldr	r2, [pc, #212]	; (800a3cc <DMA_CalcBaseAndBitshift+0x13c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d01d      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a33      	ldr	r2, [pc, #204]	; (800a3d0 <DMA_CalcBaseAndBitshift+0x140>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d018      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a32      	ldr	r2, [pc, #200]	; (800a3d4 <DMA_CalcBaseAndBitshift+0x144>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d013      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a30      	ldr	r2, [pc, #192]	; (800a3d8 <DMA_CalcBaseAndBitshift+0x148>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d00e      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a2f      	ldr	r2, [pc, #188]	; (800a3dc <DMA_CalcBaseAndBitshift+0x14c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d009      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a2d      	ldr	r2, [pc, #180]	; (800a3e0 <DMA_CalcBaseAndBitshift+0x150>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d004      	beq.n	800a338 <DMA_CalcBaseAndBitshift+0xa8>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a2c      	ldr	r2, [pc, #176]	; (800a3e4 <DMA_CalcBaseAndBitshift+0x154>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d101      	bne.n	800a33c <DMA_CalcBaseAndBitshift+0xac>
 800a338:	2301      	movs	r3, #1
 800a33a:	e000      	b.n	800a33e <DMA_CalcBaseAndBitshift+0xae>
 800a33c:	2300      	movs	r3, #0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d024      	beq.n	800a38c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	3b10      	subs	r3, #16
 800a34a:	4a27      	ldr	r2, [pc, #156]	; (800a3e8 <DMA_CalcBaseAndBitshift+0x158>)
 800a34c:	fba2 2303 	umull	r2, r3, r2, r3
 800a350:	091b      	lsrs	r3, r3, #4
 800a352:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	4a24      	ldr	r2, [pc, #144]	; (800a3ec <DMA_CalcBaseAndBitshift+0x15c>)
 800a35c:	5cd3      	ldrb	r3, [r2, r3]
 800a35e:	461a      	mov	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b03      	cmp	r3, #3
 800a368:	d908      	bls.n	800a37c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	4b1f      	ldr	r3, [pc, #124]	; (800a3f0 <DMA_CalcBaseAndBitshift+0x160>)
 800a372:	4013      	ands	r3, r2
 800a374:	1d1a      	adds	r2, r3, #4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	659a      	str	r2, [r3, #88]	; 0x58
 800a37a:	e00d      	b.n	800a398 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <DMA_CalcBaseAndBitshift+0x160>)
 800a384:	4013      	ands	r3, r2
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6593      	str	r3, [r2, #88]	; 0x58
 800a38a:	e005      	b.n	800a398 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	40020010 	.word	0x40020010
 800a3ac:	40020028 	.word	0x40020028
 800a3b0:	40020040 	.word	0x40020040
 800a3b4:	40020058 	.word	0x40020058
 800a3b8:	40020070 	.word	0x40020070
 800a3bc:	40020088 	.word	0x40020088
 800a3c0:	400200a0 	.word	0x400200a0
 800a3c4:	400200b8 	.word	0x400200b8
 800a3c8:	40020410 	.word	0x40020410
 800a3cc:	40020428 	.word	0x40020428
 800a3d0:	40020440 	.word	0x40020440
 800a3d4:	40020458 	.word	0x40020458
 800a3d8:	40020470 	.word	0x40020470
 800a3dc:	40020488 	.word	0x40020488
 800a3e0:	400204a0 	.word	0x400204a0
 800a3e4:	400204b8 	.word	0x400204b8
 800a3e8:	aaaaaaab 	.word	0xaaaaaaab
 800a3ec:	0801abf4 	.word	0x0801abf4
 800a3f0:	fffffc00 	.word	0xfffffc00

0800a3f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d120      	bne.n	800a44a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d858      	bhi.n	800a4c2 <DMA_CheckFifoParam+0xce>
 800a410:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <DMA_CheckFifoParam+0x24>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a429 	.word	0x0800a429
 800a41c:	0800a43b 	.word	0x0800a43b
 800a420:	0800a429 	.word	0x0800a429
 800a424:	0800a4c3 	.word	0x0800a4c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d048      	beq.n	800a4c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a438:	e045      	b.n	800a4c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a442:	d142      	bne.n	800a4ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a448:	e03f      	b.n	800a4ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a452:	d123      	bne.n	800a49c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d838      	bhi.n	800a4ce <DMA_CheckFifoParam+0xda>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <DMA_CheckFifoParam+0x70>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a475 	.word	0x0800a475
 800a468:	0800a47b 	.word	0x0800a47b
 800a46c:	0800a475 	.word	0x0800a475
 800a470:	0800a48d 	.word	0x0800a48d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	73fb      	strb	r3, [r7, #15]
        break;
 800a478:	e030      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d025      	beq.n	800a4d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a48a:	e022      	b.n	800a4d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a490:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a494:	d11f      	bne.n	800a4d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a49a:	e01c      	b.n	800a4d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d902      	bls.n	800a4aa <DMA_CheckFifoParam+0xb6>
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d003      	beq.n	800a4b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a4a8:	e018      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	73fb      	strb	r3, [r7, #15]
        break;
 800a4ae:	e015      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00e      	beq.n	800a4da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c0:	e00b      	b.n	800a4da <DMA_CheckFifoParam+0xe6>
        break;
 800a4c2:	bf00      	nop
 800a4c4:	e00a      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
        break;
 800a4c6:	bf00      	nop
 800a4c8:	e008      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
        break;
 800a4ca:	bf00      	nop
 800a4cc:	e006      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
        break;
 800a4ce:	bf00      	nop
 800a4d0:	e004      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
        break;
 800a4d2:	bf00      	nop
 800a4d4:	e002      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
        break;
 800a4d6:	bf00      	nop
 800a4d8:	e000      	b.n	800a4dc <DMA_CheckFifoParam+0xe8>
    break;
 800a4da:	bf00      	nop
    }
  }

  return status;
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop

0800a4ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a38      	ldr	r2, [pc, #224]	; (800a5e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d022      	beq.n	800a54a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a36      	ldr	r2, [pc, #216]	; (800a5e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d01d      	beq.n	800a54a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a35      	ldr	r2, [pc, #212]	; (800a5e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d018      	beq.n	800a54a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a33      	ldr	r2, [pc, #204]	; (800a5ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d013      	beq.n	800a54a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a32      	ldr	r2, [pc, #200]	; (800a5f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d00e      	beq.n	800a54a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a30      	ldr	r2, [pc, #192]	; (800a5f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d009      	beq.n	800a54a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a2f      	ldr	r2, [pc, #188]	; (800a5f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d004      	beq.n	800a54a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a2d      	ldr	r2, [pc, #180]	; (800a5fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d101      	bne.n	800a54e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a54e:	2300      	movs	r3, #0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01a      	beq.n	800a58a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	3b08      	subs	r3, #8
 800a55c:	4a28      	ldr	r2, [pc, #160]	; (800a600 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a55e:	fba2 2303 	umull	r2, r3, r2, r3
 800a562:	091b      	lsrs	r3, r3, #4
 800a564:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	4b26      	ldr	r3, [pc, #152]	; (800a604 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	461a      	mov	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a24      	ldr	r2, [pc, #144]	; (800a608 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a578:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f003 031f 	and.w	r3, r3, #31
 800a580:	2201      	movs	r2, #1
 800a582:	409a      	lsls	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a588:	e024      	b.n	800a5d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	3b10      	subs	r3, #16
 800a592:	4a1e      	ldr	r2, [pc, #120]	; (800a60c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a594:	fba2 2303 	umull	r2, r3, r2, r3
 800a598:	091b      	lsrs	r3, r3, #4
 800a59a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	4a1c      	ldr	r2, [pc, #112]	; (800a610 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d806      	bhi.n	800a5b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4a1b      	ldr	r2, [pc, #108]	; (800a614 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d902      	bls.n	800a5b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3308      	adds	r3, #8
 800a5b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	4b18      	ldr	r3, [pc, #96]	; (800a618 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a16      	ldr	r2, [pc, #88]	; (800a61c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a5c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f003 031f 	and.w	r3, r3, #31
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	409a      	lsls	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	58025408 	.word	0x58025408
 800a5e4:	5802541c 	.word	0x5802541c
 800a5e8:	58025430 	.word	0x58025430
 800a5ec:	58025444 	.word	0x58025444
 800a5f0:	58025458 	.word	0x58025458
 800a5f4:	5802546c 	.word	0x5802546c
 800a5f8:	58025480 	.word	0x58025480
 800a5fc:	58025494 	.word	0x58025494
 800a600:	cccccccd 	.word	0xcccccccd
 800a604:	16009600 	.word	0x16009600
 800a608:	58025880 	.word	0x58025880
 800a60c:	aaaaaaab 	.word	0xaaaaaaab
 800a610:	400204b8 	.word	0x400204b8
 800a614:	4002040f 	.word	0x4002040f
 800a618:	10008200 	.word	0x10008200
 800a61c:	40020880 	.word	0x40020880

0800a620 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d04a      	beq.n	800a6cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b08      	cmp	r3, #8
 800a63a:	d847      	bhi.n	800a6cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a25      	ldr	r2, [pc, #148]	; (800a6d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d022      	beq.n	800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a24      	ldr	r2, [pc, #144]	; (800a6dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d01d      	beq.n	800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a22      	ldr	r2, [pc, #136]	; (800a6e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d018      	beq.n	800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a21      	ldr	r2, [pc, #132]	; (800a6e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d013      	beq.n	800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a1f      	ldr	r2, [pc, #124]	; (800a6e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d00e      	beq.n	800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a1e      	ldr	r2, [pc, #120]	; (800a6ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d009      	beq.n	800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a1c      	ldr	r2, [pc, #112]	; (800a6f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d004      	beq.n	800a68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a1b      	ldr	r2, [pc, #108]	; (800a6f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d101      	bne.n	800a690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a68c:	2301      	movs	r3, #1
 800a68e:	e000      	b.n	800a692 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a690:	2300      	movs	r3, #0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	4b17      	ldr	r3, [pc, #92]	; (800a6f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a69a:	4413      	add	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	461a      	mov	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a15      	ldr	r2, [pc, #84]	; (800a6fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a6a8:	671a      	str	r2, [r3, #112]	; 0x70
 800a6aa:	e009      	b.n	800a6c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4b14      	ldr	r3, [pc, #80]	; (800a700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a11      	ldr	r2, [pc, #68]	; (800a704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a6be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	409a      	lsls	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	58025408 	.word	0x58025408
 800a6dc:	5802541c 	.word	0x5802541c
 800a6e0:	58025430 	.word	0x58025430
 800a6e4:	58025444 	.word	0x58025444
 800a6e8:	58025458 	.word	0x58025458
 800a6ec:	5802546c 	.word	0x5802546c
 800a6f0:	58025480 	.word	0x58025480
 800a6f4:	58025494 	.word	0x58025494
 800a6f8:	1600963f 	.word	0x1600963f
 800a6fc:	58025940 	.word	0x58025940
 800a700:	1000823f 	.word	0x1000823f
 800a704:	40020940 	.word	0x40020940

0800a708 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a71c:	2308      	movs	r3, #8
 800a71e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a720:	4b40      	ldr	r3, [pc, #256]	; (800a824 <HAL_FLASH_Program+0x11c>)
 800a722:	7d1b      	ldrb	r3, [r3, #20]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d101      	bne.n	800a72c <HAL_FLASH_Program+0x24>
 800a728:	2302      	movs	r3, #2
 800a72a:	e076      	b.n	800a81a <HAL_FLASH_Program+0x112>
 800a72c:	4b3d      	ldr	r3, [pc, #244]	; (800a824 <HAL_FLASH_Program+0x11c>)
 800a72e:	2201      	movs	r2, #1
 800a730:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a738:	d306      	bcc.n	800a748 <HAL_FLASH_Program+0x40>
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a740:	d202      	bcs.n	800a748 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a742:	2301      	movs	r3, #1
 800a744:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a746:	e00c      	b.n	800a762 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a74e:	d306      	bcc.n	800a75e <HAL_FLASH_Program+0x56>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a756:	d202      	bcs.n	800a75e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a758:	2302      	movs	r3, #2
 800a75a:	61bb      	str	r3, [r7, #24]
 800a75c:	e001      	b.n	800a762 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e05b      	b.n	800a81a <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a762:	4b30      	ldr	r3, [pc, #192]	; (800a824 <HAL_FLASH_Program+0x11c>)
 800a764:	2200      	movs	r2, #0
 800a766:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a768:	69b9      	ldr	r1, [r7, #24]
 800a76a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a76e:	f000 f897 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d147      	bne.n	800a810 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d106      	bne.n	800a794 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a786:	4b28      	ldr	r3, [pc, #160]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	4a27      	ldr	r2, [pc, #156]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a78c:	f043 0302 	orr.w	r3, r3, #2
 800a790:	60d3      	str	r3, [r2, #12]
 800a792:	e007      	b.n	800a7a4 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a794:	4b24      	ldr	r3, [pc, #144]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a796:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a79a:	4a23      	ldr	r2, [pc, #140]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a79c:	f043 0302 	orr.w	r3, r3, #2
 800a7a0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a7a4:	f3bf 8f6f 	isb	sy
}
 800a7a8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a7aa:	f3bf 8f4f 	dsb	sy
}
 800a7ae:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a7c4:	7dfb      	ldrb	r3, [r7, #23]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1ef      	bne.n	800a7b0 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a7d0:	f3bf 8f6f 	isb	sy
}
 800a7d4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a7d6:	f3bf 8f4f 	dsb	sy
}
 800a7da:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a7dc:	69b9      	ldr	r1, [r7, #24]
 800a7de:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a7e2:	f000 f85d 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d106      	bne.n	800a800 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	4a0c      	ldr	r2, [pc, #48]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a7f8:	f023 0302 	bic.w	r3, r3, #2
 800a7fc:	60d3      	str	r3, [r2, #12]
 800a7fe:	e007      	b.n	800a810 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800a800:	4b09      	ldr	r3, [pc, #36]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a802:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a806:	4a08      	ldr	r2, [pc, #32]	; (800a828 <HAL_FLASH_Program+0x120>)
 800a808:	f023 0302 	bic.w	r3, r3, #2
 800a80c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a810:	4b04      	ldr	r3, [pc, #16]	; (800a824 <HAL_FLASH_Program+0x11c>)
 800a812:	2200      	movs	r2, #0
 800a814:	751a      	strb	r2, [r3, #20]

  return status;
 800a816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3728      	adds	r7, #40	; 0x28
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	24002040 	.word	0x24002040
 800a828:	52002000 	.word	0x52002000

0800a82c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a830:	4b18      	ldr	r3, [pc, #96]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00d      	beq.n	800a858 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a83c:	4b15      	ldr	r3, [pc, #84]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a83e:	4a16      	ldr	r2, [pc, #88]	; (800a898 <HAL_FLASH_Unlock+0x6c>)
 800a840:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a842:	4b14      	ldr	r3, [pc, #80]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a844:	4a15      	ldr	r2, [pc, #84]	; (800a89c <HAL_FLASH_Unlock+0x70>)
 800a846:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a848:	4b12      	ldr	r3, [pc, #72]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e018      	b.n	800a88a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a858:	4b0e      	ldr	r3, [pc, #56]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a85a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	d010      	beq.n	800a888 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800a866:	4b0b      	ldr	r3, [pc, #44]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a868:	4a0b      	ldr	r2, [pc, #44]	; (800a898 <HAL_FLASH_Unlock+0x6c>)
 800a86a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a870:	4a0a      	ldr	r2, [pc, #40]	; (800a89c <HAL_FLASH_Unlock+0x70>)
 800a872:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a876:	4b07      	ldr	r3, [pc, #28]	; (800a894 <HAL_FLASH_Unlock+0x68>)
 800a878:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e000      	b.n	800a88a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	52002000 	.word	0x52002000
 800a898:	45670123 	.word	0x45670123
 800a89c:	cdef89ab 	.word	0xcdef89ab

0800a8a0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a8aa:	2304      	movs	r3, #4
 800a8ac:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800a8b2:	f7fa ff33 	bl	800571c <HAL_GetTick>
 800a8b6:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d113      	bne.n	800a8e6 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800a8be:	4b41      	ldr	r3, [pc, #260]	; (800a9c4 <FLASH_WaitForLastOperation+0x124>)
 800a8c0:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a8c2:	e010      	b.n	800a8e6 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8ca:	d00c      	beq.n	800a8e6 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a8cc:	f7fa ff26 	bl	800571c <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d302      	bcc.n	800a8e2 <FLASH_WaitForLastOperation+0x42>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e06a      	b.n	800a9bc <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	4b37      	ldr	r3, [pc, #220]	; (800a9c8 <FLASH_WaitForLastOperation+0x128>)
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d10a      	bne.n	800a908 <FLASH_WaitForLastOperation+0x68>
 800a8f2:	4b36      	ldr	r3, [pc, #216]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a8f4:	691a      	ldr	r2, [r3, #16]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	bf0c      	ite	eq
 800a900:	2301      	moveq	r3, #1
 800a902:	2300      	movne	r3, #0
 800a904:	b2db      	uxtb	r3, r3
 800a906:	e00c      	b.n	800a922 <FLASH_WaitForLastOperation+0x82>
 800a908:	4b30      	ldr	r3, [pc, #192]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a90a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a90e:	43da      	mvns	r2, r3
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	4013      	ands	r3, r2
 800a914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	bf0c      	ite	eq
 800a91c:	2301      	moveq	r3, #1
 800a91e:	2300      	movne	r3, #0
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1ce      	bne.n	800a8c4 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d105      	bne.n	800a938 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a92c:	4b27      	ldr	r3, [pc, #156]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a92e:	691a      	ldr	r2, [r3, #16]
 800a930:	4b27      	ldr	r3, [pc, #156]	; (800a9d0 <FLASH_WaitForLastOperation+0x130>)
 800a932:	4013      	ands	r3, r2
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	e007      	b.n	800a948 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800a938:	4b24      	ldr	r3, [pc, #144]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a93a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a93e:	4b24      	ldr	r3, [pc, #144]	; (800a9d0 <FLASH_WaitForLastOperation+0x130>)
 800a940:	4013      	ands	r3, r2
 800a942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a946:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d017      	beq.n	800a982 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a952:	4b20      	ldr	r3, [pc, #128]	; (800a9d4 <FLASH_WaitForLastOperation+0x134>)
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	4a1e      	ldr	r2, [pc, #120]	; (800a9d4 <FLASH_WaitForLastOperation+0x134>)
 800a95c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	4b19      	ldr	r3, [pc, #100]	; (800a9c8 <FLASH_WaitForLastOperation+0x128>)
 800a962:	4013      	ands	r3, r2
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	429a      	cmp	r2, r3
 800a968:	d103      	bne.n	800a972 <FLASH_WaitForLastOperation+0xd2>
 800a96a:	4a18      	ldr	r2, [pc, #96]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	6153      	str	r3, [r2, #20]
 800a970:	e005      	b.n	800a97e <FLASH_WaitForLastOperation+0xde>
 800a972:	4a16      	ldr	r2, [pc, #88]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a97a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e01c      	b.n	800a9bc <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d10b      	bne.n	800a9a0 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a988:	4b10      	ldr	r3, [pc, #64]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a994:	d111      	bne.n	800a9ba <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a996:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a998:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a99c:	615a      	str	r2, [r3, #20]
 800a99e:	e00c      	b.n	800a9ba <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a9a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a9a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ae:	d104      	bne.n	800a9ba <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <FLASH_WaitForLastOperation+0x12c>)
 800a9b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a9b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	80000004 	.word	0x80000004
 800a9c8:	1fef000f 	.word	0x1fef000f
 800a9cc:	52002000 	.word	0x52002000
 800a9d0:	17ee0000 	.word	0x17ee0000
 800a9d4:	24002040 	.word	0x24002040

0800a9d8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a9e6:	4b5e      	ldr	r3, [pc, #376]	; (800ab60 <HAL_FLASHEx_Erase+0x188>)
 800a9e8:	7d1b      	ldrb	r3, [r3, #20]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d101      	bne.n	800a9f2 <HAL_FLASHEx_Erase+0x1a>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e0b2      	b.n	800ab58 <HAL_FLASHEx_Erase+0x180>
 800a9f2:	4b5b      	ldr	r3, [pc, #364]	; (800ab60 <HAL_FLASHEx_Erase+0x188>)
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a9f8:	4b59      	ldr	r3, [pc, #356]	; (800ab60 <HAL_FLASHEx_Erase+0x188>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d009      	beq.n	800aa1e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa10:	f7ff ff46 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d009      	beq.n	800aa3e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800aa2a:	2102      	movs	r1, #2
 800aa2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa30:	f7ff ff36 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 8085 	bne.w	800ab50 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d136      	bne.n	800aabc <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691a      	ldr	r2, [r3, #16]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	4619      	mov	r1, r3
 800aa58:	4610      	mov	r0, r2
 800aa5a:	f000 f887 	bl	800ab6c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00f      	beq.n	800aa8a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa70:	f7ff ff16 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800aa7e:	4b39      	ldr	r3, [pc, #228]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	4a38      	ldr	r2, [pc, #224]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800aa84:	f023 0308 	bic.w	r3, r3, #8
 800aa88:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d05c      	beq.n	800ab50 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800aa96:	2102      	movs	r1, #2
 800aa98:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa9c:	f7ff ff00 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800aaaa:	4b2e      	ldr	r3, [pc, #184]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800aaac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aab0:	4a2c      	ldr	r2, [pc, #176]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800aab2:	f023 0308 	bic.w	r3, r3, #8
 800aab6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800aaba:	e049      	b.n	800ab50 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aac2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	60bb      	str	r3, [r7, #8]
 800aaca:	e039      	b.n	800ab40 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6859      	ldr	r1, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	461a      	mov	r2, r3
 800aad6:	68b8      	ldr	r0, [r7, #8]
 800aad8:	f000 f8b2 	bl	800ac40 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00c      	beq.n	800ab02 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800aae8:	2101      	movs	r1, #1
 800aaea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaee:	f7ff fed7 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800aaf6:	4b1b      	ldr	r3, [pc, #108]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	491a      	ldr	r1, [pc, #104]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800aafc:	4b1a      	ldr	r3, [pc, #104]	; (800ab68 <HAL_FLASHEx_Erase+0x190>)
 800aafe:	4013      	ands	r3, r2
 800ab00:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00e      	beq.n	800ab2c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800ab0e:	2102      	movs	r1, #2
 800ab10:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab14:	f7ff fec4 	bl	800a8a0 <FLASH_WaitForLastOperation>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ab1c:	4b11      	ldr	r3, [pc, #68]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800ab1e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ab22:	4910      	ldr	r1, [pc, #64]	; (800ab64 <HAL_FLASHEx_Erase+0x18c>)
 800ab24:	4b10      	ldr	r3, [pc, #64]	; (800ab68 <HAL_FLASHEx_Erase+0x190>)
 800ab26:	4013      	ands	r3, r2
 800ab28:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	601a      	str	r2, [r3, #0]
          break;
 800ab38:	e00a      	b.n	800ab50 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	60bb      	str	r3, [r7, #8]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68da      	ldr	r2, [r3, #12]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	4413      	add	r3, r2
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d3bd      	bcc.n	800aacc <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab50:	4b03      	ldr	r3, [pc, #12]	; (800ab60 <HAL_FLASHEx_Erase+0x188>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	751a      	strb	r2, [r3, #20]

  return status;
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	24002040 	.word	0x24002040
 800ab64:	52002000 	.word	0x52002000
 800ab68:	fffff8fb 	.word	0xfffff8fb

0800ab6c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	f003 0303 	and.w	r3, r3, #3
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d122      	bne.n	800abc6 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ab80:	4b2e      	ldr	r3, [pc, #184]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	4a2d      	ldr	r2, [pc, #180]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ab86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ab8a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ab8c:	4b2b      	ldr	r3, [pc, #172]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ab8e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab92:	4a2a      	ldr	r2, [pc, #168]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ab94:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ab98:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ab9c:	4b27      	ldr	r3, [pc, #156]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	4926      	ldr	r1, [pc, #152]	; (800ac3c <FLASH_MassErase+0xd0>)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800aba8:	4b24      	ldr	r3, [pc, #144]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abaa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800abae:	4923      	ldr	r1, [pc, #140]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800abb8:	4b20      	ldr	r3, [pc, #128]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abbe:	f043 0310 	orr.w	r3, r3, #16
 800abc2:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800abc4:	e033      	b.n	800ac2e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d011      	beq.n	800abf4 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800abd0:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	4a19      	ldr	r2, [pc, #100]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800abda:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800abdc:	4b17      	ldr	r3, [pc, #92]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	4916      	ldr	r1, [pc, #88]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800abe8:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	4a13      	ldr	r2, [pc, #76]	; (800ac3c <FLASH_MassErase+0xd0>)
 800abee:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800abf2:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d017      	beq.n	800ac2e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800abfe:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ac00:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac04:	4a0d      	ldr	r2, [pc, #52]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ac06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ac0a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800ac0e:	4b0b      	ldr	r3, [pc, #44]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ac10:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ac14:	4909      	ldr	r1, [pc, #36]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800ac1e:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ac20:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac24:	4a05      	ldr	r2, [pc, #20]	; (800ac3c <FLASH_MassErase+0xd0>)
 800ac26:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ac2a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	52002000 	.word	0x52002000

0800ac40 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d010      	beq.n	800ac78 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ac56:	4b18      	ldr	r3, [pc, #96]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800ac5c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ac60:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ac62:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	0219      	lsls	r1, r3, #8
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	430b      	orrs	r3, r1
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	4a11      	ldr	r2, [pc, #68]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800ac72:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ac76:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d014      	beq.n	800acac <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800ac84:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac88:	4a0b      	ldr	r2, [pc, #44]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800ac8a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ac8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ac92:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800ac94:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	0219      	lsls	r1, r3, #8
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	4313      	orrs	r3, r2
 800aca2:	4a05      	ldr	r2, [pc, #20]	; (800acb8 <FLASH_Erase_Sector+0x78>)
 800aca4:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800aca8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	52002000 	.word	0x52002000

0800acbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b089      	sub	sp, #36	; 0x24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800acca:	4b89      	ldr	r3, [pc, #548]	; (800aef0 <HAL_GPIO_Init+0x234>)
 800accc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800acce:	e194      	b.n	800affa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	2101      	movs	r1, #1
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	fa01 f303 	lsl.w	r3, r1, r3
 800acdc:	4013      	ands	r3, r2
 800acde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 8186 	beq.w	800aff4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f003 0303 	and.w	r3, r3, #3
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d005      	beq.n	800ad00 <HAL_GPIO_Init+0x44>
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	f003 0303 	and.w	r3, r3, #3
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d130      	bne.n	800ad62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	2203      	movs	r2, #3
 800ad0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad10:	43db      	mvns	r3, r3
 800ad12:	69ba      	ldr	r2, [r7, #24]
 800ad14:	4013      	ands	r3, r2
 800ad16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	fa02 f303 	lsl.w	r3, r2, r3
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	69ba      	ldr	r2, [r7, #24]
 800ad2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad36:	2201      	movs	r2, #1
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3e:	43db      	mvns	r3, r3
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	4013      	ands	r3, r2
 800ad44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	091b      	lsrs	r3, r3, #4
 800ad4c:	f003 0201 	and.w	r2, r3, #1
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	fa02 f303 	lsl.w	r3, r2, r3
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d017      	beq.n	800ad9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	2203      	movs	r2, #3
 800ad7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad7e:	43db      	mvns	r3, r3
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	4013      	ands	r3, r2
 800ad84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	689a      	ldr	r2, [r3, #8]
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d123      	bne.n	800adf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	08da      	lsrs	r2, r3, #3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3208      	adds	r2, #8
 800adb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	f003 0307 	and.w	r3, r3, #7
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	220f      	movs	r2, #15
 800adc2:	fa02 f303 	lsl.w	r3, r2, r3
 800adc6:	43db      	mvns	r3, r3
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	4013      	ands	r3, r2
 800adcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	691a      	ldr	r2, [r3, #16]
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	f003 0307 	and.w	r3, r3, #7
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	fa02 f303 	lsl.w	r3, r2, r3
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	08da      	lsrs	r2, r3, #3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3208      	adds	r2, #8
 800adec:	69b9      	ldr	r1, [r7, #24]
 800adee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	2203      	movs	r2, #3
 800adfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ae02:	43db      	mvns	r3, r3
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	4013      	ands	r3, r2
 800ae08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f003 0203 	and.w	r2, r3, #3
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 80e0 	beq.w	800aff4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae34:	4b2f      	ldr	r3, [pc, #188]	; (800aef4 <HAL_GPIO_Init+0x238>)
 800ae36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae3a:	4a2e      	ldr	r2, [pc, #184]	; (800aef4 <HAL_GPIO_Init+0x238>)
 800ae3c:	f043 0302 	orr.w	r3, r3, #2
 800ae40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ae44:	4b2b      	ldr	r3, [pc, #172]	; (800aef4 <HAL_GPIO_Init+0x238>)
 800ae46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ae52:	4a29      	ldr	r2, [pc, #164]	; (800aef8 <HAL_GPIO_Init+0x23c>)
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	089b      	lsrs	r3, r3, #2
 800ae58:	3302      	adds	r3, #2
 800ae5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	220f      	movs	r2, #15
 800ae6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6e:	43db      	mvns	r3, r3
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	4013      	ands	r3, r2
 800ae74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a20      	ldr	r2, [pc, #128]	; (800aefc <HAL_GPIO_Init+0x240>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d052      	beq.n	800af24 <HAL_GPIO_Init+0x268>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a1f      	ldr	r2, [pc, #124]	; (800af00 <HAL_GPIO_Init+0x244>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d031      	beq.n	800aeea <HAL_GPIO_Init+0x22e>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a1e      	ldr	r2, [pc, #120]	; (800af04 <HAL_GPIO_Init+0x248>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d02b      	beq.n	800aee6 <HAL_GPIO_Init+0x22a>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a1d      	ldr	r2, [pc, #116]	; (800af08 <HAL_GPIO_Init+0x24c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d025      	beq.n	800aee2 <HAL_GPIO_Init+0x226>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a1c      	ldr	r2, [pc, #112]	; (800af0c <HAL_GPIO_Init+0x250>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d01f      	beq.n	800aede <HAL_GPIO_Init+0x222>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a1b      	ldr	r2, [pc, #108]	; (800af10 <HAL_GPIO_Init+0x254>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d019      	beq.n	800aeda <HAL_GPIO_Init+0x21e>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a1a      	ldr	r2, [pc, #104]	; (800af14 <HAL_GPIO_Init+0x258>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d013      	beq.n	800aed6 <HAL_GPIO_Init+0x21a>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a19      	ldr	r2, [pc, #100]	; (800af18 <HAL_GPIO_Init+0x25c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d00d      	beq.n	800aed2 <HAL_GPIO_Init+0x216>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a18      	ldr	r2, [pc, #96]	; (800af1c <HAL_GPIO_Init+0x260>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d007      	beq.n	800aece <HAL_GPIO_Init+0x212>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a17      	ldr	r2, [pc, #92]	; (800af20 <HAL_GPIO_Init+0x264>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d101      	bne.n	800aeca <HAL_GPIO_Init+0x20e>
 800aec6:	2309      	movs	r3, #9
 800aec8:	e02d      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aeca:	230a      	movs	r3, #10
 800aecc:	e02b      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aece:	2308      	movs	r3, #8
 800aed0:	e029      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aed2:	2307      	movs	r3, #7
 800aed4:	e027      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aed6:	2306      	movs	r3, #6
 800aed8:	e025      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aeda:	2305      	movs	r3, #5
 800aedc:	e023      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aede:	2304      	movs	r3, #4
 800aee0:	e021      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aee2:	2303      	movs	r3, #3
 800aee4:	e01f      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aee6:	2302      	movs	r3, #2
 800aee8:	e01d      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e01b      	b.n	800af26 <HAL_GPIO_Init+0x26a>
 800aeee:	bf00      	nop
 800aef0:	58000080 	.word	0x58000080
 800aef4:	58024400 	.word	0x58024400
 800aef8:	58000400 	.word	0x58000400
 800aefc:	58020000 	.word	0x58020000
 800af00:	58020400 	.word	0x58020400
 800af04:	58020800 	.word	0x58020800
 800af08:	58020c00 	.word	0x58020c00
 800af0c:	58021000 	.word	0x58021000
 800af10:	58021400 	.word	0x58021400
 800af14:	58021800 	.word	0x58021800
 800af18:	58021c00 	.word	0x58021c00
 800af1c:	58022000 	.word	0x58022000
 800af20:	58022400 	.word	0x58022400
 800af24:	2300      	movs	r3, #0
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	f002 0203 	and.w	r2, r2, #3
 800af2c:	0092      	lsls	r2, r2, #2
 800af2e:	4093      	lsls	r3, r2
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	4313      	orrs	r3, r2
 800af34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af36:	4938      	ldr	r1, [pc, #224]	; (800b018 <HAL_GPIO_Init+0x35c>)
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	089b      	lsrs	r3, r3, #2
 800af3c:	3302      	adds	r3, #2
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800af44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	43db      	mvns	r3, r3
 800af50:	69ba      	ldr	r2, [r7, #24]
 800af52:	4013      	ands	r3, r2
 800af54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800af6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800af72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	43db      	mvns	r3, r3
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	4013      	ands	r3, r2
 800af82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4313      	orrs	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800af98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	43db      	mvns	r3, r3
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	4013      	ands	r3, r2
 800afae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	43db      	mvns	r3, r3
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	4013      	ands	r3, r2
 800afd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800afe6:	69ba      	ldr	r2, [r7, #24]
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	4313      	orrs	r3, r2
 800afec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	3301      	adds	r3, #1
 800aff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	fa22 f303 	lsr.w	r3, r2, r3
 800b004:	2b00      	cmp	r3, #0
 800b006:	f47f ae63 	bne.w	800acd0 <HAL_GPIO_Init+0x14>
  }
}
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	3724      	adds	r7, #36	; 0x24
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	58000400 	.word	0x58000400

0800b01c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691a      	ldr	r2, [r3, #16]
 800b02c:	887b      	ldrh	r3, [r7, #2]
 800b02e:	4013      	ands	r3, r2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b034:	2301      	movs	r3, #1
 800b036:	73fb      	strb	r3, [r7, #15]
 800b038:	e001      	b.n	800b03e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	807b      	strh	r3, [r7, #2]
 800b058:	4613      	mov	r3, r2
 800b05a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b05c:	787b      	ldrb	r3, [r7, #1]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b062:	887a      	ldrh	r2, [r7, #2]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b068:	e003      	b.n	800b072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b06a:	887b      	ldrh	r3, [r7, #2]
 800b06c:	041a      	lsls	r2, r3, #16
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	619a      	str	r2, [r3, #24]
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
	...

0800b080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e08b      	b.n	800b1aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d106      	bne.n	800b0ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7f7 fa9c 	bl	80025e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2224      	movs	r2, #36	; 0x24
 800b0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0201 	bic.w	r2, r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b0d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689a      	ldr	r2, [r3, #8]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b0e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d107      	bne.n	800b0fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689a      	ldr	r2, [r3, #8]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0f6:	609a      	str	r2, [r3, #8]
 800b0f8:	e006      	b.n	800b108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d108      	bne.n	800b122 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b11e:	605a      	str	r2, [r3, #4]
 800b120:	e007      	b.n	800b132 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6859      	ldr	r1, [r3, #4]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	4b1d      	ldr	r3, [pc, #116]	; (800b1b4 <HAL_I2C_Init+0x134>)
 800b13e:	430b      	orrs	r3, r1
 800b140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68da      	ldr	r2, [r3, #12]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	691a      	ldr	r2, [r3, #16]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	430a      	orrs	r2, r1
 800b16a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	69d9      	ldr	r1, [r3, #28]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a1a      	ldr	r2, [r3, #32]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	430a      	orrs	r2, r1
 800b17a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f042 0201 	orr.w	r2, r2, #1
 800b18a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2220      	movs	r2, #32
 800b196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	02008000 	.word	0x02008000

0800b1b8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08a      	sub	sp, #40	; 0x28
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	817b      	strh	r3, [r7, #10]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	2b20      	cmp	r3, #32
 800b1da:	f040 80ef 	bne.w	800b3bc <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ec:	d101      	bne.n	800b1f2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e0e5      	b.n	800b3be <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d101      	bne.n	800b200 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	e0de      	b.n	800b3be <HAL_I2C_Master_Transmit_DMA+0x206>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2221      	movs	r2, #33	; 0x21
 800b20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2210      	movs	r2, #16
 800b214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	893a      	ldrh	r2, [r7, #8]
 800b228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	4a66      	ldr	r2, [pc, #408]	; (800b3c8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b22e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4a66      	ldr	r2, [pc, #408]	; (800b3cc <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b234:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	2bff      	cmp	r3, #255	; 0xff
 800b23e:	d906      	bls.n	800b24e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	22ff      	movs	r2, #255	; 0xff
 800b244:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b24a:	61fb      	str	r3, [r7, #28]
 800b24c:	e007      	b.n	800b25e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b252:	b29a      	uxth	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b25c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b262:	2b00      	cmp	r3, #0
 800b264:	d01a      	beq.n	800b29c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26a:	781a      	ldrb	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b280:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b286:	b29b      	uxth	r3, r3
 800b288:	3b01      	subs	r3, #1
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b294:	3b01      	subs	r3, #1
 800b296:	b29a      	uxth	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d074      	beq.n	800b38e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d022      	beq.n	800b2f2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b0:	4a47      	ldr	r2, [pc, #284]	; (800b3d0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b2b2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b8:	4a46      	ldr	r2, [pc, #280]	; (800b3d4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b2ba:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b2dc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b2e2:	f7fc ff17 	bl	8008114 <HAL_DMA_Start_IT>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d13a      	bne.n	800b366 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b2f0:	e013      	b.n	800b31a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b306:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e051      	b.n	800b3be <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	3301      	adds	r3, #1
 800b322:	b2da      	uxtb	r2, r3
 800b324:	8979      	ldrh	r1, [r7, #10]
 800b326:	4b2c      	ldr	r3, [pc, #176]	; (800b3d8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f002 f83b 	bl	800d3a8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b336:	b29a      	uxth	r2, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	b29a      	uxth	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b34c:	2110      	movs	r1, #16
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f002 f85c 	bl	800d40c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	e028      	b.n	800b3b8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2220      	movs	r2, #32
 800b36a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37a:	f043 0210 	orr.w	r2, r3, #16
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e017      	b.n	800b3be <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	4a12      	ldr	r2, [pc, #72]	; (800b3dc <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	b2da      	uxtb	r2, r3
 800b398:	8979      	ldrh	r1, [r7, #10]
 800b39a:	4b0f      	ldr	r3, [pc, #60]	; (800b3d8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f002 f800 	bl	800d3a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f002 f82a 	bl	800d40c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e000      	b.n	800b3be <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b3bc:	2302      	movs	r3, #2
  }
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3720      	adds	r7, #32
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	ffff0000 	.word	0xffff0000
 800b3cc:	0800bc13 	.word	0x0800bc13
 800b3d0:	0800cfcb 	.word	0x0800cfcb
 800b3d4:	0800d0f9 	.word	0x0800d0f9
 800b3d8:	80002000 	.word	0x80002000
 800b3dc:	0800b7a3 	.word	0x0800b7a3

0800b3e0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b088      	sub	sp, #32
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	607a      	str	r2, [r7, #4]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	817b      	strh	r3, [r7, #10]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b20      	cmp	r3, #32
 800b3fe:	f040 80cd 	bne.w	800b59c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b40c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b410:	d101      	bne.n	800b416 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b412:	2302      	movs	r3, #2
 800b414:	e0c3      	b.n	800b59e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d101      	bne.n	800b424 <HAL_I2C_Master_Receive_DMA+0x44>
 800b420:	2302      	movs	r3, #2
 800b422:	e0bc      	b.n	800b59e <HAL_I2C_Master_Receive_DMA+0x1be>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2222      	movs	r2, #34	; 0x22
 800b430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2210      	movs	r2, #16
 800b438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	893a      	ldrh	r2, [r7, #8]
 800b44c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	4a55      	ldr	r2, [pc, #340]	; (800b5a8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b452:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	4a55      	ldr	r2, [pc, #340]	; (800b5ac <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b458:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b45e:	b29b      	uxth	r3, r3
 800b460:	2bff      	cmp	r3, #255	; 0xff
 800b462:	d906      	bls.n	800b472 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	22ff      	movs	r2, #255	; 0xff
 800b468:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b46a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b46e:	617b      	str	r3, [r7, #20]
 800b470:	e007      	b.n	800b482 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b47c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b480:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b486:	2b00      	cmp	r3, #0
 800b488:	d070      	beq.n	800b56c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d020      	beq.n	800b4d4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b496:	4a46      	ldr	r2, [pc, #280]	; (800b5b0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b498:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49e:	4a45      	ldr	r2, [pc, #276]	; (800b5b4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b4a0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3324      	adds	r3, #36	; 0x24
 800b4bc:	4619      	mov	r1, r3
 800b4be:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b4c4:	f7fc fe26 	bl	8008114 <HAL_DMA_Start_IT>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b4cc:	7cfb      	ldrb	r3, [r7, #19]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d138      	bne.n	800b544 <HAL_I2C_Master_Receive_DMA+0x164>
 800b4d2:	e013      	b.n	800b4fc <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e050      	b.n	800b59e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b500:	b2da      	uxtb	r2, r3
 800b502:	8979      	ldrh	r1, [r7, #10]
 800b504:	4b2c      	ldr	r3, [pc, #176]	; (800b5b8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f001 ff4c 	bl	800d3a8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b514:	b29a      	uxth	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b52a:	2110      	movs	r1, #16
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f001 ff6d 	bl	800d40c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	e029      	b.n	800b598 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2220      	movs	r2, #32
 800b548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b558:	f043 0210 	orr.w	r2, r3, #16
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	e018      	b.n	800b59e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b576:	b2da      	uxtb	r2, r3
 800b578:	8979      	ldrh	r1, [r7, #10]
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f001 ff10 	bl	800d3a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b590:	2102      	movs	r1, #2
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f001 ff3a 	bl	800d40c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	e000      	b.n	800b59e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b59c:	2302      	movs	r3, #2
  }
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	ffff0000 	.word	0xffff0000
 800b5ac:	0800bc13 	.word	0x0800bc13
 800b5b0:	0800d061 	.word	0x0800d061
 800b5b4:	0800d0f9 	.word	0x0800d0f9
 800b5b8:	80002400 	.word	0x80002400
 800b5bc:	0800b7a3 	.word	0x0800b7a3

0800b5c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d005      	beq.n	800b5ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	68f9      	ldr	r1, [r7, #12]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	4798      	blx	r3
  }
}
 800b5ec:	bf00      	nop
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	0a1b      	lsrs	r3, r3, #8
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d010      	beq.n	800b63a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	09db      	lsrs	r3, r3, #7
 800b61c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00a      	beq.n	800b63a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b628:	f043 0201 	orr.w	r2, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b638:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	0a9b      	lsrs	r3, r3, #10
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	2b00      	cmp	r3, #0
 800b644:	d010      	beq.n	800b668 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	09db      	lsrs	r3, r3, #7
 800b64a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00a      	beq.n	800b668 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b656:	f043 0208 	orr.w	r2, r3, #8
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b666:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	0a5b      	lsrs	r3, r3, #9
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	d010      	beq.n	800b696 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	09db      	lsrs	r3, r3, #7
 800b678:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00a      	beq.n	800b696 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b684:	f043 0202 	orr.w	r2, r3, #2
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b694:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f003 030b 	and.w	r3, r3, #11
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b6a6:	68f9      	ldr	r1, [r7, #12]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 fb53 	bl	800cd54 <I2C_ITError>
  }
}
 800b6ae:	bf00      	nop
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b083      	sub	sp, #12
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b6e6:	bf00      	nop
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	460b      	mov	r3, r1
 800b710:	70fb      	strb	r3, [r7, #3]
 800b712:	4613      	mov	r3, r2
 800b714:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b716:	bf00      	nop
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b722:	b480      	push	{r7}
 800b724:	b083      	sub	sp, #12
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b72a:	bf00      	nop
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b736:	b480      	push	{r7}
 800b738:	b083      	sub	sp, #12
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b752:	bf00      	nop
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b772:	b480      	push	{r7}
 800b774:	b083      	sub	sp, #12
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b77a:	bf00      	nop
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b794:	b2db      	uxtb	r3, r3
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b088      	sub	sp, #32
 800b7a6:	af02      	add	r7, sp, #8
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d101      	bne.n	800b7c0 <I2C_Master_ISR_IT+0x1e>
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e120      	b.n	800ba02 <I2C_Master_ISR_IT+0x260>
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	091b      	lsrs	r3, r3, #4
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d013      	beq.n	800b7fc <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	091b      	lsrs	r3, r3, #4
 800b7d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00d      	beq.n	800b7fc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2210      	movs	r2, #16
 800b7e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ec:	f043 0204 	orr.w	r2, r3, #4
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f001 fbc4 	bl	800cf82 <I2C_Flush_TXDR>
 800b7fa:	e0ed      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	089b      	lsrs	r3, r3, #2
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	d023      	beq.n	800b850 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	089b      	lsrs	r3, r3, #2
 800b80c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01d      	beq.n	800b850 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f023 0304 	bic.w	r3, r3, #4
 800b81a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	b2d2      	uxtb	r2, r2
 800b828:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b838:	3b01      	subs	r3, #1
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b844:	b29b      	uxth	r3, r3
 800b846:	3b01      	subs	r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b84e:	e0c3      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	099b      	lsrs	r3, r3, #6
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d12a      	bne.n	800b8b2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	085b      	lsrs	r3, r3, #1
 800b860:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b864:	2b00      	cmp	r3, #0
 800b866:	d024      	beq.n	800b8b2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	085b      	lsrs	r3, r3, #1
 800b86c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b870:	2b00      	cmp	r3, #0
 800b872:	d01e      	beq.n	800b8b2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b878:	b29b      	uxth	r3, r3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80ac 	beq.w	800b9d8 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	781a      	ldrb	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b89a:	3b01      	subs	r3, #1
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800b8b0:	e092      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	09db      	lsrs	r3, r3, #7
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d05d      	beq.n	800b97a <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	099b      	lsrs	r3, r3, #6
 800b8c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d057      	beq.n	800b97a <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d040      	beq.n	800b956 <I2C_Master_ISR_IT+0x1b4>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d13c      	bne.n	800b956 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8e8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	2bff      	cmp	r3, #255	; 0xff
 800b8f2:	d90e      	bls.n	800b912 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	22ff      	movs	r2, #255	; 0xff
 800b8f8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	8a79      	ldrh	r1, [r7, #18]
 800b902:	2300      	movs	r3, #0
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f001 fd4c 	bl	800d3a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b910:	e032      	b.n	800b978 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b916:	b29a      	uxth	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b924:	d00b      	beq.n	800b93e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b930:	8a79      	ldrh	r1, [r7, #18]
 800b932:	2000      	movs	r0, #0
 800b934:	9000      	str	r0, [sp, #0]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f001 fd36 	bl	800d3a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b93c:	e01c      	b.n	800b978 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b942:	b2da      	uxtb	r2, r3
 800b944:	8a79      	ldrh	r1, [r7, #18]
 800b946:	2300      	movs	r3, #0
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f001 fd2a 	bl	800d3a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b954:	e010      	b.n	800b978 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b964:	d003      	beq.n	800b96e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 fdde 	bl	800c528 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b96c:	e034      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b96e:	2140      	movs	r1, #64	; 0x40
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f001 f9ef 	bl	800cd54 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b976:	e02f      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
 800b978:	e02e      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	099b      	lsrs	r3, r3, #6
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	d028      	beq.n	800b9d8 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	099b      	lsrs	r3, r3, #6
 800b98a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d022      	beq.n	800b9d8 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b996:	b29b      	uxth	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d119      	bne.n	800b9d0 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9aa:	d015      	beq.n	800b9d8 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9b4:	d108      	bne.n	800b9c8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9c4:	605a      	str	r2, [r3, #4]
 800b9c6:	e007      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 fdad 	bl	800c528 <I2C_ITMasterSeqCplt>
 800b9ce:	e003      	b.n	800b9d8 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b9d0:	2140      	movs	r1, #64	; 0x40
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f001 f9be 	bl	800cd54 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	095b      	lsrs	r3, r3, #5
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d009      	beq.n	800b9f8 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	095b      	lsrs	r3, r3, #5
 800b9e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b9f0:	6979      	ldr	r1, [r7, #20]
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f000 fe34 	bl	800c660 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b086      	sub	sp, #24
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	60b9      	str	r1, [r7, #8]
 800ba14:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d101      	bne.n	800ba2e <I2C_Slave_ISR_IT+0x24>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e0ed      	b.n	800bc0a <I2C_Slave_ISR_IT+0x200>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	095b      	lsrs	r3, r3, #5
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	095b      	lsrs	r3, r3, #5
 800ba46:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ba4e:	6939      	ldr	r1, [r7, #16]
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 fecf 	bl	800c7f4 <I2C_ITSlaveCplt>
 800ba56:	e0d3      	b.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	091b      	lsrs	r3, r3, #4
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d04d      	beq.n	800bb00 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	091b      	lsrs	r3, r3, #4
 800ba68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d047      	beq.n	800bb00 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d128      	bne.n	800bacc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b28      	cmp	r3, #40	; 0x28
 800ba84:	d108      	bne.n	800ba98 <I2C_Slave_ISR_IT+0x8e>
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba8c:	d104      	bne.n	800ba98 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba8e:	6939      	ldr	r1, [r7, #16]
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f001 f909 	bl	800cca8 <I2C_ITListenCplt>
 800ba96:	e032      	b.n	800bafe <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2b29      	cmp	r3, #41	; 0x29
 800baa2:	d10e      	bne.n	800bac2 <I2C_Slave_ISR_IT+0xb8>
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800baaa:	d00a      	beq.n	800bac2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2210      	movs	r2, #16
 800bab2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f001 fa64 	bl	800cf82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 fd71 	bl	800c5a2 <I2C_ITSlaveSeqCplt>
 800bac0:	e01d      	b.n	800bafe <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2210      	movs	r2, #16
 800bac8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800baca:	e096      	b.n	800bbfa <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2210      	movs	r2, #16
 800bad2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad8:	f043 0204 	orr.w	r2, r3, #4
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d004      	beq.n	800baf0 <I2C_Slave_ISR_IT+0xe6>
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800baec:	f040 8085 	bne.w	800bbfa <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf4:	4619      	mov	r1, r3
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f001 f92c 	bl	800cd54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bafc:	e07d      	b.n	800bbfa <I2C_Slave_ISR_IT+0x1f0>
 800bafe:	e07c      	b.n	800bbfa <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	089b      	lsrs	r3, r3, #2
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d030      	beq.n	800bb6e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	089b      	lsrs	r3, r3, #2
 800bb10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d02a      	beq.n	800bb6e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d018      	beq.n	800bb54 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2c:	b2d2      	uxtb	r2, r2
 800bb2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d14f      	bne.n	800bbfe <I2C_Slave_ISR_IT+0x1f4>
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb64:	d04b      	beq.n	800bbfe <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 fd1b 	bl	800c5a2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bb6c:	e047      	b.n	800bbfe <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	08db      	lsrs	r3, r3, #3
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00a      	beq.n	800bb90 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	08db      	lsrs	r3, r3, #3
 800bb7e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d004      	beq.n	800bb90 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bb86:	6939      	ldr	r1, [r7, #16]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 fc49 	bl	800c420 <I2C_ITAddrCplt>
 800bb8e:	e037      	b.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	085b      	lsrs	r3, r3, #1
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d031      	beq.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	085b      	lsrs	r3, r3, #1
 800bba0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d02b      	beq.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d018      	beq.n	800bbe4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	781a      	ldrb	r2, [r3, #0]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	1c5a      	adds	r2, r3, #1
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	851a      	strh	r2, [r3, #40]	; 0x28
 800bbe2:	e00d      	b.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbea:	d002      	beq.n	800bbf2 <I2C_Slave_ISR_IT+0x1e8>
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d106      	bne.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f000 fcd5 	bl	800c5a2 <I2C_ITSlaveSeqCplt>
 800bbf8:	e002      	b.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bbfa:	bf00      	nop
 800bbfc:	e000      	b.n	800bc00 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bbfe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b088      	sub	sp, #32
 800bc16:	af02      	add	r7, sp, #8
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d101      	bne.n	800bc2c <I2C_Master_ISR_DMA+0x1a>
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e0e1      	b.n	800bdf0 <I2C_Master_ISR_DMA+0x1de>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	091b      	lsrs	r3, r3, #4
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d017      	beq.n	800bc70 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	091b      	lsrs	r3, r3, #4
 800bc44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d011      	beq.n	800bc70 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2210      	movs	r2, #16
 800bc52:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc58:	f043 0204 	orr.w	r2, r3, #4
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bc60:	2120      	movs	r1, #32
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f001 fbd2 	bl	800d40c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f001 f98a 	bl	800cf82 <I2C_Flush_TXDR>
 800bc6e:	e0ba      	b.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	09db      	lsrs	r3, r3, #7
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d072      	beq.n	800bd62 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	099b      	lsrs	r3, r3, #6
 800bc80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d06c      	beq.n	800bd62 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc96:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d04e      	beq.n	800bd40 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	2bff      	cmp	r3, #255	; 0xff
 800bcb8:	d906      	bls.n	800bcc8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	22ff      	movs	r2, #255	; 0xff
 800bcbe:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bcc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcc4:	617b      	str	r3, [r7, #20]
 800bcc6:	e010      	b.n	800bcea <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bcda:	d003      	beq.n	800bce4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce0:	617b      	str	r3, [r7, #20]
 800bce2:	e002      	b.n	800bcea <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bce8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	8a79      	ldrh	r1, [r7, #18]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f001 fb55 	bl	800d3a8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	2b22      	cmp	r3, #34	; 0x22
 800bd1a:	d108      	bne.n	800bd2e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd2a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bd2c:	e05b      	b.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bd3e:	e052      	b.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd4e:	d003      	beq.n	800bd58 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 fbe9 	bl	800c528 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bd56:	e046      	b.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd58:	2140      	movs	r1, #64	; 0x40
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f000 fffa 	bl	800cd54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bd60:	e041      	b.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	099b      	lsrs	r3, r3, #6
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d029      	beq.n	800bdc2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	099b      	lsrs	r3, r3, #6
 800bd72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d023      	beq.n	800bdc2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d119      	bne.n	800bdb8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd92:	d027      	beq.n	800bde4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd9c:	d108      	bne.n	800bdb0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdac:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800bdae:	e019      	b.n	800bde4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 fbb9 	bl	800c528 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800bdb6:	e015      	b.n	800bde4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bdb8:	2140      	movs	r1, #64	; 0x40
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 ffca 	bl	800cd54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bdc0:	e010      	b.n	800bde4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	095b      	lsrs	r3, r3, #5
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00b      	beq.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	095b      	lsrs	r3, r3, #5
 800bdd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d005      	beq.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 fc3f 	bl	800c660 <I2C_ITMasterCplt>
 800bde2:	e000      	b.n	800bde6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800bde4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af02      	add	r7, sp, #8
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800be04:	4b92      	ldr	r3, [pc, #584]	; (800c050 <I2C_Mem_ISR_DMA+0x258>)
 800be06:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d101      	bne.n	800be16 <I2C_Mem_ISR_DMA+0x1e>
 800be12:	2302      	movs	r3, #2
 800be14:	e118      	b.n	800c048 <I2C_Mem_ISR_DMA+0x250>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	091b      	lsrs	r3, r3, #4
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d017      	beq.n	800be5a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	091b      	lsrs	r3, r3, #4
 800be2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be32:	2b00      	cmp	r3, #0
 800be34:	d011      	beq.n	800be5a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2210      	movs	r2, #16
 800be3c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be42:	f043 0204 	orr.w	r2, r3, #4
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be4a:	2120      	movs	r1, #32
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f001 fadd 	bl	800d40c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f001 f895 	bl	800cf82 <I2C_Flush_TXDR>
 800be58:	e0f1      	b.n	800c03e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	085b      	lsrs	r3, r3, #1
 800be5e:	f003 0301 	and.w	r3, r3, #1
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00f      	beq.n	800be86 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	085b      	lsrs	r3, r3, #1
 800be6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d009      	beq.n	800be86 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be82:	651a      	str	r2, [r3, #80]	; 0x50
 800be84:	e0db      	b.n	800c03e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	09db      	lsrs	r3, r3, #7
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d060      	beq.n	800bf54 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	099b      	lsrs	r3, r3, #6
 800be96:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d05a      	beq.n	800bf54 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800be9e:	2101      	movs	r1, #1
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f001 fb37 	bl	800d514 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bea6:	2110      	movs	r1, #16
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	f001 faaf 	bl	800d40c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d048      	beq.n	800bf4a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	2bff      	cmp	r3, #255	; 0xff
 800bec0:	d910      	bls.n	800bee4 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	22ff      	movs	r2, #255	; 0xff
 800bec6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800becc:	b299      	uxth	r1, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	2300      	movs	r3, #0
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f001 fa63 	bl	800d3a8 <I2C_TransferConfig>
 800bee2:	e011      	b.n	800bf08 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bee8:	b29a      	uxth	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef2:	b299      	uxth	r1, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	2300      	movs	r3, #0
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f001 fa50 	bl	800d3a8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b22      	cmp	r3, #34	; 0x22
 800bf24:	d108      	bne.n	800bf38 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf34:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf36:	e082      	b.n	800c03e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf48:	e079      	b.n	800c03e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf4a:	2140      	movs	r1, #64	; 0x40
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 ff01 	bl	800cd54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bf52:	e074      	b.n	800c03e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	099b      	lsrs	r3, r3, #6
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d05e      	beq.n	800c01e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	099b      	lsrs	r3, r3, #6
 800bf64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d058      	beq.n	800c01e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf6c:	2101      	movs	r1, #1
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f001 fad0 	bl	800d514 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bf74:	2110      	movs	r1, #16
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f001 fa48 	bl	800d40c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b22      	cmp	r3, #34	; 0x22
 800bf86:	d101      	bne.n	800bf8c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800bf88:	4b32      	ldr	r3, [pc, #200]	; (800c054 <I2C_Mem_ISR_DMA+0x25c>)
 800bf8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	2bff      	cmp	r3, #255	; 0xff
 800bf94:	d910      	bls.n	800bfb8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	22ff      	movs	r2, #255	; 0xff
 800bf9a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa0:	b299      	uxth	r1, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f001 f9f9 	bl	800d3a8 <I2C_TransferConfig>
 800bfb6:	e011      	b.n	800bfdc <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc6:	b299      	uxth	r1, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f001 f9e6 	bl	800d3a8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b22      	cmp	r3, #34	; 0x22
 800bff8:	d108      	bne.n	800c00c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c008:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c00a:	e018      	b.n	800c03e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c01a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c01c:	e00f      	b.n	800c03e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	095b      	lsrs	r3, r3, #5
 800c022:	f003 0301 	and.w	r3, r3, #1
 800c026:	2b00      	cmp	r3, #0
 800c028:	d009      	beq.n	800c03e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	095b      	lsrs	r3, r3, #5
 800c02e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c036:	68b9      	ldr	r1, [r7, #8]
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f000 fb11 	bl	800c660 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3718      	adds	r7, #24
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	80002000 	.word	0x80002000
 800c054:	80002400 	.word	0x80002400

0800c058 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c074:	2b01      	cmp	r3, #1
 800c076:	d101      	bne.n	800c07c <I2C_Slave_ISR_DMA+0x24>
 800c078:	2302      	movs	r3, #2
 800c07a:	e1cc      	b.n	800c416 <I2C_Slave_ISR_DMA+0x3be>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	095b      	lsrs	r3, r3, #5
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00a      	beq.n	800c0a6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	095b      	lsrs	r3, r3, #5
 800c094:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 fba8 	bl	800c7f4 <I2C_ITSlaveCplt>
 800c0a4:	e1b2      	b.n	800c40c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	091b      	lsrs	r3, r3, #4
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 819c 	beq.w	800c3ec <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	091b      	lsrs	r3, r3, #4
 800c0b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8195 	beq.w	800c3ec <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	0b9b      	lsrs	r3, r3, #14
 800c0c6:	f003 0301 	and.w	r3, r3, #1
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	0bdb      	lsrs	r3, r3, #15
 800c0d2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8181 	beq.w	800c3de <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d07c      	beq.n	800c1de <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	0bdb      	lsrs	r3, r3, #15
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d076      	beq.n	800c1de <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a75      	ldr	r2, [pc, #468]	; (800c2cc <I2C_Slave_ISR_DMA+0x274>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d059      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a73      	ldr	r2, [pc, #460]	; (800c2d0 <I2C_Slave_ISR_DMA+0x278>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d053      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a71      	ldr	r2, [pc, #452]	; (800c2d4 <I2C_Slave_ISR_DMA+0x27c>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d04d      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a6f      	ldr	r2, [pc, #444]	; (800c2d8 <I2C_Slave_ISR_DMA+0x280>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d047      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a6d      	ldr	r2, [pc, #436]	; (800c2dc <I2C_Slave_ISR_DMA+0x284>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d041      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a6b      	ldr	r2, [pc, #428]	; (800c2e0 <I2C_Slave_ISR_DMA+0x288>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d03b      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a69      	ldr	r2, [pc, #420]	; (800c2e4 <I2C_Slave_ISR_DMA+0x28c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d035      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a67      	ldr	r2, [pc, #412]	; (800c2e8 <I2C_Slave_ISR_DMA+0x290>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d02f      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a65      	ldr	r2, [pc, #404]	; (800c2ec <I2C_Slave_ISR_DMA+0x294>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d029      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a63      	ldr	r2, [pc, #396]	; (800c2f0 <I2C_Slave_ISR_DMA+0x298>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d023      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a61      	ldr	r2, [pc, #388]	; (800c2f4 <I2C_Slave_ISR_DMA+0x29c>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d01d      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a5f      	ldr	r2, [pc, #380]	; (800c2f8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d017      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a5d      	ldr	r2, [pc, #372]	; (800c2fc <I2C_Slave_ISR_DMA+0x2a4>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d011      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a5b      	ldr	r2, [pc, #364]	; (800c300 <I2C_Slave_ISR_DMA+0x2a8>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d00b      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a59      	ldr	r2, [pc, #356]	; (800c304 <I2C_Slave_ISR_DMA+0x2ac>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d005      	beq.n	800c1b0 <I2C_Slave_ISR_DMA+0x158>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a57      	ldr	r2, [pc, #348]	; (800c308 <I2C_Slave_ISR_DMA+0x2b0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d109      	bne.n	800c1c4 <I2C_Slave_ISR_DMA+0x16c>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	bf0c      	ite	eq
 800c1bc:	2301      	moveq	r3, #1
 800c1be:	2300      	movne	r3, #0
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	e008      	b.n	800c1d6 <I2C_Slave_ISR_DMA+0x17e>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	bf0c      	ite	eq
 800c1d0:	2301      	moveq	r3, #1
 800c1d2:	2300      	movne	r3, #0
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 809f 	beq.w	800c326 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	0b9b      	lsrs	r3, r3, #14
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 8098 	beq.w	800c326 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a33      	ldr	r2, [pc, #204]	; (800c2cc <I2C_Slave_ISR_DMA+0x274>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d059      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a31      	ldr	r2, [pc, #196]	; (800c2d0 <I2C_Slave_ISR_DMA+0x278>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d053      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a2f      	ldr	r2, [pc, #188]	; (800c2d4 <I2C_Slave_ISR_DMA+0x27c>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d04d      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a2d      	ldr	r2, [pc, #180]	; (800c2d8 <I2C_Slave_ISR_DMA+0x280>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d047      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a2b      	ldr	r2, [pc, #172]	; (800c2dc <I2C_Slave_ISR_DMA+0x284>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d041      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a29      	ldr	r2, [pc, #164]	; (800c2e0 <I2C_Slave_ISR_DMA+0x288>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d03b      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a27      	ldr	r2, [pc, #156]	; (800c2e4 <I2C_Slave_ISR_DMA+0x28c>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d035      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a25      	ldr	r2, [pc, #148]	; (800c2e8 <I2C_Slave_ISR_DMA+0x290>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d02f      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a23      	ldr	r2, [pc, #140]	; (800c2ec <I2C_Slave_ISR_DMA+0x294>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d029      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a21      	ldr	r2, [pc, #132]	; (800c2f0 <I2C_Slave_ISR_DMA+0x298>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d023      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a1f      	ldr	r2, [pc, #124]	; (800c2f4 <I2C_Slave_ISR_DMA+0x29c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01d      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a1d      	ldr	r2, [pc, #116]	; (800c2f8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d017      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a1b      	ldr	r2, [pc, #108]	; (800c2fc <I2C_Slave_ISR_DMA+0x2a4>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d011      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a19      	ldr	r2, [pc, #100]	; (800c300 <I2C_Slave_ISR_DMA+0x2a8>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d00b      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a17      	ldr	r2, [pc, #92]	; (800c304 <I2C_Slave_ISR_DMA+0x2ac>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d005      	beq.n	800c2b6 <I2C_Slave_ISR_DMA+0x25e>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a15      	ldr	r2, [pc, #84]	; (800c308 <I2C_Slave_ISR_DMA+0x2b0>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d12a      	bne.n	800c30c <I2C_Slave_ISR_DMA+0x2b4>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	bf0c      	ite	eq
 800c2c2:	2301      	moveq	r3, #1
 800c2c4:	2300      	movne	r3, #0
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	e029      	b.n	800c31e <I2C_Slave_ISR_DMA+0x2c6>
 800c2ca:	bf00      	nop
 800c2cc:	40020010 	.word	0x40020010
 800c2d0:	40020028 	.word	0x40020028
 800c2d4:	40020040 	.word	0x40020040
 800c2d8:	40020058 	.word	0x40020058
 800c2dc:	40020070 	.word	0x40020070
 800c2e0:	40020088 	.word	0x40020088
 800c2e4:	400200a0 	.word	0x400200a0
 800c2e8:	400200b8 	.word	0x400200b8
 800c2ec:	40020410 	.word	0x40020410
 800c2f0:	40020428 	.word	0x40020428
 800c2f4:	40020440 	.word	0x40020440
 800c2f8:	40020458 	.word	0x40020458
 800c2fc:	40020470 	.word	0x40020470
 800c300:	40020488 	.word	0x40020488
 800c304:	400204a0 	.word	0x400204a0
 800c308:	400204b8 	.word	0x400204b8
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bf0c      	ite	eq
 800c318:	2301      	moveq	r3, #1
 800c31a:	2300      	movne	r3, #0
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c322:	2301      	movs	r3, #1
 800c324:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d128      	bne.n	800c37e <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b28      	cmp	r3, #40	; 0x28
 800c336:	d108      	bne.n	800c34a <I2C_Slave_ISR_DMA+0x2f2>
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c33e:	d104      	bne.n	800c34a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 fcb0 	bl	800cca8 <I2C_ITListenCplt>
 800c348:	e048      	b.n	800c3dc <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b29      	cmp	r3, #41	; 0x29
 800c354:	d10e      	bne.n	800c374 <I2C_Slave_ISR_DMA+0x31c>
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c35c:	d00a      	beq.n	800c374 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2210      	movs	r2, #16
 800c364:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f000 fe0b 	bl	800cf82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 f918 	bl	800c5a2 <I2C_ITSlaveSeqCplt>
 800c372:	e033      	b.n	800c3dc <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2210      	movs	r2, #16
 800c37a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c37c:	e034      	b.n	800c3e8 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2210      	movs	r2, #16
 800c384:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c38a:	f043 0204 	orr.w	r2, r3, #4
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c398:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <I2C_Slave_ISR_DMA+0x350>
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3a6:	d11f      	bne.n	800c3e8 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b21      	cmp	r3, #33	; 0x21
 800c3ac:	d002      	beq.n	800c3b4 <I2C_Slave_ISR_DMA+0x35c>
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	2b29      	cmp	r3, #41	; 0x29
 800c3b2:	d103      	bne.n	800c3bc <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2221      	movs	r2, #33	; 0x21
 800c3b8:	631a      	str	r2, [r3, #48]	; 0x30
 800c3ba:	e008      	b.n	800c3ce <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
 800c3be:	2b22      	cmp	r3, #34	; 0x22
 800c3c0:	d002      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x370>
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c6:	d102      	bne.n	800c3ce <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2222      	movs	r2, #34	; 0x22
 800c3cc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fcbd 	bl	800cd54 <I2C_ITError>
      if (treatdmanack == 1U)
 800c3da:	e005      	b.n	800c3e8 <I2C_Slave_ISR_DMA+0x390>
 800c3dc:	e004      	b.n	800c3e8 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2210      	movs	r2, #16
 800c3e4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3e6:	e011      	b.n	800c40c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c3e8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3ea:	e00f      	b.n	800c40c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	08db      	lsrs	r3, r3, #3
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d009      	beq.n	800c40c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	08db      	lsrs	r3, r3, #3
 800c3fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c400:	2b00      	cmp	r3, #0
 800c402:	d003      	beq.n	800c40c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c404:	68b9      	ldr	r1, [r7, #8]
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f000 f80a 	bl	800c420 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3720      	adds	r7, #32
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop

0800c420 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c430:	b2db      	uxtb	r3, r3
 800c432:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c436:	2b28      	cmp	r3, #40	; 0x28
 800c438:	d16a      	bne.n	800c510 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	699b      	ldr	r3, [r3, #24]
 800c440:	0c1b      	lsrs	r3, r3, #16
 800c442:	b2db      	uxtb	r3, r3
 800c444:	f003 0301 	and.w	r3, r3, #1
 800c448:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	0c1b      	lsrs	r3, r3, #16
 800c452:	b29b      	uxth	r3, r3
 800c454:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c458:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	b29b      	uxth	r3, r3
 800c462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c466:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c474:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d138      	bne.n	800c4f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c47e:	897b      	ldrh	r3, [r7, #10]
 800c480:	09db      	lsrs	r3, r3, #7
 800c482:	b29a      	uxth	r2, r3
 800c484:	89bb      	ldrh	r3, [r7, #12]
 800c486:	4053      	eors	r3, r2
 800c488:	b29b      	uxth	r3, r3
 800c48a:	f003 0306 	and.w	r3, r3, #6
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d11c      	bne.n	800c4cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c492:	897b      	ldrh	r3, [r7, #10]
 800c494:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d13b      	bne.n	800c520 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2208      	movs	r2, #8
 800c4b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c4be:	89ba      	ldrh	r2, [r7, #12]
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff f91e 	bl	800b706 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c4ca:	e029      	b.n	800c520 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c4cc:	893b      	ldrh	r3, [r7, #8]
 800c4ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c4d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f001 f81d 	bl	800d514 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c4e2:	89ba      	ldrh	r2, [r7, #12]
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff f90c 	bl	800b706 <HAL_I2C_AddrCallback>
}
 800c4ee:	e017      	b.n	800c520 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c4f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f001 f80d 	bl	800d514 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c502:	89ba      	ldrh	r2, [r7, #12]
 800c504:	7bfb      	ldrb	r3, [r7, #15]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff f8fc 	bl	800b706 <HAL_I2C_AddrCallback>
}
 800c50e:	e007      	b.n	800c520 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2208      	movs	r2, #8
 800c516:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c520:	bf00      	nop
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	2b21      	cmp	r3, #33	; 0x21
 800c542:	d115      	bne.n	800c570 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2220      	movs	r2, #32
 800c548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2211      	movs	r2, #17
 800c550:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c558:	2101      	movs	r1, #1
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 ffda 	bl	800d514 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff f8a4 	bl	800b6b6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c56e:	e014      	b.n	800c59a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2220      	movs	r2, #32
 800c574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2212      	movs	r2, #18
 800c57c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c584:	2102      	movs	r1, #2
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 ffc4 	bl	800d514 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff f898 	bl	800b6ca <HAL_I2C_MasterRxCpltCallback>
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	0b9b      	lsrs	r3, r3, #14
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d008      	beq.n	800c5d8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	e00d      	b.n	800c5f4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	0bdb      	lsrs	r3, r3, #15
 800c5dc:	f003 0301 	and.w	r3, r3, #1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d007      	beq.n	800c5f4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5f2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b29      	cmp	r3, #41	; 0x29
 800c5fe:	d112      	bne.n	800c626 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2228      	movs	r2, #40	; 0x28
 800c604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2221      	movs	r2, #33	; 0x21
 800c60c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c60e:	2101      	movs	r1, #1
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 ff7f 	bl	800d514 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff f85d 	bl	800b6de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c624:	e017      	b.n	800c656 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b2a      	cmp	r3, #42	; 0x2a
 800c630:	d111      	bne.n	800c656 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2228      	movs	r2, #40	; 0x28
 800c636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2222      	movs	r2, #34	; 0x22
 800c63e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c640:	2102      	movs	r1, #2
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 ff66 	bl	800d514 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7ff f84e 	bl	800b6f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2220      	movs	r2, #32
 800c674:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b21      	cmp	r3, #33	; 0x21
 800c680:	d107      	bne.n	800c692 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c682:	2101      	movs	r1, #1
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 ff45 	bl	800d514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2211      	movs	r2, #17
 800c68e:	631a      	str	r2, [r3, #48]	; 0x30
 800c690:	e00c      	b.n	800c6ac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b22      	cmp	r3, #34	; 0x22
 800c69c:	d106      	bne.n	800c6ac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c69e:	2102      	movs	r1, #2
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 ff37 	bl	800d514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2212      	movs	r2, #18
 800c6aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6859      	ldr	r1, [r3, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	4b4d      	ldr	r3, [pc, #308]	; (800c7ec <I2C_ITMasterCplt+0x18c>)
 800c6b8:	400b      	ands	r3, r1
 800c6ba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a4a      	ldr	r2, [pc, #296]	; (800c7f0 <I2C_ITMasterCplt+0x190>)
 800c6c6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	091b      	lsrs	r3, r3, #4
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d009      	beq.n	800c6e8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2210      	movs	r2, #16
 800c6da:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e0:	f043 0204 	orr.w	r2, r3, #4
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b60      	cmp	r3, #96	; 0x60
 800c6f2:	d10b      	bne.n	800c70c <I2C_ITMasterCplt+0xac>
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	089b      	lsrs	r3, r3, #2
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	b2db      	uxtb	r3, r3
 800c708:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c70a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fc38 	bl	800cf82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c716:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b60      	cmp	r3, #96	; 0x60
 800c722:	d002      	beq.n	800c72a <I2C_ITMasterCplt+0xca>
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d006      	beq.n	800c738 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fb0f 	bl	800cd54 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c736:	e054      	b.n	800c7e2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b21      	cmp	r3, #33	; 0x21
 800c742:	d124      	bne.n	800c78e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2220      	movs	r2, #32
 800c748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b40      	cmp	r3, #64	; 0x40
 800c75c:	d10b      	bne.n	800c776 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7fe ffe1 	bl	800b736 <HAL_I2C_MemTxCpltCallback>
}
 800c774:	e035      	b.n	800c7e2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7fe ff95 	bl	800b6b6 <HAL_I2C_MasterTxCpltCallback>
}
 800c78c:	e029      	b.n	800c7e2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b22      	cmp	r3, #34	; 0x22
 800c798:	d123      	bne.n	800c7e2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b40      	cmp	r3, #64	; 0x40
 800c7b2:	d10b      	bne.n	800c7cc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7fe ffc0 	bl	800b74a <HAL_I2C_MemRxCpltCallback>
}
 800c7ca:	e00a      	b.n	800c7e2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7fe ff74 	bl	800b6ca <HAL_I2C_MasterRxCpltCallback>
}
 800c7e2:	bf00      	nop
 800c7e4:	3718      	adds	r7, #24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	fe00e800 	.word	0xfe00e800
 800c7f0:	ffff0000 	.word	0xffff0000

0800c7f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c816:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2220      	movs	r2, #32
 800c81e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c820:	7afb      	ldrb	r3, [r7, #11]
 800c822:	2b21      	cmp	r3, #33	; 0x21
 800c824:	d002      	beq.n	800c82c <I2C_ITSlaveCplt+0x38>
 800c826:	7afb      	ldrb	r3, [r7, #11]
 800c828:	2b29      	cmp	r3, #41	; 0x29
 800c82a:	d108      	bne.n	800c83e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c82c:	f248 0101 	movw	r1, #32769	; 0x8001
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fe6f 	bl	800d514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2221      	movs	r2, #33	; 0x21
 800c83a:	631a      	str	r2, [r3, #48]	; 0x30
 800c83c:	e019      	b.n	800c872 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c83e:	7afb      	ldrb	r3, [r7, #11]
 800c840:	2b22      	cmp	r3, #34	; 0x22
 800c842:	d002      	beq.n	800c84a <I2C_ITSlaveCplt+0x56>
 800c844:	7afb      	ldrb	r3, [r7, #11]
 800c846:	2b2a      	cmp	r3, #42	; 0x2a
 800c848:	d108      	bne.n	800c85c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c84a:	f248 0102 	movw	r1, #32770	; 0x8002
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fe60 	bl	800d514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2222      	movs	r2, #34	; 0x22
 800c858:	631a      	str	r2, [r3, #48]	; 0x30
 800c85a:	e00a      	b.n	800c872 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c85c:	7afb      	ldrb	r3, [r7, #11]
 800c85e:	2b28      	cmp	r3, #40	; 0x28
 800c860:	d107      	bne.n	800c872 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c862:	f248 0103 	movw	r1, #32771	; 0x8003
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fe54 	bl	800d514 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c880:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6859      	ldr	r1, [r3, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b80      	ldr	r3, [pc, #512]	; (800ca90 <I2C_ITSlaveCplt+0x29c>)
 800c88e:	400b      	ands	r3, r1
 800c890:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fb75 	bl	800cf82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	0b9b      	lsrs	r3, r3, #14
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d07a      	beq.n	800c99a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 8112 	beq.w	800cae2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a73      	ldr	r2, [pc, #460]	; (800ca94 <I2C_ITSlaveCplt+0x2a0>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d059      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a71      	ldr	r2, [pc, #452]	; (800ca98 <I2C_ITSlaveCplt+0x2a4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d053      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a6f      	ldr	r2, [pc, #444]	; (800ca9c <I2C_ITSlaveCplt+0x2a8>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d04d      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a6d      	ldr	r2, [pc, #436]	; (800caa0 <I2C_ITSlaveCplt+0x2ac>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d047      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a6b      	ldr	r2, [pc, #428]	; (800caa4 <I2C_ITSlaveCplt+0x2b0>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d041      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a69      	ldr	r2, [pc, #420]	; (800caa8 <I2C_ITSlaveCplt+0x2b4>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d03b      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a67      	ldr	r2, [pc, #412]	; (800caac <I2C_ITSlaveCplt+0x2b8>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d035      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a65      	ldr	r2, [pc, #404]	; (800cab0 <I2C_ITSlaveCplt+0x2bc>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d02f      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a63      	ldr	r2, [pc, #396]	; (800cab4 <I2C_ITSlaveCplt+0x2c0>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d029      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a61      	ldr	r2, [pc, #388]	; (800cab8 <I2C_ITSlaveCplt+0x2c4>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d023      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a5f      	ldr	r2, [pc, #380]	; (800cabc <I2C_ITSlaveCplt+0x2c8>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d01d      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a5d      	ldr	r2, [pc, #372]	; (800cac0 <I2C_ITSlaveCplt+0x2cc>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d017      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a5b      	ldr	r2, [pc, #364]	; (800cac4 <I2C_ITSlaveCplt+0x2d0>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d011      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a59      	ldr	r2, [pc, #356]	; (800cac8 <I2C_ITSlaveCplt+0x2d4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d00b      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a57      	ldr	r2, [pc, #348]	; (800cacc <I2C_ITSlaveCplt+0x2d8>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d005      	beq.n	800c97e <I2C_ITSlaveCplt+0x18a>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a55      	ldr	r2, [pc, #340]	; (800cad0 <I2C_ITSlaveCplt+0x2dc>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d105      	bne.n	800c98a <I2C_ITSlaveCplt+0x196>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	b29b      	uxth	r3, r3
 800c988:	e004      	b.n	800c994 <I2C_ITSlaveCplt+0x1a0>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	b29b      	uxth	r3, r3
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c998:	e0a3      	b.n	800cae2 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	0bdb      	lsrs	r3, r3, #15
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 809d 	beq.w	800cae2 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c9b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 8090 	beq.w	800cae2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a32      	ldr	r2, [pc, #200]	; (800ca94 <I2C_ITSlaveCplt+0x2a0>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d059      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a30      	ldr	r2, [pc, #192]	; (800ca98 <I2C_ITSlaveCplt+0x2a4>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d053      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a2e      	ldr	r2, [pc, #184]	; (800ca9c <I2C_ITSlaveCplt+0x2a8>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d04d      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a2c      	ldr	r2, [pc, #176]	; (800caa0 <I2C_ITSlaveCplt+0x2ac>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d047      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a2a      	ldr	r2, [pc, #168]	; (800caa4 <I2C_ITSlaveCplt+0x2b0>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d041      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a28      	ldr	r2, [pc, #160]	; (800caa8 <I2C_ITSlaveCplt+0x2b4>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d03b      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a26      	ldr	r2, [pc, #152]	; (800caac <I2C_ITSlaveCplt+0x2b8>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d035      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a24      	ldr	r2, [pc, #144]	; (800cab0 <I2C_ITSlaveCplt+0x2bc>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d02f      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a22      	ldr	r2, [pc, #136]	; (800cab4 <I2C_ITSlaveCplt+0x2c0>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d029      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a20      	ldr	r2, [pc, #128]	; (800cab8 <I2C_ITSlaveCplt+0x2c4>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d023      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a1e      	ldr	r2, [pc, #120]	; (800cabc <I2C_ITSlaveCplt+0x2c8>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d01d      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a1c      	ldr	r2, [pc, #112]	; (800cac0 <I2C_ITSlaveCplt+0x2cc>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d017      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a1a      	ldr	r2, [pc, #104]	; (800cac4 <I2C_ITSlaveCplt+0x2d0>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d011      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a18      	ldr	r2, [pc, #96]	; (800cac8 <I2C_ITSlaveCplt+0x2d4>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00b      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a16      	ldr	r2, [pc, #88]	; (800cacc <I2C_ITSlaveCplt+0x2d8>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d005      	beq.n	800ca82 <I2C_ITSlaveCplt+0x28e>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a14      	ldr	r2, [pc, #80]	; (800cad0 <I2C_ITSlaveCplt+0x2dc>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d128      	bne.n	800cad4 <I2C_ITSlaveCplt+0x2e0>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	e027      	b.n	800cade <I2C_ITSlaveCplt+0x2ea>
 800ca8e:	bf00      	nop
 800ca90:	fe00e800 	.word	0xfe00e800
 800ca94:	40020010 	.word	0x40020010
 800ca98:	40020028 	.word	0x40020028
 800ca9c:	40020040 	.word	0x40020040
 800caa0:	40020058 	.word	0x40020058
 800caa4:	40020070 	.word	0x40020070
 800caa8:	40020088 	.word	0x40020088
 800caac:	400200a0 	.word	0x400200a0
 800cab0:	400200b8 	.word	0x400200b8
 800cab4:	40020410 	.word	0x40020410
 800cab8:	40020428 	.word	0x40020428
 800cabc:	40020440 	.word	0x40020440
 800cac0:	40020458 	.word	0x40020458
 800cac4:	40020470 	.word	0x40020470
 800cac8:	40020488 	.word	0x40020488
 800cacc:	400204a0 	.word	0x400204a0
 800cad0:	400204b8 	.word	0x400204b8
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	089b      	lsrs	r3, r3, #2
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	2b00      	cmp	r3, #0
 800caec:	d020      	beq.n	800cb30 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f023 0304 	bic.w	r3, r3, #4
 800caf4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb00:	b2d2      	uxtb	r2, r2
 800cb02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb08:	1c5a      	adds	r2, r3, #1
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00c      	beq.n	800cb30 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d005      	beq.n	800cb46 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb3e:	f043 0204 	orr.w	r2, r3, #4
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	091b      	lsrs	r3, r3, #4
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d04a      	beq.n	800cbe8 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	091b      	lsrs	r3, r3, #4
 800cb56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d044      	beq.n	800cbe8 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d128      	bne.n	800cbba <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b28      	cmp	r3, #40	; 0x28
 800cb72:	d108      	bne.n	800cb86 <I2C_ITSlaveCplt+0x392>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb7a:	d104      	bne.n	800cb86 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb7c:	6979      	ldr	r1, [r7, #20]
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f892 	bl	800cca8 <I2C_ITListenCplt>
 800cb84:	e030      	b.n	800cbe8 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b29      	cmp	r3, #41	; 0x29
 800cb90:	d10e      	bne.n	800cbb0 <I2C_ITSlaveCplt+0x3bc>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb98:	d00a      	beq.n	800cbb0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2210      	movs	r2, #16
 800cba0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f9ed 	bl	800cf82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fcfa 	bl	800c5a2 <I2C_ITSlaveSeqCplt>
 800cbae:	e01b      	b.n	800cbe8 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2210      	movs	r2, #16
 800cbb6:	61da      	str	r2, [r3, #28]
 800cbb8:	e016      	b.n	800cbe8 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2210      	movs	r2, #16
 800cbc0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbc6:	f043 0204 	orr.w	r2, r3, #4
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <I2C_ITSlaveCplt+0x3e8>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cbda:	d105      	bne.n	800cbe8 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f8b6 	bl	800cd54 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d010      	beq.n	800cc20 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc02:	4619      	mov	r1, r3
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 f8a5 	bl	800cd54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	2b28      	cmp	r3, #40	; 0x28
 800cc14:	d141      	bne.n	800cc9a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cc16:	6979      	ldr	r1, [r7, #20]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f845 	bl	800cca8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc1e:	e03c      	b.n	800cc9a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cc28:	d014      	beq.n	800cc54 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7ff fcb9 	bl	800c5a2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a1c      	ldr	r2, [pc, #112]	; (800cca4 <I2C_ITSlaveCplt+0x4b0>)
 800cc34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2220      	movs	r2, #32
 800cc3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7fe fd68 	bl	800b722 <HAL_I2C_ListenCpltCallback>
}
 800cc52:	e022      	b.n	800cc9a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b22      	cmp	r3, #34	; 0x22
 800cc5e:	d10e      	bne.n	800cc7e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2220      	movs	r2, #32
 800cc64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7fe fd3b 	bl	800b6f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800cc7c:	e00d      	b.n	800cc9a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2220      	movs	r2, #32
 800cc82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7fe fd22 	bl	800b6de <HAL_I2C_SlaveTxCpltCallback>
}
 800cc9a:	bf00      	nop
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	ffff0000 	.word	0xffff0000

0800cca8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a26      	ldr	r2, [pc, #152]	; (800cd50 <I2C_ITListenCplt+0xa8>)
 800ccb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2220      	movs	r2, #32
 800ccc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	089b      	lsrs	r3, r3, #2
 800ccd8:	f003 0301 	and.w	r3, r3, #1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d022      	beq.n	800cd26 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccea:	b2d2      	uxtb	r2, r2
 800ccec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf2:	1c5a      	adds	r2, r3, #1
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d012      	beq.n	800cd26 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd04:	3b01      	subs	r3, #1
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	3b01      	subs	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd1e:	f043 0204 	orr.w	r2, r3, #4
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd26:	f248 0103 	movw	r1, #32771	; 0x8003
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fbf2 	bl	800d514 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2210      	movs	r2, #16
 800cd36:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7fe fcee 	bl	800b722 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cd46:	bf00      	nop
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	ffff0000 	.word	0xffff0000

0800cd54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd64:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a6d      	ldr	r2, [pc, #436]	; (800cf28 <I2C_ITError+0x1d4>)
 800cd72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	431a      	orrs	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b28      	cmp	r3, #40	; 0x28
 800cd8a:	d005      	beq.n	800cd98 <I2C_ITError+0x44>
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	2b29      	cmp	r3, #41	; 0x29
 800cd90:	d002      	beq.n	800cd98 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	2b2a      	cmp	r3, #42	; 0x2a
 800cd96:	d10b      	bne.n	800cdb0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd98:	2103      	movs	r1, #3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fbba 	bl	800d514 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2228      	movs	r2, #40	; 0x28
 800cda4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a60      	ldr	r2, [pc, #384]	; (800cf2c <I2C_ITError+0x1d8>)
 800cdac:	635a      	str	r2, [r3, #52]	; 0x34
 800cdae:	e030      	b.n	800ce12 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cdb0:	f248 0103 	movw	r1, #32771	; 0x8003
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fbad 	bl	800d514 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f8e1 	bl	800cf82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	2b60      	cmp	r3, #96	; 0x60
 800cdca:	d01f      	beq.n	800ce0c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2220      	movs	r2, #32
 800cdd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	f003 0320 	and.w	r3, r3, #32
 800cdde:	2b20      	cmp	r3, #32
 800cde0:	d114      	bne.n	800ce0c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	f003 0310 	and.w	r3, r3, #16
 800cdec:	2b10      	cmp	r3, #16
 800cdee:	d109      	bne.n	800ce04 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2210      	movs	r2, #16
 800cdf6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdfc:	f043 0204 	orr.w	r2, r3, #4
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2220      	movs	r2, #32
 800ce0a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d039      	beq.n	800ce94 <I2C_ITError+0x140>
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	2b11      	cmp	r3, #17
 800ce24:	d002      	beq.n	800ce2c <I2C_ITError+0xd8>
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2b21      	cmp	r3, #33	; 0x21
 800ce2a:	d133      	bne.n	800ce94 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce3a:	d107      	bne.n	800ce4c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fd f857 	bl	8009f04 <HAL_DMA_GetState>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d017      	beq.n	800ce8c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce60:	4a33      	ldr	r2, [pc, #204]	; (800cf30 <I2C_ITError+0x1dc>)
 800ce62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fb fed7 	bl	8008c24 <HAL_DMA_Abort_IT>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d04d      	beq.n	800cf18 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ce86:	4610      	mov	r0, r2
 800ce88:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce8a:	e045      	b.n	800cf18 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f851 	bl	800cf34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce92:	e041      	b.n	800cf18 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d039      	beq.n	800cf10 <I2C_ITError+0x1bc>
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b12      	cmp	r3, #18
 800cea0:	d002      	beq.n	800cea8 <I2C_ITError+0x154>
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b22      	cmp	r3, #34	; 0x22
 800cea6:	d133      	bne.n	800cf10 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ceb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ceb6:	d107      	bne.n	800cec8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cec6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fd f819 	bl	8009f04 <HAL_DMA_GetState>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d017      	beq.n	800cf08 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cedc:	4a14      	ldr	r2, [pc, #80]	; (800cf30 <I2C_ITError+0x1dc>)
 800cede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fb fe99 	bl	8008c24 <HAL_DMA_Abort_IT>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d011      	beq.n	800cf1c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf02:	4610      	mov	r0, r2
 800cf04:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf06:	e009      	b.n	800cf1c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f813 	bl	800cf34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf0e:	e005      	b.n	800cf1c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f80f 	bl	800cf34 <I2C_TreatErrorCallback>
  }
}
 800cf16:	e002      	b.n	800cf1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cf18:	bf00      	nop
 800cf1a:	e000      	b.n	800cf1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf1c:	bf00      	nop
}
 800cf1e:	bf00      	nop
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	ffff0000 	.word	0xffff0000
 800cf2c:	0800ba0b 	.word	0x0800ba0b
 800cf30:	0800d36d 	.word	0x0800d36d

0800cf34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b60      	cmp	r3, #96	; 0x60
 800cf46:	d10e      	bne.n	800cf66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2220      	movs	r2, #32
 800cf4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7fe fc07 	bl	800b772 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf64:	e009      	b.n	800cf7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7fe fbf2 	bl	800b75e <HAL_I2C_ErrorCallback>
}
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	699b      	ldr	r3, [r3, #24]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d103      	bne.n	800cfa0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d007      	beq.n	800cfbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	699a      	ldr	r2, [r3, #24]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f042 0201 	orr.w	r2, r2, #1
 800cfbc:	619a      	str	r2, [r3, #24]
  }
}
 800cfbe:	bf00      	nop
 800cfc0:	370c      	adds	r7, #12
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cfe6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d104      	bne.n	800cffc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800cff2:	2120      	movs	r1, #32
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 fa09 	bl	800d40c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800cffa:	e02d      	b.n	800d058 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d004:	441a      	add	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d00e:	b29b      	uxth	r3, r3
 800d010:	2bff      	cmp	r3, #255	; 0xff
 800d012:	d903      	bls.n	800d01c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	22ff      	movs	r2, #255	; 0xff
 800d018:	851a      	strh	r2, [r3, #40]	; 0x28
 800d01a:	e004      	b.n	800d026 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d020:	b29a      	uxth	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02e:	4619      	mov	r1, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3328      	adds	r3, #40	; 0x28
 800d036:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d03c:	f7fb f86a 	bl	8008114 <HAL_DMA_Start_IT>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d004      	beq.n	800d050 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d046:	2110      	movs	r1, #16
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f7ff fe83 	bl	800cd54 <I2C_ITError>
}
 800d04e:	e003      	b.n	800d058 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d050:	2140      	movs	r1, #64	; 0x40
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 f9da 	bl	800d40c <I2C_Enable_IRQ>
}
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d07c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d082:	b29b      	uxth	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d104      	bne.n	800d092 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d088:	2120      	movs	r1, #32
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f000 f9be 	bl	800d40c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d090:	e02d      	b.n	800d0ee <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d09a:	441a      	add	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	2bff      	cmp	r3, #255	; 0xff
 800d0a8:	d903      	bls.n	800d0b2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	22ff      	movs	r2, #255	; 0xff
 800d0ae:	851a      	strh	r2, [r3, #40]	; 0x28
 800d0b0:	e004      	b.n	800d0bc <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	3324      	adds	r3, #36	; 0x24
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0cc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d0d2:	f7fb f81f 	bl	8008114 <HAL_DMA_Start_IT>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d004      	beq.n	800d0e6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d0dc:	2110      	movs	r1, #16
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f7ff fe38 	bl	800cd54 <I2C_ITError>
}
 800d0e4:	e003      	b.n	800d0ee <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d0e6:	2140      	movs	r1, #64	; 0x40
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 f98f 	bl	800d40c <I2C_Enable_IRQ>
}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d100:	2300      	movs	r3, #0
 800d102:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d108:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d076      	beq.n	800d200 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a71      	ldr	r2, [pc, #452]	; (800d2e0 <I2C_DMAError+0x1e8>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d059      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a6f      	ldr	r2, [pc, #444]	; (800d2e4 <I2C_DMAError+0x1ec>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d053      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a6d      	ldr	r2, [pc, #436]	; (800d2e8 <I2C_DMAError+0x1f0>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d04d      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a6b      	ldr	r2, [pc, #428]	; (800d2ec <I2C_DMAError+0x1f4>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d047      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a69      	ldr	r2, [pc, #420]	; (800d2f0 <I2C_DMAError+0x1f8>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d041      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a67      	ldr	r2, [pc, #412]	; (800d2f4 <I2C_DMAError+0x1fc>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d03b      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a65      	ldr	r2, [pc, #404]	; (800d2f8 <I2C_DMAError+0x200>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d035      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a63      	ldr	r2, [pc, #396]	; (800d2fc <I2C_DMAError+0x204>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d02f      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a61      	ldr	r2, [pc, #388]	; (800d300 <I2C_DMAError+0x208>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d029      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a5f      	ldr	r2, [pc, #380]	; (800d304 <I2C_DMAError+0x20c>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d023      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a5d      	ldr	r2, [pc, #372]	; (800d308 <I2C_DMAError+0x210>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d01d      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a5b      	ldr	r2, [pc, #364]	; (800d30c <I2C_DMAError+0x214>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d017      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a59      	ldr	r2, [pc, #356]	; (800d310 <I2C_DMAError+0x218>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d011      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a57      	ldr	r2, [pc, #348]	; (800d314 <I2C_DMAError+0x21c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d00b      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a55      	ldr	r2, [pc, #340]	; (800d318 <I2C_DMAError+0x220>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d005      	beq.n	800d1d2 <I2C_DMAError+0xda>
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a53      	ldr	r2, [pc, #332]	; (800d31c <I2C_DMAError+0x224>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d109      	bne.n	800d1e6 <I2C_DMAError+0xee>
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	bf0c      	ite	eq
 800d1de:	2301      	moveq	r3, #1
 800d1e0:	2300      	movne	r3, #0
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	e008      	b.n	800d1f8 <I2C_DMAError+0x100>
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	bf0c      	ite	eq
 800d1f2:	2301      	moveq	r3, #1
 800d1f4:	2300      	movne	r3, #0
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 8098 	beq.w	800d33a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a33      	ldr	r2, [pc, #204]	; (800d2e0 <I2C_DMAError+0x1e8>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d059      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a31      	ldr	r2, [pc, #196]	; (800d2e4 <I2C_DMAError+0x1ec>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d053      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a2f      	ldr	r2, [pc, #188]	; (800d2e8 <I2C_DMAError+0x1f0>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d04d      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a2d      	ldr	r2, [pc, #180]	; (800d2ec <I2C_DMAError+0x1f4>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d047      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a2b      	ldr	r2, [pc, #172]	; (800d2f0 <I2C_DMAError+0x1f8>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d041      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a29      	ldr	r2, [pc, #164]	; (800d2f4 <I2C_DMAError+0x1fc>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d03b      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a27      	ldr	r2, [pc, #156]	; (800d2f8 <I2C_DMAError+0x200>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d035      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a25      	ldr	r2, [pc, #148]	; (800d2fc <I2C_DMAError+0x204>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d02f      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a23      	ldr	r2, [pc, #140]	; (800d300 <I2C_DMAError+0x208>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d029      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a21      	ldr	r2, [pc, #132]	; (800d304 <I2C_DMAError+0x20c>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d023      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a1f      	ldr	r2, [pc, #124]	; (800d308 <I2C_DMAError+0x210>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d01d      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a1d      	ldr	r2, [pc, #116]	; (800d30c <I2C_DMAError+0x214>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d017      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a1b      	ldr	r2, [pc, #108]	; (800d310 <I2C_DMAError+0x218>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d011      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a19      	ldr	r2, [pc, #100]	; (800d314 <I2C_DMAError+0x21c>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d00b      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a17      	ldr	r2, [pc, #92]	; (800d318 <I2C_DMAError+0x220>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d005      	beq.n	800d2ca <I2C_DMAError+0x1d2>
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a15      	ldr	r2, [pc, #84]	; (800d31c <I2C_DMAError+0x224>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d12a      	bne.n	800d320 <I2C_DMAError+0x228>
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bf0c      	ite	eq
 800d2d6:	2301      	moveq	r3, #1
 800d2d8:	2300      	movne	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	e029      	b.n	800d332 <I2C_DMAError+0x23a>
 800d2de:	bf00      	nop
 800d2e0:	40020010 	.word	0x40020010
 800d2e4:	40020028 	.word	0x40020028
 800d2e8:	40020040 	.word	0x40020040
 800d2ec:	40020058 	.word	0x40020058
 800d2f0:	40020070 	.word	0x40020070
 800d2f4:	40020088 	.word	0x40020088
 800d2f8:	400200a0 	.word	0x400200a0
 800d2fc:	400200b8 	.word	0x400200b8
 800d300:	40020410 	.word	0x40020410
 800d304:	40020428 	.word	0x40020428
 800d308:	40020440 	.word	0x40020440
 800d30c:	40020458 	.word	0x40020458
 800d310:	40020470 	.word	0x40020470
 800d314:	40020488 	.word	0x40020488
 800d318:	400204a0 	.word	0x400204a0
 800d31c:	400204b8 	.word	0x400204b8
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	bf0c      	ite	eq
 800d32c:	2301      	moveq	r3, #1
 800d32e:	2300      	movne	r3, #0
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d336:	2301      	movs	r3, #1
 800d338:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7fc fdf0 	bl	8009f20 <HAL_DMA_GetError>
 800d340:	4603      	mov	r3, r0
 800d342:	2b02      	cmp	r3, #2
 800d344:	d00e      	beq.n	800d364 <I2C_DMAError+0x26c>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00b      	beq.n	800d364 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d35a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d35c:	2110      	movs	r1, #16
 800d35e:	68b8      	ldr	r0, [r7, #8]
 800d360:	f7ff fcf8 	bl	800cd54 <I2C_ITError>
  }
}
 800d364:	bf00      	nop
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d378:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d003      	beq.n	800d38a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d386:	2200      	movs	r2, #0
 800d388:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d003      	beq.n	800d39a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d396:	2200      	movs	r2, #0
 800d398:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f7ff fdca 	bl	800cf34 <I2C_TreatErrorCallback>
}
 800d3a0:	bf00      	nop
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	607b      	str	r3, [r7, #4]
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	817b      	strh	r3, [r7, #10]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d3ba:	897b      	ldrh	r3, [r7, #10]
 800d3bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d3c0:	7a7b      	ldrb	r3, [r7, #9]
 800d3c2:	041b      	lsls	r3, r3, #16
 800d3c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d3c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685a      	ldr	r2, [r3, #4]
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	0d5b      	lsrs	r3, r3, #21
 800d3e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d3e6:	4b08      	ldr	r3, [pc, #32]	; (800d408 <I2C_TransferConfig+0x60>)
 800d3e8:	430b      	orrs	r3, r1
 800d3ea:	43db      	mvns	r3, r3
 800d3ec:	ea02 0103 	and.w	r1, r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	430a      	orrs	r2, r1
 800d3f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d3fa:	bf00      	nop
 800d3fc:	371c      	adds	r7, #28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	03ff63ff 	.word	0x03ff63ff

0800d40c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d418:	2300      	movs	r3, #0
 800d41a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d420:	4a39      	ldr	r2, [pc, #228]	; (800d508 <I2C_Enable_IRQ+0xfc>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d032      	beq.n	800d48c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d42a:	4a38      	ldr	r2, [pc, #224]	; (800d50c <I2C_Enable_IRQ+0x100>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d02d      	beq.n	800d48c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d434:	4a36      	ldr	r2, [pc, #216]	; (800d510 <I2C_Enable_IRQ+0x104>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d028      	beq.n	800d48c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d43a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	da03      	bge.n	800d44a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d448:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d44a:	887b      	ldrh	r3, [r7, #2]
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d003      	beq.n	800d45c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d45a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d45c:	887b      	ldrh	r3, [r7, #2]
 800d45e:	f003 0302 	and.w	r3, r3, #2
 800d462:	2b00      	cmp	r3, #0
 800d464:	d003      	beq.n	800d46e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d46c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d46e:	887b      	ldrh	r3, [r7, #2]
 800d470:	2b10      	cmp	r3, #16
 800d472:	d103      	bne.n	800d47c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d47a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d47c:	887b      	ldrh	r3, [r7, #2]
 800d47e:	2b20      	cmp	r3, #32
 800d480:	d133      	bne.n	800d4ea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f043 0320 	orr.w	r3, r3, #32
 800d488:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d48a:	e02e      	b.n	800d4ea <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d48c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d490:	2b00      	cmp	r3, #0
 800d492:	da03      	bge.n	800d49c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d49a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d49c:	887b      	ldrh	r3, [r7, #2]
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d003      	beq.n	800d4ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d4ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d4ae:	887b      	ldrh	r3, [r7, #2]
 800d4b0:	f003 0302 	and.w	r3, r3, #2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d4be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d4c0:	887b      	ldrh	r3, [r7, #2]
 800d4c2:	2b10      	cmp	r3, #16
 800d4c4:	d103      	bne.n	800d4ce <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d4cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d4ce:	887b      	ldrh	r3, [r7, #2]
 800d4d0:	2b20      	cmp	r3, #32
 800d4d2:	d103      	bne.n	800d4dc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d4da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d4dc:	887b      	ldrh	r3, [r7, #2]
 800d4de:	2b40      	cmp	r3, #64	; 0x40
 800d4e0:	d103      	bne.n	800d4ea <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	6819      	ldr	r1, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	601a      	str	r2, [r3, #0]
}
 800d4fa:	bf00      	nop
 800d4fc:	3714      	adds	r7, #20
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	0800bc13 	.word	0x0800bc13
 800d50c:	0800c059 	.word	0x0800c059
 800d510:	0800bdf9 	.word	0x0800bdf9

0800d514 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d520:	2300      	movs	r3, #0
 800d522:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d524:	887b      	ldrh	r3, [r7, #2]
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00f      	beq.n	800d54e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d534:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d542:	2b28      	cmp	r3, #40	; 0x28
 800d544:	d003      	beq.n	800d54e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d54c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d54e:	887b      	ldrh	r3, [r7, #2]
 800d550:	f003 0302 	and.w	r3, r3, #2
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00f      	beq.n	800d578 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d55e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d566:	b2db      	uxtb	r3, r3
 800d568:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d56c:	2b28      	cmp	r3, #40	; 0x28
 800d56e:	d003      	beq.n	800d578 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d576:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d578:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	da03      	bge.n	800d588 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d586:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d588:	887b      	ldrh	r3, [r7, #2]
 800d58a:	2b10      	cmp	r3, #16
 800d58c:	d103      	bne.n	800d596 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d594:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d596:	887b      	ldrh	r3, [r7, #2]
 800d598:	2b20      	cmp	r3, #32
 800d59a:	d103      	bne.n	800d5a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f043 0320 	orr.w	r3, r3, #32
 800d5a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d5a4:	887b      	ldrh	r3, [r7, #2]
 800d5a6:	2b40      	cmp	r3, #64	; 0x40
 800d5a8:	d103      	bne.n	800d5b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6819      	ldr	r1, [r3, #0]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	43da      	mvns	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	400a      	ands	r2, r1
 800d5c2:	601a      	str	r2, [r3, #0]
}
 800d5c4:	bf00      	nop
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b20      	cmp	r3, #32
 800d5e4:	d138      	bne.n	800d658 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d101      	bne.n	800d5f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d5f0:	2302      	movs	r3, #2
 800d5f2:	e032      	b.n	800d65a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2224      	movs	r2, #36	; 0x24
 800d600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f022 0201 	bic.w	r2, r2, #1
 800d612:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d622:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6819      	ldr	r1, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	430a      	orrs	r2, r1
 800d632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f042 0201 	orr.w	r2, r2, #1
 800d642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2220      	movs	r2, #32
 800d648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	e000      	b.n	800d65a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d658:	2302      	movs	r3, #2
  }
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d666:	b480      	push	{r7}
 800d668:	b085      	sub	sp, #20
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b20      	cmp	r3, #32
 800d67a:	d139      	bne.n	800d6f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d682:	2b01      	cmp	r3, #1
 800d684:	d101      	bne.n	800d68a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d686:	2302      	movs	r3, #2
 800d688:	e033      	b.n	800d6f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2224      	movs	r2, #36	; 0x24
 800d696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f022 0201 	bic.w	r2, r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d6b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	021b      	lsls	r3, r3, #8
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f042 0201 	orr.w	r2, r2, #1
 800d6da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2220      	movs	r2, #32
 800d6e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e000      	b.n	800d6f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d6f0:	2302      	movs	r3, #2
  }
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
	...

0800d700 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d708:	4b0d      	ldr	r3, [pc, #52]	; (800d740 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d70a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d70e:	4a0c      	ldr	r2, [pc, #48]	; (800d740 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d710:	f043 0302 	orr.w	r3, r3, #2
 800d714:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d718:	4b09      	ldr	r3, [pc, #36]	; (800d740 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d71a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d71e:	f003 0302 	and.w	r3, r3, #2
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d726:	4b07      	ldr	r3, [pc, #28]	; (800d744 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	4906      	ldr	r1, [pc, #24]	; (800d744 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4313      	orrs	r3, r2
 800d730:	604b      	str	r3, [r1, #4]
}
 800d732:	bf00      	nop
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	58024400 	.word	0x58024400
 800d744:	58000400 	.word	0x58000400

0800d748 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e041      	b.n	800d7de <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800d762:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f245 5255 	movw	r2, #21845	; 0x5555
 800d76c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	6852      	ldr	r2, [r2, #4]
 800d776:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6892      	ldr	r2, [r2, #8]
 800d780:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800d782:	f7f7 ffcb 	bl	800571c <HAL_GetTick>
 800d786:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d788:	e00f      	b.n	800d7aa <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d78a:	f7f7 ffc7 	bl	800571c <HAL_GetTick>
 800d78e:	4602      	mov	r2, r0
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	1ad3      	subs	r3, r2, r3
 800d794:	2b31      	cmp	r3, #49	; 0x31
 800d796:	d908      	bls.n	800d7aa <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	f003 0307 	and.w	r3, r3, #7
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	e019      	b.n	800d7de <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f003 0307 	and.w	r3, r3, #7
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1e8      	bne.n	800d78a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	691a      	ldr	r2, [r3, #16]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d005      	beq.n	800d7d2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	68d2      	ldr	r2, [r2, #12]
 800d7ce:	611a      	str	r2, [r3, #16]
 800d7d0:	e004      	b.n	800d7dc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d7da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d7e6:	b480      	push	{r7}
 800d7e8:	b083      	sub	sp, #12
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d7f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
	...

0800d808 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d814:	4b18      	ldr	r3, [pc, #96]	; (800d878 <HAL_PWR_EnterSTOPMode+0x70>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f023 0201 	bic.w	r2, r3, #1
 800d81c:	4916      	ldr	r1, [pc, #88]	; (800d878 <HAL_PWR_EnterSTOPMode+0x70>)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4313      	orrs	r3, r2
 800d822:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800d824:	4b14      	ldr	r3, [pc, #80]	; (800d878 <HAL_PWR_EnterSTOPMode+0x70>)
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	4a13      	ldr	r2, [pc, #76]	; (800d878 <HAL_PWR_EnterSTOPMode+0x70>)
 800d82a:	f023 0305 	bic.w	r3, r3, #5
 800d82e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800d830:	4b11      	ldr	r3, [pc, #68]	; (800d878 <HAL_PWR_EnterSTOPMode+0x70>)
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	4a10      	ldr	r2, [pc, #64]	; (800d878 <HAL_PWR_EnterSTOPMode+0x70>)
 800d836:	f023 0302 	bic.w	r3, r3, #2
 800d83a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d83c:	4b0f      	ldr	r3, [pc, #60]	; (800d87c <HAL_PWR_EnterSTOPMode+0x74>)
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	4a0e      	ldr	r2, [pc, #56]	; (800d87c <HAL_PWR_EnterSTOPMode+0x74>)
 800d842:	f043 0304 	orr.w	r3, r3, #4
 800d846:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d848:	f3bf 8f4f 	dsb	sy
}
 800d84c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d84e:	f3bf 8f6f 	isb	sy
}
 800d852:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800d854:	78fb      	ldrb	r3, [r7, #3]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d101      	bne.n	800d85e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800d85a:	bf30      	wfi
 800d85c:	e000      	b.n	800d860 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800d85e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d860:	4b06      	ldr	r3, [pc, #24]	; (800d87c <HAL_PWR_EnterSTOPMode+0x74>)
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	4a05      	ldr	r2, [pc, #20]	; (800d87c <HAL_PWR_EnterSTOPMode+0x74>)
 800d866:	f023 0304 	bic.w	r3, r3, #4
 800d86a:	6113      	str	r3, [r2, #16]
}
 800d86c:	bf00      	nop
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	58024800 	.word	0x58024800
 800d87c:	e000ed00 	.word	0xe000ed00

0800d880 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d888:	4b19      	ldr	r3, [pc, #100]	; (800d8f0 <HAL_PWREx_ConfigSupply+0x70>)
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	f003 0304 	and.w	r3, r3, #4
 800d890:	2b04      	cmp	r3, #4
 800d892:	d00a      	beq.n	800d8aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d894:	4b16      	ldr	r3, [pc, #88]	; (800d8f0 <HAL_PWREx_ConfigSupply+0x70>)
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d001      	beq.n	800d8a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e01f      	b.n	800d8e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e01d      	b.n	800d8e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d8aa:	4b11      	ldr	r3, [pc, #68]	; (800d8f0 <HAL_PWREx_ConfigSupply+0x70>)
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	f023 0207 	bic.w	r2, r3, #7
 800d8b2:	490f      	ldr	r1, [pc, #60]	; (800d8f0 <HAL_PWREx_ConfigSupply+0x70>)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d8ba:	f7f7 ff2f 	bl	800571c <HAL_GetTick>
 800d8be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8c0:	e009      	b.n	800d8d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d8c2:	f7f7 ff2b 	bl	800571c <HAL_GetTick>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8d0:	d901      	bls.n	800d8d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e007      	b.n	800d8e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8d6:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <HAL_PWREx_ConfigSupply+0x70>)
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8e2:	d1ee      	bne.n	800d8c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	58024800 	.word	0x58024800

0800d8f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08c      	sub	sp, #48	; 0x30
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d102      	bne.n	800d908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d902:	2301      	movs	r3, #1
 800d904:	f000 bc48 	b.w	800e198 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 8088 	beq.w	800da26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d916:	4b99      	ldr	r3, [pc, #612]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d920:	4b96      	ldr	r3, [pc, #600]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d924:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	2b10      	cmp	r3, #16
 800d92a:	d007      	beq.n	800d93c <HAL_RCC_OscConfig+0x48>
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	2b18      	cmp	r3, #24
 800d930:	d111      	bne.n	800d956 <HAL_RCC_OscConfig+0x62>
 800d932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d934:	f003 0303 	and.w	r3, r3, #3
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d10c      	bne.n	800d956 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d93c:	4b8f      	ldr	r3, [pc, #572]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d06d      	beq.n	800da24 <HAL_RCC_OscConfig+0x130>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d169      	bne.n	800da24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	f000 bc21 	b.w	800e198 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d95e:	d106      	bne.n	800d96e <HAL_RCC_OscConfig+0x7a>
 800d960:	4b86      	ldr	r3, [pc, #536]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a85      	ldr	r2, [pc, #532]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d96a:	6013      	str	r3, [r2, #0]
 800d96c:	e02e      	b.n	800d9cc <HAL_RCC_OscConfig+0xd8>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10c      	bne.n	800d990 <HAL_RCC_OscConfig+0x9c>
 800d976:	4b81      	ldr	r3, [pc, #516]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a80      	ldr	r2, [pc, #512]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d97c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d980:	6013      	str	r3, [r2, #0]
 800d982:	4b7e      	ldr	r3, [pc, #504]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a7d      	ldr	r2, [pc, #500]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d98c:	6013      	str	r3, [r2, #0]
 800d98e:	e01d      	b.n	800d9cc <HAL_RCC_OscConfig+0xd8>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d998:	d10c      	bne.n	800d9b4 <HAL_RCC_OscConfig+0xc0>
 800d99a:	4b78      	ldr	r3, [pc, #480]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a77      	ldr	r2, [pc, #476]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	4b75      	ldr	r3, [pc, #468]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a74      	ldr	r2, [pc, #464]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	e00b      	b.n	800d9cc <HAL_RCC_OscConfig+0xd8>
 800d9b4:	4b71      	ldr	r3, [pc, #452]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a70      	ldr	r2, [pc, #448]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	4b6e      	ldr	r3, [pc, #440]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a6d      	ldr	r2, [pc, #436]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d9ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d013      	beq.n	800d9fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9d4:	f7f7 fea2 	bl	800571c <HAL_GetTick>
 800d9d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d9da:	e008      	b.n	800d9ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d9dc:	f7f7 fe9e 	bl	800571c <HAL_GetTick>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	2b64      	cmp	r3, #100	; 0x64
 800d9e8:	d901      	bls.n	800d9ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d9ea:	2303      	movs	r3, #3
 800d9ec:	e3d4      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d9ee:	4b63      	ldr	r3, [pc, #396]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0f0      	beq.n	800d9dc <HAL_RCC_OscConfig+0xe8>
 800d9fa:	e014      	b.n	800da26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9fc:	f7f7 fe8e 	bl	800571c <HAL_GetTick>
 800da00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da02:	e008      	b.n	800da16 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da04:	f7f7 fe8a 	bl	800571c <HAL_GetTick>
 800da08:	4602      	mov	r2, r0
 800da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	2b64      	cmp	r3, #100	; 0x64
 800da10:	d901      	bls.n	800da16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e3c0      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da16:	4b59      	ldr	r3, [pc, #356]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1f0      	bne.n	800da04 <HAL_RCC_OscConfig+0x110>
 800da22:	e000      	b.n	800da26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f003 0302 	and.w	r3, r3, #2
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f000 80ca 	beq.w	800dbc8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da34:	4b51      	ldr	r3, [pc, #324]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800da3e:	4b4f      	ldr	r3, [pc, #316]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800da40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d007      	beq.n	800da5a <HAL_RCC_OscConfig+0x166>
 800da4a:	6a3b      	ldr	r3, [r7, #32]
 800da4c:	2b18      	cmp	r3, #24
 800da4e:	d156      	bne.n	800dafe <HAL_RCC_OscConfig+0x20a>
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	f003 0303 	and.w	r3, r3, #3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d151      	bne.n	800dafe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da5a:	4b48      	ldr	r3, [pc, #288]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 0304 	and.w	r3, r3, #4
 800da62:	2b00      	cmp	r3, #0
 800da64:	d005      	beq.n	800da72 <HAL_RCC_OscConfig+0x17e>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	e392      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800da72:	4b42      	ldr	r3, [pc, #264]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f023 0219 	bic.w	r2, r3, #25
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	493f      	ldr	r1, [pc, #252]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800da80:	4313      	orrs	r3, r2
 800da82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da84:	f7f7 fe4a 	bl	800571c <HAL_GetTick>
 800da88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da8a:	e008      	b.n	800da9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da8c:	f7f7 fe46 	bl	800571c <HAL_GetTick>
 800da90:	4602      	mov	r2, r0
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	2b02      	cmp	r3, #2
 800da98:	d901      	bls.n	800da9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e37c      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da9e:	4b37      	ldr	r3, [pc, #220]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f003 0304 	and.w	r3, r3, #4
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0f0      	beq.n	800da8c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800daaa:	f7f7 fe43 	bl	8005734 <HAL_GetREVID>
 800daae:	4603      	mov	r3, r0
 800dab0:	f241 0203 	movw	r2, #4099	; 0x1003
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d817      	bhi.n	800dae8 <HAL_RCC_OscConfig+0x1f4>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	2b40      	cmp	r3, #64	; 0x40
 800dabe:	d108      	bne.n	800dad2 <HAL_RCC_OscConfig+0x1de>
 800dac0:	4b2e      	ldr	r3, [pc, #184]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dac8:	4a2c      	ldr	r2, [pc, #176]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800daca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dace:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dad0:	e07a      	b.n	800dbc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dad2:	4b2a      	ldr	r3, [pc, #168]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	031b      	lsls	r3, r3, #12
 800dae0:	4926      	ldr	r1, [pc, #152]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800dae2:	4313      	orrs	r3, r2
 800dae4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dae6:	e06f      	b.n	800dbc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dae8:	4b24      	ldr	r3, [pc, #144]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	061b      	lsls	r3, r3, #24
 800daf6:	4921      	ldr	r1, [pc, #132]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800daf8:	4313      	orrs	r3, r2
 800dafa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dafc:	e064      	b.n	800dbc8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d047      	beq.n	800db96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800db06:	4b1d      	ldr	r3, [pc, #116]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f023 0219 	bic.w	r2, r3, #25
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	491a      	ldr	r1, [pc, #104]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800db14:	4313      	orrs	r3, r2
 800db16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db18:	f7f7 fe00 	bl	800571c <HAL_GetTick>
 800db1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db1e:	e008      	b.n	800db32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db20:	f7f7 fdfc 	bl	800571c <HAL_GetTick>
 800db24:	4602      	mov	r2, r0
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	d901      	bls.n	800db32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800db2e:	2303      	movs	r3, #3
 800db30:	e332      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db32:	4b12      	ldr	r3, [pc, #72]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 0304 	and.w	r3, r3, #4
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d0f0      	beq.n	800db20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db3e:	f7f7 fdf9 	bl	8005734 <HAL_GetREVID>
 800db42:	4603      	mov	r3, r0
 800db44:	f241 0203 	movw	r2, #4099	; 0x1003
 800db48:	4293      	cmp	r3, r2
 800db4a:	d819      	bhi.n	800db80 <HAL_RCC_OscConfig+0x28c>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	2b40      	cmp	r3, #64	; 0x40
 800db52:	d108      	bne.n	800db66 <HAL_RCC_OscConfig+0x272>
 800db54:	4b09      	ldr	r3, [pc, #36]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800db5c:	4a07      	ldr	r2, [pc, #28]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800db5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db62:	6053      	str	r3, [r2, #4]
 800db64:	e030      	b.n	800dbc8 <HAL_RCC_OscConfig+0x2d4>
 800db66:	4b05      	ldr	r3, [pc, #20]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	031b      	lsls	r3, r3, #12
 800db74:	4901      	ldr	r1, [pc, #4]	; (800db7c <HAL_RCC_OscConfig+0x288>)
 800db76:	4313      	orrs	r3, r2
 800db78:	604b      	str	r3, [r1, #4]
 800db7a:	e025      	b.n	800dbc8 <HAL_RCC_OscConfig+0x2d4>
 800db7c:	58024400 	.word	0x58024400
 800db80:	4b9a      	ldr	r3, [pc, #616]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	061b      	lsls	r3, r3, #24
 800db8e:	4997      	ldr	r1, [pc, #604]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800db90:	4313      	orrs	r3, r2
 800db92:	604b      	str	r3, [r1, #4]
 800db94:	e018      	b.n	800dbc8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800db96:	4b95      	ldr	r3, [pc, #596]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a94      	ldr	r2, [pc, #592]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800db9c:	f023 0301 	bic.w	r3, r3, #1
 800dba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dba2:	f7f7 fdbb 	bl	800571c <HAL_GetTick>
 800dba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dba8:	e008      	b.n	800dbbc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbaa:	f7f7 fdb7 	bl	800571c <HAL_GetTick>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	2b02      	cmp	r3, #2
 800dbb6:	d901      	bls.n	800dbbc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800dbb8:	2303      	movs	r3, #3
 800dbba:	e2ed      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dbbc:	4b8b      	ldr	r3, [pc, #556]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 0304 	and.w	r3, r3, #4
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1f0      	bne.n	800dbaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f003 0310 	and.w	r3, r3, #16
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 80a9 	beq.w	800dd28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbd6:	4b85      	ldr	r3, [pc, #532]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dbe0:	4b82      	ldr	r3, [pc, #520]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	2b08      	cmp	r3, #8
 800dbea:	d007      	beq.n	800dbfc <HAL_RCC_OscConfig+0x308>
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	2b18      	cmp	r3, #24
 800dbf0:	d13a      	bne.n	800dc68 <HAL_RCC_OscConfig+0x374>
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f003 0303 	and.w	r3, r3, #3
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d135      	bne.n	800dc68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dbfc:	4b7b      	ldr	r3, [pc, #492]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d005      	beq.n	800dc14 <HAL_RCC_OscConfig+0x320>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	69db      	ldr	r3, [r3, #28]
 800dc0c:	2b80      	cmp	r3, #128	; 0x80
 800dc0e:	d001      	beq.n	800dc14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e2c1      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc14:	f7f7 fd8e 	bl	8005734 <HAL_GetREVID>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	f241 0203 	movw	r2, #4099	; 0x1003
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d817      	bhi.n	800dc52 <HAL_RCC_OscConfig+0x35e>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	2b20      	cmp	r3, #32
 800dc28:	d108      	bne.n	800dc3c <HAL_RCC_OscConfig+0x348>
 800dc2a:	4b70      	ldr	r3, [pc, #448]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dc32:	4a6e      	ldr	r2, [pc, #440]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc38:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc3a:	e075      	b.n	800dd28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc3c:	4b6b      	ldr	r3, [pc, #428]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	069b      	lsls	r3, r3, #26
 800dc4a:	4968      	ldr	r1, [pc, #416]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc50:	e06a      	b.n	800dd28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc52:	4b66      	ldr	r3, [pc, #408]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a1b      	ldr	r3, [r3, #32]
 800dc5e:	061b      	lsls	r3, r3, #24
 800dc60:	4962      	ldr	r1, [pc, #392]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc66:	e05f      	b.n	800dd28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	69db      	ldr	r3, [r3, #28]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d042      	beq.n	800dcf6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dc70:	4b5e      	ldr	r3, [pc, #376]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a5d      	ldr	r2, [pc, #372]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc7c:	f7f7 fd4e 	bl	800571c <HAL_GetTick>
 800dc80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dc82:	e008      	b.n	800dc96 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dc84:	f7f7 fd4a 	bl	800571c <HAL_GetTick>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d901      	bls.n	800dc96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800dc92:	2303      	movs	r3, #3
 800dc94:	e280      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dc96:	4b55      	ldr	r3, [pc, #340]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d0f0      	beq.n	800dc84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dca2:	f7f7 fd47 	bl	8005734 <HAL_GetREVID>
 800dca6:	4603      	mov	r3, r0
 800dca8:	f241 0203 	movw	r2, #4099	; 0x1003
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d817      	bhi.n	800dce0 <HAL_RCC_OscConfig+0x3ec>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6a1b      	ldr	r3, [r3, #32]
 800dcb4:	2b20      	cmp	r3, #32
 800dcb6:	d108      	bne.n	800dcca <HAL_RCC_OscConfig+0x3d6>
 800dcb8:	4b4c      	ldr	r3, [pc, #304]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dcc0:	4a4a      	ldr	r2, [pc, #296]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dcc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcc6:	6053      	str	r3, [r2, #4]
 800dcc8:	e02e      	b.n	800dd28 <HAL_RCC_OscConfig+0x434>
 800dcca:	4b48      	ldr	r3, [pc, #288]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a1b      	ldr	r3, [r3, #32]
 800dcd6:	069b      	lsls	r3, r3, #26
 800dcd8:	4944      	ldr	r1, [pc, #272]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	604b      	str	r3, [r1, #4]
 800dcde:	e023      	b.n	800dd28 <HAL_RCC_OscConfig+0x434>
 800dce0:	4b42      	ldr	r3, [pc, #264]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a1b      	ldr	r3, [r3, #32]
 800dcec:	061b      	lsls	r3, r3, #24
 800dcee:	493f      	ldr	r1, [pc, #252]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	60cb      	str	r3, [r1, #12]
 800dcf4:	e018      	b.n	800dd28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dcf6:	4b3d      	ldr	r3, [pc, #244]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a3c      	ldr	r2, [pc, #240]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dcfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd02:	f7f7 fd0b 	bl	800571c <HAL_GetTick>
 800dd06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dd08:	e008      	b.n	800dd1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dd0a:	f7f7 fd07 	bl	800571c <HAL_GetTick>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d901      	bls.n	800dd1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dd18:	2303      	movs	r3, #3
 800dd1a:	e23d      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dd1c:	4b33      	ldr	r3, [pc, #204]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d1f0      	bne.n	800dd0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 0308 	and.w	r3, r3, #8
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d036      	beq.n	800dda2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d019      	beq.n	800dd70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd3c:	4b2b      	ldr	r3, [pc, #172]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dd3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd40:	4a2a      	ldr	r2, [pc, #168]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dd42:	f043 0301 	orr.w	r3, r3, #1
 800dd46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd48:	f7f7 fce8 	bl	800571c <HAL_GetTick>
 800dd4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dd4e:	e008      	b.n	800dd62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dd50:	f7f7 fce4 	bl	800571c <HAL_GetTick>
 800dd54:	4602      	mov	r2, r0
 800dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d901      	bls.n	800dd62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	e21a      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dd62:	4b22      	ldr	r3, [pc, #136]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dd64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd66:	f003 0302 	and.w	r3, r3, #2
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d0f0      	beq.n	800dd50 <HAL_RCC_OscConfig+0x45c>
 800dd6e:	e018      	b.n	800dda2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dd70:	4b1e      	ldr	r3, [pc, #120]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd74:	4a1d      	ldr	r2, [pc, #116]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dd76:	f023 0301 	bic.w	r3, r3, #1
 800dd7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd7c:	f7f7 fcce 	bl	800571c <HAL_GetTick>
 800dd80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dd82:	e008      	b.n	800dd96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dd84:	f7f7 fcca 	bl	800571c <HAL_GetTick>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	2b02      	cmp	r3, #2
 800dd90:	d901      	bls.n	800dd96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800dd92:	2303      	movs	r3, #3
 800dd94:	e200      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dd96:	4b15      	ldr	r3, [pc, #84]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800dd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd9a:	f003 0302 	and.w	r3, r3, #2
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1f0      	bne.n	800dd84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f003 0320 	and.w	r3, r3, #32
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d039      	beq.n	800de22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d01c      	beq.n	800ddf0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ddb6:	4b0d      	ldr	r3, [pc, #52]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a0c      	ldr	r2, [pc, #48]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800ddbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ddc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ddc2:	f7f7 fcab 	bl	800571c <HAL_GetTick>
 800ddc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ddc8:	e008      	b.n	800dddc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ddca:	f7f7 fca7 	bl	800571c <HAL_GetTick>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d901      	bls.n	800dddc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ddd8:	2303      	movs	r3, #3
 800ddda:	e1dd      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dddc:	4b03      	ldr	r3, [pc, #12]	; (800ddec <HAL_RCC_OscConfig+0x4f8>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d0f0      	beq.n	800ddca <HAL_RCC_OscConfig+0x4d6>
 800dde8:	e01b      	b.n	800de22 <HAL_RCC_OscConfig+0x52e>
 800ddea:	bf00      	nop
 800ddec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ddf0:	4b9b      	ldr	r3, [pc, #620]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a9a      	ldr	r2, [pc, #616]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800ddf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ddfc:	f7f7 fc8e 	bl	800571c <HAL_GetTick>
 800de00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800de02:	e008      	b.n	800de16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de04:	f7f7 fc8a 	bl	800571c <HAL_GetTick>
 800de08:	4602      	mov	r2, r0
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d901      	bls.n	800de16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800de12:	2303      	movs	r3, #3
 800de14:	e1c0      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800de16:	4b92      	ldr	r3, [pc, #584]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1f0      	bne.n	800de04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 0304 	and.w	r3, r3, #4
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 8081 	beq.w	800df32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800de30:	4b8c      	ldr	r3, [pc, #560]	; (800e064 <HAL_RCC_OscConfig+0x770>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a8b      	ldr	r2, [pc, #556]	; (800e064 <HAL_RCC_OscConfig+0x770>)
 800de36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800de3c:	f7f7 fc6e 	bl	800571c <HAL_GetTick>
 800de40:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de42:	e008      	b.n	800de56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de44:	f7f7 fc6a 	bl	800571c <HAL_GetTick>
 800de48:	4602      	mov	r2, r0
 800de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4c:	1ad3      	subs	r3, r2, r3
 800de4e:	2b64      	cmp	r3, #100	; 0x64
 800de50:	d901      	bls.n	800de56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e1a0      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de56:	4b83      	ldr	r3, [pc, #524]	; (800e064 <HAL_RCC_OscConfig+0x770>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d0f0      	beq.n	800de44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	2b01      	cmp	r3, #1
 800de68:	d106      	bne.n	800de78 <HAL_RCC_OscConfig+0x584>
 800de6a:	4b7d      	ldr	r3, [pc, #500]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800de6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de6e:	4a7c      	ldr	r2, [pc, #496]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800de70:	f043 0301 	orr.w	r3, r3, #1
 800de74:	6713      	str	r3, [r2, #112]	; 0x70
 800de76:	e02d      	b.n	800ded4 <HAL_RCC_OscConfig+0x5e0>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10c      	bne.n	800de9a <HAL_RCC_OscConfig+0x5a6>
 800de80:	4b77      	ldr	r3, [pc, #476]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800de82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de84:	4a76      	ldr	r2, [pc, #472]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800de86:	f023 0301 	bic.w	r3, r3, #1
 800de8a:	6713      	str	r3, [r2, #112]	; 0x70
 800de8c:	4b74      	ldr	r3, [pc, #464]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800de8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de90:	4a73      	ldr	r2, [pc, #460]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800de92:	f023 0304 	bic.w	r3, r3, #4
 800de96:	6713      	str	r3, [r2, #112]	; 0x70
 800de98:	e01c      	b.n	800ded4 <HAL_RCC_OscConfig+0x5e0>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	2b05      	cmp	r3, #5
 800dea0:	d10c      	bne.n	800debc <HAL_RCC_OscConfig+0x5c8>
 800dea2:	4b6f      	ldr	r3, [pc, #444]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dea6:	4a6e      	ldr	r2, [pc, #440]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dea8:	f043 0304 	orr.w	r3, r3, #4
 800deac:	6713      	str	r3, [r2, #112]	; 0x70
 800deae:	4b6c      	ldr	r3, [pc, #432]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800deb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deb2:	4a6b      	ldr	r2, [pc, #428]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800deb4:	f043 0301 	orr.w	r3, r3, #1
 800deb8:	6713      	str	r3, [r2, #112]	; 0x70
 800deba:	e00b      	b.n	800ded4 <HAL_RCC_OscConfig+0x5e0>
 800debc:	4b68      	ldr	r3, [pc, #416]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800debe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dec0:	4a67      	ldr	r2, [pc, #412]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dec2:	f023 0301 	bic.w	r3, r3, #1
 800dec6:	6713      	str	r3, [r2, #112]	; 0x70
 800dec8:	4b65      	ldr	r3, [pc, #404]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800deca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800decc:	4a64      	ldr	r2, [pc, #400]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dece:	f023 0304 	bic.w	r3, r3, #4
 800ded2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d015      	beq.n	800df08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dedc:	f7f7 fc1e 	bl	800571c <HAL_GetTick>
 800dee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dee2:	e00a      	b.n	800defa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dee4:	f7f7 fc1a 	bl	800571c <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f241 3288 	movw	r2, #5000	; 0x1388
 800def2:	4293      	cmp	r3, r2
 800def4:	d901      	bls.n	800defa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800def6:	2303      	movs	r3, #3
 800def8:	e14e      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800defa:	4b59      	ldr	r3, [pc, #356]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800defc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800defe:	f003 0302 	and.w	r3, r3, #2
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0ee      	beq.n	800dee4 <HAL_RCC_OscConfig+0x5f0>
 800df06:	e014      	b.n	800df32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df08:	f7f7 fc08 	bl	800571c <HAL_GetTick>
 800df0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800df0e:	e00a      	b.n	800df26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df10:	f7f7 fc04 	bl	800571c <HAL_GetTick>
 800df14:	4602      	mov	r2, r0
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df1e:	4293      	cmp	r3, r2
 800df20:	d901      	bls.n	800df26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800df22:	2303      	movs	r3, #3
 800df24:	e138      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800df26:	4b4e      	ldr	r3, [pc, #312]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800df28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df2a:	f003 0302 	and.w	r3, r3, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1ee      	bne.n	800df10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 812d 	beq.w	800e196 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800df3c:	4b48      	ldr	r3, [pc, #288]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800df3e:	691b      	ldr	r3, [r3, #16]
 800df40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df44:	2b18      	cmp	r3, #24
 800df46:	f000 80bd 	beq.w	800e0c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4e:	2b02      	cmp	r3, #2
 800df50:	f040 809e 	bne.w	800e090 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df54:	4b42      	ldr	r3, [pc, #264]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a41      	ldr	r2, [pc, #260]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800df5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df60:	f7f7 fbdc 	bl	800571c <HAL_GetTick>
 800df64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df66:	e008      	b.n	800df7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df68:	f7f7 fbd8 	bl	800571c <HAL_GetTick>
 800df6c:	4602      	mov	r2, r0
 800df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df70:	1ad3      	subs	r3, r2, r3
 800df72:	2b02      	cmp	r3, #2
 800df74:	d901      	bls.n	800df7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800df76:	2303      	movs	r3, #3
 800df78:	e10e      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df7a:	4b39      	ldr	r3, [pc, #228]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1f0      	bne.n	800df68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800df86:	4b36      	ldr	r3, [pc, #216]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800df88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df8a:	4b37      	ldr	r3, [pc, #220]	; (800e068 <HAL_RCC_OscConfig+0x774>)
 800df8c:	4013      	ands	r3, r2
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800df96:	0112      	lsls	r2, r2, #4
 800df98:	430a      	orrs	r2, r1
 800df9a:	4931      	ldr	r1, [pc, #196]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800df9c:	4313      	orrs	r3, r2
 800df9e:	628b      	str	r3, [r1, #40]	; 0x28
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	025b      	lsls	r3, r3, #9
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	431a      	orrs	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	041b      	lsls	r3, r3, #16
 800dfbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	061b      	lsls	r3, r3, #24
 800dfcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dfd0:	4923      	ldr	r1, [pc, #140]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800dfd6:	4b22      	ldr	r3, [pc, #136]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfda:	4a21      	ldr	r2, [pc, #132]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dfdc:	f023 0301 	bic.w	r3, r3, #1
 800dfe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dfe2:	4b1f      	ldr	r3, [pc, #124]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dfe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfe6:	4b21      	ldr	r3, [pc, #132]	; (800e06c <HAL_RCC_OscConfig+0x778>)
 800dfe8:	4013      	ands	r3, r2
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dfee:	00d2      	lsls	r2, r2, #3
 800dff0:	491b      	ldr	r1, [pc, #108]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dff2:	4313      	orrs	r3, r2
 800dff4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dff6:	4b1a      	ldr	r3, [pc, #104]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800dff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffa:	f023 020c 	bic.w	r2, r3, #12
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e002:	4917      	ldr	r1, [pc, #92]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e004:	4313      	orrs	r3, r2
 800e006:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e008:	4b15      	ldr	r3, [pc, #84]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	f023 0202 	bic.w	r2, r3, #2
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e014:	4912      	ldr	r1, [pc, #72]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e016:	4313      	orrs	r3, r2
 800e018:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e01a:	4b11      	ldr	r3, [pc, #68]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01e:	4a10      	ldr	r2, [pc, #64]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e026:	4b0e      	ldr	r3, [pc, #56]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02a:	4a0d      	ldr	r2, [pc, #52]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e032:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e036:	4a0a      	ldr	r2, [pc, #40]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e03c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e03e:	4b08      	ldr	r3, [pc, #32]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e042:	4a07      	ldr	r2, [pc, #28]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e044:	f043 0301 	orr.w	r3, r3, #1
 800e048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e04a:	4b05      	ldr	r3, [pc, #20]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a04      	ldr	r2, [pc, #16]	; (800e060 <HAL_RCC_OscConfig+0x76c>)
 800e050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e056:	f7f7 fb61 	bl	800571c <HAL_GetTick>
 800e05a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e05c:	e011      	b.n	800e082 <HAL_RCC_OscConfig+0x78e>
 800e05e:	bf00      	nop
 800e060:	58024400 	.word	0x58024400
 800e064:	58024800 	.word	0x58024800
 800e068:	fffffc0c 	.word	0xfffffc0c
 800e06c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e070:	f7f7 fb54 	bl	800571c <HAL_GetTick>
 800e074:	4602      	mov	r2, r0
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d901      	bls.n	800e082 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e07e:	2303      	movs	r3, #3
 800e080:	e08a      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e082:	4b47      	ldr	r3, [pc, #284]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0f0      	beq.n	800e070 <HAL_RCC_OscConfig+0x77c>
 800e08e:	e082      	b.n	800e196 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e090:	4b43      	ldr	r3, [pc, #268]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a42      	ldr	r2, [pc, #264]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e09a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e09c:	f7f7 fb3e 	bl	800571c <HAL_GetTick>
 800e0a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e0a2:	e008      	b.n	800e0b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0a4:	f7f7 fb3a 	bl	800571c <HAL_GetTick>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d901      	bls.n	800e0b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	e070      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e0b6:	4b3a      	ldr	r3, [pc, #232]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1f0      	bne.n	800e0a4 <HAL_RCC_OscConfig+0x7b0>
 800e0c2:	e068      	b.n	800e196 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e0c4:	4b36      	ldr	r3, [pc, #216]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e0ca:	4b35      	ldr	r3, [pc, #212]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d031      	beq.n	800e13c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	f003 0203 	and.w	r2, r3, #3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d12a      	bne.n	800e13c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	091b      	lsrs	r3, r3, #4
 800e0ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d122      	bne.n	800e13c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e100:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e102:	429a      	cmp	r2, r3
 800e104:	d11a      	bne.n	800e13c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	0a5b      	lsrs	r3, r3, #9
 800e10a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e112:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e114:	429a      	cmp	r2, r3
 800e116:	d111      	bne.n	800e13c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	0c1b      	lsrs	r3, r3, #16
 800e11c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e124:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e126:	429a      	cmp	r2, r3
 800e128:	d108      	bne.n	800e13c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	0e1b      	lsrs	r3, r3, #24
 800e12e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e136:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e138:	429a      	cmp	r2, r3
 800e13a:	d001      	beq.n	800e140 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e02b      	b.n	800e198 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e140:	4b17      	ldr	r3, [pc, #92]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e144:	08db      	lsrs	r3, r3, #3
 800e146:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e14a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	429a      	cmp	r2, r3
 800e154:	d01f      	beq.n	800e196 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e156:	4b12      	ldr	r3, [pc, #72]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15a:	4a11      	ldr	r2, [pc, #68]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e15c:	f023 0301 	bic.w	r3, r3, #1
 800e160:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e162:	f7f7 fadb 	bl	800571c <HAL_GetTick>
 800e166:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e168:	bf00      	nop
 800e16a:	f7f7 fad7 	bl	800571c <HAL_GetTick>
 800e16e:	4602      	mov	r2, r0
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	4293      	cmp	r3, r2
 800e174:	d0f9      	beq.n	800e16a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e176:	4b0a      	ldr	r3, [pc, #40]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e17a:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <HAL_RCC_OscConfig+0x8b0>)
 800e17c:	4013      	ands	r3, r2
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e182:	00d2      	lsls	r2, r2, #3
 800e184:	4906      	ldr	r1, [pc, #24]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e186:	4313      	orrs	r3, r2
 800e188:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18e:	4a04      	ldr	r2, [pc, #16]	; (800e1a0 <HAL_RCC_OscConfig+0x8ac>)
 800e190:	f043 0301 	orr.w	r3, r3, #1
 800e194:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3730      	adds	r7, #48	; 0x30
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	58024400 	.word	0x58024400
 800e1a4:	ffff0007 	.word	0xffff0007

0800e1a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d101      	bne.n	800e1bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e19c      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e1bc:	4b8a      	ldr	r3, [pc, #552]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f003 030f 	and.w	r3, r3, #15
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d910      	bls.n	800e1ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e1ca:	4b87      	ldr	r3, [pc, #540]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f023 020f 	bic.w	r2, r3, #15
 800e1d2:	4985      	ldr	r1, [pc, #532]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1da:	4b83      	ldr	r3, [pc, #524]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f003 030f 	and.w	r3, r3, #15
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d001      	beq.n	800e1ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e184      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 0304 	and.w	r3, r3, #4
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d010      	beq.n	800e21a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	691a      	ldr	r2, [r3, #16]
 800e1fc:	4b7b      	ldr	r3, [pc, #492]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e1fe:	699b      	ldr	r3, [r3, #24]
 800e200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e204:	429a      	cmp	r2, r3
 800e206:	d908      	bls.n	800e21a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e208:	4b78      	ldr	r3, [pc, #480]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	4975      	ldr	r1, [pc, #468]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e216:	4313      	orrs	r3, r2
 800e218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f003 0308 	and.w	r3, r3, #8
 800e222:	2b00      	cmp	r3, #0
 800e224:	d010      	beq.n	800e248 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	695a      	ldr	r2, [r3, #20]
 800e22a:	4b70      	ldr	r3, [pc, #448]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e232:	429a      	cmp	r2, r3
 800e234:	d908      	bls.n	800e248 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e236:	4b6d      	ldr	r3, [pc, #436]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e238:	69db      	ldr	r3, [r3, #28]
 800e23a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	496a      	ldr	r1, [pc, #424]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e244:	4313      	orrs	r3, r2
 800e246:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f003 0310 	and.w	r3, r3, #16
 800e250:	2b00      	cmp	r3, #0
 800e252:	d010      	beq.n	800e276 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	699a      	ldr	r2, [r3, #24]
 800e258:	4b64      	ldr	r3, [pc, #400]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e25a:	69db      	ldr	r3, [r3, #28]
 800e25c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e260:	429a      	cmp	r2, r3
 800e262:	d908      	bls.n	800e276 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e264:	4b61      	ldr	r3, [pc, #388]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	495e      	ldr	r1, [pc, #376]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e272:	4313      	orrs	r3, r2
 800e274:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f003 0320 	and.w	r3, r3, #32
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d010      	beq.n	800e2a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	69da      	ldr	r2, [r3, #28]
 800e286:	4b59      	ldr	r3, [pc, #356]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e28e:	429a      	cmp	r2, r3
 800e290:	d908      	bls.n	800e2a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e292:	4b56      	ldr	r3, [pc, #344]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	69db      	ldr	r3, [r3, #28]
 800e29e:	4953      	ldr	r1, [pc, #332]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f003 0302 	and.w	r3, r3, #2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d010      	beq.n	800e2d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	68da      	ldr	r2, [r3, #12]
 800e2b4:	4b4d      	ldr	r3, [pc, #308]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e2b6:	699b      	ldr	r3, [r3, #24]
 800e2b8:	f003 030f 	and.w	r3, r3, #15
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d908      	bls.n	800e2d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e2c0:	4b4a      	ldr	r3, [pc, #296]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	f023 020f 	bic.w	r2, r3, #15
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	4947      	ldr	r1, [pc, #284]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f003 0301 	and.w	r3, r3, #1
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d055      	beq.n	800e38a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e2de:	4b43      	ldr	r3, [pc, #268]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	4940      	ldr	r1, [pc, #256]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d107      	bne.n	800e308 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e2f8:	4b3c      	ldr	r3, [pc, #240]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d121      	bne.n	800e348 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e304:	2301      	movs	r3, #1
 800e306:	e0f6      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	d107      	bne.n	800e320 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e310:	4b36      	ldr	r3, [pc, #216]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d115      	bne.n	800e348 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e31c:	2301      	movs	r3, #1
 800e31e:	e0ea      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d107      	bne.n	800e338 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e328:	4b30      	ldr	r3, [pc, #192]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e330:	2b00      	cmp	r3, #0
 800e332:	d109      	bne.n	800e348 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e0de      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e338:	4b2c      	ldr	r3, [pc, #176]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f003 0304 	and.w	r3, r3, #4
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e0d6      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e348:	4b28      	ldr	r3, [pc, #160]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	f023 0207 	bic.w	r2, r3, #7
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	4925      	ldr	r1, [pc, #148]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e356:	4313      	orrs	r3, r2
 800e358:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e35a:	f7f7 f9df 	bl	800571c <HAL_GetTick>
 800e35e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e360:	e00a      	b.n	800e378 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e362:	f7f7 f9db 	bl	800571c <HAL_GetTick>
 800e366:	4602      	mov	r2, r0
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	1ad3      	subs	r3, r2, r3
 800e36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e370:	4293      	cmp	r3, r2
 800e372:	d901      	bls.n	800e378 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e374:	2303      	movs	r3, #3
 800e376:	e0be      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e378:	4b1c      	ldr	r3, [pc, #112]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e37a:	691b      	ldr	r3, [r3, #16]
 800e37c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	00db      	lsls	r3, r3, #3
 800e386:	429a      	cmp	r2, r3
 800e388:	d1eb      	bne.n	800e362 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b00      	cmp	r3, #0
 800e394:	d010      	beq.n	800e3b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68da      	ldr	r2, [r3, #12]
 800e39a:	4b14      	ldr	r3, [pc, #80]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e39c:	699b      	ldr	r3, [r3, #24]
 800e39e:	f003 030f 	and.w	r3, r3, #15
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d208      	bcs.n	800e3b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e3a6:	4b11      	ldr	r3, [pc, #68]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e3a8:	699b      	ldr	r3, [r3, #24]
 800e3aa:	f023 020f 	bic.w	r2, r3, #15
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	490e      	ldr	r1, [pc, #56]	; (800e3ec <HAL_RCC_ClockConfig+0x244>)
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e3b8:	4b0b      	ldr	r3, [pc, #44]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f003 030f 	and.w	r3, r3, #15
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d214      	bcs.n	800e3f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3c6:	4b08      	ldr	r3, [pc, #32]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f023 020f 	bic.w	r2, r3, #15
 800e3ce:	4906      	ldr	r1, [pc, #24]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e3d6:	4b04      	ldr	r3, [pc, #16]	; (800e3e8 <HAL_RCC_ClockConfig+0x240>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f003 030f 	and.w	r3, r3, #15
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d005      	beq.n	800e3f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e086      	b.n	800e4f6 <HAL_RCC_ClockConfig+0x34e>
 800e3e8:	52002000 	.word	0x52002000
 800e3ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0304 	and.w	r3, r3, #4
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d010      	beq.n	800e41e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	691a      	ldr	r2, [r3, #16]
 800e400:	4b3f      	ldr	r3, [pc, #252]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e408:	429a      	cmp	r2, r3
 800e40a:	d208      	bcs.n	800e41e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e40c:	4b3c      	ldr	r3, [pc, #240]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e40e:	699b      	ldr	r3, [r3, #24]
 800e410:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	4939      	ldr	r1, [pc, #228]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e41a:	4313      	orrs	r3, r2
 800e41c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f003 0308 	and.w	r3, r3, #8
 800e426:	2b00      	cmp	r3, #0
 800e428:	d010      	beq.n	800e44c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	695a      	ldr	r2, [r3, #20]
 800e42e:	4b34      	ldr	r3, [pc, #208]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e430:	69db      	ldr	r3, [r3, #28]
 800e432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e436:	429a      	cmp	r2, r3
 800e438:	d208      	bcs.n	800e44c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e43a:	4b31      	ldr	r3, [pc, #196]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e43c:	69db      	ldr	r3, [r3, #28]
 800e43e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	492e      	ldr	r1, [pc, #184]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e448:	4313      	orrs	r3, r2
 800e44a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f003 0310 	and.w	r3, r3, #16
 800e454:	2b00      	cmp	r3, #0
 800e456:	d010      	beq.n	800e47a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	699a      	ldr	r2, [r3, #24]
 800e45c:	4b28      	ldr	r3, [pc, #160]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e464:	429a      	cmp	r2, r3
 800e466:	d208      	bcs.n	800e47a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e468:	4b25      	ldr	r3, [pc, #148]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	4922      	ldr	r1, [pc, #136]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e476:	4313      	orrs	r3, r2
 800e478:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f003 0320 	and.w	r3, r3, #32
 800e482:	2b00      	cmp	r3, #0
 800e484:	d010      	beq.n	800e4a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	69da      	ldr	r2, [r3, #28]
 800e48a:	4b1d      	ldr	r3, [pc, #116]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e48c:	6a1b      	ldr	r3, [r3, #32]
 800e48e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e492:	429a      	cmp	r2, r3
 800e494:	d208      	bcs.n	800e4a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e496:	4b1a      	ldr	r3, [pc, #104]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e498:	6a1b      	ldr	r3, [r3, #32]
 800e49a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	4917      	ldr	r1, [pc, #92]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e4a8:	f000 f834 	bl	800e514 <HAL_RCC_GetSysClockFreq>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	4b14      	ldr	r3, [pc, #80]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	0a1b      	lsrs	r3, r3, #8
 800e4b4:	f003 030f 	and.w	r3, r3, #15
 800e4b8:	4912      	ldr	r1, [pc, #72]	; (800e504 <HAL_RCC_ClockConfig+0x35c>)
 800e4ba:	5ccb      	ldrb	r3, [r1, r3]
 800e4bc:	f003 031f 	and.w	r3, r3, #31
 800e4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e4c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e4c6:	4b0e      	ldr	r3, [pc, #56]	; (800e500 <HAL_RCC_ClockConfig+0x358>)
 800e4c8:	699b      	ldr	r3, [r3, #24]
 800e4ca:	f003 030f 	and.w	r3, r3, #15
 800e4ce:	4a0d      	ldr	r2, [pc, #52]	; (800e504 <HAL_RCC_ClockConfig+0x35c>)
 800e4d0:	5cd3      	ldrb	r3, [r2, r3]
 800e4d2:	f003 031f 	and.w	r3, r3, #31
 800e4d6:	693a      	ldr	r2, [r7, #16]
 800e4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800e4dc:	4a0a      	ldr	r2, [pc, #40]	; (800e508 <HAL_RCC_ClockConfig+0x360>)
 800e4de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e4e0:	4a0a      	ldr	r2, [pc, #40]	; (800e50c <HAL_RCC_ClockConfig+0x364>)
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e4e6:	4b0a      	ldr	r3, [pc, #40]	; (800e510 <HAL_RCC_ClockConfig+0x368>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7f5 ff3c 	bl	8004368 <HAL_InitTick>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3718      	adds	r7, #24
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	58024400 	.word	0x58024400
 800e504:	0801abe4 	.word	0x0801abe4
 800e508:	240000c0 	.word	0x240000c0
 800e50c:	240000bc 	.word	0x240000bc
 800e510:	240000c4 	.word	0x240000c4

0800e514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e514:	b480      	push	{r7}
 800e516:	b089      	sub	sp, #36	; 0x24
 800e518:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e51a:	4bb3      	ldr	r3, [pc, #716]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e51c:	691b      	ldr	r3, [r3, #16]
 800e51e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e522:	2b18      	cmp	r3, #24
 800e524:	f200 8155 	bhi.w	800e7d2 <HAL_RCC_GetSysClockFreq+0x2be>
 800e528:	a201      	add	r2, pc, #4	; (adr r2, 800e530 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e52e:	bf00      	nop
 800e530:	0800e595 	.word	0x0800e595
 800e534:	0800e7d3 	.word	0x0800e7d3
 800e538:	0800e7d3 	.word	0x0800e7d3
 800e53c:	0800e7d3 	.word	0x0800e7d3
 800e540:	0800e7d3 	.word	0x0800e7d3
 800e544:	0800e7d3 	.word	0x0800e7d3
 800e548:	0800e7d3 	.word	0x0800e7d3
 800e54c:	0800e7d3 	.word	0x0800e7d3
 800e550:	0800e5bb 	.word	0x0800e5bb
 800e554:	0800e7d3 	.word	0x0800e7d3
 800e558:	0800e7d3 	.word	0x0800e7d3
 800e55c:	0800e7d3 	.word	0x0800e7d3
 800e560:	0800e7d3 	.word	0x0800e7d3
 800e564:	0800e7d3 	.word	0x0800e7d3
 800e568:	0800e7d3 	.word	0x0800e7d3
 800e56c:	0800e7d3 	.word	0x0800e7d3
 800e570:	0800e5c1 	.word	0x0800e5c1
 800e574:	0800e7d3 	.word	0x0800e7d3
 800e578:	0800e7d3 	.word	0x0800e7d3
 800e57c:	0800e7d3 	.word	0x0800e7d3
 800e580:	0800e7d3 	.word	0x0800e7d3
 800e584:	0800e7d3 	.word	0x0800e7d3
 800e588:	0800e7d3 	.word	0x0800e7d3
 800e58c:	0800e7d3 	.word	0x0800e7d3
 800e590:	0800e5c7 	.word	0x0800e5c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e594:	4b94      	ldr	r3, [pc, #592]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f003 0320 	and.w	r3, r3, #32
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d009      	beq.n	800e5b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5a0:	4b91      	ldr	r3, [pc, #580]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	08db      	lsrs	r3, r3, #3
 800e5a6:	f003 0303 	and.w	r3, r3, #3
 800e5aa:	4a90      	ldr	r2, [pc, #576]	; (800e7ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e5ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e5b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e5b2:	e111      	b.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e5b4:	4b8d      	ldr	r3, [pc, #564]	; (800e7ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e5b6:	61bb      	str	r3, [r7, #24]
      break;
 800e5b8:	e10e      	b.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e5ba:	4b8d      	ldr	r3, [pc, #564]	; (800e7f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e5bc:	61bb      	str	r3, [r7, #24]
      break;
 800e5be:	e10b      	b.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e5c0:	4b8c      	ldr	r3, [pc, #560]	; (800e7f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e5c2:	61bb      	str	r3, [r7, #24]
      break;
 800e5c4:	e108      	b.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e5c6:	4b88      	ldr	r3, [pc, #544]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ca:	f003 0303 	and.w	r3, r3, #3
 800e5ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e5d0:	4b85      	ldr	r3, [pc, #532]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d4:	091b      	lsrs	r3, r3, #4
 800e5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e5dc:	4b82      	ldr	r3, [pc, #520]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e0:	f003 0301 	and.w	r3, r3, #1
 800e5e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e5e6:	4b80      	ldr	r3, [pc, #512]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ea:	08db      	lsrs	r3, r3, #3
 800e5ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	fb02 f303 	mul.w	r3, r2, r3
 800e5f6:	ee07 3a90 	vmov	s15, r3
 800e5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	2b00      	cmp	r3, #0
 800e606:	f000 80e1 	beq.w	800e7cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	f000 8083 	beq.w	800e718 <HAL_RCC_GetSysClockFreq+0x204>
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	2b02      	cmp	r3, #2
 800e616:	f200 80a1 	bhi.w	800e75c <HAL_RCC_GetSysClockFreq+0x248>
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d003      	beq.n	800e628 <HAL_RCC_GetSysClockFreq+0x114>
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2b01      	cmp	r3, #1
 800e624:	d056      	beq.n	800e6d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e626:	e099      	b.n	800e75c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e628:	4b6f      	ldr	r3, [pc, #444]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f003 0320 	and.w	r3, r3, #32
 800e630:	2b00      	cmp	r3, #0
 800e632:	d02d      	beq.n	800e690 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e634:	4b6c      	ldr	r3, [pc, #432]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	08db      	lsrs	r3, r3, #3
 800e63a:	f003 0303 	and.w	r3, r3, #3
 800e63e:	4a6b      	ldr	r2, [pc, #428]	; (800e7ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e640:	fa22 f303 	lsr.w	r3, r2, r3
 800e644:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	ee07 3a90 	vmov	s15, r3
 800e64c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	ee07 3a90 	vmov	s15, r3
 800e656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e65e:	4b62      	ldr	r3, [pc, #392]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e666:	ee07 3a90 	vmov	s15, r3
 800e66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e66e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e672:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e7f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e67e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e68a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e68e:	e087      	b.n	800e7a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	ee07 3a90 	vmov	s15, r3
 800e696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e69a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e7fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800e69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6a2:	4b51      	ldr	r3, [pc, #324]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6aa:	ee07 3a90 	vmov	s15, r3
 800e6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e7f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e6d2:	e065      	b.n	800e7a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	ee07 3a90 	vmov	s15, r3
 800e6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6de:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e800 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6e6:	4b40      	ldr	r3, [pc, #256]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6ee:	ee07 3a90 	vmov	s15, r3
 800e6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e7f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e716:	e043      	b.n	800e7a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	ee07 3a90 	vmov	s15, r3
 800e71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e722:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e804 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e72a:	4b2f      	ldr	r3, [pc, #188]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e732:	ee07 3a90 	vmov	s15, r3
 800e736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e73a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e73e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e7f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e74a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e752:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e75a:	e021      	b.n	800e7a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	ee07 3a90 	vmov	s15, r3
 800e762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e766:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e800 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e76e:	4b1e      	ldr	r3, [pc, #120]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e776:	ee07 3a90 	vmov	s15, r3
 800e77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e77e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e782:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e7f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e79a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e79e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e7a0:	4b11      	ldr	r3, [pc, #68]	; (800e7e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a4:	0a5b      	lsrs	r3, r3, #9
 800e7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	ee07 3a90 	vmov	s15, r3
 800e7b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e7b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7c4:	ee17 3a90 	vmov	r3, s15
 800e7c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e7ca:	e005      	b.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	61bb      	str	r3, [r7, #24]
      break;
 800e7d0:	e002      	b.n	800e7d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e7d2:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e7d4:	61bb      	str	r3, [r7, #24]
      break;
 800e7d6:	bf00      	nop
  }

  return sysclockfreq;
 800e7d8:	69bb      	ldr	r3, [r7, #24]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3724      	adds	r7, #36	; 0x24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	58024400 	.word	0x58024400
 800e7ec:	03d09000 	.word	0x03d09000
 800e7f0:	003d0900 	.word	0x003d0900
 800e7f4:	017d7840 	.word	0x017d7840
 800e7f8:	46000000 	.word	0x46000000
 800e7fc:	4c742400 	.word	0x4c742400
 800e800:	4a742400 	.word	0x4a742400
 800e804:	4bbebc20 	.word	0x4bbebc20

0800e808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e80e:	f7ff fe81 	bl	800e514 <HAL_RCC_GetSysClockFreq>
 800e812:	4602      	mov	r2, r0
 800e814:	4b10      	ldr	r3, [pc, #64]	; (800e858 <HAL_RCC_GetHCLKFreq+0x50>)
 800e816:	699b      	ldr	r3, [r3, #24]
 800e818:	0a1b      	lsrs	r3, r3, #8
 800e81a:	f003 030f 	and.w	r3, r3, #15
 800e81e:	490f      	ldr	r1, [pc, #60]	; (800e85c <HAL_RCC_GetHCLKFreq+0x54>)
 800e820:	5ccb      	ldrb	r3, [r1, r3]
 800e822:	f003 031f 	and.w	r3, r3, #31
 800e826:	fa22 f303 	lsr.w	r3, r2, r3
 800e82a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e82c:	4b0a      	ldr	r3, [pc, #40]	; (800e858 <HAL_RCC_GetHCLKFreq+0x50>)
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	f003 030f 	and.w	r3, r3, #15
 800e834:	4a09      	ldr	r2, [pc, #36]	; (800e85c <HAL_RCC_GetHCLKFreq+0x54>)
 800e836:	5cd3      	ldrb	r3, [r2, r3]
 800e838:	f003 031f 	and.w	r3, r3, #31
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	fa22 f303 	lsr.w	r3, r2, r3
 800e842:	4a07      	ldr	r2, [pc, #28]	; (800e860 <HAL_RCC_GetHCLKFreq+0x58>)
 800e844:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e846:	4a07      	ldr	r2, [pc, #28]	; (800e864 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e84c:	4b04      	ldr	r3, [pc, #16]	; (800e860 <HAL_RCC_GetHCLKFreq+0x58>)
 800e84e:	681b      	ldr	r3, [r3, #0]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	58024400 	.word	0x58024400
 800e85c:	0801abe4 	.word	0x0801abe4
 800e860:	240000c0 	.word	0x240000c0
 800e864:	240000bc 	.word	0x240000bc

0800e868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e86c:	f7ff ffcc 	bl	800e808 <HAL_RCC_GetHCLKFreq>
 800e870:	4602      	mov	r2, r0
 800e872:	4b06      	ldr	r3, [pc, #24]	; (800e88c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	091b      	lsrs	r3, r3, #4
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	4904      	ldr	r1, [pc, #16]	; (800e890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e87e:	5ccb      	ldrb	r3, [r1, r3]
 800e880:	f003 031f 	and.w	r3, r3, #31
 800e884:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e888:	4618      	mov	r0, r3
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	58024400 	.word	0x58024400
 800e890:	0801abe4 	.word	0x0801abe4

0800e894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e898:	f7ff ffb6 	bl	800e808 <HAL_RCC_GetHCLKFreq>
 800e89c:	4602      	mov	r2, r0
 800e89e:	4b06      	ldr	r3, [pc, #24]	; (800e8b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e8a0:	69db      	ldr	r3, [r3, #28]
 800e8a2:	0a1b      	lsrs	r3, r3, #8
 800e8a4:	f003 0307 	and.w	r3, r3, #7
 800e8a8:	4904      	ldr	r1, [pc, #16]	; (800e8bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800e8aa:	5ccb      	ldrb	r3, [r1, r3]
 800e8ac:	f003 031f 	and.w	r3, r3, #31
 800e8b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	58024400 	.word	0x58024400
 800e8bc:	0801abe4 	.word	0x0801abe4

0800e8c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	223f      	movs	r2, #63	; 0x3f
 800e8ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e8d0:	4b1a      	ldr	r3, [pc, #104]	; (800e93c <HAL_RCC_GetClockConfig+0x7c>)
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	f003 0207 	and.w	r2, r3, #7
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e8dc:	4b17      	ldr	r3, [pc, #92]	; (800e93c <HAL_RCC_GetClockConfig+0x7c>)
 800e8de:	699b      	ldr	r3, [r3, #24]
 800e8e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e8e8:	4b14      	ldr	r3, [pc, #80]	; (800e93c <HAL_RCC_GetClockConfig+0x7c>)
 800e8ea:	699b      	ldr	r3, [r3, #24]
 800e8ec:	f003 020f 	and.w	r2, r3, #15
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e8f4:	4b11      	ldr	r3, [pc, #68]	; (800e93c <HAL_RCC_GetClockConfig+0x7c>)
 800e8f6:	699b      	ldr	r3, [r3, #24]
 800e8f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e900:	4b0e      	ldr	r3, [pc, #56]	; (800e93c <HAL_RCC_GetClockConfig+0x7c>)
 800e902:	69db      	ldr	r3, [r3, #28]
 800e904:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e90c:	4b0b      	ldr	r3, [pc, #44]	; (800e93c <HAL_RCC_GetClockConfig+0x7c>)
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e918:	4b08      	ldr	r3, [pc, #32]	; (800e93c <HAL_RCC_GetClockConfig+0x7c>)
 800e91a:	6a1b      	ldr	r3, [r3, #32]
 800e91c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e924:	4b06      	ldr	r3, [pc, #24]	; (800e940 <HAL_RCC_GetClockConfig+0x80>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f003 020f 	and.w	r2, r3, #15
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	601a      	str	r2, [r3, #0]
}
 800e930:	bf00      	nop
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	58024400 	.word	0x58024400
 800e940:	52002000 	.word	0x52002000

0800e944 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e948:	b0ca      	sub	sp, #296	; 0x128
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e950:	2300      	movs	r3, #0
 800e952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e956:	2300      	movs	r3, #0
 800e958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800e968:	2500      	movs	r5, #0
 800e96a:	ea54 0305 	orrs.w	r3, r4, r5
 800e96e:	d049      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e97a:	d02f      	beq.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e97c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e980:	d828      	bhi.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e986:	d01a      	beq.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e98c:	d822      	bhi.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e996:	d007      	beq.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e998:	e01c      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e99a:	4bb8      	ldr	r3, [pc, #736]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99e:	4ab7      	ldr	r2, [pc, #732]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e9a6:	e01a      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	2102      	movs	r1, #2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f002 fb61 	bl	8011078 <RCCEx_PLL2_Config>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e9bc:	e00f      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9c2:	3328      	adds	r3, #40	; 0x28
 800e9c4:	2102      	movs	r1, #2
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f002 fc08 	bl	80111dc <RCCEx_PLL3_Config>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e9d2:	e004      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e9da:	e000      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e9dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10a      	bne.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e9e6:	4ba5      	ldr	r3, [pc, #660]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9f4:	4aa1      	ldr	r2, [pc, #644]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9f6:	430b      	orrs	r3, r1
 800e9f8:	6513      	str	r3, [r2, #80]	; 0x50
 800e9fa:	e003      	b.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ea04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ea10:	f04f 0900 	mov.w	r9, #0
 800ea14:	ea58 0309 	orrs.w	r3, r8, r9
 800ea18:	d047      	beq.n	800eaaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ea1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea20:	2b04      	cmp	r3, #4
 800ea22:	d82a      	bhi.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ea24:	a201      	add	r2, pc, #4	; (adr r2, 800ea2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ea26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2a:	bf00      	nop
 800ea2c:	0800ea41 	.word	0x0800ea41
 800ea30:	0800ea4f 	.word	0x0800ea4f
 800ea34:	0800ea65 	.word	0x0800ea65
 800ea38:	0800ea83 	.word	0x0800ea83
 800ea3c:	0800ea83 	.word	0x0800ea83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea40:	4b8e      	ldr	r3, [pc, #568]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea44:	4a8d      	ldr	r2, [pc, #564]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea4c:	e01a      	b.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea52:	3308      	adds	r3, #8
 800ea54:	2100      	movs	r1, #0
 800ea56:	4618      	mov	r0, r3
 800ea58:	f002 fb0e 	bl	8011078 <RCCEx_PLL2_Config>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea62:	e00f      	b.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea68:	3328      	adds	r3, #40	; 0x28
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f002 fbb5 	bl	80111dc <RCCEx_PLL3_Config>
 800ea72:	4603      	mov	r3, r0
 800ea74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea78:	e004      	b.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea80:	e000      	b.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ea82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10a      	bne.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ea8c:	4b7b      	ldr	r3, [pc, #492]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea90:	f023 0107 	bic.w	r1, r3, #7
 800ea94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea9a:	4a78      	ldr	r2, [pc, #480]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea9c:	430b      	orrs	r3, r1
 800ea9e:	6513      	str	r3, [r2, #80]	; 0x50
 800eaa0:	e003      	b.n	800eaaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eaa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800eaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800eab6:	f04f 0b00 	mov.w	fp, #0
 800eaba:	ea5a 030b 	orrs.w	r3, sl, fp
 800eabe:	d04c      	beq.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800eac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaca:	d030      	beq.n	800eb2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800eacc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ead0:	d829      	bhi.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ead2:	2bc0      	cmp	r3, #192	; 0xc0
 800ead4:	d02d      	beq.n	800eb32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ead6:	2bc0      	cmp	r3, #192	; 0xc0
 800ead8:	d825      	bhi.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eada:	2b80      	cmp	r3, #128	; 0x80
 800eadc:	d018      	beq.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800eade:	2b80      	cmp	r3, #128	; 0x80
 800eae0:	d821      	bhi.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d002      	beq.n	800eaec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800eae6:	2b40      	cmp	r3, #64	; 0x40
 800eae8:	d007      	beq.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800eaea:	e01c      	b.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eaec:	4b63      	ldr	r3, [pc, #396]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf0:	4a62      	ldr	r2, [pc, #392]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eaf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eaf8:	e01c      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eafe:	3308      	adds	r3, #8
 800eb00:	2100      	movs	r1, #0
 800eb02:	4618      	mov	r0, r3
 800eb04:	f002 fab8 	bl	8011078 <RCCEx_PLL2_Config>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eb0e:	e011      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb14:	3328      	adds	r3, #40	; 0x28
 800eb16:	2100      	movs	r1, #0
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f002 fb5f 	bl	80111dc <RCCEx_PLL3_Config>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eb24:	e006      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb26:	2301      	movs	r3, #1
 800eb28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb2c:	e002      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eb2e:	bf00      	nop
 800eb30:	e000      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eb32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d10a      	bne.n	800eb52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800eb3c:	4b4f      	ldr	r3, [pc, #316]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb40:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800eb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb4a:	4a4c      	ldr	r2, [pc, #304]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb4c:	430b      	orrs	r3, r1
 800eb4e:	6513      	str	r3, [r2, #80]	; 0x50
 800eb50:	e003      	b.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800eb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb62:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800eb66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800eb70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800eb74:	460b      	mov	r3, r1
 800eb76:	4313      	orrs	r3, r2
 800eb78:	d053      	beq.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800eb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eb82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eb86:	d035      	beq.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800eb88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eb8c:	d82e      	bhi.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eb92:	d031      	beq.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800eb94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eb98:	d828      	bhi.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb9e:	d01a      	beq.n	800ebd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800eba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eba4:	d822      	bhi.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ebaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebae:	d007      	beq.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ebb0:	e01c      	b.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebb2:	4b32      	ldr	r3, [pc, #200]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb6:	4a31      	ldr	r2, [pc, #196]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebbe:	e01c      	b.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ebc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f002 fa55 	bl	8011078 <RCCEx_PLL2_Config>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ebd4:	e011      	b.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebda:	3328      	adds	r3, #40	; 0x28
 800ebdc:	2100      	movs	r1, #0
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f002 fafc 	bl	80111dc <RCCEx_PLL3_Config>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebea:	e006      	b.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebf2:	e002      	b.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ebf4:	bf00      	nop
 800ebf6:	e000      	b.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ebf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10b      	bne.n	800ec1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ec02:	4b1e      	ldr	r3, [pc, #120]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec06:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ec0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ec12:	4a1a      	ldr	r2, [pc, #104]	; (800ec7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec14:	430b      	orrs	r3, r1
 800ec16:	6593      	str	r3, [r2, #88]	; 0x58
 800ec18:	e003      	b.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ec22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ec2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ec32:	2300      	movs	r3, #0
 800ec34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ec38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	d056      	beq.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ec42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ec4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ec4e:	d038      	beq.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ec50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ec54:	d831      	bhi.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ec5a:	d034      	beq.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ec5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ec60:	d82b      	bhi.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec66:	d01d      	beq.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ec68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec6c:	d825      	bhi.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d006      	beq.n	800ec80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ec72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ec76:	d00a      	beq.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ec78:	e01f      	b.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec7a:	bf00      	nop
 800ec7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec80:	4ba2      	ldr	r3, [pc, #648]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec84:	4aa1      	ldr	r2, [pc, #644]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec8c:	e01c      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec92:	3308      	adds	r3, #8
 800ec94:	2100      	movs	r1, #0
 800ec96:	4618      	mov	r0, r3
 800ec98:	f002 f9ee 	bl	8011078 <RCCEx_PLL2_Config>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eca2:	e011      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eca8:	3328      	adds	r3, #40	; 0x28
 800ecaa:	2100      	movs	r1, #0
 800ecac:	4618      	mov	r0, r3
 800ecae:	f002 fa95 	bl	80111dc <RCCEx_PLL3_Config>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ecb8:	e006      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ecc0:	e002      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ecc2:	bf00      	nop
 800ecc4:	e000      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ecc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d10b      	bne.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ecd0:	4b8e      	ldr	r3, [pc, #568]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ecd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ecd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ece0:	4a8a      	ldr	r2, [pc, #552]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ece2:	430b      	orrs	r3, r1
 800ece4:	6593      	str	r3, [r2, #88]	; 0x58
 800ece6:	e003      	b.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ece8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ecf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ecfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ed00:	2300      	movs	r3, #0
 800ed02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ed06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	d03a      	beq.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ed10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed16:	2b30      	cmp	r3, #48	; 0x30
 800ed18:	d01f      	beq.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ed1a:	2b30      	cmp	r3, #48	; 0x30
 800ed1c:	d819      	bhi.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ed1e:	2b20      	cmp	r3, #32
 800ed20:	d00c      	beq.n	800ed3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ed22:	2b20      	cmp	r3, #32
 800ed24:	d815      	bhi.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d019      	beq.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ed2a:	2b10      	cmp	r3, #16
 800ed2c:	d111      	bne.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed2e:	4b77      	ldr	r3, [pc, #476]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed32:	4a76      	ldr	r2, [pc, #472]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ed3a:	e011      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ed3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed40:	3308      	adds	r3, #8
 800ed42:	2102      	movs	r1, #2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f002 f997 	bl	8011078 <RCCEx_PLL2_Config>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ed50:	e006      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ed52:	2301      	movs	r3, #1
 800ed54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed58:	e002      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed5a:	bf00      	nop
 800ed5c:	e000      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10a      	bne.n	800ed7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ed68:	4b68      	ldr	r3, [pc, #416]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed6c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ed70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed76:	4a65      	ldr	r2, [pc, #404]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed7c:	e003      	b.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ed86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ed92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ed96:	2300      	movs	r3, #0
 800ed98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ed9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4313      	orrs	r3, r2
 800eda4:	d051      	beq.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800eda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edb0:	d035      	beq.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800edb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edb6:	d82e      	bhi.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800edb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800edbc:	d031      	beq.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800edbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800edc2:	d828      	bhi.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800edc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edc8:	d01a      	beq.n	800ee00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800edca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edce:	d822      	bhi.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d003      	beq.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800edd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edd8:	d007      	beq.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800edda:	e01c      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eddc:	4b4b      	ldr	r3, [pc, #300]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede0:	4a4a      	ldr	r2, [pc, #296]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ede2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ede6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ede8:	e01c      	b.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edee:	3308      	adds	r3, #8
 800edf0:	2100      	movs	r1, #0
 800edf2:	4618      	mov	r0, r3
 800edf4:	f002 f940 	bl	8011078 <RCCEx_PLL2_Config>
 800edf8:	4603      	mov	r3, r0
 800edfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edfe:	e011      	b.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee04:	3328      	adds	r3, #40	; 0x28
 800ee06:	2100      	movs	r1, #0
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f002 f9e7 	bl	80111dc <RCCEx_PLL3_Config>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ee14:	e006      	b.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee1c:	e002      	b.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ee1e:	bf00      	nop
 800ee20:	e000      	b.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ee22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10a      	bne.n	800ee42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ee2c:	4b37      	ldr	r3, [pc, #220]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee30:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ee34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee3a:	4a34      	ldr	r2, [pc, #208]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee3c:	430b      	orrs	r3, r1
 800ee3e:	6513      	str	r3, [r2, #80]	; 0x50
 800ee40:	e003      	b.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ee4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee52:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ee56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ee60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ee64:	460b      	mov	r3, r1
 800ee66:	4313      	orrs	r3, r2
 800ee68:	d056      	beq.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ee6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee74:	d033      	beq.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ee76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee7a:	d82c      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee80:	d02f      	beq.n	800eee2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ee82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee86:	d826      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee8c:	d02b      	beq.n	800eee6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ee8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee92:	d820      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee98:	d012      	beq.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ee9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee9e:	d81a      	bhi.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d022      	beq.n	800eeea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800eea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eea8:	d115      	bne.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eeaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeae:	3308      	adds	r3, #8
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f002 f8e0 	bl	8011078 <RCCEx_PLL2_Config>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800eebe:	e015      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eec4:	3328      	adds	r3, #40	; 0x28
 800eec6:	2101      	movs	r1, #1
 800eec8:	4618      	mov	r0, r3
 800eeca:	f002 f987 	bl	80111dc <RCCEx_PLL3_Config>
 800eece:	4603      	mov	r3, r0
 800eed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800eed4:	e00a      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eedc:	e006      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eede:	bf00      	nop
 800eee0:	e004      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eee2:	bf00      	nop
 800eee4:	e002      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eee6:	bf00      	nop
 800eee8:	e000      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eeea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eeec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10d      	bne.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800eef4:	4b05      	ldr	r3, [pc, #20]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eef8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800eefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef02:	4a02      	ldr	r2, [pc, #8]	; (800ef0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef04:	430b      	orrs	r3, r1
 800ef06:	6513      	str	r3, [r2, #80]	; 0x50
 800ef08:	e006      	b.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ef0a:	bf00      	nop
 800ef0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ef18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ef24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ef2e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ef32:	460b      	mov	r3, r1
 800ef34:	4313      	orrs	r3, r2
 800ef36:	d055      	beq.n	800efe4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ef38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ef40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef44:	d033      	beq.n	800efae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ef46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef4a:	d82c      	bhi.n	800efa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef50:	d02f      	beq.n	800efb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ef52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef56:	d826      	bhi.n	800efa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ef5c:	d02b      	beq.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ef5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ef62:	d820      	bhi.n	800efa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef68:	d012      	beq.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ef6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef6e:	d81a      	bhi.n	800efa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d022      	beq.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ef74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef78:	d115      	bne.n	800efa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef7e:	3308      	adds	r3, #8
 800ef80:	2101      	movs	r1, #1
 800ef82:	4618      	mov	r0, r3
 800ef84:	f002 f878 	bl	8011078 <RCCEx_PLL2_Config>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef8e:	e015      	b.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef94:	3328      	adds	r3, #40	; 0x28
 800ef96:	2101      	movs	r1, #1
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f002 f91f 	bl	80111dc <RCCEx_PLL3_Config>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800efa4:	e00a      	b.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800efa6:	2301      	movs	r3, #1
 800efa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800efac:	e006      	b.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800efae:	bf00      	nop
 800efb0:	e004      	b.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800efb2:	bf00      	nop
 800efb4:	e002      	b.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800efb6:	bf00      	nop
 800efb8:	e000      	b.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800efba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10b      	bne.n	800efdc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800efc4:	4ba3      	ldr	r3, [pc, #652]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efc8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800efcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800efd4:	4a9f      	ldr	r2, [pc, #636]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efd6:	430b      	orrs	r3, r1
 800efd8:	6593      	str	r3, [r2, #88]	; 0x58
 800efda:	e003      	b.n	800efe4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800efe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800eff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eff4:	2300      	movs	r3, #0
 800eff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800effa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800effe:	460b      	mov	r3, r1
 800f000:	4313      	orrs	r3, r2
 800f002:	d037      	beq.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f00e:	d00e      	beq.n	800f02e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f014:	d816      	bhi.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f016:	2b00      	cmp	r3, #0
 800f018:	d018      	beq.n	800f04c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f01a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f01e:	d111      	bne.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f020:	4b8c      	ldr	r3, [pc, #560]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f024:	4a8b      	ldr	r2, [pc, #556]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f02a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f02c:	e00f      	b.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f032:	3308      	adds	r3, #8
 800f034:	2101      	movs	r1, #1
 800f036:	4618      	mov	r0, r3
 800f038:	f002 f81e 	bl	8011078 <RCCEx_PLL2_Config>
 800f03c:	4603      	mov	r3, r0
 800f03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f042:	e004      	b.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f044:	2301      	movs	r3, #1
 800f046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f04a:	e000      	b.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f04c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10a      	bne.n	800f06c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f056:	4b7f      	ldr	r3, [pc, #508]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f05a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f064:	4a7b      	ldr	r2, [pc, #492]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f066:	430b      	orrs	r3, r1
 800f068:	6513      	str	r3, [r2, #80]	; 0x50
 800f06a:	e003      	b.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f06c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f084:	2300      	movs	r3, #0
 800f086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f08a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f08e:	460b      	mov	r3, r1
 800f090:	4313      	orrs	r3, r2
 800f092:	d039      	beq.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d81c      	bhi.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f09e:	a201      	add	r2, pc, #4	; (adr r2, 800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a4:	0800f0e1 	.word	0x0800f0e1
 800f0a8:	0800f0b5 	.word	0x0800f0b5
 800f0ac:	0800f0c3 	.word	0x0800f0c3
 800f0b0:	0800f0e1 	.word	0x0800f0e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0b4:	4b67      	ldr	r3, [pc, #412]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b8:	4a66      	ldr	r2, [pc, #408]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f0c0:	e00f      	b.n	800f0e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0c6:	3308      	adds	r3, #8
 800f0c8:	2102      	movs	r1, #2
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f001 ffd4 	bl	8011078 <RCCEx_PLL2_Config>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f0d6:	e004      	b.n	800f0e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f0de:	e000      	b.n	800f0e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d10a      	bne.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f0ea:	4b5a      	ldr	r3, [pc, #360]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0ee:	f023 0103 	bic.w	r1, r3, #3
 800f0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0f8:	4a56      	ldr	r2, [pc, #344]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0fa:	430b      	orrs	r3, r1
 800f0fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f0fe:	e003      	b.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f110:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f118:	2300      	movs	r3, #0
 800f11a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f11e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f122:	460b      	mov	r3, r1
 800f124:	4313      	orrs	r3, r2
 800f126:	f000 809f 	beq.w	800f268 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f12a:	4b4b      	ldr	r3, [pc, #300]	; (800f258 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4a4a      	ldr	r2, [pc, #296]	; (800f258 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f134:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f136:	f7f6 faf1 	bl	800571c <HAL_GetTick>
 800f13a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f13e:	e00b      	b.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f140:	f7f6 faec 	bl	800571c <HAL_GetTick>
 800f144:	4602      	mov	r2, r0
 800f146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	2b64      	cmp	r3, #100	; 0x64
 800f14e:	d903      	bls.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f150:	2303      	movs	r3, #3
 800f152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f156:	e005      	b.n	800f164 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f158:	4b3f      	ldr	r3, [pc, #252]	; (800f258 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f160:	2b00      	cmp	r3, #0
 800f162:	d0ed      	beq.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d179      	bne.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f16c:	4b39      	ldr	r3, [pc, #228]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f16e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f178:	4053      	eors	r3, r2
 800f17a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d015      	beq.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f182:	4b34      	ldr	r3, [pc, #208]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f18a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f18e:	4b31      	ldr	r3, [pc, #196]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f192:	4a30      	ldr	r2, [pc, #192]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f198:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f19a:	4b2e      	ldr	r3, [pc, #184]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f19e:	4a2d      	ldr	r2, [pc, #180]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f1a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f1a6:	4a2b      	ldr	r2, [pc, #172]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f1ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1ba:	d118      	bne.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1bc:	f7f6 faae 	bl	800571c <HAL_GetTick>
 800f1c0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f1c4:	e00d      	b.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f1c6:	f7f6 faa9 	bl	800571c <HAL_GetTick>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f1d0:	1ad2      	subs	r2, r2, r3
 800f1d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d903      	bls.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f1da:	2303      	movs	r3, #3
 800f1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f1e0:	e005      	b.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f1e2:	4b1c      	ldr	r3, [pc, #112]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e6:	f003 0302 	and.w	r3, r3, #2
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d0eb      	beq.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d129      	bne.n	800f24a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f1fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f206:	d10e      	bne.n	800f226 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f208:	4b12      	ldr	r3, [pc, #72]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f20a:	691b      	ldr	r3, [r3, #16]
 800f20c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f214:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f218:	091a      	lsrs	r2, r3, #4
 800f21a:	4b10      	ldr	r3, [pc, #64]	; (800f25c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f21c:	4013      	ands	r3, r2
 800f21e:	4a0d      	ldr	r2, [pc, #52]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f220:	430b      	orrs	r3, r1
 800f222:	6113      	str	r3, [r2, #16]
 800f224:	e005      	b.n	800f232 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f226:	4b0b      	ldr	r3, [pc, #44]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f228:	691b      	ldr	r3, [r3, #16]
 800f22a:	4a0a      	ldr	r2, [pc, #40]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f22c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f230:	6113      	str	r3, [r2, #16]
 800f232:	4b08      	ldr	r3, [pc, #32]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f234:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f23a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f23e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f242:	4a04      	ldr	r2, [pc, #16]	; (800f254 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f244:	430b      	orrs	r3, r1
 800f246:	6713      	str	r3, [r2, #112]	; 0x70
 800f248:	e00e      	b.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f24e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f252:	e009      	b.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f254:	58024400 	.word	0x58024400
 800f258:	58024800 	.word	0x58024800
 800f25c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f270:	f002 0301 	and.w	r3, r2, #1
 800f274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f278:	2300      	movs	r3, #0
 800f27a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f27e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f282:	460b      	mov	r3, r1
 800f284:	4313      	orrs	r3, r2
 800f286:	f000 8089 	beq.w	800f39c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f28e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f290:	2b28      	cmp	r3, #40	; 0x28
 800f292:	d86b      	bhi.n	800f36c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f294:	a201      	add	r2, pc, #4	; (adr r2, 800f29c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29a:	bf00      	nop
 800f29c:	0800f375 	.word	0x0800f375
 800f2a0:	0800f36d 	.word	0x0800f36d
 800f2a4:	0800f36d 	.word	0x0800f36d
 800f2a8:	0800f36d 	.word	0x0800f36d
 800f2ac:	0800f36d 	.word	0x0800f36d
 800f2b0:	0800f36d 	.word	0x0800f36d
 800f2b4:	0800f36d 	.word	0x0800f36d
 800f2b8:	0800f36d 	.word	0x0800f36d
 800f2bc:	0800f341 	.word	0x0800f341
 800f2c0:	0800f36d 	.word	0x0800f36d
 800f2c4:	0800f36d 	.word	0x0800f36d
 800f2c8:	0800f36d 	.word	0x0800f36d
 800f2cc:	0800f36d 	.word	0x0800f36d
 800f2d0:	0800f36d 	.word	0x0800f36d
 800f2d4:	0800f36d 	.word	0x0800f36d
 800f2d8:	0800f36d 	.word	0x0800f36d
 800f2dc:	0800f357 	.word	0x0800f357
 800f2e0:	0800f36d 	.word	0x0800f36d
 800f2e4:	0800f36d 	.word	0x0800f36d
 800f2e8:	0800f36d 	.word	0x0800f36d
 800f2ec:	0800f36d 	.word	0x0800f36d
 800f2f0:	0800f36d 	.word	0x0800f36d
 800f2f4:	0800f36d 	.word	0x0800f36d
 800f2f8:	0800f36d 	.word	0x0800f36d
 800f2fc:	0800f375 	.word	0x0800f375
 800f300:	0800f36d 	.word	0x0800f36d
 800f304:	0800f36d 	.word	0x0800f36d
 800f308:	0800f36d 	.word	0x0800f36d
 800f30c:	0800f36d 	.word	0x0800f36d
 800f310:	0800f36d 	.word	0x0800f36d
 800f314:	0800f36d 	.word	0x0800f36d
 800f318:	0800f36d 	.word	0x0800f36d
 800f31c:	0800f375 	.word	0x0800f375
 800f320:	0800f36d 	.word	0x0800f36d
 800f324:	0800f36d 	.word	0x0800f36d
 800f328:	0800f36d 	.word	0x0800f36d
 800f32c:	0800f36d 	.word	0x0800f36d
 800f330:	0800f36d 	.word	0x0800f36d
 800f334:	0800f36d 	.word	0x0800f36d
 800f338:	0800f36d 	.word	0x0800f36d
 800f33c:	0800f375 	.word	0x0800f375
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f344:	3308      	adds	r3, #8
 800f346:	2101      	movs	r1, #1
 800f348:	4618      	mov	r0, r3
 800f34a:	f001 fe95 	bl	8011078 <RCCEx_PLL2_Config>
 800f34e:	4603      	mov	r3, r0
 800f350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f354:	e00f      	b.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f35a:	3328      	adds	r3, #40	; 0x28
 800f35c:	2101      	movs	r1, #1
 800f35e:	4618      	mov	r0, r3
 800f360:	f001 ff3c 	bl	80111dc <RCCEx_PLL3_Config>
 800f364:	4603      	mov	r3, r0
 800f366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f36a:	e004      	b.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f36c:	2301      	movs	r3, #1
 800f36e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f372:	e000      	b.n	800f376 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10a      	bne.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f37e:	4bbf      	ldr	r3, [pc, #764]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f382:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f38a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f38c:	4abb      	ldr	r2, [pc, #748]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f38e:	430b      	orrs	r3, r1
 800f390:	6553      	str	r3, [r2, #84]	; 0x54
 800f392:	e003      	b.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	f002 0302 	and.w	r3, r2, #2
 800f3a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f3b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	d041      	beq.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3c2:	2b05      	cmp	r3, #5
 800f3c4:	d824      	bhi.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f3c6:	a201      	add	r2, pc, #4	; (adr r2, 800f3cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3cc:	0800f419 	.word	0x0800f419
 800f3d0:	0800f3e5 	.word	0x0800f3e5
 800f3d4:	0800f3fb 	.word	0x0800f3fb
 800f3d8:	0800f419 	.word	0x0800f419
 800f3dc:	0800f419 	.word	0x0800f419
 800f3e0:	0800f419 	.word	0x0800f419
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3e8:	3308      	adds	r3, #8
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f001 fe43 	bl	8011078 <RCCEx_PLL2_Config>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3f8:	e00f      	b.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3fe:	3328      	adds	r3, #40	; 0x28
 800f400:	2101      	movs	r1, #1
 800f402:	4618      	mov	r0, r3
 800f404:	f001 feea 	bl	80111dc <RCCEx_PLL3_Config>
 800f408:	4603      	mov	r3, r0
 800f40a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f40e:	e004      	b.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f416:	e000      	b.n	800f41a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d10a      	bne.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f422:	4b96      	ldr	r3, [pc, #600]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f426:	f023 0107 	bic.w	r1, r3, #7
 800f42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f42e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f430:	4a92      	ldr	r2, [pc, #584]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f432:	430b      	orrs	r3, r1
 800f434:	6553      	str	r3, [r2, #84]	; 0x54
 800f436:	e003      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f43c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f448:	f002 0304 	and.w	r3, r2, #4
 800f44c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f450:	2300      	movs	r3, #0
 800f452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f456:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f45a:	460b      	mov	r3, r1
 800f45c:	4313      	orrs	r3, r2
 800f45e:	d044      	beq.n	800f4ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f468:	2b05      	cmp	r3, #5
 800f46a:	d825      	bhi.n	800f4b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f46c:	a201      	add	r2, pc, #4	; (adr r2, 800f474 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f472:	bf00      	nop
 800f474:	0800f4c1 	.word	0x0800f4c1
 800f478:	0800f48d 	.word	0x0800f48d
 800f47c:	0800f4a3 	.word	0x0800f4a3
 800f480:	0800f4c1 	.word	0x0800f4c1
 800f484:	0800f4c1 	.word	0x0800f4c1
 800f488:	0800f4c1 	.word	0x0800f4c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f490:	3308      	adds	r3, #8
 800f492:	2101      	movs	r1, #1
 800f494:	4618      	mov	r0, r3
 800f496:	f001 fdef 	bl	8011078 <RCCEx_PLL2_Config>
 800f49a:	4603      	mov	r3, r0
 800f49c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f4a0:	e00f      	b.n	800f4c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a6:	3328      	adds	r3, #40	; 0x28
 800f4a8:	2101      	movs	r1, #1
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f001 fe96 	bl	80111dc <RCCEx_PLL3_Config>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f4b6:	e004      	b.n	800f4c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f4be:	e000      	b.n	800f4c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f4c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10b      	bne.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f4ca:	4b6c      	ldr	r3, [pc, #432]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4ce:	f023 0107 	bic.w	r1, r3, #7
 800f4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f4da:	4a68      	ldr	r2, [pc, #416]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4dc:	430b      	orrs	r3, r1
 800f4de:	6593      	str	r3, [r2, #88]	; 0x58
 800f4e0:	e003      	b.n	800f4ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f2:	f002 0320 	and.w	r3, r2, #32
 800f4f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f504:	460b      	mov	r3, r1
 800f506:	4313      	orrs	r3, r2
 800f508:	d055      	beq.n	800f5b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f516:	d033      	beq.n	800f580 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f51c:	d82c      	bhi.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f522:	d02f      	beq.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f528:	d826      	bhi.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f52a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f52e:	d02b      	beq.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f534:	d820      	bhi.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f53a:	d012      	beq.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f53c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f540:	d81a      	bhi.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f542:	2b00      	cmp	r3, #0
 800f544:	d022      	beq.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f54a:	d115      	bne.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f550:	3308      	adds	r3, #8
 800f552:	2100      	movs	r1, #0
 800f554:	4618      	mov	r0, r3
 800f556:	f001 fd8f 	bl	8011078 <RCCEx_PLL2_Config>
 800f55a:	4603      	mov	r3, r0
 800f55c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f560:	e015      	b.n	800f58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f566:	3328      	adds	r3, #40	; 0x28
 800f568:	2102      	movs	r1, #2
 800f56a:	4618      	mov	r0, r3
 800f56c:	f001 fe36 	bl	80111dc <RCCEx_PLL3_Config>
 800f570:	4603      	mov	r3, r0
 800f572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f576:	e00a      	b.n	800f58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f578:	2301      	movs	r3, #1
 800f57a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f57e:	e006      	b.n	800f58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f580:	bf00      	nop
 800f582:	e004      	b.n	800f58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f584:	bf00      	nop
 800f586:	e002      	b.n	800f58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f588:	bf00      	nop
 800f58a:	e000      	b.n	800f58e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f58c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f58e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f592:	2b00      	cmp	r3, #0
 800f594:	d10b      	bne.n	800f5ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f596:	4b39      	ldr	r3, [pc, #228]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f59a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5a6:	4a35      	ldr	r2, [pc, #212]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5a8:	430b      	orrs	r3, r1
 800f5aa:	6553      	str	r3, [r2, #84]	; 0x54
 800f5ac:	e003      	b.n	800f5b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f5c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f5cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	d058      	beq.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f5de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f5e2:	d033      	beq.n	800f64c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f5e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f5e8:	d82c      	bhi.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5ee:	d02f      	beq.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5f4:	d826      	bhi.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f5fa:	d02b      	beq.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f5fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f600:	d820      	bhi.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f606:	d012      	beq.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f60c:	d81a      	bhi.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d022      	beq.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f616:	d115      	bne.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f61c:	3308      	adds	r3, #8
 800f61e:	2100      	movs	r1, #0
 800f620:	4618      	mov	r0, r3
 800f622:	f001 fd29 	bl	8011078 <RCCEx_PLL2_Config>
 800f626:	4603      	mov	r3, r0
 800f628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f62c:	e015      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f632:	3328      	adds	r3, #40	; 0x28
 800f634:	2102      	movs	r1, #2
 800f636:	4618      	mov	r0, r3
 800f638:	f001 fdd0 	bl	80111dc <RCCEx_PLL3_Config>
 800f63c:	4603      	mov	r3, r0
 800f63e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f642:	e00a      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f644:	2301      	movs	r3, #1
 800f646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f64a:	e006      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f64c:	bf00      	nop
 800f64e:	e004      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f650:	bf00      	nop
 800f652:	e002      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f654:	bf00      	nop
 800f656:	e000      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f65a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10e      	bne.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f662:	4b06      	ldr	r3, [pc, #24]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f666:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f66e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f672:	4a02      	ldr	r2, [pc, #8]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f674:	430b      	orrs	r3, r1
 800f676:	6593      	str	r3, [r2, #88]	; 0x58
 800f678:	e006      	b.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f67a:	bf00      	nop
 800f67c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f698:	2300      	movs	r3, #0
 800f69a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f69e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	d055      	beq.n	800f754 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f6b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f6b4:	d033      	beq.n	800f71e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f6b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f6ba:	d82c      	bhi.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6c0:	d02f      	beq.n	800f722 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f6c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6c6:	d826      	bhi.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f6cc:	d02b      	beq.n	800f726 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f6ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f6d2:	d820      	bhi.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6d8:	d012      	beq.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f6da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6de:	d81a      	bhi.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d022      	beq.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f6e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6e8:	d115      	bne.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	2100      	movs	r1, #0
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f001 fcc0 	bl	8011078 <RCCEx_PLL2_Config>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6fe:	e015      	b.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f704:	3328      	adds	r3, #40	; 0x28
 800f706:	2102      	movs	r1, #2
 800f708:	4618      	mov	r0, r3
 800f70a:	f001 fd67 	bl	80111dc <RCCEx_PLL3_Config>
 800f70e:	4603      	mov	r3, r0
 800f710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f714:	e00a      	b.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f716:	2301      	movs	r3, #1
 800f718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f71c:	e006      	b.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f71e:	bf00      	nop
 800f720:	e004      	b.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f722:	bf00      	nop
 800f724:	e002      	b.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f726:	bf00      	nop
 800f728:	e000      	b.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f72c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f730:	2b00      	cmp	r3, #0
 800f732:	d10b      	bne.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f734:	4ba1      	ldr	r3, [pc, #644]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f738:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f744:	4a9d      	ldr	r2, [pc, #628]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f746:	430b      	orrs	r3, r1
 800f748:	6593      	str	r3, [r2, #88]	; 0x58
 800f74a:	e003      	b.n	800f754 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f74c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	f002 0308 	and.w	r3, r2, #8
 800f760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f764:	2300      	movs	r3, #0
 800f766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f76a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f76e:	460b      	mov	r3, r1
 800f770:	4313      	orrs	r3, r2
 800f772:	d01e      	beq.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f780:	d10c      	bne.n	800f79c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f786:	3328      	adds	r3, #40	; 0x28
 800f788:	2102      	movs	r1, #2
 800f78a:	4618      	mov	r0, r3
 800f78c:	f001 fd26 	bl	80111dc <RCCEx_PLL3_Config>
 800f790:	4603      	mov	r3, r0
 800f792:	2b00      	cmp	r3, #0
 800f794:	d002      	beq.n	800f79c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f796:	2301      	movs	r3, #1
 800f798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f79c:	4b87      	ldr	r3, [pc, #540]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7ac:	4a83      	ldr	r2, [pc, #524]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7ae:	430b      	orrs	r3, r1
 800f7b0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	f002 0310 	and.w	r3, r2, #16
 800f7be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f7c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	d01e      	beq.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7de:	d10c      	bne.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e4:	3328      	adds	r3, #40	; 0x28
 800f7e6:	2102      	movs	r1, #2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f001 fcf7 	bl	80111dc <RCCEx_PLL3_Config>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d002      	beq.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f7fa:	4b70      	ldr	r3, [pc, #448]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f80a:	4a6c      	ldr	r2, [pc, #432]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f80c:	430b      	orrs	r3, r1
 800f80e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f81c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f820:	2300      	movs	r3, #0
 800f822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f826:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800f82a:	460b      	mov	r3, r1
 800f82c:	4313      	orrs	r3, r2
 800f82e:	d03e      	beq.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f83c:	d022      	beq.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f83e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f842:	d81b      	bhi.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f844:	2b00      	cmp	r3, #0
 800f846:	d003      	beq.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f84c:	d00b      	beq.n	800f866 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f84e:	e015      	b.n	800f87c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f854:	3308      	adds	r3, #8
 800f856:	2100      	movs	r1, #0
 800f858:	4618      	mov	r0, r3
 800f85a:	f001 fc0d 	bl	8011078 <RCCEx_PLL2_Config>
 800f85e:	4603      	mov	r3, r0
 800f860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f864:	e00f      	b.n	800f886 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f86a:	3328      	adds	r3, #40	; 0x28
 800f86c:	2102      	movs	r1, #2
 800f86e:	4618      	mov	r0, r3
 800f870:	f001 fcb4 	bl	80111dc <RCCEx_PLL3_Config>
 800f874:	4603      	mov	r3, r0
 800f876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f87a:	e004      	b.n	800f886 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f882:	e000      	b.n	800f886 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f884:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d10b      	bne.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f88e:	4b4b      	ldr	r3, [pc, #300]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f892:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800f896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f89a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f89e:	4a47      	ldr	r2, [pc, #284]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8a0:	430b      	orrs	r3, r1
 800f8a2:	6593      	str	r3, [r2, #88]	; 0x58
 800f8a4:	e003      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800f8ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800f8bc:	2300      	movs	r3, #0
 800f8be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f8c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	d03b      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8d6:	d01f      	beq.n	800f918 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f8d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f8dc:	d818      	bhi.n	800f910 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f8de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8e2:	d003      	beq.n	800f8ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f8e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8e8:	d007      	beq.n	800f8fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f8ea:	e011      	b.n	800f910 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f8ec:	4b33      	ldr	r3, [pc, #204]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f0:	4a32      	ldr	r2, [pc, #200]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8f8:	e00f      	b.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8fe:	3328      	adds	r3, #40	; 0x28
 800f900:	2101      	movs	r1, #1
 800f902:	4618      	mov	r0, r3
 800f904:	f001 fc6a 	bl	80111dc <RCCEx_PLL3_Config>
 800f908:	4603      	mov	r3, r0
 800f90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f90e:	e004      	b.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f916:	e000      	b.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10b      	bne.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f922:	4b26      	ldr	r3, [pc, #152]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f926:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f932:	4a22      	ldr	r2, [pc, #136]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f934:	430b      	orrs	r3, r1
 800f936:	6553      	str	r3, [r2, #84]	; 0x54
 800f938:	e003      	b.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f93e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800f94e:	673b      	str	r3, [r7, #112]	; 0x70
 800f950:	2300      	movs	r3, #0
 800f952:	677b      	str	r3, [r7, #116]	; 0x74
 800f954:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800f958:	460b      	mov	r3, r1
 800f95a:	4313      	orrs	r3, r2
 800f95c:	d034      	beq.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f964:	2b00      	cmp	r3, #0
 800f966:	d003      	beq.n	800f970 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f96c:	d007      	beq.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f96e:	e011      	b.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f970:	4b12      	ldr	r3, [pc, #72]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	4a11      	ldr	r2, [pc, #68]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f97a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f97c:	e00e      	b.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f982:	3308      	adds	r3, #8
 800f984:	2102      	movs	r1, #2
 800f986:	4618      	mov	r0, r3
 800f988:	f001 fb76 	bl	8011078 <RCCEx_PLL2_Config>
 800f98c:	4603      	mov	r3, r0
 800f98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f992:	e003      	b.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f994:	2301      	movs	r3, #1
 800f996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f99c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d10d      	bne.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f9a4:	4b05      	ldr	r3, [pc, #20]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9b2:	4a02      	ldr	r2, [pc, #8]	; (800f9bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9b4:	430b      	orrs	r3, r1
 800f9b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f9b8:	e006      	b.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f9ba:	bf00      	nop
 800f9bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800f9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	d00c      	beq.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e8:	3328      	adds	r3, #40	; 0x28
 800f9ea:	2102      	movs	r1, #2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f001 fbf5 	bl	80111dc <RCCEx_PLL3_Config>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d002      	beq.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fa0a:	663b      	str	r3, [r7, #96]	; 0x60
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	667b      	str	r3, [r7, #100]	; 0x64
 800fa10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fa14:	460b      	mov	r3, r1
 800fa16:	4313      	orrs	r3, r2
 800fa18:	d038      	beq.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fa1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa26:	d018      	beq.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fa28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa2c:	d811      	bhi.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fa2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa32:	d014      	beq.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fa34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa38:	d80b      	bhi.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d011      	beq.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fa3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa42:	d106      	bne.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa44:	4bc3      	ldr	r3, [pc, #780]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa48:	4ac2      	ldr	r2, [pc, #776]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fa50:	e008      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa52:	2301      	movs	r3, #1
 800fa54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa58:	e004      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa5a:	bf00      	nop
 800fa5c:	e002      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa5e:	bf00      	nop
 800fa60:	e000      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10b      	bne.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fa6c:	4bb9      	ldr	r3, [pc, #740]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fa74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa7c:	4ab5      	ldr	r2, [pc, #724]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa7e:	430b      	orrs	r3, r1
 800fa80:	6553      	str	r3, [r2, #84]	; 0x54
 800fa82:	e003      	b.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fa98:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800faa2:	460b      	mov	r3, r1
 800faa4:	4313      	orrs	r3, r2
 800faa6:	d009      	beq.n	800fabc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800faa8:	4baa      	ldr	r3, [pc, #680]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fab6:	4aa7      	ldr	r2, [pc, #668]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fab8:	430b      	orrs	r3, r1
 800faba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fac8:	653b      	str	r3, [r7, #80]	; 0x50
 800faca:	2300      	movs	r3, #0
 800facc:	657b      	str	r3, [r7, #84]	; 0x54
 800face:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fad2:	460b      	mov	r3, r1
 800fad4:	4313      	orrs	r3, r2
 800fad6:	d00a      	beq.n	800faee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fad8:	4b9e      	ldr	r3, [pc, #632]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fae4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fae8:	4a9a      	ldr	r2, [pc, #616]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faea:	430b      	orrs	r3, r1
 800faec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800faee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fafa:	64bb      	str	r3, [r7, #72]	; 0x48
 800fafc:	2300      	movs	r3, #0
 800fafe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fb04:	460b      	mov	r3, r1
 800fb06:	4313      	orrs	r3, r2
 800fb08:	d009      	beq.n	800fb1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fb0a:	4b92      	ldr	r3, [pc, #584]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb0e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb18:	4a8e      	ldr	r2, [pc, #568]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb1a:	430b      	orrs	r3, r1
 800fb1c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fb2a:	643b      	str	r3, [r7, #64]	; 0x40
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	647b      	str	r3, [r7, #68]	; 0x44
 800fb30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fb34:	460b      	mov	r3, r1
 800fb36:	4313      	orrs	r3, r2
 800fb38:	d00e      	beq.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fb3a:	4b86      	ldr	r3, [pc, #536]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	4a85      	ldr	r2, [pc, #532]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb44:	6113      	str	r3, [r2, #16]
 800fb46:	4b83      	ldr	r3, [pc, #524]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb48:	6919      	ldr	r1, [r3, #16]
 800fb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fb52:	4a80      	ldr	r2, [pc, #512]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb54:	430b      	orrs	r3, r1
 800fb56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb60:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fb64:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb66:	2300      	movs	r3, #0
 800fb68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fb6e:	460b      	mov	r3, r1
 800fb70:	4313      	orrs	r3, r2
 800fb72:	d009      	beq.n	800fb88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fb74:	4b77      	ldr	r3, [pc, #476]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb78:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb82:	4a74      	ldr	r2, [pc, #464]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb84:	430b      	orrs	r3, r1
 800fb86:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fb94:	633b      	str	r3, [r7, #48]	; 0x30
 800fb96:	2300      	movs	r3, #0
 800fb98:	637b      	str	r3, [r7, #52]	; 0x34
 800fb9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fb9e:	460b      	mov	r3, r1
 800fba0:	4313      	orrs	r3, r2
 800fba2:	d00a      	beq.n	800fbba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fba4:	4b6b      	ldr	r3, [pc, #428]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fba8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbb4:	4a67      	ldr	r2, [pc, #412]	; (800fd54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fbb6:	430b      	orrs	r3, r1
 800fbb8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	62b9      	str	r1, [r7, #40]	; 0x28
 800fbc6:	f003 0301 	and.w	r3, r3, #1
 800fbca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	d011      	beq.n	800fbfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbda:	3308      	adds	r3, #8
 800fbdc:	2100      	movs	r1, #0
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f001 fa4a 	bl	8011078 <RCCEx_PLL2_Config>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fbea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d003      	beq.n	800fbfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	2100      	movs	r1, #0
 800fc04:	6239      	str	r1, [r7, #32]
 800fc06:	f003 0302 	and.w	r3, r3, #2
 800fc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800fc0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fc10:	460b      	mov	r3, r1
 800fc12:	4313      	orrs	r3, r2
 800fc14:	d011      	beq.n	800fc3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f001 fa2a 	bl	8011078 <RCCEx_PLL2_Config>
 800fc24:	4603      	mov	r3, r0
 800fc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d003      	beq.n	800fc3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc42:	2100      	movs	r1, #0
 800fc44:	61b9      	str	r1, [r7, #24]
 800fc46:	f003 0304 	and.w	r3, r3, #4
 800fc4a:	61fb      	str	r3, [r7, #28]
 800fc4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fc50:	460b      	mov	r3, r1
 800fc52:	4313      	orrs	r3, r2
 800fc54:	d011      	beq.n	800fc7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	2102      	movs	r1, #2
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f001 fa0a 	bl	8011078 <RCCEx_PLL2_Config>
 800fc64:	4603      	mov	r3, r0
 800fc66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d003      	beq.n	800fc7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	2100      	movs	r1, #0
 800fc84:	6139      	str	r1, [r7, #16]
 800fc86:	f003 0308 	and.w	r3, r3, #8
 800fc8a:	617b      	str	r3, [r7, #20]
 800fc8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fc90:	460b      	mov	r3, r1
 800fc92:	4313      	orrs	r3, r2
 800fc94:	d011      	beq.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc9a:	3328      	adds	r3, #40	; 0x28
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f001 fa9c 	bl	80111dc <RCCEx_PLL3_Config>
 800fca4:	4603      	mov	r3, r0
 800fca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d003      	beq.n	800fcba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc2:	2100      	movs	r1, #0
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	f003 0310 	and.w	r3, r3, #16
 800fcca:	60fb      	str	r3, [r7, #12]
 800fccc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	d011      	beq.n	800fcfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcda:	3328      	adds	r3, #40	; 0x28
 800fcdc:	2101      	movs	r1, #1
 800fcde:	4618      	mov	r0, r3
 800fce0:	f001 fa7c 	bl	80111dc <RCCEx_PLL3_Config>
 800fce4:	4603      	mov	r3, r0
 800fce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fcea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d003      	beq.n	800fcfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd02:	2100      	movs	r1, #0
 800fd04:	6039      	str	r1, [r7, #0]
 800fd06:	f003 0320 	and.w	r3, r3, #32
 800fd0a:	607b      	str	r3, [r7, #4]
 800fd0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fd10:	460b      	mov	r3, r1
 800fd12:	4313      	orrs	r3, r2
 800fd14:	d011      	beq.n	800fd3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd1a:	3328      	adds	r3, #40	; 0x28
 800fd1c:	2102      	movs	r1, #2
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f001 fa5c 	bl	80111dc <RCCEx_PLL3_Config>
 800fd24:	4603      	mov	r3, r0
 800fd26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d003      	beq.n	800fd3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800fd3a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d101      	bne.n	800fd46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e000      	b.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fd46:	2301      	movs	r3, #1
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd54:	58024400 	.word	0x58024400

0800fd58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b090      	sub	sp, #64	; 0x40
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fd62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd66:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800fd6a:	430b      	orrs	r3, r1
 800fd6c:	f040 8094 	bne.w	800fe98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fd70:	4b9e      	ldr	r3, [pc, #632]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd74:	f003 0307 	and.w	r3, r3, #7
 800fd78:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	2b04      	cmp	r3, #4
 800fd7e:	f200 8087 	bhi.w	800fe90 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fd82:	a201      	add	r2, pc, #4	; (adr r2, 800fd88 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd88:	0800fd9d 	.word	0x0800fd9d
 800fd8c:	0800fdc5 	.word	0x0800fdc5
 800fd90:	0800fded 	.word	0x0800fded
 800fd94:	0800fe89 	.word	0x0800fe89
 800fd98:	0800fe15 	.word	0x0800fe15
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd9c:	4b93      	ldr	r3, [pc, #588]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fda4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fda8:	d108      	bne.n	800fdbc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f001 f810 	bl	8010dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdb8:	f000 bd45 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdc0:	f000 bd41 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fdc4:	4b89      	ldr	r3, [pc, #548]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fdd0:	d108      	bne.n	800fde4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdd2:	f107 0318 	add.w	r3, r7, #24
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f000 fd54 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fddc:	69bb      	ldr	r3, [r7, #24]
 800fdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fde0:	f000 bd31 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fde4:	2300      	movs	r3, #0
 800fde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde8:	f000 bd2d 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fdec:	4b7f      	ldr	r3, [pc, #508]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fdf8:	d108      	bne.n	800fe0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdfa:	f107 030c 	add.w	r3, r7, #12
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f000 fe94 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe08:	f000 bd1d 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe10:	f000 bd19 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe14:	4b75      	ldr	r3, [pc, #468]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fe1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fe1e:	4b73      	ldr	r3, [pc, #460]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f003 0304 	and.w	r3, r3, #4
 800fe26:	2b04      	cmp	r3, #4
 800fe28:	d10c      	bne.n	800fe44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fe2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d109      	bne.n	800fe44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe30:	4b6e      	ldr	r3, [pc, #440]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	08db      	lsrs	r3, r3, #3
 800fe36:	f003 0303 	and.w	r3, r3, #3
 800fe3a:	4a6d      	ldr	r2, [pc, #436]	; (800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fe3c:	fa22 f303 	lsr.w	r3, r2, r3
 800fe40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe42:	e01f      	b.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe44:	4b69      	ldr	r3, [pc, #420]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe50:	d106      	bne.n	800fe60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fe52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe58:	d102      	bne.n	800fe60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe5a:	4b66      	ldr	r3, [pc, #408]	; (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fe5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe5e:	e011      	b.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fe60:	4b62      	ldr	r3, [pc, #392]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fe6c:	d106      	bne.n	800fe7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fe6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe74:	d102      	bne.n	800fe7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fe76:	4b60      	ldr	r3, [pc, #384]	; (800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fe78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe7a:	e003      	b.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fe80:	f000 bce1 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fe84:	f000 bcdf 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fe88:	4b5c      	ldr	r3, [pc, #368]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fe8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe8c:	f000 bcdb 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fe90:	2300      	movs	r3, #0
 800fe92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe94:	f000 bcd7 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800fe98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe9c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fea0:	430b      	orrs	r3, r1
 800fea2:	f040 80ad 	bne.w	8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800fea6:	4b51      	ldr	r3, [pc, #324]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800feaa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800feae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800feb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800feb6:	d056      	beq.n	800ff66 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800febe:	f200 8090 	bhi.w	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	2bc0      	cmp	r3, #192	; 0xc0
 800fec6:	f000 8088 	beq.w	800ffda <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	2bc0      	cmp	r3, #192	; 0xc0
 800fece:	f200 8088 	bhi.w	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed4:	2b80      	cmp	r3, #128	; 0x80
 800fed6:	d032      	beq.n	800ff3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	2b80      	cmp	r3, #128	; 0x80
 800fedc:	f200 8081 	bhi.w	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d003      	beq.n	800feee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800fee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee8:	2b40      	cmp	r3, #64	; 0x40
 800feea:	d014      	beq.n	800ff16 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800feec:	e079      	b.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800feee:	4b3f      	ldr	r3, [pc, #252]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fefa:	d108      	bne.n	800ff0e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fefc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff00:	4618      	mov	r0, r3
 800ff02:	f000 ff67 	bl	8010dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff0a:	f000 bc9c 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff12:	f000 bc98 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff16:	4b35      	ldr	r3, [pc, #212]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff22:	d108      	bne.n	800ff36 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff24:	f107 0318 	add.w	r3, r7, #24
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 fcab 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff32:	f000 bc88 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff36:	2300      	movs	r3, #0
 800ff38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff3a:	f000 bc84 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff3e:	4b2b      	ldr	r3, [pc, #172]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff4a:	d108      	bne.n	800ff5e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff4c:	f107 030c 	add.w	r3, r7, #12
 800ff50:	4618      	mov	r0, r3
 800ff52:	f000 fdeb 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff5a:	f000 bc74 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff62:	f000 bc70 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ff66:	4b21      	ldr	r3, [pc, #132]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ff6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ff70:	4b1e      	ldr	r3, [pc, #120]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f003 0304 	and.w	r3, r3, #4
 800ff78:	2b04      	cmp	r3, #4
 800ff7a:	d10c      	bne.n	800ff96 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ff7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d109      	bne.n	800ff96 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff82:	4b1a      	ldr	r3, [pc, #104]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	08db      	lsrs	r3, r3, #3
 800ff88:	f003 0303 	and.w	r3, r3, #3
 800ff8c:	4a18      	ldr	r2, [pc, #96]	; (800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ff8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ff92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff94:	e01f      	b.n	800ffd6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ff96:	4b15      	ldr	r3, [pc, #84]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffa2:	d106      	bne.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ffaa:	d102      	bne.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ffac:	4b11      	ldr	r3, [pc, #68]	; (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ffae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffb0:	e011      	b.n	800ffd6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ffb2:	4b0e      	ldr	r3, [pc, #56]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ffbe:	d106      	bne.n	800ffce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ffc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffc6:	d102      	bne.n	800ffce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ffc8:	4b0b      	ldr	r3, [pc, #44]	; (800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ffca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffcc:	e003      	b.n	800ffd6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ffd2:	f000 bc38 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffd6:	f000 bc36 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ffda:	4b08      	ldr	r3, [pc, #32]	; (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ffdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffde:	f000 bc32 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffe6:	f000 bc2e 	b.w	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffea:	bf00      	nop
 800ffec:	58024400 	.word	0x58024400
 800fff0:	03d09000 	.word	0x03d09000
 800fff4:	003d0900 	.word	0x003d0900
 800fff8:	017d7840 	.word	0x017d7840
 800fffc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010004:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010008:	430b      	orrs	r3, r1
 801000a:	f040 809c 	bne.w	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801000e:	4b9e      	ldr	r3, [pc, #632]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010012:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8010016:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801001e:	d054      	beq.n	80100ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010026:	f200 808b 	bhi.w	8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801002a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010030:	f000 8083 	beq.w	801013a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801003a:	f200 8081 	bhi.w	8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801003e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010044:	d02f      	beq.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801004c:	d878      	bhi.n	8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801004e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010050:	2b00      	cmp	r3, #0
 8010052:	d004      	beq.n	801005e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801005a:	d012      	beq.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801005c:	e070      	b.n	8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801005e:	4b8a      	ldr	r3, [pc, #552]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801006a:	d107      	bne.n	801007c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801006c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010070:	4618      	mov	r0, r3
 8010072:	f000 feaf 	bl	8010dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801007a:	e3e4      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801007c:	2300      	movs	r3, #0
 801007e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010080:	e3e1      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010082:	4b81      	ldr	r3, [pc, #516]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801008a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801008e:	d107      	bne.n	80100a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010090:	f107 0318 	add.w	r3, r7, #24
 8010094:	4618      	mov	r0, r3
 8010096:	f000 fbf5 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801009e:	e3d2      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100a4:	e3cf      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80100a6:	4b78      	ldr	r3, [pc, #480]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100b2:	d107      	bne.n	80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100b4:	f107 030c 	add.w	r3, r7, #12
 80100b8:	4618      	mov	r0, r3
 80100ba:	f000 fd37 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100c2:	e3c0      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100c4:	2300      	movs	r3, #0
 80100c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100c8:	e3bd      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80100ca:	4b6f      	ldr	r3, [pc, #444]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80100d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80100d4:	4b6c      	ldr	r3, [pc, #432]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f003 0304 	and.w	r3, r3, #4
 80100dc:	2b04      	cmp	r3, #4
 80100de:	d10c      	bne.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80100e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d109      	bne.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80100e6:	4b68      	ldr	r3, [pc, #416]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	08db      	lsrs	r3, r3, #3
 80100ec:	f003 0303 	and.w	r3, r3, #3
 80100f0:	4a66      	ldr	r2, [pc, #408]	; (801028c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80100f2:	fa22 f303 	lsr.w	r3, r2, r3
 80100f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100f8:	e01e      	b.n	8010138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100fa:	4b63      	ldr	r3, [pc, #396]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010106:	d106      	bne.n	8010116 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801010a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801010e:	d102      	bne.n	8010116 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010110:	4b5f      	ldr	r3, [pc, #380]	; (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010114:	e010      	b.n	8010138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010116:	4b5c      	ldr	r3, [pc, #368]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801011e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010122:	d106      	bne.n	8010132 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801012a:	d102      	bne.n	8010132 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801012c:	4b59      	ldr	r3, [pc, #356]	; (8010294 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801012e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010130:	e002      	b.n	8010138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010132:	2300      	movs	r3, #0
 8010134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010136:	e386      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010138:	e385      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801013a:	4b57      	ldr	r3, [pc, #348]	; (8010298 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801013c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801013e:	e382      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010140:	2300      	movs	r3, #0
 8010142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010144:	e37f      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010146:	e9d7 2300 	ldrd	r2, r3, [r7]
 801014a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801014e:	430b      	orrs	r3, r1
 8010150:	f040 80a7 	bne.w	80102a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010154:	4b4c      	ldr	r3, [pc, #304]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010158:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801015c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801015e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010164:	d055      	beq.n	8010212 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801016c:	f200 8096 	bhi.w	801029c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010176:	f000 8084 	beq.w	8010282 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010180:	f200 808c 	bhi.w	801029c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801018a:	d030      	beq.n	80101ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801018c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010192:	f200 8083 	bhi.w	801029c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010198:	2b00      	cmp	r3, #0
 801019a:	d004      	beq.n	80101a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801019c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80101a2:	d012      	beq.n	80101ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80101a4:	e07a      	b.n	801029c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80101a6:	4b38      	ldr	r3, [pc, #224]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80101b2:	d107      	bne.n	80101c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80101b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101b8:	4618      	mov	r0, r3
 80101ba:	f000 fe0b 	bl	8010dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80101be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101c2:	e340      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101c4:	2300      	movs	r3, #0
 80101c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101c8:	e33d      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80101ca:	4b2f      	ldr	r3, [pc, #188]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80101d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80101d6:	d107      	bne.n	80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101d8:	f107 0318 	add.w	r3, r7, #24
 80101dc:	4618      	mov	r0, r3
 80101de:	f000 fb51 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101e6:	e32e      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101ec:	e32b      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80101ee:	4b26      	ldr	r3, [pc, #152]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80101f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101fa:	d107      	bne.n	801020c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101fc:	f107 030c 	add.w	r3, r7, #12
 8010200:	4618      	mov	r0, r3
 8010202:	f000 fc93 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801020a:	e31c      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801020c:	2300      	movs	r3, #0
 801020e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010210:	e319      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010212:	4b1d      	ldr	r3, [pc, #116]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801021a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801021c:	4b1a      	ldr	r3, [pc, #104]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f003 0304 	and.w	r3, r3, #4
 8010224:	2b04      	cmp	r3, #4
 8010226:	d10c      	bne.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022a:	2b00      	cmp	r3, #0
 801022c:	d109      	bne.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801022e:	4b16      	ldr	r3, [pc, #88]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	08db      	lsrs	r3, r3, #3
 8010234:	f003 0303 	and.w	r3, r3, #3
 8010238:	4a14      	ldr	r2, [pc, #80]	; (801028c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801023a:	fa22 f303 	lsr.w	r3, r2, r3
 801023e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010240:	e01e      	b.n	8010280 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010242:	4b11      	ldr	r3, [pc, #68]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801024a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801024e:	d106      	bne.n	801025e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010256:	d102      	bne.n	801025e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010258:	4b0d      	ldr	r3, [pc, #52]	; (8010290 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801025a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801025c:	e010      	b.n	8010280 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801025e:	4b0a      	ldr	r3, [pc, #40]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801026a:	d106      	bne.n	801027a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801026c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801026e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010272:	d102      	bne.n	801027a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010274:	4b07      	ldr	r3, [pc, #28]	; (8010294 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010278:	e002      	b.n	8010280 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801027a:	2300      	movs	r3, #0
 801027c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801027e:	e2e2      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010280:	e2e1      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010282:	4b05      	ldr	r3, [pc, #20]	; (8010298 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010286:	e2de      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010288:	58024400 	.word	0x58024400
 801028c:	03d09000 	.word	0x03d09000
 8010290:	003d0900 	.word	0x003d0900
 8010294:	017d7840 	.word	0x017d7840
 8010298:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801029c:	2300      	movs	r3, #0
 801029e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102a0:	e2d1      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80102a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102a6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80102aa:	430b      	orrs	r3, r1
 80102ac:	f040 809c 	bne.w	80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80102b0:	4b93      	ldr	r3, [pc, #588]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102b4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80102b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80102ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80102c0:	d054      	beq.n	801036c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80102c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80102c8:	f200 808b 	bhi.w	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80102d2:	f000 8083 	beq.w	80103dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80102d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80102dc:	f200 8081 	bhi.w	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102e6:	d02f      	beq.n	8010348 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102ee:	d878      	bhi.n	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d004      	beq.n	8010300 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102fc:	d012      	beq.n	8010324 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80102fe:	e070      	b.n	80103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010300:	4b7f      	ldr	r3, [pc, #508]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801030c:	d107      	bne.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801030e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010312:	4618      	mov	r0, r3
 8010314:	f000 fd5e 	bl	8010dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801031c:	e293      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010322:	e290      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010324:	4b76      	ldr	r3, [pc, #472]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801032c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010330:	d107      	bne.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010332:	f107 0318 	add.w	r3, r7, #24
 8010336:	4618      	mov	r0, r3
 8010338:	f000 faa4 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010340:	e281      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010342:	2300      	movs	r3, #0
 8010344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010346:	e27e      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010348:	4b6d      	ldr	r3, [pc, #436]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010354:	d107      	bne.n	8010366 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010356:	f107 030c 	add.w	r3, r7, #12
 801035a:	4618      	mov	r0, r3
 801035c:	f000 fbe6 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010364:	e26f      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010366:	2300      	movs	r3, #0
 8010368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801036a:	e26c      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801036c:	4b64      	ldr	r3, [pc, #400]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801036e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010374:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010376:	4b62      	ldr	r3, [pc, #392]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f003 0304 	and.w	r3, r3, #4
 801037e:	2b04      	cmp	r3, #4
 8010380:	d10c      	bne.n	801039c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010384:	2b00      	cmp	r3, #0
 8010386:	d109      	bne.n	801039c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010388:	4b5d      	ldr	r3, [pc, #372]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	08db      	lsrs	r3, r3, #3
 801038e:	f003 0303 	and.w	r3, r3, #3
 8010392:	4a5c      	ldr	r2, [pc, #368]	; (8010504 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010394:	fa22 f303 	lsr.w	r3, r2, r3
 8010398:	63fb      	str	r3, [r7, #60]	; 0x3c
 801039a:	e01e      	b.n	80103da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801039c:	4b58      	ldr	r3, [pc, #352]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103a8:	d106      	bne.n	80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80103aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80103b0:	d102      	bne.n	80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80103b2:	4b55      	ldr	r3, [pc, #340]	; (8010508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80103b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103b6:	e010      	b.n	80103da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80103b8:	4b51      	ldr	r3, [pc, #324]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80103c4:	d106      	bne.n	80103d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80103c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103cc:	d102      	bne.n	80103d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80103ce:	4b4f      	ldr	r3, [pc, #316]	; (801050c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80103d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103d2:	e002      	b.n	80103da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80103d4:	2300      	movs	r3, #0
 80103d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80103d8:	e235      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80103da:	e234      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80103dc:	4b4c      	ldr	r3, [pc, #304]	; (8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80103de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103e0:	e231      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80103e2:	2300      	movs	r3, #0
 80103e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103e6:	e22e      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80103e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103ec:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80103f0:	430b      	orrs	r3, r1
 80103f2:	f040 808f 	bne.w	8010514 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80103f6:	4b42      	ldr	r3, [pc, #264]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103fa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80103fe:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010406:	d06b      	beq.n	80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801040e:	d874      	bhi.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010412:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010416:	d056      	beq.n	80104c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801041e:	d86c      	bhi.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010422:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010426:	d03b      	beq.n	80104a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801042e:	d864      	bhi.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010436:	d021      	beq.n	801047c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801043e:	d85c      	bhi.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010442:	2b00      	cmp	r3, #0
 8010444:	d004      	beq.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801044c:	d004      	beq.n	8010458 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801044e:	e054      	b.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010450:	f7fe fa0a 	bl	800e868 <HAL_RCC_GetPCLK1Freq>
 8010454:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010456:	e1f6      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010458:	4b29      	ldr	r3, [pc, #164]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010464:	d107      	bne.n	8010476 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010466:	f107 0318 	add.w	r3, r7, #24
 801046a:	4618      	mov	r0, r3
 801046c:	f000 fa0a 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010474:	e1e7      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010476:	2300      	movs	r3, #0
 8010478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801047a:	e1e4      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801047c:	4b20      	ldr	r3, [pc, #128]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010488:	d107      	bne.n	801049a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801048a:	f107 030c 	add.w	r3, r7, #12
 801048e:	4618      	mov	r0, r3
 8010490:	f000 fb4c 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010498:	e1d5      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801049a:	2300      	movs	r3, #0
 801049c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801049e:	e1d2      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80104a0:	4b17      	ldr	r3, [pc, #92]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f003 0304 	and.w	r3, r3, #4
 80104a8:	2b04      	cmp	r3, #4
 80104aa:	d109      	bne.n	80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80104ac:	4b14      	ldr	r3, [pc, #80]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	08db      	lsrs	r3, r3, #3
 80104b2:	f003 0303 	and.w	r3, r3, #3
 80104b6:	4a13      	ldr	r2, [pc, #76]	; (8010504 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80104b8:	fa22 f303 	lsr.w	r3, r2, r3
 80104bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104be:	e1c2      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104c0:	2300      	movs	r3, #0
 80104c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104c4:	e1bf      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80104c6:	4b0e      	ldr	r3, [pc, #56]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104d2:	d102      	bne.n	80104da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80104d4:	4b0c      	ldr	r3, [pc, #48]	; (8010508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80104d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104d8:	e1b5      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104de:	e1b2      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80104e0:	4b07      	ldr	r3, [pc, #28]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104ec:	d102      	bne.n	80104f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80104ee:	4b07      	ldr	r3, [pc, #28]	; (801050c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80104f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104f2:	e1a8      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104f4:	2300      	movs	r3, #0
 80104f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104f8:	e1a5      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104fe:	e1a2      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010500:	58024400 	.word	0x58024400
 8010504:	03d09000 	.word	0x03d09000
 8010508:	003d0900 	.word	0x003d0900
 801050c:	017d7840 	.word	0x017d7840
 8010510:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010518:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801051c:	430b      	orrs	r3, r1
 801051e:	d173      	bne.n	8010608 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010520:	4b9c      	ldr	r3, [pc, #624]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010528:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801052a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010530:	d02f      	beq.n	8010592 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010538:	d863      	bhi.n	8010602 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053c:	2b00      	cmp	r3, #0
 801053e:	d004      	beq.n	801054a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010546:	d012      	beq.n	801056e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010548:	e05b      	b.n	8010602 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801054a:	4b92      	ldr	r3, [pc, #584]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010556:	d107      	bne.n	8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010558:	f107 0318 	add.w	r3, r7, #24
 801055c:	4618      	mov	r0, r3
 801055e:	f000 f991 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010566:	e16e      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801056c:	e16b      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801056e:	4b89      	ldr	r3, [pc, #548]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801057a:	d107      	bne.n	801058c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801057c:	f107 030c 	add.w	r3, r7, #12
 8010580:	4618      	mov	r0, r3
 8010582:	f000 fad3 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801058a:	e15c      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801058c:	2300      	movs	r3, #0
 801058e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010590:	e159      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010592:	4b80      	ldr	r3, [pc, #512]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801059a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801059c:	4b7d      	ldr	r3, [pc, #500]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f003 0304 	and.w	r3, r3, #4
 80105a4:	2b04      	cmp	r3, #4
 80105a6:	d10c      	bne.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d109      	bne.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80105ae:	4b79      	ldr	r3, [pc, #484]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	08db      	lsrs	r3, r3, #3
 80105b4:	f003 0303 	and.w	r3, r3, #3
 80105b8:	4a77      	ldr	r2, [pc, #476]	; (8010798 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80105ba:	fa22 f303 	lsr.w	r3, r2, r3
 80105be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105c0:	e01e      	b.n	8010600 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80105c2:	4b74      	ldr	r3, [pc, #464]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105ce:	d106      	bne.n	80105de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80105d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105d6:	d102      	bne.n	80105de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80105d8:	4b70      	ldr	r3, [pc, #448]	; (801079c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80105da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105dc:	e010      	b.n	8010600 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80105de:	4b6d      	ldr	r3, [pc, #436]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80105e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105ea:	d106      	bne.n	80105fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80105ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105f2:	d102      	bne.n	80105fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80105f4:	4b6a      	ldr	r3, [pc, #424]	; (80107a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80105f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105f8:	e002      	b.n	8010600 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80105fa:	2300      	movs	r3, #0
 80105fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80105fe:	e122      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010600:	e121      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010606:	e11e      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010608:	e9d7 2300 	ldrd	r2, r3, [r7]
 801060c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010610:	430b      	orrs	r3, r1
 8010612:	d133      	bne.n	801067c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010614:	4b5f      	ldr	r3, [pc, #380]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801061c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801061e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010620:	2b00      	cmp	r3, #0
 8010622:	d004      	beq.n	801062e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801062a:	d012      	beq.n	8010652 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801062c:	e023      	b.n	8010676 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801062e:	4b59      	ldr	r3, [pc, #356]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801063a:	d107      	bne.n	801064c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010640:	4618      	mov	r0, r3
 8010642:	f000 fbc7 	bl	8010dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801064a:	e0fc      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801064c:	2300      	movs	r3, #0
 801064e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010650:	e0f9      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010652:	4b50      	ldr	r3, [pc, #320]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801065a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801065e:	d107      	bne.n	8010670 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010660:	f107 0318 	add.w	r3, r7, #24
 8010664:	4618      	mov	r0, r3
 8010666:	f000 f90d 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801066e:	e0ea      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010670:	2300      	movs	r3, #0
 8010672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010674:	e0e7      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010676:	2300      	movs	r3, #0
 8010678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801067a:	e0e4      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801067c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010680:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010684:	430b      	orrs	r3, r1
 8010686:	f040 808d 	bne.w	80107a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801068a:	4b42      	ldr	r3, [pc, #264]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801068e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010692:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801069a:	d06b      	beq.n	8010774 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80106a2:	d874      	bhi.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80106a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106aa:	d056      	beq.n	801075a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80106ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106b2:	d86c      	bhi.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80106b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80106ba:	d03b      	beq.n	8010734 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80106bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80106c2:	d864      	bhi.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80106c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106ca:	d021      	beq.n	8010710 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80106cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106d2:	d85c      	bhi.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80106d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d004      	beq.n	80106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80106da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106e0:	d004      	beq.n	80106ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80106e2:	e054      	b.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80106e4:	f000 f8b8 	bl	8010858 <HAL_RCCEx_GetD3PCLK1Freq>
 80106e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80106ea:	e0ac      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80106ec:	4b29      	ldr	r3, [pc, #164]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80106f8:	d107      	bne.n	801070a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106fa:	f107 0318 	add.w	r3, r7, #24
 80106fe:	4618      	mov	r0, r3
 8010700:	f000 f8c0 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010708:	e09d      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801070e:	e09a      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010710:	4b20      	ldr	r3, [pc, #128]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801071c:	d107      	bne.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801071e:	f107 030c 	add.w	r3, r7, #12
 8010722:	4618      	mov	r0, r3
 8010724:	f000 fa02 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801072c:	e08b      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801072e:	2300      	movs	r3, #0
 8010730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010732:	e088      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010734:	4b17      	ldr	r3, [pc, #92]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f003 0304 	and.w	r3, r3, #4
 801073c:	2b04      	cmp	r3, #4
 801073e:	d109      	bne.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010740:	4b14      	ldr	r3, [pc, #80]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	08db      	lsrs	r3, r3, #3
 8010746:	f003 0303 	and.w	r3, r3, #3
 801074a:	4a13      	ldr	r2, [pc, #76]	; (8010798 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801074c:	fa22 f303 	lsr.w	r3, r2, r3
 8010750:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010752:	e078      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010754:	2300      	movs	r3, #0
 8010756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010758:	e075      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801075a:	4b0e      	ldr	r3, [pc, #56]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010766:	d102      	bne.n	801076e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010768:	4b0c      	ldr	r3, [pc, #48]	; (801079c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801076a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801076c:	e06b      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801076e:	2300      	movs	r3, #0
 8010770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010772:	e068      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010774:	4b07      	ldr	r3, [pc, #28]	; (8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801077c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010780:	d102      	bne.n	8010788 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010782:	4b07      	ldr	r3, [pc, #28]	; (80107a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010786:	e05e      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801078c:	e05b      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010792:	e058      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010794:	58024400 	.word	0x58024400
 8010798:	03d09000 	.word	0x03d09000
 801079c:	003d0900 	.word	0x003d0900
 80107a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80107a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107a8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80107ac:	430b      	orrs	r3, r1
 80107ae:	d148      	bne.n	8010842 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80107b0:	4b27      	ldr	r3, [pc, #156]	; (8010850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80107b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80107ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107c0:	d02a      	beq.n	8010818 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80107c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107c8:	d838      	bhi.n	801083c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80107ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d004      	beq.n	80107da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80107d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107d6:	d00d      	beq.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80107d8:	e030      	b.n	801083c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80107da:	4b1d      	ldr	r3, [pc, #116]	; (8010850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107e6:	d102      	bne.n	80107ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80107e8:	4b1a      	ldr	r3, [pc, #104]	; (8010854 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80107ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107ec:	e02b      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107f2:	e028      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80107f4:	4b16      	ldr	r3, [pc, #88]	; (8010850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010800:	d107      	bne.n	8010812 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010806:	4618      	mov	r0, r3
 8010808:	f000 fae4 	bl	8010dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010810:	e019      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010812:	2300      	movs	r3, #0
 8010814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010816:	e016      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010818:	4b0d      	ldr	r3, [pc, #52]	; (8010850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010824:	d107      	bne.n	8010836 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010826:	f107 0318 	add.w	r3, r7, #24
 801082a:	4618      	mov	r0, r3
 801082c:	f000 f82a 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010834:	e007      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010836:	2300      	movs	r3, #0
 8010838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801083a:	e004      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801083c:	2300      	movs	r3, #0
 801083e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010840:	e001      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010842:	2300      	movs	r3, #0
 8010844:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010848:	4618      	mov	r0, r3
 801084a:	3740      	adds	r7, #64	; 0x40
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	58024400 	.word	0x58024400
 8010854:	017d7840 	.word	0x017d7840

08010858 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801085c:	f7fd ffd4 	bl	800e808 <HAL_RCC_GetHCLKFreq>
 8010860:	4602      	mov	r2, r0
 8010862:	4b06      	ldr	r3, [pc, #24]	; (801087c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010864:	6a1b      	ldr	r3, [r3, #32]
 8010866:	091b      	lsrs	r3, r3, #4
 8010868:	f003 0307 	and.w	r3, r3, #7
 801086c:	4904      	ldr	r1, [pc, #16]	; (8010880 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801086e:	5ccb      	ldrb	r3, [r1, r3]
 8010870:	f003 031f 	and.w	r3, r3, #31
 8010874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010878:	4618      	mov	r0, r3
 801087a:	bd80      	pop	{r7, pc}
 801087c:	58024400 	.word	0x58024400
 8010880:	0801abe4 	.word	0x0801abe4

08010884 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010884:	b480      	push	{r7}
 8010886:	b089      	sub	sp, #36	; 0x24
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801088c:	4ba1      	ldr	r3, [pc, #644]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010890:	f003 0303 	and.w	r3, r3, #3
 8010894:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010896:	4b9f      	ldr	r3, [pc, #636]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801089a:	0b1b      	lsrs	r3, r3, #12
 801089c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80108a2:	4b9c      	ldr	r3, [pc, #624]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a6:	091b      	lsrs	r3, r3, #4
 80108a8:	f003 0301 	and.w	r3, r3, #1
 80108ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80108ae:	4b99      	ldr	r3, [pc, #612]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108b2:	08db      	lsrs	r3, r3, #3
 80108b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108b8:	693a      	ldr	r2, [r7, #16]
 80108ba:	fb02 f303 	mul.w	r3, r2, r3
 80108be:	ee07 3a90 	vmov	s15, r3
 80108c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 8111 	beq.w	8010af4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	2b02      	cmp	r3, #2
 80108d6:	f000 8083 	beq.w	80109e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	2b02      	cmp	r3, #2
 80108de:	f200 80a1 	bhi.w	8010a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d003      	beq.n	80108f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d056      	beq.n	801099c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80108ee:	e099      	b.n	8010a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108f0:	4b88      	ldr	r3, [pc, #544]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f003 0320 	and.w	r3, r3, #32
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d02d      	beq.n	8010958 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108fc:	4b85      	ldr	r3, [pc, #532]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	08db      	lsrs	r3, r3, #3
 8010902:	f003 0303 	and.w	r3, r3, #3
 8010906:	4a84      	ldr	r2, [pc, #528]	; (8010b18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010908:	fa22 f303 	lsr.w	r3, r2, r3
 801090c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	ee07 3a90 	vmov	s15, r3
 8010914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	ee07 3a90 	vmov	s15, r3
 801091e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010926:	4b7b      	ldr	r3, [pc, #492]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801092a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801092e:	ee07 3a90 	vmov	s15, r3
 8010932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010936:	ed97 6a03 	vldr	s12, [r7, #12]
 801093a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801093e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801094a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801094e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010952:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010956:	e087      	b.n	8010a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	ee07 3a90 	vmov	s15, r3
 801095e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010962:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010b20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801096a:	4b6a      	ldr	r3, [pc, #424]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801096c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801096e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010972:	ee07 3a90 	vmov	s15, r3
 8010976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801097a:	ed97 6a03 	vldr	s12, [r7, #12]
 801097e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801098a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801098e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801099a:	e065      	b.n	8010a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	ee07 3a90 	vmov	s15, r3
 80109a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80109aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109ae:	4b59      	ldr	r3, [pc, #356]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109b6:	ee07 3a90 	vmov	s15, r3
 80109ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109be:	ed97 6a03 	vldr	s12, [r7, #12]
 80109c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80109c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109de:	e043      	b.n	8010a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	ee07 3a90 	vmov	s15, r3
 80109e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010b28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80109ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109f2:	4b48      	ldr	r3, [pc, #288]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109fa:	ee07 3a90 	vmov	s15, r3
 80109fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a22:	e021      	b.n	8010a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	ee07 3a90 	vmov	s15, r3
 8010a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a36:	4b37      	ldr	r3, [pc, #220]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a3e:	ee07 3a90 	vmov	s15, r3
 8010a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010a68:	4b2a      	ldr	r3, [pc, #168]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a6c:	0a5b      	lsrs	r3, r3, #9
 8010a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a72:	ee07 3a90 	vmov	s15, r3
 8010a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a8e:	ee17 2a90 	vmov	r2, s15
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010a96:	4b1f      	ldr	r3, [pc, #124]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a9a:	0c1b      	lsrs	r3, r3, #16
 8010a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aa0:	ee07 3a90 	vmov	s15, r3
 8010aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010abc:	ee17 2a90 	vmov	r2, s15
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010ac4:	4b13      	ldr	r3, [pc, #76]	; (8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ac8:	0e1b      	lsrs	r3, r3, #24
 8010aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ace:	ee07 3a90 	vmov	s15, r3
 8010ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010aea:	ee17 2a90 	vmov	r2, s15
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010af2:	e008      	b.n	8010b06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2200      	movs	r2, #0
 8010af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	609a      	str	r2, [r3, #8]
}
 8010b06:	bf00      	nop
 8010b08:	3724      	adds	r7, #36	; 0x24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	58024400 	.word	0x58024400
 8010b18:	03d09000 	.word	0x03d09000
 8010b1c:	46000000 	.word	0x46000000
 8010b20:	4c742400 	.word	0x4c742400
 8010b24:	4a742400 	.word	0x4a742400
 8010b28:	4bbebc20 	.word	0x4bbebc20

08010b2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b089      	sub	sp, #36	; 0x24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b34:	4ba1      	ldr	r3, [pc, #644]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b38:	f003 0303 	and.w	r3, r3, #3
 8010b3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010b3e:	4b9f      	ldr	r3, [pc, #636]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b42:	0d1b      	lsrs	r3, r3, #20
 8010b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010b4a:	4b9c      	ldr	r3, [pc, #624]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b4e:	0a1b      	lsrs	r3, r3, #8
 8010b50:	f003 0301 	and.w	r3, r3, #1
 8010b54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010b56:	4b99      	ldr	r3, [pc, #612]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b5a:	08db      	lsrs	r3, r3, #3
 8010b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	fb02 f303 	mul.w	r3, r2, r3
 8010b66:	ee07 3a90 	vmov	s15, r3
 8010b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f000 8111 	beq.w	8010d9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	f000 8083 	beq.w	8010c88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	2b02      	cmp	r3, #2
 8010b86:	f200 80a1 	bhi.w	8010ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d003      	beq.n	8010b98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	d056      	beq.n	8010c44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010b96:	e099      	b.n	8010ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b98:	4b88      	ldr	r3, [pc, #544]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f003 0320 	and.w	r3, r3, #32
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d02d      	beq.n	8010c00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ba4:	4b85      	ldr	r3, [pc, #532]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	08db      	lsrs	r3, r3, #3
 8010baa:	f003 0303 	and.w	r3, r3, #3
 8010bae:	4a84      	ldr	r2, [pc, #528]	; (8010dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8010bb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	ee07 3a90 	vmov	s15, r3
 8010bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	ee07 3a90 	vmov	s15, r3
 8010bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bce:	4b7b      	ldr	r3, [pc, #492]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bd6:	ee07 3a90 	vmov	s15, r3
 8010bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8010be2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010bfe:	e087      	b.n	8010d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	ee07 3a90 	vmov	s15, r3
 8010c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c12:	4b6a      	ldr	r3, [pc, #424]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c1a:	ee07 3a90 	vmov	s15, r3
 8010c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c42:	e065      	b.n	8010d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	ee07 3a90 	vmov	s15, r3
 8010c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c56:	4b59      	ldr	r3, [pc, #356]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c86:	e043      	b.n	8010d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	ee07 3a90 	vmov	s15, r3
 8010c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c9a:	4b48      	ldr	r3, [pc, #288]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ca2:	ee07 3a90 	vmov	s15, r3
 8010ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cca:	e021      	b.n	8010d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	ee07 3a90 	vmov	s15, r3
 8010cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cde:	4b37      	ldr	r3, [pc, #220]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ce6:	ee07 3a90 	vmov	s15, r3
 8010cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010d10:	4b2a      	ldr	r3, [pc, #168]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d14:	0a5b      	lsrs	r3, r3, #9
 8010d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d1a:	ee07 3a90 	vmov	s15, r3
 8010d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d36:	ee17 2a90 	vmov	r2, s15
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010d3e:	4b1f      	ldr	r3, [pc, #124]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d42:	0c1b      	lsrs	r3, r3, #16
 8010d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d48:	ee07 3a90 	vmov	s15, r3
 8010d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d64:	ee17 2a90 	vmov	r2, s15
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010d6c:	4b13      	ldr	r3, [pc, #76]	; (8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d70:	0e1b      	lsrs	r3, r3, #24
 8010d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d76:	ee07 3a90 	vmov	s15, r3
 8010d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d92:	ee17 2a90 	vmov	r2, s15
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010d9a:	e008      	b.n	8010dae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2200      	movs	r2, #0
 8010dac:	609a      	str	r2, [r3, #8]
}
 8010dae:	bf00      	nop
 8010db0:	3724      	adds	r7, #36	; 0x24
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	58024400 	.word	0x58024400
 8010dc0:	03d09000 	.word	0x03d09000
 8010dc4:	46000000 	.word	0x46000000
 8010dc8:	4c742400 	.word	0x4c742400
 8010dcc:	4a742400 	.word	0x4a742400
 8010dd0:	4bbebc20 	.word	0x4bbebc20

08010dd4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b089      	sub	sp, #36	; 0x24
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ddc:	4ba0      	ldr	r3, [pc, #640]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de0:	f003 0303 	and.w	r3, r3, #3
 8010de4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010de6:	4b9e      	ldr	r3, [pc, #632]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dea:	091b      	lsrs	r3, r3, #4
 8010dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010df0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010df2:	4b9b      	ldr	r3, [pc, #620]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df6:	f003 0301 	and.w	r3, r3, #1
 8010dfa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010dfc:	4b98      	ldr	r3, [pc, #608]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e00:	08db      	lsrs	r3, r3, #3
 8010e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e06:	693a      	ldr	r2, [r7, #16]
 8010e08:	fb02 f303 	mul.w	r3, r2, r3
 8010e0c:	ee07 3a90 	vmov	s15, r3
 8010e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e14:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f000 8111 	beq.w	8011042 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	f000 8083 	beq.w	8010f2e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	2b02      	cmp	r3, #2
 8010e2c:	f200 80a1 	bhi.w	8010f72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d003      	beq.n	8010e3e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d056      	beq.n	8010eea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010e3c:	e099      	b.n	8010f72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e3e:	4b88      	ldr	r3, [pc, #544]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f003 0320 	and.w	r3, r3, #32
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d02d      	beq.n	8010ea6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e4a:	4b85      	ldr	r3, [pc, #532]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	08db      	lsrs	r3, r3, #3
 8010e50:	f003 0303 	and.w	r3, r3, #3
 8010e54:	4a83      	ldr	r2, [pc, #524]	; (8011064 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010e56:	fa22 f303 	lsr.w	r3, r2, r3
 8010e5a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	ee07 3a90 	vmov	s15, r3
 8010e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	ee07 3a90 	vmov	s15, r3
 8010e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e74:	4b7a      	ldr	r3, [pc, #488]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e7c:	ee07 3a90 	vmov	s15, r3
 8010e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e88:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011068 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010ea4:	e087      	b.n	8010fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	ee07 3a90 	vmov	s15, r3
 8010eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eb0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801106c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eb8:	4b69      	ldr	r3, [pc, #420]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ec0:	ee07 3a90 	vmov	s15, r3
 8010ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ecc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011068 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ee8:	e065      	b.n	8010fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	ee07 3a90 	vmov	s15, r3
 8010ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ef4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011070 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010efc:	4b58      	ldr	r3, [pc, #352]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f04:	ee07 3a90 	vmov	s15, r3
 8010f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f10:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011068 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f2c:	e043      	b.n	8010fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	ee07 3a90 	vmov	s15, r3
 8010f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f38:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011074 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f40:	4b47      	ldr	r3, [pc, #284]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f48:	ee07 3a90 	vmov	s15, r3
 8010f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f50:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f54:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011068 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f70:	e021      	b.n	8010fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	ee07 3a90 	vmov	s15, r3
 8010f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f7c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801106c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f84:	4b36      	ldr	r3, [pc, #216]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f8c:	ee07 3a90 	vmov	s15, r3
 8010f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f94:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f98:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011068 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010fb4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010fb6:	4b2a      	ldr	r3, [pc, #168]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fba:	0a5b      	lsrs	r3, r3, #9
 8010fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fc0:	ee07 3a90 	vmov	s15, r3
 8010fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fdc:	ee17 2a90 	vmov	r2, s15
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010fe4:	4b1e      	ldr	r3, [pc, #120]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fe8:	0c1b      	lsrs	r3, r3, #16
 8010fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fee:	ee07 3a90 	vmov	s15, r3
 8010ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8011002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801100a:	ee17 2a90 	vmov	r2, s15
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011012:	4b13      	ldr	r3, [pc, #76]	; (8011060 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011016:	0e1b      	lsrs	r3, r3, #24
 8011018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801101c:	ee07 3a90 	vmov	s15, r3
 8011020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011028:	ee37 7a87 	vadd.f32	s14, s15, s14
 801102c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011038:	ee17 2a90 	vmov	r2, s15
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011040:	e008      	b.n	8011054 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	609a      	str	r2, [r3, #8]
}
 8011054:	bf00      	nop
 8011056:	3724      	adds	r7, #36	; 0x24
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	58024400 	.word	0x58024400
 8011064:	03d09000 	.word	0x03d09000
 8011068:	46000000 	.word	0x46000000
 801106c:	4c742400 	.word	0x4c742400
 8011070:	4a742400 	.word	0x4a742400
 8011074:	4bbebc20 	.word	0x4bbebc20

08011078 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011086:	4b53      	ldr	r3, [pc, #332]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801108a:	f003 0303 	and.w	r3, r3, #3
 801108e:	2b03      	cmp	r3, #3
 8011090:	d101      	bne.n	8011096 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011092:	2301      	movs	r3, #1
 8011094:	e099      	b.n	80111ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011096:	4b4f      	ldr	r3, [pc, #316]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4a4e      	ldr	r2, [pc, #312]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801109c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80110a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110a2:	f7f4 fb3b 	bl	800571c <HAL_GetTick>
 80110a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80110a8:	e008      	b.n	80110bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80110aa:	f7f4 fb37 	bl	800571c <HAL_GetTick>
 80110ae:	4602      	mov	r2, r0
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	2b02      	cmp	r3, #2
 80110b6:	d901      	bls.n	80110bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80110b8:	2303      	movs	r3, #3
 80110ba:	e086      	b.n	80111ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80110bc:	4b45      	ldr	r3, [pc, #276]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1f0      	bne.n	80110aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80110c8:	4b42      	ldr	r3, [pc, #264]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 80110ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	031b      	lsls	r3, r3, #12
 80110d6:	493f      	ldr	r1, [pc, #252]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 80110d8:	4313      	orrs	r3, r2
 80110da:	628b      	str	r3, [r1, #40]	; 0x28
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	3b01      	subs	r3, #1
 80110ec:	025b      	lsls	r3, r3, #9
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	431a      	orrs	r2, r3
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	3b01      	subs	r3, #1
 80110f8:	041b      	lsls	r3, r3, #16
 80110fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80110fe:	431a      	orrs	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	691b      	ldr	r3, [r3, #16]
 8011104:	3b01      	subs	r3, #1
 8011106:	061b      	lsls	r3, r3, #24
 8011108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801110c:	4931      	ldr	r1, [pc, #196]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801110e:	4313      	orrs	r3, r2
 8011110:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011112:	4b30      	ldr	r3, [pc, #192]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	695b      	ldr	r3, [r3, #20]
 801111e:	492d      	ldr	r1, [pc, #180]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011120:	4313      	orrs	r3, r2
 8011122:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011124:	4b2b      	ldr	r3, [pc, #172]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011128:	f023 0220 	bic.w	r2, r3, #32
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	699b      	ldr	r3, [r3, #24]
 8011130:	4928      	ldr	r1, [pc, #160]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011132:	4313      	orrs	r3, r2
 8011134:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011136:	4b27      	ldr	r3, [pc, #156]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801113a:	4a26      	ldr	r2, [pc, #152]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801113c:	f023 0310 	bic.w	r3, r3, #16
 8011140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011142:	4b24      	ldr	r3, [pc, #144]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011146:	4b24      	ldr	r3, [pc, #144]	; (80111d8 <RCCEx_PLL2_Config+0x160>)
 8011148:	4013      	ands	r3, r2
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	69d2      	ldr	r2, [r2, #28]
 801114e:	00d2      	lsls	r2, r2, #3
 8011150:	4920      	ldr	r1, [pc, #128]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011152:	4313      	orrs	r3, r2
 8011154:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011156:	4b1f      	ldr	r3, [pc, #124]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801115a:	4a1e      	ldr	r2, [pc, #120]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801115c:	f043 0310 	orr.w	r3, r3, #16
 8011160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d106      	bne.n	8011176 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011168:	4b1a      	ldr	r3, [pc, #104]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801116c:	4a19      	ldr	r2, [pc, #100]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801116e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011174:	e00f      	b.n	8011196 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	2b01      	cmp	r3, #1
 801117a:	d106      	bne.n	801118a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801117c:	4b15      	ldr	r3, [pc, #84]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011180:	4a14      	ldr	r2, [pc, #80]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011188:	e005      	b.n	8011196 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801118a:	4b12      	ldr	r3, [pc, #72]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118e:	4a11      	ldr	r2, [pc, #68]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011194:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011196:	4b0f      	ldr	r3, [pc, #60]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a0e      	ldr	r2, [pc, #56]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 801119c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80111a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111a2:	f7f4 fabb 	bl	800571c <HAL_GetTick>
 80111a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80111a8:	e008      	b.n	80111bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80111aa:	f7f4 fab7 	bl	800571c <HAL_GetTick>
 80111ae:	4602      	mov	r2, r0
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	1ad3      	subs	r3, r2, r3
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	d901      	bls.n	80111bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80111b8:	2303      	movs	r3, #3
 80111ba:	e006      	b.n	80111ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80111bc:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <RCCEx_PLL2_Config+0x15c>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d0f0      	beq.n	80111aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80111c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	58024400 	.word	0x58024400
 80111d8:	ffff0007 	.word	0xffff0007

080111dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80111e6:	2300      	movs	r3, #0
 80111e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80111ea:	4b53      	ldr	r3, [pc, #332]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80111ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ee:	f003 0303 	and.w	r3, r3, #3
 80111f2:	2b03      	cmp	r3, #3
 80111f4:	d101      	bne.n	80111fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80111f6:	2301      	movs	r3, #1
 80111f8:	e099      	b.n	801132e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80111fa:	4b4f      	ldr	r3, [pc, #316]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4a4e      	ldr	r2, [pc, #312]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011206:	f7f4 fa89 	bl	800571c <HAL_GetTick>
 801120a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801120c:	e008      	b.n	8011220 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801120e:	f7f4 fa85 	bl	800571c <HAL_GetTick>
 8011212:	4602      	mov	r2, r0
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	2b02      	cmp	r3, #2
 801121a:	d901      	bls.n	8011220 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801121c:	2303      	movs	r3, #3
 801121e:	e086      	b.n	801132e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011220:	4b45      	ldr	r3, [pc, #276]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1f0      	bne.n	801120e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801122c:	4b42      	ldr	r3, [pc, #264]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 801122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011230:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	051b      	lsls	r3, r3, #20
 801123a:	493f      	ldr	r1, [pc, #252]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 801123c:	4313      	orrs	r3, r2
 801123e:	628b      	str	r3, [r1, #40]	; 0x28
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	3b01      	subs	r3, #1
 8011246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	3b01      	subs	r3, #1
 8011250:	025b      	lsls	r3, r3, #9
 8011252:	b29b      	uxth	r3, r3
 8011254:	431a      	orrs	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	3b01      	subs	r3, #1
 801125c:	041b      	lsls	r3, r3, #16
 801125e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011262:	431a      	orrs	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	691b      	ldr	r3, [r3, #16]
 8011268:	3b01      	subs	r3, #1
 801126a:	061b      	lsls	r3, r3, #24
 801126c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011270:	4931      	ldr	r1, [pc, #196]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011272:	4313      	orrs	r3, r2
 8011274:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011276:	4b30      	ldr	r3, [pc, #192]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	695b      	ldr	r3, [r3, #20]
 8011282:	492d      	ldr	r1, [pc, #180]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011284:	4313      	orrs	r3, r2
 8011286:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011288:	4b2b      	ldr	r3, [pc, #172]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 801128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	699b      	ldr	r3, [r3, #24]
 8011294:	4928      	ldr	r1, [pc, #160]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011296:	4313      	orrs	r3, r2
 8011298:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801129a:	4b27      	ldr	r3, [pc, #156]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 801129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801129e:	4a26      	ldr	r2, [pc, #152]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80112a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80112a6:	4b24      	ldr	r3, [pc, #144]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112aa:	4b24      	ldr	r3, [pc, #144]	; (801133c <RCCEx_PLL3_Config+0x160>)
 80112ac:	4013      	ands	r3, r2
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	69d2      	ldr	r2, [r2, #28]
 80112b2:	00d2      	lsls	r2, r2, #3
 80112b4:	4920      	ldr	r1, [pc, #128]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112b6:	4313      	orrs	r3, r2
 80112b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80112ba:	4b1f      	ldr	r3, [pc, #124]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112be:	4a1e      	ldr	r2, [pc, #120]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80112c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d106      	bne.n	80112da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80112cc:	4b1a      	ldr	r3, [pc, #104]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d0:	4a19      	ldr	r2, [pc, #100]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80112d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80112d8:	e00f      	b.n	80112fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	2b01      	cmp	r3, #1
 80112de:	d106      	bne.n	80112ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80112e0:	4b15      	ldr	r3, [pc, #84]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	4a14      	ldr	r2, [pc, #80]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80112ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80112ec:	e005      	b.n	80112fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80112ee:	4b12      	ldr	r3, [pc, #72]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f2:	4a11      	ldr	r2, [pc, #68]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80112fa:	4b0f      	ldr	r3, [pc, #60]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4a0e      	ldr	r2, [pc, #56]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011306:	f7f4 fa09 	bl	800571c <HAL_GetTick>
 801130a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801130c:	e008      	b.n	8011320 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801130e:	f7f4 fa05 	bl	800571c <HAL_GetTick>
 8011312:	4602      	mov	r2, r0
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	2b02      	cmp	r3, #2
 801131a:	d901      	bls.n	8011320 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801131c:	2303      	movs	r3, #3
 801131e:	e006      	b.n	801132e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011320:	4b05      	ldr	r3, [pc, #20]	; (8011338 <RCCEx_PLL3_Config+0x15c>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011328:	2b00      	cmp	r3, #0
 801132a:	d0f0      	beq.n	801130e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801132c:	7bfb      	ldrb	r3, [r7, #15]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	58024400 	.word	0x58024400
 801133c:	ffff0007 	.word	0xffff0007

08011340 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011348:	2301      	movs	r3, #1
 801134a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d071      	beq.n	8011436 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011358:	b2db      	uxtb	r3, r3
 801135a:	2b00      	cmp	r3, #0
 801135c:	d106      	bne.n	801136c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2200      	movs	r2, #0
 8011362:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7f2 fc30 	bl	8003bcc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2202      	movs	r2, #2
 8011370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	f003 0310 	and.w	r3, r3, #16
 801137e:	2b10      	cmp	r3, #16
 8011380:	d050      	beq.n	8011424 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	22ca      	movs	r2, #202	; 0xca
 8011388:	625a      	str	r2, [r3, #36]	; 0x24
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2253      	movs	r2, #83	; 0x53
 8011390:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f000 fa4a 	bl	801182c <RTC_EnterInitMode>
 8011398:	4603      	mov	r3, r0
 801139a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 801139c:	7bfb      	ldrb	r3, [r7, #15]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d124      	bne.n	80113ec <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	6899      	ldr	r1, [r3, #8]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	4b24      	ldr	r3, [pc, #144]	; (8011440 <HAL_RTC_Init+0x100>)
 80113ae:	400b      	ands	r3, r1
 80113b0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	6899      	ldr	r1, [r3, #8]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	685a      	ldr	r2, [r3, #4]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	691b      	ldr	r3, [r3, #16]
 80113c0:	431a      	orrs	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	699b      	ldr	r3, [r3, #24]
 80113c6:	431a      	orrs	r2, r3
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	430a      	orrs	r2, r1
 80113ce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	689b      	ldr	r3, [r3, #8]
 80113d4:	0419      	lsls	r1, r3, #16
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	68da      	ldr	r2, [r3, #12]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	430a      	orrs	r2, r1
 80113e0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 fa56 	bl	8011894 <RTC_ExitInitMode>
 80113e8:	4603      	mov	r3, r0
 80113ea:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d113      	bne.n	801141a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f022 0203 	bic.w	r2, r2, #3
 8011400:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	69da      	ldr	r2, [r3, #28]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	695b      	ldr	r3, [r3, #20]
 8011410:	431a      	orrs	r2, r3
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	430a      	orrs	r2, r1
 8011418:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	22ff      	movs	r2, #255	; 0xff
 8011420:	625a      	str	r2, [r3, #36]	; 0x24
 8011422:	e001      	b.n	8011428 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011424:	2300      	movs	r3, #0
 8011426:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011428:	7bfb      	ldrb	r3, [r7, #15]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d103      	bne.n	8011436 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2201      	movs	r2, #1
 8011432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011436:	7bfb      	ldrb	r3, [r7, #15]
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	ff8fffbf 	.word	0xff8fffbf

08011444 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011444:	b590      	push	{r4, r7, lr}
 8011446:	b087      	sub	sp, #28
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011456:	2b01      	cmp	r3, #1
 8011458:	d101      	bne.n	801145e <HAL_RTC_SetTime+0x1a>
 801145a:	2302      	movs	r3, #2
 801145c:	e089      	b.n	8011572 <HAL_RTC_SetTime+0x12e>
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2201      	movs	r2, #1
 8011462:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2202      	movs	r2, #2
 801146a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	22ca      	movs	r2, #202	; 0xca
 8011474:	625a      	str	r2, [r3, #36]	; 0x24
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2253      	movs	r2, #83	; 0x53
 801147c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f000 f9d4 	bl	801182c <RTC_EnterInitMode>
 8011484:	4603      	mov	r3, r0
 8011486:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011488:	7cfb      	ldrb	r3, [r7, #19]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d161      	bne.n	8011552 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d126      	bne.n	80114e2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	689b      	ldr	r3, [r3, #8]
 801149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d102      	bne.n	80114a8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	2200      	movs	r2, #0
 80114a6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f000 fa2f 	bl	8011910 <RTC_ByteToBcd2>
 80114b2:	4603      	mov	r3, r0
 80114b4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	785b      	ldrb	r3, [r3, #1]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 fa28 	bl	8011910 <RTC_ByteToBcd2>
 80114c0:	4603      	mov	r3, r0
 80114c2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114c4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	789b      	ldrb	r3, [r3, #2]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f000 fa20 	bl	8011910 <RTC_ByteToBcd2>
 80114d0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80114d2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	78db      	ldrb	r3, [r3, #3]
 80114da:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114dc:	4313      	orrs	r3, r2
 80114de:	617b      	str	r3, [r7, #20]
 80114e0:	e018      	b.n	8011514 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d102      	bne.n	80114f6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	2200      	movs	r2, #0
 80114f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	785b      	ldrb	r3, [r3, #1]
 8011500:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011502:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011504:	68ba      	ldr	r2, [r7, #8]
 8011506:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011508:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	78db      	ldrb	r3, [r3, #3]
 801150e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011510:	4313      	orrs	r3, r2
 8011512:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	6979      	ldr	r1, [r7, #20]
 801151a:	4b18      	ldr	r3, [pc, #96]	; (801157c <HAL_RTC_SetTime+0x138>)
 801151c:	400b      	ands	r3, r1
 801151e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	689a      	ldr	r2, [r3, #8]
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801152e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	6899      	ldr	r1, [r3, #8]
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	68da      	ldr	r2, [r3, #12]
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	431a      	orrs	r2, r3
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	430a      	orrs	r2, r1
 8011546:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f000 f9a3 	bl	8011894 <RTC_ExitInitMode>
 801154e:	4603      	mov	r3, r0
 8011550:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	22ff      	movs	r2, #255	; 0xff
 8011558:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801155a:	7cfb      	ldrb	r3, [r7, #19]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d103      	bne.n	8011568 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2201      	movs	r2, #1
 8011564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2200      	movs	r2, #0
 801156c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011570:	7cfb      	ldrb	r3, [r7, #19]
}
 8011572:	4618      	mov	r0, r3
 8011574:	371c      	adds	r7, #28
 8011576:	46bd      	mov	sp, r7
 8011578:	bd90      	pop	{r4, r7, pc}
 801157a:	bf00      	nop
 801157c:	007f7f7f 	.word	0x007f7f7f

08011580 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	691b      	ldr	r3, [r3, #16]
 801159c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	4b22      	ldr	r3, [pc, #136]	; (8011634 <HAL_RTC_GetTime+0xb4>)
 80115ac:	4013      	ands	r3, r2
 80115ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	0c1b      	lsrs	r3, r3, #16
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115ba:	b2da      	uxtb	r2, r3
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	0a1b      	lsrs	r3, r3, #8
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	0d9b      	lsrs	r3, r3, #22
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	f003 0301 	and.w	r3, r3, #1
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d11a      	bne.n	801162a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f000 f9a9 	bl	8011950 <RTC_Bcd2ToByte>
 80115fe:	4603      	mov	r3, r0
 8011600:	461a      	mov	r2, r3
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	785b      	ldrb	r3, [r3, #1]
 801160a:	4618      	mov	r0, r3
 801160c:	f000 f9a0 	bl	8011950 <RTC_Bcd2ToByte>
 8011610:	4603      	mov	r3, r0
 8011612:	461a      	mov	r2, r3
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	789b      	ldrb	r3, [r3, #2]
 801161c:	4618      	mov	r0, r3
 801161e:	f000 f997 	bl	8011950 <RTC_Bcd2ToByte>
 8011622:	4603      	mov	r3, r0
 8011624:	461a      	mov	r2, r3
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	3718      	adds	r7, #24
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	007f7f7f 	.word	0x007f7f7f

08011638 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011638:	b590      	push	{r4, r7, lr}
 801163a:	b087      	sub	sp, #28
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	f893 3020 	ldrb.w	r3, [r3, #32]
 801164a:	2b01      	cmp	r3, #1
 801164c:	d101      	bne.n	8011652 <HAL_RTC_SetDate+0x1a>
 801164e:	2302      	movs	r3, #2
 8011650:	e073      	b.n	801173a <HAL_RTC_SetDate+0x102>
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2201      	movs	r2, #1
 8011656:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2202      	movs	r2, #2
 801165e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d10e      	bne.n	8011686 <HAL_RTC_SetDate+0x4e>
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	785b      	ldrb	r3, [r3, #1]
 801166c:	f003 0310 	and.w	r3, r3, #16
 8011670:	2b00      	cmp	r3, #0
 8011672:	d008      	beq.n	8011686 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	785b      	ldrb	r3, [r3, #1]
 8011678:	f023 0310 	bic.w	r3, r3, #16
 801167c:	b2db      	uxtb	r3, r3
 801167e:	330a      	adds	r3, #10
 8011680:	b2da      	uxtb	r2, r3
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d11c      	bne.n	80116c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	78db      	ldrb	r3, [r3, #3]
 8011690:	4618      	mov	r0, r3
 8011692:	f000 f93d 	bl	8011910 <RTC_ByteToBcd2>
 8011696:	4603      	mov	r3, r0
 8011698:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	785b      	ldrb	r3, [r3, #1]
 801169e:	4618      	mov	r0, r3
 80116a0:	f000 f936 	bl	8011910 <RTC_ByteToBcd2>
 80116a4:	4603      	mov	r3, r0
 80116a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80116a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	789b      	ldrb	r3, [r3, #2]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 f92e 	bl	8011910 <RTC_ByteToBcd2>
 80116b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80116b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80116c0:	4313      	orrs	r3, r2
 80116c2:	617b      	str	r3, [r7, #20]
 80116c4:	e00e      	b.n	80116e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	78db      	ldrb	r3, [r3, #3]
 80116ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	785b      	ldrb	r3, [r3, #1]
 80116d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80116d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80116d4:	68ba      	ldr	r2, [r7, #8]
 80116d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80116d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80116e0:	4313      	orrs	r3, r2
 80116e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	22ca      	movs	r2, #202	; 0xca
 80116ea:	625a      	str	r2, [r3, #36]	; 0x24
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2253      	movs	r2, #83	; 0x53
 80116f2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f000 f899 	bl	801182c <RTC_EnterInitMode>
 80116fa:	4603      	mov	r3, r0
 80116fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80116fe:	7cfb      	ldrb	r3, [r7, #19]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10a      	bne.n	801171a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	6979      	ldr	r1, [r7, #20]
 801170a:	4b0e      	ldr	r3, [pc, #56]	; (8011744 <HAL_RTC_SetDate+0x10c>)
 801170c:	400b      	ands	r3, r1
 801170e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f000 f8bf 	bl	8011894 <RTC_ExitInitMode>
 8011716:	4603      	mov	r3, r0
 8011718:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	22ff      	movs	r2, #255	; 0xff
 8011720:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011722:	7cfb      	ldrb	r3, [r7, #19]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d103      	bne.n	8011730 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2201      	movs	r2, #1
 801172c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2200      	movs	r2, #0
 8011734:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011738:	7cfb      	ldrb	r3, [r7, #19]


}
 801173a:	4618      	mov	r0, r3
 801173c:	371c      	adds	r7, #28
 801173e:	46bd      	mov	sp, r7
 8011740:	bd90      	pop	{r4, r7, pc}
 8011742:	bf00      	nop
 8011744:	00ffff3f 	.word	0x00ffff3f

08011748 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	685a      	ldr	r2, [r3, #4]
 801175a:	4b21      	ldr	r3, [pc, #132]	; (80117e0 <HAL_RTC_GetDate+0x98>)
 801175c:	4013      	ands	r3, r2
 801175e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	0c1b      	lsrs	r3, r3, #16
 8011764:	b2da      	uxtb	r2, r3
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	0a1b      	lsrs	r3, r3, #8
 801176e:	b2db      	uxtb	r3, r3
 8011770:	f003 031f 	and.w	r3, r3, #31
 8011774:	b2da      	uxtb	r2, r3
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	b2db      	uxtb	r3, r3
 801177e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011782:	b2da      	uxtb	r2, r3
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	0b5b      	lsrs	r3, r3, #13
 801178c:	b2db      	uxtb	r3, r3
 801178e:	f003 0307 	and.w	r3, r3, #7
 8011792:	b2da      	uxtb	r2, r3
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d11a      	bne.n	80117d4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	78db      	ldrb	r3, [r3, #3]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 f8d4 	bl	8011950 <RTC_Bcd2ToByte>
 80117a8:	4603      	mov	r3, r0
 80117aa:	461a      	mov	r2, r3
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	785b      	ldrb	r3, [r3, #1]
 80117b4:	4618      	mov	r0, r3
 80117b6:	f000 f8cb 	bl	8011950 <RTC_Bcd2ToByte>
 80117ba:	4603      	mov	r3, r0
 80117bc:	461a      	mov	r2, r3
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	789b      	ldrb	r3, [r3, #2]
 80117c6:	4618      	mov	r0, r3
 80117c8:	f000 f8c2 	bl	8011950 <RTC_Bcd2ToByte>
 80117cc:	4603      	mov	r3, r0
 80117ce:	461a      	mov	r2, r3
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	00ffff3f 	.word	0x00ffff3f

080117e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4a0d      	ldr	r2, [pc, #52]	; (8011828 <HAL_RTC_WaitForSynchro+0x44>)
 80117f2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80117f4:	f7f3 ff92 	bl	800571c <HAL_GetTick>
 80117f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80117fa:	e009      	b.n	8011810 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80117fc:	f7f3 ff8e 	bl	800571c <HAL_GetTick>
 8011800:	4602      	mov	r2, r0
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	1ad3      	subs	r3, r2, r3
 8011806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801180a:	d901      	bls.n	8011810 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 801180c:	2303      	movs	r3, #3
 801180e:	e007      	b.n	8011820 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	f003 0320 	and.w	r3, r3, #32
 801181a:	2b00      	cmp	r3, #0
 801181c:	d0ee      	beq.n	80117fc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 801181e:	2300      	movs	r3, #0
}
 8011820:	4618      	mov	r0, r3
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}
 8011828:	0003ff5f 	.word	0x0003ff5f

0801182c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b084      	sub	sp, #16
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011834:	2300      	movs	r3, #0
 8011836:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011842:	2b00      	cmp	r3, #0
 8011844:	d120      	bne.n	8011888 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801184e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011850:	f7f3 ff64 	bl	800571c <HAL_GetTick>
 8011854:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011856:	e00d      	b.n	8011874 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011858:	f7f3 ff60 	bl	800571c <HAL_GetTick>
 801185c:	4602      	mov	r2, r0
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011866:	d905      	bls.n	8011874 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011868:	2303      	movs	r3, #3
 801186a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2203      	movs	r2, #3
 8011870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801187e:	2b00      	cmp	r3, #0
 8011880:	d102      	bne.n	8011888 <RTC_EnterInitMode+0x5c>
 8011882:	7bfb      	ldrb	r3, [r7, #15]
 8011884:	2b03      	cmp	r3, #3
 8011886:	d1e7      	bne.n	8011858 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011888:	7bfb      	ldrb	r3, [r7, #15]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
	...

08011894 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b084      	sub	sp, #16
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80118a0:	4b1a      	ldr	r3, [pc, #104]	; (801190c <RTC_ExitInitMode+0x78>)
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	4a19      	ldr	r2, [pc, #100]	; (801190c <RTC_ExitInitMode+0x78>)
 80118a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118aa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80118ac:	4b17      	ldr	r3, [pc, #92]	; (801190c <RTC_ExitInitMode+0x78>)
 80118ae:	689b      	ldr	r3, [r3, #8]
 80118b0:	f003 0320 	and.w	r3, r3, #32
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d10c      	bne.n	80118d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7ff ff93 	bl	80117e4 <HAL_RTC_WaitForSynchro>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d01e      	beq.n	8011902 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2203      	movs	r2, #3
 80118c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80118cc:	2303      	movs	r3, #3
 80118ce:	73fb      	strb	r3, [r7, #15]
 80118d0:	e017      	b.n	8011902 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80118d2:	4b0e      	ldr	r3, [pc, #56]	; (801190c <RTC_ExitInitMode+0x78>)
 80118d4:	689b      	ldr	r3, [r3, #8]
 80118d6:	4a0d      	ldr	r2, [pc, #52]	; (801190c <RTC_ExitInitMode+0x78>)
 80118d8:	f023 0320 	bic.w	r3, r3, #32
 80118dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff ff80 	bl	80117e4 <HAL_RTC_WaitForSynchro>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d005      	beq.n	80118f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2203      	movs	r2, #3
 80118ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80118f2:	2303      	movs	r3, #3
 80118f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80118f6:	4b05      	ldr	r3, [pc, #20]	; (801190c <RTC_ExitInitMode+0x78>)
 80118f8:	689b      	ldr	r3, [r3, #8]
 80118fa:	4a04      	ldr	r2, [pc, #16]	; (801190c <RTC_ExitInitMode+0x78>)
 80118fc:	f043 0320 	orr.w	r3, r3, #32
 8011900:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011902:	7bfb      	ldrb	r3, [r7, #15]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	58004000 	.word	0x58004000

08011910 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011910:	b480      	push	{r7}
 8011912:	b085      	sub	sp, #20
 8011914:	af00      	add	r7, sp, #0
 8011916:	4603      	mov	r3, r0
 8011918:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801191a:	2300      	movs	r3, #0
 801191c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 801191e:	79fb      	ldrb	r3, [r7, #7]
 8011920:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011922:	e005      	b.n	8011930 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	3301      	adds	r3, #1
 8011928:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 801192a:	7afb      	ldrb	r3, [r7, #11]
 801192c:	3b0a      	subs	r3, #10
 801192e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011930:	7afb      	ldrb	r3, [r7, #11]
 8011932:	2b09      	cmp	r3, #9
 8011934:	d8f6      	bhi.n	8011924 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	b2db      	uxtb	r3, r3
 801193a:	011b      	lsls	r3, r3, #4
 801193c:	b2da      	uxtb	r2, r3
 801193e:	7afb      	ldrb	r3, [r7, #11]
 8011940:	4313      	orrs	r3, r2
 8011942:	b2db      	uxtb	r3, r3
}
 8011944:	4618      	mov	r0, r3
 8011946:	3714      	adds	r7, #20
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011950:	b480      	push	{r7}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801195a:	79fb      	ldrb	r3, [r7, #7]
 801195c:	091b      	lsrs	r3, r3, #4
 801195e:	b2db      	uxtb	r3, r3
 8011960:	461a      	mov	r2, r3
 8011962:	0092      	lsls	r2, r2, #2
 8011964:	4413      	add	r3, r2
 8011966:	005b      	lsls	r3, r3, #1
 8011968:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801196a:	79fb      	ldrb	r3, [r7, #7]
 801196c:	f003 030f 	and.w	r3, r3, #15
 8011970:	b2da      	uxtb	r2, r3
 8011972:	7bfb      	ldrb	r3, [r7, #15]
 8011974:	4413      	add	r3, r2
 8011976:	b2db      	uxtb	r3, r3
}
 8011978:	4618      	mov	r0, r3
 801197a:	3714      	adds	r7, #20
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr

08011984 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011992:	2301      	movs	r3, #1
 8011994:	e10f      	b.n	8011bb6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2200      	movs	r2, #0
 801199a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a87      	ldr	r2, [pc, #540]	; (8011bc0 <HAL_SPI_Init+0x23c>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d00f      	beq.n	80119c6 <HAL_SPI_Init+0x42>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a86      	ldr	r2, [pc, #536]	; (8011bc4 <HAL_SPI_Init+0x240>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d00a      	beq.n	80119c6 <HAL_SPI_Init+0x42>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a84      	ldr	r2, [pc, #528]	; (8011bc8 <HAL_SPI_Init+0x244>)
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d005      	beq.n	80119c6 <HAL_SPI_Init+0x42>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	2b0f      	cmp	r3, #15
 80119c0:	d901      	bls.n	80119c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80119c2:	2301      	movs	r3, #1
 80119c4:	e0f7      	b.n	8011bb6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 fd60 	bl	801248c <SPI_GetPacketSize>
 80119cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4a7b      	ldr	r2, [pc, #492]	; (8011bc0 <HAL_SPI_Init+0x23c>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d00c      	beq.n	80119f2 <HAL_SPI_Init+0x6e>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4a79      	ldr	r2, [pc, #484]	; (8011bc4 <HAL_SPI_Init+0x240>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d007      	beq.n	80119f2 <HAL_SPI_Init+0x6e>
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4a78      	ldr	r2, [pc, #480]	; (8011bc8 <HAL_SPI_Init+0x244>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d002      	beq.n	80119f2 <HAL_SPI_Init+0x6e>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b08      	cmp	r3, #8
 80119f0:	d811      	bhi.n	8011a16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80119f6:	4a72      	ldr	r2, [pc, #456]	; (8011bc0 <HAL_SPI_Init+0x23c>)
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d009      	beq.n	8011a10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	4a70      	ldr	r2, [pc, #448]	; (8011bc4 <HAL_SPI_Init+0x240>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d004      	beq.n	8011a10 <HAL_SPI_Init+0x8c>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4a6f      	ldr	r2, [pc, #444]	; (8011bc8 <HAL_SPI_Init+0x244>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d104      	bne.n	8011a1a <HAL_SPI_Init+0x96>
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2b10      	cmp	r3, #16
 8011a14:	d901      	bls.n	8011a1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011a16:	2301      	movs	r3, #1
 8011a18:	e0cd      	b.n	8011bb6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d106      	bne.n	8011a34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f7f2 fb50 	bl	80040d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2202      	movs	r2, #2
 8011a38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f022 0201 	bic.w	r2, r2, #1
 8011a4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	689b      	ldr	r3, [r3, #8]
 8011a52:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011a56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	699b      	ldr	r3, [r3, #24]
 8011a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011a60:	d119      	bne.n	8011a96 <HAL_SPI_Init+0x112>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011a6a:	d103      	bne.n	8011a74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d008      	beq.n	8011a86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d10c      	bne.n	8011a96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011a84:	d107      	bne.n	8011a96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011a94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00f      	beq.n	8011ac2 <HAL_SPI_Init+0x13e>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	2b06      	cmp	r3, #6
 8011aa8:	d90b      	bls.n	8011ac2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	430a      	orrs	r2, r1
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	e007      	b.n	8011ad2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011ad0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	69da      	ldr	r2, [r3, #28]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ada:	431a      	orrs	r2, r3
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	431a      	orrs	r2, r3
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ae4:	ea42 0103 	orr.w	r1, r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	68da      	ldr	r2, [r3, #12]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	430a      	orrs	r2, r1
 8011af2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011afc:	431a      	orrs	r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b02:	431a      	orrs	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	699b      	ldr	r3, [r3, #24]
 8011b08:	431a      	orrs	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	691b      	ldr	r3, [r3, #16]
 8011b0e:	431a      	orrs	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	695b      	ldr	r3, [r3, #20]
 8011b14:	431a      	orrs	r2, r3
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6a1b      	ldr	r3, [r3, #32]
 8011b1a:	431a      	orrs	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	431a      	orrs	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b26:	431a      	orrs	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	689b      	ldr	r3, [r3, #8]
 8011b2c:	431a      	orrs	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b32:	ea42 0103 	orr.w	r1, r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	430a      	orrs	r2, r1
 8011b40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d113      	bne.n	8011b72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	689b      	ldr	r3, [r3, #8]
 8011b50:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	689b      	ldr	r3, [r3, #8]
 8011b64:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011b70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	f022 0201 	bic.w	r2, r2, #1
 8011b80:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00a      	beq.n	8011ba4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	430a      	orrs	r2, r1
 8011ba2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2201      	movs	r2, #1
 8011bb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3710      	adds	r7, #16
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	40013000 	.word	0x40013000
 8011bc4:	40003800 	.word	0x40003800
 8011bc8:	40003c00 	.word	0x40003c00

08011bcc <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011be0:	b2db      	uxtb	r3, r3
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d005      	beq.n	8011bf2 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2200      	movs	r2, #0
 8011bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011bee:	2302      	movs	r3, #2
 8011bf0:	e127      	b.n	8011e42 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d002      	beq.n	8011bfe <HAL_SPI_Receive_DMA+0x32>
 8011bf8:	88fb      	ldrh	r3, [r7, #6]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d105      	bne.n	8011c0a <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2200      	movs	r2, #0
 8011c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011c06:	2301      	movs	r3, #1
 8011c08:	e11b      	b.n	8011e42 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d101      	bne.n	8011c18 <HAL_SPI_Receive_DMA+0x4c>
 8011c14:	2302      	movs	r3, #2
 8011c16:	e114      	b.n	8011e42 <HAL_SPI_Receive_DMA+0x276>
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2204      	movs	r2, #4
 8011c24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	88fa      	ldrh	r2, [r7, #6]
 8011c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	88fa      	ldrh	r2, [r7, #6]
 8011c42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2200      	movs	r2, #0
 8011c56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	689b      	ldr	r3, [r3, #8]
 8011c66:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011c6a:	d108      	bne.n	8011c7e <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c7a:	601a      	str	r2, [r3, #0]
 8011c7c:	e009      	b.n	8011c92 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011c90:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	2b0f      	cmp	r3, #15
 8011c98:	d905      	bls.n	8011ca6 <HAL_SPI_Receive_DMA+0xda>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c9e:	699b      	ldr	r3, [r3, #24]
 8011ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ca4:	d10f      	bne.n	8011cc6 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011caa:	2b07      	cmp	r3, #7
 8011cac:	d911      	bls.n	8011cd2 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cb8:	d00b      	beq.n	8011cd2 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cbe:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011cc4:	d005      	beq.n	8011cd2 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011cce:	2301      	movs	r3, #1
 8011cd0:	e0b7      	b.n	8011e42 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	689a      	ldr	r2, [r3, #8]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011ce0:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	68db      	ldr	r3, [r3, #12]
 8011ce6:	2b07      	cmp	r3, #7
 8011ce8:	d820      	bhi.n	8011d2c <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cee:	699b      	ldr	r3, [r3, #24]
 8011cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cf4:	d109      	bne.n	8011d0a <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	3301      	adds	r3, #1
 8011d00:	105b      	asrs	r3, r3, #1
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d0e:	699b      	ldr	r3, [r3, #24]
 8011d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d14:	d11e      	bne.n	8011d54 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	3303      	adds	r3, #3
 8011d20:	109b      	asrs	r3, r3, #2
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011d2a:	e013      	b.n	8011d54 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	2b0f      	cmp	r3, #15
 8011d32:	d80f      	bhi.n	8011d54 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d38:	699b      	ldr	r3, [r3, #24]
 8011d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d3e:	d109      	bne.n	8011d54 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	3301      	adds	r3, #1
 8011d4a:	105b      	asrs	r3, r3, #1
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d58:	4a3c      	ldr	r2, [pc, #240]	; (8011e4c <HAL_SPI_Receive_DMA+0x280>)
 8011d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d60:	4a3b      	ldr	r2, [pc, #236]	; (8011e50 <HAL_SPI_Receive_DMA+0x284>)
 8011d62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d68:	4a3a      	ldr	r2, [pc, #232]	; (8011e54 <HAL_SPI_Receive_DMA+0x288>)
 8011d6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d70:	2200      	movs	r2, #0
 8011d72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	3330      	adds	r3, #48	; 0x30
 8011d7e:	4619      	mov	r1, r3
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d84:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011d8c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011d8e:	f7f6 f9c1 	bl	8008114 <HAL_DMA_Start_IT>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d011      	beq.n	8011dbc <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d9e:	f043 0210 	orr.w	r2, r3, #16
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2201      	movs	r2, #1
 8011dac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011db8:	2301      	movs	r3, #1
 8011dba:	e042      	b.n	8011e42 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dc0:	69db      	ldr	r3, [r3, #28]
 8011dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dc6:	d108      	bne.n	8011dda <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	6859      	ldr	r1, [r3, #4]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	4b21      	ldr	r3, [pc, #132]	; (8011e58 <HAL_SPI_Receive_DMA+0x28c>)
 8011dd4:	400b      	ands	r3, r1
 8011dd6:	6053      	str	r3, [r2, #4]
 8011dd8:	e009      	b.n	8011dee <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	685a      	ldr	r2, [r3, #4]
 8011de0:	4b1d      	ldr	r3, [pc, #116]	; (8011e58 <HAL_SPI_Receive_DMA+0x28c>)
 8011de2:	4013      	ands	r3, r2
 8011de4:	88f9      	ldrh	r1, [r7, #6]
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	6812      	ldr	r2, [r2, #0]
 8011dea:	430b      	orrs	r3, r1
 8011dec:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	689a      	ldr	r2, [r3, #8]
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011dfc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	691a      	ldr	r2, [r3, #16]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011e0c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	f042 0201 	orr.w	r2, r2, #1
 8011e1c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011e26:	d107      	bne.n	8011e38 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	681a      	ldr	r2, [r3, #0]
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011e36:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3710      	adds	r7, #16
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	080122b7 	.word	0x080122b7
 8011e50:	08012271 	.word	0x08012271
 8011e54:	080122d3 	.word	0x080122d3
 8011e58:	ffff0000 	.word	0xffff0000

08011e5c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b08a      	sub	sp, #40	; 0x28
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	691b      	ldr	r3, [r3, #16]
 8011e6a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011e74:	6a3a      	ldr	r2, [r7, #32]
 8011e76:	69fb      	ldr	r3, [r7, #28]
 8011e78:	4013      	ands	r3, r2
 8011e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011e84:	2300      	movs	r3, #0
 8011e86:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011e8e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	3330      	adds	r3, #48	; 0x30
 8011e96:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d010      	beq.n	8011ec4 <HAL_SPI_IRQHandler+0x68>
 8011ea2:	6a3b      	ldr	r3, [r7, #32]
 8011ea4:	f003 0308 	and.w	r3, r3, #8
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00b      	beq.n	8011ec4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	699a      	ldr	r2, [r3, #24]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011eba:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 f9cd 	bl	801225c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011ec2:	e192      	b.n	80121ea <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d113      	bne.n	8011ef6 <HAL_SPI_IRQHandler+0x9a>
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	f003 0320 	and.w	r3, r3, #32
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10e      	bne.n	8011ef6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d009      	beq.n	8011ef6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	4798      	blx	r3
    handled = 1UL;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011ef6:	69bb      	ldr	r3, [r7, #24]
 8011ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d10f      	bne.n	8011f20 <HAL_SPI_IRQHandler+0xc4>
 8011f00:	69bb      	ldr	r3, [r7, #24]
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00a      	beq.n	8011f20 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011f0a:	69bb      	ldr	r3, [r7, #24]
 8011f0c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d105      	bne.n	8011f20 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	4798      	blx	r3
    handled = 1UL;
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	f003 0320 	and.w	r3, r3, #32
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d10f      	bne.n	8011f4a <HAL_SPI_IRQHandler+0xee>
 8011f2a:	69bb      	ldr	r3, [r7, #24]
 8011f2c:	f003 0302 	and.w	r3, r3, #2
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00a      	beq.n	8011f4a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d105      	bne.n	8011f4a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	4798      	blx	r3
    handled = 1UL;
 8011f46:	2301      	movs	r3, #1
 8011f48:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f040 8147 	bne.w	80121e0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	f003 0308 	and.w	r3, r3, #8
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 808b 	beq.w	8012074 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	699a      	ldr	r2, [r3, #24]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f042 0208 	orr.w	r2, r2, #8
 8011f6c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	699a      	ldr	r2, [r3, #24]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f042 0210 	orr.w	r2, r2, #16
 8011f7c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	699a      	ldr	r2, [r3, #24]
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011f8c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	691a      	ldr	r2, [r3, #16]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f022 0208 	bic.w	r2, r2, #8
 8011f9c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	689b      	ldr	r3, [r3, #8]
 8011fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d13d      	bne.n	8012028 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011fac:	e036      	b.n	801201c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	2b0f      	cmp	r3, #15
 8011fb4:	d90b      	bls.n	8011fce <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011fc0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fc6:	1d1a      	adds	r2, r3, #4
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	665a      	str	r2, [r3, #100]	; 0x64
 8011fcc:	e01d      	b.n	801200a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	2b07      	cmp	r3, #7
 8011fd4:	d90b      	bls.n	8011fee <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fda:	68fa      	ldr	r2, [r7, #12]
 8011fdc:	8812      	ldrh	r2, [r2, #0]
 8011fde:	b292      	uxth	r2, r2
 8011fe0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fe6:	1c9a      	adds	r2, r3, #2
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	665a      	str	r2, [r3, #100]	; 0x64
 8011fec:	e00d      	b.n	801200a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ffa:	7812      	ldrb	r2, [r2, #0]
 8011ffc:	b2d2      	uxtb	r2, r2
 8011ffe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012004:	1c5a      	adds	r2, r3, #1
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012010:	b29b      	uxth	r3, r3
 8012012:	3b01      	subs	r3, #1
 8012014:	b29a      	uxth	r2, r3
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012022:	b29b      	uxth	r3, r3
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1c2      	bne.n	8011fae <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 f98f 	bl	801234c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2201      	movs	r2, #1
 8012032:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801203c:	2b00      	cmp	r3, #0
 801203e:	d003      	beq.n	8012048 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 f901 	bl	8012248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012046:	e0d0      	b.n	80121ea <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012048:	7cfb      	ldrb	r3, [r7, #19]
 801204a:	2b05      	cmp	r3, #5
 801204c:	d103      	bne.n	8012056 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f8e6 	bl	8012220 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012054:	e0c6      	b.n	80121e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012056:	7cfb      	ldrb	r3, [r7, #19]
 8012058:	2b04      	cmp	r3, #4
 801205a:	d103      	bne.n	8012064 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 f8d5 	bl	801220c <HAL_SPI_RxCpltCallback>
    return;
 8012062:	e0bf      	b.n	80121e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012064:	7cfb      	ldrb	r3, [r7, #19]
 8012066:	2b03      	cmp	r3, #3
 8012068:	f040 80bc 	bne.w	80121e4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f000 f8c3 	bl	80121f8 <HAL_SPI_TxCpltCallback>
    return;
 8012072:	e0b7      	b.n	80121e4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801207a:	2b00      	cmp	r3, #0
 801207c:	f000 80b5 	beq.w	80121ea <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012086:	2b00      	cmp	r3, #0
 8012088:	d00f      	beq.n	80120aa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012090:	f043 0204 	orr.w	r2, r3, #4
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	699a      	ldr	r2, [r3, #24]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d00f      	beq.n	80120d4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120ba:	f043 0201 	orr.w	r2, r3, #1
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	699a      	ldr	r2, [r3, #24]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80120d2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d00f      	beq.n	80120fe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120e4:	f043 0208 	orr.w	r2, r3, #8
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	699a      	ldr	r2, [r3, #24]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	f003 0320 	and.w	r3, r3, #32
 8012104:	2b00      	cmp	r3, #0
 8012106:	d00f      	beq.n	8012128 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801210e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	699a      	ldr	r2, [r3, #24]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f042 0220 	orr.w	r2, r2, #32
 8012126:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801212e:	2b00      	cmp	r3, #0
 8012130:	d05a      	beq.n	80121e8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f022 0201 	bic.w	r2, r2, #1
 8012140:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	6919      	ldr	r1, [r3, #16]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	4b28      	ldr	r3, [pc, #160]	; (80121f0 <HAL_SPI_IRQHandler+0x394>)
 801214e:	400b      	ands	r3, r1
 8012150:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012158:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801215c:	d138      	bne.n	80121d0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	689a      	ldr	r2, [r3, #8]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801216c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012172:	2b00      	cmp	r3, #0
 8012174:	d013      	beq.n	801219e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801217a:	4a1e      	ldr	r2, [pc, #120]	; (80121f4 <HAL_SPI_IRQHandler+0x398>)
 801217c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012182:	4618      	mov	r0, r3
 8012184:	f7f6 fd4e 	bl	8008c24 <HAL_DMA_Abort_IT>
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d007      	beq.n	801219e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012194:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d020      	beq.n	80121e8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121aa:	4a12      	ldr	r2, [pc, #72]	; (80121f4 <HAL_SPI_IRQHandler+0x398>)
 80121ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7f6 fd36 	bl	8008c24 <HAL_DMA_Abort_IT>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d014      	beq.n	80121e8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80121ce:	e00b      	b.n	80121e8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2201      	movs	r2, #1
 80121d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f000 f835 	bl	8012248 <HAL_SPI_ErrorCallback>
    return;
 80121de:	e003      	b.n	80121e8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80121e0:	bf00      	nop
 80121e2:	e002      	b.n	80121ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80121e4:	bf00      	nop
 80121e6:	e000      	b.n	80121ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80121e8:	bf00      	nop
  }
}
 80121ea:	3728      	adds	r7, #40	; 0x28
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	fffffc94 	.word	0xfffffc94
 80121f4:	08012319 	.word	0x08012319

080121f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012228:	bf00      	nop
 801222a:	370c      	adds	r7, #12
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012234:	b480      	push	{r7}
 8012236:	b083      	sub	sp, #12
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801223c:	bf00      	nop
 801223e:	370c      	adds	r7, #12
 8012240:	46bd      	mov	sp, r7
 8012242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012246:	4770      	bx	lr

08012248 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012250:	bf00      	nop
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr

0801225c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801225c:	b480      	push	{r7}
 801225e:	b083      	sub	sp, #12
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012264:	bf00      	nop
 8012266:	370c      	adds	r7, #12
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr

08012270 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801227c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012284:	b2db      	uxtb	r3, r3
 8012286:	2b07      	cmp	r3, #7
 8012288:	d011      	beq.n	80122ae <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801228e:	69db      	ldr	r3, [r3, #28]
 8012290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012294:	d103      	bne.n	801229e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff ffb8 	bl	801220c <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801229c:	e007      	b.n	80122ae <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	691a      	ldr	r2, [r3, #16]
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f042 0208 	orr.w	r2, r2, #8
 80122ac:	611a      	str	r2, [r3, #16]
}
 80122ae:	bf00      	nop
 80122b0:	3710      	adds	r7, #16
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}

080122b6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80122b6:	b580      	push	{r7, lr}
 80122b8:	b084      	sub	sp, #16
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122c2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f7ff ffb5 	bl	8012234 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80122ca:	bf00      	nop
 80122cc:	3710      	adds	r7, #16
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}

080122d2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b084      	sub	sp, #16
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122de:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7f7 fe1d 	bl	8009f20 <HAL_DMA_GetError>
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b02      	cmp	r3, #2
 80122ea:	d011      	beq.n	8012310 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 f82d 	bl	801234c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122f8:	f043 0210 	orr.w	r2, r3, #16
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2201      	movs	r2, #1
 8012306:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801230a:	68f8      	ldr	r0, [r7, #12]
 801230c:	f7ff ff9c 	bl	8012248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012310:	bf00      	nop
 8012312:	3710      	adds	r7, #16
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012324:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2200      	movs	r2, #0
 801232a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2200      	movs	r2, #0
 8012332:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2201      	movs	r2, #1
 801233a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f7ff ff82 	bl	8012248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012344:	bf00      	nop
 8012346:	3710      	adds	r7, #16
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801234c:	b480      	push	{r7}
 801234e:	b085      	sub	sp, #20
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	695b      	ldr	r3, [r3, #20]
 801235a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	699a      	ldr	r2, [r3, #24]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f042 0208 	orr.w	r2, r2, #8
 801236a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	699a      	ldr	r2, [r3, #24]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f042 0210 	orr.w	r2, r2, #16
 801237a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f022 0201 	bic.w	r2, r2, #1
 801238a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	6919      	ldr	r1, [r3, #16]
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	4b3c      	ldr	r3, [pc, #240]	; (8012488 <SPI_CloseTransfer+0x13c>)
 8012398:	400b      	ands	r3, r1
 801239a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	689a      	ldr	r2, [r3, #8]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80123aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	2b04      	cmp	r3, #4
 80123b6:	d014      	beq.n	80123e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f003 0320 	and.w	r3, r3, #32
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d00f      	beq.n	80123e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	699a      	ldr	r2, [r3, #24]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f042 0220 	orr.w	r2, r2, #32
 80123e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80123e8:	b2db      	uxtb	r3, r3
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d014      	beq.n	8012418 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d00f      	beq.n	8012418 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123fe:	f043 0204 	orr.w	r2, r3, #4
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	699a      	ldr	r2, [r3, #24]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012416:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00f      	beq.n	8012442 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012428:	f043 0201 	orr.w	r2, r3, #1
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	699a      	ldr	r2, [r3, #24]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012440:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00f      	beq.n	801246c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012452:	f043 0208 	orr.w	r2, r3, #8
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	699a      	ldr	r2, [r3, #24]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801246a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2200      	movs	r2, #0
 8012470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 801247c:	bf00      	nop
 801247e:	3714      	adds	r7, #20
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr
 8012488:	fffffc90 	.word	0xfffffc90

0801248c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801248c:	b480      	push	{r7}
 801248e:	b085      	sub	sp, #20
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012498:	095b      	lsrs	r3, r3, #5
 801249a:	3301      	adds	r3, #1
 801249c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	3301      	adds	r3, #1
 80124a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	3307      	adds	r3, #7
 80124aa:	08db      	lsrs	r3, r3, #3
 80124ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3714      	adds	r7, #20
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d101      	bne.n	80124d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80124d0:	2301      	movs	r3, #1
 80124d2:	e049      	b.n	8012568 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d106      	bne.n	80124ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f7f2 faff 	bl	8004aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2202      	movs	r2, #2
 80124f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	3304      	adds	r3, #4
 80124fe:	4619      	mov	r1, r3
 8012500:	4610      	mov	r0, r2
 8012502:	f000 fe7d 	bl	8013200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2201      	movs	r2, #1
 801250a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2201      	movs	r2, #1
 8012512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2201      	movs	r2, #1
 801251a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2201      	movs	r2, #1
 8012522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2201      	movs	r2, #1
 801252a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	2201      	movs	r2, #1
 8012532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2201      	movs	r2, #1
 801253a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2201      	movs	r2, #1
 8012542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2201      	movs	r2, #1
 801254a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2201      	movs	r2, #1
 8012552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2201      	movs	r2, #1
 801255a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2201      	movs	r2, #1
 8012562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012566:	2300      	movs	r3, #0
}
 8012568:	4618      	mov	r0, r3
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012570:	b480      	push	{r7}
 8012572:	b085      	sub	sp, #20
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801257e:	b2db      	uxtb	r3, r3
 8012580:	2b01      	cmp	r3, #1
 8012582:	d001      	beq.n	8012588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012584:	2301      	movs	r3, #1
 8012586:	e054      	b.n	8012632 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2202      	movs	r2, #2
 801258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	68da      	ldr	r2, [r3, #12]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	f042 0201 	orr.w	r2, r2, #1
 801259e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4a26      	ldr	r2, [pc, #152]	; (8012640 <HAL_TIM_Base_Start_IT+0xd0>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d022      	beq.n	80125f0 <HAL_TIM_Base_Start_IT+0x80>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125b2:	d01d      	beq.n	80125f0 <HAL_TIM_Base_Start_IT+0x80>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a22      	ldr	r2, [pc, #136]	; (8012644 <HAL_TIM_Base_Start_IT+0xd4>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d018      	beq.n	80125f0 <HAL_TIM_Base_Start_IT+0x80>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4a21      	ldr	r2, [pc, #132]	; (8012648 <HAL_TIM_Base_Start_IT+0xd8>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d013      	beq.n	80125f0 <HAL_TIM_Base_Start_IT+0x80>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	4a1f      	ldr	r2, [pc, #124]	; (801264c <HAL_TIM_Base_Start_IT+0xdc>)
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d00e      	beq.n	80125f0 <HAL_TIM_Base_Start_IT+0x80>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	4a1e      	ldr	r2, [pc, #120]	; (8012650 <HAL_TIM_Base_Start_IT+0xe0>)
 80125d8:	4293      	cmp	r3, r2
 80125da:	d009      	beq.n	80125f0 <HAL_TIM_Base_Start_IT+0x80>
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	4a1c      	ldr	r2, [pc, #112]	; (8012654 <HAL_TIM_Base_Start_IT+0xe4>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d004      	beq.n	80125f0 <HAL_TIM_Base_Start_IT+0x80>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4a1b      	ldr	r2, [pc, #108]	; (8012658 <HAL_TIM_Base_Start_IT+0xe8>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d115      	bne.n	801261c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	689a      	ldr	r2, [r3, #8]
 80125f6:	4b19      	ldr	r3, [pc, #100]	; (801265c <HAL_TIM_Base_Start_IT+0xec>)
 80125f8:	4013      	ands	r3, r2
 80125fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2b06      	cmp	r3, #6
 8012600:	d015      	beq.n	801262e <HAL_TIM_Base_Start_IT+0xbe>
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012608:	d011      	beq.n	801262e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	681a      	ldr	r2, [r3, #0]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f042 0201 	orr.w	r2, r2, #1
 8012618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801261a:	e008      	b.n	801262e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f042 0201 	orr.w	r2, r2, #1
 801262a:	601a      	str	r2, [r3, #0]
 801262c:	e000      	b.n	8012630 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801262e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012630:	2300      	movs	r3, #0
}
 8012632:	4618      	mov	r0, r3
 8012634:	3714      	adds	r7, #20
 8012636:	46bd      	mov	sp, r7
 8012638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop
 8012640:	40010000 	.word	0x40010000
 8012644:	40000400 	.word	0x40000400
 8012648:	40000800 	.word	0x40000800
 801264c:	40000c00 	.word	0x40000c00
 8012650:	40010400 	.word	0x40010400
 8012654:	40001800 	.word	0x40001800
 8012658:	40014000 	.word	0x40014000
 801265c:	00010007 	.word	0x00010007

08012660 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801266a:	2300      	movs	r3, #0
 801266c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d109      	bne.n	8012688 <HAL_TIM_OC_Start_IT+0x28>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801267a:	b2db      	uxtb	r3, r3
 801267c:	2b01      	cmp	r3, #1
 801267e:	bf14      	ite	ne
 8012680:	2301      	movne	r3, #1
 8012682:	2300      	moveq	r3, #0
 8012684:	b2db      	uxtb	r3, r3
 8012686:	e03c      	b.n	8012702 <HAL_TIM_OC_Start_IT+0xa2>
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b04      	cmp	r3, #4
 801268c:	d109      	bne.n	80126a2 <HAL_TIM_OC_Start_IT+0x42>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012694:	b2db      	uxtb	r3, r3
 8012696:	2b01      	cmp	r3, #1
 8012698:	bf14      	ite	ne
 801269a:	2301      	movne	r3, #1
 801269c:	2300      	moveq	r3, #0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	e02f      	b.n	8012702 <HAL_TIM_OC_Start_IT+0xa2>
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	2b08      	cmp	r3, #8
 80126a6:	d109      	bne.n	80126bc <HAL_TIM_OC_Start_IT+0x5c>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	bf14      	ite	ne
 80126b4:	2301      	movne	r3, #1
 80126b6:	2300      	moveq	r3, #0
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	e022      	b.n	8012702 <HAL_TIM_OC_Start_IT+0xa2>
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	2b0c      	cmp	r3, #12
 80126c0:	d109      	bne.n	80126d6 <HAL_TIM_OC_Start_IT+0x76>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	bf14      	ite	ne
 80126ce:	2301      	movne	r3, #1
 80126d0:	2300      	moveq	r3, #0
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	e015      	b.n	8012702 <HAL_TIM_OC_Start_IT+0xa2>
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	2b10      	cmp	r3, #16
 80126da:	d109      	bne.n	80126f0 <HAL_TIM_OC_Start_IT+0x90>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126e2:	b2db      	uxtb	r3, r3
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	bf14      	ite	ne
 80126e8:	2301      	movne	r3, #1
 80126ea:	2300      	moveq	r3, #0
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	e008      	b.n	8012702 <HAL_TIM_OC_Start_IT+0xa2>
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	bf14      	ite	ne
 80126fc:	2301      	movne	r3, #1
 80126fe:	2300      	moveq	r3, #0
 8012700:	b2db      	uxtb	r3, r3
 8012702:	2b00      	cmp	r3, #0
 8012704:	d001      	beq.n	801270a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012706:	2301      	movs	r3, #1
 8012708:	e0ec      	b.n	80128e4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d104      	bne.n	801271a <HAL_TIM_OC_Start_IT+0xba>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2202      	movs	r2, #2
 8012714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012718:	e023      	b.n	8012762 <HAL_TIM_OC_Start_IT+0x102>
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	2b04      	cmp	r3, #4
 801271e:	d104      	bne.n	801272a <HAL_TIM_OC_Start_IT+0xca>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2202      	movs	r2, #2
 8012724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012728:	e01b      	b.n	8012762 <HAL_TIM_OC_Start_IT+0x102>
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	2b08      	cmp	r3, #8
 801272e:	d104      	bne.n	801273a <HAL_TIM_OC_Start_IT+0xda>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2202      	movs	r2, #2
 8012734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012738:	e013      	b.n	8012762 <HAL_TIM_OC_Start_IT+0x102>
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	2b0c      	cmp	r3, #12
 801273e:	d104      	bne.n	801274a <HAL_TIM_OC_Start_IT+0xea>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2202      	movs	r2, #2
 8012744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012748:	e00b      	b.n	8012762 <HAL_TIM_OC_Start_IT+0x102>
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	2b10      	cmp	r3, #16
 801274e:	d104      	bne.n	801275a <HAL_TIM_OC_Start_IT+0xfa>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2202      	movs	r2, #2
 8012754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012758:	e003      	b.n	8012762 <HAL_TIM_OC_Start_IT+0x102>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2202      	movs	r2, #2
 801275e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	2b0c      	cmp	r3, #12
 8012766:	d841      	bhi.n	80127ec <HAL_TIM_OC_Start_IT+0x18c>
 8012768:	a201      	add	r2, pc, #4	; (adr r2, 8012770 <HAL_TIM_OC_Start_IT+0x110>)
 801276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801276e:	bf00      	nop
 8012770:	080127a5 	.word	0x080127a5
 8012774:	080127ed 	.word	0x080127ed
 8012778:	080127ed 	.word	0x080127ed
 801277c:	080127ed 	.word	0x080127ed
 8012780:	080127b7 	.word	0x080127b7
 8012784:	080127ed 	.word	0x080127ed
 8012788:	080127ed 	.word	0x080127ed
 801278c:	080127ed 	.word	0x080127ed
 8012790:	080127c9 	.word	0x080127c9
 8012794:	080127ed 	.word	0x080127ed
 8012798:	080127ed 	.word	0x080127ed
 801279c:	080127ed 	.word	0x080127ed
 80127a0:	080127db 	.word	0x080127db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	68da      	ldr	r2, [r3, #12]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f042 0202 	orr.w	r2, r2, #2
 80127b2:	60da      	str	r2, [r3, #12]
      break;
 80127b4:	e01d      	b.n	80127f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	68da      	ldr	r2, [r3, #12]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f042 0204 	orr.w	r2, r2, #4
 80127c4:	60da      	str	r2, [r3, #12]
      break;
 80127c6:	e014      	b.n	80127f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	68da      	ldr	r2, [r3, #12]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f042 0208 	orr.w	r2, r2, #8
 80127d6:	60da      	str	r2, [r3, #12]
      break;
 80127d8:	e00b      	b.n	80127f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	68da      	ldr	r2, [r3, #12]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f042 0210 	orr.w	r2, r2, #16
 80127e8:	60da      	str	r2, [r3, #12]
      break;
 80127ea:	e002      	b.n	80127f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80127ec:	2301      	movs	r3, #1
 80127ee:	73fb      	strb	r3, [r7, #15]
      break;
 80127f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80127f2:	7bfb      	ldrb	r3, [r7, #15]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d174      	bne.n	80128e2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	2201      	movs	r2, #1
 80127fe:	6839      	ldr	r1, [r7, #0]
 8012800:	4618      	mov	r0, r3
 8012802:	f001 f917 	bl	8013a34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	4a38      	ldr	r2, [pc, #224]	; (80128ec <HAL_TIM_OC_Start_IT+0x28c>)
 801280c:	4293      	cmp	r3, r2
 801280e:	d013      	beq.n	8012838 <HAL_TIM_OC_Start_IT+0x1d8>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a36      	ldr	r2, [pc, #216]	; (80128f0 <HAL_TIM_OC_Start_IT+0x290>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d00e      	beq.n	8012838 <HAL_TIM_OC_Start_IT+0x1d8>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	4a35      	ldr	r2, [pc, #212]	; (80128f4 <HAL_TIM_OC_Start_IT+0x294>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d009      	beq.n	8012838 <HAL_TIM_OC_Start_IT+0x1d8>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	4a33      	ldr	r2, [pc, #204]	; (80128f8 <HAL_TIM_OC_Start_IT+0x298>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d004      	beq.n	8012838 <HAL_TIM_OC_Start_IT+0x1d8>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4a32      	ldr	r2, [pc, #200]	; (80128fc <HAL_TIM_OC_Start_IT+0x29c>)
 8012834:	4293      	cmp	r3, r2
 8012836:	d101      	bne.n	801283c <HAL_TIM_OC_Start_IT+0x1dc>
 8012838:	2301      	movs	r3, #1
 801283a:	e000      	b.n	801283e <HAL_TIM_OC_Start_IT+0x1de>
 801283c:	2300      	movs	r3, #0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d007      	beq.n	8012852 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a25      	ldr	r2, [pc, #148]	; (80128ec <HAL_TIM_OC_Start_IT+0x28c>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d022      	beq.n	80128a2 <HAL_TIM_OC_Start_IT+0x242>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012864:	d01d      	beq.n	80128a2 <HAL_TIM_OC_Start_IT+0x242>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4a25      	ldr	r2, [pc, #148]	; (8012900 <HAL_TIM_OC_Start_IT+0x2a0>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d018      	beq.n	80128a2 <HAL_TIM_OC_Start_IT+0x242>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4a23      	ldr	r2, [pc, #140]	; (8012904 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d013      	beq.n	80128a2 <HAL_TIM_OC_Start_IT+0x242>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	4a22      	ldr	r2, [pc, #136]	; (8012908 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012880:	4293      	cmp	r3, r2
 8012882:	d00e      	beq.n	80128a2 <HAL_TIM_OC_Start_IT+0x242>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a19      	ldr	r2, [pc, #100]	; (80128f0 <HAL_TIM_OC_Start_IT+0x290>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d009      	beq.n	80128a2 <HAL_TIM_OC_Start_IT+0x242>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4a1e      	ldr	r2, [pc, #120]	; (801290c <HAL_TIM_OC_Start_IT+0x2ac>)
 8012894:	4293      	cmp	r3, r2
 8012896:	d004      	beq.n	80128a2 <HAL_TIM_OC_Start_IT+0x242>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4a15      	ldr	r2, [pc, #84]	; (80128f4 <HAL_TIM_OC_Start_IT+0x294>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d115      	bne.n	80128ce <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	689a      	ldr	r2, [r3, #8]
 80128a8:	4b19      	ldr	r3, [pc, #100]	; (8012910 <HAL_TIM_OC_Start_IT+0x2b0>)
 80128aa:	4013      	ands	r3, r2
 80128ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	2b06      	cmp	r3, #6
 80128b2:	d015      	beq.n	80128e0 <HAL_TIM_OC_Start_IT+0x280>
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128ba:	d011      	beq.n	80128e0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	f042 0201 	orr.w	r2, r2, #1
 80128ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128cc:	e008      	b.n	80128e0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	f042 0201 	orr.w	r2, r2, #1
 80128dc:	601a      	str	r2, [r3, #0]
 80128de:	e000      	b.n	80128e2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80128e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3710      	adds	r7, #16
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	40010000 	.word	0x40010000
 80128f0:	40010400 	.word	0x40010400
 80128f4:	40014000 	.word	0x40014000
 80128f8:	40014400 	.word	0x40014400
 80128fc:	40014800 	.word	0x40014800
 8012900:	40000400 	.word	0x40000400
 8012904:	40000800 	.word	0x40000800
 8012908:	40000c00 	.word	0x40000c00
 801290c:	40001800 	.word	0x40001800
 8012910:	00010007 	.word	0x00010007

08012914 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801291e:	2300      	movs	r3, #0
 8012920:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	2b0c      	cmp	r3, #12
 8012926:	d841      	bhi.n	80129ac <HAL_TIM_OC_Stop_IT+0x98>
 8012928:	a201      	add	r2, pc, #4	; (adr r2, 8012930 <HAL_TIM_OC_Stop_IT+0x1c>)
 801292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801292e:	bf00      	nop
 8012930:	08012965 	.word	0x08012965
 8012934:	080129ad 	.word	0x080129ad
 8012938:	080129ad 	.word	0x080129ad
 801293c:	080129ad 	.word	0x080129ad
 8012940:	08012977 	.word	0x08012977
 8012944:	080129ad 	.word	0x080129ad
 8012948:	080129ad 	.word	0x080129ad
 801294c:	080129ad 	.word	0x080129ad
 8012950:	08012989 	.word	0x08012989
 8012954:	080129ad 	.word	0x080129ad
 8012958:	080129ad 	.word	0x080129ad
 801295c:	080129ad 	.word	0x080129ad
 8012960:	0801299b 	.word	0x0801299b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	68da      	ldr	r2, [r3, #12]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	f022 0202 	bic.w	r2, r2, #2
 8012972:	60da      	str	r2, [r3, #12]
      break;
 8012974:	e01d      	b.n	80129b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	68da      	ldr	r2, [r3, #12]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f022 0204 	bic.w	r2, r2, #4
 8012984:	60da      	str	r2, [r3, #12]
      break;
 8012986:	e014      	b.n	80129b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	68da      	ldr	r2, [r3, #12]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	f022 0208 	bic.w	r2, r2, #8
 8012996:	60da      	str	r2, [r3, #12]
      break;
 8012998:	e00b      	b.n	80129b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	68da      	ldr	r2, [r3, #12]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f022 0210 	bic.w	r2, r2, #16
 80129a8:	60da      	str	r2, [r3, #12]
      break;
 80129aa:	e002      	b.n	80129b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80129ac:	2301      	movs	r3, #1
 80129ae:	73fb      	strb	r3, [r7, #15]
      break;
 80129b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80129b2:	7bfb      	ldrb	r3, [r7, #15]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	f040 8081 	bne.w	8012abc <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2200      	movs	r2, #0
 80129c0:	6839      	ldr	r1, [r7, #0]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f001 f836 	bl	8013a34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a3e      	ldr	r2, [pc, #248]	; (8012ac8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d013      	beq.n	80129fa <HAL_TIM_OC_Stop_IT+0xe6>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4a3d      	ldr	r2, [pc, #244]	; (8012acc <HAL_TIM_OC_Stop_IT+0x1b8>)
 80129d8:	4293      	cmp	r3, r2
 80129da:	d00e      	beq.n	80129fa <HAL_TIM_OC_Stop_IT+0xe6>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	4a3b      	ldr	r2, [pc, #236]	; (8012ad0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d009      	beq.n	80129fa <HAL_TIM_OC_Stop_IT+0xe6>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a3a      	ldr	r2, [pc, #232]	; (8012ad4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d004      	beq.n	80129fa <HAL_TIM_OC_Stop_IT+0xe6>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	4a38      	ldr	r2, [pc, #224]	; (8012ad8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80129f6:	4293      	cmp	r3, r2
 80129f8:	d101      	bne.n	80129fe <HAL_TIM_OC_Stop_IT+0xea>
 80129fa:	2301      	movs	r3, #1
 80129fc:	e000      	b.n	8012a00 <HAL_TIM_OC_Stop_IT+0xec>
 80129fe:	2300      	movs	r3, #0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d017      	beq.n	8012a34 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	6a1a      	ldr	r2, [r3, #32]
 8012a0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8012a0e:	4013      	ands	r3, r2
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d10f      	bne.n	8012a34 <HAL_TIM_OC_Stop_IT+0x120>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	6a1a      	ldr	r2, [r3, #32]
 8012a1a:	f240 4344 	movw	r3, #1092	; 0x444
 8012a1e:	4013      	ands	r3, r2
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d107      	bne.n	8012a34 <HAL_TIM_OC_Stop_IT+0x120>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012a32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	6a1a      	ldr	r2, [r3, #32]
 8012a3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8012a3e:	4013      	ands	r3, r2
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d10f      	bne.n	8012a64 <HAL_TIM_OC_Stop_IT+0x150>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	6a1a      	ldr	r2, [r3, #32]
 8012a4a:	f240 4344 	movw	r3, #1092	; 0x444
 8012a4e:	4013      	ands	r3, r2
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d107      	bne.n	8012a64 <HAL_TIM_OC_Stop_IT+0x150>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f022 0201 	bic.w	r2, r2, #1
 8012a62:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d104      	bne.n	8012a74 <HAL_TIM_OC_Stop_IT+0x160>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2201      	movs	r2, #1
 8012a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012a72:	e023      	b.n	8012abc <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	2b04      	cmp	r3, #4
 8012a78:	d104      	bne.n	8012a84 <HAL_TIM_OC_Stop_IT+0x170>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012a82:	e01b      	b.n	8012abc <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	2b08      	cmp	r3, #8
 8012a88:	d104      	bne.n	8012a94 <HAL_TIM_OC_Stop_IT+0x180>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a92:	e013      	b.n	8012abc <HAL_TIM_OC_Stop_IT+0x1a8>
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	2b0c      	cmp	r3, #12
 8012a98:	d104      	bne.n	8012aa4 <HAL_TIM_OC_Stop_IT+0x190>
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012aa2:	e00b      	b.n	8012abc <HAL_TIM_OC_Stop_IT+0x1a8>
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	2b10      	cmp	r3, #16
 8012aa8:	d104      	bne.n	8012ab4 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2201      	movs	r2, #1
 8012aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012ab2:	e003      	b.n	8012abc <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	40010000 	.word	0x40010000
 8012acc:	40010400 	.word	0x40010400
 8012ad0:	40014000 	.word	0x40014000
 8012ad4:	40014400 	.word	0x40014400
 8012ad8:	40014800 	.word	0x40014800

08012adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d101      	bne.n	8012aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012aea:	2301      	movs	r3, #1
 8012aec:	e049      	b.n	8012b82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d106      	bne.n	8012b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 f841 	bl	8012b8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2202      	movs	r2, #2
 8012b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	3304      	adds	r3, #4
 8012b18:	4619      	mov	r1, r3
 8012b1a:	4610      	mov	r0, r2
 8012b1c:	f000 fb70 	bl	8013200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2201      	movs	r2, #1
 8012b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2201      	movs	r2, #1
 8012b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2201      	movs	r2, #1
 8012b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2201      	movs	r2, #1
 8012b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2201      	movs	r2, #1
 8012b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2201      	movs	r2, #1
 8012b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2201      	movs	r2, #1
 8012b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012b80:	2300      	movs	r3, #0
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	b083      	sub	sp, #12
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012b92:	bf00      	nop
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr

08012b9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b084      	sub	sp, #16
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	691b      	ldr	r3, [r3, #16]
 8012bb4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	f003 0302 	and.w	r3, r3, #2
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d020      	beq.n	8012c02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f003 0302 	and.w	r3, r3, #2
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d01b      	beq.n	8012c02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	f06f 0202 	mvn.w	r2, #2
 8012bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	699b      	ldr	r3, [r3, #24]
 8012be0:	f003 0303 	and.w	r3, r3, #3
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d003      	beq.n	8012bf0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 faeb 	bl	80131c4 <HAL_TIM_IC_CaptureCallback>
 8012bee:	e005      	b.n	8012bfc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f7ef fe09 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f000 faee 	bl	80131d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	f003 0304 	and.w	r3, r3, #4
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d020      	beq.n	8012c4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f003 0304 	and.w	r3, r3, #4
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d01b      	beq.n	8012c4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f06f 0204 	mvn.w	r2, #4
 8012c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2202      	movs	r2, #2
 8012c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	699b      	ldr	r3, [r3, #24]
 8012c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d003      	beq.n	8012c3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f000 fac5 	bl	80131c4 <HAL_TIM_IC_CaptureCallback>
 8012c3a:	e005      	b.n	8012c48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ef fde3 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f000 fac8 	bl	80131d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	f003 0308 	and.w	r3, r3, #8
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d020      	beq.n	8012c9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f003 0308 	and.w	r3, r3, #8
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d01b      	beq.n	8012c9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f06f 0208 	mvn.w	r2, #8
 8012c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2204      	movs	r2, #4
 8012c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	69db      	ldr	r3, [r3, #28]
 8012c78:	f003 0303 	and.w	r3, r3, #3
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d003      	beq.n	8012c88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f000 fa9f 	bl	80131c4 <HAL_TIM_IC_CaptureCallback>
 8012c86:	e005      	b.n	8012c94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7ef fdbd 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f000 faa2 	bl	80131d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2200      	movs	r2, #0
 8012c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	f003 0310 	and.w	r3, r3, #16
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d020      	beq.n	8012ce6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f003 0310 	and.w	r3, r3, #16
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d01b      	beq.n	8012ce6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	f06f 0210 	mvn.w	r2, #16
 8012cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2208      	movs	r2, #8
 8012cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	69db      	ldr	r3, [r3, #28]
 8012cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d003      	beq.n	8012cd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f000 fa79 	bl	80131c4 <HAL_TIM_IC_CaptureCallback>
 8012cd2:	e005      	b.n	8012ce0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f7ef fd97 	bl	8002808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 fa7c 	bl	80131d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	f003 0301 	and.w	r3, r3, #1
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00c      	beq.n	8012d0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f003 0301 	and.w	r3, r3, #1
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d007      	beq.n	8012d0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f06f 0201 	mvn.w	r2, #1
 8012d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f7f0 fcdb 	bl	80036c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d104      	bne.n	8012d1e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d00c      	beq.n	8012d38 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d007      	beq.n	8012d38 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f000 ffba 	bl	8013cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d00c      	beq.n	8012d5c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d007      	beq.n	8012d5c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f000 ffb2 	bl	8013cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d00c      	beq.n	8012d80 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d007      	beq.n	8012d80 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f000 fa36 	bl	80131ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	f003 0320 	and.w	r3, r3, #32
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d00c      	beq.n	8012da4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	f003 0320 	and.w	r3, r3, #32
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d007      	beq.n	8012da4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f06f 0220 	mvn.w	r2, #32
 8012d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f000 ff7a 	bl	8013c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012da4:	bf00      	nop
 8012da6:	3710      	adds	r7, #16
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b086      	sub	sp, #24
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012db8:	2300      	movs	r3, #0
 8012dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d101      	bne.n	8012dca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	e0ff      	b.n	8012fca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2201      	movs	r2, #1
 8012dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2b14      	cmp	r3, #20
 8012dd6:	f200 80f0 	bhi.w	8012fba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012dda:	a201      	add	r2, pc, #4	; (adr r2, 8012de0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de0:	08012e35 	.word	0x08012e35
 8012de4:	08012fbb 	.word	0x08012fbb
 8012de8:	08012fbb 	.word	0x08012fbb
 8012dec:	08012fbb 	.word	0x08012fbb
 8012df0:	08012e75 	.word	0x08012e75
 8012df4:	08012fbb 	.word	0x08012fbb
 8012df8:	08012fbb 	.word	0x08012fbb
 8012dfc:	08012fbb 	.word	0x08012fbb
 8012e00:	08012eb7 	.word	0x08012eb7
 8012e04:	08012fbb 	.word	0x08012fbb
 8012e08:	08012fbb 	.word	0x08012fbb
 8012e0c:	08012fbb 	.word	0x08012fbb
 8012e10:	08012ef7 	.word	0x08012ef7
 8012e14:	08012fbb 	.word	0x08012fbb
 8012e18:	08012fbb 	.word	0x08012fbb
 8012e1c:	08012fbb 	.word	0x08012fbb
 8012e20:	08012f39 	.word	0x08012f39
 8012e24:	08012fbb 	.word	0x08012fbb
 8012e28:	08012fbb 	.word	0x08012fbb
 8012e2c:	08012fbb 	.word	0x08012fbb
 8012e30:	08012f79 	.word	0x08012f79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	68b9      	ldr	r1, [r7, #8]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f000 fa86 	bl	801334c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	699a      	ldr	r2, [r3, #24]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f042 0208 	orr.w	r2, r2, #8
 8012e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	699a      	ldr	r2, [r3, #24]
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f022 0204 	bic.w	r2, r2, #4
 8012e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	6999      	ldr	r1, [r3, #24]
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	691a      	ldr	r2, [r3, #16]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	430a      	orrs	r2, r1
 8012e70:	619a      	str	r2, [r3, #24]
      break;
 8012e72:	e0a5      	b.n	8012fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68b9      	ldr	r1, [r7, #8]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f000 faf6 	bl	801346c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	699a      	ldr	r2, [r3, #24]
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	699a      	ldr	r2, [r3, #24]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	6999      	ldr	r1, [r3, #24]
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	691b      	ldr	r3, [r3, #16]
 8012eaa:	021a      	lsls	r2, r3, #8
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	430a      	orrs	r2, r1
 8012eb2:	619a      	str	r2, [r3, #24]
      break;
 8012eb4:	e084      	b.n	8012fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	68b9      	ldr	r1, [r7, #8]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f000 fb5f 	bl	8013580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	69da      	ldr	r2, [r3, #28]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f042 0208 	orr.w	r2, r2, #8
 8012ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	69da      	ldr	r2, [r3, #28]
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f022 0204 	bic.w	r2, r2, #4
 8012ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	69d9      	ldr	r1, [r3, #28]
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	691a      	ldr	r2, [r3, #16]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	430a      	orrs	r2, r1
 8012ef2:	61da      	str	r2, [r3, #28]
      break;
 8012ef4:	e064      	b.n	8012fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f000 fbc7 	bl	8013690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	69da      	ldr	r2, [r3, #28]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	69da      	ldr	r2, [r3, #28]
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	69d9      	ldr	r1, [r3, #28]
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	691b      	ldr	r3, [r3, #16]
 8012f2c:	021a      	lsls	r2, r3, #8
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	430a      	orrs	r2, r1
 8012f34:	61da      	str	r2, [r3, #28]
      break;
 8012f36:	e043      	b.n	8012fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	68b9      	ldr	r1, [r7, #8]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f000 fc10 	bl	8013764 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f042 0208 	orr.w	r2, r2, #8
 8012f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f022 0204 	bic.w	r2, r2, #4
 8012f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	691a      	ldr	r2, [r3, #16]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	430a      	orrs	r2, r1
 8012f74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012f76:	e023      	b.n	8012fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	68b9      	ldr	r1, [r7, #8]
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f000 fc54 	bl	801382c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	691b      	ldr	r3, [r3, #16]
 8012fae:	021a      	lsls	r2, r3, #8
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	430a      	orrs	r2, r1
 8012fb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012fb8:	e002      	b.n	8012fc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012fba:	2301      	movs	r3, #1
 8012fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8012fbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3718      	adds	r7, #24
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop

08012fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d101      	bne.n	8012ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8012fec:	2302      	movs	r3, #2
 8012fee:	e0dc      	b.n	80131aa <HAL_TIM_ConfigClockSource+0x1d6>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2202      	movs	r2, #2
 8012ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	689b      	ldr	r3, [r3, #8]
 8013006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013008:	68ba      	ldr	r2, [r7, #8]
 801300a:	4b6a      	ldr	r3, [pc, #424]	; (80131b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 801300c:	4013      	ands	r3, r2
 801300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	68ba      	ldr	r2, [r7, #8]
 801301e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4a64      	ldr	r2, [pc, #400]	; (80131b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013026:	4293      	cmp	r3, r2
 8013028:	f000 80a9 	beq.w	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 801302c:	4a62      	ldr	r2, [pc, #392]	; (80131b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801302e:	4293      	cmp	r3, r2
 8013030:	f200 80ae 	bhi.w	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013034:	4a61      	ldr	r2, [pc, #388]	; (80131bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8013036:	4293      	cmp	r3, r2
 8013038:	f000 80a1 	beq.w	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 801303c:	4a5f      	ldr	r2, [pc, #380]	; (80131bc <HAL_TIM_ConfigClockSource+0x1e8>)
 801303e:	4293      	cmp	r3, r2
 8013040:	f200 80a6 	bhi.w	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013044:	4a5e      	ldr	r2, [pc, #376]	; (80131c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013046:	4293      	cmp	r3, r2
 8013048:	f000 8099 	beq.w	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 801304c:	4a5c      	ldr	r2, [pc, #368]	; (80131c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801304e:	4293      	cmp	r3, r2
 8013050:	f200 809e 	bhi.w	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013054:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013058:	f000 8091 	beq.w	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 801305c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013060:	f200 8096 	bhi.w	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013068:	f000 8089 	beq.w	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 801306c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013070:	f200 808e 	bhi.w	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013078:	d03e      	beq.n	80130f8 <HAL_TIM_ConfigClockSource+0x124>
 801307a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801307e:	f200 8087 	bhi.w	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013086:	f000 8086 	beq.w	8013196 <HAL_TIM_ConfigClockSource+0x1c2>
 801308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801308e:	d87f      	bhi.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013090:	2b70      	cmp	r3, #112	; 0x70
 8013092:	d01a      	beq.n	80130ca <HAL_TIM_ConfigClockSource+0xf6>
 8013094:	2b70      	cmp	r3, #112	; 0x70
 8013096:	d87b      	bhi.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 8013098:	2b60      	cmp	r3, #96	; 0x60
 801309a:	d050      	beq.n	801313e <HAL_TIM_ConfigClockSource+0x16a>
 801309c:	2b60      	cmp	r3, #96	; 0x60
 801309e:	d877      	bhi.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 80130a0:	2b50      	cmp	r3, #80	; 0x50
 80130a2:	d03c      	beq.n	801311e <HAL_TIM_ConfigClockSource+0x14a>
 80130a4:	2b50      	cmp	r3, #80	; 0x50
 80130a6:	d873      	bhi.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 80130a8:	2b40      	cmp	r3, #64	; 0x40
 80130aa:	d058      	beq.n	801315e <HAL_TIM_ConfigClockSource+0x18a>
 80130ac:	2b40      	cmp	r3, #64	; 0x40
 80130ae:	d86f      	bhi.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 80130b0:	2b30      	cmp	r3, #48	; 0x30
 80130b2:	d064      	beq.n	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 80130b4:	2b30      	cmp	r3, #48	; 0x30
 80130b6:	d86b      	bhi.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 80130b8:	2b20      	cmp	r3, #32
 80130ba:	d060      	beq.n	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 80130bc:	2b20      	cmp	r3, #32
 80130be:	d867      	bhi.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d05c      	beq.n	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 80130c4:	2b10      	cmp	r3, #16
 80130c6:	d05a      	beq.n	801317e <HAL_TIM_ConfigClockSource+0x1aa>
 80130c8:	e062      	b.n	8013190 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6818      	ldr	r0, [r3, #0]
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	6899      	ldr	r1, [r3, #8]
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	f000 fc8b 	bl	80139f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	689b      	ldr	r3, [r3, #8]
 80130e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80130ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	68ba      	ldr	r2, [r7, #8]
 80130f4:	609a      	str	r2, [r3, #8]
      break;
 80130f6:	e04f      	b.n	8013198 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6818      	ldr	r0, [r3, #0]
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	6899      	ldr	r1, [r3, #8]
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	685a      	ldr	r2, [r3, #4]
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	68db      	ldr	r3, [r3, #12]
 8013108:	f000 fc74 	bl	80139f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	689a      	ldr	r2, [r3, #8]
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801311a:	609a      	str	r2, [r3, #8]
      break;
 801311c:	e03c      	b.n	8013198 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6818      	ldr	r0, [r3, #0]
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	6859      	ldr	r1, [r3, #4]
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	461a      	mov	r2, r3
 801312c:	f000 fbe4 	bl	80138f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	2150      	movs	r1, #80	; 0x50
 8013136:	4618      	mov	r0, r3
 8013138:	f000 fc3e 	bl	80139b8 <TIM_ITRx_SetConfig>
      break;
 801313c:	e02c      	b.n	8013198 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6818      	ldr	r0, [r3, #0]
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	6859      	ldr	r1, [r3, #4]
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	461a      	mov	r2, r3
 801314c:	f000 fc03 	bl	8013956 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2160      	movs	r1, #96	; 0x60
 8013156:	4618      	mov	r0, r3
 8013158:	f000 fc2e 	bl	80139b8 <TIM_ITRx_SetConfig>
      break;
 801315c:	e01c      	b.n	8013198 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6818      	ldr	r0, [r3, #0]
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	6859      	ldr	r1, [r3, #4]
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	461a      	mov	r2, r3
 801316c:	f000 fbc4 	bl	80138f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2140      	movs	r1, #64	; 0x40
 8013176:	4618      	mov	r0, r3
 8013178:	f000 fc1e 	bl	80139b8 <TIM_ITRx_SetConfig>
      break;
 801317c:	e00c      	b.n	8013198 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	4619      	mov	r1, r3
 8013188:	4610      	mov	r0, r2
 801318a:	f000 fc15 	bl	80139b8 <TIM_ITRx_SetConfig>
      break;
 801318e:	e003      	b.n	8013198 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013190:	2301      	movs	r3, #1
 8013192:	73fb      	strb	r3, [r7, #15]
      break;
 8013194:	e000      	b.n	8013198 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2201      	movs	r2, #1
 801319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2200      	movs	r2, #0
 80131a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80131a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	ffceff88 	.word	0xffceff88
 80131b8:	00100040 	.word	0x00100040
 80131bc:	00100030 	.word	0x00100030
 80131c0:	00100020 	.word	0x00100020

080131c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80131cc:	bf00      	nop
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80131e0:	bf00      	nop
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80131f4:	bf00      	nop
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fe:	4770      	bx	lr

08013200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013200:	b480      	push	{r7}
 8013202:	b085      	sub	sp, #20
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
 8013208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4a46      	ldr	r2, [pc, #280]	; (801332c <TIM_Base_SetConfig+0x12c>)
 8013214:	4293      	cmp	r3, r2
 8013216:	d013      	beq.n	8013240 <TIM_Base_SetConfig+0x40>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801321e:	d00f      	beq.n	8013240 <TIM_Base_SetConfig+0x40>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4a43      	ldr	r2, [pc, #268]	; (8013330 <TIM_Base_SetConfig+0x130>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d00b      	beq.n	8013240 <TIM_Base_SetConfig+0x40>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4a42      	ldr	r2, [pc, #264]	; (8013334 <TIM_Base_SetConfig+0x134>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d007      	beq.n	8013240 <TIM_Base_SetConfig+0x40>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4a41      	ldr	r2, [pc, #260]	; (8013338 <TIM_Base_SetConfig+0x138>)
 8013234:	4293      	cmp	r3, r2
 8013236:	d003      	beq.n	8013240 <TIM_Base_SetConfig+0x40>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	4a40      	ldr	r2, [pc, #256]	; (801333c <TIM_Base_SetConfig+0x13c>)
 801323c:	4293      	cmp	r3, r2
 801323e:	d108      	bne.n	8013252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	4313      	orrs	r3, r2
 8013250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	4a35      	ldr	r2, [pc, #212]	; (801332c <TIM_Base_SetConfig+0x12c>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d01f      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013260:	d01b      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	4a32      	ldr	r2, [pc, #200]	; (8013330 <TIM_Base_SetConfig+0x130>)
 8013266:	4293      	cmp	r3, r2
 8013268:	d017      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	4a31      	ldr	r2, [pc, #196]	; (8013334 <TIM_Base_SetConfig+0x134>)
 801326e:	4293      	cmp	r3, r2
 8013270:	d013      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	4a30      	ldr	r2, [pc, #192]	; (8013338 <TIM_Base_SetConfig+0x138>)
 8013276:	4293      	cmp	r3, r2
 8013278:	d00f      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4a2f      	ldr	r2, [pc, #188]	; (801333c <TIM_Base_SetConfig+0x13c>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d00b      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	4a2e      	ldr	r2, [pc, #184]	; (8013340 <TIM_Base_SetConfig+0x140>)
 8013286:	4293      	cmp	r3, r2
 8013288:	d007      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	4a2d      	ldr	r2, [pc, #180]	; (8013344 <TIM_Base_SetConfig+0x144>)
 801328e:	4293      	cmp	r3, r2
 8013290:	d003      	beq.n	801329a <TIM_Base_SetConfig+0x9a>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	4a2c      	ldr	r2, [pc, #176]	; (8013348 <TIM_Base_SetConfig+0x148>)
 8013296:	4293      	cmp	r3, r2
 8013298:	d108      	bne.n	80132ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80132a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	68fa      	ldr	r2, [r7, #12]
 80132a8:	4313      	orrs	r3, r2
 80132aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	695b      	ldr	r3, [r3, #20]
 80132b6:	4313      	orrs	r3, r2
 80132b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	68fa      	ldr	r2, [r7, #12]
 80132be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	689a      	ldr	r2, [r3, #8]
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	4a16      	ldr	r2, [pc, #88]	; (801332c <TIM_Base_SetConfig+0x12c>)
 80132d4:	4293      	cmp	r3, r2
 80132d6:	d00f      	beq.n	80132f8 <TIM_Base_SetConfig+0xf8>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	4a18      	ldr	r2, [pc, #96]	; (801333c <TIM_Base_SetConfig+0x13c>)
 80132dc:	4293      	cmp	r3, r2
 80132de:	d00b      	beq.n	80132f8 <TIM_Base_SetConfig+0xf8>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	4a17      	ldr	r2, [pc, #92]	; (8013340 <TIM_Base_SetConfig+0x140>)
 80132e4:	4293      	cmp	r3, r2
 80132e6:	d007      	beq.n	80132f8 <TIM_Base_SetConfig+0xf8>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4a16      	ldr	r2, [pc, #88]	; (8013344 <TIM_Base_SetConfig+0x144>)
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d003      	beq.n	80132f8 <TIM_Base_SetConfig+0xf8>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	4a15      	ldr	r2, [pc, #84]	; (8013348 <TIM_Base_SetConfig+0x148>)
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d103      	bne.n	8013300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	691a      	ldr	r2, [r3, #16]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2201      	movs	r2, #1
 8013304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	691b      	ldr	r3, [r3, #16]
 801330a:	f003 0301 	and.w	r3, r3, #1
 801330e:	2b01      	cmp	r3, #1
 8013310:	d105      	bne.n	801331e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	691b      	ldr	r3, [r3, #16]
 8013316:	f023 0201 	bic.w	r2, r3, #1
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	611a      	str	r2, [r3, #16]
  }
}
 801331e:	bf00      	nop
 8013320:	3714      	adds	r7, #20
 8013322:	46bd      	mov	sp, r7
 8013324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013328:	4770      	bx	lr
 801332a:	bf00      	nop
 801332c:	40010000 	.word	0x40010000
 8013330:	40000400 	.word	0x40000400
 8013334:	40000800 	.word	0x40000800
 8013338:	40000c00 	.word	0x40000c00
 801333c:	40010400 	.word	0x40010400
 8013340:	40014000 	.word	0x40014000
 8013344:	40014400 	.word	0x40014400
 8013348:	40014800 	.word	0x40014800

0801334c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801334c:	b480      	push	{r7}
 801334e:	b087      	sub	sp, #28
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6a1b      	ldr	r3, [r3, #32]
 801335a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6a1b      	ldr	r3, [r3, #32]
 8013360:	f023 0201 	bic.w	r2, r3, #1
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	699b      	ldr	r3, [r3, #24]
 8013372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013374:	68fa      	ldr	r2, [r7, #12]
 8013376:	4b37      	ldr	r3, [pc, #220]	; (8013454 <TIM_OC1_SetConfig+0x108>)
 8013378:	4013      	ands	r3, r2
 801337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f023 0303 	bic.w	r3, r3, #3
 8013382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	4313      	orrs	r3, r2
 801338c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	f023 0302 	bic.w	r3, r3, #2
 8013394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	689b      	ldr	r3, [r3, #8]
 801339a:	697a      	ldr	r2, [r7, #20]
 801339c:	4313      	orrs	r3, r2
 801339e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	4a2d      	ldr	r2, [pc, #180]	; (8013458 <TIM_OC1_SetConfig+0x10c>)
 80133a4:	4293      	cmp	r3, r2
 80133a6:	d00f      	beq.n	80133c8 <TIM_OC1_SetConfig+0x7c>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	4a2c      	ldr	r2, [pc, #176]	; (801345c <TIM_OC1_SetConfig+0x110>)
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d00b      	beq.n	80133c8 <TIM_OC1_SetConfig+0x7c>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4a2b      	ldr	r2, [pc, #172]	; (8013460 <TIM_OC1_SetConfig+0x114>)
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d007      	beq.n	80133c8 <TIM_OC1_SetConfig+0x7c>
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	4a2a      	ldr	r2, [pc, #168]	; (8013464 <TIM_OC1_SetConfig+0x118>)
 80133bc:	4293      	cmp	r3, r2
 80133be:	d003      	beq.n	80133c8 <TIM_OC1_SetConfig+0x7c>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	4a29      	ldr	r2, [pc, #164]	; (8013468 <TIM_OC1_SetConfig+0x11c>)
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d10c      	bne.n	80133e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	f023 0308 	bic.w	r3, r3, #8
 80133ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	697a      	ldr	r2, [r7, #20]
 80133d6:	4313      	orrs	r3, r2
 80133d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	f023 0304 	bic.w	r3, r3, #4
 80133e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	4a1c      	ldr	r2, [pc, #112]	; (8013458 <TIM_OC1_SetConfig+0x10c>)
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d00f      	beq.n	801340a <TIM_OC1_SetConfig+0xbe>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	4a1b      	ldr	r2, [pc, #108]	; (801345c <TIM_OC1_SetConfig+0x110>)
 80133ee:	4293      	cmp	r3, r2
 80133f0:	d00b      	beq.n	801340a <TIM_OC1_SetConfig+0xbe>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4a1a      	ldr	r2, [pc, #104]	; (8013460 <TIM_OC1_SetConfig+0x114>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d007      	beq.n	801340a <TIM_OC1_SetConfig+0xbe>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	4a19      	ldr	r2, [pc, #100]	; (8013464 <TIM_OC1_SetConfig+0x118>)
 80133fe:	4293      	cmp	r3, r2
 8013400:	d003      	beq.n	801340a <TIM_OC1_SetConfig+0xbe>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	4a18      	ldr	r2, [pc, #96]	; (8013468 <TIM_OC1_SetConfig+0x11c>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d111      	bne.n	801342e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	695b      	ldr	r3, [r3, #20]
 801341e:	693a      	ldr	r2, [r7, #16]
 8013420:	4313      	orrs	r3, r2
 8013422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	699b      	ldr	r3, [r3, #24]
 8013428:	693a      	ldr	r2, [r7, #16]
 801342a:	4313      	orrs	r3, r2
 801342c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	693a      	ldr	r2, [r7, #16]
 8013432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	68fa      	ldr	r2, [r7, #12]
 8013438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	685a      	ldr	r2, [r3, #4]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	697a      	ldr	r2, [r7, #20]
 8013446:	621a      	str	r2, [r3, #32]
}
 8013448:	bf00      	nop
 801344a:	371c      	adds	r7, #28
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr
 8013454:	fffeff8f 	.word	0xfffeff8f
 8013458:	40010000 	.word	0x40010000
 801345c:	40010400 	.word	0x40010400
 8013460:	40014000 	.word	0x40014000
 8013464:	40014400 	.word	0x40014400
 8013468:	40014800 	.word	0x40014800

0801346c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801346c:	b480      	push	{r7}
 801346e:	b087      	sub	sp, #28
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a1b      	ldr	r3, [r3, #32]
 801347a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6a1b      	ldr	r3, [r3, #32]
 8013480:	f023 0210 	bic.w	r2, r3, #16
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	699b      	ldr	r3, [r3, #24]
 8013492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	4b34      	ldr	r3, [pc, #208]	; (8013568 <TIM_OC2_SetConfig+0xfc>)
 8013498:	4013      	ands	r3, r2
 801349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80134a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	021b      	lsls	r3, r3, #8
 80134aa:	68fa      	ldr	r2, [r7, #12]
 80134ac:	4313      	orrs	r3, r2
 80134ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	f023 0320 	bic.w	r3, r3, #32
 80134b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	011b      	lsls	r3, r3, #4
 80134be:	697a      	ldr	r2, [r7, #20]
 80134c0:	4313      	orrs	r3, r2
 80134c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	4a29      	ldr	r2, [pc, #164]	; (801356c <TIM_OC2_SetConfig+0x100>)
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d003      	beq.n	80134d4 <TIM_OC2_SetConfig+0x68>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4a28      	ldr	r2, [pc, #160]	; (8013570 <TIM_OC2_SetConfig+0x104>)
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d10d      	bne.n	80134f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80134da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	011b      	lsls	r3, r3, #4
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	4313      	orrs	r3, r2
 80134e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	4a1e      	ldr	r2, [pc, #120]	; (801356c <TIM_OC2_SetConfig+0x100>)
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d00f      	beq.n	8013518 <TIM_OC2_SetConfig+0xac>
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	4a1d      	ldr	r2, [pc, #116]	; (8013570 <TIM_OC2_SetConfig+0x104>)
 80134fc:	4293      	cmp	r3, r2
 80134fe:	d00b      	beq.n	8013518 <TIM_OC2_SetConfig+0xac>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	4a1c      	ldr	r2, [pc, #112]	; (8013574 <TIM_OC2_SetConfig+0x108>)
 8013504:	4293      	cmp	r3, r2
 8013506:	d007      	beq.n	8013518 <TIM_OC2_SetConfig+0xac>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4a1b      	ldr	r2, [pc, #108]	; (8013578 <TIM_OC2_SetConfig+0x10c>)
 801350c:	4293      	cmp	r3, r2
 801350e:	d003      	beq.n	8013518 <TIM_OC2_SetConfig+0xac>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	4a1a      	ldr	r2, [pc, #104]	; (801357c <TIM_OC2_SetConfig+0x110>)
 8013514:	4293      	cmp	r3, r2
 8013516:	d113      	bne.n	8013540 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801351e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	695b      	ldr	r3, [r3, #20]
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	693a      	ldr	r2, [r7, #16]
 8013530:	4313      	orrs	r3, r2
 8013532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	699b      	ldr	r3, [r3, #24]
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	693a      	ldr	r2, [r7, #16]
 801353c:	4313      	orrs	r3, r2
 801353e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	693a      	ldr	r2, [r7, #16]
 8013544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	685a      	ldr	r2, [r3, #4]
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	621a      	str	r2, [r3, #32]
}
 801355a:	bf00      	nop
 801355c:	371c      	adds	r7, #28
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	feff8fff 	.word	0xfeff8fff
 801356c:	40010000 	.word	0x40010000
 8013570:	40010400 	.word	0x40010400
 8013574:	40014000 	.word	0x40014000
 8013578:	40014400 	.word	0x40014400
 801357c:	40014800 	.word	0x40014800

08013580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013580:	b480      	push	{r7}
 8013582:	b087      	sub	sp, #28
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6a1b      	ldr	r3, [r3, #32]
 801358e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6a1b      	ldr	r3, [r3, #32]
 8013594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	69db      	ldr	r3, [r3, #28]
 80135a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	4b33      	ldr	r3, [pc, #204]	; (8013678 <TIM_OC3_SetConfig+0xf8>)
 80135ac:	4013      	ands	r3, r2
 80135ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f023 0303 	bic.w	r3, r3, #3
 80135b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	68fa      	ldr	r2, [r7, #12]
 80135be:	4313      	orrs	r3, r2
 80135c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80135c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	689b      	ldr	r3, [r3, #8]
 80135ce:	021b      	lsls	r3, r3, #8
 80135d0:	697a      	ldr	r2, [r7, #20]
 80135d2:	4313      	orrs	r3, r2
 80135d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4a28      	ldr	r2, [pc, #160]	; (801367c <TIM_OC3_SetConfig+0xfc>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d003      	beq.n	80135e6 <TIM_OC3_SetConfig+0x66>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4a27      	ldr	r2, [pc, #156]	; (8013680 <TIM_OC3_SetConfig+0x100>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d10d      	bne.n	8013602 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80135ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	021b      	lsls	r3, r3, #8
 80135f4:	697a      	ldr	r2, [r7, #20]
 80135f6:	4313      	orrs	r3, r2
 80135f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4a1d      	ldr	r2, [pc, #116]	; (801367c <TIM_OC3_SetConfig+0xfc>)
 8013606:	4293      	cmp	r3, r2
 8013608:	d00f      	beq.n	801362a <TIM_OC3_SetConfig+0xaa>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4a1c      	ldr	r2, [pc, #112]	; (8013680 <TIM_OC3_SetConfig+0x100>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d00b      	beq.n	801362a <TIM_OC3_SetConfig+0xaa>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4a1b      	ldr	r2, [pc, #108]	; (8013684 <TIM_OC3_SetConfig+0x104>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d007      	beq.n	801362a <TIM_OC3_SetConfig+0xaa>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4a1a      	ldr	r2, [pc, #104]	; (8013688 <TIM_OC3_SetConfig+0x108>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d003      	beq.n	801362a <TIM_OC3_SetConfig+0xaa>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4a19      	ldr	r2, [pc, #100]	; (801368c <TIM_OC3_SetConfig+0x10c>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d113      	bne.n	8013652 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801362a:	693b      	ldr	r3, [r7, #16]
 801362c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	695b      	ldr	r3, [r3, #20]
 801363e:	011b      	lsls	r3, r3, #4
 8013640:	693a      	ldr	r2, [r7, #16]
 8013642:	4313      	orrs	r3, r2
 8013644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	699b      	ldr	r3, [r3, #24]
 801364a:	011b      	lsls	r3, r3, #4
 801364c:	693a      	ldr	r2, [r7, #16]
 801364e:	4313      	orrs	r3, r2
 8013650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	693a      	ldr	r2, [r7, #16]
 8013656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	685a      	ldr	r2, [r3, #4]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	697a      	ldr	r2, [r7, #20]
 801366a:	621a      	str	r2, [r3, #32]
}
 801366c:	bf00      	nop
 801366e:	371c      	adds	r7, #28
 8013670:	46bd      	mov	sp, r7
 8013672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013676:	4770      	bx	lr
 8013678:	fffeff8f 	.word	0xfffeff8f
 801367c:	40010000 	.word	0x40010000
 8013680:	40010400 	.word	0x40010400
 8013684:	40014000 	.word	0x40014000
 8013688:	40014400 	.word	0x40014400
 801368c:	40014800 	.word	0x40014800

08013690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013690:	b480      	push	{r7}
 8013692:	b087      	sub	sp, #28
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6a1b      	ldr	r3, [r3, #32]
 801369e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6a1b      	ldr	r3, [r3, #32]
 80136a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	69db      	ldr	r3, [r3, #28]
 80136b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80136b8:	68fa      	ldr	r2, [r7, #12]
 80136ba:	4b24      	ldr	r3, [pc, #144]	; (801374c <TIM_OC4_SetConfig+0xbc>)
 80136bc:	4013      	ands	r3, r2
 80136be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80136c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	021b      	lsls	r3, r3, #8
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	4313      	orrs	r3, r2
 80136d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80136da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	031b      	lsls	r3, r3, #12
 80136e2:	693a      	ldr	r2, [r7, #16]
 80136e4:	4313      	orrs	r3, r2
 80136e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4a19      	ldr	r2, [pc, #100]	; (8013750 <TIM_OC4_SetConfig+0xc0>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d00f      	beq.n	8013710 <TIM_OC4_SetConfig+0x80>
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	4a18      	ldr	r2, [pc, #96]	; (8013754 <TIM_OC4_SetConfig+0xc4>)
 80136f4:	4293      	cmp	r3, r2
 80136f6:	d00b      	beq.n	8013710 <TIM_OC4_SetConfig+0x80>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	4a17      	ldr	r2, [pc, #92]	; (8013758 <TIM_OC4_SetConfig+0xc8>)
 80136fc:	4293      	cmp	r3, r2
 80136fe:	d007      	beq.n	8013710 <TIM_OC4_SetConfig+0x80>
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	4a16      	ldr	r2, [pc, #88]	; (801375c <TIM_OC4_SetConfig+0xcc>)
 8013704:	4293      	cmp	r3, r2
 8013706:	d003      	beq.n	8013710 <TIM_OC4_SetConfig+0x80>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	4a15      	ldr	r2, [pc, #84]	; (8013760 <TIM_OC4_SetConfig+0xd0>)
 801370c:	4293      	cmp	r3, r2
 801370e:	d109      	bne.n	8013724 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	695b      	ldr	r3, [r3, #20]
 801371c:	019b      	lsls	r3, r3, #6
 801371e:	697a      	ldr	r2, [r7, #20]
 8013720:	4313      	orrs	r3, r2
 8013722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	697a      	ldr	r2, [r7, #20]
 8013728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	685a      	ldr	r2, [r3, #4]
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	693a      	ldr	r2, [r7, #16]
 801373c:	621a      	str	r2, [r3, #32]
}
 801373e:	bf00      	nop
 8013740:	371c      	adds	r7, #28
 8013742:	46bd      	mov	sp, r7
 8013744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013748:	4770      	bx	lr
 801374a:	bf00      	nop
 801374c:	feff8fff 	.word	0xfeff8fff
 8013750:	40010000 	.word	0x40010000
 8013754:	40010400 	.word	0x40010400
 8013758:	40014000 	.word	0x40014000
 801375c:	40014400 	.word	0x40014400
 8013760:	40014800 	.word	0x40014800

08013764 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013764:	b480      	push	{r7}
 8013766:	b087      	sub	sp, #28
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6a1b      	ldr	r3, [r3, #32]
 8013772:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6a1b      	ldr	r3, [r3, #32]
 8013778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	4b21      	ldr	r3, [pc, #132]	; (8013814 <TIM_OC5_SetConfig+0xb0>)
 8013790:	4013      	ands	r3, r2
 8013792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	68fa      	ldr	r2, [r7, #12]
 801379a:	4313      	orrs	r3, r2
 801379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801379e:	693b      	ldr	r3, [r7, #16]
 80137a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80137a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	689b      	ldr	r3, [r3, #8]
 80137aa:	041b      	lsls	r3, r3, #16
 80137ac:	693a      	ldr	r2, [r7, #16]
 80137ae:	4313      	orrs	r3, r2
 80137b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4a18      	ldr	r2, [pc, #96]	; (8013818 <TIM_OC5_SetConfig+0xb4>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d00f      	beq.n	80137da <TIM_OC5_SetConfig+0x76>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	4a17      	ldr	r2, [pc, #92]	; (801381c <TIM_OC5_SetConfig+0xb8>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d00b      	beq.n	80137da <TIM_OC5_SetConfig+0x76>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	4a16      	ldr	r2, [pc, #88]	; (8013820 <TIM_OC5_SetConfig+0xbc>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	d007      	beq.n	80137da <TIM_OC5_SetConfig+0x76>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4a15      	ldr	r2, [pc, #84]	; (8013824 <TIM_OC5_SetConfig+0xc0>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d003      	beq.n	80137da <TIM_OC5_SetConfig+0x76>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4a14      	ldr	r2, [pc, #80]	; (8013828 <TIM_OC5_SetConfig+0xc4>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d109      	bne.n	80137ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80137e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	695b      	ldr	r3, [r3, #20]
 80137e6:	021b      	lsls	r3, r3, #8
 80137e8:	697a      	ldr	r2, [r7, #20]
 80137ea:	4313      	orrs	r3, r2
 80137ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	697a      	ldr	r2, [r7, #20]
 80137f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	68fa      	ldr	r2, [r7, #12]
 80137f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	685a      	ldr	r2, [r3, #4]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	693a      	ldr	r2, [r7, #16]
 8013806:	621a      	str	r2, [r3, #32]
}
 8013808:	bf00      	nop
 801380a:	371c      	adds	r7, #28
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr
 8013814:	fffeff8f 	.word	0xfffeff8f
 8013818:	40010000 	.word	0x40010000
 801381c:	40010400 	.word	0x40010400
 8013820:	40014000 	.word	0x40014000
 8013824:	40014400 	.word	0x40014400
 8013828:	40014800 	.word	0x40014800

0801382c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801382c:	b480      	push	{r7}
 801382e:	b087      	sub	sp, #28
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6a1b      	ldr	r3, [r3, #32]
 801383a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6a1b      	ldr	r3, [r3, #32]
 8013840:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	4b22      	ldr	r3, [pc, #136]	; (80138e0 <TIM_OC6_SetConfig+0xb4>)
 8013858:	4013      	ands	r3, r2
 801385a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	021b      	lsls	r3, r3, #8
 8013862:	68fa      	ldr	r2, [r7, #12]
 8013864:	4313      	orrs	r3, r2
 8013866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801386e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	689b      	ldr	r3, [r3, #8]
 8013874:	051b      	lsls	r3, r3, #20
 8013876:	693a      	ldr	r2, [r7, #16]
 8013878:	4313      	orrs	r3, r2
 801387a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	4a19      	ldr	r2, [pc, #100]	; (80138e4 <TIM_OC6_SetConfig+0xb8>)
 8013880:	4293      	cmp	r3, r2
 8013882:	d00f      	beq.n	80138a4 <TIM_OC6_SetConfig+0x78>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	4a18      	ldr	r2, [pc, #96]	; (80138e8 <TIM_OC6_SetConfig+0xbc>)
 8013888:	4293      	cmp	r3, r2
 801388a:	d00b      	beq.n	80138a4 <TIM_OC6_SetConfig+0x78>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	4a17      	ldr	r2, [pc, #92]	; (80138ec <TIM_OC6_SetConfig+0xc0>)
 8013890:	4293      	cmp	r3, r2
 8013892:	d007      	beq.n	80138a4 <TIM_OC6_SetConfig+0x78>
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	4a16      	ldr	r2, [pc, #88]	; (80138f0 <TIM_OC6_SetConfig+0xc4>)
 8013898:	4293      	cmp	r3, r2
 801389a:	d003      	beq.n	80138a4 <TIM_OC6_SetConfig+0x78>
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	4a15      	ldr	r2, [pc, #84]	; (80138f4 <TIM_OC6_SetConfig+0xc8>)
 80138a0:	4293      	cmp	r3, r2
 80138a2:	d109      	bne.n	80138b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80138aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	695b      	ldr	r3, [r3, #20]
 80138b0:	029b      	lsls	r3, r3, #10
 80138b2:	697a      	ldr	r2, [r7, #20]
 80138b4:	4313      	orrs	r3, r2
 80138b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	697a      	ldr	r2, [r7, #20]
 80138bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	68fa      	ldr	r2, [r7, #12]
 80138c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	685a      	ldr	r2, [r3, #4]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	693a      	ldr	r2, [r7, #16]
 80138d0:	621a      	str	r2, [r3, #32]
}
 80138d2:	bf00      	nop
 80138d4:	371c      	adds	r7, #28
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop
 80138e0:	feff8fff 	.word	0xfeff8fff
 80138e4:	40010000 	.word	0x40010000
 80138e8:	40010400 	.word	0x40010400
 80138ec:	40014000 	.word	0x40014000
 80138f0:	40014400 	.word	0x40014400
 80138f4:	40014800 	.word	0x40014800

080138f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b087      	sub	sp, #28
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	60b9      	str	r1, [r7, #8]
 8013902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	6a1b      	ldr	r3, [r3, #32]
 8013908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	6a1b      	ldr	r3, [r3, #32]
 801390e:	f023 0201 	bic.w	r2, r3, #1
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	699b      	ldr	r3, [r3, #24]
 801391a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	011b      	lsls	r3, r3, #4
 8013928:	693a      	ldr	r2, [r7, #16]
 801392a:	4313      	orrs	r3, r2
 801392c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	f023 030a 	bic.w	r3, r3, #10
 8013934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013936:	697a      	ldr	r2, [r7, #20]
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	4313      	orrs	r3, r2
 801393c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	693a      	ldr	r2, [r7, #16]
 8013942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	621a      	str	r2, [r3, #32]
}
 801394a:	bf00      	nop
 801394c:	371c      	adds	r7, #28
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr

08013956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013956:	b480      	push	{r7}
 8013958:	b087      	sub	sp, #28
 801395a:	af00      	add	r7, sp, #0
 801395c:	60f8      	str	r0, [r7, #12]
 801395e:	60b9      	str	r1, [r7, #8]
 8013960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	6a1b      	ldr	r3, [r3, #32]
 8013966:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6a1b      	ldr	r3, [r3, #32]
 801396c:	f023 0210 	bic.w	r2, r3, #16
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	699b      	ldr	r3, [r3, #24]
 8013978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	031b      	lsls	r3, r3, #12
 8013986:	693a      	ldr	r2, [r7, #16]
 8013988:	4313      	orrs	r3, r2
 801398a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013992:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	011b      	lsls	r3, r3, #4
 8013998:	697a      	ldr	r2, [r7, #20]
 801399a:	4313      	orrs	r3, r2
 801399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	693a      	ldr	r2, [r7, #16]
 80139a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	697a      	ldr	r2, [r7, #20]
 80139a8:	621a      	str	r2, [r3, #32]
}
 80139aa:	bf00      	nop
 80139ac:	371c      	adds	r7, #28
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
	...

080139b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80139b8:	b480      	push	{r7}
 80139ba:	b085      	sub	sp, #20
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80139c8:	68fa      	ldr	r2, [r7, #12]
 80139ca:	4b09      	ldr	r3, [pc, #36]	; (80139f0 <TIM_ITRx_SetConfig+0x38>)
 80139cc:	4013      	ands	r3, r2
 80139ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80139d0:	683a      	ldr	r2, [r7, #0]
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	f043 0307 	orr.w	r3, r3, #7
 80139da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	609a      	str	r2, [r3, #8]
}
 80139e2:	bf00      	nop
 80139e4:	3714      	adds	r7, #20
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	ffcfff8f 	.word	0xffcfff8f

080139f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b087      	sub	sp, #28
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	60f8      	str	r0, [r7, #12]
 80139fc:	60b9      	str	r1, [r7, #8]
 80139fe:	607a      	str	r2, [r7, #4]
 8013a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	689b      	ldr	r3, [r3, #8]
 8013a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	021a      	lsls	r2, r3, #8
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	431a      	orrs	r2, r3
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	4313      	orrs	r3, r2
 8013a1c:	697a      	ldr	r2, [r7, #20]
 8013a1e:	4313      	orrs	r3, r2
 8013a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	697a      	ldr	r2, [r7, #20]
 8013a26:	609a      	str	r2, [r3, #8]
}
 8013a28:	bf00      	nop
 8013a2a:	371c      	adds	r7, #28
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr

08013a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b087      	sub	sp, #28
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	f003 031f 	and.w	r3, r3, #31
 8013a46:	2201      	movs	r2, #1
 8013a48:	fa02 f303 	lsl.w	r3, r2, r3
 8013a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	6a1a      	ldr	r2, [r3, #32]
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	43db      	mvns	r3, r3
 8013a56:	401a      	ands	r2, r3
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6a1a      	ldr	r2, [r3, #32]
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	f003 031f 	and.w	r3, r3, #31
 8013a66:	6879      	ldr	r1, [r7, #4]
 8013a68:	fa01 f303 	lsl.w	r3, r1, r3
 8013a6c:	431a      	orrs	r2, r3
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	621a      	str	r2, [r3, #32]
}
 8013a72:	bf00      	nop
 8013a74:	371c      	adds	r7, #28
 8013a76:	46bd      	mov	sp, r7
 8013a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7c:	4770      	bx	lr
	...

08013a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013a80:	b480      	push	{r7}
 8013a82:	b085      	sub	sp, #20
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013a90:	2b01      	cmp	r3, #1
 8013a92:	d101      	bne.n	8013a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013a94:	2302      	movs	r3, #2
 8013a96:	e06d      	b.n	8013b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2202      	movs	r2, #2
 8013aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	4a30      	ldr	r2, [pc, #192]	; (8013b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	d004      	beq.n	8013acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	4a2f      	ldr	r2, [pc, #188]	; (8013b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d108      	bne.n	8013ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	68fa      	ldr	r2, [r7, #12]
 8013ada:	4313      	orrs	r3, r2
 8013adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	68fa      	ldr	r2, [r7, #12]
 8013aec:	4313      	orrs	r3, r2
 8013aee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	68fa      	ldr	r2, [r7, #12]
 8013af6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	4a20      	ldr	r2, [pc, #128]	; (8013b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d022      	beq.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b0a:	d01d      	beq.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	4a1d      	ldr	r2, [pc, #116]	; (8013b88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d018      	beq.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	4a1c      	ldr	r2, [pc, #112]	; (8013b8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d013      	beq.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4a1a      	ldr	r2, [pc, #104]	; (8013b90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d00e      	beq.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	4a15      	ldr	r2, [pc, #84]	; (8013b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d009      	beq.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4a16      	ldr	r2, [pc, #88]	; (8013b94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d004      	beq.n	8013b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	4a15      	ldr	r2, [pc, #84]	; (8013b98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d10c      	bne.n	8013b62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	689b      	ldr	r3, [r3, #8]
 8013b54:	68ba      	ldr	r2, [r7, #8]
 8013b56:	4313      	orrs	r3, r2
 8013b58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	68ba      	ldr	r2, [r7, #8]
 8013b60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2201      	movs	r2, #1
 8013b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013b72:	2300      	movs	r3, #0
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3714      	adds	r7, #20
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr
 8013b80:	40010000 	.word	0x40010000
 8013b84:	40010400 	.word	0x40010400
 8013b88:	40000400 	.word	0x40000400
 8013b8c:	40000800 	.word	0x40000800
 8013b90:	40000c00 	.word	0x40000c00
 8013b94:	40001800 	.word	0x40001800
 8013b98:	40014000 	.word	0x40014000

08013b9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b085      	sub	sp, #20
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d101      	bne.n	8013bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013bb4:	2302      	movs	r3, #2
 8013bb6:	e065      	b.n	8013c84 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	4313      	orrs	r3, r2
 8013bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	4313      	orrs	r3, r2
 8013be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	4313      	orrs	r3, r2
 8013bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	691b      	ldr	r3, [r3, #16]
 8013c02:	4313      	orrs	r3, r2
 8013c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	695b      	ldr	r3, [r3, #20]
 8013c10:	4313      	orrs	r3, r2
 8013c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c1e:	4313      	orrs	r3, r2
 8013c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	699b      	ldr	r3, [r3, #24]
 8013c2c:	041b      	lsls	r3, r3, #16
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	4a16      	ldr	r2, [pc, #88]	; (8013c90 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013c38:	4293      	cmp	r3, r2
 8013c3a:	d004      	beq.n	8013c46 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4a14      	ldr	r2, [pc, #80]	; (8013c94 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013c42:	4293      	cmp	r3, r2
 8013c44:	d115      	bne.n	8013c72 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c50:	051b      	lsls	r3, r3, #20
 8013c52:	4313      	orrs	r3, r2
 8013c54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	69db      	ldr	r3, [r3, #28]
 8013c60:	4313      	orrs	r3, r2
 8013c62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	6a1b      	ldr	r3, [r3, #32]
 8013c6e:	4313      	orrs	r3, r2
 8013c70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013c82:	2300      	movs	r3, #0
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3714      	adds	r7, #20
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8e:	4770      	bx	lr
 8013c90:	40010000 	.word	0x40010000
 8013c94:	40010400 	.word	0x40010400

08013c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b083      	sub	sp, #12
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013ca0:	bf00      	nop
 8013ca2:	370c      	adds	r7, #12
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr

08013cac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013cb4:	bf00      	nop
 8013cb6:	370c      	adds	r7, #12
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr

08013cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b083      	sub	sp, #12
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013cc8:	bf00      	nop
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d101      	bne.n	8013ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	e042      	b.n	8013d6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d106      	bne.n	8013cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7f1 f8c1 	bl	8004e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2224      	movs	r2, #36	; 0x24
 8013d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	f022 0201 	bic.w	r2, r2, #1
 8013d14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d002      	beq.n	8013d24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f001 fbc2 	bl	80154a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 fe57 	bl	80149d8 <UART_SetConfig>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	d101      	bne.n	8013d34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013d30:	2301      	movs	r3, #1
 8013d32:	e01b      	b.n	8013d6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	685a      	ldr	r2, [r3, #4]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	689a      	ldr	r2, [r3, #8]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f042 0201 	orr.w	r2, r2, #1
 8013d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f001 fc41 	bl	80155ec <UART_CheckIdleState>
 8013d6a:	4603      	mov	r3, r0
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3708      	adds	r7, #8
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b08a      	sub	sp, #40	; 0x28
 8013d78:	af02      	add	r7, sp, #8
 8013d7a:	60f8      	str	r0, [r7, #12]
 8013d7c:	60b9      	str	r1, [r7, #8]
 8013d7e:	603b      	str	r3, [r7, #0]
 8013d80:	4613      	mov	r3, r2
 8013d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d8a:	2b20      	cmp	r3, #32
 8013d8c:	d17b      	bne.n	8013e86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d002      	beq.n	8013d9a <HAL_UART_Transmit+0x26>
 8013d94:	88fb      	ldrh	r3, [r7, #6]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d101      	bne.n	8013d9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	e074      	b.n	8013e88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2200      	movs	r2, #0
 8013da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2221      	movs	r2, #33	; 0x21
 8013daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013dae:	f7f1 fcb5 	bl	800571c <HAL_GetTick>
 8013db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	88fa      	ldrh	r2, [r7, #6]
 8013db8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	88fa      	ldrh	r2, [r7, #6]
 8013dc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	689b      	ldr	r3, [r3, #8]
 8013dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013dcc:	d108      	bne.n	8013de0 <HAL_UART_Transmit+0x6c>
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	691b      	ldr	r3, [r3, #16]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d104      	bne.n	8013de0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	61bb      	str	r3, [r7, #24]
 8013dde:	e003      	b.n	8013de8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013de4:	2300      	movs	r3, #0
 8013de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013de8:	e030      	b.n	8013e4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	9300      	str	r3, [sp, #0]
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	2200      	movs	r2, #0
 8013df2:	2180      	movs	r1, #128	; 0x80
 8013df4:	68f8      	ldr	r0, [r7, #12]
 8013df6:	f001 fca3 	bl	8015740 <UART_WaitOnFlagUntilTimeout>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d005      	beq.n	8013e0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2220      	movs	r2, #32
 8013e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013e08:	2303      	movs	r3, #3
 8013e0a:	e03d      	b.n	8013e88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d10b      	bne.n	8013e2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	461a      	mov	r2, r3
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013e20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	3302      	adds	r3, #2
 8013e26:	61bb      	str	r3, [r7, #24]
 8013e28:	e007      	b.n	8013e3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013e2a:	69fb      	ldr	r3, [r7, #28]
 8013e2c:	781a      	ldrb	r2, [r3, #0]
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	3301      	adds	r3, #1
 8013e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	3b01      	subs	r3, #1
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013e52:	b29b      	uxth	r3, r3
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d1c8      	bne.n	8013dea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	9300      	str	r3, [sp, #0]
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	2140      	movs	r1, #64	; 0x40
 8013e62:	68f8      	ldr	r0, [r7, #12]
 8013e64:	f001 fc6c 	bl	8015740 <UART_WaitOnFlagUntilTimeout>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d005      	beq.n	8013e7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2220      	movs	r2, #32
 8013e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8013e76:	2303      	movs	r3, #3
 8013e78:	e006      	b.n	8013e88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	2220      	movs	r2, #32
 8013e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8013e82:	2300      	movs	r3, #0
 8013e84:	e000      	b.n	8013e88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013e86:	2302      	movs	r3, #2
  }
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3720      	adds	r7, #32
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}

08013e90 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b08a      	sub	sp, #40	; 0x28
 8013e94:	af02      	add	r7, sp, #8
 8013e96:	60f8      	str	r0, [r7, #12]
 8013e98:	60b9      	str	r1, [r7, #8]
 8013e9a:	603b      	str	r3, [r7, #0]
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ea6:	2b20      	cmp	r3, #32
 8013ea8:	f040 80b5 	bne.w	8014016 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d002      	beq.n	8013eb8 <HAL_UART_Receive+0x28>
 8013eb2:	88fb      	ldrh	r3, [r7, #6]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d101      	bne.n	8013ebc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013eb8:	2301      	movs	r3, #1
 8013eba:	e0ad      	b.n	8014018 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2222      	movs	r2, #34	; 0x22
 8013ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013ed2:	f7f1 fc23 	bl	800571c <HAL_GetTick>
 8013ed6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	88fa      	ldrh	r2, [r7, #6]
 8013edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	88fa      	ldrh	r2, [r7, #6]
 8013ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	689b      	ldr	r3, [r3, #8]
 8013eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ef0:	d10e      	bne.n	8013f10 <HAL_UART_Receive+0x80>
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	691b      	ldr	r3, [r3, #16]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d105      	bne.n	8013f06 <HAL_UART_Receive+0x76>
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013f00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f04:	e02d      	b.n	8013f62 <HAL_UART_Receive+0xd2>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	22ff      	movs	r2, #255	; 0xff
 8013f0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f0e:	e028      	b.n	8013f62 <HAL_UART_Receive+0xd2>
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d10d      	bne.n	8013f34 <HAL_UART_Receive+0xa4>
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	691b      	ldr	r3, [r3, #16]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d104      	bne.n	8013f2a <HAL_UART_Receive+0x9a>
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	22ff      	movs	r2, #255	; 0xff
 8013f24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f28:	e01b      	b.n	8013f62 <HAL_UART_Receive+0xd2>
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	227f      	movs	r2, #127	; 0x7f
 8013f2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f32:	e016      	b.n	8013f62 <HAL_UART_Receive+0xd2>
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	689b      	ldr	r3, [r3, #8]
 8013f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013f3c:	d10d      	bne.n	8013f5a <HAL_UART_Receive+0xca>
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d104      	bne.n	8013f50 <HAL_UART_Receive+0xc0>
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	227f      	movs	r2, #127	; 0x7f
 8013f4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f4e:	e008      	b.n	8013f62 <HAL_UART_Receive+0xd2>
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	223f      	movs	r2, #63	; 0x3f
 8013f54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013f58:	e003      	b.n	8013f62 <HAL_UART_Receive+0xd2>
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f68:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	689b      	ldr	r3, [r3, #8]
 8013f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f72:	d108      	bne.n	8013f86 <HAL_UART_Receive+0xf6>
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	691b      	ldr	r3, [r3, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d104      	bne.n	8013f86 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	61bb      	str	r3, [r7, #24]
 8013f84:	e003      	b.n	8013f8e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013f8e:	e036      	b.n	8013ffe <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	9300      	str	r3, [sp, #0]
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	2200      	movs	r2, #0
 8013f98:	2120      	movs	r1, #32
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f001 fbd0 	bl	8015740 <UART_WaitOnFlagUntilTimeout>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d005      	beq.n	8013fb2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	2220      	movs	r2, #32
 8013faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8013fae:	2303      	movs	r3, #3
 8013fb0:	e032      	b.n	8014018 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d10c      	bne.n	8013fd2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	8a7b      	ldrh	r3, [r7, #18]
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	69bb      	ldr	r3, [r7, #24]
 8013fc8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013fca:	69bb      	ldr	r3, [r7, #24]
 8013fcc:	3302      	adds	r3, #2
 8013fce:	61bb      	str	r3, [r7, #24]
 8013fd0:	e00c      	b.n	8013fec <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd8:	b2da      	uxtb	r2, r3
 8013fda:	8a7b      	ldrh	r3, [r7, #18]
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	4013      	ands	r3, r2
 8013fe0:	b2da      	uxtb	r2, r3
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	3b01      	subs	r3, #1
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014004:	b29b      	uxth	r3, r3
 8014006:	2b00      	cmp	r3, #0
 8014008:	d1c2      	bne.n	8013f90 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2220      	movs	r2, #32
 801400e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8014012:	2300      	movs	r3, #0
 8014014:	e000      	b.n	8014018 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8014016:	2302      	movs	r3, #2
  }
}
 8014018:	4618      	mov	r0, r3
 801401a:	3720      	adds	r7, #32
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b08a      	sub	sp, #40	; 0x28
 8014024:	af00      	add	r7, sp, #0
 8014026:	60f8      	str	r0, [r7, #12]
 8014028:	60b9      	str	r1, [r7, #8]
 801402a:	4613      	mov	r3, r2
 801402c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014034:	2b20      	cmp	r3, #32
 8014036:	d137      	bne.n	80140a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d002      	beq.n	8014044 <HAL_UART_Receive_IT+0x24>
 801403e:	88fb      	ldrh	r3, [r7, #6]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d101      	bne.n	8014048 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014044:	2301      	movs	r3, #1
 8014046:	e030      	b.n	80140aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	2200      	movs	r2, #0
 801404c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4a18      	ldr	r2, [pc, #96]	; (80140b4 <HAL_UART_Receive_IT+0x94>)
 8014054:	4293      	cmp	r3, r2
 8014056:	d01f      	beq.n	8014098 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014062:	2b00      	cmp	r3, #0
 8014064:	d018      	beq.n	8014098 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	e853 3f00 	ldrex	r3, [r3]
 8014072:	613b      	str	r3, [r7, #16]
   return(result);
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801407a:	627b      	str	r3, [r7, #36]	; 0x24
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	461a      	mov	r2, r3
 8014082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014084:	623b      	str	r3, [r7, #32]
 8014086:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014088:	69f9      	ldr	r1, [r7, #28]
 801408a:	6a3a      	ldr	r2, [r7, #32]
 801408c:	e841 2300 	strex	r3, r2, [r1]
 8014090:	61bb      	str	r3, [r7, #24]
   return(result);
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1e6      	bne.n	8014066 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014098:	88fb      	ldrh	r3, [r7, #6]
 801409a:	461a      	mov	r2, r3
 801409c:	68b9      	ldr	r1, [r7, #8]
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f001 fbbc 	bl	801581c <UART_Start_Receive_IT>
 80140a4:	4603      	mov	r3, r0
 80140a6:	e000      	b.n	80140aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80140a8:	2302      	movs	r3, #2
  }
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3728      	adds	r7, #40	; 0x28
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
 80140b2:	bf00      	nop
 80140b4:	58000c00 	.word	0x58000c00

080140b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b09a      	sub	sp, #104	; 0x68
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140c8:	e853 3f00 	ldrex	r3, [r3]
 80140cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80140ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80140d4:	667b      	str	r3, [r7, #100]	; 0x64
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	461a      	mov	r2, r3
 80140dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140de:	657b      	str	r3, [r7, #84]	; 0x54
 80140e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80140e6:	e841 2300 	strex	r3, r2, [r1]
 80140ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80140ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1e6      	bne.n	80140c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	3308      	adds	r3, #8
 80140f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140fc:	e853 3f00 	ldrex	r3, [r3]
 8014100:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014104:	4b46      	ldr	r3, [pc, #280]	; (8014220 <HAL_UART_AbortReceive+0x168>)
 8014106:	4013      	ands	r3, r2
 8014108:	663b      	str	r3, [r7, #96]	; 0x60
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	3308      	adds	r3, #8
 8014110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014112:	643a      	str	r2, [r7, #64]	; 0x40
 8014114:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801411a:	e841 2300 	strex	r3, r2, [r1]
 801411e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014122:	2b00      	cmp	r3, #0
 8014124:	d1e5      	bne.n	80140f2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801412a:	2b01      	cmp	r3, #1
 801412c:	d118      	bne.n	8014160 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014134:	6a3b      	ldr	r3, [r7, #32]
 8014136:	e853 3f00 	ldrex	r3, [r3]
 801413a:	61fb      	str	r3, [r7, #28]
   return(result);
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	f023 0310 	bic.w	r3, r3, #16
 8014142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	461a      	mov	r2, r3
 801414a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801414c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801414e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014154:	e841 2300 	strex	r3, r2, [r1]
 8014158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	2b00      	cmp	r3, #0
 801415e:	d1e6      	bne.n	801412e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	689b      	ldr	r3, [r3, #8]
 8014166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801416a:	2b40      	cmp	r3, #64	; 0x40
 801416c:	d13b      	bne.n	80141e6 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	3308      	adds	r3, #8
 8014174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	e853 3f00 	ldrex	r3, [r3]
 801417c:	60bb      	str	r3, [r7, #8]
   return(result);
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014184:	65bb      	str	r3, [r7, #88]	; 0x58
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	3308      	adds	r3, #8
 801418c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801418e:	61ba      	str	r2, [r7, #24]
 8014190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014192:	6979      	ldr	r1, [r7, #20]
 8014194:	69ba      	ldr	r2, [r7, #24]
 8014196:	e841 2300 	strex	r3, r2, [r1]
 801419a:	613b      	str	r3, [r7, #16]
   return(result);
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d1e5      	bne.n	801416e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d01c      	beq.n	80141e6 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141b2:	2200      	movs	r2, #0
 80141b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141bc:	4618      	mov	r0, r3
 80141be:	f7f4 fa13 	bl	80085e8 <HAL_DMA_Abort>
 80141c2:	4603      	mov	r3, r0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d00e      	beq.n	80141e6 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7f5 fea6 	bl	8009f20 <HAL_DMA_GetError>
 80141d4:	4603      	mov	r3, r0
 80141d6:	2b20      	cmp	r3, #32
 80141d8:	d105      	bne.n	80141e6 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2210      	movs	r2, #16
 80141de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80141e2:	2303      	movs	r3, #3
 80141e4:	e017      	b.n	8014216 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2200      	movs	r2, #0
 80141ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	220f      	movs	r2, #15
 80141f4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	699a      	ldr	r2, [r3, #24]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	f042 0208 	orr.w	r2, r2, #8
 8014204:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	2220      	movs	r2, #32
 801420a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2200      	movs	r2, #0
 8014212:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014214:	2300      	movs	r3, #0
}
 8014216:	4618      	mov	r0, r3
 8014218:	3768      	adds	r7, #104	; 0x68
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	effffffe 	.word	0xeffffffe

08014224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b0ba      	sub	sp, #232	; 0xe8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	69db      	ldr	r3, [r3, #28]
 8014232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801424a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801424e:	f640 030f 	movw	r3, #2063	; 0x80f
 8014252:	4013      	ands	r3, r2
 8014254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801425c:	2b00      	cmp	r3, #0
 801425e:	d11b      	bne.n	8014298 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014264:	f003 0320 	and.w	r3, r3, #32
 8014268:	2b00      	cmp	r3, #0
 801426a:	d015      	beq.n	8014298 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014270:	f003 0320 	and.w	r3, r3, #32
 8014274:	2b00      	cmp	r3, #0
 8014276:	d105      	bne.n	8014284 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014280:	2b00      	cmp	r3, #0
 8014282:	d009      	beq.n	8014298 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014288:	2b00      	cmp	r3, #0
 801428a:	f000 8377 	beq.w	801497c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	4798      	blx	r3
      }
      return;
 8014296:	e371      	b.n	801497c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801429c:	2b00      	cmp	r3, #0
 801429e:	f000 8123 	beq.w	80144e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80142a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80142a6:	4b8d      	ldr	r3, [pc, #564]	; (80144dc <HAL_UART_IRQHandler+0x2b8>)
 80142a8:	4013      	ands	r3, r2
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d106      	bne.n	80142bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80142ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80142b2:	4b8b      	ldr	r3, [pc, #556]	; (80144e0 <HAL_UART_IRQHandler+0x2bc>)
 80142b4:	4013      	ands	r3, r2
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	f000 8116 	beq.w	80144e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80142bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142c0:	f003 0301 	and.w	r3, r3, #1
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d011      	beq.n	80142ec <HAL_UART_IRQHandler+0xc8>
 80142c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d00b      	beq.n	80142ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	2201      	movs	r2, #1
 80142da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142e2:	f043 0201 	orr.w	r2, r3, #1
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80142f0:	f003 0302 	and.w	r3, r3, #2
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d011      	beq.n	801431c <HAL_UART_IRQHandler+0xf8>
 80142f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80142fc:	f003 0301 	and.w	r3, r3, #1
 8014300:	2b00      	cmp	r3, #0
 8014302:	d00b      	beq.n	801431c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2202      	movs	r2, #2
 801430a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014312:	f043 0204 	orr.w	r2, r3, #4
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801431c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014320:	f003 0304 	and.w	r3, r3, #4
 8014324:	2b00      	cmp	r3, #0
 8014326:	d011      	beq.n	801434c <HAL_UART_IRQHandler+0x128>
 8014328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801432c:	f003 0301 	and.w	r3, r3, #1
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00b      	beq.n	801434c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	2204      	movs	r2, #4
 801433a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014342:	f043 0202 	orr.w	r2, r3, #2
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801434c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014350:	f003 0308 	and.w	r3, r3, #8
 8014354:	2b00      	cmp	r3, #0
 8014356:	d017      	beq.n	8014388 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801435c:	f003 0320 	and.w	r3, r3, #32
 8014360:	2b00      	cmp	r3, #0
 8014362:	d105      	bne.n	8014370 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014364:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014368:	4b5c      	ldr	r3, [pc, #368]	; (80144dc <HAL_UART_IRQHandler+0x2b8>)
 801436a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801436c:	2b00      	cmp	r3, #0
 801436e:	d00b      	beq.n	8014388 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2208      	movs	r2, #8
 8014376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801437e:	f043 0208 	orr.w	r2, r3, #8
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801438c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014390:	2b00      	cmp	r3, #0
 8014392:	d012      	beq.n	80143ba <HAL_UART_IRQHandler+0x196>
 8014394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801439c:	2b00      	cmp	r3, #0
 801439e:	d00c      	beq.n	80143ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80143a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143b0:	f043 0220 	orr.w	r2, r3, #32
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f000 82dd 	beq.w	8014980 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80143c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143ca:	f003 0320 	and.w	r3, r3, #32
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d013      	beq.n	80143fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80143d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80143d6:	f003 0320 	and.w	r3, r3, #32
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d105      	bne.n	80143ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80143de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80143e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d007      	beq.n	80143fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d003      	beq.n	80143fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	689b      	ldr	r3, [r3, #8]
 801440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801440e:	2b40      	cmp	r3, #64	; 0x40
 8014410:	d005      	beq.n	801441e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014416:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801441a:	2b00      	cmp	r3, #0
 801441c:	d054      	beq.n	80144c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f001 fb1e 	bl	8015a60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	689b      	ldr	r3, [r3, #8]
 801442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801442e:	2b40      	cmp	r3, #64	; 0x40
 8014430:	d146      	bne.n	80144c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	3308      	adds	r3, #8
 8014438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801443c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014440:	e853 3f00 	ldrex	r3, [r3]
 8014444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801444c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	3308      	adds	r3, #8
 801445a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801445e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801446a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801446e:	e841 2300 	strex	r3, r2, [r1]
 8014472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801447a:	2b00      	cmp	r3, #0
 801447c:	d1d9      	bne.n	8014432 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014484:	2b00      	cmp	r3, #0
 8014486:	d017      	beq.n	80144b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801448e:	4a15      	ldr	r2, [pc, #84]	; (80144e4 <HAL_UART_IRQHandler+0x2c0>)
 8014490:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014498:	4618      	mov	r0, r3
 801449a:	f7f4 fbc3 	bl	8008c24 <HAL_DMA_Abort_IT>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d019      	beq.n	80144d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80144b2:	4610      	mov	r0, r2
 80144b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80144b6:	e00f      	b.n	80144d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f000 fa77 	bl	80149ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80144be:	e00b      	b.n	80144d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 fa73 	bl	80149ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80144c6:	e007      	b.n	80144d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f000 fa6f 	bl	80149ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2200      	movs	r2, #0
 80144d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80144d6:	e253      	b.n	8014980 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80144d8:	bf00      	nop
    return;
 80144da:	e251      	b.n	8014980 <HAL_UART_IRQHandler+0x75c>
 80144dc:	10000001 	.word	0x10000001
 80144e0:	04000120 	.word	0x04000120
 80144e4:	08015b2d 	.word	0x08015b2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144ec:	2b01      	cmp	r3, #1
 80144ee:	f040 81e7 	bne.w	80148c0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80144f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144f6:	f003 0310 	and.w	r3, r3, #16
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	f000 81e0 	beq.w	80148c0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014504:	f003 0310 	and.w	r3, r3, #16
 8014508:	2b00      	cmp	r3, #0
 801450a:	f000 81d9 	beq.w	80148c0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2210      	movs	r2, #16
 8014514:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	689b      	ldr	r3, [r3, #8]
 801451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014520:	2b40      	cmp	r3, #64	; 0x40
 8014522:	f040 8151 	bne.w	80147c8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	4a96      	ldr	r2, [pc, #600]	; (8014788 <HAL_UART_IRQHandler+0x564>)
 8014530:	4293      	cmp	r3, r2
 8014532:	d068      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	4a93      	ldr	r2, [pc, #588]	; (801478c <HAL_UART_IRQHandler+0x568>)
 801453e:	4293      	cmp	r3, r2
 8014540:	d061      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	4a91      	ldr	r2, [pc, #580]	; (8014790 <HAL_UART_IRQHandler+0x56c>)
 801454c:	4293      	cmp	r3, r2
 801454e:	d05a      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a8e      	ldr	r2, [pc, #568]	; (8014794 <HAL_UART_IRQHandler+0x570>)
 801455a:	4293      	cmp	r3, r2
 801455c:	d053      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	4a8c      	ldr	r2, [pc, #560]	; (8014798 <HAL_UART_IRQHandler+0x574>)
 8014568:	4293      	cmp	r3, r2
 801456a:	d04c      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4a89      	ldr	r2, [pc, #548]	; (801479c <HAL_UART_IRQHandler+0x578>)
 8014576:	4293      	cmp	r3, r2
 8014578:	d045      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	4a87      	ldr	r2, [pc, #540]	; (80147a0 <HAL_UART_IRQHandler+0x57c>)
 8014584:	4293      	cmp	r3, r2
 8014586:	d03e      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	4a84      	ldr	r2, [pc, #528]	; (80147a4 <HAL_UART_IRQHandler+0x580>)
 8014592:	4293      	cmp	r3, r2
 8014594:	d037      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	4a82      	ldr	r2, [pc, #520]	; (80147a8 <HAL_UART_IRQHandler+0x584>)
 80145a0:	4293      	cmp	r3, r2
 80145a2:	d030      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4a7f      	ldr	r2, [pc, #508]	; (80147ac <HAL_UART_IRQHandler+0x588>)
 80145ae:	4293      	cmp	r3, r2
 80145b0:	d029      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4a7d      	ldr	r2, [pc, #500]	; (80147b0 <HAL_UART_IRQHandler+0x58c>)
 80145bc:	4293      	cmp	r3, r2
 80145be:	d022      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	4a7a      	ldr	r2, [pc, #488]	; (80147b4 <HAL_UART_IRQHandler+0x590>)
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d01b      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	4a78      	ldr	r2, [pc, #480]	; (80147b8 <HAL_UART_IRQHandler+0x594>)
 80145d8:	4293      	cmp	r3, r2
 80145da:	d014      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	4a75      	ldr	r2, [pc, #468]	; (80147bc <HAL_UART_IRQHandler+0x598>)
 80145e6:	4293      	cmp	r3, r2
 80145e8:	d00d      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	4a73      	ldr	r2, [pc, #460]	; (80147c0 <HAL_UART_IRQHandler+0x59c>)
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d006      	beq.n	8014606 <HAL_UART_IRQHandler+0x3e2>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	4a70      	ldr	r2, [pc, #448]	; (80147c4 <HAL_UART_IRQHandler+0x5a0>)
 8014602:	4293      	cmp	r3, r2
 8014604:	d106      	bne.n	8014614 <HAL_UART_IRQHandler+0x3f0>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	b29b      	uxth	r3, r3
 8014612:	e005      	b.n	8014620 <HAL_UART_IRQHandler+0x3fc>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	b29b      	uxth	r3, r3
 8014620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014628:	2b00      	cmp	r3, #0
 801462a:	f000 81ab 	beq.w	8014984 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014638:	429a      	cmp	r2, r3
 801463a:	f080 81a3 	bcs.w	8014984 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801464e:	69db      	ldr	r3, [r3, #28]
 8014650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014654:	f000 8087 	beq.w	8014766 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014664:	e853 3f00 	ldrex	r3, [r3]
 8014668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801466c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	461a      	mov	r2, r3
 801467e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014686:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801468a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801468e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014692:	e841 2300 	strex	r3, r2, [r1]
 8014696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801469a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d1da      	bne.n	8014658 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	3308      	adds	r3, #8
 80146a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80146ac:	e853 3f00 	ldrex	r3, [r3]
 80146b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80146b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146b4:	f023 0301 	bic.w	r3, r3, #1
 80146b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	3308      	adds	r3, #8
 80146c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80146c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80146ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80146ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80146d2:	e841 2300 	strex	r3, r2, [r1]
 80146d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80146d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d1e1      	bne.n	80146a2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	3308      	adds	r3, #8
 80146e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80146e8:	e853 3f00 	ldrex	r3, [r3]
 80146ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80146ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	3308      	adds	r3, #8
 80146fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801470a:	e841 2300 	strex	r3, r2, [r1]
 801470e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014712:	2b00      	cmp	r3, #0
 8014714:	d1e3      	bne.n	80146de <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2220      	movs	r2, #32
 801471a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2200      	movs	r2, #0
 8014722:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801472a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801472c:	e853 3f00 	ldrex	r3, [r3]
 8014730:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014734:	f023 0310 	bic.w	r3, r3, #16
 8014738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	461a      	mov	r2, r3
 8014742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014746:	65bb      	str	r3, [r7, #88]	; 0x58
 8014748:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801474a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801474c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801474e:	e841 2300 	strex	r3, r2, [r1]
 8014752:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014756:	2b00      	cmp	r3, #0
 8014758:	d1e4      	bne.n	8014724 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014760:	4618      	mov	r0, r3
 8014762:	f7f3 ff41 	bl	80085e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2202      	movs	r2, #2
 801476a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014778:	b29b      	uxth	r3, r3
 801477a:	1ad3      	subs	r3, r2, r3
 801477c:	b29b      	uxth	r3, r3
 801477e:	4619      	mov	r1, r3
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 f91d 	bl	80149c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014786:	e0fd      	b.n	8014984 <HAL_UART_IRQHandler+0x760>
 8014788:	40020010 	.word	0x40020010
 801478c:	40020028 	.word	0x40020028
 8014790:	40020040 	.word	0x40020040
 8014794:	40020058 	.word	0x40020058
 8014798:	40020070 	.word	0x40020070
 801479c:	40020088 	.word	0x40020088
 80147a0:	400200a0 	.word	0x400200a0
 80147a4:	400200b8 	.word	0x400200b8
 80147a8:	40020410 	.word	0x40020410
 80147ac:	40020428 	.word	0x40020428
 80147b0:	40020440 	.word	0x40020440
 80147b4:	40020458 	.word	0x40020458
 80147b8:	40020470 	.word	0x40020470
 80147bc:	40020488 	.word	0x40020488
 80147c0:	400204a0 	.word	0x400204a0
 80147c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	1ad3      	subs	r3, r2, r3
 80147d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80147e2:	b29b      	uxth	r3, r3
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	f000 80cf 	beq.w	8014988 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80147ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	f000 80ca 	beq.w	8014988 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fc:	e853 3f00 	ldrex	r3, [r3]
 8014800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	461a      	mov	r2, r3
 8014812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014816:	647b      	str	r3, [r7, #68]	; 0x44
 8014818:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801481a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801481c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801481e:	e841 2300 	strex	r3, r2, [r1]
 8014822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014826:	2b00      	cmp	r3, #0
 8014828:	d1e4      	bne.n	80147f4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	3308      	adds	r3, #8
 8014830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014834:	e853 3f00 	ldrex	r3, [r3]
 8014838:	623b      	str	r3, [r7, #32]
   return(result);
 801483a:	6a3a      	ldr	r2, [r7, #32]
 801483c:	4b55      	ldr	r3, [pc, #340]	; (8014994 <HAL_UART_IRQHandler+0x770>)
 801483e:	4013      	ands	r3, r2
 8014840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	3308      	adds	r3, #8
 801484a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801484e:	633a      	str	r2, [r7, #48]	; 0x30
 8014850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014856:	e841 2300 	strex	r3, r2, [r1]
 801485a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485e:	2b00      	cmp	r3, #0
 8014860:	d1e3      	bne.n	801482a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2220      	movs	r2, #32
 8014866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2200      	movs	r2, #0
 801486e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2200      	movs	r2, #0
 8014874:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	e853 3f00 	ldrex	r3, [r3]
 8014882:	60fb      	str	r3, [r7, #12]
   return(result);
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f023 0310 	bic.w	r3, r3, #16
 801488a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	461a      	mov	r2, r3
 8014894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014898:	61fb      	str	r3, [r7, #28]
 801489a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801489c:	69b9      	ldr	r1, [r7, #24]
 801489e:	69fa      	ldr	r2, [r7, #28]
 80148a0:	e841 2300 	strex	r3, r2, [r1]
 80148a4:	617b      	str	r3, [r7, #20]
   return(result);
 80148a6:	697b      	ldr	r3, [r7, #20]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d1e4      	bne.n	8014876 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2202      	movs	r2, #2
 80148b0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80148b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80148b6:	4619      	mov	r1, r3
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f000 f881 	bl	80149c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80148be:	e063      	b.n	8014988 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80148c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d00e      	beq.n	80148ea <HAL_UART_IRQHandler+0x6c6>
 80148cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d008      	beq.n	80148ea <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80148e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f001 fe80 	bl	80165e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80148e8:	e051      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80148ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d014      	beq.n	8014920 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80148f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80148fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d105      	bne.n	801490e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801490a:	2b00      	cmp	r3, #0
 801490c:	d008      	beq.n	8014920 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014912:	2b00      	cmp	r3, #0
 8014914:	d03a      	beq.n	801498c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	4798      	blx	r3
    }
    return;
 801491e:	e035      	b.n	801498c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014928:	2b00      	cmp	r3, #0
 801492a:	d009      	beq.n	8014940 <HAL_UART_IRQHandler+0x71c>
 801492c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014934:	2b00      	cmp	r3, #0
 8014936:	d003      	beq.n	8014940 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f001 f90d 	bl	8015b58 <UART_EndTransmit_IT>
    return;
 801493e:	e026      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014948:	2b00      	cmp	r3, #0
 801494a:	d009      	beq.n	8014960 <HAL_UART_IRQHandler+0x73c>
 801494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014954:	2b00      	cmp	r3, #0
 8014956:	d003      	beq.n	8014960 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f001 fe59 	bl	8016610 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801495e:	e016      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014968:	2b00      	cmp	r3, #0
 801496a:	d010      	beq.n	801498e <HAL_UART_IRQHandler+0x76a>
 801496c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014970:	2b00      	cmp	r3, #0
 8014972:	da0c      	bge.n	801498e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f001 fe41 	bl	80165fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801497a:	e008      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
      return;
 801497c:	bf00      	nop
 801497e:	e006      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
    return;
 8014980:	bf00      	nop
 8014982:	e004      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
      return;
 8014984:	bf00      	nop
 8014986:	e002      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
      return;
 8014988:	bf00      	nop
 801498a:	e000      	b.n	801498e <HAL_UART_IRQHandler+0x76a>
    return;
 801498c:	bf00      	nop
  }
}
 801498e:	37e8      	adds	r7, #232	; 0xe8
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	effffffe 	.word	0xeffffffe

08014998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014998:	b480      	push	{r7}
 801499a:	b083      	sub	sp, #12
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80149a0:	bf00      	nop
 80149a2:	370c      	adds	r7, #12
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr

080149ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b083      	sub	sp, #12
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80149b4:	bf00      	nop
 80149b6:	370c      	adds	r7, #12
 80149b8:	46bd      	mov	sp, r7
 80149ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149be:	4770      	bx	lr

080149c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80149c0:	b480      	push	{r7}
 80149c2:	b083      	sub	sp, #12
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	460b      	mov	r3, r1
 80149ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80149cc:	bf00      	nop
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80149d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80149dc:	b092      	sub	sp, #72	; 0x48
 80149de:	af00      	add	r7, sp, #0
 80149e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80149e2:	2300      	movs	r3, #0
 80149e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	689a      	ldr	r2, [r3, #8]
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	691b      	ldr	r3, [r3, #16]
 80149f0:	431a      	orrs	r2, r3
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	695b      	ldr	r3, [r3, #20]
 80149f6:	431a      	orrs	r2, r3
 80149f8:	697b      	ldr	r3, [r7, #20]
 80149fa:	69db      	ldr	r3, [r3, #28]
 80149fc:	4313      	orrs	r3, r2
 80149fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	681a      	ldr	r2, [r3, #0]
 8014a06:	4bbe      	ldr	r3, [pc, #760]	; (8014d00 <UART_SetConfig+0x328>)
 8014a08:	4013      	ands	r3, r2
 8014a0a:	697a      	ldr	r2, [r7, #20]
 8014a0c:	6812      	ldr	r2, [r2, #0]
 8014a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014a10:	430b      	orrs	r3, r1
 8014a12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	685b      	ldr	r3, [r3, #4]
 8014a1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	68da      	ldr	r2, [r3, #12]
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	430a      	orrs	r2, r1
 8014a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	699b      	ldr	r3, [r3, #24]
 8014a2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	4ab3      	ldr	r2, [pc, #716]	; (8014d04 <UART_SetConfig+0x32c>)
 8014a36:	4293      	cmp	r3, r2
 8014a38:	d004      	beq.n	8014a44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	6a1b      	ldr	r3, [r3, #32]
 8014a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a40:	4313      	orrs	r3, r2
 8014a42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	689a      	ldr	r2, [r3, #8]
 8014a4a:	4baf      	ldr	r3, [pc, #700]	; (8014d08 <UART_SetConfig+0x330>)
 8014a4c:	4013      	ands	r3, r2
 8014a4e:	697a      	ldr	r2, [r7, #20]
 8014a50:	6812      	ldr	r2, [r2, #0]
 8014a52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014a54:	430b      	orrs	r3, r1
 8014a56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a5e:	f023 010f 	bic.w	r1, r3, #15
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	430a      	orrs	r2, r1
 8014a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4aa6      	ldr	r2, [pc, #664]	; (8014d0c <UART_SetConfig+0x334>)
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d177      	bne.n	8014b68 <UART_SetConfig+0x190>
 8014a78:	4ba5      	ldr	r3, [pc, #660]	; (8014d10 <UART_SetConfig+0x338>)
 8014a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014a80:	2b28      	cmp	r3, #40	; 0x28
 8014a82:	d86d      	bhi.n	8014b60 <UART_SetConfig+0x188>
 8014a84:	a201      	add	r2, pc, #4	; (adr r2, 8014a8c <UART_SetConfig+0xb4>)
 8014a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a8a:	bf00      	nop
 8014a8c:	08014b31 	.word	0x08014b31
 8014a90:	08014b61 	.word	0x08014b61
 8014a94:	08014b61 	.word	0x08014b61
 8014a98:	08014b61 	.word	0x08014b61
 8014a9c:	08014b61 	.word	0x08014b61
 8014aa0:	08014b61 	.word	0x08014b61
 8014aa4:	08014b61 	.word	0x08014b61
 8014aa8:	08014b61 	.word	0x08014b61
 8014aac:	08014b39 	.word	0x08014b39
 8014ab0:	08014b61 	.word	0x08014b61
 8014ab4:	08014b61 	.word	0x08014b61
 8014ab8:	08014b61 	.word	0x08014b61
 8014abc:	08014b61 	.word	0x08014b61
 8014ac0:	08014b61 	.word	0x08014b61
 8014ac4:	08014b61 	.word	0x08014b61
 8014ac8:	08014b61 	.word	0x08014b61
 8014acc:	08014b41 	.word	0x08014b41
 8014ad0:	08014b61 	.word	0x08014b61
 8014ad4:	08014b61 	.word	0x08014b61
 8014ad8:	08014b61 	.word	0x08014b61
 8014adc:	08014b61 	.word	0x08014b61
 8014ae0:	08014b61 	.word	0x08014b61
 8014ae4:	08014b61 	.word	0x08014b61
 8014ae8:	08014b61 	.word	0x08014b61
 8014aec:	08014b49 	.word	0x08014b49
 8014af0:	08014b61 	.word	0x08014b61
 8014af4:	08014b61 	.word	0x08014b61
 8014af8:	08014b61 	.word	0x08014b61
 8014afc:	08014b61 	.word	0x08014b61
 8014b00:	08014b61 	.word	0x08014b61
 8014b04:	08014b61 	.word	0x08014b61
 8014b08:	08014b61 	.word	0x08014b61
 8014b0c:	08014b51 	.word	0x08014b51
 8014b10:	08014b61 	.word	0x08014b61
 8014b14:	08014b61 	.word	0x08014b61
 8014b18:	08014b61 	.word	0x08014b61
 8014b1c:	08014b61 	.word	0x08014b61
 8014b20:	08014b61 	.word	0x08014b61
 8014b24:	08014b61 	.word	0x08014b61
 8014b28:	08014b61 	.word	0x08014b61
 8014b2c:	08014b59 	.word	0x08014b59
 8014b30:	2301      	movs	r3, #1
 8014b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b36:	e222      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014b38:	2304      	movs	r3, #4
 8014b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b3e:	e21e      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014b40:	2308      	movs	r3, #8
 8014b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b46:	e21a      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014b48:	2310      	movs	r3, #16
 8014b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b4e:	e216      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014b50:	2320      	movs	r3, #32
 8014b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b56:	e212      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014b58:	2340      	movs	r3, #64	; 0x40
 8014b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b5e:	e20e      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014b60:	2380      	movs	r3, #128	; 0x80
 8014b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014b66:	e20a      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	4a69      	ldr	r2, [pc, #420]	; (8014d14 <UART_SetConfig+0x33c>)
 8014b6e:	4293      	cmp	r3, r2
 8014b70:	d130      	bne.n	8014bd4 <UART_SetConfig+0x1fc>
 8014b72:	4b67      	ldr	r3, [pc, #412]	; (8014d10 <UART_SetConfig+0x338>)
 8014b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b76:	f003 0307 	and.w	r3, r3, #7
 8014b7a:	2b05      	cmp	r3, #5
 8014b7c:	d826      	bhi.n	8014bcc <UART_SetConfig+0x1f4>
 8014b7e:	a201      	add	r2, pc, #4	; (adr r2, 8014b84 <UART_SetConfig+0x1ac>)
 8014b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b84:	08014b9d 	.word	0x08014b9d
 8014b88:	08014ba5 	.word	0x08014ba5
 8014b8c:	08014bad 	.word	0x08014bad
 8014b90:	08014bb5 	.word	0x08014bb5
 8014b94:	08014bbd 	.word	0x08014bbd
 8014b98:	08014bc5 	.word	0x08014bc5
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ba2:	e1ec      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014ba4:	2304      	movs	r3, #4
 8014ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014baa:	e1e8      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014bac:	2308      	movs	r3, #8
 8014bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bb2:	e1e4      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014bb4:	2310      	movs	r3, #16
 8014bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bba:	e1e0      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014bbc:	2320      	movs	r3, #32
 8014bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bc2:	e1dc      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014bc4:	2340      	movs	r3, #64	; 0x40
 8014bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bca:	e1d8      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014bcc:	2380      	movs	r3, #128	; 0x80
 8014bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014bd2:	e1d4      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4a4f      	ldr	r2, [pc, #316]	; (8014d18 <UART_SetConfig+0x340>)
 8014bda:	4293      	cmp	r3, r2
 8014bdc:	d130      	bne.n	8014c40 <UART_SetConfig+0x268>
 8014bde:	4b4c      	ldr	r3, [pc, #304]	; (8014d10 <UART_SetConfig+0x338>)
 8014be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014be2:	f003 0307 	and.w	r3, r3, #7
 8014be6:	2b05      	cmp	r3, #5
 8014be8:	d826      	bhi.n	8014c38 <UART_SetConfig+0x260>
 8014bea:	a201      	add	r2, pc, #4	; (adr r2, 8014bf0 <UART_SetConfig+0x218>)
 8014bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bf0:	08014c09 	.word	0x08014c09
 8014bf4:	08014c11 	.word	0x08014c11
 8014bf8:	08014c19 	.word	0x08014c19
 8014bfc:	08014c21 	.word	0x08014c21
 8014c00:	08014c29 	.word	0x08014c29
 8014c04:	08014c31 	.word	0x08014c31
 8014c08:	2300      	movs	r3, #0
 8014c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c0e:	e1b6      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c10:	2304      	movs	r3, #4
 8014c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c16:	e1b2      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c18:	2308      	movs	r3, #8
 8014c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c1e:	e1ae      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c20:	2310      	movs	r3, #16
 8014c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c26:	e1aa      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c28:	2320      	movs	r3, #32
 8014c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c2e:	e1a6      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c30:	2340      	movs	r3, #64	; 0x40
 8014c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c36:	e1a2      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c38:	2380      	movs	r3, #128	; 0x80
 8014c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c3e:	e19e      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	4a35      	ldr	r2, [pc, #212]	; (8014d1c <UART_SetConfig+0x344>)
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d130      	bne.n	8014cac <UART_SetConfig+0x2d4>
 8014c4a:	4b31      	ldr	r3, [pc, #196]	; (8014d10 <UART_SetConfig+0x338>)
 8014c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c4e:	f003 0307 	and.w	r3, r3, #7
 8014c52:	2b05      	cmp	r3, #5
 8014c54:	d826      	bhi.n	8014ca4 <UART_SetConfig+0x2cc>
 8014c56:	a201      	add	r2, pc, #4	; (adr r2, 8014c5c <UART_SetConfig+0x284>)
 8014c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c5c:	08014c75 	.word	0x08014c75
 8014c60:	08014c7d 	.word	0x08014c7d
 8014c64:	08014c85 	.word	0x08014c85
 8014c68:	08014c8d 	.word	0x08014c8d
 8014c6c:	08014c95 	.word	0x08014c95
 8014c70:	08014c9d 	.word	0x08014c9d
 8014c74:	2300      	movs	r3, #0
 8014c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c7a:	e180      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c7c:	2304      	movs	r3, #4
 8014c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c82:	e17c      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c84:	2308      	movs	r3, #8
 8014c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c8a:	e178      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c8c:	2310      	movs	r3, #16
 8014c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c92:	e174      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c94:	2320      	movs	r3, #32
 8014c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014c9a:	e170      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014c9c:	2340      	movs	r3, #64	; 0x40
 8014c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ca2:	e16c      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014ca4:	2380      	movs	r3, #128	; 0x80
 8014ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014caa:	e168      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a1b      	ldr	r2, [pc, #108]	; (8014d20 <UART_SetConfig+0x348>)
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	d142      	bne.n	8014d3c <UART_SetConfig+0x364>
 8014cb6:	4b16      	ldr	r3, [pc, #88]	; (8014d10 <UART_SetConfig+0x338>)
 8014cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cba:	f003 0307 	and.w	r3, r3, #7
 8014cbe:	2b05      	cmp	r3, #5
 8014cc0:	d838      	bhi.n	8014d34 <UART_SetConfig+0x35c>
 8014cc2:	a201      	add	r2, pc, #4	; (adr r2, 8014cc8 <UART_SetConfig+0x2f0>)
 8014cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cc8:	08014ce1 	.word	0x08014ce1
 8014ccc:	08014ce9 	.word	0x08014ce9
 8014cd0:	08014cf1 	.word	0x08014cf1
 8014cd4:	08014cf9 	.word	0x08014cf9
 8014cd8:	08014d25 	.word	0x08014d25
 8014cdc:	08014d2d 	.word	0x08014d2d
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ce6:	e14a      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014ce8:	2304      	movs	r3, #4
 8014cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cee:	e146      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014cf0:	2308      	movs	r3, #8
 8014cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cf6:	e142      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014cf8:	2310      	movs	r3, #16
 8014cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cfe:	e13e      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014d00:	cfff69f3 	.word	0xcfff69f3
 8014d04:	58000c00 	.word	0x58000c00
 8014d08:	11fff4ff 	.word	0x11fff4ff
 8014d0c:	40011000 	.word	0x40011000
 8014d10:	58024400 	.word	0x58024400
 8014d14:	40004400 	.word	0x40004400
 8014d18:	40004800 	.word	0x40004800
 8014d1c:	40004c00 	.word	0x40004c00
 8014d20:	40005000 	.word	0x40005000
 8014d24:	2320      	movs	r3, #32
 8014d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d2a:	e128      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014d2c:	2340      	movs	r3, #64	; 0x40
 8014d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d32:	e124      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014d34:	2380      	movs	r3, #128	; 0x80
 8014d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d3a:	e120      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	4acb      	ldr	r2, [pc, #812]	; (8015070 <UART_SetConfig+0x698>)
 8014d42:	4293      	cmp	r3, r2
 8014d44:	d176      	bne.n	8014e34 <UART_SetConfig+0x45c>
 8014d46:	4bcb      	ldr	r3, [pc, #812]	; (8015074 <UART_SetConfig+0x69c>)
 8014d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014d4e:	2b28      	cmp	r3, #40	; 0x28
 8014d50:	d86c      	bhi.n	8014e2c <UART_SetConfig+0x454>
 8014d52:	a201      	add	r2, pc, #4	; (adr r2, 8014d58 <UART_SetConfig+0x380>)
 8014d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d58:	08014dfd 	.word	0x08014dfd
 8014d5c:	08014e2d 	.word	0x08014e2d
 8014d60:	08014e2d 	.word	0x08014e2d
 8014d64:	08014e2d 	.word	0x08014e2d
 8014d68:	08014e2d 	.word	0x08014e2d
 8014d6c:	08014e2d 	.word	0x08014e2d
 8014d70:	08014e2d 	.word	0x08014e2d
 8014d74:	08014e2d 	.word	0x08014e2d
 8014d78:	08014e05 	.word	0x08014e05
 8014d7c:	08014e2d 	.word	0x08014e2d
 8014d80:	08014e2d 	.word	0x08014e2d
 8014d84:	08014e2d 	.word	0x08014e2d
 8014d88:	08014e2d 	.word	0x08014e2d
 8014d8c:	08014e2d 	.word	0x08014e2d
 8014d90:	08014e2d 	.word	0x08014e2d
 8014d94:	08014e2d 	.word	0x08014e2d
 8014d98:	08014e0d 	.word	0x08014e0d
 8014d9c:	08014e2d 	.word	0x08014e2d
 8014da0:	08014e2d 	.word	0x08014e2d
 8014da4:	08014e2d 	.word	0x08014e2d
 8014da8:	08014e2d 	.word	0x08014e2d
 8014dac:	08014e2d 	.word	0x08014e2d
 8014db0:	08014e2d 	.word	0x08014e2d
 8014db4:	08014e2d 	.word	0x08014e2d
 8014db8:	08014e15 	.word	0x08014e15
 8014dbc:	08014e2d 	.word	0x08014e2d
 8014dc0:	08014e2d 	.word	0x08014e2d
 8014dc4:	08014e2d 	.word	0x08014e2d
 8014dc8:	08014e2d 	.word	0x08014e2d
 8014dcc:	08014e2d 	.word	0x08014e2d
 8014dd0:	08014e2d 	.word	0x08014e2d
 8014dd4:	08014e2d 	.word	0x08014e2d
 8014dd8:	08014e1d 	.word	0x08014e1d
 8014ddc:	08014e2d 	.word	0x08014e2d
 8014de0:	08014e2d 	.word	0x08014e2d
 8014de4:	08014e2d 	.word	0x08014e2d
 8014de8:	08014e2d 	.word	0x08014e2d
 8014dec:	08014e2d 	.word	0x08014e2d
 8014df0:	08014e2d 	.word	0x08014e2d
 8014df4:	08014e2d 	.word	0x08014e2d
 8014df8:	08014e25 	.word	0x08014e25
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e02:	e0bc      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e04:	2304      	movs	r3, #4
 8014e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e0a:	e0b8      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e0c:	2308      	movs	r3, #8
 8014e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e12:	e0b4      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e14:	2310      	movs	r3, #16
 8014e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e1a:	e0b0      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e1c:	2320      	movs	r3, #32
 8014e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e22:	e0ac      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e24:	2340      	movs	r3, #64	; 0x40
 8014e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e2a:	e0a8      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e2c:	2380      	movs	r3, #128	; 0x80
 8014e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e32:	e0a4      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4a8f      	ldr	r2, [pc, #572]	; (8015078 <UART_SetConfig+0x6a0>)
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d130      	bne.n	8014ea0 <UART_SetConfig+0x4c8>
 8014e3e:	4b8d      	ldr	r3, [pc, #564]	; (8015074 <UART_SetConfig+0x69c>)
 8014e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e42:	f003 0307 	and.w	r3, r3, #7
 8014e46:	2b05      	cmp	r3, #5
 8014e48:	d826      	bhi.n	8014e98 <UART_SetConfig+0x4c0>
 8014e4a:	a201      	add	r2, pc, #4	; (adr r2, 8014e50 <UART_SetConfig+0x478>)
 8014e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e50:	08014e69 	.word	0x08014e69
 8014e54:	08014e71 	.word	0x08014e71
 8014e58:	08014e79 	.word	0x08014e79
 8014e5c:	08014e81 	.word	0x08014e81
 8014e60:	08014e89 	.word	0x08014e89
 8014e64:	08014e91 	.word	0x08014e91
 8014e68:	2300      	movs	r3, #0
 8014e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e6e:	e086      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e70:	2304      	movs	r3, #4
 8014e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e76:	e082      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e78:	2308      	movs	r3, #8
 8014e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e7e:	e07e      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e80:	2310      	movs	r3, #16
 8014e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e86:	e07a      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e88:	2320      	movs	r3, #32
 8014e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e8e:	e076      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e90:	2340      	movs	r3, #64	; 0x40
 8014e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e96:	e072      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014e98:	2380      	movs	r3, #128	; 0x80
 8014e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e9e:	e06e      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	4a75      	ldr	r2, [pc, #468]	; (801507c <UART_SetConfig+0x6a4>)
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d130      	bne.n	8014f0c <UART_SetConfig+0x534>
 8014eaa:	4b72      	ldr	r3, [pc, #456]	; (8015074 <UART_SetConfig+0x69c>)
 8014eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014eae:	f003 0307 	and.w	r3, r3, #7
 8014eb2:	2b05      	cmp	r3, #5
 8014eb4:	d826      	bhi.n	8014f04 <UART_SetConfig+0x52c>
 8014eb6:	a201      	add	r2, pc, #4	; (adr r2, 8014ebc <UART_SetConfig+0x4e4>)
 8014eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ebc:	08014ed5 	.word	0x08014ed5
 8014ec0:	08014edd 	.word	0x08014edd
 8014ec4:	08014ee5 	.word	0x08014ee5
 8014ec8:	08014eed 	.word	0x08014eed
 8014ecc:	08014ef5 	.word	0x08014ef5
 8014ed0:	08014efd 	.word	0x08014efd
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eda:	e050      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014edc:	2304      	movs	r3, #4
 8014ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ee2:	e04c      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014ee4:	2308      	movs	r3, #8
 8014ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eea:	e048      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014eec:	2310      	movs	r3, #16
 8014eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ef2:	e044      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014ef4:	2320      	movs	r3, #32
 8014ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014efa:	e040      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014efc:	2340      	movs	r3, #64	; 0x40
 8014efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f02:	e03c      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f04:	2380      	movs	r3, #128	; 0x80
 8014f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f0a:	e038      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	4a5b      	ldr	r2, [pc, #364]	; (8015080 <UART_SetConfig+0x6a8>)
 8014f12:	4293      	cmp	r3, r2
 8014f14:	d130      	bne.n	8014f78 <UART_SetConfig+0x5a0>
 8014f16:	4b57      	ldr	r3, [pc, #348]	; (8015074 <UART_SetConfig+0x69c>)
 8014f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f1a:	f003 0307 	and.w	r3, r3, #7
 8014f1e:	2b05      	cmp	r3, #5
 8014f20:	d826      	bhi.n	8014f70 <UART_SetConfig+0x598>
 8014f22:	a201      	add	r2, pc, #4	; (adr r2, 8014f28 <UART_SetConfig+0x550>)
 8014f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f28:	08014f41 	.word	0x08014f41
 8014f2c:	08014f49 	.word	0x08014f49
 8014f30:	08014f51 	.word	0x08014f51
 8014f34:	08014f59 	.word	0x08014f59
 8014f38:	08014f61 	.word	0x08014f61
 8014f3c:	08014f69 	.word	0x08014f69
 8014f40:	2302      	movs	r3, #2
 8014f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f46:	e01a      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f48:	2304      	movs	r3, #4
 8014f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f4e:	e016      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f50:	2308      	movs	r3, #8
 8014f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f56:	e012      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f58:	2310      	movs	r3, #16
 8014f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f5e:	e00e      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f60:	2320      	movs	r3, #32
 8014f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f66:	e00a      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f68:	2340      	movs	r3, #64	; 0x40
 8014f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f6e:	e006      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f70:	2380      	movs	r3, #128	; 0x80
 8014f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f76:	e002      	b.n	8014f7e <UART_SetConfig+0x5a6>
 8014f78:	2380      	movs	r3, #128	; 0x80
 8014f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014f7e:	697b      	ldr	r3, [r7, #20]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	4a3f      	ldr	r2, [pc, #252]	; (8015080 <UART_SetConfig+0x6a8>)
 8014f84:	4293      	cmp	r3, r2
 8014f86:	f040 80f8 	bne.w	801517a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014f8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014f8e:	2b20      	cmp	r3, #32
 8014f90:	dc46      	bgt.n	8015020 <UART_SetConfig+0x648>
 8014f92:	2b02      	cmp	r3, #2
 8014f94:	f2c0 8082 	blt.w	801509c <UART_SetConfig+0x6c4>
 8014f98:	3b02      	subs	r3, #2
 8014f9a:	2b1e      	cmp	r3, #30
 8014f9c:	d87e      	bhi.n	801509c <UART_SetConfig+0x6c4>
 8014f9e:	a201      	add	r2, pc, #4	; (adr r2, 8014fa4 <UART_SetConfig+0x5cc>)
 8014fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fa4:	08015027 	.word	0x08015027
 8014fa8:	0801509d 	.word	0x0801509d
 8014fac:	0801502f 	.word	0x0801502f
 8014fb0:	0801509d 	.word	0x0801509d
 8014fb4:	0801509d 	.word	0x0801509d
 8014fb8:	0801509d 	.word	0x0801509d
 8014fbc:	0801503f 	.word	0x0801503f
 8014fc0:	0801509d 	.word	0x0801509d
 8014fc4:	0801509d 	.word	0x0801509d
 8014fc8:	0801509d 	.word	0x0801509d
 8014fcc:	0801509d 	.word	0x0801509d
 8014fd0:	0801509d 	.word	0x0801509d
 8014fd4:	0801509d 	.word	0x0801509d
 8014fd8:	0801509d 	.word	0x0801509d
 8014fdc:	0801504f 	.word	0x0801504f
 8014fe0:	0801509d 	.word	0x0801509d
 8014fe4:	0801509d 	.word	0x0801509d
 8014fe8:	0801509d 	.word	0x0801509d
 8014fec:	0801509d 	.word	0x0801509d
 8014ff0:	0801509d 	.word	0x0801509d
 8014ff4:	0801509d 	.word	0x0801509d
 8014ff8:	0801509d 	.word	0x0801509d
 8014ffc:	0801509d 	.word	0x0801509d
 8015000:	0801509d 	.word	0x0801509d
 8015004:	0801509d 	.word	0x0801509d
 8015008:	0801509d 	.word	0x0801509d
 801500c:	0801509d 	.word	0x0801509d
 8015010:	0801509d 	.word	0x0801509d
 8015014:	0801509d 	.word	0x0801509d
 8015018:	0801509d 	.word	0x0801509d
 801501c:	0801508f 	.word	0x0801508f
 8015020:	2b40      	cmp	r3, #64	; 0x40
 8015022:	d037      	beq.n	8015094 <UART_SetConfig+0x6bc>
 8015024:	e03a      	b.n	801509c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8015026:	f7fb fc17 	bl	8010858 <HAL_RCCEx_GetD3PCLK1Freq>
 801502a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801502c:	e03c      	b.n	80150a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801502e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015032:	4618      	mov	r0, r3
 8015034:	f7fb fc26 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801503a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801503c:	e034      	b.n	80150a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801503e:	f107 0318 	add.w	r3, r7, #24
 8015042:	4618      	mov	r0, r3
 8015044:	f7fb fd72 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015048:	69fb      	ldr	r3, [r7, #28]
 801504a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801504c:	e02c      	b.n	80150a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801504e:	4b09      	ldr	r3, [pc, #36]	; (8015074 <UART_SetConfig+0x69c>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f003 0320 	and.w	r3, r3, #32
 8015056:	2b00      	cmp	r3, #0
 8015058:	d016      	beq.n	8015088 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801505a:	4b06      	ldr	r3, [pc, #24]	; (8015074 <UART_SetConfig+0x69c>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	08db      	lsrs	r3, r3, #3
 8015060:	f003 0303 	and.w	r3, r3, #3
 8015064:	4a07      	ldr	r2, [pc, #28]	; (8015084 <UART_SetConfig+0x6ac>)
 8015066:	fa22 f303 	lsr.w	r3, r2, r3
 801506a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801506c:	e01c      	b.n	80150a8 <UART_SetConfig+0x6d0>
 801506e:	bf00      	nop
 8015070:	40011400 	.word	0x40011400
 8015074:	58024400 	.word	0x58024400
 8015078:	40007800 	.word	0x40007800
 801507c:	40007c00 	.word	0x40007c00
 8015080:	58000c00 	.word	0x58000c00
 8015084:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015088:	4b9d      	ldr	r3, [pc, #628]	; (8015300 <UART_SetConfig+0x928>)
 801508a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801508c:	e00c      	b.n	80150a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801508e:	4b9d      	ldr	r3, [pc, #628]	; (8015304 <UART_SetConfig+0x92c>)
 8015090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015092:	e009      	b.n	80150a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801509a:	e005      	b.n	80150a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801509c:	2300      	movs	r3, #0
 801509e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80150a0:	2301      	movs	r3, #1
 80150a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80150a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80150a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	f000 81de 	beq.w	801546c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b4:	4a94      	ldr	r2, [pc, #592]	; (8015308 <UART_SetConfig+0x930>)
 80150b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150ba:	461a      	mov	r2, r3
 80150bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150be:	fbb3 f3f2 	udiv	r3, r3, r2
 80150c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	685a      	ldr	r2, [r3, #4]
 80150c8:	4613      	mov	r3, r2
 80150ca:	005b      	lsls	r3, r3, #1
 80150cc:	4413      	add	r3, r2
 80150ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d305      	bcc.n	80150e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80150da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150dc:	429a      	cmp	r2, r3
 80150de:	d903      	bls.n	80150e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80150e0:	2301      	movs	r3, #1
 80150e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80150e6:	e1c1      	b.n	801546c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80150e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150ea:	2200      	movs	r2, #0
 80150ec:	60bb      	str	r3, [r7, #8]
 80150ee:	60fa      	str	r2, [r7, #12]
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150f4:	4a84      	ldr	r2, [pc, #528]	; (8015308 <UART_SetConfig+0x930>)
 80150f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	2200      	movs	r2, #0
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	607a      	str	r2, [r7, #4]
 8015102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801510a:	f7eb f8e9 	bl	80002e0 <__aeabi_uldivmod>
 801510e:	4602      	mov	r2, r0
 8015110:	460b      	mov	r3, r1
 8015112:	4610      	mov	r0, r2
 8015114:	4619      	mov	r1, r3
 8015116:	f04f 0200 	mov.w	r2, #0
 801511a:	f04f 0300 	mov.w	r3, #0
 801511e:	020b      	lsls	r3, r1, #8
 8015120:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015124:	0202      	lsls	r2, r0, #8
 8015126:	6979      	ldr	r1, [r7, #20]
 8015128:	6849      	ldr	r1, [r1, #4]
 801512a:	0849      	lsrs	r1, r1, #1
 801512c:	2000      	movs	r0, #0
 801512e:	460c      	mov	r4, r1
 8015130:	4605      	mov	r5, r0
 8015132:	eb12 0804 	adds.w	r8, r2, r4
 8015136:	eb43 0905 	adc.w	r9, r3, r5
 801513a:	697b      	ldr	r3, [r7, #20]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	2200      	movs	r2, #0
 8015140:	469a      	mov	sl, r3
 8015142:	4693      	mov	fp, r2
 8015144:	4652      	mov	r2, sl
 8015146:	465b      	mov	r3, fp
 8015148:	4640      	mov	r0, r8
 801514a:	4649      	mov	r1, r9
 801514c:	f7eb f8c8 	bl	80002e0 <__aeabi_uldivmod>
 8015150:	4602      	mov	r2, r0
 8015152:	460b      	mov	r3, r1
 8015154:	4613      	mov	r3, r2
 8015156:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801515a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801515e:	d308      	bcc.n	8015172 <UART_SetConfig+0x79a>
 8015160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015166:	d204      	bcs.n	8015172 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801516e:	60da      	str	r2, [r3, #12]
 8015170:	e17c      	b.n	801546c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015172:	2301      	movs	r3, #1
 8015174:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015178:	e178      	b.n	801546c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	69db      	ldr	r3, [r3, #28]
 801517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015182:	f040 80c5 	bne.w	8015310 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801518a:	2b20      	cmp	r3, #32
 801518c:	dc48      	bgt.n	8015220 <UART_SetConfig+0x848>
 801518e:	2b00      	cmp	r3, #0
 8015190:	db7b      	blt.n	801528a <UART_SetConfig+0x8b2>
 8015192:	2b20      	cmp	r3, #32
 8015194:	d879      	bhi.n	801528a <UART_SetConfig+0x8b2>
 8015196:	a201      	add	r2, pc, #4	; (adr r2, 801519c <UART_SetConfig+0x7c4>)
 8015198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801519c:	08015227 	.word	0x08015227
 80151a0:	0801522f 	.word	0x0801522f
 80151a4:	0801528b 	.word	0x0801528b
 80151a8:	0801528b 	.word	0x0801528b
 80151ac:	08015237 	.word	0x08015237
 80151b0:	0801528b 	.word	0x0801528b
 80151b4:	0801528b 	.word	0x0801528b
 80151b8:	0801528b 	.word	0x0801528b
 80151bc:	08015247 	.word	0x08015247
 80151c0:	0801528b 	.word	0x0801528b
 80151c4:	0801528b 	.word	0x0801528b
 80151c8:	0801528b 	.word	0x0801528b
 80151cc:	0801528b 	.word	0x0801528b
 80151d0:	0801528b 	.word	0x0801528b
 80151d4:	0801528b 	.word	0x0801528b
 80151d8:	0801528b 	.word	0x0801528b
 80151dc:	08015257 	.word	0x08015257
 80151e0:	0801528b 	.word	0x0801528b
 80151e4:	0801528b 	.word	0x0801528b
 80151e8:	0801528b 	.word	0x0801528b
 80151ec:	0801528b 	.word	0x0801528b
 80151f0:	0801528b 	.word	0x0801528b
 80151f4:	0801528b 	.word	0x0801528b
 80151f8:	0801528b 	.word	0x0801528b
 80151fc:	0801528b 	.word	0x0801528b
 8015200:	0801528b 	.word	0x0801528b
 8015204:	0801528b 	.word	0x0801528b
 8015208:	0801528b 	.word	0x0801528b
 801520c:	0801528b 	.word	0x0801528b
 8015210:	0801528b 	.word	0x0801528b
 8015214:	0801528b 	.word	0x0801528b
 8015218:	0801528b 	.word	0x0801528b
 801521c:	0801527d 	.word	0x0801527d
 8015220:	2b40      	cmp	r3, #64	; 0x40
 8015222:	d02e      	beq.n	8015282 <UART_SetConfig+0x8aa>
 8015224:	e031      	b.n	801528a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015226:	f7f9 fb1f 	bl	800e868 <HAL_RCC_GetPCLK1Freq>
 801522a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801522c:	e033      	b.n	8015296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801522e:	f7f9 fb31 	bl	800e894 <HAL_RCC_GetPCLK2Freq>
 8015232:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015234:	e02f      	b.n	8015296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801523a:	4618      	mov	r0, r3
 801523c:	f7fb fb22 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015244:	e027      	b.n	8015296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015246:	f107 0318 	add.w	r3, r7, #24
 801524a:	4618      	mov	r0, r3
 801524c:	f7fb fc6e 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015254:	e01f      	b.n	8015296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015256:	4b2d      	ldr	r3, [pc, #180]	; (801530c <UART_SetConfig+0x934>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f003 0320 	and.w	r3, r3, #32
 801525e:	2b00      	cmp	r3, #0
 8015260:	d009      	beq.n	8015276 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015262:	4b2a      	ldr	r3, [pc, #168]	; (801530c <UART_SetConfig+0x934>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	08db      	lsrs	r3, r3, #3
 8015268:	f003 0303 	and.w	r3, r3, #3
 801526c:	4a24      	ldr	r2, [pc, #144]	; (8015300 <UART_SetConfig+0x928>)
 801526e:	fa22 f303 	lsr.w	r3, r2, r3
 8015272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015274:	e00f      	b.n	8015296 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015276:	4b22      	ldr	r3, [pc, #136]	; (8015300 <UART_SetConfig+0x928>)
 8015278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801527a:	e00c      	b.n	8015296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801527c:	4b21      	ldr	r3, [pc, #132]	; (8015304 <UART_SetConfig+0x92c>)
 801527e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015280:	e009      	b.n	8015296 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015288:	e005      	b.n	8015296 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801528a:	2300      	movs	r3, #0
 801528c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801528e:	2301      	movs	r3, #1
 8015290:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015298:	2b00      	cmp	r3, #0
 801529a:	f000 80e7 	beq.w	801546c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a2:	4a19      	ldr	r2, [pc, #100]	; (8015308 <UART_SetConfig+0x930>)
 80152a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80152a8:	461a      	mov	r2, r3
 80152aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80152b0:	005a      	lsls	r2, r3, #1
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	685b      	ldr	r3, [r3, #4]
 80152b6:	085b      	lsrs	r3, r3, #1
 80152b8:	441a      	add	r2, r3
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	685b      	ldr	r3, [r3, #4]
 80152be:	fbb2 f3f3 	udiv	r3, r2, r3
 80152c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80152c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c6:	2b0f      	cmp	r3, #15
 80152c8:	d916      	bls.n	80152f8 <UART_SetConfig+0x920>
 80152ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152d0:	d212      	bcs.n	80152f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80152d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	f023 030f 	bic.w	r3, r3, #15
 80152da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80152dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152de:	085b      	lsrs	r3, r3, #1
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	f003 0307 	and.w	r3, r3, #7
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80152ea:	4313      	orrs	r3, r2
 80152ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80152f4:	60da      	str	r2, [r3, #12]
 80152f6:	e0b9      	b.n	801546c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80152f8:	2301      	movs	r3, #1
 80152fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80152fe:	e0b5      	b.n	801546c <UART_SetConfig+0xa94>
 8015300:	03d09000 	.word	0x03d09000
 8015304:	003d0900 	.word	0x003d0900
 8015308:	0801abfc 	.word	0x0801abfc
 801530c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015310:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015314:	2b20      	cmp	r3, #32
 8015316:	dc49      	bgt.n	80153ac <UART_SetConfig+0x9d4>
 8015318:	2b00      	cmp	r3, #0
 801531a:	db7c      	blt.n	8015416 <UART_SetConfig+0xa3e>
 801531c:	2b20      	cmp	r3, #32
 801531e:	d87a      	bhi.n	8015416 <UART_SetConfig+0xa3e>
 8015320:	a201      	add	r2, pc, #4	; (adr r2, 8015328 <UART_SetConfig+0x950>)
 8015322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015326:	bf00      	nop
 8015328:	080153b3 	.word	0x080153b3
 801532c:	080153bb 	.word	0x080153bb
 8015330:	08015417 	.word	0x08015417
 8015334:	08015417 	.word	0x08015417
 8015338:	080153c3 	.word	0x080153c3
 801533c:	08015417 	.word	0x08015417
 8015340:	08015417 	.word	0x08015417
 8015344:	08015417 	.word	0x08015417
 8015348:	080153d3 	.word	0x080153d3
 801534c:	08015417 	.word	0x08015417
 8015350:	08015417 	.word	0x08015417
 8015354:	08015417 	.word	0x08015417
 8015358:	08015417 	.word	0x08015417
 801535c:	08015417 	.word	0x08015417
 8015360:	08015417 	.word	0x08015417
 8015364:	08015417 	.word	0x08015417
 8015368:	080153e3 	.word	0x080153e3
 801536c:	08015417 	.word	0x08015417
 8015370:	08015417 	.word	0x08015417
 8015374:	08015417 	.word	0x08015417
 8015378:	08015417 	.word	0x08015417
 801537c:	08015417 	.word	0x08015417
 8015380:	08015417 	.word	0x08015417
 8015384:	08015417 	.word	0x08015417
 8015388:	08015417 	.word	0x08015417
 801538c:	08015417 	.word	0x08015417
 8015390:	08015417 	.word	0x08015417
 8015394:	08015417 	.word	0x08015417
 8015398:	08015417 	.word	0x08015417
 801539c:	08015417 	.word	0x08015417
 80153a0:	08015417 	.word	0x08015417
 80153a4:	08015417 	.word	0x08015417
 80153a8:	08015409 	.word	0x08015409
 80153ac:	2b40      	cmp	r3, #64	; 0x40
 80153ae:	d02e      	beq.n	801540e <UART_SetConfig+0xa36>
 80153b0:	e031      	b.n	8015416 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80153b2:	f7f9 fa59 	bl	800e868 <HAL_RCC_GetPCLK1Freq>
 80153b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80153b8:	e033      	b.n	8015422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80153ba:	f7f9 fa6b 	bl	800e894 <HAL_RCC_GetPCLK2Freq>
 80153be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80153c0:	e02f      	b.n	8015422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80153c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7fb fa5c 	bl	8010884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80153cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153d0:	e027      	b.n	8015422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80153d2:	f107 0318 	add.w	r3, r7, #24
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7fb fba8 	bl	8010b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153e0:	e01f      	b.n	8015422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80153e2:	4b2d      	ldr	r3, [pc, #180]	; (8015498 <UART_SetConfig+0xac0>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	f003 0320 	and.w	r3, r3, #32
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d009      	beq.n	8015402 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80153ee:	4b2a      	ldr	r3, [pc, #168]	; (8015498 <UART_SetConfig+0xac0>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	08db      	lsrs	r3, r3, #3
 80153f4:	f003 0303 	and.w	r3, r3, #3
 80153f8:	4a28      	ldr	r2, [pc, #160]	; (801549c <UART_SetConfig+0xac4>)
 80153fa:	fa22 f303 	lsr.w	r3, r2, r3
 80153fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015400:	e00f      	b.n	8015422 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015402:	4b26      	ldr	r3, [pc, #152]	; (801549c <UART_SetConfig+0xac4>)
 8015404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015406:	e00c      	b.n	8015422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015408:	4b25      	ldr	r3, [pc, #148]	; (80154a0 <UART_SetConfig+0xac8>)
 801540a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801540c:	e009      	b.n	8015422 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801540e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015414:	e005      	b.n	8015422 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015416:	2300      	movs	r3, #0
 8015418:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801541a:	2301      	movs	r3, #1
 801541c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015420:	bf00      	nop
    }

    if (pclk != 0U)
 8015422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015424:	2b00      	cmp	r3, #0
 8015426:	d021      	beq.n	801546c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801542c:	4a1d      	ldr	r2, [pc, #116]	; (80154a4 <UART_SetConfig+0xacc>)
 801542e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015432:	461a      	mov	r2, r3
 8015434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015436:	fbb3 f2f2 	udiv	r2, r3, r2
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	085b      	lsrs	r3, r3, #1
 8015440:	441a      	add	r2, r3
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	fbb2 f3f3 	udiv	r3, r2, r3
 801544a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801544e:	2b0f      	cmp	r3, #15
 8015450:	d909      	bls.n	8015466 <UART_SetConfig+0xa8e>
 8015452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015458:	d205      	bcs.n	8015466 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801545c:	b29a      	uxth	r2, r3
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	60da      	str	r2, [r3, #12]
 8015464:	e002      	b.n	801546c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015466:	2301      	movs	r3, #1
 8015468:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	2201      	movs	r2, #1
 8015470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	2201      	movs	r2, #1
 8015478:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	2200      	movs	r2, #0
 8015480:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	2200      	movs	r2, #0
 8015486:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015488:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801548c:	4618      	mov	r0, r3
 801548e:	3748      	adds	r7, #72	; 0x48
 8015490:	46bd      	mov	sp, r7
 8015492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015496:	bf00      	nop
 8015498:	58024400 	.word	0x58024400
 801549c:	03d09000 	.word	0x03d09000
 80154a0:	003d0900 	.word	0x003d0900
 80154a4:	0801abfc 	.word	0x0801abfc

080154a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80154a8:	b480      	push	{r7}
 80154aa:	b083      	sub	sp, #12
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154b4:	f003 0308 	and.w	r3, r3, #8
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00a      	beq.n	80154d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	430a      	orrs	r2, r1
 80154d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d00a      	beq.n	80154f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	430a      	orrs	r2, r1
 80154f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154f8:	f003 0302 	and.w	r3, r3, #2
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d00a      	beq.n	8015516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	430a      	orrs	r2, r1
 8015514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801551a:	f003 0304 	and.w	r3, r3, #4
 801551e:	2b00      	cmp	r3, #0
 8015520:	d00a      	beq.n	8015538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	430a      	orrs	r2, r1
 8015536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801553c:	f003 0310 	and.w	r3, r3, #16
 8015540:	2b00      	cmp	r3, #0
 8015542:	d00a      	beq.n	801555a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	689b      	ldr	r3, [r3, #8]
 801554a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	430a      	orrs	r2, r1
 8015558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801555e:	f003 0320 	and.w	r3, r3, #32
 8015562:	2b00      	cmp	r3, #0
 8015564:	d00a      	beq.n	801557c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	689b      	ldr	r3, [r3, #8]
 801556c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	430a      	orrs	r2, r1
 801557a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015584:	2b00      	cmp	r3, #0
 8015586:	d01a      	beq.n	80155be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	685b      	ldr	r3, [r3, #4]
 801558e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	430a      	orrs	r2, r1
 801559c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80155a6:	d10a      	bne.n	80155be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	430a      	orrs	r2, r1
 80155bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d00a      	beq.n	80155e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	685b      	ldr	r3, [r3, #4]
 80155d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	430a      	orrs	r2, r1
 80155de:	605a      	str	r2, [r3, #4]
  }
}
 80155e0:	bf00      	nop
 80155e2:	370c      	adds	r7, #12
 80155e4:	46bd      	mov	sp, r7
 80155e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ea:	4770      	bx	lr

080155ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b098      	sub	sp, #96	; 0x60
 80155f0:	af02      	add	r7, sp, #8
 80155f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2200      	movs	r2, #0
 80155f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80155fc:	f7f0 f88e 	bl	800571c <HAL_GetTick>
 8015600:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	f003 0308 	and.w	r3, r3, #8
 801560c:	2b08      	cmp	r3, #8
 801560e:	d12f      	bne.n	8015670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015614:	9300      	str	r3, [sp, #0]
 8015616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015618:	2200      	movs	r2, #0
 801561a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f000 f88e 	bl	8015740 <UART_WaitOnFlagUntilTimeout>
 8015624:	4603      	mov	r3, r0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d022      	beq.n	8015670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015632:	e853 3f00 	ldrex	r3, [r3]
 8015636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801563a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801563e:	653b      	str	r3, [r7, #80]	; 0x50
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	461a      	mov	r2, r3
 8015646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015648:	647b      	str	r3, [r7, #68]	; 0x44
 801564a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801564c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801564e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015650:	e841 2300 	strex	r3, r2, [r1]
 8015654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015658:	2b00      	cmp	r3, #0
 801565a:	d1e6      	bne.n	801562a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2220      	movs	r2, #32
 8015660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2200      	movs	r2, #0
 8015668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801566c:	2303      	movs	r3, #3
 801566e:	e063      	b.n	8015738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f003 0304 	and.w	r3, r3, #4
 801567a:	2b04      	cmp	r3, #4
 801567c:	d149      	bne.n	8015712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801567e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015686:	2200      	movs	r2, #0
 8015688:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f000 f857 	bl	8015740 <UART_WaitOnFlagUntilTimeout>
 8015692:	4603      	mov	r3, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	d03c      	beq.n	8015712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a0:	e853 3f00 	ldrex	r3, [r3]
 80156a4:	623b      	str	r3, [r7, #32]
   return(result);
 80156a6:	6a3b      	ldr	r3, [r7, #32]
 80156a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80156ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	461a      	mov	r2, r3
 80156b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156b6:	633b      	str	r3, [r7, #48]	; 0x30
 80156b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156be:	e841 2300 	strex	r3, r2, [r1]
 80156c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80156c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d1e6      	bne.n	8015698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	3308      	adds	r3, #8
 80156d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	e853 3f00 	ldrex	r3, [r3]
 80156d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	f023 0301 	bic.w	r3, r3, #1
 80156e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	3308      	adds	r3, #8
 80156e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80156ea:	61fa      	str	r2, [r7, #28]
 80156ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156ee:	69b9      	ldr	r1, [r7, #24]
 80156f0:	69fa      	ldr	r2, [r7, #28]
 80156f2:	e841 2300 	strex	r3, r2, [r1]
 80156f6:	617b      	str	r3, [r7, #20]
   return(result);
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d1e5      	bne.n	80156ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2220      	movs	r2, #32
 8015702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2200      	movs	r2, #0
 801570a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801570e:	2303      	movs	r3, #3
 8015710:	e012      	b.n	8015738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2220      	movs	r2, #32
 8015716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2220      	movs	r2, #32
 801571e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2200      	movs	r2, #0
 8015726:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2200      	movs	r2, #0
 801572c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2200      	movs	r2, #0
 8015732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015736:	2300      	movs	r3, #0
}
 8015738:	4618      	mov	r0, r3
 801573a:	3758      	adds	r7, #88	; 0x58
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}

08015740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b084      	sub	sp, #16
 8015744:	af00      	add	r7, sp, #0
 8015746:	60f8      	str	r0, [r7, #12]
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	603b      	str	r3, [r7, #0]
 801574c:	4613      	mov	r3, r2
 801574e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015750:	e04f      	b.n	80157f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015752:	69bb      	ldr	r3, [r7, #24]
 8015754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015758:	d04b      	beq.n	80157f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801575a:	f7ef ffdf 	bl	800571c <HAL_GetTick>
 801575e:	4602      	mov	r2, r0
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	1ad3      	subs	r3, r2, r3
 8015764:	69ba      	ldr	r2, [r7, #24]
 8015766:	429a      	cmp	r2, r3
 8015768:	d302      	bcc.n	8015770 <UART_WaitOnFlagUntilTimeout+0x30>
 801576a:	69bb      	ldr	r3, [r7, #24]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d101      	bne.n	8015774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015770:	2303      	movs	r3, #3
 8015772:	e04e      	b.n	8015812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	f003 0304 	and.w	r3, r3, #4
 801577e:	2b00      	cmp	r3, #0
 8015780:	d037      	beq.n	80157f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	2b80      	cmp	r3, #128	; 0x80
 8015786:	d034      	beq.n	80157f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	2b40      	cmp	r3, #64	; 0x40
 801578c:	d031      	beq.n	80157f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	69db      	ldr	r3, [r3, #28]
 8015794:	f003 0308 	and.w	r3, r3, #8
 8015798:	2b08      	cmp	r3, #8
 801579a:	d110      	bne.n	80157be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	2208      	movs	r2, #8
 80157a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80157a4:	68f8      	ldr	r0, [r7, #12]
 80157a6:	f000 f95b 	bl	8015a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	2208      	movs	r2, #8
 80157ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2200      	movs	r2, #0
 80157b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80157ba:	2301      	movs	r3, #1
 80157bc:	e029      	b.n	8015812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	69db      	ldr	r3, [r3, #28]
 80157c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80157c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80157cc:	d111      	bne.n	80157f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80157d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80157d8:	68f8      	ldr	r0, [r7, #12]
 80157da:	f000 f941 	bl	8015a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	2220      	movs	r2, #32
 80157e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2200      	movs	r2, #0
 80157ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80157ee:	2303      	movs	r3, #3
 80157f0:	e00f      	b.n	8015812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	69da      	ldr	r2, [r3, #28]
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	4013      	ands	r3, r2
 80157fc:	68ba      	ldr	r2, [r7, #8]
 80157fe:	429a      	cmp	r2, r3
 8015800:	bf0c      	ite	eq
 8015802:	2301      	moveq	r3, #1
 8015804:	2300      	movne	r3, #0
 8015806:	b2db      	uxtb	r3, r3
 8015808:	461a      	mov	r2, r3
 801580a:	79fb      	ldrb	r3, [r7, #7]
 801580c:	429a      	cmp	r2, r3
 801580e:	d0a0      	beq.n	8015752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015810:	2300      	movs	r3, #0
}
 8015812:	4618      	mov	r0, r3
 8015814:	3710      	adds	r7, #16
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}
	...

0801581c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801581c:	b480      	push	{r7}
 801581e:	b0a3      	sub	sp, #140	; 0x8c
 8015820:	af00      	add	r7, sp, #0
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	4613      	mov	r3, r2
 8015828:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	68ba      	ldr	r2, [r7, #8]
 801582e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	88fa      	ldrh	r2, [r7, #6]
 8015834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	88fa      	ldrh	r2, [r7, #6]
 801583c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	2200      	movs	r2, #0
 8015844:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	689b      	ldr	r3, [r3, #8]
 801584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801584e:	d10e      	bne.n	801586e <UART_Start_Receive_IT+0x52>
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	691b      	ldr	r3, [r3, #16]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d105      	bne.n	8015864 <UART_Start_Receive_IT+0x48>
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801585e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015862:	e02d      	b.n	80158c0 <UART_Start_Receive_IT+0xa4>
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	22ff      	movs	r2, #255	; 0xff
 8015868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801586c:	e028      	b.n	80158c0 <UART_Start_Receive_IT+0xa4>
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	689b      	ldr	r3, [r3, #8]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d10d      	bne.n	8015892 <UART_Start_Receive_IT+0x76>
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	691b      	ldr	r3, [r3, #16]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d104      	bne.n	8015888 <UART_Start_Receive_IT+0x6c>
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	22ff      	movs	r2, #255	; 0xff
 8015882:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015886:	e01b      	b.n	80158c0 <UART_Start_Receive_IT+0xa4>
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	227f      	movs	r2, #127	; 0x7f
 801588c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015890:	e016      	b.n	80158c0 <UART_Start_Receive_IT+0xa4>
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	689b      	ldr	r3, [r3, #8]
 8015896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801589a:	d10d      	bne.n	80158b8 <UART_Start_Receive_IT+0x9c>
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	691b      	ldr	r3, [r3, #16]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d104      	bne.n	80158ae <UART_Start_Receive_IT+0x92>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	227f      	movs	r2, #127	; 0x7f
 80158a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80158ac:	e008      	b.n	80158c0 <UART_Start_Receive_IT+0xa4>
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	223f      	movs	r2, #63	; 0x3f
 80158b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80158b6:	e003      	b.n	80158c0 <UART_Start_Receive_IT+0xa4>
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2200      	movs	r2, #0
 80158bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2200      	movs	r2, #0
 80158c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2222      	movs	r2, #34	; 0x22
 80158cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	3308      	adds	r3, #8
 80158d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80158da:	e853 3f00 	ldrex	r3, [r3]
 80158de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80158e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80158e2:	f043 0301 	orr.w	r3, r3, #1
 80158e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	3308      	adds	r3, #8
 80158f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80158f4:	673a      	str	r2, [r7, #112]	; 0x70
 80158f6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80158fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80158fc:	e841 2300 	strex	r3, r2, [r1]
 8015900:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015904:	2b00      	cmp	r3, #0
 8015906:	d1e3      	bne.n	80158d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801590c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015910:	d14f      	bne.n	80159b2 <UART_Start_Receive_IT+0x196>
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015918:	88fa      	ldrh	r2, [r7, #6]
 801591a:	429a      	cmp	r2, r3
 801591c:	d349      	bcc.n	80159b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	689b      	ldr	r3, [r3, #8]
 8015922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015926:	d107      	bne.n	8015938 <UART_Start_Receive_IT+0x11c>
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	691b      	ldr	r3, [r3, #16]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d103      	bne.n	8015938 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	4a47      	ldr	r2, [pc, #284]	; (8015a50 <UART_Start_Receive_IT+0x234>)
 8015934:	675a      	str	r2, [r3, #116]	; 0x74
 8015936:	e002      	b.n	801593e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	4a46      	ldr	r2, [pc, #280]	; (8015a54 <UART_Start_Receive_IT+0x238>)
 801593c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	691b      	ldr	r3, [r3, #16]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d01a      	beq.n	801597c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801594c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801594e:	e853 3f00 	ldrex	r3, [r3]
 8015952:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801595a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	461a      	mov	r2, r3
 8015964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015968:	65fb      	str	r3, [r7, #92]	; 0x5c
 801596a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801596c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801596e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015970:	e841 2300 	strex	r3, r2, [r1]
 8015974:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015978:	2b00      	cmp	r3, #0
 801597a:	d1e4      	bne.n	8015946 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	3308      	adds	r3, #8
 8015982:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015986:	e853 3f00 	ldrex	r3, [r3]
 801598a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801598e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015992:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	3308      	adds	r3, #8
 801599a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801599c:	64ba      	str	r2, [r7, #72]	; 0x48
 801599e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80159a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80159a4:	e841 2300 	strex	r3, r2, [r1]
 80159a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80159aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d1e5      	bne.n	801597c <UART_Start_Receive_IT+0x160>
 80159b0:	e046      	b.n	8015a40 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	689b      	ldr	r3, [r3, #8]
 80159b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159ba:	d107      	bne.n	80159cc <UART_Start_Receive_IT+0x1b0>
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	691b      	ldr	r3, [r3, #16]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d103      	bne.n	80159cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	4a24      	ldr	r2, [pc, #144]	; (8015a58 <UART_Start_Receive_IT+0x23c>)
 80159c8:	675a      	str	r2, [r3, #116]	; 0x74
 80159ca:	e002      	b.n	80159d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	4a23      	ldr	r2, [pc, #140]	; (8015a5c <UART_Start_Receive_IT+0x240>)
 80159d0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	691b      	ldr	r3, [r3, #16]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d019      	beq.n	8015a0e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159e2:	e853 3f00 	ldrex	r3, [r3]
 80159e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80159e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80159ee:	677b      	str	r3, [r7, #116]	; 0x74
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	461a      	mov	r2, r3
 80159f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159f8:	637b      	str	r3, [r7, #52]	; 0x34
 80159fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80159fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a00:	e841 2300 	strex	r3, r2, [r1]
 8015a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d1e6      	bne.n	80159da <UART_Start_Receive_IT+0x1be>
 8015a0c:	e018      	b.n	8015a40 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a14:	697b      	ldr	r3, [r7, #20]
 8015a16:	e853 3f00 	ldrex	r3, [r3]
 8015a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	f043 0320 	orr.w	r3, r3, #32
 8015a22:	67bb      	str	r3, [r7, #120]	; 0x78
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	461a      	mov	r2, r3
 8015a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015a2c:	623b      	str	r3, [r7, #32]
 8015a2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a30:	69f9      	ldr	r1, [r7, #28]
 8015a32:	6a3a      	ldr	r2, [r7, #32]
 8015a34:	e841 2300 	strex	r3, r2, [r1]
 8015a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8015a3a:	69bb      	ldr	r3, [r7, #24]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1e6      	bne.n	8015a0e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015a40:	2300      	movs	r3, #0
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	378c      	adds	r7, #140	; 0x8c
 8015a46:	46bd      	mov	sp, r7
 8015a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop
 8015a50:	08016281 	.word	0x08016281
 8015a54:	08015f21 	.word	0x08015f21
 8015a58:	08015d69 	.word	0x08015d69
 8015a5c:	08015bb1 	.word	0x08015bb1

08015a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015a60:	b480      	push	{r7}
 8015a62:	b095      	sub	sp, #84	; 0x54
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a70:	e853 3f00 	ldrex	r3, [r3]
 8015a74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	461a      	mov	r2, r3
 8015a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a86:	643b      	str	r3, [r7, #64]	; 0x40
 8015a88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015a8e:	e841 2300 	strex	r3, r2, [r1]
 8015a92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d1e6      	bne.n	8015a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	3308      	adds	r3, #8
 8015aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015aa2:	6a3b      	ldr	r3, [r7, #32]
 8015aa4:	e853 3f00 	ldrex	r3, [r3]
 8015aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8015aaa:	69fa      	ldr	r2, [r7, #28]
 8015aac:	4b1e      	ldr	r3, [pc, #120]	; (8015b28 <UART_EndRxTransfer+0xc8>)
 8015aae:	4013      	ands	r3, r2
 8015ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	3308      	adds	r3, #8
 8015ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015abc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ac2:	e841 2300 	strex	r3, r2, [r1]
 8015ac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d1e5      	bne.n	8015a9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ad2:	2b01      	cmp	r3, #1
 8015ad4:	d118      	bne.n	8015b08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	e853 3f00 	ldrex	r3, [r3]
 8015ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	f023 0310 	bic.w	r3, r3, #16
 8015aea:	647b      	str	r3, [r7, #68]	; 0x44
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	461a      	mov	r2, r3
 8015af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015af4:	61bb      	str	r3, [r7, #24]
 8015af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015af8:	6979      	ldr	r1, [r7, #20]
 8015afa:	69ba      	ldr	r2, [r7, #24]
 8015afc:	e841 2300 	strex	r3, r2, [r1]
 8015b00:	613b      	str	r3, [r7, #16]
   return(result);
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d1e6      	bne.n	8015ad6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	2220      	movs	r2, #32
 8015b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2200      	movs	r2, #0
 8015b14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015b1c:	bf00      	nop
 8015b1e:	3754      	adds	r7, #84	; 0x54
 8015b20:	46bd      	mov	sp, r7
 8015b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b26:	4770      	bx	lr
 8015b28:	effffffe 	.word	0xeffffffe

08015b2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	2200      	movs	r2, #0
 8015b46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015b4a:	68f8      	ldr	r0, [r7, #12]
 8015b4c:	f7fe ff2e 	bl	80149ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015b50:	bf00      	nop
 8015b52:	3710      	adds	r7, #16
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}

08015b58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b088      	sub	sp, #32
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	e853 3f00 	ldrex	r3, [r3]
 8015b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8015b6e:	68bb      	ldr	r3, [r7, #8]
 8015b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b74:	61fb      	str	r3, [r7, #28]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	61bb      	str	r3, [r7, #24]
 8015b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b82:	6979      	ldr	r1, [r7, #20]
 8015b84:	69ba      	ldr	r2, [r7, #24]
 8015b86:	e841 2300 	strex	r3, r2, [r1]
 8015b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d1e6      	bne.n	8015b60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	2220      	movs	r2, #32
 8015b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015ba0:	6878      	ldr	r0, [r7, #4]
 8015ba2:	f7fe fef9 	bl	8014998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015ba6:	bf00      	nop
 8015ba8:	3720      	adds	r7, #32
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
	...

08015bb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b09c      	sub	sp, #112	; 0x70
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015bbe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015bc8:	2b22      	cmp	r3, #34	; 0x22
 8015bca:	f040 80be 	bne.w	8015d4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015bd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015bdc:	b2d9      	uxtb	r1, r3
 8015bde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015be2:	b2da      	uxtb	r2, r3
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015be8:	400a      	ands	r2, r1
 8015bea:	b2d2      	uxtb	r2, r2
 8015bec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bf2:	1c5a      	adds	r2, r3, #1
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	3b01      	subs	r3, #1
 8015c02:	b29a      	uxth	r2, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	f040 80a1 	bne.w	8015d5a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c20:	e853 3f00 	ldrex	r3, [r3]
 8015c24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015c2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	461a      	mov	r2, r3
 8015c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c36:	65bb      	str	r3, [r7, #88]	; 0x58
 8015c38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015c3e:	e841 2300 	strex	r3, r2, [r1]
 8015c42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d1e6      	bne.n	8015c18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	3308      	adds	r3, #8
 8015c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c54:	e853 3f00 	ldrex	r3, [r3]
 8015c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c5c:	f023 0301 	bic.w	r3, r3, #1
 8015c60:	667b      	str	r3, [r7, #100]	; 0x64
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	3308      	adds	r3, #8
 8015c68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015c6a:	647a      	str	r2, [r7, #68]	; 0x44
 8015c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c72:	e841 2300 	strex	r3, r2, [r1]
 8015c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d1e5      	bne.n	8015c4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2220      	movs	r2, #32
 8015c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	4a33      	ldr	r2, [pc, #204]	; (8015d64 <UART_RxISR_8BIT+0x1b4>)
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	d01f      	beq.n	8015cdc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d018      	beq.n	8015cdc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb2:	e853 3f00 	ldrex	r3, [r3]
 8015cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8015cb8:	6a3b      	ldr	r3, [r7, #32]
 8015cba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8015cca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cd0:	e841 2300 	strex	r3, r2, [r1]
 8015cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d1e6      	bne.n	8015caa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ce0:	2b01      	cmp	r3, #1
 8015ce2:	d12e      	bne.n	8015d42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	e853 3f00 	ldrex	r3, [r3]
 8015cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	f023 0310 	bic.w	r3, r3, #16
 8015cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	461a      	mov	r2, r3
 8015d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d08:	61fb      	str	r3, [r7, #28]
 8015d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d0c:	69b9      	ldr	r1, [r7, #24]
 8015d0e:	69fa      	ldr	r2, [r7, #28]
 8015d10:	e841 2300 	strex	r3, r2, [r1]
 8015d14:	617b      	str	r3, [r7, #20]
   return(result);
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d1e6      	bne.n	8015cea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	69db      	ldr	r3, [r3, #28]
 8015d22:	f003 0310 	and.w	r3, r3, #16
 8015d26:	2b10      	cmp	r3, #16
 8015d28:	d103      	bne.n	8015d32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	2210      	movs	r2, #16
 8015d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015d38:	4619      	mov	r1, r3
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f7fe fe40 	bl	80149c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015d40:	e00b      	b.n	8015d5a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f7ec fdb6 	bl	80028b4 <HAL_UART_RxCpltCallback>
}
 8015d48:	e007      	b.n	8015d5a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	699a      	ldr	r2, [r3, #24]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f042 0208 	orr.w	r2, r2, #8
 8015d58:	619a      	str	r2, [r3, #24]
}
 8015d5a:	bf00      	nop
 8015d5c:	3770      	adds	r7, #112	; 0x70
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}
 8015d62:	bf00      	nop
 8015d64:	58000c00 	.word	0x58000c00

08015d68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b09c      	sub	sp, #112	; 0x70
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d80:	2b22      	cmp	r3, #34	; 0x22
 8015d82:	f040 80be 	bne.w	8015f02 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d94:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015d96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015d9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015d9e:	4013      	ands	r3, r2
 8015da0:	b29a      	uxth	r2, r3
 8015da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015da4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015daa:	1c9a      	adds	r2, r3, #2
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	3b01      	subs	r3, #1
 8015dba:	b29a      	uxth	r2, r3
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015dc8:	b29b      	uxth	r3, r3
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	f040 80a1 	bne.w	8015f12 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015dd8:	e853 3f00 	ldrex	r3, [r3]
 8015ddc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015de4:	667b      	str	r3, [r7, #100]	; 0x64
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	461a      	mov	r2, r3
 8015dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015dee:	657b      	str	r3, [r7, #84]	; 0x54
 8015df0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015df2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015df6:	e841 2300 	strex	r3, r2, [r1]
 8015dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d1e6      	bne.n	8015dd0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	3308      	adds	r3, #8
 8015e08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e0c:	e853 3f00 	ldrex	r3, [r3]
 8015e10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e14:	f023 0301 	bic.w	r3, r3, #1
 8015e18:	663b      	str	r3, [r7, #96]	; 0x60
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	3308      	adds	r3, #8
 8015e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015e22:	643a      	str	r2, [r7, #64]	; 0x40
 8015e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015e2a:	e841 2300 	strex	r3, r2, [r1]
 8015e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d1e5      	bne.n	8015e02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2220      	movs	r2, #32
 8015e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2200      	movs	r2, #0
 8015e42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2200      	movs	r2, #0
 8015e48:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	4a33      	ldr	r2, [pc, #204]	; (8015f1c <UART_RxISR_16BIT+0x1b4>)
 8015e50:	4293      	cmp	r3, r2
 8015e52:	d01f      	beq.n	8015e94 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d018      	beq.n	8015e94 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e68:	6a3b      	ldr	r3, [r7, #32]
 8015e6a:	e853 3f00 	ldrex	r3, [r3]
 8015e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e82:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e88:	e841 2300 	strex	r3, r2, [r1]
 8015e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d1e6      	bne.n	8015e62 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	d12e      	bne.n	8015efa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	e853 3f00 	ldrex	r3, [r3]
 8015eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	f023 0310 	bic.w	r3, r3, #16
 8015eb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015ec0:	61bb      	str	r3, [r7, #24]
 8015ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ec4:	6979      	ldr	r1, [r7, #20]
 8015ec6:	69ba      	ldr	r2, [r7, #24]
 8015ec8:	e841 2300 	strex	r3, r2, [r1]
 8015ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d1e6      	bne.n	8015ea2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	69db      	ldr	r3, [r3, #28]
 8015eda:	f003 0310 	and.w	r3, r3, #16
 8015ede:	2b10      	cmp	r3, #16
 8015ee0:	d103      	bne.n	8015eea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	2210      	movs	r2, #16
 8015ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f7fe fd64 	bl	80149c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015ef8:	e00b      	b.n	8015f12 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f7ec fcda 	bl	80028b4 <HAL_UART_RxCpltCallback>
}
 8015f00:	e007      	b.n	8015f12 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	699a      	ldr	r2, [r3, #24]
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	f042 0208 	orr.w	r2, r2, #8
 8015f10:	619a      	str	r2, [r3, #24]
}
 8015f12:	bf00      	nop
 8015f14:	3770      	adds	r7, #112	; 0x70
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop
 8015f1c:	58000c00 	.word	0x58000c00

08015f20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b0ac      	sub	sp, #176	; 0xb0
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	69db      	ldr	r3, [r3, #28]
 8015f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	689b      	ldr	r3, [r3, #8]
 8015f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f56:	2b22      	cmp	r3, #34	; 0x22
 8015f58:	f040 8180 	bne.w	801625c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015f62:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015f66:	e123      	b.n	80161b0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015f72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8015f76:	b2d9      	uxtb	r1, r3
 8015f78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015f7c:	b2da      	uxtb	r2, r3
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f82:	400a      	ands	r2, r1
 8015f84:	b2d2      	uxtb	r2, r2
 8015f86:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f8c:	1c5a      	adds	r2, r3, #1
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	3b01      	subs	r3, #1
 8015f9c:	b29a      	uxth	r2, r3
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	69db      	ldr	r3, [r3, #28]
 8015faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015fb2:	f003 0307 	and.w	r3, r3, #7
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d053      	beq.n	8016062 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015fbe:	f003 0301 	and.w	r3, r3, #1
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d011      	beq.n	8015fea <UART_RxISR_8BIT_FIFOEN+0xca>
 8015fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d00b      	beq.n	8015fea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	2201      	movs	r2, #1
 8015fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015fe0:	f043 0201 	orr.w	r2, r3, #1
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015fee:	f003 0302 	and.w	r3, r3, #2
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d011      	beq.n	801601a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015ffa:	f003 0301 	and.w	r3, r3, #1
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d00b      	beq.n	801601a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2202      	movs	r2, #2
 8016008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016010:	f043 0204 	orr.w	r2, r3, #4
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801601a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801601e:	f003 0304 	and.w	r3, r3, #4
 8016022:	2b00      	cmp	r3, #0
 8016024:	d011      	beq.n	801604a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801602a:	f003 0301 	and.w	r3, r3, #1
 801602e:	2b00      	cmp	r3, #0
 8016030:	d00b      	beq.n	801604a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	2204      	movs	r2, #4
 8016038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016040:	f043 0202 	orr.w	r2, r3, #2
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016050:	2b00      	cmp	r3, #0
 8016052:	d006      	beq.n	8016062 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7fe fca9 	bl	80149ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2200      	movs	r2, #0
 801605e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016068:	b29b      	uxth	r3, r3
 801606a:	2b00      	cmp	r3, #0
 801606c:	f040 80a0 	bne.w	80161b0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016078:	e853 3f00 	ldrex	r3, [r3]
 801607c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801607e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	461a      	mov	r2, r3
 801608e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016092:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016094:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016096:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016098:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801609a:	e841 2300 	strex	r3, r2, [r1]
 801609e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80160a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d1e4      	bne.n	8016070 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	3308      	adds	r3, #8
 80160ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160b0:	e853 3f00 	ldrex	r3, [r3]
 80160b4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80160b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80160b8:	4b6e      	ldr	r3, [pc, #440]	; (8016274 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80160ba:	4013      	ands	r3, r2
 80160bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	3308      	adds	r3, #8
 80160c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80160ca:	66ba      	str	r2, [r7, #104]	; 0x68
 80160cc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80160d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80160d2:	e841 2300 	strex	r3, r2, [r1]
 80160d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80160d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d1e3      	bne.n	80160a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2220      	movs	r2, #32
 80160e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2200      	movs	r2, #0
 80160ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	4a60      	ldr	r2, [pc, #384]	; (8016278 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80160f8:	4293      	cmp	r3, r2
 80160fa:	d021      	beq.n	8016140 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016106:	2b00      	cmp	r3, #0
 8016108:	d01a      	beq.n	8016140 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016112:	e853 3f00 	ldrex	r3, [r3]
 8016116:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801611a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801611e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	461a      	mov	r2, r3
 8016128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801612c:	657b      	str	r3, [r7, #84]	; 0x54
 801612e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016130:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016132:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016134:	e841 2300 	strex	r3, r2, [r1]
 8016138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801613a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1e4      	bne.n	801610a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016144:	2b01      	cmp	r3, #1
 8016146:	d130      	bne.n	80161aa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2200      	movs	r2, #0
 801614c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016156:	e853 3f00 	ldrex	r3, [r3]
 801615a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	f023 0310 	bic.w	r3, r3, #16
 8016162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	461a      	mov	r2, r3
 801616c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016170:	643b      	str	r3, [r7, #64]	; 0x40
 8016172:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016174:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016178:	e841 2300 	strex	r3, r2, [r1]
 801617c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016180:	2b00      	cmp	r3, #0
 8016182:	d1e4      	bne.n	801614e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	69db      	ldr	r3, [r3, #28]
 801618a:	f003 0310 	and.w	r3, r3, #16
 801618e:	2b10      	cmp	r3, #16
 8016190:	d103      	bne.n	801619a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	2210      	movs	r2, #16
 8016198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80161a0:	4619      	mov	r1, r3
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f7fe fc0c 	bl	80149c0 <HAL_UARTEx_RxEventCallback>
 80161a8:	e002      	b.n	80161b0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f7ec fb82 	bl	80028b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80161b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d006      	beq.n	80161c6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80161b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161bc:	f003 0320 	and.w	r3, r3, #32
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	f47f aed1 	bne.w	8015f68 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80161cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80161d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d049      	beq.n	801626c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161de:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d242      	bcs.n	801626c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	3308      	adds	r3, #8
 80161ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161ee:	6a3b      	ldr	r3, [r7, #32]
 80161f0:	e853 3f00 	ldrex	r3, [r3]
 80161f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80161f6:	69fb      	ldr	r3, [r7, #28]
 80161f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80161fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	3308      	adds	r3, #8
 8016206:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801620a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801620c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801620e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016212:	e841 2300 	strex	r3, r2, [r1]
 8016216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801621a:	2b00      	cmp	r3, #0
 801621c:	d1e3      	bne.n	80161e6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	4a16      	ldr	r2, [pc, #88]	; (801627c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016222:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	e853 3f00 	ldrex	r3, [r3]
 8016230:	60bb      	str	r3, [r7, #8]
   return(result);
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	f043 0320 	orr.w	r3, r3, #32
 8016238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	461a      	mov	r2, r3
 8016242:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016246:	61bb      	str	r3, [r7, #24]
 8016248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801624a:	6979      	ldr	r1, [r7, #20]
 801624c:	69ba      	ldr	r2, [r7, #24]
 801624e:	e841 2300 	strex	r3, r2, [r1]
 8016252:	613b      	str	r3, [r7, #16]
   return(result);
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d1e4      	bne.n	8016224 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801625a:	e007      	b.n	801626c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	699a      	ldr	r2, [r3, #24]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	f042 0208 	orr.w	r2, r2, #8
 801626a:	619a      	str	r2, [r3, #24]
}
 801626c:	bf00      	nop
 801626e:	37b0      	adds	r7, #176	; 0xb0
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}
 8016274:	effffffe 	.word	0xeffffffe
 8016278:	58000c00 	.word	0x58000c00
 801627c:	08015bb1 	.word	0x08015bb1

08016280 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b0ae      	sub	sp, #184	; 0xb8
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801628e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	69db      	ldr	r3, [r3, #28]
 8016298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	689b      	ldr	r3, [r3, #8]
 80162ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80162b6:	2b22      	cmp	r3, #34	; 0x22
 80162b8:	f040 8184 	bne.w	80165c4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80162c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80162c6:	e127      	b.n	8016518 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80162da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80162de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80162e2:	4013      	ands	r3, r2
 80162e4:	b29a      	uxth	r2, r3
 80162e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80162ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162f0:	1c9a      	adds	r2, r3, #2
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	3b01      	subs	r3, #1
 8016300:	b29a      	uxth	r2, r3
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	69db      	ldr	r3, [r3, #28]
 801630e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016316:	f003 0307 	and.w	r3, r3, #7
 801631a:	2b00      	cmp	r3, #0
 801631c:	d053      	beq.n	80163c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801631e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016322:	f003 0301 	and.w	r3, r3, #1
 8016326:	2b00      	cmp	r3, #0
 8016328:	d011      	beq.n	801634e <UART_RxISR_16BIT_FIFOEN+0xce>
 801632a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016332:	2b00      	cmp	r3, #0
 8016334:	d00b      	beq.n	801634e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2201      	movs	r2, #1
 801633c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016344:	f043 0201 	orr.w	r2, r3, #1
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801634e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016352:	f003 0302 	and.w	r3, r3, #2
 8016356:	2b00      	cmp	r3, #0
 8016358:	d011      	beq.n	801637e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801635a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801635e:	f003 0301 	and.w	r3, r3, #1
 8016362:	2b00      	cmp	r3, #0
 8016364:	d00b      	beq.n	801637e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	2202      	movs	r2, #2
 801636c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016374:	f043 0204 	orr.w	r2, r3, #4
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801637e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016382:	f003 0304 	and.w	r3, r3, #4
 8016386:	2b00      	cmp	r3, #0
 8016388:	d011      	beq.n	80163ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 801638a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801638e:	f003 0301 	and.w	r3, r3, #1
 8016392:	2b00      	cmp	r3, #0
 8016394:	d00b      	beq.n	80163ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	2204      	movs	r2, #4
 801639c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80163a4:	f043 0202 	orr.w	r2, r3, #2
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d006      	beq.n	80163c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7fe faf7 	bl	80149ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2200      	movs	r2, #0
 80163c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	f040 80a2 	bne.w	8016518 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80163dc:	e853 3f00 	ldrex	r3, [r3]
 80163e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80163e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80163e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80163e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	461a      	mov	r2, r3
 80163f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80163f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80163fa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80163fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016402:	e841 2300 	strex	r3, r2, [r1]
 8016406:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801640a:	2b00      	cmp	r3, #0
 801640c:	d1e2      	bne.n	80163d4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	3308      	adds	r3, #8
 8016414:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016418:	e853 3f00 	ldrex	r3, [r3]
 801641c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801641e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016420:	4b6e      	ldr	r3, [pc, #440]	; (80165dc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016422:	4013      	ands	r3, r2
 8016424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	3308      	adds	r3, #8
 801642e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016432:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016434:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016436:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016438:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801643a:	e841 2300 	strex	r3, r2, [r1]
 801643e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016442:	2b00      	cmp	r3, #0
 8016444:	d1e3      	bne.n	801640e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2220      	movs	r2, #32
 801644a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2200      	movs	r2, #0
 8016452:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2200      	movs	r2, #0
 8016458:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	4a60      	ldr	r2, [pc, #384]	; (80165e0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016460:	4293      	cmp	r3, r2
 8016462:	d021      	beq.n	80164a8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801646e:	2b00      	cmp	r3, #0
 8016470:	d01a      	beq.n	80164a8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801647a:	e853 3f00 	ldrex	r3, [r3]
 801647e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016482:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	461a      	mov	r2, r3
 8016490:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016494:	65bb      	str	r3, [r7, #88]	; 0x58
 8016496:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016498:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801649a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801649c:	e841 2300 	strex	r3, r2, [r1]
 80164a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80164a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d1e4      	bne.n	8016472 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164ac:	2b01      	cmp	r3, #1
 80164ae:	d130      	bne.n	8016512 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2200      	movs	r2, #0
 80164b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164be:	e853 3f00 	ldrex	r3, [r3]
 80164c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80164c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164c6:	f023 0310 	bic.w	r3, r3, #16
 80164ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	461a      	mov	r2, r3
 80164d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80164d8:	647b      	str	r3, [r7, #68]	; 0x44
 80164da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80164de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80164e0:	e841 2300 	strex	r3, r2, [r1]
 80164e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80164e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d1e4      	bne.n	80164b6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	69db      	ldr	r3, [r3, #28]
 80164f2:	f003 0310 	and.w	r3, r3, #16
 80164f6:	2b10      	cmp	r3, #16
 80164f8:	d103      	bne.n	8016502 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	2210      	movs	r2, #16
 8016500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016508:	4619      	mov	r1, r3
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f7fe fa58 	bl	80149c0 <HAL_UARTEx_RxEventCallback>
 8016510:	e002      	b.n	8016518 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f7ec f9ce 	bl	80028b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016518:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801651c:	2b00      	cmp	r3, #0
 801651e:	d006      	beq.n	801652e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016524:	f003 0320 	and.w	r3, r3, #32
 8016528:	2b00      	cmp	r3, #0
 801652a:	f47f aecd 	bne.w	80162c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016534:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016538:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801653c:	2b00      	cmp	r3, #0
 801653e:	d049      	beq.n	80165d4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016546:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801654a:	429a      	cmp	r2, r3
 801654c:	d242      	bcs.n	80165d4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	3308      	adds	r3, #8
 8016554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016558:	e853 3f00 	ldrex	r3, [r3]
 801655c:	623b      	str	r3, [r7, #32]
   return(result);
 801655e:	6a3b      	ldr	r3, [r7, #32]
 8016560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	3308      	adds	r3, #8
 801656e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016572:	633a      	str	r2, [r7, #48]	; 0x30
 8016574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801657a:	e841 2300 	strex	r3, r2, [r1]
 801657e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016582:	2b00      	cmp	r3, #0
 8016584:	d1e3      	bne.n	801654e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	4a16      	ldr	r2, [pc, #88]	; (80165e4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801658a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016592:	693b      	ldr	r3, [r7, #16]
 8016594:	e853 3f00 	ldrex	r3, [r3]
 8016598:	60fb      	str	r3, [r7, #12]
   return(result);
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	f043 0320 	orr.w	r3, r3, #32
 80165a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	461a      	mov	r2, r3
 80165aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80165ae:	61fb      	str	r3, [r7, #28]
 80165b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165b2:	69b9      	ldr	r1, [r7, #24]
 80165b4:	69fa      	ldr	r2, [r7, #28]
 80165b6:	e841 2300 	strex	r3, r2, [r1]
 80165ba:	617b      	str	r3, [r7, #20]
   return(result);
 80165bc:	697b      	ldr	r3, [r7, #20]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d1e4      	bne.n	801658c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80165c2:	e007      	b.n	80165d4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	699a      	ldr	r2, [r3, #24]
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	f042 0208 	orr.w	r2, r2, #8
 80165d2:	619a      	str	r2, [r3, #24]
}
 80165d4:	bf00      	nop
 80165d6:	37b8      	adds	r7, #184	; 0xb8
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}
 80165dc:	effffffe 	.word	0xeffffffe
 80165e0:	58000c00 	.word	0x58000c00
 80165e4:	08015d69 	.word	0x08015d69

080165e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b083      	sub	sp, #12
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80165f0:	bf00      	nop
 80165f2:	370c      	adds	r7, #12
 80165f4:	46bd      	mov	sp, r7
 80165f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fa:	4770      	bx	lr

080165fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80165fc:	b480      	push	{r7}
 80165fe:	b083      	sub	sp, #12
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016604:	bf00      	nop
 8016606:	370c      	adds	r7, #12
 8016608:	46bd      	mov	sp, r7
 801660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660e:	4770      	bx	lr

08016610 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016618:	bf00      	nop
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016624:	b480      	push	{r7}
 8016626:	b089      	sub	sp, #36	; 0x24
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016632:	2b01      	cmp	r3, #1
 8016634:	d101      	bne.n	801663a <HAL_UARTEx_EnableStopMode+0x16>
 8016636:	2302      	movs	r3, #2
 8016638:	e021      	b.n	801667e <HAL_UARTEx_EnableStopMode+0x5a>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2201      	movs	r2, #1
 801663e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	e853 3f00 	ldrex	r3, [r3]
 801664e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	f043 0302 	orr.w	r3, r3, #2
 8016656:	61fb      	str	r3, [r7, #28]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	461a      	mov	r2, r3
 801665e:	69fb      	ldr	r3, [r7, #28]
 8016660:	61bb      	str	r3, [r7, #24]
 8016662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016664:	6979      	ldr	r1, [r7, #20]
 8016666:	69ba      	ldr	r2, [r7, #24]
 8016668:	e841 2300 	strex	r3, r2, [r1]
 801666c:	613b      	str	r3, [r7, #16]
   return(result);
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d1e6      	bne.n	8016642 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2200      	movs	r2, #0
 8016678:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801667c:	2300      	movs	r3, #0
}
 801667e:	4618      	mov	r0, r3
 8016680:	3724      	adds	r7, #36	; 0x24
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr

0801668a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801668a:	b580      	push	{r7, lr}
 801668c:	b084      	sub	sp, #16
 801668e:	af00      	add	r7, sp, #0
 8016690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016698:	2b01      	cmp	r3, #1
 801669a:	d101      	bne.n	80166a0 <HAL_UARTEx_EnableFifoMode+0x16>
 801669c:	2302      	movs	r3, #2
 801669e:	e02b      	b.n	80166f8 <HAL_UARTEx_EnableFifoMode+0x6e>
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2201      	movs	r2, #1
 80166a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2224      	movs	r2, #36	; 0x24
 80166ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	681a      	ldr	r2, [r3, #0]
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	f022 0201 	bic.w	r2, r2, #1
 80166c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80166ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80166d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	68fa      	ldr	r2, [r7, #12]
 80166de:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f000 f8c3 	bl	801686c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2220      	movs	r2, #32
 80166ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2200      	movs	r2, #0
 80166f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80166f6:	2300      	movs	r3, #0
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3710      	adds	r7, #16
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}

08016700 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016700:	b480      	push	{r7}
 8016702:	b085      	sub	sp, #20
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801670e:	2b01      	cmp	r3, #1
 8016710:	d101      	bne.n	8016716 <HAL_UARTEx_DisableFifoMode+0x16>
 8016712:	2302      	movs	r3, #2
 8016714:	e027      	b.n	8016766 <HAL_UARTEx_DisableFifoMode+0x66>
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2201      	movs	r2, #1
 801671a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2224      	movs	r2, #36	; 0x24
 8016722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	f022 0201 	bic.w	r2, r2, #1
 801673c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016744:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2200      	movs	r2, #0
 801674a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	68fa      	ldr	r2, [r7, #12]
 8016752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2220      	movs	r2, #32
 8016758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016764:	2300      	movs	r3, #0
}
 8016766:	4618      	mov	r0, r3
 8016768:	3714      	adds	r7, #20
 801676a:	46bd      	mov	sp, r7
 801676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016770:	4770      	bx	lr

08016772 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016772:	b580      	push	{r7, lr}
 8016774:	b084      	sub	sp, #16
 8016776:	af00      	add	r7, sp, #0
 8016778:	6078      	str	r0, [r7, #4]
 801677a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016782:	2b01      	cmp	r3, #1
 8016784:	d101      	bne.n	801678a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016786:	2302      	movs	r3, #2
 8016788:	e02d      	b.n	80167e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2201      	movs	r2, #1
 801678e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2224      	movs	r2, #36	; 0x24
 8016796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	f022 0201 	bic.w	r2, r2, #1
 80167b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	689b      	ldr	r3, [r3, #8]
 80167b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	683a      	ldr	r2, [r7, #0]
 80167c2:	430a      	orrs	r2, r1
 80167c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f000 f850 	bl	801686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	68fa      	ldr	r2, [r7, #12]
 80167d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2220      	movs	r2, #32
 80167d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	2200      	movs	r2, #0
 80167e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80167e4:	2300      	movs	r3, #0
}
 80167e6:	4618      	mov	r0, r3
 80167e8:	3710      	adds	r7, #16
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}

080167ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80167ee:	b580      	push	{r7, lr}
 80167f0:	b084      	sub	sp, #16
 80167f2:	af00      	add	r7, sp, #0
 80167f4:	6078      	str	r0, [r7, #4]
 80167f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80167fe:	2b01      	cmp	r3, #1
 8016800:	d101      	bne.n	8016806 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016802:	2302      	movs	r3, #2
 8016804:	e02d      	b.n	8016862 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	2201      	movs	r2, #1
 801680a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	2224      	movs	r2, #36	; 0x24
 8016812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	681a      	ldr	r2, [r3, #0]
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	f022 0201 	bic.w	r2, r2, #1
 801682c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	689b      	ldr	r3, [r3, #8]
 8016834:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	683a      	ldr	r2, [r7, #0]
 801683e:	430a      	orrs	r2, r1
 8016840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f000 f812 	bl	801686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	68fa      	ldr	r2, [r7, #12]
 801684e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2220      	movs	r2, #32
 8016854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2200      	movs	r2, #0
 801685c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016860:	2300      	movs	r3, #0
}
 8016862:	4618      	mov	r0, r3
 8016864:	3710      	adds	r7, #16
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
	...

0801686c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801686c:	b480      	push	{r7}
 801686e:	b085      	sub	sp, #20
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016878:	2b00      	cmp	r3, #0
 801687a:	d108      	bne.n	801688e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2201      	movs	r2, #1
 8016880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2201      	movs	r2, #1
 8016888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801688c:	e031      	b.n	80168f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801688e:	2310      	movs	r3, #16
 8016890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016892:	2310      	movs	r3, #16
 8016894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	689b      	ldr	r3, [r3, #8]
 801689c:	0e5b      	lsrs	r3, r3, #25
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	f003 0307 	and.w	r3, r3, #7
 80168a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	689b      	ldr	r3, [r3, #8]
 80168ac:	0f5b      	lsrs	r3, r3, #29
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	f003 0307 	and.w	r3, r3, #7
 80168b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80168b6:	7bbb      	ldrb	r3, [r7, #14]
 80168b8:	7b3a      	ldrb	r2, [r7, #12]
 80168ba:	4911      	ldr	r1, [pc, #68]	; (8016900 <UARTEx_SetNbDataToProcess+0x94>)
 80168bc:	5c8a      	ldrb	r2, [r1, r2]
 80168be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80168c2:	7b3a      	ldrb	r2, [r7, #12]
 80168c4:	490f      	ldr	r1, [pc, #60]	; (8016904 <UARTEx_SetNbDataToProcess+0x98>)
 80168c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80168c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80168d4:	7bfb      	ldrb	r3, [r7, #15]
 80168d6:	7b7a      	ldrb	r2, [r7, #13]
 80168d8:	4909      	ldr	r1, [pc, #36]	; (8016900 <UARTEx_SetNbDataToProcess+0x94>)
 80168da:	5c8a      	ldrb	r2, [r1, r2]
 80168dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80168e0:	7b7a      	ldrb	r2, [r7, #13]
 80168e2:	4908      	ldr	r1, [pc, #32]	; (8016904 <UARTEx_SetNbDataToProcess+0x98>)
 80168e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80168e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80168f2:	bf00      	nop
 80168f4:	3714      	adds	r7, #20
 80168f6:	46bd      	mov	sp, r7
 80168f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fc:	4770      	bx	lr
 80168fe:	bf00      	nop
 8016900:	0801ac14 	.word	0x0801ac14
 8016904:	0801ac1c 	.word	0x0801ac1c

08016908 <__NVIC_SetPriority>:
{
 8016908:	b480      	push	{r7}
 801690a:	b083      	sub	sp, #12
 801690c:	af00      	add	r7, sp, #0
 801690e:	4603      	mov	r3, r0
 8016910:	6039      	str	r1, [r7, #0]
 8016912:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016918:	2b00      	cmp	r3, #0
 801691a:	db0a      	blt.n	8016932 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	b2da      	uxtb	r2, r3
 8016920:	490c      	ldr	r1, [pc, #48]	; (8016954 <__NVIC_SetPriority+0x4c>)
 8016922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016926:	0112      	lsls	r2, r2, #4
 8016928:	b2d2      	uxtb	r2, r2
 801692a:	440b      	add	r3, r1
 801692c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016930:	e00a      	b.n	8016948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	b2da      	uxtb	r2, r3
 8016936:	4908      	ldr	r1, [pc, #32]	; (8016958 <__NVIC_SetPriority+0x50>)
 8016938:	88fb      	ldrh	r3, [r7, #6]
 801693a:	f003 030f 	and.w	r3, r3, #15
 801693e:	3b04      	subs	r3, #4
 8016940:	0112      	lsls	r2, r2, #4
 8016942:	b2d2      	uxtb	r2, r2
 8016944:	440b      	add	r3, r1
 8016946:	761a      	strb	r2, [r3, #24]
}
 8016948:	bf00      	nop
 801694a:	370c      	adds	r7, #12
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr
 8016954:	e000e100 	.word	0xe000e100
 8016958:	e000ed00 	.word	0xe000ed00

0801695c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801695c:	b580      	push	{r7, lr}
 801695e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016960:	4b05      	ldr	r3, [pc, #20]	; (8016978 <SysTick_Handler+0x1c>)
 8016962:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016964:	f002 f958 	bl	8018c18 <xTaskGetSchedulerState>
 8016968:	4603      	mov	r3, r0
 801696a:	2b01      	cmp	r3, #1
 801696c:	d001      	beq.n	8016972 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801696e:	f002 ff7b 	bl	8019868 <xPortSysTickHandler>
  }
}
 8016972:	bf00      	nop
 8016974:	bd80      	pop	{r7, pc}
 8016976:	bf00      	nop
 8016978:	e000e010 	.word	0xe000e010

0801697c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801697c:	b580      	push	{r7, lr}
 801697e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016980:	2100      	movs	r1, #0
 8016982:	f06f 0004 	mvn.w	r0, #4
 8016986:	f7ff ffbf 	bl	8016908 <__NVIC_SetPriority>
#endif
}
 801698a:	bf00      	nop
 801698c:	bd80      	pop	{r7, pc}
	...

08016990 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016990:	b480      	push	{r7}
 8016992:	b083      	sub	sp, #12
 8016994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016996:	f3ef 8305 	mrs	r3, IPSR
 801699a:	603b      	str	r3, [r7, #0]
  return(result);
 801699c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d003      	beq.n	80169aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80169a2:	f06f 0305 	mvn.w	r3, #5
 80169a6:	607b      	str	r3, [r7, #4]
 80169a8:	e00c      	b.n	80169c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80169aa:	4b0a      	ldr	r3, [pc, #40]	; (80169d4 <osKernelInitialize+0x44>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d105      	bne.n	80169be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80169b2:	4b08      	ldr	r3, [pc, #32]	; (80169d4 <osKernelInitialize+0x44>)
 80169b4:	2201      	movs	r2, #1
 80169b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80169b8:	2300      	movs	r3, #0
 80169ba:	607b      	str	r3, [r7, #4]
 80169bc:	e002      	b.n	80169c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80169be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80169c4:	687b      	ldr	r3, [r7, #4]
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	370c      	adds	r7, #12
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr
 80169d2:	bf00      	nop
 80169d4:	2400205c 	.word	0x2400205c

080169d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80169de:	f3ef 8305 	mrs	r3, IPSR
 80169e2:	603b      	str	r3, [r7, #0]
  return(result);
 80169e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d003      	beq.n	80169f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80169ea:	f06f 0305 	mvn.w	r3, #5
 80169ee:	607b      	str	r3, [r7, #4]
 80169f0:	e010      	b.n	8016a14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80169f2:	4b0b      	ldr	r3, [pc, #44]	; (8016a20 <osKernelStart+0x48>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d109      	bne.n	8016a0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80169fa:	f7ff ffbf 	bl	801697c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80169fe:	4b08      	ldr	r3, [pc, #32]	; (8016a20 <osKernelStart+0x48>)
 8016a00:	2202      	movs	r2, #2
 8016a02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016a04:	f001 fc0c 	bl	8018220 <vTaskStartScheduler>
      stat = osOK;
 8016a08:	2300      	movs	r3, #0
 8016a0a:	607b      	str	r3, [r7, #4]
 8016a0c:	e002      	b.n	8016a14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016a14:	687b      	ldr	r3, [r7, #4]
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	3708      	adds	r7, #8
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}
 8016a1e:	bf00      	nop
 8016a20:	2400205c 	.word	0x2400205c

08016a24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b08e      	sub	sp, #56	; 0x38
 8016a28:	af04      	add	r7, sp, #16
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016a30:	2300      	movs	r3, #0
 8016a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a34:	f3ef 8305 	mrs	r3, IPSR
 8016a38:	617b      	str	r3, [r7, #20]
  return(result);
 8016a3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d17e      	bne.n	8016b3e <osThreadNew+0x11a>
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d07b      	beq.n	8016b3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016a46:	2380      	movs	r3, #128	; 0x80
 8016a48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016a4a:	2318      	movs	r3, #24
 8016a4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d045      	beq.n	8016aea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d002      	beq.n	8016a6c <osThreadNew+0x48>
        name = attr->name;
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	699b      	ldr	r3, [r3, #24]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d002      	beq.n	8016a7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	699b      	ldr	r3, [r3, #24]
 8016a78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016a7a:	69fb      	ldr	r3, [r7, #28]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d008      	beq.n	8016a92 <osThreadNew+0x6e>
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	2b38      	cmp	r3, #56	; 0x38
 8016a84:	d805      	bhi.n	8016a92 <osThreadNew+0x6e>
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	685b      	ldr	r3, [r3, #4]
 8016a8a:	f003 0301 	and.w	r3, r3, #1
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d001      	beq.n	8016a96 <osThreadNew+0x72>
        return (NULL);
 8016a92:	2300      	movs	r3, #0
 8016a94:	e054      	b.n	8016b40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	695b      	ldr	r3, [r3, #20]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d003      	beq.n	8016aa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	695b      	ldr	r3, [r3, #20]
 8016aa2:	089b      	lsrs	r3, r3, #2
 8016aa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	689b      	ldr	r3, [r3, #8]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d00e      	beq.n	8016acc <osThreadNew+0xa8>
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	68db      	ldr	r3, [r3, #12]
 8016ab2:	2b5b      	cmp	r3, #91	; 0x5b
 8016ab4:	d90a      	bls.n	8016acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d006      	beq.n	8016acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	695b      	ldr	r3, [r3, #20]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d002      	beq.n	8016acc <osThreadNew+0xa8>
        mem = 1;
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	61bb      	str	r3, [r7, #24]
 8016aca:	e010      	b.n	8016aee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	689b      	ldr	r3, [r3, #8]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d10c      	bne.n	8016aee <osThreadNew+0xca>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	68db      	ldr	r3, [r3, #12]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d108      	bne.n	8016aee <osThreadNew+0xca>
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	691b      	ldr	r3, [r3, #16]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d104      	bne.n	8016aee <osThreadNew+0xca>
          mem = 0;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	61bb      	str	r3, [r7, #24]
 8016ae8:	e001      	b.n	8016aee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016aea:	2300      	movs	r3, #0
 8016aec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016aee:	69bb      	ldr	r3, [r7, #24]
 8016af0:	2b01      	cmp	r3, #1
 8016af2:	d110      	bne.n	8016b16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016afc:	9202      	str	r2, [sp, #8]
 8016afe:	9301      	str	r3, [sp, #4]
 8016b00:	69fb      	ldr	r3, [r7, #28]
 8016b02:	9300      	str	r3, [sp, #0]
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	6a3a      	ldr	r2, [r7, #32]
 8016b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b0a:	68f8      	ldr	r0, [r7, #12]
 8016b0c:	f001 f9b2 	bl	8017e74 <xTaskCreateStatic>
 8016b10:	4603      	mov	r3, r0
 8016b12:	613b      	str	r3, [r7, #16]
 8016b14:	e013      	b.n	8016b3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d110      	bne.n	8016b3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016b1c:	6a3b      	ldr	r3, [r7, #32]
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	f107 0310 	add.w	r3, r7, #16
 8016b24:	9301      	str	r3, [sp, #4]
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	9300      	str	r3, [sp, #0]
 8016b2a:	68bb      	ldr	r3, [r7, #8]
 8016b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b2e:	68f8      	ldr	r0, [r7, #12]
 8016b30:	f001 f9fd 	bl	8017f2e <xTaskCreate>
 8016b34:	4603      	mov	r3, r0
 8016b36:	2b01      	cmp	r3, #1
 8016b38:	d001      	beq.n	8016b3e <osThreadNew+0x11a>
            hTask = NULL;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016b3e:	693b      	ldr	r3, [r7, #16]
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3728      	adds	r7, #40	; 0x28
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016b48:	b480      	push	{r7}
 8016b4a:	b083      	sub	sp, #12
 8016b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b4e:	f3ef 8305 	mrs	r3, IPSR
 8016b52:	603b      	str	r3, [r7, #0]
  return(result);
 8016b54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d003      	beq.n	8016b62 <osThreadYield+0x1a>
    stat = osErrorISR;
 8016b5a:	f06f 0305 	mvn.w	r3, #5
 8016b5e:	607b      	str	r3, [r7, #4]
 8016b60:	e009      	b.n	8016b76 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016b62:	2300      	movs	r3, #0
 8016b64:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016b66:	4b07      	ldr	r3, [pc, #28]	; (8016b84 <osThreadYield+0x3c>)
 8016b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b6c:	601a      	str	r2, [r3, #0]
 8016b6e:	f3bf 8f4f 	dsb	sy
 8016b72:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016b76:	687b      	ldr	r3, [r7, #4]
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	370c      	adds	r7, #12
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr
 8016b84:	e000ed04 	.word	0xe000ed04

08016b88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b90:	f3ef 8305 	mrs	r3, IPSR
 8016b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8016b96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d003      	beq.n	8016ba4 <osDelay+0x1c>
    stat = osErrorISR;
 8016b9c:	f06f 0305 	mvn.w	r3, #5
 8016ba0:	60fb      	str	r3, [r7, #12]
 8016ba2:	e007      	b.n	8016bb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d002      	beq.n	8016bb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	f001 fb02 	bl	80181b8 <vTaskDelay>
    }
  }

  return (stat);
 8016bb4:	68fb      	ldr	r3, [r7, #12]
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3710      	adds	r7, #16
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016bbe:	b580      	push	{r7, lr}
 8016bc0:	b086      	sub	sp, #24
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016bca:	f3ef 8305 	mrs	r3, IPSR
 8016bce:	60fb      	str	r3, [r7, #12]
  return(result);
 8016bd0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d12d      	bne.n	8016c32 <osEventFlagsNew+0x74>
    mem = -1;
 8016bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bda:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d015      	beq.n	8016c0e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	689b      	ldr	r3, [r3, #8]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d006      	beq.n	8016bf8 <osEventFlagsNew+0x3a>
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	68db      	ldr	r3, [r3, #12]
 8016bee:	2b1f      	cmp	r3, #31
 8016bf0:	d902      	bls.n	8016bf8 <osEventFlagsNew+0x3a>
        mem = 1;
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	613b      	str	r3, [r7, #16]
 8016bf6:	e00c      	b.n	8016c12 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	689b      	ldr	r3, [r3, #8]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d108      	bne.n	8016c12 <osEventFlagsNew+0x54>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d104      	bne.n	8016c12 <osEventFlagsNew+0x54>
          mem = 0;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	613b      	str	r3, [r7, #16]
 8016c0c:	e001      	b.n	8016c12 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d106      	bne.n	8016c26 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	689b      	ldr	r3, [r3, #8]
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f000 f91d 	bl	8016e5c <xEventGroupCreateStatic>
 8016c22:	6178      	str	r0, [r7, #20]
 8016c24:	e005      	b.n	8016c32 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016c26:	693b      	ldr	r3, [r7, #16]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d102      	bne.n	8016c32 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016c2c:	f000 f94d 	bl	8016eca <xEventGroupCreate>
 8016c30:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016c32:	697b      	ldr	r3, [r7, #20]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3718      	adds	r7, #24
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b086      	sub	sp, #24
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d004      	beq.n	8016c5a <osEventFlagsSet+0x1e>
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d003      	beq.n	8016c62 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016c5a:	f06f 0303 	mvn.w	r3, #3
 8016c5e:	617b      	str	r3, [r7, #20]
 8016c60:	e028      	b.n	8016cb4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c62:	f3ef 8305 	mrs	r3, IPSR
 8016c66:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d01d      	beq.n	8016caa <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016c72:	f107 0308 	add.w	r3, r7, #8
 8016c76:	461a      	mov	r2, r3
 8016c78:	6839      	ldr	r1, [r7, #0]
 8016c7a:	6938      	ldr	r0, [r7, #16]
 8016c7c:	f000 fb46 	bl	801730c <xEventGroupSetBitsFromISR>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d103      	bne.n	8016c8e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016c86:	f06f 0302 	mvn.w	r3, #2
 8016c8a:	617b      	str	r3, [r7, #20]
 8016c8c:	e012      	b.n	8016cb4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d00d      	beq.n	8016cb4 <osEventFlagsSet+0x78>
 8016c98:	4b09      	ldr	r3, [pc, #36]	; (8016cc0 <osEventFlagsSet+0x84>)
 8016c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c9e:	601a      	str	r2, [r3, #0]
 8016ca0:	f3bf 8f4f 	dsb	sy
 8016ca4:	f3bf 8f6f 	isb	sy
 8016ca8:	e004      	b.n	8016cb4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016caa:	6839      	ldr	r1, [r7, #0]
 8016cac:	6938      	ldr	r0, [r7, #16]
 8016cae:	f000 fa65 	bl	801717c <xEventGroupSetBits>
 8016cb2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016cb4:	697b      	ldr	r3, [r7, #20]
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	3718      	adds	r7, #24
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}
 8016cbe:	bf00      	nop
 8016cc0:	e000ed04 	.word	0xe000ed04

08016cc4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b086      	sub	sp, #24
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d004      	beq.n	8016ce2 <osEventFlagsClear+0x1e>
 8016cd8:	683b      	ldr	r3, [r7, #0]
 8016cda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d003      	beq.n	8016cea <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016ce2:	f06f 0303 	mvn.w	r3, #3
 8016ce6:	617b      	str	r3, [r7, #20]
 8016ce8:	e019      	b.n	8016d1e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016cea:	f3ef 8305 	mrs	r3, IPSR
 8016cee:	60fb      	str	r3, [r7, #12]
  return(result);
 8016cf0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d00e      	beq.n	8016d14 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016cf6:	6938      	ldr	r0, [r7, #16]
 8016cf8:	f000 fa1c 	bl	8017134 <xEventGroupGetBitsFromISR>
 8016cfc:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016cfe:	6839      	ldr	r1, [r7, #0]
 8016d00:	6938      	ldr	r0, [r7, #16]
 8016d02:	f000 fa03 	bl	801710c <xEventGroupClearBitsFromISR>
 8016d06:	4603      	mov	r3, r0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d108      	bne.n	8016d1e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016d0c:	f06f 0302 	mvn.w	r3, #2
 8016d10:	617b      	str	r3, [r7, #20]
 8016d12:	e004      	b.n	8016d1e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016d14:	6839      	ldr	r1, [r7, #0]
 8016d16:	6938      	ldr	r0, [r7, #16]
 8016d18:	f000 f9c0 	bl	801709c <xEventGroupClearBits>
 8016d1c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016d1e:	697b      	ldr	r3, [r7, #20]
}
 8016d20:	4618      	mov	r0, r3
 8016d22:	3718      	adds	r7, #24
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bd80      	pop	{r7, pc}

08016d28 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b08c      	sub	sp, #48	; 0x30
 8016d2c:	af02      	add	r7, sp, #8
 8016d2e:	60f8      	str	r0, [r7, #12]
 8016d30:	60b9      	str	r1, [r7, #8]
 8016d32:	607a      	str	r2, [r7, #4]
 8016d34:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d004      	beq.n	8016d4a <osEventFlagsWait+0x22>
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d003      	beq.n	8016d52 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016d4a:	f06f 0303 	mvn.w	r3, #3
 8016d4e:	61fb      	str	r3, [r7, #28]
 8016d50:	e04b      	b.n	8016dea <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d52:	f3ef 8305 	mrs	r3, IPSR
 8016d56:	617b      	str	r3, [r7, #20]
  return(result);
 8016d58:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d003      	beq.n	8016d66 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016d5e:	f06f 0305 	mvn.w	r3, #5
 8016d62:	61fb      	str	r3, [r7, #28]
 8016d64:	e041      	b.n	8016dea <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	f003 0301 	and.w	r3, r3, #1
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d002      	beq.n	8016d76 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016d70:	2301      	movs	r3, #1
 8016d72:	627b      	str	r3, [r7, #36]	; 0x24
 8016d74:	e001      	b.n	8016d7a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016d76:	2300      	movs	r3, #0
 8016d78:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f003 0302 	and.w	r3, r3, #2
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d002      	beq.n	8016d8a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016d84:	2300      	movs	r3, #0
 8016d86:	623b      	str	r3, [r7, #32]
 8016d88:	e001      	b.n	8016d8e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016d8a:	2301      	movs	r3, #1
 8016d8c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	9300      	str	r3, [sp, #0]
 8016d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d94:	6a3a      	ldr	r2, [r7, #32]
 8016d96:	68b9      	ldr	r1, [r7, #8]
 8016d98:	69b8      	ldr	r0, [r7, #24]
 8016d9a:	f000 f8b1 	bl	8016f00 <xEventGroupWaitBits>
 8016d9e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f003 0301 	and.w	r3, r3, #1
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d010      	beq.n	8016dcc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016daa:	68ba      	ldr	r2, [r7, #8]
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	4013      	ands	r3, r2
 8016db0:	68ba      	ldr	r2, [r7, #8]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d019      	beq.n	8016dea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d003      	beq.n	8016dc4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016dbc:	f06f 0301 	mvn.w	r3, #1
 8016dc0:	61fb      	str	r3, [r7, #28]
 8016dc2:	e012      	b.n	8016dea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016dc4:	f06f 0302 	mvn.w	r3, #2
 8016dc8:	61fb      	str	r3, [r7, #28]
 8016dca:	e00e      	b.n	8016dea <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016dcc:	68ba      	ldr	r2, [r7, #8]
 8016dce:	69fb      	ldr	r3, [r7, #28]
 8016dd0:	4013      	ands	r3, r2
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d109      	bne.n	8016dea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d003      	beq.n	8016de4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016ddc:	f06f 0301 	mvn.w	r3, #1
 8016de0:	61fb      	str	r3, [r7, #28]
 8016de2:	e002      	b.n	8016dea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016de4:	f06f 0302 	mvn.w	r3, #2
 8016de8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016dea:	69fb      	ldr	r3, [r7, #28]
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3728      	adds	r7, #40	; 0x28
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}

08016df4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016df4:	b480      	push	{r7}
 8016df6:	b085      	sub	sp, #20
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	60f8      	str	r0, [r7, #12]
 8016dfc:	60b9      	str	r1, [r7, #8]
 8016dfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	4a07      	ldr	r2, [pc, #28]	; (8016e20 <vApplicationGetIdleTaskMemory+0x2c>)
 8016e04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016e06:	68bb      	ldr	r3, [r7, #8]
 8016e08:	4a06      	ldr	r2, [pc, #24]	; (8016e24 <vApplicationGetIdleTaskMemory+0x30>)
 8016e0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2280      	movs	r2, #128	; 0x80
 8016e10:	601a      	str	r2, [r3, #0]
}
 8016e12:	bf00      	nop
 8016e14:	3714      	adds	r7, #20
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr
 8016e1e:	bf00      	nop
 8016e20:	24002060 	.word	0x24002060
 8016e24:	240020bc 	.word	0x240020bc

08016e28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016e28:	b480      	push	{r7}
 8016e2a:	b085      	sub	sp, #20
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	4a07      	ldr	r2, [pc, #28]	; (8016e54 <vApplicationGetTimerTaskMemory+0x2c>)
 8016e38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	4a06      	ldr	r2, [pc, #24]	; (8016e58 <vApplicationGetTimerTaskMemory+0x30>)
 8016e3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016e46:	601a      	str	r2, [r3, #0]
}
 8016e48:	bf00      	nop
 8016e4a:	3714      	adds	r7, #20
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e52:	4770      	bx	lr
 8016e54:	240022bc 	.word	0x240022bc
 8016e58:	24002318 	.word	0x24002318

08016e5c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b086      	sub	sp, #24
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d10a      	bne.n	8016e80 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e6e:	f383 8811 	msr	BASEPRI, r3
 8016e72:	f3bf 8f6f 	isb	sy
 8016e76:	f3bf 8f4f 	dsb	sy
 8016e7a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016e7c:	bf00      	nop
 8016e7e:	e7fe      	b.n	8016e7e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016e80:	2320      	movs	r3, #32
 8016e82:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8016e84:	68bb      	ldr	r3, [r7, #8]
 8016e86:	2b20      	cmp	r3, #32
 8016e88:	d00a      	beq.n	8016ea0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e8e:	f383 8811 	msr	BASEPRI, r3
 8016e92:	f3bf 8f6f 	isb	sy
 8016e96:	f3bf 8f4f 	dsb	sy
 8016e9a:	60fb      	str	r3, [r7, #12]
}
 8016e9c:	bf00      	nop
 8016e9e:	e7fe      	b.n	8016e9e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8016ea4:	697b      	ldr	r3, [r7, #20]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d00a      	beq.n	8016ec0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	2200      	movs	r2, #0
 8016eae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	3304      	adds	r3, #4
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 fa3d 	bl	8017334 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	2201      	movs	r2, #1
 8016ebe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016ec0:	697b      	ldr	r3, [r7, #20]
	}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3718      	adds	r7, #24
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b082      	sub	sp, #8
 8016ece:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016ed0:	2020      	movs	r0, #32
 8016ed2:	f002 fd59 	bl	8019988 <pvPortMalloc>
 8016ed6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d00a      	beq.n	8016ef4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	3304      	adds	r3, #4
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f000 fa23 	bl	8017334 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8016ef4:	687b      	ldr	r3, [r7, #4]
	}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3708      	adds	r7, #8
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bd80      	pop	{r7, pc}
	...

08016f00 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b090      	sub	sp, #64	; 0x40
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	60b9      	str	r1, [r7, #8]
 8016f0a:	607a      	str	r2, [r7, #4]
 8016f0c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8016f12:	2300      	movs	r3, #0
 8016f14:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016f16:	2300      	movs	r3, #0
 8016f18:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d10a      	bne.n	8016f36 <xEventGroupWaitBits+0x36>
	__asm volatile
 8016f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f24:	f383 8811 	msr	BASEPRI, r3
 8016f28:	f3bf 8f6f 	isb	sy
 8016f2c:	f3bf 8f4f 	dsb	sy
 8016f30:	623b      	str	r3, [r7, #32]
}
 8016f32:	bf00      	nop
 8016f34:	e7fe      	b.n	8016f34 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d00a      	beq.n	8016f56 <xEventGroupWaitBits+0x56>
	__asm volatile
 8016f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f44:	f383 8811 	msr	BASEPRI, r3
 8016f48:	f3bf 8f6f 	isb	sy
 8016f4c:	f3bf 8f4f 	dsb	sy
 8016f50:	61fb      	str	r3, [r7, #28]
}
 8016f52:	bf00      	nop
 8016f54:	e7fe      	b.n	8016f54 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d10a      	bne.n	8016f72 <xEventGroupWaitBits+0x72>
	__asm volatile
 8016f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f60:	f383 8811 	msr	BASEPRI, r3
 8016f64:	f3bf 8f6f 	isb	sy
 8016f68:	f3bf 8f4f 	dsb	sy
 8016f6c:	61bb      	str	r3, [r7, #24]
}
 8016f6e:	bf00      	nop
 8016f70:	e7fe      	b.n	8016f70 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016f72:	f001 fe51 	bl	8018c18 <xTaskGetSchedulerState>
 8016f76:	4603      	mov	r3, r0
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d102      	bne.n	8016f82 <xEventGroupWaitBits+0x82>
 8016f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d101      	bne.n	8016f86 <xEventGroupWaitBits+0x86>
 8016f82:	2301      	movs	r3, #1
 8016f84:	e000      	b.n	8016f88 <xEventGroupWaitBits+0x88>
 8016f86:	2300      	movs	r3, #0
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d10a      	bne.n	8016fa2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f90:	f383 8811 	msr	BASEPRI, r3
 8016f94:	f3bf 8f6f 	isb	sy
 8016f98:	f3bf 8f4f 	dsb	sy
 8016f9c:	617b      	str	r3, [r7, #20]
}
 8016f9e:	bf00      	nop
 8016fa0:	e7fe      	b.n	8016fa0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8016fa2:	f001 f9a3 	bl	80182ec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8016fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016fac:	683a      	ldr	r2, [r7, #0]
 8016fae:	68b9      	ldr	r1, [r7, #8]
 8016fb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fb2:	f000 f988 	bl	80172c6 <prvTestWaitCondition>
 8016fb6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d00e      	beq.n	8016fdc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d028      	beq.n	801701e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	43db      	mvns	r3, r3
 8016fd4:	401a      	ands	r2, r3
 8016fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fd8:	601a      	str	r2, [r3, #0]
 8016fda:	e020      	b.n	801701e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d104      	bne.n	8016fec <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8016fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8016fea:	e018      	b.n	801701e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d003      	beq.n	8016ffa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8016ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016ff8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d003      	beq.n	8017008 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017006:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801700a:	1d18      	adds	r0, r3, #4
 801700c:	68ba      	ldr	r2, [r7, #8]
 801700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017010:	4313      	orrs	r3, r2
 8017012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017014:	4619      	mov	r1, r3
 8017016:	f001 fb77 	bl	8018708 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801701a:	2300      	movs	r3, #0
 801701c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801701e:	f001 f973 	bl	8018308 <xTaskResumeAll>
 8017022:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017026:	2b00      	cmp	r3, #0
 8017028:	d031      	beq.n	801708e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702c:	2b00      	cmp	r3, #0
 801702e:	d107      	bne.n	8017040 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017030:	4b19      	ldr	r3, [pc, #100]	; (8017098 <xEventGroupWaitBits+0x198>)
 8017032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017036:	601a      	str	r2, [r3, #0]
 8017038:	f3bf 8f4f 	dsb	sy
 801703c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017040:	f001 fe76 	bl	8018d30 <uxTaskResetEventItemValue>
 8017044:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8017046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801704c:	2b00      	cmp	r3, #0
 801704e:	d11a      	bne.n	8017086 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017050:	f002 fb78 	bl	8019744 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801705a:	683a      	ldr	r2, [r7, #0]
 801705c:	68b9      	ldr	r1, [r7, #8]
 801705e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017060:	f000 f931 	bl	80172c6 <prvTestWaitCondition>
 8017064:	4603      	mov	r3, r0
 8017066:	2b00      	cmp	r3, #0
 8017068:	d009      	beq.n	801707e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d006      	beq.n	801707e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017072:	681a      	ldr	r2, [r3, #0]
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	43db      	mvns	r3, r3
 8017078:	401a      	ands	r2, r3
 801707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801707c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801707e:	2301      	movs	r3, #1
 8017080:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017082:	f002 fb8f 	bl	80197a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801708c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801708e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017090:	4618      	mov	r0, r3
 8017092:	3740      	adds	r7, #64	; 0x40
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	e000ed04 	.word	0xe000ed04

0801709c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b086      	sub	sp, #24
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d10a      	bne.n	80170c6 <xEventGroupClearBits+0x2a>
	__asm volatile
 80170b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170b4:	f383 8811 	msr	BASEPRI, r3
 80170b8:	f3bf 8f6f 	isb	sy
 80170bc:	f3bf 8f4f 	dsb	sy
 80170c0:	60fb      	str	r3, [r7, #12]
}
 80170c2:	bf00      	nop
 80170c4:	e7fe      	b.n	80170c4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d00a      	beq.n	80170e6 <xEventGroupClearBits+0x4a>
	__asm volatile
 80170d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d4:	f383 8811 	msr	BASEPRI, r3
 80170d8:	f3bf 8f6f 	isb	sy
 80170dc:	f3bf 8f4f 	dsb	sy
 80170e0:	60bb      	str	r3, [r7, #8]
}
 80170e2:	bf00      	nop
 80170e4:	e7fe      	b.n	80170e4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80170e6:	f002 fb2d 	bl	8019744 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80170f0:	697b      	ldr	r3, [r7, #20]
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	43db      	mvns	r3, r3
 80170f8:	401a      	ands	r2, r3
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80170fe:	f002 fb51 	bl	80197a4 <vPortExitCritical>

	return uxReturn;
 8017102:	693b      	ldr	r3, [r7, #16]
}
 8017104:	4618      	mov	r0, r3
 8017106:	3718      	adds	r7, #24
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801710c:	b580      	push	{r7, lr}
 801710e:	b084      	sub	sp, #16
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017116:	2300      	movs	r3, #0
 8017118:	683a      	ldr	r2, [r7, #0]
 801711a:	6879      	ldr	r1, [r7, #4]
 801711c:	4804      	ldr	r0, [pc, #16]	; (8017130 <xEventGroupClearBitsFromISR+0x24>)
 801711e:	f002 f9c1 	bl	80194a4 <xTimerPendFunctionCallFromISR>
 8017122:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017124:	68fb      	ldr	r3, [r7, #12]
	}
 8017126:	4618      	mov	r0, r3
 8017128:	3710      	adds	r7, #16
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	080172ad 	.word	0x080172ad

08017134 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017134:	b480      	push	{r7}
 8017136:	b089      	sub	sp, #36	; 0x24
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017140:	f3ef 8211 	mrs	r2, BASEPRI
 8017144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017148:	f383 8811 	msr	BASEPRI, r3
 801714c:	f3bf 8f6f 	isb	sy
 8017150:	f3bf 8f4f 	dsb	sy
 8017154:	60fa      	str	r2, [r7, #12]
 8017156:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017158:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801715a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801715c:	69fb      	ldr	r3, [r7, #28]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	617b      	str	r3, [r7, #20]
 8017162:	69bb      	ldr	r3, [r7, #24]
 8017164:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801716c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801716e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017170:	4618      	mov	r0, r3
 8017172:	3724      	adds	r7, #36	; 0x24
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr

0801717c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b08e      	sub	sp, #56	; 0x38
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017186:	2300      	movs	r3, #0
 8017188:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801718e:	2300      	movs	r3, #0
 8017190:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d10a      	bne.n	80171ae <xEventGroupSetBits+0x32>
	__asm volatile
 8017198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801719c:	f383 8811 	msr	BASEPRI, r3
 80171a0:	f3bf 8f6f 	isb	sy
 80171a4:	f3bf 8f4f 	dsb	sy
 80171a8:	613b      	str	r3, [r7, #16]
}
 80171aa:	bf00      	nop
 80171ac:	e7fe      	b.n	80171ac <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d00a      	beq.n	80171ce <xEventGroupSetBits+0x52>
	__asm volatile
 80171b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171bc:	f383 8811 	msr	BASEPRI, r3
 80171c0:	f3bf 8f6f 	isb	sy
 80171c4:	f3bf 8f4f 	dsb	sy
 80171c8:	60fb      	str	r3, [r7, #12]
}
 80171ca:	bf00      	nop
 80171cc:	e7fe      	b.n	80171cc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80171ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d0:	3304      	adds	r3, #4
 80171d2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d6:	3308      	adds	r3, #8
 80171d8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80171da:	f001 f887 	bl	80182ec <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80171de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e0:	68db      	ldr	r3, [r3, #12]
 80171e2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80171e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e6:	681a      	ldr	r2, [r3, #0]
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	431a      	orrs	r2, r3
 80171ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171ee:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80171f0:	e03c      	b.n	801726c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80171f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80171f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80171fe:	2300      	movs	r3, #0
 8017200:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017202:	69bb      	ldr	r3, [r7, #24]
 8017204:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017208:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801720a:	69bb      	ldr	r3, [r7, #24]
 801720c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017210:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017212:	697b      	ldr	r3, [r7, #20]
 8017214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017218:	2b00      	cmp	r3, #0
 801721a:	d108      	bne.n	801722e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	69bb      	ldr	r3, [r7, #24]
 8017222:	4013      	ands	r3, r2
 8017224:	2b00      	cmp	r3, #0
 8017226:	d00b      	beq.n	8017240 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017228:	2301      	movs	r3, #1
 801722a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801722c:	e008      	b.n	8017240 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	69bb      	ldr	r3, [r7, #24]
 8017234:	4013      	ands	r3, r2
 8017236:	69ba      	ldr	r2, [r7, #24]
 8017238:	429a      	cmp	r2, r3
 801723a:	d101      	bne.n	8017240 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801723c:	2301      	movs	r3, #1
 801723e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017242:	2b00      	cmp	r3, #0
 8017244:	d010      	beq.n	8017268 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8017246:	697b      	ldr	r3, [r7, #20]
 8017248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801724c:	2b00      	cmp	r3, #0
 801724e:	d003      	beq.n	8017258 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017252:	69bb      	ldr	r3, [r7, #24]
 8017254:	4313      	orrs	r3, r2
 8017256:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017260:	4619      	mov	r1, r3
 8017262:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017264:	f001 fb1c 	bl	80188a0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017268:	69fb      	ldr	r3, [r7, #28]
 801726a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801726c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801726e:	6a3b      	ldr	r3, [r7, #32]
 8017270:	429a      	cmp	r2, r3
 8017272:	d1be      	bne.n	80171f2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017276:	681a      	ldr	r2, [r3, #0]
 8017278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801727a:	43db      	mvns	r3, r3
 801727c:	401a      	ands	r2, r3
 801727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017280:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017282:	f001 f841 	bl	8018308 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017288:	681b      	ldr	r3, [r3, #0]
}
 801728a:	4618      	mov	r0, r3
 801728c:	3738      	adds	r7, #56	; 0x38
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}

08017292 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017292:	b580      	push	{r7, lr}
 8017294:	b082      	sub	sp, #8
 8017296:	af00      	add	r7, sp, #0
 8017298:	6078      	str	r0, [r7, #4]
 801729a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801729c:	6839      	ldr	r1, [r7, #0]
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f7ff ff6c 	bl	801717c <xEventGroupSetBits>
}
 80172a4:	bf00      	nop
 80172a6:	3708      	adds	r7, #8
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b082      	sub	sp, #8
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80172b6:	6839      	ldr	r1, [r7, #0]
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f7ff feef 	bl	801709c <xEventGroupClearBits>
}
 80172be:	bf00      	nop
 80172c0:	3708      	adds	r7, #8
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}

080172c6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80172c6:	b480      	push	{r7}
 80172c8:	b087      	sub	sp, #28
 80172ca:	af00      	add	r7, sp, #0
 80172cc:	60f8      	str	r0, [r7, #12]
 80172ce:	60b9      	str	r1, [r7, #8]
 80172d0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80172d2:	2300      	movs	r3, #0
 80172d4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d107      	bne.n	80172ec <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80172dc:	68fa      	ldr	r2, [r7, #12]
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	4013      	ands	r3, r2
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d00a      	beq.n	80172fc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80172e6:	2301      	movs	r3, #1
 80172e8:	617b      	str	r3, [r7, #20]
 80172ea:	e007      	b.n	80172fc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80172ec:	68fa      	ldr	r2, [r7, #12]
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	4013      	ands	r3, r2
 80172f2:	68ba      	ldr	r2, [r7, #8]
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d101      	bne.n	80172fc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80172f8:	2301      	movs	r3, #1
 80172fa:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80172fc:	697b      	ldr	r3, [r7, #20]
}
 80172fe:	4618      	mov	r0, r3
 8017300:	371c      	adds	r7, #28
 8017302:	46bd      	mov	sp, r7
 8017304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017308:	4770      	bx	lr
	...

0801730c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801730c:	b580      	push	{r7, lr}
 801730e:	b086      	sub	sp, #24
 8017310:	af00      	add	r7, sp, #0
 8017312:	60f8      	str	r0, [r7, #12]
 8017314:	60b9      	str	r1, [r7, #8]
 8017316:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	68ba      	ldr	r2, [r7, #8]
 801731c:	68f9      	ldr	r1, [r7, #12]
 801731e:	4804      	ldr	r0, [pc, #16]	; (8017330 <xEventGroupSetBitsFromISR+0x24>)
 8017320:	f002 f8c0 	bl	80194a4 <xTimerPendFunctionCallFromISR>
 8017324:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017326:	697b      	ldr	r3, [r7, #20]
	}
 8017328:	4618      	mov	r0, r3
 801732a:	3718      	adds	r7, #24
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	08017293 	.word	0x08017293

08017334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017334:	b480      	push	{r7}
 8017336:	b083      	sub	sp, #12
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f103 0208 	add.w	r2, r3, #8
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801734c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	f103 0208 	add.w	r2, r3, #8
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	f103 0208 	add.w	r2, r3, #8
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	2200      	movs	r2, #0
 8017366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017368:	bf00      	nop
 801736a:	370c      	adds	r7, #12
 801736c:	46bd      	mov	sp, r7
 801736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017372:	4770      	bx	lr

08017374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017374:	b480      	push	{r7}
 8017376:	b083      	sub	sp, #12
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2200      	movs	r2, #0
 8017380:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017382:	bf00      	nop
 8017384:	370c      	adds	r7, #12
 8017386:	46bd      	mov	sp, r7
 8017388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738c:	4770      	bx	lr

0801738e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801738e:	b480      	push	{r7}
 8017390:	b085      	sub	sp, #20
 8017392:	af00      	add	r7, sp, #0
 8017394:	6078      	str	r0, [r7, #4]
 8017396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	685b      	ldr	r3, [r3, #4]
 801739c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	68fa      	ldr	r2, [r7, #12]
 80173a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	689a      	ldr	r2, [r3, #8]
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	689b      	ldr	r3, [r3, #8]
 80173b0:	683a      	ldr	r2, [r7, #0]
 80173b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	683a      	ldr	r2, [r7, #0]
 80173b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	687a      	ldr	r2, [r7, #4]
 80173be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	1c5a      	adds	r2, r3, #1
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	601a      	str	r2, [r3, #0]
}
 80173ca:	bf00      	nop
 80173cc:	3714      	adds	r7, #20
 80173ce:	46bd      	mov	sp, r7
 80173d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d4:	4770      	bx	lr

080173d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80173d6:	b480      	push	{r7}
 80173d8:	b085      	sub	sp, #20
 80173da:	af00      	add	r7, sp, #0
 80173dc:	6078      	str	r0, [r7, #4]
 80173de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80173e6:	68bb      	ldr	r3, [r7, #8]
 80173e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173ec:	d103      	bne.n	80173f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	691b      	ldr	r3, [r3, #16]
 80173f2:	60fb      	str	r3, [r7, #12]
 80173f4:	e00c      	b.n	8017410 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	3308      	adds	r3, #8
 80173fa:	60fb      	str	r3, [r7, #12]
 80173fc:	e002      	b.n	8017404 <vListInsert+0x2e>
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	685b      	ldr	r3, [r3, #4]
 8017402:	60fb      	str	r3, [r7, #12]
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	685b      	ldr	r3, [r3, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	68ba      	ldr	r2, [r7, #8]
 801740c:	429a      	cmp	r2, r3
 801740e:	d2f6      	bcs.n	80173fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	685a      	ldr	r2, [r3, #4]
 8017414:	683b      	ldr	r3, [r7, #0]
 8017416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	685b      	ldr	r3, [r3, #4]
 801741c:	683a      	ldr	r2, [r7, #0]
 801741e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	68fa      	ldr	r2, [r7, #12]
 8017424:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	683a      	ldr	r2, [r7, #0]
 801742a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801742c:	683b      	ldr	r3, [r7, #0]
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	1c5a      	adds	r2, r3, #1
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	601a      	str	r2, [r3, #0]
}
 801743c:	bf00      	nop
 801743e:	3714      	adds	r7, #20
 8017440:	46bd      	mov	sp, r7
 8017442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017446:	4770      	bx	lr

08017448 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017448:	b480      	push	{r7}
 801744a:	b085      	sub	sp, #20
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	691b      	ldr	r3, [r3, #16]
 8017454:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	685b      	ldr	r3, [r3, #4]
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	6892      	ldr	r2, [r2, #8]
 801745e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	689b      	ldr	r3, [r3, #8]
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	6852      	ldr	r2, [r2, #4]
 8017468:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	685b      	ldr	r3, [r3, #4]
 801746e:	687a      	ldr	r2, [r7, #4]
 8017470:	429a      	cmp	r2, r3
 8017472:	d103      	bne.n	801747c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	689a      	ldr	r2, [r3, #8]
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	2200      	movs	r2, #0
 8017480:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	1e5a      	subs	r2, r3, #1
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	681b      	ldr	r3, [r3, #0]
}
 8017490:	4618      	mov	r0, r3
 8017492:	3714      	adds	r7, #20
 8017494:	46bd      	mov	sp, r7
 8017496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749a:	4770      	bx	lr

0801749c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d10a      	bne.n	80174c6 <xQueueGenericReset+0x2a>
	__asm volatile
 80174b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b4:	f383 8811 	msr	BASEPRI, r3
 80174b8:	f3bf 8f6f 	isb	sy
 80174bc:	f3bf 8f4f 	dsb	sy
 80174c0:	60bb      	str	r3, [r7, #8]
}
 80174c2:	bf00      	nop
 80174c4:	e7fe      	b.n	80174c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80174c6:	f002 f93d 	bl	8019744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	681a      	ldr	r2, [r3, #0]
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174d2:	68f9      	ldr	r1, [r7, #12]
 80174d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80174d6:	fb01 f303 	mul.w	r3, r1, r3
 80174da:	441a      	add	r2, r3
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	2200      	movs	r2, #0
 80174e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	681a      	ldr	r2, [r3, #0]
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	681a      	ldr	r2, [r3, #0]
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174f6:	3b01      	subs	r3, #1
 80174f8:	68f9      	ldr	r1, [r7, #12]
 80174fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80174fc:	fb01 f303 	mul.w	r3, r1, r3
 8017500:	441a      	add	r2, r3
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	22ff      	movs	r2, #255	; 0xff
 801750a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	22ff      	movs	r2, #255	; 0xff
 8017512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d114      	bne.n	8017546 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	691b      	ldr	r3, [r3, #16]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d01a      	beq.n	801755a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	3310      	adds	r3, #16
 8017528:	4618      	mov	r0, r3
 801752a:	f001 f955 	bl	80187d8 <xTaskRemoveFromEventList>
 801752e:	4603      	mov	r3, r0
 8017530:	2b00      	cmp	r3, #0
 8017532:	d012      	beq.n	801755a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017534:	4b0c      	ldr	r3, [pc, #48]	; (8017568 <xQueueGenericReset+0xcc>)
 8017536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801753a:	601a      	str	r2, [r3, #0]
 801753c:	f3bf 8f4f 	dsb	sy
 8017540:	f3bf 8f6f 	isb	sy
 8017544:	e009      	b.n	801755a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	3310      	adds	r3, #16
 801754a:	4618      	mov	r0, r3
 801754c:	f7ff fef2 	bl	8017334 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	3324      	adds	r3, #36	; 0x24
 8017554:	4618      	mov	r0, r3
 8017556:	f7ff feed 	bl	8017334 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801755a:	f002 f923 	bl	80197a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801755e:	2301      	movs	r3, #1
}
 8017560:	4618      	mov	r0, r3
 8017562:	3710      	adds	r7, #16
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}
 8017568:	e000ed04 	.word	0xe000ed04

0801756c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801756c:	b580      	push	{r7, lr}
 801756e:	b08e      	sub	sp, #56	; 0x38
 8017570:	af02      	add	r7, sp, #8
 8017572:	60f8      	str	r0, [r7, #12]
 8017574:	60b9      	str	r1, [r7, #8]
 8017576:	607a      	str	r2, [r7, #4]
 8017578:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d10a      	bne.n	8017596 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017584:	f383 8811 	msr	BASEPRI, r3
 8017588:	f3bf 8f6f 	isb	sy
 801758c:	f3bf 8f4f 	dsb	sy
 8017590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017592:	bf00      	nop
 8017594:	e7fe      	b.n	8017594 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d10a      	bne.n	80175b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a0:	f383 8811 	msr	BASEPRI, r3
 80175a4:	f3bf 8f6f 	isb	sy
 80175a8:	f3bf 8f4f 	dsb	sy
 80175ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80175ae:	bf00      	nop
 80175b0:	e7fe      	b.n	80175b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d002      	beq.n	80175be <xQueueGenericCreateStatic+0x52>
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d001      	beq.n	80175c2 <xQueueGenericCreateStatic+0x56>
 80175be:	2301      	movs	r3, #1
 80175c0:	e000      	b.n	80175c4 <xQueueGenericCreateStatic+0x58>
 80175c2:	2300      	movs	r3, #0
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d10a      	bne.n	80175de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80175c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175cc:	f383 8811 	msr	BASEPRI, r3
 80175d0:	f3bf 8f6f 	isb	sy
 80175d4:	f3bf 8f4f 	dsb	sy
 80175d8:	623b      	str	r3, [r7, #32]
}
 80175da:	bf00      	nop
 80175dc:	e7fe      	b.n	80175dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d102      	bne.n	80175ea <xQueueGenericCreateStatic+0x7e>
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d101      	bne.n	80175ee <xQueueGenericCreateStatic+0x82>
 80175ea:	2301      	movs	r3, #1
 80175ec:	e000      	b.n	80175f0 <xQueueGenericCreateStatic+0x84>
 80175ee:	2300      	movs	r3, #0
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d10a      	bne.n	801760a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80175f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175f8:	f383 8811 	msr	BASEPRI, r3
 80175fc:	f3bf 8f6f 	isb	sy
 8017600:	f3bf 8f4f 	dsb	sy
 8017604:	61fb      	str	r3, [r7, #28]
}
 8017606:	bf00      	nop
 8017608:	e7fe      	b.n	8017608 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801760a:	2350      	movs	r3, #80	; 0x50
 801760c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	2b50      	cmp	r3, #80	; 0x50
 8017612:	d00a      	beq.n	801762a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017618:	f383 8811 	msr	BASEPRI, r3
 801761c:	f3bf 8f6f 	isb	sy
 8017620:	f3bf 8f4f 	dsb	sy
 8017624:	61bb      	str	r3, [r7, #24]
}
 8017626:	bf00      	nop
 8017628:	e7fe      	b.n	8017628 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801762a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017632:	2b00      	cmp	r3, #0
 8017634:	d00d      	beq.n	8017652 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017638:	2201      	movs	r2, #1
 801763a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801763e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	4613      	mov	r3, r2
 8017648:	687a      	ldr	r2, [r7, #4]
 801764a:	68b9      	ldr	r1, [r7, #8]
 801764c:	68f8      	ldr	r0, [r7, #12]
 801764e:	f000 f805 	bl	801765c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017654:	4618      	mov	r0, r3
 8017656:	3730      	adds	r7, #48	; 0x30
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
 8017668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d103      	bne.n	8017678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017670:	69bb      	ldr	r3, [r7, #24]
 8017672:	69ba      	ldr	r2, [r7, #24]
 8017674:	601a      	str	r2, [r3, #0]
 8017676:	e002      	b.n	801767e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017678:	69bb      	ldr	r3, [r7, #24]
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801767e:	69bb      	ldr	r3, [r7, #24]
 8017680:	68fa      	ldr	r2, [r7, #12]
 8017682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017684:	69bb      	ldr	r3, [r7, #24]
 8017686:	68ba      	ldr	r2, [r7, #8]
 8017688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801768a:	2101      	movs	r1, #1
 801768c:	69b8      	ldr	r0, [r7, #24]
 801768e:	f7ff ff05 	bl	801749c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017692:	69bb      	ldr	r3, [r7, #24]
 8017694:	78fa      	ldrb	r2, [r7, #3]
 8017696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801769a:	bf00      	nop
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
	...

080176a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b08e      	sub	sp, #56	; 0x38
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	60f8      	str	r0, [r7, #12]
 80176ac:	60b9      	str	r1, [r7, #8]
 80176ae:	607a      	str	r2, [r7, #4]
 80176b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80176b2:	2300      	movs	r3, #0
 80176b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80176ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d10a      	bne.n	80176d6 <xQueueGenericSend+0x32>
	__asm volatile
 80176c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c4:	f383 8811 	msr	BASEPRI, r3
 80176c8:	f3bf 8f6f 	isb	sy
 80176cc:	f3bf 8f4f 	dsb	sy
 80176d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80176d2:	bf00      	nop
 80176d4:	e7fe      	b.n	80176d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d103      	bne.n	80176e4 <xQueueGenericSend+0x40>
 80176dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d101      	bne.n	80176e8 <xQueueGenericSend+0x44>
 80176e4:	2301      	movs	r3, #1
 80176e6:	e000      	b.n	80176ea <xQueueGenericSend+0x46>
 80176e8:	2300      	movs	r3, #0
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d10a      	bne.n	8017704 <xQueueGenericSend+0x60>
	__asm volatile
 80176ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f2:	f383 8811 	msr	BASEPRI, r3
 80176f6:	f3bf 8f6f 	isb	sy
 80176fa:	f3bf 8f4f 	dsb	sy
 80176fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017700:	bf00      	nop
 8017702:	e7fe      	b.n	8017702 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	2b02      	cmp	r3, #2
 8017708:	d103      	bne.n	8017712 <xQueueGenericSend+0x6e>
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801770e:	2b01      	cmp	r3, #1
 8017710:	d101      	bne.n	8017716 <xQueueGenericSend+0x72>
 8017712:	2301      	movs	r3, #1
 8017714:	e000      	b.n	8017718 <xQueueGenericSend+0x74>
 8017716:	2300      	movs	r3, #0
 8017718:	2b00      	cmp	r3, #0
 801771a:	d10a      	bne.n	8017732 <xQueueGenericSend+0x8e>
	__asm volatile
 801771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017720:	f383 8811 	msr	BASEPRI, r3
 8017724:	f3bf 8f6f 	isb	sy
 8017728:	f3bf 8f4f 	dsb	sy
 801772c:	623b      	str	r3, [r7, #32]
}
 801772e:	bf00      	nop
 8017730:	e7fe      	b.n	8017730 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017732:	f001 fa71 	bl	8018c18 <xTaskGetSchedulerState>
 8017736:	4603      	mov	r3, r0
 8017738:	2b00      	cmp	r3, #0
 801773a:	d102      	bne.n	8017742 <xQueueGenericSend+0x9e>
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d101      	bne.n	8017746 <xQueueGenericSend+0xa2>
 8017742:	2301      	movs	r3, #1
 8017744:	e000      	b.n	8017748 <xQueueGenericSend+0xa4>
 8017746:	2300      	movs	r3, #0
 8017748:	2b00      	cmp	r3, #0
 801774a:	d10a      	bne.n	8017762 <xQueueGenericSend+0xbe>
	__asm volatile
 801774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017750:	f383 8811 	msr	BASEPRI, r3
 8017754:	f3bf 8f6f 	isb	sy
 8017758:	f3bf 8f4f 	dsb	sy
 801775c:	61fb      	str	r3, [r7, #28]
}
 801775e:	bf00      	nop
 8017760:	e7fe      	b.n	8017760 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017762:	f001 ffef 	bl	8019744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801776e:	429a      	cmp	r2, r3
 8017770:	d302      	bcc.n	8017778 <xQueueGenericSend+0xd4>
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	2b02      	cmp	r3, #2
 8017776:	d129      	bne.n	80177cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017778:	683a      	ldr	r2, [r7, #0]
 801777a:	68b9      	ldr	r1, [r7, #8]
 801777c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801777e:	f000 fa0b 	bl	8017b98 <prvCopyDataToQueue>
 8017782:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017788:	2b00      	cmp	r3, #0
 801778a:	d010      	beq.n	80177ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801778e:	3324      	adds	r3, #36	; 0x24
 8017790:	4618      	mov	r0, r3
 8017792:	f001 f821 	bl	80187d8 <xTaskRemoveFromEventList>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d013      	beq.n	80177c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801779c:	4b3f      	ldr	r3, [pc, #252]	; (801789c <xQueueGenericSend+0x1f8>)
 801779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177a2:	601a      	str	r2, [r3, #0]
 80177a4:	f3bf 8f4f 	dsb	sy
 80177a8:	f3bf 8f6f 	isb	sy
 80177ac:	e00a      	b.n	80177c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80177ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d007      	beq.n	80177c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80177b4:	4b39      	ldr	r3, [pc, #228]	; (801789c <xQueueGenericSend+0x1f8>)
 80177b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177ba:	601a      	str	r2, [r3, #0]
 80177bc:	f3bf 8f4f 	dsb	sy
 80177c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80177c4:	f001 ffee 	bl	80197a4 <vPortExitCritical>
				return pdPASS;
 80177c8:	2301      	movs	r3, #1
 80177ca:	e063      	b.n	8017894 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d103      	bne.n	80177da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80177d2:	f001 ffe7 	bl	80197a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80177d6:	2300      	movs	r3, #0
 80177d8:	e05c      	b.n	8017894 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80177da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d106      	bne.n	80177ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80177e0:	f107 0314 	add.w	r3, r7, #20
 80177e4:	4618      	mov	r0, r3
 80177e6:	f001 f8bd 	bl	8018964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80177ea:	2301      	movs	r3, #1
 80177ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80177ee:	f001 ffd9 	bl	80197a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80177f2:	f000 fd7b 	bl	80182ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80177f6:	f001 ffa5 	bl	8019744 <vPortEnterCritical>
 80177fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017800:	b25b      	sxtb	r3, r3
 8017802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017806:	d103      	bne.n	8017810 <xQueueGenericSend+0x16c>
 8017808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801780a:	2200      	movs	r2, #0
 801780c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017816:	b25b      	sxtb	r3, r3
 8017818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801781c:	d103      	bne.n	8017826 <xQueueGenericSend+0x182>
 801781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017820:	2200      	movs	r2, #0
 8017822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017826:	f001 ffbd 	bl	80197a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801782a:	1d3a      	adds	r2, r7, #4
 801782c:	f107 0314 	add.w	r3, r7, #20
 8017830:	4611      	mov	r1, r2
 8017832:	4618      	mov	r0, r3
 8017834:	f001 f8ac 	bl	8018990 <xTaskCheckForTimeOut>
 8017838:	4603      	mov	r3, r0
 801783a:	2b00      	cmp	r3, #0
 801783c:	d124      	bne.n	8017888 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801783e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017840:	f000 faa2 	bl	8017d88 <prvIsQueueFull>
 8017844:	4603      	mov	r3, r0
 8017846:	2b00      	cmp	r3, #0
 8017848:	d018      	beq.n	801787c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784c:	3310      	adds	r3, #16
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	4611      	mov	r1, r2
 8017852:	4618      	mov	r0, r3
 8017854:	f000 ff34 	bl	80186c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801785a:	f000 fa2d 	bl	8017cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801785e:	f000 fd53 	bl	8018308 <xTaskResumeAll>
 8017862:	4603      	mov	r3, r0
 8017864:	2b00      	cmp	r3, #0
 8017866:	f47f af7c 	bne.w	8017762 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801786a:	4b0c      	ldr	r3, [pc, #48]	; (801789c <xQueueGenericSend+0x1f8>)
 801786c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017870:	601a      	str	r2, [r3, #0]
 8017872:	f3bf 8f4f 	dsb	sy
 8017876:	f3bf 8f6f 	isb	sy
 801787a:	e772      	b.n	8017762 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801787c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801787e:	f000 fa1b 	bl	8017cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017882:	f000 fd41 	bl	8018308 <xTaskResumeAll>
 8017886:	e76c      	b.n	8017762 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801788a:	f000 fa15 	bl	8017cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801788e:	f000 fd3b 	bl	8018308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017892:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017894:	4618      	mov	r0, r3
 8017896:	3738      	adds	r7, #56	; 0x38
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}
 801789c:	e000ed04 	.word	0xe000ed04

080178a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b090      	sub	sp, #64	; 0x40
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	60f8      	str	r0, [r7, #12]
 80178a8:	60b9      	str	r1, [r7, #8]
 80178aa:	607a      	str	r2, [r7, #4]
 80178ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80178b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d10a      	bne.n	80178ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80178b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178bc:	f383 8811 	msr	BASEPRI, r3
 80178c0:	f3bf 8f6f 	isb	sy
 80178c4:	f3bf 8f4f 	dsb	sy
 80178c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80178ca:	bf00      	nop
 80178cc:	e7fe      	b.n	80178cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d103      	bne.n	80178dc <xQueueGenericSendFromISR+0x3c>
 80178d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d101      	bne.n	80178e0 <xQueueGenericSendFromISR+0x40>
 80178dc:	2301      	movs	r3, #1
 80178de:	e000      	b.n	80178e2 <xQueueGenericSendFromISR+0x42>
 80178e0:	2300      	movs	r3, #0
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d10a      	bne.n	80178fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80178e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ea:	f383 8811 	msr	BASEPRI, r3
 80178ee:	f3bf 8f6f 	isb	sy
 80178f2:	f3bf 8f4f 	dsb	sy
 80178f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80178f8:	bf00      	nop
 80178fa:	e7fe      	b.n	80178fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	2b02      	cmp	r3, #2
 8017900:	d103      	bne.n	801790a <xQueueGenericSendFromISR+0x6a>
 8017902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017906:	2b01      	cmp	r3, #1
 8017908:	d101      	bne.n	801790e <xQueueGenericSendFromISR+0x6e>
 801790a:	2301      	movs	r3, #1
 801790c:	e000      	b.n	8017910 <xQueueGenericSendFromISR+0x70>
 801790e:	2300      	movs	r3, #0
 8017910:	2b00      	cmp	r3, #0
 8017912:	d10a      	bne.n	801792a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017918:	f383 8811 	msr	BASEPRI, r3
 801791c:	f3bf 8f6f 	isb	sy
 8017920:	f3bf 8f4f 	dsb	sy
 8017924:	623b      	str	r3, [r7, #32]
}
 8017926:	bf00      	nop
 8017928:	e7fe      	b.n	8017928 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801792a:	f001 ffed 	bl	8019908 <vPortValidateInterruptPriority>
	__asm volatile
 801792e:	f3ef 8211 	mrs	r2, BASEPRI
 8017932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017936:	f383 8811 	msr	BASEPRI, r3
 801793a:	f3bf 8f6f 	isb	sy
 801793e:	f3bf 8f4f 	dsb	sy
 8017942:	61fa      	str	r2, [r7, #28]
 8017944:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017946:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017948:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801794c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017952:	429a      	cmp	r2, r3
 8017954:	d302      	bcc.n	801795c <xQueueGenericSendFromISR+0xbc>
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	2b02      	cmp	r3, #2
 801795a:	d12f      	bne.n	80179bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801795e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801796a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801796c:	683a      	ldr	r2, [r7, #0]
 801796e:	68b9      	ldr	r1, [r7, #8]
 8017970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017972:	f000 f911 	bl	8017b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017976:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801797a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801797e:	d112      	bne.n	80179a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017984:	2b00      	cmp	r3, #0
 8017986:	d016      	beq.n	80179b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801798a:	3324      	adds	r3, #36	; 0x24
 801798c:	4618      	mov	r0, r3
 801798e:	f000 ff23 	bl	80187d8 <xTaskRemoveFromEventList>
 8017992:	4603      	mov	r3, r0
 8017994:	2b00      	cmp	r3, #0
 8017996:	d00e      	beq.n	80179b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d00b      	beq.n	80179b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2201      	movs	r2, #1
 80179a2:	601a      	str	r2, [r3, #0]
 80179a4:	e007      	b.n	80179b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80179a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80179aa:	3301      	adds	r3, #1
 80179ac:	b2db      	uxtb	r3, r3
 80179ae:	b25a      	sxtb	r2, r3
 80179b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80179b6:	2301      	movs	r3, #1
 80179b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80179ba:	e001      	b.n	80179c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80179bc:	2300      	movs	r3, #0
 80179be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80179c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179c2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	f383 8811 	msr	BASEPRI, r3
}
 80179ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80179cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3740      	adds	r7, #64	; 0x40
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
	...

080179d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b08c      	sub	sp, #48	; 0x30
 80179dc:	af00      	add	r7, sp, #0
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	60b9      	str	r1, [r7, #8]
 80179e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80179e4:	2300      	movs	r3, #0
 80179e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80179ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d10a      	bne.n	8017a08 <xQueueReceive+0x30>
	__asm volatile
 80179f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f6:	f383 8811 	msr	BASEPRI, r3
 80179fa:	f3bf 8f6f 	isb	sy
 80179fe:	f3bf 8f4f 	dsb	sy
 8017a02:	623b      	str	r3, [r7, #32]
}
 8017a04:	bf00      	nop
 8017a06:	e7fe      	b.n	8017a06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d103      	bne.n	8017a16 <xQueueReceive+0x3e>
 8017a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d101      	bne.n	8017a1a <xQueueReceive+0x42>
 8017a16:	2301      	movs	r3, #1
 8017a18:	e000      	b.n	8017a1c <xQueueReceive+0x44>
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d10a      	bne.n	8017a36 <xQueueReceive+0x5e>
	__asm volatile
 8017a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a24:	f383 8811 	msr	BASEPRI, r3
 8017a28:	f3bf 8f6f 	isb	sy
 8017a2c:	f3bf 8f4f 	dsb	sy
 8017a30:	61fb      	str	r3, [r7, #28]
}
 8017a32:	bf00      	nop
 8017a34:	e7fe      	b.n	8017a34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a36:	f001 f8ef 	bl	8018c18 <xTaskGetSchedulerState>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d102      	bne.n	8017a46 <xQueueReceive+0x6e>
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d101      	bne.n	8017a4a <xQueueReceive+0x72>
 8017a46:	2301      	movs	r3, #1
 8017a48:	e000      	b.n	8017a4c <xQueueReceive+0x74>
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d10a      	bne.n	8017a66 <xQueueReceive+0x8e>
	__asm volatile
 8017a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a54:	f383 8811 	msr	BASEPRI, r3
 8017a58:	f3bf 8f6f 	isb	sy
 8017a5c:	f3bf 8f4f 	dsb	sy
 8017a60:	61bb      	str	r3, [r7, #24]
}
 8017a62:	bf00      	nop
 8017a64:	e7fe      	b.n	8017a64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017a66:	f001 fe6d 	bl	8019744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d01f      	beq.n	8017ab6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017a76:	68b9      	ldr	r1, [r7, #8]
 8017a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a7a:	f000 f8f7 	bl	8017c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a80:	1e5a      	subs	r2, r3, #1
 8017a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a88:	691b      	ldr	r3, [r3, #16]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d00f      	beq.n	8017aae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a90:	3310      	adds	r3, #16
 8017a92:	4618      	mov	r0, r3
 8017a94:	f000 fea0 	bl	80187d8 <xTaskRemoveFromEventList>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d007      	beq.n	8017aae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017a9e:	4b3d      	ldr	r3, [pc, #244]	; (8017b94 <xQueueReceive+0x1bc>)
 8017aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017aa4:	601a      	str	r2, [r3, #0]
 8017aa6:	f3bf 8f4f 	dsb	sy
 8017aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017aae:	f001 fe79 	bl	80197a4 <vPortExitCritical>
				return pdPASS;
 8017ab2:	2301      	movs	r3, #1
 8017ab4:	e069      	b.n	8017b8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d103      	bne.n	8017ac4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017abc:	f001 fe72 	bl	80197a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	e062      	b.n	8017b8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d106      	bne.n	8017ad8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017aca:	f107 0310 	add.w	r3, r7, #16
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f000 ff48 	bl	8018964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017ad8:	f001 fe64 	bl	80197a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017adc:	f000 fc06 	bl	80182ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017ae0:	f001 fe30 	bl	8019744 <vPortEnterCritical>
 8017ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017aea:	b25b      	sxtb	r3, r3
 8017aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017af0:	d103      	bne.n	8017afa <xQueueReceive+0x122>
 8017af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017af4:	2200      	movs	r2, #0
 8017af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b00:	b25b      	sxtb	r3, r3
 8017b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b06:	d103      	bne.n	8017b10 <xQueueReceive+0x138>
 8017b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b10:	f001 fe48 	bl	80197a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017b14:	1d3a      	adds	r2, r7, #4
 8017b16:	f107 0310 	add.w	r3, r7, #16
 8017b1a:	4611      	mov	r1, r2
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f000 ff37 	bl	8018990 <xTaskCheckForTimeOut>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d123      	bne.n	8017b70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b2a:	f000 f917 	bl	8017d5c <prvIsQueueEmpty>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d017      	beq.n	8017b64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b36:	3324      	adds	r3, #36	; 0x24
 8017b38:	687a      	ldr	r2, [r7, #4]
 8017b3a:	4611      	mov	r1, r2
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f000 fdbf 	bl	80186c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b44:	f000 f8b8 	bl	8017cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017b48:	f000 fbde 	bl	8018308 <xTaskResumeAll>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d189      	bne.n	8017a66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017b52:	4b10      	ldr	r3, [pc, #64]	; (8017b94 <xQueueReceive+0x1bc>)
 8017b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b58:	601a      	str	r2, [r3, #0]
 8017b5a:	f3bf 8f4f 	dsb	sy
 8017b5e:	f3bf 8f6f 	isb	sy
 8017b62:	e780      	b.n	8017a66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b66:	f000 f8a7 	bl	8017cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017b6a:	f000 fbcd 	bl	8018308 <xTaskResumeAll>
 8017b6e:	e77a      	b.n	8017a66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b72:	f000 f8a1 	bl	8017cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017b76:	f000 fbc7 	bl	8018308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b7c:	f000 f8ee 	bl	8017d5c <prvIsQueueEmpty>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	f43f af6f 	beq.w	8017a66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	3730      	adds	r7, #48	; 0x30
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	e000ed04 	.word	0xe000ed04

08017b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b086      	sub	sp, #24
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	60f8      	str	r0, [r7, #12]
 8017ba0:	60b9      	str	r1, [r7, #8]
 8017ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d10d      	bne.n	8017bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d14d      	bne.n	8017c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	689b      	ldr	r3, [r3, #8]
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f001 f846 	bl	8018c54 <xTaskPriorityDisinherit>
 8017bc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	609a      	str	r2, [r3, #8]
 8017bd0:	e043      	b.n	8017c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d119      	bne.n	8017c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	6858      	ldr	r0, [r3, #4]
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017be0:	461a      	mov	r2, r3
 8017be2:	68b9      	ldr	r1, [r7, #8]
 8017be4:	f002 f8e4 	bl	8019db0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	685a      	ldr	r2, [r3, #4]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bf0:	441a      	add	r2, r3
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	685a      	ldr	r2, [r3, #4]
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	689b      	ldr	r3, [r3, #8]
 8017bfe:	429a      	cmp	r2, r3
 8017c00:	d32b      	bcc.n	8017c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	681a      	ldr	r2, [r3, #0]
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	605a      	str	r2, [r3, #4]
 8017c0a:	e026      	b.n	8017c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	68d8      	ldr	r0, [r3, #12]
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c14:	461a      	mov	r2, r3
 8017c16:	68b9      	ldr	r1, [r7, #8]
 8017c18:	f002 f8ca 	bl	8019db0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	68da      	ldr	r2, [r3, #12]
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c24:	425b      	negs	r3, r3
 8017c26:	441a      	add	r2, r3
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	68da      	ldr	r2, [r3, #12]
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	429a      	cmp	r2, r3
 8017c36:	d207      	bcs.n	8017c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	689a      	ldr	r2, [r3, #8]
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c40:	425b      	negs	r3, r3
 8017c42:	441a      	add	r2, r3
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2b02      	cmp	r3, #2
 8017c4c:	d105      	bne.n	8017c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017c4e:	693b      	ldr	r3, [r7, #16]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d002      	beq.n	8017c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	3b01      	subs	r3, #1
 8017c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017c5a:	693b      	ldr	r3, [r7, #16]
 8017c5c:	1c5a      	adds	r2, r3, #1
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017c62:	697b      	ldr	r3, [r7, #20]
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3718      	adds	r7, #24
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d018      	beq.n	8017cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	68da      	ldr	r2, [r3, #12]
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c86:	441a      	add	r2, r3
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	68da      	ldr	r2, [r3, #12]
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	689b      	ldr	r3, [r3, #8]
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d303      	bcc.n	8017ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	68d9      	ldr	r1, [r3, #12]
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ca8:	461a      	mov	r2, r3
 8017caa:	6838      	ldr	r0, [r7, #0]
 8017cac:	f002 f880 	bl	8019db0 <memcpy>
	}
}
 8017cb0:	bf00      	nop
 8017cb2:	3708      	adds	r7, #8
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b084      	sub	sp, #16
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017cc0:	f001 fd40 	bl	8019744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017ccc:	e011      	b.n	8017cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d012      	beq.n	8017cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	3324      	adds	r3, #36	; 0x24
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f000 fd7c 	bl	80187d8 <xTaskRemoveFromEventList>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d001      	beq.n	8017cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017ce6:	f000 feb5 	bl	8018a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017cea:	7bfb      	ldrb	r3, [r7, #15]
 8017cec:	3b01      	subs	r3, #1
 8017cee:	b2db      	uxtb	r3, r3
 8017cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	dce9      	bgt.n	8017cce <prvUnlockQueue+0x16>
 8017cfa:	e000      	b.n	8017cfe <prvUnlockQueue+0x46>
					break;
 8017cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	22ff      	movs	r2, #255	; 0xff
 8017d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017d06:	f001 fd4d 	bl	80197a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017d0a:	f001 fd1b 	bl	8019744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017d16:	e011      	b.n	8017d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	691b      	ldr	r3, [r3, #16]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d012      	beq.n	8017d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	3310      	adds	r3, #16
 8017d24:	4618      	mov	r0, r3
 8017d26:	f000 fd57 	bl	80187d8 <xTaskRemoveFromEventList>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d001      	beq.n	8017d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017d30:	f000 fe90 	bl	8018a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017d34:	7bbb      	ldrb	r3, [r7, #14]
 8017d36:	3b01      	subs	r3, #1
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	dce9      	bgt.n	8017d18 <prvUnlockQueue+0x60>
 8017d44:	e000      	b.n	8017d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	22ff      	movs	r2, #255	; 0xff
 8017d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017d50:	f001 fd28 	bl	80197a4 <vPortExitCritical>
}
 8017d54:	bf00      	nop
 8017d56:	3710      	adds	r7, #16
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}

08017d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b084      	sub	sp, #16
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d64:	f001 fcee 	bl	8019744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d102      	bne.n	8017d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017d70:	2301      	movs	r3, #1
 8017d72:	60fb      	str	r3, [r7, #12]
 8017d74:	e001      	b.n	8017d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017d76:	2300      	movs	r3, #0
 8017d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d7a:	f001 fd13 	bl	80197a4 <vPortExitCritical>

	return xReturn;
 8017d7e:	68fb      	ldr	r3, [r7, #12]
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3710      	adds	r7, #16
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b084      	sub	sp, #16
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d90:	f001 fcd8 	bl	8019744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d9c:	429a      	cmp	r2, r3
 8017d9e:	d102      	bne.n	8017da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017da0:	2301      	movs	r3, #1
 8017da2:	60fb      	str	r3, [r7, #12]
 8017da4:	e001      	b.n	8017daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017da6:	2300      	movs	r3, #0
 8017da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017daa:	f001 fcfb 	bl	80197a4 <vPortExitCritical>

	return xReturn;
 8017dae:	68fb      	ldr	r3, [r7, #12]
}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3710      	adds	r7, #16
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}

08017db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017db8:	b480      	push	{r7}
 8017dba:	b085      	sub	sp, #20
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
 8017dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	60fb      	str	r3, [r7, #12]
 8017dc6:	e014      	b.n	8017df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017dc8:	4a0f      	ldr	r2, [pc, #60]	; (8017e08 <vQueueAddToRegistry+0x50>)
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d10b      	bne.n	8017dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017dd4:	490c      	ldr	r1, [pc, #48]	; (8017e08 <vQueueAddToRegistry+0x50>)
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	683a      	ldr	r2, [r7, #0]
 8017dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017dde:	4a0a      	ldr	r2, [pc, #40]	; (8017e08 <vQueueAddToRegistry+0x50>)
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	00db      	lsls	r3, r3, #3
 8017de4:	4413      	add	r3, r2
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017dea:	e006      	b.n	8017dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	3301      	adds	r3, #1
 8017df0:	60fb      	str	r3, [r7, #12]
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	2b07      	cmp	r3, #7
 8017df6:	d9e7      	bls.n	8017dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017df8:	bf00      	nop
 8017dfa:	bf00      	nop
 8017dfc:	3714      	adds	r7, #20
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e04:	4770      	bx	lr
 8017e06:	bf00      	nop
 8017e08:	24002718 	.word	0x24002718

08017e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b086      	sub	sp, #24
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017e1c:	f001 fc92 	bl	8019744 <vPortEnterCritical>
 8017e20:	697b      	ldr	r3, [r7, #20]
 8017e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e26:	b25b      	sxtb	r3, r3
 8017e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e2c:	d103      	bne.n	8017e36 <vQueueWaitForMessageRestricted+0x2a>
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	2200      	movs	r2, #0
 8017e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e36:	697b      	ldr	r3, [r7, #20]
 8017e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e3c:	b25b      	sxtb	r3, r3
 8017e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e42:	d103      	bne.n	8017e4c <vQueueWaitForMessageRestricted+0x40>
 8017e44:	697b      	ldr	r3, [r7, #20]
 8017e46:	2200      	movs	r2, #0
 8017e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017e4c:	f001 fcaa 	bl	80197a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017e50:	697b      	ldr	r3, [r7, #20]
 8017e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d106      	bne.n	8017e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	3324      	adds	r3, #36	; 0x24
 8017e5c:	687a      	ldr	r2, [r7, #4]
 8017e5e:	68b9      	ldr	r1, [r7, #8]
 8017e60:	4618      	mov	r0, r3
 8017e62:	f000 fc8d 	bl	8018780 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017e66:	6978      	ldr	r0, [r7, #20]
 8017e68:	f7ff ff26 	bl	8017cb8 <prvUnlockQueue>
	}
 8017e6c:	bf00      	nop
 8017e6e:	3718      	adds	r7, #24
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b08e      	sub	sp, #56	; 0x38
 8017e78:	af04      	add	r7, sp, #16
 8017e7a:	60f8      	str	r0, [r7, #12]
 8017e7c:	60b9      	str	r1, [r7, #8]
 8017e7e:	607a      	str	r2, [r7, #4]
 8017e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d10a      	bne.n	8017e9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8017e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e8c:	f383 8811 	msr	BASEPRI, r3
 8017e90:	f3bf 8f6f 	isb	sy
 8017e94:	f3bf 8f4f 	dsb	sy
 8017e98:	623b      	str	r3, [r7, #32]
}
 8017e9a:	bf00      	nop
 8017e9c:	e7fe      	b.n	8017e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d10a      	bne.n	8017eba <xTaskCreateStatic+0x46>
	__asm volatile
 8017ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ea8:	f383 8811 	msr	BASEPRI, r3
 8017eac:	f3bf 8f6f 	isb	sy
 8017eb0:	f3bf 8f4f 	dsb	sy
 8017eb4:	61fb      	str	r3, [r7, #28]
}
 8017eb6:	bf00      	nop
 8017eb8:	e7fe      	b.n	8017eb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017eba:	235c      	movs	r3, #92	; 0x5c
 8017ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017ebe:	693b      	ldr	r3, [r7, #16]
 8017ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8017ec2:	d00a      	beq.n	8017eda <xTaskCreateStatic+0x66>
	__asm volatile
 8017ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ec8:	f383 8811 	msr	BASEPRI, r3
 8017ecc:	f3bf 8f6f 	isb	sy
 8017ed0:	f3bf 8f4f 	dsb	sy
 8017ed4:	61bb      	str	r3, [r7, #24]
}
 8017ed6:	bf00      	nop
 8017ed8:	e7fe      	b.n	8017ed8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d01e      	beq.n	8017f20 <xTaskCreateStatic+0xac>
 8017ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d01b      	beq.n	8017f20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef4:	2202      	movs	r2, #2
 8017ef6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017efa:	2300      	movs	r3, #0
 8017efc:	9303      	str	r3, [sp, #12]
 8017efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f00:	9302      	str	r3, [sp, #8]
 8017f02:	f107 0314 	add.w	r3, r7, #20
 8017f06:	9301      	str	r3, [sp, #4]
 8017f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0a:	9300      	str	r3, [sp, #0]
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	687a      	ldr	r2, [r7, #4]
 8017f10:	68b9      	ldr	r1, [r7, #8]
 8017f12:	68f8      	ldr	r0, [r7, #12]
 8017f14:	f000 f850 	bl	8017fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f1a:	f000 f8dd 	bl	80180d8 <prvAddNewTaskToReadyList>
 8017f1e:	e001      	b.n	8017f24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017f20:	2300      	movs	r3, #0
 8017f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017f24:	697b      	ldr	r3, [r7, #20]
	}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3728      	adds	r7, #40	; 0x28
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}

08017f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017f2e:	b580      	push	{r7, lr}
 8017f30:	b08c      	sub	sp, #48	; 0x30
 8017f32:	af04      	add	r7, sp, #16
 8017f34:	60f8      	str	r0, [r7, #12]
 8017f36:	60b9      	str	r1, [r7, #8]
 8017f38:	603b      	str	r3, [r7, #0]
 8017f3a:	4613      	mov	r3, r2
 8017f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017f3e:	88fb      	ldrh	r3, [r7, #6]
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	4618      	mov	r0, r3
 8017f44:	f001 fd20 	bl	8019988 <pvPortMalloc>
 8017f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017f4a:	697b      	ldr	r3, [r7, #20]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d00e      	beq.n	8017f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017f50:	205c      	movs	r0, #92	; 0x5c
 8017f52:	f001 fd19 	bl	8019988 <pvPortMalloc>
 8017f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017f58:	69fb      	ldr	r3, [r7, #28]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d003      	beq.n	8017f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	697a      	ldr	r2, [r7, #20]
 8017f62:	631a      	str	r2, [r3, #48]	; 0x30
 8017f64:	e005      	b.n	8017f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017f66:	6978      	ldr	r0, [r7, #20]
 8017f68:	f001 fdda 	bl	8019b20 <vPortFree>
 8017f6c:	e001      	b.n	8017f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017f6e:	2300      	movs	r3, #0
 8017f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d017      	beq.n	8017fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017f80:	88fa      	ldrh	r2, [r7, #6]
 8017f82:	2300      	movs	r3, #0
 8017f84:	9303      	str	r3, [sp, #12]
 8017f86:	69fb      	ldr	r3, [r7, #28]
 8017f88:	9302      	str	r3, [sp, #8]
 8017f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f8c:	9301      	str	r3, [sp, #4]
 8017f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f90:	9300      	str	r3, [sp, #0]
 8017f92:	683b      	ldr	r3, [r7, #0]
 8017f94:	68b9      	ldr	r1, [r7, #8]
 8017f96:	68f8      	ldr	r0, [r7, #12]
 8017f98:	f000 f80e 	bl	8017fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f9c:	69f8      	ldr	r0, [r7, #28]
 8017f9e:	f000 f89b 	bl	80180d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	61bb      	str	r3, [r7, #24]
 8017fa6:	e002      	b.n	8017fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017fae:	69bb      	ldr	r3, [r7, #24]
	}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	3720      	adds	r7, #32
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}

08017fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b088      	sub	sp, #32
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	60f8      	str	r0, [r7, #12]
 8017fc0:	60b9      	str	r1, [r7, #8]
 8017fc2:	607a      	str	r2, [r7, #4]
 8017fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	009b      	lsls	r3, r3, #2
 8017fce:	461a      	mov	r2, r3
 8017fd0:	21a5      	movs	r1, #165	; 0xa5
 8017fd2:	f001 fefb 	bl	8019dcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017fda:	6879      	ldr	r1, [r7, #4]
 8017fdc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017fe0:	440b      	add	r3, r1
 8017fe2:	009b      	lsls	r3, r3, #2
 8017fe4:	4413      	add	r3, r2
 8017fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017fe8:	69bb      	ldr	r3, [r7, #24]
 8017fea:	f023 0307 	bic.w	r3, r3, #7
 8017fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017ff0:	69bb      	ldr	r3, [r7, #24]
 8017ff2:	f003 0307 	and.w	r3, r3, #7
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d00a      	beq.n	8018010 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ffe:	f383 8811 	msr	BASEPRI, r3
 8018002:	f3bf 8f6f 	isb	sy
 8018006:	f3bf 8f4f 	dsb	sy
 801800a:	617b      	str	r3, [r7, #20]
}
 801800c:	bf00      	nop
 801800e:	e7fe      	b.n	801800e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d01f      	beq.n	8018056 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018016:	2300      	movs	r3, #0
 8018018:	61fb      	str	r3, [r7, #28]
 801801a:	e012      	b.n	8018042 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801801c:	68ba      	ldr	r2, [r7, #8]
 801801e:	69fb      	ldr	r3, [r7, #28]
 8018020:	4413      	add	r3, r2
 8018022:	7819      	ldrb	r1, [r3, #0]
 8018024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018026:	69fb      	ldr	r3, [r7, #28]
 8018028:	4413      	add	r3, r2
 801802a:	3334      	adds	r3, #52	; 0x34
 801802c:	460a      	mov	r2, r1
 801802e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018030:	68ba      	ldr	r2, [r7, #8]
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	4413      	add	r3, r2
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d006      	beq.n	801804a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801803c:	69fb      	ldr	r3, [r7, #28]
 801803e:	3301      	adds	r3, #1
 8018040:	61fb      	str	r3, [r7, #28]
 8018042:	69fb      	ldr	r3, [r7, #28]
 8018044:	2b0f      	cmp	r3, #15
 8018046:	d9e9      	bls.n	801801c <prvInitialiseNewTask+0x64>
 8018048:	e000      	b.n	801804c <prvInitialiseNewTask+0x94>
			{
				break;
 801804a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804e:	2200      	movs	r2, #0
 8018050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018054:	e003      	b.n	801805e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018058:	2200      	movs	r2, #0
 801805a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018060:	2b37      	cmp	r3, #55	; 0x37
 8018062:	d901      	bls.n	8018068 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018064:	2337      	movs	r3, #55	; 0x37
 8018066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801806c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018076:	2200      	movs	r2, #0
 8018078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807c:	3304      	adds	r3, #4
 801807e:	4618      	mov	r0, r3
 8018080:	f7ff f978 	bl	8017374 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018086:	3318      	adds	r3, #24
 8018088:	4618      	mov	r0, r3
 801808a:	f7ff f973 	bl	8017374 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801809c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80180a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180a6:	2200      	movs	r2, #0
 80180a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80180aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ac:	2200      	movs	r2, #0
 80180ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80180b2:	683a      	ldr	r2, [r7, #0]
 80180b4:	68f9      	ldr	r1, [r7, #12]
 80180b6:	69b8      	ldr	r0, [r7, #24]
 80180b8:	f001 fa14 	bl	80194e4 <pxPortInitialiseStack>
 80180bc:	4602      	mov	r2, r0
 80180be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80180c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d002      	beq.n	80180ce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80180c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180ce:	bf00      	nop
 80180d0:	3720      	adds	r7, #32
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd80      	pop	{r7, pc}
	...

080180d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80180e0:	f001 fb30 	bl	8019744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80180e4:	4b2d      	ldr	r3, [pc, #180]	; (801819c <prvAddNewTaskToReadyList+0xc4>)
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	3301      	adds	r3, #1
 80180ea:	4a2c      	ldr	r2, [pc, #176]	; (801819c <prvAddNewTaskToReadyList+0xc4>)
 80180ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80180ee:	4b2c      	ldr	r3, [pc, #176]	; (80181a0 <prvAddNewTaskToReadyList+0xc8>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d109      	bne.n	801810a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80180f6:	4a2a      	ldr	r2, [pc, #168]	; (80181a0 <prvAddNewTaskToReadyList+0xc8>)
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80180fc:	4b27      	ldr	r3, [pc, #156]	; (801819c <prvAddNewTaskToReadyList+0xc4>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d110      	bne.n	8018126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018104:	f000 fcca 	bl	8018a9c <prvInitialiseTaskLists>
 8018108:	e00d      	b.n	8018126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801810a:	4b26      	ldr	r3, [pc, #152]	; (80181a4 <prvAddNewTaskToReadyList+0xcc>)
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d109      	bne.n	8018126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018112:	4b23      	ldr	r3, [pc, #140]	; (80181a0 <prvAddNewTaskToReadyList+0xc8>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801811c:	429a      	cmp	r2, r3
 801811e:	d802      	bhi.n	8018126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018120:	4a1f      	ldr	r2, [pc, #124]	; (80181a0 <prvAddNewTaskToReadyList+0xc8>)
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018126:	4b20      	ldr	r3, [pc, #128]	; (80181a8 <prvAddNewTaskToReadyList+0xd0>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	3301      	adds	r3, #1
 801812c:	4a1e      	ldr	r2, [pc, #120]	; (80181a8 <prvAddNewTaskToReadyList+0xd0>)
 801812e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018130:	4b1d      	ldr	r3, [pc, #116]	; (80181a8 <prvAddNewTaskToReadyList+0xd0>)
 8018132:	681a      	ldr	r2, [r3, #0]
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801813c:	4b1b      	ldr	r3, [pc, #108]	; (80181ac <prvAddNewTaskToReadyList+0xd4>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	429a      	cmp	r2, r3
 8018142:	d903      	bls.n	801814c <prvAddNewTaskToReadyList+0x74>
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018148:	4a18      	ldr	r2, [pc, #96]	; (80181ac <prvAddNewTaskToReadyList+0xd4>)
 801814a:	6013      	str	r3, [r2, #0]
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018150:	4613      	mov	r3, r2
 8018152:	009b      	lsls	r3, r3, #2
 8018154:	4413      	add	r3, r2
 8018156:	009b      	lsls	r3, r3, #2
 8018158:	4a15      	ldr	r2, [pc, #84]	; (80181b0 <prvAddNewTaskToReadyList+0xd8>)
 801815a:	441a      	add	r2, r3
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	3304      	adds	r3, #4
 8018160:	4619      	mov	r1, r3
 8018162:	4610      	mov	r0, r2
 8018164:	f7ff f913 	bl	801738e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018168:	f001 fb1c 	bl	80197a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801816c:	4b0d      	ldr	r3, [pc, #52]	; (80181a4 <prvAddNewTaskToReadyList+0xcc>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d00e      	beq.n	8018192 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018174:	4b0a      	ldr	r3, [pc, #40]	; (80181a0 <prvAddNewTaskToReadyList+0xc8>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801817e:	429a      	cmp	r2, r3
 8018180:	d207      	bcs.n	8018192 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018182:	4b0c      	ldr	r3, [pc, #48]	; (80181b4 <prvAddNewTaskToReadyList+0xdc>)
 8018184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018188:	601a      	str	r2, [r3, #0]
 801818a:	f3bf 8f4f 	dsb	sy
 801818e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018192:	bf00      	nop
 8018194:	3708      	adds	r7, #8
 8018196:	46bd      	mov	sp, r7
 8018198:	bd80      	pop	{r7, pc}
 801819a:	bf00      	nop
 801819c:	24002c2c 	.word	0x24002c2c
 80181a0:	24002758 	.word	0x24002758
 80181a4:	24002c38 	.word	0x24002c38
 80181a8:	24002c48 	.word	0x24002c48
 80181ac:	24002c34 	.word	0x24002c34
 80181b0:	2400275c 	.word	0x2400275c
 80181b4:	e000ed04 	.word	0xe000ed04

080181b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b084      	sub	sp, #16
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80181c0:	2300      	movs	r3, #0
 80181c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d017      	beq.n	80181fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80181ca:	4b13      	ldr	r3, [pc, #76]	; (8018218 <vTaskDelay+0x60>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d00a      	beq.n	80181e8 <vTaskDelay+0x30>
	__asm volatile
 80181d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181d6:	f383 8811 	msr	BASEPRI, r3
 80181da:	f3bf 8f6f 	isb	sy
 80181de:	f3bf 8f4f 	dsb	sy
 80181e2:	60bb      	str	r3, [r7, #8]
}
 80181e4:	bf00      	nop
 80181e6:	e7fe      	b.n	80181e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80181e8:	f000 f880 	bl	80182ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80181ec:	2100      	movs	r1, #0
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f000 fdb6 	bl	8018d60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80181f4:	f000 f888 	bl	8018308 <xTaskResumeAll>
 80181f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d107      	bne.n	8018210 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018200:	4b06      	ldr	r3, [pc, #24]	; (801821c <vTaskDelay+0x64>)
 8018202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018206:	601a      	str	r2, [r3, #0]
 8018208:	f3bf 8f4f 	dsb	sy
 801820c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018210:	bf00      	nop
 8018212:	3710      	adds	r7, #16
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	24002c54 	.word	0x24002c54
 801821c:	e000ed04 	.word	0xe000ed04

08018220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b08a      	sub	sp, #40	; 0x28
 8018224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018226:	2300      	movs	r3, #0
 8018228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801822a:	2300      	movs	r3, #0
 801822c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801822e:	463a      	mov	r2, r7
 8018230:	1d39      	adds	r1, r7, #4
 8018232:	f107 0308 	add.w	r3, r7, #8
 8018236:	4618      	mov	r0, r3
 8018238:	f7fe fddc 	bl	8016df4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801823c:	6839      	ldr	r1, [r7, #0]
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	68ba      	ldr	r2, [r7, #8]
 8018242:	9202      	str	r2, [sp, #8]
 8018244:	9301      	str	r3, [sp, #4]
 8018246:	2300      	movs	r3, #0
 8018248:	9300      	str	r3, [sp, #0]
 801824a:	2300      	movs	r3, #0
 801824c:	460a      	mov	r2, r1
 801824e:	4921      	ldr	r1, [pc, #132]	; (80182d4 <vTaskStartScheduler+0xb4>)
 8018250:	4821      	ldr	r0, [pc, #132]	; (80182d8 <vTaskStartScheduler+0xb8>)
 8018252:	f7ff fe0f 	bl	8017e74 <xTaskCreateStatic>
 8018256:	4603      	mov	r3, r0
 8018258:	4a20      	ldr	r2, [pc, #128]	; (80182dc <vTaskStartScheduler+0xbc>)
 801825a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801825c:	4b1f      	ldr	r3, [pc, #124]	; (80182dc <vTaskStartScheduler+0xbc>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d002      	beq.n	801826a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018264:	2301      	movs	r3, #1
 8018266:	617b      	str	r3, [r7, #20]
 8018268:	e001      	b.n	801826e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801826a:	2300      	movs	r3, #0
 801826c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801826e:	697b      	ldr	r3, [r7, #20]
 8018270:	2b01      	cmp	r3, #1
 8018272:	d102      	bne.n	801827a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018274:	f000 fdc8 	bl	8018e08 <xTimerCreateTimerTask>
 8018278:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	2b01      	cmp	r3, #1
 801827e:	d116      	bne.n	80182ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8018280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018284:	f383 8811 	msr	BASEPRI, r3
 8018288:	f3bf 8f6f 	isb	sy
 801828c:	f3bf 8f4f 	dsb	sy
 8018290:	613b      	str	r3, [r7, #16]
}
 8018292:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018294:	4b12      	ldr	r3, [pc, #72]	; (80182e0 <vTaskStartScheduler+0xc0>)
 8018296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801829a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801829c:	4b11      	ldr	r3, [pc, #68]	; (80182e4 <vTaskStartScheduler+0xc4>)
 801829e:	2201      	movs	r2, #1
 80182a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80182a2:	4b11      	ldr	r3, [pc, #68]	; (80182e8 <vTaskStartScheduler+0xc8>)
 80182a4:	2200      	movs	r2, #0
 80182a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80182a8:	f001 f9aa 	bl	8019600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80182ac:	e00e      	b.n	80182cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182b4:	d10a      	bne.n	80182cc <vTaskStartScheduler+0xac>
	__asm volatile
 80182b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ba:	f383 8811 	msr	BASEPRI, r3
 80182be:	f3bf 8f6f 	isb	sy
 80182c2:	f3bf 8f4f 	dsb	sy
 80182c6:	60fb      	str	r3, [r7, #12]
}
 80182c8:	bf00      	nop
 80182ca:	e7fe      	b.n	80182ca <vTaskStartScheduler+0xaa>
}
 80182cc:	bf00      	nop
 80182ce:	3718      	adds	r7, #24
 80182d0:	46bd      	mov	sp, r7
 80182d2:	bd80      	pop	{r7, pc}
 80182d4:	0801aa40 	.word	0x0801aa40
 80182d8:	08018a6d 	.word	0x08018a6d
 80182dc:	24002c50 	.word	0x24002c50
 80182e0:	24002c4c 	.word	0x24002c4c
 80182e4:	24002c38 	.word	0x24002c38
 80182e8:	24002c30 	.word	0x24002c30

080182ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80182ec:	b480      	push	{r7}
 80182ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80182f0:	4b04      	ldr	r3, [pc, #16]	; (8018304 <vTaskSuspendAll+0x18>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	3301      	adds	r3, #1
 80182f6:	4a03      	ldr	r2, [pc, #12]	; (8018304 <vTaskSuspendAll+0x18>)
 80182f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80182fa:	bf00      	nop
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr
 8018304:	24002c54 	.word	0x24002c54

08018308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b084      	sub	sp, #16
 801830c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801830e:	2300      	movs	r3, #0
 8018310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018312:	2300      	movs	r3, #0
 8018314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018316:	4b42      	ldr	r3, [pc, #264]	; (8018420 <xTaskResumeAll+0x118>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d10a      	bne.n	8018334 <xTaskResumeAll+0x2c>
	__asm volatile
 801831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	603b      	str	r3, [r7, #0]
}
 8018330:	bf00      	nop
 8018332:	e7fe      	b.n	8018332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018334:	f001 fa06 	bl	8019744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018338:	4b39      	ldr	r3, [pc, #228]	; (8018420 <xTaskResumeAll+0x118>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	3b01      	subs	r3, #1
 801833e:	4a38      	ldr	r2, [pc, #224]	; (8018420 <xTaskResumeAll+0x118>)
 8018340:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018342:	4b37      	ldr	r3, [pc, #220]	; (8018420 <xTaskResumeAll+0x118>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d162      	bne.n	8018410 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801834a:	4b36      	ldr	r3, [pc, #216]	; (8018424 <xTaskResumeAll+0x11c>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d05e      	beq.n	8018410 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018352:	e02f      	b.n	80183b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018354:	4b34      	ldr	r3, [pc, #208]	; (8018428 <xTaskResumeAll+0x120>)
 8018356:	68db      	ldr	r3, [r3, #12]
 8018358:	68db      	ldr	r3, [r3, #12]
 801835a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	3318      	adds	r3, #24
 8018360:	4618      	mov	r0, r3
 8018362:	f7ff f871 	bl	8017448 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	3304      	adds	r3, #4
 801836a:	4618      	mov	r0, r3
 801836c:	f7ff f86c 	bl	8017448 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018374:	4b2d      	ldr	r3, [pc, #180]	; (801842c <xTaskResumeAll+0x124>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	429a      	cmp	r2, r3
 801837a:	d903      	bls.n	8018384 <xTaskResumeAll+0x7c>
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018380:	4a2a      	ldr	r2, [pc, #168]	; (801842c <xTaskResumeAll+0x124>)
 8018382:	6013      	str	r3, [r2, #0]
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018388:	4613      	mov	r3, r2
 801838a:	009b      	lsls	r3, r3, #2
 801838c:	4413      	add	r3, r2
 801838e:	009b      	lsls	r3, r3, #2
 8018390:	4a27      	ldr	r2, [pc, #156]	; (8018430 <xTaskResumeAll+0x128>)
 8018392:	441a      	add	r2, r3
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	3304      	adds	r3, #4
 8018398:	4619      	mov	r1, r3
 801839a:	4610      	mov	r0, r2
 801839c:	f7fe fff7 	bl	801738e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183a4:	4b23      	ldr	r3, [pc, #140]	; (8018434 <xTaskResumeAll+0x12c>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d302      	bcc.n	80183b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80183ae:	4b22      	ldr	r3, [pc, #136]	; (8018438 <xTaskResumeAll+0x130>)
 80183b0:	2201      	movs	r2, #1
 80183b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80183b4:	4b1c      	ldr	r3, [pc, #112]	; (8018428 <xTaskResumeAll+0x120>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d1cb      	bne.n	8018354 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d001      	beq.n	80183c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80183c2:	f000 fc09 	bl	8018bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80183c6:	4b1d      	ldr	r3, [pc, #116]	; (801843c <xTaskResumeAll+0x134>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d010      	beq.n	80183f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80183d2:	f000 f847 	bl	8018464 <xTaskIncrementTick>
 80183d6:	4603      	mov	r3, r0
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d002      	beq.n	80183e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80183dc:	4b16      	ldr	r3, [pc, #88]	; (8018438 <xTaskResumeAll+0x130>)
 80183de:	2201      	movs	r2, #1
 80183e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	3b01      	subs	r3, #1
 80183e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d1f1      	bne.n	80183d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80183ee:	4b13      	ldr	r3, [pc, #76]	; (801843c <xTaskResumeAll+0x134>)
 80183f0:	2200      	movs	r2, #0
 80183f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80183f4:	4b10      	ldr	r3, [pc, #64]	; (8018438 <xTaskResumeAll+0x130>)
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d009      	beq.n	8018410 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80183fc:	2301      	movs	r3, #1
 80183fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018400:	4b0f      	ldr	r3, [pc, #60]	; (8018440 <xTaskResumeAll+0x138>)
 8018402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018406:	601a      	str	r2, [r3, #0]
 8018408:	f3bf 8f4f 	dsb	sy
 801840c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018410:	f001 f9c8 	bl	80197a4 <vPortExitCritical>

	return xAlreadyYielded;
 8018414:	68bb      	ldr	r3, [r7, #8]
}
 8018416:	4618      	mov	r0, r3
 8018418:	3710      	adds	r7, #16
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	24002c54 	.word	0x24002c54
 8018424:	24002c2c 	.word	0x24002c2c
 8018428:	24002bec 	.word	0x24002bec
 801842c:	24002c34 	.word	0x24002c34
 8018430:	2400275c 	.word	0x2400275c
 8018434:	24002758 	.word	0x24002758
 8018438:	24002c40 	.word	0x24002c40
 801843c:	24002c3c 	.word	0x24002c3c
 8018440:	e000ed04 	.word	0xe000ed04

08018444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018444:	b480      	push	{r7}
 8018446:	b083      	sub	sp, #12
 8018448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801844a:	4b05      	ldr	r3, [pc, #20]	; (8018460 <xTaskGetTickCount+0x1c>)
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018450:	687b      	ldr	r3, [r7, #4]
}
 8018452:	4618      	mov	r0, r3
 8018454:	370c      	adds	r7, #12
 8018456:	46bd      	mov	sp, r7
 8018458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801845c:	4770      	bx	lr
 801845e:	bf00      	nop
 8018460:	24002c30 	.word	0x24002c30

08018464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b086      	sub	sp, #24
 8018468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801846a:	2300      	movs	r3, #0
 801846c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801846e:	4b53      	ldr	r3, [pc, #332]	; (80185bc <xTaskIncrementTick+0x158>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	2b00      	cmp	r3, #0
 8018474:	f040 8095 	bne.w	80185a2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018478:	4b51      	ldr	r3, [pc, #324]	; (80185c0 <xTaskIncrementTick+0x15c>)
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	3301      	adds	r3, #1
 801847e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018480:	4a4f      	ldr	r2, [pc, #316]	; (80185c0 <xTaskIncrementTick+0x15c>)
 8018482:	693b      	ldr	r3, [r7, #16]
 8018484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018486:	693b      	ldr	r3, [r7, #16]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d120      	bne.n	80184ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801848c:	4b4d      	ldr	r3, [pc, #308]	; (80185c4 <xTaskIncrementTick+0x160>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d00a      	beq.n	80184ac <xTaskIncrementTick+0x48>
	__asm volatile
 8018496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801849a:	f383 8811 	msr	BASEPRI, r3
 801849e:	f3bf 8f6f 	isb	sy
 80184a2:	f3bf 8f4f 	dsb	sy
 80184a6:	603b      	str	r3, [r7, #0]
}
 80184a8:	bf00      	nop
 80184aa:	e7fe      	b.n	80184aa <xTaskIncrementTick+0x46>
 80184ac:	4b45      	ldr	r3, [pc, #276]	; (80185c4 <xTaskIncrementTick+0x160>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	60fb      	str	r3, [r7, #12]
 80184b2:	4b45      	ldr	r3, [pc, #276]	; (80185c8 <xTaskIncrementTick+0x164>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	4a43      	ldr	r2, [pc, #268]	; (80185c4 <xTaskIncrementTick+0x160>)
 80184b8:	6013      	str	r3, [r2, #0]
 80184ba:	4a43      	ldr	r2, [pc, #268]	; (80185c8 <xTaskIncrementTick+0x164>)
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	6013      	str	r3, [r2, #0]
 80184c0:	4b42      	ldr	r3, [pc, #264]	; (80185cc <xTaskIncrementTick+0x168>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	3301      	adds	r3, #1
 80184c6:	4a41      	ldr	r2, [pc, #260]	; (80185cc <xTaskIncrementTick+0x168>)
 80184c8:	6013      	str	r3, [r2, #0]
 80184ca:	f000 fb85 	bl	8018bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80184ce:	4b40      	ldr	r3, [pc, #256]	; (80185d0 <xTaskIncrementTick+0x16c>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	693a      	ldr	r2, [r7, #16]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d349      	bcc.n	801856c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184d8:	4b3a      	ldr	r3, [pc, #232]	; (80185c4 <xTaskIncrementTick+0x160>)
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d104      	bne.n	80184ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184e2:	4b3b      	ldr	r3, [pc, #236]	; (80185d0 <xTaskIncrementTick+0x16c>)
 80184e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184e8:	601a      	str	r2, [r3, #0]
					break;
 80184ea:	e03f      	b.n	801856c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184ec:	4b35      	ldr	r3, [pc, #212]	; (80185c4 <xTaskIncrementTick+0x160>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	68db      	ldr	r3, [r3, #12]
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80184f6:	68bb      	ldr	r3, [r7, #8]
 80184f8:	685b      	ldr	r3, [r3, #4]
 80184fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80184fc:	693a      	ldr	r2, [r7, #16]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	429a      	cmp	r2, r3
 8018502:	d203      	bcs.n	801850c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018504:	4a32      	ldr	r2, [pc, #200]	; (80185d0 <xTaskIncrementTick+0x16c>)
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801850a:	e02f      	b.n	801856c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801850c:	68bb      	ldr	r3, [r7, #8]
 801850e:	3304      	adds	r3, #4
 8018510:	4618      	mov	r0, r3
 8018512:	f7fe ff99 	bl	8017448 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018516:	68bb      	ldr	r3, [r7, #8]
 8018518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801851a:	2b00      	cmp	r3, #0
 801851c:	d004      	beq.n	8018528 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801851e:	68bb      	ldr	r3, [r7, #8]
 8018520:	3318      	adds	r3, #24
 8018522:	4618      	mov	r0, r3
 8018524:	f7fe ff90 	bl	8017448 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801852c:	4b29      	ldr	r3, [pc, #164]	; (80185d4 <xTaskIncrementTick+0x170>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	429a      	cmp	r2, r3
 8018532:	d903      	bls.n	801853c <xTaskIncrementTick+0xd8>
 8018534:	68bb      	ldr	r3, [r7, #8]
 8018536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018538:	4a26      	ldr	r2, [pc, #152]	; (80185d4 <xTaskIncrementTick+0x170>)
 801853a:	6013      	str	r3, [r2, #0]
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018540:	4613      	mov	r3, r2
 8018542:	009b      	lsls	r3, r3, #2
 8018544:	4413      	add	r3, r2
 8018546:	009b      	lsls	r3, r3, #2
 8018548:	4a23      	ldr	r2, [pc, #140]	; (80185d8 <xTaskIncrementTick+0x174>)
 801854a:	441a      	add	r2, r3
 801854c:	68bb      	ldr	r3, [r7, #8]
 801854e:	3304      	adds	r3, #4
 8018550:	4619      	mov	r1, r3
 8018552:	4610      	mov	r0, r2
 8018554:	f7fe ff1b 	bl	801738e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801855c:	4b1f      	ldr	r3, [pc, #124]	; (80185dc <xTaskIncrementTick+0x178>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018562:	429a      	cmp	r2, r3
 8018564:	d3b8      	bcc.n	80184d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018566:	2301      	movs	r3, #1
 8018568:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801856a:	e7b5      	b.n	80184d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801856c:	4b1b      	ldr	r3, [pc, #108]	; (80185dc <xTaskIncrementTick+0x178>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018572:	4919      	ldr	r1, [pc, #100]	; (80185d8 <xTaskIncrementTick+0x174>)
 8018574:	4613      	mov	r3, r2
 8018576:	009b      	lsls	r3, r3, #2
 8018578:	4413      	add	r3, r2
 801857a:	009b      	lsls	r3, r3, #2
 801857c:	440b      	add	r3, r1
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	2b01      	cmp	r3, #1
 8018582:	d901      	bls.n	8018588 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018584:	2301      	movs	r3, #1
 8018586:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018588:	4b15      	ldr	r3, [pc, #84]	; (80185e0 <xTaskIncrementTick+0x17c>)
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d101      	bne.n	8018594 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018590:	f7e9 fd2e 	bl	8001ff0 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018594:	4b13      	ldr	r3, [pc, #76]	; (80185e4 <xTaskIncrementTick+0x180>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d009      	beq.n	80185b0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801859c:	2301      	movs	r3, #1
 801859e:	617b      	str	r3, [r7, #20]
 80185a0:	e006      	b.n	80185b0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80185a2:	4b0f      	ldr	r3, [pc, #60]	; (80185e0 <xTaskIncrementTick+0x17c>)
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	3301      	adds	r3, #1
 80185a8:	4a0d      	ldr	r2, [pc, #52]	; (80185e0 <xTaskIncrementTick+0x17c>)
 80185aa:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80185ac:	f7e9 fd20 	bl	8001ff0 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80185b0:	697b      	ldr	r3, [r7, #20]
}
 80185b2:	4618      	mov	r0, r3
 80185b4:	3718      	adds	r7, #24
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}
 80185ba:	bf00      	nop
 80185bc:	24002c54 	.word	0x24002c54
 80185c0:	24002c30 	.word	0x24002c30
 80185c4:	24002be4 	.word	0x24002be4
 80185c8:	24002be8 	.word	0x24002be8
 80185cc:	24002c44 	.word	0x24002c44
 80185d0:	24002c4c 	.word	0x24002c4c
 80185d4:	24002c34 	.word	0x24002c34
 80185d8:	2400275c 	.word	0x2400275c
 80185dc:	24002758 	.word	0x24002758
 80185e0:	24002c3c 	.word	0x24002c3c
 80185e4:	24002c40 	.word	0x24002c40

080185e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b084      	sub	sp, #16
 80185ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80185ee:	4b2f      	ldr	r3, [pc, #188]	; (80186ac <vTaskSwitchContext+0xc4>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d003      	beq.n	80185fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80185f6:	4b2e      	ldr	r3, [pc, #184]	; (80186b0 <vTaskSwitchContext+0xc8>)
 80185f8:	2201      	movs	r2, #1
 80185fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80185fc:	e052      	b.n	80186a4 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80185fe:	4b2c      	ldr	r3, [pc, #176]	; (80186b0 <vTaskSwitchContext+0xc8>)
 8018600:	2200      	movs	r2, #0
 8018602:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018604:	4b2b      	ldr	r3, [pc, #172]	; (80186b4 <vTaskSwitchContext+0xcc>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	681a      	ldr	r2, [r3, #0]
 801860a:	4b2a      	ldr	r3, [pc, #168]	; (80186b4 <vTaskSwitchContext+0xcc>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018610:	429a      	cmp	r2, r3
 8018612:	d808      	bhi.n	8018626 <vTaskSwitchContext+0x3e>
 8018614:	4b27      	ldr	r3, [pc, #156]	; (80186b4 <vTaskSwitchContext+0xcc>)
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	4b26      	ldr	r3, [pc, #152]	; (80186b4 <vTaskSwitchContext+0xcc>)
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	3334      	adds	r3, #52	; 0x34
 801861e:	4619      	mov	r1, r3
 8018620:	4610      	mov	r0, r2
 8018622:	f7e9 fcf3 	bl	800200c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018626:	4b24      	ldr	r3, [pc, #144]	; (80186b8 <vTaskSwitchContext+0xd0>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	60fb      	str	r3, [r7, #12]
 801862c:	e010      	b.n	8018650 <vTaskSwitchContext+0x68>
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d10a      	bne.n	801864a <vTaskSwitchContext+0x62>
	__asm volatile
 8018634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018638:	f383 8811 	msr	BASEPRI, r3
 801863c:	f3bf 8f6f 	isb	sy
 8018640:	f3bf 8f4f 	dsb	sy
 8018644:	607b      	str	r3, [r7, #4]
}
 8018646:	bf00      	nop
 8018648:	e7fe      	b.n	8018648 <vTaskSwitchContext+0x60>
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	3b01      	subs	r3, #1
 801864e:	60fb      	str	r3, [r7, #12]
 8018650:	491a      	ldr	r1, [pc, #104]	; (80186bc <vTaskSwitchContext+0xd4>)
 8018652:	68fa      	ldr	r2, [r7, #12]
 8018654:	4613      	mov	r3, r2
 8018656:	009b      	lsls	r3, r3, #2
 8018658:	4413      	add	r3, r2
 801865a:	009b      	lsls	r3, r3, #2
 801865c:	440b      	add	r3, r1
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d0e4      	beq.n	801862e <vTaskSwitchContext+0x46>
 8018664:	68fa      	ldr	r2, [r7, #12]
 8018666:	4613      	mov	r3, r2
 8018668:	009b      	lsls	r3, r3, #2
 801866a:	4413      	add	r3, r2
 801866c:	009b      	lsls	r3, r3, #2
 801866e:	4a13      	ldr	r2, [pc, #76]	; (80186bc <vTaskSwitchContext+0xd4>)
 8018670:	4413      	add	r3, r2
 8018672:	60bb      	str	r3, [r7, #8]
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	685b      	ldr	r3, [r3, #4]
 8018678:	685a      	ldr	r2, [r3, #4]
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	605a      	str	r2, [r3, #4]
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	685a      	ldr	r2, [r3, #4]
 8018682:	68bb      	ldr	r3, [r7, #8]
 8018684:	3308      	adds	r3, #8
 8018686:	429a      	cmp	r2, r3
 8018688:	d104      	bne.n	8018694 <vTaskSwitchContext+0xac>
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	685b      	ldr	r3, [r3, #4]
 801868e:	685a      	ldr	r2, [r3, #4]
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	605a      	str	r2, [r3, #4]
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	685b      	ldr	r3, [r3, #4]
 8018698:	68db      	ldr	r3, [r3, #12]
 801869a:	4a06      	ldr	r2, [pc, #24]	; (80186b4 <vTaskSwitchContext+0xcc>)
 801869c:	6013      	str	r3, [r2, #0]
 801869e:	4a06      	ldr	r2, [pc, #24]	; (80186b8 <vTaskSwitchContext+0xd0>)
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	6013      	str	r3, [r2, #0]
}
 80186a4:	bf00      	nop
 80186a6:	3710      	adds	r7, #16
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}
 80186ac:	24002c54 	.word	0x24002c54
 80186b0:	24002c40 	.word	0x24002c40
 80186b4:	24002758 	.word	0x24002758
 80186b8:	24002c34 	.word	0x24002c34
 80186bc:	2400275c 	.word	0x2400275c

080186c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
 80186c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d10a      	bne.n	80186e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80186d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186d4:	f383 8811 	msr	BASEPRI, r3
 80186d8:	f3bf 8f6f 	isb	sy
 80186dc:	f3bf 8f4f 	dsb	sy
 80186e0:	60fb      	str	r3, [r7, #12]
}
 80186e2:	bf00      	nop
 80186e4:	e7fe      	b.n	80186e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80186e6:	4b07      	ldr	r3, [pc, #28]	; (8018704 <vTaskPlaceOnEventList+0x44>)
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	3318      	adds	r3, #24
 80186ec:	4619      	mov	r1, r3
 80186ee:	6878      	ldr	r0, [r7, #4]
 80186f0:	f7fe fe71 	bl	80173d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80186f4:	2101      	movs	r1, #1
 80186f6:	6838      	ldr	r0, [r7, #0]
 80186f8:	f000 fb32 	bl	8018d60 <prvAddCurrentTaskToDelayedList>
}
 80186fc:	bf00      	nop
 80186fe:	3710      	adds	r7, #16
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}
 8018704:	24002758 	.word	0x24002758

08018708 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b086      	sub	sp, #24
 801870c:	af00      	add	r7, sp, #0
 801870e:	60f8      	str	r0, [r7, #12]
 8018710:	60b9      	str	r1, [r7, #8]
 8018712:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d10a      	bne.n	8018730 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801871e:	f383 8811 	msr	BASEPRI, r3
 8018722:	f3bf 8f6f 	isb	sy
 8018726:	f3bf 8f4f 	dsb	sy
 801872a:	617b      	str	r3, [r7, #20]
}
 801872c:	bf00      	nop
 801872e:	e7fe      	b.n	801872e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018730:	4b11      	ldr	r3, [pc, #68]	; (8018778 <vTaskPlaceOnUnorderedEventList+0x70>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d10a      	bne.n	801874e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801873c:	f383 8811 	msr	BASEPRI, r3
 8018740:	f3bf 8f6f 	isb	sy
 8018744:	f3bf 8f4f 	dsb	sy
 8018748:	613b      	str	r3, [r7, #16]
}
 801874a:	bf00      	nop
 801874c:	e7fe      	b.n	801874c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801874e:	4b0b      	ldr	r3, [pc, #44]	; (801877c <vTaskPlaceOnUnorderedEventList+0x74>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	68ba      	ldr	r2, [r7, #8]
 8018754:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018758:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801875a:	4b08      	ldr	r3, [pc, #32]	; (801877c <vTaskPlaceOnUnorderedEventList+0x74>)
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	3318      	adds	r3, #24
 8018760:	4619      	mov	r1, r3
 8018762:	68f8      	ldr	r0, [r7, #12]
 8018764:	f7fe fe13 	bl	801738e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018768:	2101      	movs	r1, #1
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	f000 faf8 	bl	8018d60 <prvAddCurrentTaskToDelayedList>
}
 8018770:	bf00      	nop
 8018772:	3718      	adds	r7, #24
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}
 8018778:	24002c54 	.word	0x24002c54
 801877c:	24002758 	.word	0x24002758

08018780 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018780:	b580      	push	{r7, lr}
 8018782:	b086      	sub	sp, #24
 8018784:	af00      	add	r7, sp, #0
 8018786:	60f8      	str	r0, [r7, #12]
 8018788:	60b9      	str	r1, [r7, #8]
 801878a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d10a      	bne.n	80187a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018796:	f383 8811 	msr	BASEPRI, r3
 801879a:	f3bf 8f6f 	isb	sy
 801879e:	f3bf 8f4f 	dsb	sy
 80187a2:	617b      	str	r3, [r7, #20]
}
 80187a4:	bf00      	nop
 80187a6:	e7fe      	b.n	80187a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80187a8:	4b0a      	ldr	r3, [pc, #40]	; (80187d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	3318      	adds	r3, #24
 80187ae:	4619      	mov	r1, r3
 80187b0:	68f8      	ldr	r0, [r7, #12]
 80187b2:	f7fe fdec 	bl	801738e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d002      	beq.n	80187c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80187bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80187c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80187c2:	6879      	ldr	r1, [r7, #4]
 80187c4:	68b8      	ldr	r0, [r7, #8]
 80187c6:	f000 facb 	bl	8018d60 <prvAddCurrentTaskToDelayedList>
	}
 80187ca:	bf00      	nop
 80187cc:	3718      	adds	r7, #24
 80187ce:	46bd      	mov	sp, r7
 80187d0:	bd80      	pop	{r7, pc}
 80187d2:	bf00      	nop
 80187d4:	24002758 	.word	0x24002758

080187d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b086      	sub	sp, #24
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	68db      	ldr	r3, [r3, #12]
 80187e4:	68db      	ldr	r3, [r3, #12]
 80187e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80187e8:	693b      	ldr	r3, [r7, #16]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d10a      	bne.n	8018804 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80187ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187f2:	f383 8811 	msr	BASEPRI, r3
 80187f6:	f3bf 8f6f 	isb	sy
 80187fa:	f3bf 8f4f 	dsb	sy
 80187fe:	60fb      	str	r3, [r7, #12]
}
 8018800:	bf00      	nop
 8018802:	e7fe      	b.n	8018802 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018804:	693b      	ldr	r3, [r7, #16]
 8018806:	3318      	adds	r3, #24
 8018808:	4618      	mov	r0, r3
 801880a:	f7fe fe1d 	bl	8017448 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801880e:	4b1e      	ldr	r3, [pc, #120]	; (8018888 <xTaskRemoveFromEventList+0xb0>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d11d      	bne.n	8018852 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018816:	693b      	ldr	r3, [r7, #16]
 8018818:	3304      	adds	r3, #4
 801881a:	4618      	mov	r0, r3
 801881c:	f7fe fe14 	bl	8017448 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018824:	4b19      	ldr	r3, [pc, #100]	; (801888c <xTaskRemoveFromEventList+0xb4>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	429a      	cmp	r2, r3
 801882a:	d903      	bls.n	8018834 <xTaskRemoveFromEventList+0x5c>
 801882c:	693b      	ldr	r3, [r7, #16]
 801882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018830:	4a16      	ldr	r2, [pc, #88]	; (801888c <xTaskRemoveFromEventList+0xb4>)
 8018832:	6013      	str	r3, [r2, #0]
 8018834:	693b      	ldr	r3, [r7, #16]
 8018836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018838:	4613      	mov	r3, r2
 801883a:	009b      	lsls	r3, r3, #2
 801883c:	4413      	add	r3, r2
 801883e:	009b      	lsls	r3, r3, #2
 8018840:	4a13      	ldr	r2, [pc, #76]	; (8018890 <xTaskRemoveFromEventList+0xb8>)
 8018842:	441a      	add	r2, r3
 8018844:	693b      	ldr	r3, [r7, #16]
 8018846:	3304      	adds	r3, #4
 8018848:	4619      	mov	r1, r3
 801884a:	4610      	mov	r0, r2
 801884c:	f7fe fd9f 	bl	801738e <vListInsertEnd>
 8018850:	e005      	b.n	801885e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018852:	693b      	ldr	r3, [r7, #16]
 8018854:	3318      	adds	r3, #24
 8018856:	4619      	mov	r1, r3
 8018858:	480e      	ldr	r0, [pc, #56]	; (8018894 <xTaskRemoveFromEventList+0xbc>)
 801885a:	f7fe fd98 	bl	801738e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801885e:	693b      	ldr	r3, [r7, #16]
 8018860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018862:	4b0d      	ldr	r3, [pc, #52]	; (8018898 <xTaskRemoveFromEventList+0xc0>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018868:	429a      	cmp	r2, r3
 801886a:	d905      	bls.n	8018878 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801886c:	2301      	movs	r3, #1
 801886e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018870:	4b0a      	ldr	r3, [pc, #40]	; (801889c <xTaskRemoveFromEventList+0xc4>)
 8018872:	2201      	movs	r2, #1
 8018874:	601a      	str	r2, [r3, #0]
 8018876:	e001      	b.n	801887c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018878:	2300      	movs	r3, #0
 801887a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801887c:	697b      	ldr	r3, [r7, #20]
}
 801887e:	4618      	mov	r0, r3
 8018880:	3718      	adds	r7, #24
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}
 8018886:	bf00      	nop
 8018888:	24002c54 	.word	0x24002c54
 801888c:	24002c34 	.word	0x24002c34
 8018890:	2400275c 	.word	0x2400275c
 8018894:	24002bec 	.word	0x24002bec
 8018898:	24002758 	.word	0x24002758
 801889c:	24002c40 	.word	0x24002c40

080188a0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b086      	sub	sp, #24
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80188aa:	4b29      	ldr	r3, [pc, #164]	; (8018950 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d10a      	bne.n	80188c8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80188b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b6:	f383 8811 	msr	BASEPRI, r3
 80188ba:	f3bf 8f6f 	isb	sy
 80188be:	f3bf 8f4f 	dsb	sy
 80188c2:	613b      	str	r3, [r7, #16]
}
 80188c4:	bf00      	nop
 80188c6:	e7fe      	b.n	80188c6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	68db      	ldr	r3, [r3, #12]
 80188d6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d10a      	bne.n	80188f4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80188de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188e2:	f383 8811 	msr	BASEPRI, r3
 80188e6:	f3bf 8f6f 	isb	sy
 80188ea:	f3bf 8f4f 	dsb	sy
 80188ee:	60fb      	str	r3, [r7, #12]
}
 80188f0:	bf00      	nop
 80188f2:	e7fe      	b.n	80188f2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	f7fe fda7 	bl	8017448 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	3304      	adds	r3, #4
 80188fe:	4618      	mov	r0, r3
 8018900:	f7fe fda2 	bl	8017448 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018904:	697b      	ldr	r3, [r7, #20]
 8018906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018908:	4b12      	ldr	r3, [pc, #72]	; (8018954 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	429a      	cmp	r2, r3
 801890e:	d903      	bls.n	8018918 <vTaskRemoveFromUnorderedEventList+0x78>
 8018910:	697b      	ldr	r3, [r7, #20]
 8018912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018914:	4a0f      	ldr	r2, [pc, #60]	; (8018954 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018916:	6013      	str	r3, [r2, #0]
 8018918:	697b      	ldr	r3, [r7, #20]
 801891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801891c:	4613      	mov	r3, r2
 801891e:	009b      	lsls	r3, r3, #2
 8018920:	4413      	add	r3, r2
 8018922:	009b      	lsls	r3, r3, #2
 8018924:	4a0c      	ldr	r2, [pc, #48]	; (8018958 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018926:	441a      	add	r2, r3
 8018928:	697b      	ldr	r3, [r7, #20]
 801892a:	3304      	adds	r3, #4
 801892c:	4619      	mov	r1, r3
 801892e:	4610      	mov	r0, r2
 8018930:	f7fe fd2d 	bl	801738e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018934:	697b      	ldr	r3, [r7, #20]
 8018936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018938:	4b08      	ldr	r3, [pc, #32]	; (801895c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801893e:	429a      	cmp	r2, r3
 8018940:	d902      	bls.n	8018948 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018942:	4b07      	ldr	r3, [pc, #28]	; (8018960 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018944:	2201      	movs	r2, #1
 8018946:	601a      	str	r2, [r3, #0]
	}
}
 8018948:	bf00      	nop
 801894a:	3718      	adds	r7, #24
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}
 8018950:	24002c54 	.word	0x24002c54
 8018954:	24002c34 	.word	0x24002c34
 8018958:	2400275c 	.word	0x2400275c
 801895c:	24002758 	.word	0x24002758
 8018960:	24002c40 	.word	0x24002c40

08018964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018964:	b480      	push	{r7}
 8018966:	b083      	sub	sp, #12
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801896c:	4b06      	ldr	r3, [pc, #24]	; (8018988 <vTaskInternalSetTimeOutState+0x24>)
 801896e:	681a      	ldr	r2, [r3, #0]
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018974:	4b05      	ldr	r3, [pc, #20]	; (801898c <vTaskInternalSetTimeOutState+0x28>)
 8018976:	681a      	ldr	r2, [r3, #0]
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	605a      	str	r2, [r3, #4]
}
 801897c:	bf00      	nop
 801897e:	370c      	adds	r7, #12
 8018980:	46bd      	mov	sp, r7
 8018982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018986:	4770      	bx	lr
 8018988:	24002c44 	.word	0x24002c44
 801898c:	24002c30 	.word	0x24002c30

08018990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b088      	sub	sp, #32
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
 8018998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d10a      	bne.n	80189b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80189a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189a4:	f383 8811 	msr	BASEPRI, r3
 80189a8:	f3bf 8f6f 	isb	sy
 80189ac:	f3bf 8f4f 	dsb	sy
 80189b0:	613b      	str	r3, [r7, #16]
}
 80189b2:	bf00      	nop
 80189b4:	e7fe      	b.n	80189b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80189b6:	683b      	ldr	r3, [r7, #0]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d10a      	bne.n	80189d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80189bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c0:	f383 8811 	msr	BASEPRI, r3
 80189c4:	f3bf 8f6f 	isb	sy
 80189c8:	f3bf 8f4f 	dsb	sy
 80189cc:	60fb      	str	r3, [r7, #12]
}
 80189ce:	bf00      	nop
 80189d0:	e7fe      	b.n	80189d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80189d2:	f000 feb7 	bl	8019744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80189d6:	4b1d      	ldr	r3, [pc, #116]	; (8018a4c <xTaskCheckForTimeOut+0xbc>)
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	685b      	ldr	r3, [r3, #4]
 80189e0:	69ba      	ldr	r2, [r7, #24]
 80189e2:	1ad3      	subs	r3, r2, r3
 80189e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80189ee:	d102      	bne.n	80189f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80189f0:	2300      	movs	r3, #0
 80189f2:	61fb      	str	r3, [r7, #28]
 80189f4:	e023      	b.n	8018a3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681a      	ldr	r2, [r3, #0]
 80189fa:	4b15      	ldr	r3, [pc, #84]	; (8018a50 <xTaskCheckForTimeOut+0xc0>)
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d007      	beq.n	8018a12 <xTaskCheckForTimeOut+0x82>
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	685b      	ldr	r3, [r3, #4]
 8018a06:	69ba      	ldr	r2, [r7, #24]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d302      	bcc.n	8018a12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018a0c:	2301      	movs	r3, #1
 8018a0e:	61fb      	str	r3, [r7, #28]
 8018a10:	e015      	b.n	8018a3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	697a      	ldr	r2, [r7, #20]
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d20b      	bcs.n	8018a34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	681a      	ldr	r2, [r3, #0]
 8018a20:	697b      	ldr	r3, [r7, #20]
 8018a22:	1ad2      	subs	r2, r2, r3
 8018a24:	683b      	ldr	r3, [r7, #0]
 8018a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f7ff ff9b 	bl	8018964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	61fb      	str	r3, [r7, #28]
 8018a32:	e004      	b.n	8018a3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	2200      	movs	r2, #0
 8018a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018a3e:	f000 feb1 	bl	80197a4 <vPortExitCritical>

	return xReturn;
 8018a42:	69fb      	ldr	r3, [r7, #28]
}
 8018a44:	4618      	mov	r0, r3
 8018a46:	3720      	adds	r7, #32
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bd80      	pop	{r7, pc}
 8018a4c:	24002c30 	.word	0x24002c30
 8018a50:	24002c44 	.word	0x24002c44

08018a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018a54:	b480      	push	{r7}
 8018a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018a58:	4b03      	ldr	r3, [pc, #12]	; (8018a68 <vTaskMissedYield+0x14>)
 8018a5a:	2201      	movs	r2, #1
 8018a5c:	601a      	str	r2, [r3, #0]
}
 8018a5e:	bf00      	nop
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr
 8018a68:	24002c40 	.word	0x24002c40

08018a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b082      	sub	sp, #8
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018a74:	f000 f852 	bl	8018b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018a78:	4b06      	ldr	r3, [pc, #24]	; (8018a94 <prvIdleTask+0x28>)
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d9f9      	bls.n	8018a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018a80:	4b05      	ldr	r3, [pc, #20]	; (8018a98 <prvIdleTask+0x2c>)
 8018a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a86:	601a      	str	r2, [r3, #0]
 8018a88:	f3bf 8f4f 	dsb	sy
 8018a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018a90:	e7f0      	b.n	8018a74 <prvIdleTask+0x8>
 8018a92:	bf00      	nop
 8018a94:	2400275c 	.word	0x2400275c
 8018a98:	e000ed04 	.word	0xe000ed04

08018a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b082      	sub	sp, #8
 8018aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	607b      	str	r3, [r7, #4]
 8018aa6:	e00c      	b.n	8018ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018aa8:	687a      	ldr	r2, [r7, #4]
 8018aaa:	4613      	mov	r3, r2
 8018aac:	009b      	lsls	r3, r3, #2
 8018aae:	4413      	add	r3, r2
 8018ab0:	009b      	lsls	r3, r3, #2
 8018ab2:	4a12      	ldr	r2, [pc, #72]	; (8018afc <prvInitialiseTaskLists+0x60>)
 8018ab4:	4413      	add	r3, r2
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f7fe fc3c 	bl	8017334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	3301      	adds	r3, #1
 8018ac0:	607b      	str	r3, [r7, #4]
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	2b37      	cmp	r3, #55	; 0x37
 8018ac6:	d9ef      	bls.n	8018aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018ac8:	480d      	ldr	r0, [pc, #52]	; (8018b00 <prvInitialiseTaskLists+0x64>)
 8018aca:	f7fe fc33 	bl	8017334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018ace:	480d      	ldr	r0, [pc, #52]	; (8018b04 <prvInitialiseTaskLists+0x68>)
 8018ad0:	f7fe fc30 	bl	8017334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018ad4:	480c      	ldr	r0, [pc, #48]	; (8018b08 <prvInitialiseTaskLists+0x6c>)
 8018ad6:	f7fe fc2d 	bl	8017334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018ada:	480c      	ldr	r0, [pc, #48]	; (8018b0c <prvInitialiseTaskLists+0x70>)
 8018adc:	f7fe fc2a 	bl	8017334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018ae0:	480b      	ldr	r0, [pc, #44]	; (8018b10 <prvInitialiseTaskLists+0x74>)
 8018ae2:	f7fe fc27 	bl	8017334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018ae6:	4b0b      	ldr	r3, [pc, #44]	; (8018b14 <prvInitialiseTaskLists+0x78>)
 8018ae8:	4a05      	ldr	r2, [pc, #20]	; (8018b00 <prvInitialiseTaskLists+0x64>)
 8018aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018aec:	4b0a      	ldr	r3, [pc, #40]	; (8018b18 <prvInitialiseTaskLists+0x7c>)
 8018aee:	4a05      	ldr	r2, [pc, #20]	; (8018b04 <prvInitialiseTaskLists+0x68>)
 8018af0:	601a      	str	r2, [r3, #0]
}
 8018af2:	bf00      	nop
 8018af4:	3708      	adds	r7, #8
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}
 8018afa:	bf00      	nop
 8018afc:	2400275c 	.word	0x2400275c
 8018b00:	24002bbc 	.word	0x24002bbc
 8018b04:	24002bd0 	.word	0x24002bd0
 8018b08:	24002bec 	.word	0x24002bec
 8018b0c:	24002c00 	.word	0x24002c00
 8018b10:	24002c18 	.word	0x24002c18
 8018b14:	24002be4 	.word	0x24002be4
 8018b18:	24002be8 	.word	0x24002be8

08018b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b082      	sub	sp, #8
 8018b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018b22:	e019      	b.n	8018b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018b24:	f000 fe0e 	bl	8019744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b28:	4b10      	ldr	r3, [pc, #64]	; (8018b6c <prvCheckTasksWaitingTermination+0x50>)
 8018b2a:	68db      	ldr	r3, [r3, #12]
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	3304      	adds	r3, #4
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7fe fc87 	bl	8017448 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018b3a:	4b0d      	ldr	r3, [pc, #52]	; (8018b70 <prvCheckTasksWaitingTermination+0x54>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	3b01      	subs	r3, #1
 8018b40:	4a0b      	ldr	r2, [pc, #44]	; (8018b70 <prvCheckTasksWaitingTermination+0x54>)
 8018b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018b44:	4b0b      	ldr	r3, [pc, #44]	; (8018b74 <prvCheckTasksWaitingTermination+0x58>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	3b01      	subs	r3, #1
 8018b4a:	4a0a      	ldr	r2, [pc, #40]	; (8018b74 <prvCheckTasksWaitingTermination+0x58>)
 8018b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018b4e:	f000 fe29 	bl	80197a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	f000 f810 	bl	8018b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018b58:	4b06      	ldr	r3, [pc, #24]	; (8018b74 <prvCheckTasksWaitingTermination+0x58>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d1e1      	bne.n	8018b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018b60:	bf00      	nop
 8018b62:	bf00      	nop
 8018b64:	3708      	adds	r7, #8
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd80      	pop	{r7, pc}
 8018b6a:	bf00      	nop
 8018b6c:	24002c00 	.word	0x24002c00
 8018b70:	24002c2c 	.word	0x24002c2c
 8018b74:	24002c14 	.word	0x24002c14

08018b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d108      	bne.n	8018b9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f000 ffc6 	bl	8019b20 <vPortFree>
				vPortFree( pxTCB );
 8018b94:	6878      	ldr	r0, [r7, #4]
 8018b96:	f000 ffc3 	bl	8019b20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018b9a:	e018      	b.n	8018bce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018ba2:	2b01      	cmp	r3, #1
 8018ba4:	d103      	bne.n	8018bae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018ba6:	6878      	ldr	r0, [r7, #4]
 8018ba8:	f000 ffba 	bl	8019b20 <vPortFree>
	}
 8018bac:	e00f      	b.n	8018bce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018bb4:	2b02      	cmp	r3, #2
 8018bb6:	d00a      	beq.n	8018bce <prvDeleteTCB+0x56>
	__asm volatile
 8018bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bbc:	f383 8811 	msr	BASEPRI, r3
 8018bc0:	f3bf 8f6f 	isb	sy
 8018bc4:	f3bf 8f4f 	dsb	sy
 8018bc8:	60fb      	str	r3, [r7, #12]
}
 8018bca:	bf00      	nop
 8018bcc:	e7fe      	b.n	8018bcc <prvDeleteTCB+0x54>
	}
 8018bce:	bf00      	nop
 8018bd0:	3710      	adds	r7, #16
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}
	...

08018bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018bd8:	b480      	push	{r7}
 8018bda:	b083      	sub	sp, #12
 8018bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018bde:	4b0c      	ldr	r3, [pc, #48]	; (8018c10 <prvResetNextTaskUnblockTime+0x38>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d104      	bne.n	8018bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018be8:	4b0a      	ldr	r3, [pc, #40]	; (8018c14 <prvResetNextTaskUnblockTime+0x3c>)
 8018bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018bf0:	e008      	b.n	8018c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018bf2:	4b07      	ldr	r3, [pc, #28]	; (8018c10 <prvResetNextTaskUnblockTime+0x38>)
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	68db      	ldr	r3, [r3, #12]
 8018bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	685b      	ldr	r3, [r3, #4]
 8018c00:	4a04      	ldr	r2, [pc, #16]	; (8018c14 <prvResetNextTaskUnblockTime+0x3c>)
 8018c02:	6013      	str	r3, [r2, #0]
}
 8018c04:	bf00      	nop
 8018c06:	370c      	adds	r7, #12
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0e:	4770      	bx	lr
 8018c10:	24002be4 	.word	0x24002be4
 8018c14:	24002c4c 	.word	0x24002c4c

08018c18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018c18:	b480      	push	{r7}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018c1e:	4b0b      	ldr	r3, [pc, #44]	; (8018c4c <xTaskGetSchedulerState+0x34>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d102      	bne.n	8018c2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018c26:	2301      	movs	r3, #1
 8018c28:	607b      	str	r3, [r7, #4]
 8018c2a:	e008      	b.n	8018c3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018c2c:	4b08      	ldr	r3, [pc, #32]	; (8018c50 <xTaskGetSchedulerState+0x38>)
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d102      	bne.n	8018c3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018c34:	2302      	movs	r3, #2
 8018c36:	607b      	str	r3, [r7, #4]
 8018c38:	e001      	b.n	8018c3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018c3e:	687b      	ldr	r3, [r7, #4]
	}
 8018c40:	4618      	mov	r0, r3
 8018c42:	370c      	adds	r7, #12
 8018c44:	46bd      	mov	sp, r7
 8018c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4a:	4770      	bx	lr
 8018c4c:	24002c38 	.word	0x24002c38
 8018c50:	24002c54 	.word	0x24002c54

08018c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b086      	sub	sp, #24
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018c60:	2300      	movs	r3, #0
 8018c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d056      	beq.n	8018d18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018c6a:	4b2e      	ldr	r3, [pc, #184]	; (8018d24 <xTaskPriorityDisinherit+0xd0>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	693a      	ldr	r2, [r7, #16]
 8018c70:	429a      	cmp	r2, r3
 8018c72:	d00a      	beq.n	8018c8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c78:	f383 8811 	msr	BASEPRI, r3
 8018c7c:	f3bf 8f6f 	isb	sy
 8018c80:	f3bf 8f4f 	dsb	sy
 8018c84:	60fb      	str	r3, [r7, #12]
}
 8018c86:	bf00      	nop
 8018c88:	e7fe      	b.n	8018c88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018c8a:	693b      	ldr	r3, [r7, #16]
 8018c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d10a      	bne.n	8018ca8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c96:	f383 8811 	msr	BASEPRI, r3
 8018c9a:	f3bf 8f6f 	isb	sy
 8018c9e:	f3bf 8f4f 	dsb	sy
 8018ca2:	60bb      	str	r3, [r7, #8]
}
 8018ca4:	bf00      	nop
 8018ca6:	e7fe      	b.n	8018ca6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018ca8:	693b      	ldr	r3, [r7, #16]
 8018caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cac:	1e5a      	subs	r2, r3, #1
 8018cae:	693b      	ldr	r3, [r7, #16]
 8018cb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018cb2:	693b      	ldr	r3, [r7, #16]
 8018cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cb6:	693b      	ldr	r3, [r7, #16]
 8018cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018cba:	429a      	cmp	r2, r3
 8018cbc:	d02c      	beq.n	8018d18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018cbe:	693b      	ldr	r3, [r7, #16]
 8018cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d128      	bne.n	8018d18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	3304      	adds	r3, #4
 8018cca:	4618      	mov	r0, r3
 8018ccc:	f7fe fbbc 	bl	8017448 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018cd0:	693b      	ldr	r3, [r7, #16]
 8018cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cd8:	693b      	ldr	r3, [r7, #16]
 8018cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018ce0:	693b      	ldr	r3, [r7, #16]
 8018ce2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ce8:	4b0f      	ldr	r3, [pc, #60]	; (8018d28 <xTaskPriorityDisinherit+0xd4>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d903      	bls.n	8018cf8 <xTaskPriorityDisinherit+0xa4>
 8018cf0:	693b      	ldr	r3, [r7, #16]
 8018cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cf4:	4a0c      	ldr	r2, [pc, #48]	; (8018d28 <xTaskPriorityDisinherit+0xd4>)
 8018cf6:	6013      	str	r3, [r2, #0]
 8018cf8:	693b      	ldr	r3, [r7, #16]
 8018cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cfc:	4613      	mov	r3, r2
 8018cfe:	009b      	lsls	r3, r3, #2
 8018d00:	4413      	add	r3, r2
 8018d02:	009b      	lsls	r3, r3, #2
 8018d04:	4a09      	ldr	r2, [pc, #36]	; (8018d2c <xTaskPriorityDisinherit+0xd8>)
 8018d06:	441a      	add	r2, r3
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	3304      	adds	r3, #4
 8018d0c:	4619      	mov	r1, r3
 8018d0e:	4610      	mov	r0, r2
 8018d10:	f7fe fb3d 	bl	801738e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018d14:	2301      	movs	r3, #1
 8018d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018d18:	697b      	ldr	r3, [r7, #20]
	}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	3718      	adds	r7, #24
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd80      	pop	{r7, pc}
 8018d22:	bf00      	nop
 8018d24:	24002758 	.word	0x24002758
 8018d28:	24002c34 	.word	0x24002c34
 8018d2c:	2400275c 	.word	0x2400275c

08018d30 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018d30:	b480      	push	{r7}
 8018d32:	b083      	sub	sp, #12
 8018d34:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018d36:	4b09      	ldr	r3, [pc, #36]	; (8018d5c <uxTaskResetEventItemValue+0x2c>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	699b      	ldr	r3, [r3, #24]
 8018d3c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018d3e:	4b07      	ldr	r3, [pc, #28]	; (8018d5c <uxTaskResetEventItemValue+0x2c>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d44:	4b05      	ldr	r3, [pc, #20]	; (8018d5c <uxTaskResetEventItemValue+0x2c>)
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018d4c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018d4e:	687b      	ldr	r3, [r7, #4]
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	370c      	adds	r7, #12
 8018d54:	46bd      	mov	sp, r7
 8018d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5a:	4770      	bx	lr
 8018d5c:	24002758 	.word	0x24002758

08018d60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b084      	sub	sp, #16
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018d6a:	4b21      	ldr	r3, [pc, #132]	; (8018df0 <prvAddCurrentTaskToDelayedList+0x90>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d70:	4b20      	ldr	r3, [pc, #128]	; (8018df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	3304      	adds	r3, #4
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7fe fb66 	bl	8017448 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018d82:	d10a      	bne.n	8018d9a <prvAddCurrentTaskToDelayedList+0x3a>
 8018d84:	683b      	ldr	r3, [r7, #0]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d007      	beq.n	8018d9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018d8a:	4b1a      	ldr	r3, [pc, #104]	; (8018df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	3304      	adds	r3, #4
 8018d90:	4619      	mov	r1, r3
 8018d92:	4819      	ldr	r0, [pc, #100]	; (8018df8 <prvAddCurrentTaskToDelayedList+0x98>)
 8018d94:	f7fe fafb 	bl	801738e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018d98:	e026      	b.n	8018de8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018d9a:	68fa      	ldr	r2, [r7, #12]
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	4413      	add	r3, r2
 8018da0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018da2:	4b14      	ldr	r3, [pc, #80]	; (8018df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	68ba      	ldr	r2, [r7, #8]
 8018da8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018daa:	68ba      	ldr	r2, [r7, #8]
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d209      	bcs.n	8018dc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018db2:	4b12      	ldr	r3, [pc, #72]	; (8018dfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8018db4:	681a      	ldr	r2, [r3, #0]
 8018db6:	4b0f      	ldr	r3, [pc, #60]	; (8018df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	3304      	adds	r3, #4
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	4610      	mov	r0, r2
 8018dc0:	f7fe fb09 	bl	80173d6 <vListInsert>
}
 8018dc4:	e010      	b.n	8018de8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018dc6:	4b0e      	ldr	r3, [pc, #56]	; (8018e00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018dc8:	681a      	ldr	r2, [r3, #0]
 8018dca:	4b0a      	ldr	r3, [pc, #40]	; (8018df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	3304      	adds	r3, #4
 8018dd0:	4619      	mov	r1, r3
 8018dd2:	4610      	mov	r0, r2
 8018dd4:	f7fe faff 	bl	80173d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018dd8:	4b0a      	ldr	r3, [pc, #40]	; (8018e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	68ba      	ldr	r2, [r7, #8]
 8018dde:	429a      	cmp	r2, r3
 8018de0:	d202      	bcs.n	8018de8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018de2:	4a08      	ldr	r2, [pc, #32]	; (8018e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018de4:	68bb      	ldr	r3, [r7, #8]
 8018de6:	6013      	str	r3, [r2, #0]
}
 8018de8:	bf00      	nop
 8018dea:	3710      	adds	r7, #16
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	24002c30 	.word	0x24002c30
 8018df4:	24002758 	.word	0x24002758
 8018df8:	24002c18 	.word	0x24002c18
 8018dfc:	24002be8 	.word	0x24002be8
 8018e00:	24002be4 	.word	0x24002be4
 8018e04:	24002c4c 	.word	0x24002c4c

08018e08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b08a      	sub	sp, #40	; 0x28
 8018e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018e0e:	2300      	movs	r3, #0
 8018e10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018e12:	f000 fb07 	bl	8019424 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018e16:	4b1c      	ldr	r3, [pc, #112]	; (8018e88 <xTimerCreateTimerTask+0x80>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d021      	beq.n	8018e62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018e22:	2300      	movs	r3, #0
 8018e24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018e26:	1d3a      	adds	r2, r7, #4
 8018e28:	f107 0108 	add.w	r1, r7, #8
 8018e2c:	f107 030c 	add.w	r3, r7, #12
 8018e30:	4618      	mov	r0, r3
 8018e32:	f7fd fff9 	bl	8016e28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018e36:	6879      	ldr	r1, [r7, #4]
 8018e38:	68bb      	ldr	r3, [r7, #8]
 8018e3a:	68fa      	ldr	r2, [r7, #12]
 8018e3c:	9202      	str	r2, [sp, #8]
 8018e3e:	9301      	str	r3, [sp, #4]
 8018e40:	2302      	movs	r3, #2
 8018e42:	9300      	str	r3, [sp, #0]
 8018e44:	2300      	movs	r3, #0
 8018e46:	460a      	mov	r2, r1
 8018e48:	4910      	ldr	r1, [pc, #64]	; (8018e8c <xTimerCreateTimerTask+0x84>)
 8018e4a:	4811      	ldr	r0, [pc, #68]	; (8018e90 <xTimerCreateTimerTask+0x88>)
 8018e4c:	f7ff f812 	bl	8017e74 <xTaskCreateStatic>
 8018e50:	4603      	mov	r3, r0
 8018e52:	4a10      	ldr	r2, [pc, #64]	; (8018e94 <xTimerCreateTimerTask+0x8c>)
 8018e54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018e56:	4b0f      	ldr	r3, [pc, #60]	; (8018e94 <xTimerCreateTimerTask+0x8c>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d001      	beq.n	8018e62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018e5e:	2301      	movs	r3, #1
 8018e60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018e62:	697b      	ldr	r3, [r7, #20]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d10a      	bne.n	8018e7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e6c:	f383 8811 	msr	BASEPRI, r3
 8018e70:	f3bf 8f6f 	isb	sy
 8018e74:	f3bf 8f4f 	dsb	sy
 8018e78:	613b      	str	r3, [r7, #16]
}
 8018e7a:	bf00      	nop
 8018e7c:	e7fe      	b.n	8018e7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018e7e:	697b      	ldr	r3, [r7, #20]
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3718      	adds	r7, #24
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	24002c88 	.word	0x24002c88
 8018e8c:	0801aa48 	.word	0x0801aa48
 8018e90:	08018fcd 	.word	0x08018fcd
 8018e94:	24002c8c 	.word	0x24002c8c

08018e98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b08a      	sub	sp, #40	; 0x28
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	60f8      	str	r0, [r7, #12]
 8018ea0:	60b9      	str	r1, [r7, #8]
 8018ea2:	607a      	str	r2, [r7, #4]
 8018ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d10a      	bne.n	8018ec6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eb4:	f383 8811 	msr	BASEPRI, r3
 8018eb8:	f3bf 8f6f 	isb	sy
 8018ebc:	f3bf 8f4f 	dsb	sy
 8018ec0:	623b      	str	r3, [r7, #32]
}
 8018ec2:	bf00      	nop
 8018ec4:	e7fe      	b.n	8018ec4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018ec6:	4b1a      	ldr	r3, [pc, #104]	; (8018f30 <xTimerGenericCommand+0x98>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d02a      	beq.n	8018f24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018ece:	68bb      	ldr	r3, [r7, #8]
 8018ed0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	2b05      	cmp	r3, #5
 8018ede:	dc18      	bgt.n	8018f12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018ee0:	f7ff fe9a 	bl	8018c18 <xTaskGetSchedulerState>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	2b02      	cmp	r3, #2
 8018ee8:	d109      	bne.n	8018efe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018eea:	4b11      	ldr	r3, [pc, #68]	; (8018f30 <xTimerGenericCommand+0x98>)
 8018eec:	6818      	ldr	r0, [r3, #0]
 8018eee:	f107 0110 	add.w	r1, r7, #16
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ef6:	f7fe fbd5 	bl	80176a4 <xQueueGenericSend>
 8018efa:	6278      	str	r0, [r7, #36]	; 0x24
 8018efc:	e012      	b.n	8018f24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018efe:	4b0c      	ldr	r3, [pc, #48]	; (8018f30 <xTimerGenericCommand+0x98>)
 8018f00:	6818      	ldr	r0, [r3, #0]
 8018f02:	f107 0110 	add.w	r1, r7, #16
 8018f06:	2300      	movs	r3, #0
 8018f08:	2200      	movs	r2, #0
 8018f0a:	f7fe fbcb 	bl	80176a4 <xQueueGenericSend>
 8018f0e:	6278      	str	r0, [r7, #36]	; 0x24
 8018f10:	e008      	b.n	8018f24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018f12:	4b07      	ldr	r3, [pc, #28]	; (8018f30 <xTimerGenericCommand+0x98>)
 8018f14:	6818      	ldr	r0, [r3, #0]
 8018f16:	f107 0110 	add.w	r1, r7, #16
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	683a      	ldr	r2, [r7, #0]
 8018f1e:	f7fe fcbf 	bl	80178a0 <xQueueGenericSendFromISR>
 8018f22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018f26:	4618      	mov	r0, r3
 8018f28:	3728      	adds	r7, #40	; 0x28
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bd80      	pop	{r7, pc}
 8018f2e:	bf00      	nop
 8018f30:	24002c88 	.word	0x24002c88

08018f34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b088      	sub	sp, #32
 8018f38:	af02      	add	r7, sp, #8
 8018f3a:	6078      	str	r0, [r7, #4]
 8018f3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f3e:	4b22      	ldr	r3, [pc, #136]	; (8018fc8 <prvProcessExpiredTimer+0x94>)
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	68db      	ldr	r3, [r3, #12]
 8018f44:	68db      	ldr	r3, [r3, #12]
 8018f46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018f48:	697b      	ldr	r3, [r7, #20]
 8018f4a:	3304      	adds	r3, #4
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7fe fa7b 	bl	8017448 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f58:	f003 0304 	and.w	r3, r3, #4
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d022      	beq.n	8018fa6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	699a      	ldr	r2, [r3, #24]
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	18d1      	adds	r1, r2, r3
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	683a      	ldr	r2, [r7, #0]
 8018f6c:	6978      	ldr	r0, [r7, #20]
 8018f6e:	f000 f8d1 	bl	8019114 <prvInsertTimerInActiveList>
 8018f72:	4603      	mov	r3, r0
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d01f      	beq.n	8018fb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018f78:	2300      	movs	r3, #0
 8018f7a:	9300      	str	r3, [sp, #0]
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	687a      	ldr	r2, [r7, #4]
 8018f80:	2100      	movs	r1, #0
 8018f82:	6978      	ldr	r0, [r7, #20]
 8018f84:	f7ff ff88 	bl	8018e98 <xTimerGenericCommand>
 8018f88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018f8a:	693b      	ldr	r3, [r7, #16]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d113      	bne.n	8018fb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f94:	f383 8811 	msr	BASEPRI, r3
 8018f98:	f3bf 8f6f 	isb	sy
 8018f9c:	f3bf 8f4f 	dsb	sy
 8018fa0:	60fb      	str	r3, [r7, #12]
}
 8018fa2:	bf00      	nop
 8018fa4:	e7fe      	b.n	8018fa4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fac:	f023 0301 	bic.w	r3, r3, #1
 8018fb0:	b2da      	uxtb	r2, r3
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	6a1b      	ldr	r3, [r3, #32]
 8018fbc:	6978      	ldr	r0, [r7, #20]
 8018fbe:	4798      	blx	r3
}
 8018fc0:	bf00      	nop
 8018fc2:	3718      	adds	r7, #24
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}
 8018fc8:	24002c80 	.word	0x24002c80

08018fcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018fd4:	f107 0308 	add.w	r3, r7, #8
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f000 f857 	bl	801908c <prvGetNextExpireTime>
 8018fde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018fe0:	68bb      	ldr	r3, [r7, #8]
 8018fe2:	4619      	mov	r1, r3
 8018fe4:	68f8      	ldr	r0, [r7, #12]
 8018fe6:	f000 f803 	bl	8018ff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018fea:	f000 f8d5 	bl	8019198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018fee:	e7f1      	b.n	8018fd4 <prvTimerTask+0x8>

08018ff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b084      	sub	sp, #16
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
 8018ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018ffa:	f7ff f977 	bl	80182ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ffe:	f107 0308 	add.w	r3, r7, #8
 8019002:	4618      	mov	r0, r3
 8019004:	f000 f866 	bl	80190d4 <prvSampleTimeNow>
 8019008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801900a:	68bb      	ldr	r3, [r7, #8]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d130      	bne.n	8019072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019010:	683b      	ldr	r3, [r7, #0]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d10a      	bne.n	801902c <prvProcessTimerOrBlockTask+0x3c>
 8019016:	687a      	ldr	r2, [r7, #4]
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	429a      	cmp	r2, r3
 801901c:	d806      	bhi.n	801902c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801901e:	f7ff f973 	bl	8018308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019022:	68f9      	ldr	r1, [r7, #12]
 8019024:	6878      	ldr	r0, [r7, #4]
 8019026:	f7ff ff85 	bl	8018f34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801902a:	e024      	b.n	8019076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801902c:	683b      	ldr	r3, [r7, #0]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d008      	beq.n	8019044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019032:	4b13      	ldr	r3, [pc, #76]	; (8019080 <prvProcessTimerOrBlockTask+0x90>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d101      	bne.n	8019040 <prvProcessTimerOrBlockTask+0x50>
 801903c:	2301      	movs	r3, #1
 801903e:	e000      	b.n	8019042 <prvProcessTimerOrBlockTask+0x52>
 8019040:	2300      	movs	r3, #0
 8019042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019044:	4b0f      	ldr	r3, [pc, #60]	; (8019084 <prvProcessTimerOrBlockTask+0x94>)
 8019046:	6818      	ldr	r0, [r3, #0]
 8019048:	687a      	ldr	r2, [r7, #4]
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	1ad3      	subs	r3, r2, r3
 801904e:	683a      	ldr	r2, [r7, #0]
 8019050:	4619      	mov	r1, r3
 8019052:	f7fe fedb 	bl	8017e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019056:	f7ff f957 	bl	8018308 <xTaskResumeAll>
 801905a:	4603      	mov	r3, r0
 801905c:	2b00      	cmp	r3, #0
 801905e:	d10a      	bne.n	8019076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019060:	4b09      	ldr	r3, [pc, #36]	; (8019088 <prvProcessTimerOrBlockTask+0x98>)
 8019062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019066:	601a      	str	r2, [r3, #0]
 8019068:	f3bf 8f4f 	dsb	sy
 801906c:	f3bf 8f6f 	isb	sy
}
 8019070:	e001      	b.n	8019076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019072:	f7ff f949 	bl	8018308 <xTaskResumeAll>
}
 8019076:	bf00      	nop
 8019078:	3710      	adds	r7, #16
 801907a:	46bd      	mov	sp, r7
 801907c:	bd80      	pop	{r7, pc}
 801907e:	bf00      	nop
 8019080:	24002c84 	.word	0x24002c84
 8019084:	24002c88 	.word	0x24002c88
 8019088:	e000ed04 	.word	0xe000ed04

0801908c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801908c:	b480      	push	{r7}
 801908e:	b085      	sub	sp, #20
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019094:	4b0e      	ldr	r3, [pc, #56]	; (80190d0 <prvGetNextExpireTime+0x44>)
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	2b00      	cmp	r3, #0
 801909c:	d101      	bne.n	80190a2 <prvGetNextExpireTime+0x16>
 801909e:	2201      	movs	r2, #1
 80190a0:	e000      	b.n	80190a4 <prvGetNextExpireTime+0x18>
 80190a2:	2200      	movs	r2, #0
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d105      	bne.n	80190bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80190b0:	4b07      	ldr	r3, [pc, #28]	; (80190d0 <prvGetNextExpireTime+0x44>)
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	68db      	ldr	r3, [r3, #12]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	60fb      	str	r3, [r7, #12]
 80190ba:	e001      	b.n	80190c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80190bc:	2300      	movs	r3, #0
 80190be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80190c0:	68fb      	ldr	r3, [r7, #12]
}
 80190c2:	4618      	mov	r0, r3
 80190c4:	3714      	adds	r7, #20
 80190c6:	46bd      	mov	sp, r7
 80190c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190cc:	4770      	bx	lr
 80190ce:	bf00      	nop
 80190d0:	24002c80 	.word	0x24002c80

080190d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80190dc:	f7ff f9b2 	bl	8018444 <xTaskGetTickCount>
 80190e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80190e2:	4b0b      	ldr	r3, [pc, #44]	; (8019110 <prvSampleTimeNow+0x3c>)
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	68fa      	ldr	r2, [r7, #12]
 80190e8:	429a      	cmp	r2, r3
 80190ea:	d205      	bcs.n	80190f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80190ec:	f000 f936 	bl	801935c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2201      	movs	r2, #1
 80190f4:	601a      	str	r2, [r3, #0]
 80190f6:	e002      	b.n	80190fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	2200      	movs	r2, #0
 80190fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80190fe:	4a04      	ldr	r2, [pc, #16]	; (8019110 <prvSampleTimeNow+0x3c>)
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019104:	68fb      	ldr	r3, [r7, #12]
}
 8019106:	4618      	mov	r0, r3
 8019108:	3710      	adds	r7, #16
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
 801910e:	bf00      	nop
 8019110:	24002c90 	.word	0x24002c90

08019114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b086      	sub	sp, #24
 8019118:	af00      	add	r7, sp, #0
 801911a:	60f8      	str	r0, [r7, #12]
 801911c:	60b9      	str	r1, [r7, #8]
 801911e:	607a      	str	r2, [r7, #4]
 8019120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019122:	2300      	movs	r3, #0
 8019124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	68ba      	ldr	r2, [r7, #8]
 801912a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	68fa      	ldr	r2, [r7, #12]
 8019130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019132:	68ba      	ldr	r2, [r7, #8]
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	429a      	cmp	r2, r3
 8019138:	d812      	bhi.n	8019160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801913a:	687a      	ldr	r2, [r7, #4]
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	1ad2      	subs	r2, r2, r3
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	699b      	ldr	r3, [r3, #24]
 8019144:	429a      	cmp	r2, r3
 8019146:	d302      	bcc.n	801914e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019148:	2301      	movs	r3, #1
 801914a:	617b      	str	r3, [r7, #20]
 801914c:	e01b      	b.n	8019186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801914e:	4b10      	ldr	r3, [pc, #64]	; (8019190 <prvInsertTimerInActiveList+0x7c>)
 8019150:	681a      	ldr	r2, [r3, #0]
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	3304      	adds	r3, #4
 8019156:	4619      	mov	r1, r3
 8019158:	4610      	mov	r0, r2
 801915a:	f7fe f93c 	bl	80173d6 <vListInsert>
 801915e:	e012      	b.n	8019186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019160:	687a      	ldr	r2, [r7, #4]
 8019162:	683b      	ldr	r3, [r7, #0]
 8019164:	429a      	cmp	r2, r3
 8019166:	d206      	bcs.n	8019176 <prvInsertTimerInActiveList+0x62>
 8019168:	68ba      	ldr	r2, [r7, #8]
 801916a:	683b      	ldr	r3, [r7, #0]
 801916c:	429a      	cmp	r2, r3
 801916e:	d302      	bcc.n	8019176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019170:	2301      	movs	r3, #1
 8019172:	617b      	str	r3, [r7, #20]
 8019174:	e007      	b.n	8019186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019176:	4b07      	ldr	r3, [pc, #28]	; (8019194 <prvInsertTimerInActiveList+0x80>)
 8019178:	681a      	ldr	r2, [r3, #0]
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	3304      	adds	r3, #4
 801917e:	4619      	mov	r1, r3
 8019180:	4610      	mov	r0, r2
 8019182:	f7fe f928 	bl	80173d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019186:	697b      	ldr	r3, [r7, #20]
}
 8019188:	4618      	mov	r0, r3
 801918a:	3718      	adds	r7, #24
 801918c:	46bd      	mov	sp, r7
 801918e:	bd80      	pop	{r7, pc}
 8019190:	24002c84 	.word	0x24002c84
 8019194:	24002c80 	.word	0x24002c80

08019198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b08e      	sub	sp, #56	; 0x38
 801919c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801919e:	e0ca      	b.n	8019336 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	da18      	bge.n	80191d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80191a6:	1d3b      	adds	r3, r7, #4
 80191a8:	3304      	adds	r3, #4
 80191aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80191ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d10a      	bne.n	80191c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80191b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191b6:	f383 8811 	msr	BASEPRI, r3
 80191ba:	f3bf 8f6f 	isb	sy
 80191be:	f3bf 8f4f 	dsb	sy
 80191c2:	61fb      	str	r3, [r7, #28]
}
 80191c4:	bf00      	nop
 80191c6:	e7fe      	b.n	80191c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80191c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191ce:	6850      	ldr	r0, [r2, #4]
 80191d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191d2:	6892      	ldr	r2, [r2, #8]
 80191d4:	4611      	mov	r1, r2
 80191d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	f2c0 80aa 	blt.w	8019334 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80191e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e6:	695b      	ldr	r3, [r3, #20]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d004      	beq.n	80191f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ee:	3304      	adds	r3, #4
 80191f0:	4618      	mov	r0, r3
 80191f2:	f7fe f929 	bl	8017448 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80191f6:	463b      	mov	r3, r7
 80191f8:	4618      	mov	r0, r3
 80191fa:	f7ff ff6b 	bl	80190d4 <prvSampleTimeNow>
 80191fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	2b09      	cmp	r3, #9
 8019204:	f200 8097 	bhi.w	8019336 <prvProcessReceivedCommands+0x19e>
 8019208:	a201      	add	r2, pc, #4	; (adr r2, 8019210 <prvProcessReceivedCommands+0x78>)
 801920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801920e:	bf00      	nop
 8019210:	08019239 	.word	0x08019239
 8019214:	08019239 	.word	0x08019239
 8019218:	08019239 	.word	0x08019239
 801921c:	080192ad 	.word	0x080192ad
 8019220:	080192c1 	.word	0x080192c1
 8019224:	0801930b 	.word	0x0801930b
 8019228:	08019239 	.word	0x08019239
 801922c:	08019239 	.word	0x08019239
 8019230:	080192ad 	.word	0x080192ad
 8019234:	080192c1 	.word	0x080192c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801923a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801923e:	f043 0301 	orr.w	r3, r3, #1
 8019242:	b2da      	uxtb	r2, r3
 8019244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801924a:	68ba      	ldr	r2, [r7, #8]
 801924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801924e:	699b      	ldr	r3, [r3, #24]
 8019250:	18d1      	adds	r1, r2, r3
 8019252:	68bb      	ldr	r3, [r7, #8]
 8019254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019258:	f7ff ff5c 	bl	8019114 <prvInsertTimerInActiveList>
 801925c:	4603      	mov	r3, r0
 801925e:	2b00      	cmp	r3, #0
 8019260:	d069      	beq.n	8019336 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019264:	6a1b      	ldr	r3, [r3, #32]
 8019266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019268:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801926c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019270:	f003 0304 	and.w	r3, r3, #4
 8019274:	2b00      	cmp	r3, #0
 8019276:	d05e      	beq.n	8019336 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019278:	68ba      	ldr	r2, [r7, #8]
 801927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801927c:	699b      	ldr	r3, [r3, #24]
 801927e:	441a      	add	r2, r3
 8019280:	2300      	movs	r3, #0
 8019282:	9300      	str	r3, [sp, #0]
 8019284:	2300      	movs	r3, #0
 8019286:	2100      	movs	r1, #0
 8019288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801928a:	f7ff fe05 	bl	8018e98 <xTimerGenericCommand>
 801928e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019290:	6a3b      	ldr	r3, [r7, #32]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d14f      	bne.n	8019336 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801929a:	f383 8811 	msr	BASEPRI, r3
 801929e:	f3bf 8f6f 	isb	sy
 80192a2:	f3bf 8f4f 	dsb	sy
 80192a6:	61bb      	str	r3, [r7, #24]
}
 80192a8:	bf00      	nop
 80192aa:	e7fe      	b.n	80192aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80192ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80192b2:	f023 0301 	bic.w	r3, r3, #1
 80192b6:	b2da      	uxtb	r2, r3
 80192b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80192be:	e03a      	b.n	8019336 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80192c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80192c6:	f043 0301 	orr.w	r3, r3, #1
 80192ca:	b2da      	uxtb	r2, r3
 80192cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80192d2:	68ba      	ldr	r2, [r7, #8]
 80192d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80192d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192da:	699b      	ldr	r3, [r3, #24]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d10a      	bne.n	80192f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80192e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192e4:	f383 8811 	msr	BASEPRI, r3
 80192e8:	f3bf 8f6f 	isb	sy
 80192ec:	f3bf 8f4f 	dsb	sy
 80192f0:	617b      	str	r3, [r7, #20]
}
 80192f2:	bf00      	nop
 80192f4:	e7fe      	b.n	80192f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80192f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f8:	699a      	ldr	r2, [r3, #24]
 80192fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fc:	18d1      	adds	r1, r2, r3
 80192fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019304:	f7ff ff06 	bl	8019114 <prvInsertTimerInActiveList>
					break;
 8019308:	e015      	b.n	8019336 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801930c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019310:	f003 0302 	and.w	r3, r3, #2
 8019314:	2b00      	cmp	r3, #0
 8019316:	d103      	bne.n	8019320 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801931a:	f000 fc01 	bl	8019b20 <vPortFree>
 801931e:	e00a      	b.n	8019336 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019326:	f023 0301 	bic.w	r3, r3, #1
 801932a:	b2da      	uxtb	r2, r3
 801932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801932e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019332:	e000      	b.n	8019336 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019336:	4b08      	ldr	r3, [pc, #32]	; (8019358 <prvProcessReceivedCommands+0x1c0>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	1d39      	adds	r1, r7, #4
 801933c:	2200      	movs	r2, #0
 801933e:	4618      	mov	r0, r3
 8019340:	f7fe fb4a 	bl	80179d8 <xQueueReceive>
 8019344:	4603      	mov	r3, r0
 8019346:	2b00      	cmp	r3, #0
 8019348:	f47f af2a 	bne.w	80191a0 <prvProcessReceivedCommands+0x8>
	}
}
 801934c:	bf00      	nop
 801934e:	bf00      	nop
 8019350:	3730      	adds	r7, #48	; 0x30
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}
 8019356:	bf00      	nop
 8019358:	24002c88 	.word	0x24002c88

0801935c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b088      	sub	sp, #32
 8019360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019362:	e048      	b.n	80193f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019364:	4b2d      	ldr	r3, [pc, #180]	; (801941c <prvSwitchTimerLists+0xc0>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	68db      	ldr	r3, [r3, #12]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801936e:	4b2b      	ldr	r3, [pc, #172]	; (801941c <prvSwitchTimerLists+0xc0>)
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	68db      	ldr	r3, [r3, #12]
 8019374:	68db      	ldr	r3, [r3, #12]
 8019376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	3304      	adds	r3, #4
 801937c:	4618      	mov	r0, r3
 801937e:	f7fe f863 	bl	8017448 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	6a1b      	ldr	r3, [r3, #32]
 8019386:	68f8      	ldr	r0, [r7, #12]
 8019388:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019390:	f003 0304 	and.w	r3, r3, #4
 8019394:	2b00      	cmp	r3, #0
 8019396:	d02e      	beq.n	80193f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	699b      	ldr	r3, [r3, #24]
 801939c:	693a      	ldr	r2, [r7, #16]
 801939e:	4413      	add	r3, r2
 80193a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80193a2:	68ba      	ldr	r2, [r7, #8]
 80193a4:	693b      	ldr	r3, [r7, #16]
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d90e      	bls.n	80193c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	68ba      	ldr	r2, [r7, #8]
 80193ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	68fa      	ldr	r2, [r7, #12]
 80193b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80193b6:	4b19      	ldr	r3, [pc, #100]	; (801941c <prvSwitchTimerLists+0xc0>)
 80193b8:	681a      	ldr	r2, [r3, #0]
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	3304      	adds	r3, #4
 80193be:	4619      	mov	r1, r3
 80193c0:	4610      	mov	r0, r2
 80193c2:	f7fe f808 	bl	80173d6 <vListInsert>
 80193c6:	e016      	b.n	80193f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80193c8:	2300      	movs	r3, #0
 80193ca:	9300      	str	r3, [sp, #0]
 80193cc:	2300      	movs	r3, #0
 80193ce:	693a      	ldr	r2, [r7, #16]
 80193d0:	2100      	movs	r1, #0
 80193d2:	68f8      	ldr	r0, [r7, #12]
 80193d4:	f7ff fd60 	bl	8018e98 <xTimerGenericCommand>
 80193d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d10a      	bne.n	80193f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80193e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193e4:	f383 8811 	msr	BASEPRI, r3
 80193e8:	f3bf 8f6f 	isb	sy
 80193ec:	f3bf 8f4f 	dsb	sy
 80193f0:	603b      	str	r3, [r7, #0]
}
 80193f2:	bf00      	nop
 80193f4:	e7fe      	b.n	80193f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80193f6:	4b09      	ldr	r3, [pc, #36]	; (801941c <prvSwitchTimerLists+0xc0>)
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d1b1      	bne.n	8019364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019400:	4b06      	ldr	r3, [pc, #24]	; (801941c <prvSwitchTimerLists+0xc0>)
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019406:	4b06      	ldr	r3, [pc, #24]	; (8019420 <prvSwitchTimerLists+0xc4>)
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	4a04      	ldr	r2, [pc, #16]	; (801941c <prvSwitchTimerLists+0xc0>)
 801940c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801940e:	4a04      	ldr	r2, [pc, #16]	; (8019420 <prvSwitchTimerLists+0xc4>)
 8019410:	697b      	ldr	r3, [r7, #20]
 8019412:	6013      	str	r3, [r2, #0]
}
 8019414:	bf00      	nop
 8019416:	3718      	adds	r7, #24
 8019418:	46bd      	mov	sp, r7
 801941a:	bd80      	pop	{r7, pc}
 801941c:	24002c80 	.word	0x24002c80
 8019420:	24002c84 	.word	0x24002c84

08019424 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b082      	sub	sp, #8
 8019428:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801942a:	f000 f98b 	bl	8019744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801942e:	4b15      	ldr	r3, [pc, #84]	; (8019484 <prvCheckForValidListAndQueue+0x60>)
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d120      	bne.n	8019478 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019436:	4814      	ldr	r0, [pc, #80]	; (8019488 <prvCheckForValidListAndQueue+0x64>)
 8019438:	f7fd ff7c 	bl	8017334 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801943c:	4813      	ldr	r0, [pc, #76]	; (801948c <prvCheckForValidListAndQueue+0x68>)
 801943e:	f7fd ff79 	bl	8017334 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019442:	4b13      	ldr	r3, [pc, #76]	; (8019490 <prvCheckForValidListAndQueue+0x6c>)
 8019444:	4a10      	ldr	r2, [pc, #64]	; (8019488 <prvCheckForValidListAndQueue+0x64>)
 8019446:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019448:	4b12      	ldr	r3, [pc, #72]	; (8019494 <prvCheckForValidListAndQueue+0x70>)
 801944a:	4a10      	ldr	r2, [pc, #64]	; (801948c <prvCheckForValidListAndQueue+0x68>)
 801944c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801944e:	2300      	movs	r3, #0
 8019450:	9300      	str	r3, [sp, #0]
 8019452:	4b11      	ldr	r3, [pc, #68]	; (8019498 <prvCheckForValidListAndQueue+0x74>)
 8019454:	4a11      	ldr	r2, [pc, #68]	; (801949c <prvCheckForValidListAndQueue+0x78>)
 8019456:	2110      	movs	r1, #16
 8019458:	200a      	movs	r0, #10
 801945a:	f7fe f887 	bl	801756c <xQueueGenericCreateStatic>
 801945e:	4603      	mov	r3, r0
 8019460:	4a08      	ldr	r2, [pc, #32]	; (8019484 <prvCheckForValidListAndQueue+0x60>)
 8019462:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019464:	4b07      	ldr	r3, [pc, #28]	; (8019484 <prvCheckForValidListAndQueue+0x60>)
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d005      	beq.n	8019478 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801946c:	4b05      	ldr	r3, [pc, #20]	; (8019484 <prvCheckForValidListAndQueue+0x60>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	490b      	ldr	r1, [pc, #44]	; (80194a0 <prvCheckForValidListAndQueue+0x7c>)
 8019472:	4618      	mov	r0, r3
 8019474:	f7fe fca0 	bl	8017db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019478:	f000 f994 	bl	80197a4 <vPortExitCritical>
}
 801947c:	bf00      	nop
 801947e:	46bd      	mov	sp, r7
 8019480:	bd80      	pop	{r7, pc}
 8019482:	bf00      	nop
 8019484:	24002c88 	.word	0x24002c88
 8019488:	24002c58 	.word	0x24002c58
 801948c:	24002c6c 	.word	0x24002c6c
 8019490:	24002c80 	.word	0x24002c80
 8019494:	24002c84 	.word	0x24002c84
 8019498:	24002d34 	.word	0x24002d34
 801949c:	24002c94 	.word	0x24002c94
 80194a0:	0801aa50 	.word	0x0801aa50

080194a4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b08a      	sub	sp, #40	; 0x28
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	60f8      	str	r0, [r7, #12]
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	607a      	str	r2, [r7, #4]
 80194b0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80194b2:	f06f 0301 	mvn.w	r3, #1
 80194b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80194bc:	68bb      	ldr	r3, [r7, #8]
 80194be:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80194c4:	4b06      	ldr	r3, [pc, #24]	; (80194e0 <xTimerPendFunctionCallFromISR+0x3c>)
 80194c6:	6818      	ldr	r0, [r3, #0]
 80194c8:	f107 0114 	add.w	r1, r7, #20
 80194cc:	2300      	movs	r3, #0
 80194ce:	683a      	ldr	r2, [r7, #0]
 80194d0:	f7fe f9e6 	bl	80178a0 <xQueueGenericSendFromISR>
 80194d4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80194d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80194d8:	4618      	mov	r0, r3
 80194da:	3728      	adds	r7, #40	; 0x28
 80194dc:	46bd      	mov	sp, r7
 80194de:	bd80      	pop	{r7, pc}
 80194e0:	24002c88 	.word	0x24002c88

080194e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80194e4:	b480      	push	{r7}
 80194e6:	b085      	sub	sp, #20
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	60f8      	str	r0, [r7, #12]
 80194ec:	60b9      	str	r1, [r7, #8]
 80194ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	3b04      	subs	r3, #4
 80194f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80194fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	3b04      	subs	r3, #4
 8019502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	f023 0201 	bic.w	r2, r3, #1
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	3b04      	subs	r3, #4
 8019512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019514:	4a0c      	ldr	r2, [pc, #48]	; (8019548 <pxPortInitialiseStack+0x64>)
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	3b14      	subs	r3, #20
 801951e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019520:	687a      	ldr	r2, [r7, #4]
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	3b04      	subs	r3, #4
 801952a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	f06f 0202 	mvn.w	r2, #2
 8019532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	3b20      	subs	r3, #32
 8019538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801953a:	68fb      	ldr	r3, [r7, #12]
}
 801953c:	4618      	mov	r0, r3
 801953e:	3714      	adds	r7, #20
 8019540:	46bd      	mov	sp, r7
 8019542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019546:	4770      	bx	lr
 8019548:	0801954d 	.word	0x0801954d

0801954c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801954c:	b480      	push	{r7}
 801954e:	b085      	sub	sp, #20
 8019550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019552:	2300      	movs	r3, #0
 8019554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019556:	4b12      	ldr	r3, [pc, #72]	; (80195a0 <prvTaskExitError+0x54>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801955e:	d00a      	beq.n	8019576 <prvTaskExitError+0x2a>
	__asm volatile
 8019560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019564:	f383 8811 	msr	BASEPRI, r3
 8019568:	f3bf 8f6f 	isb	sy
 801956c:	f3bf 8f4f 	dsb	sy
 8019570:	60fb      	str	r3, [r7, #12]
}
 8019572:	bf00      	nop
 8019574:	e7fe      	b.n	8019574 <prvTaskExitError+0x28>
	__asm volatile
 8019576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801957a:	f383 8811 	msr	BASEPRI, r3
 801957e:	f3bf 8f6f 	isb	sy
 8019582:	f3bf 8f4f 	dsb	sy
 8019586:	60bb      	str	r3, [r7, #8]
}
 8019588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801958a:	bf00      	nop
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d0fc      	beq.n	801958c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019592:	bf00      	nop
 8019594:	bf00      	nop
 8019596:	3714      	adds	r7, #20
 8019598:	46bd      	mov	sp, r7
 801959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959e:	4770      	bx	lr
 80195a0:	240000cc 	.word	0x240000cc
	...

080195b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80195b0:	4b07      	ldr	r3, [pc, #28]	; (80195d0 <pxCurrentTCBConst2>)
 80195b2:	6819      	ldr	r1, [r3, #0]
 80195b4:	6808      	ldr	r0, [r1, #0]
 80195b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ba:	f380 8809 	msr	PSP, r0
 80195be:	f3bf 8f6f 	isb	sy
 80195c2:	f04f 0000 	mov.w	r0, #0
 80195c6:	f380 8811 	msr	BASEPRI, r0
 80195ca:	4770      	bx	lr
 80195cc:	f3af 8000 	nop.w

080195d0 <pxCurrentTCBConst2>:
 80195d0:	24002758 	.word	0x24002758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80195d4:	bf00      	nop
 80195d6:	bf00      	nop

080195d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80195d8:	4808      	ldr	r0, [pc, #32]	; (80195fc <prvPortStartFirstTask+0x24>)
 80195da:	6800      	ldr	r0, [r0, #0]
 80195dc:	6800      	ldr	r0, [r0, #0]
 80195de:	f380 8808 	msr	MSP, r0
 80195e2:	f04f 0000 	mov.w	r0, #0
 80195e6:	f380 8814 	msr	CONTROL, r0
 80195ea:	b662      	cpsie	i
 80195ec:	b661      	cpsie	f
 80195ee:	f3bf 8f4f 	dsb	sy
 80195f2:	f3bf 8f6f 	isb	sy
 80195f6:	df00      	svc	0
 80195f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80195fa:	bf00      	nop
 80195fc:	e000ed08 	.word	0xe000ed08

08019600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b086      	sub	sp, #24
 8019604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019606:	4b46      	ldr	r3, [pc, #280]	; (8019720 <xPortStartScheduler+0x120>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	4a46      	ldr	r2, [pc, #280]	; (8019724 <xPortStartScheduler+0x124>)
 801960c:	4293      	cmp	r3, r2
 801960e:	d10a      	bne.n	8019626 <xPortStartScheduler+0x26>
	__asm volatile
 8019610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019614:	f383 8811 	msr	BASEPRI, r3
 8019618:	f3bf 8f6f 	isb	sy
 801961c:	f3bf 8f4f 	dsb	sy
 8019620:	613b      	str	r3, [r7, #16]
}
 8019622:	bf00      	nop
 8019624:	e7fe      	b.n	8019624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019626:	4b3e      	ldr	r3, [pc, #248]	; (8019720 <xPortStartScheduler+0x120>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	4a3f      	ldr	r2, [pc, #252]	; (8019728 <xPortStartScheduler+0x128>)
 801962c:	4293      	cmp	r3, r2
 801962e:	d10a      	bne.n	8019646 <xPortStartScheduler+0x46>
	__asm volatile
 8019630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019634:	f383 8811 	msr	BASEPRI, r3
 8019638:	f3bf 8f6f 	isb	sy
 801963c:	f3bf 8f4f 	dsb	sy
 8019640:	60fb      	str	r3, [r7, #12]
}
 8019642:	bf00      	nop
 8019644:	e7fe      	b.n	8019644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019646:	4b39      	ldr	r3, [pc, #228]	; (801972c <xPortStartScheduler+0x12c>)
 8019648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801964a:	697b      	ldr	r3, [r7, #20]
 801964c:	781b      	ldrb	r3, [r3, #0]
 801964e:	b2db      	uxtb	r3, r3
 8019650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019652:	697b      	ldr	r3, [r7, #20]
 8019654:	22ff      	movs	r2, #255	; 0xff
 8019656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019658:	697b      	ldr	r3, [r7, #20]
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	b2db      	uxtb	r3, r3
 801965e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019660:	78fb      	ldrb	r3, [r7, #3]
 8019662:	b2db      	uxtb	r3, r3
 8019664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019668:	b2da      	uxtb	r2, r3
 801966a:	4b31      	ldr	r3, [pc, #196]	; (8019730 <xPortStartScheduler+0x130>)
 801966c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801966e:	4b31      	ldr	r3, [pc, #196]	; (8019734 <xPortStartScheduler+0x134>)
 8019670:	2207      	movs	r2, #7
 8019672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019674:	e009      	b.n	801968a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019676:	4b2f      	ldr	r3, [pc, #188]	; (8019734 <xPortStartScheduler+0x134>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	3b01      	subs	r3, #1
 801967c:	4a2d      	ldr	r2, [pc, #180]	; (8019734 <xPortStartScheduler+0x134>)
 801967e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019680:	78fb      	ldrb	r3, [r7, #3]
 8019682:	b2db      	uxtb	r3, r3
 8019684:	005b      	lsls	r3, r3, #1
 8019686:	b2db      	uxtb	r3, r3
 8019688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801968a:	78fb      	ldrb	r3, [r7, #3]
 801968c:	b2db      	uxtb	r3, r3
 801968e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019692:	2b80      	cmp	r3, #128	; 0x80
 8019694:	d0ef      	beq.n	8019676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019696:	4b27      	ldr	r3, [pc, #156]	; (8019734 <xPortStartScheduler+0x134>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	f1c3 0307 	rsb	r3, r3, #7
 801969e:	2b04      	cmp	r3, #4
 80196a0:	d00a      	beq.n	80196b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80196a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196a6:	f383 8811 	msr	BASEPRI, r3
 80196aa:	f3bf 8f6f 	isb	sy
 80196ae:	f3bf 8f4f 	dsb	sy
 80196b2:	60bb      	str	r3, [r7, #8]
}
 80196b4:	bf00      	nop
 80196b6:	e7fe      	b.n	80196b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80196b8:	4b1e      	ldr	r3, [pc, #120]	; (8019734 <xPortStartScheduler+0x134>)
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	021b      	lsls	r3, r3, #8
 80196be:	4a1d      	ldr	r2, [pc, #116]	; (8019734 <xPortStartScheduler+0x134>)
 80196c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80196c2:	4b1c      	ldr	r3, [pc, #112]	; (8019734 <xPortStartScheduler+0x134>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80196ca:	4a1a      	ldr	r2, [pc, #104]	; (8019734 <xPortStartScheduler+0x134>)
 80196cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	b2da      	uxtb	r2, r3
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80196d6:	4b18      	ldr	r3, [pc, #96]	; (8019738 <xPortStartScheduler+0x138>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	4a17      	ldr	r2, [pc, #92]	; (8019738 <xPortStartScheduler+0x138>)
 80196dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80196e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80196e2:	4b15      	ldr	r3, [pc, #84]	; (8019738 <xPortStartScheduler+0x138>)
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	4a14      	ldr	r2, [pc, #80]	; (8019738 <xPortStartScheduler+0x138>)
 80196e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80196ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80196ee:	f000 f8dd 	bl	80198ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80196f2:	4b12      	ldr	r3, [pc, #72]	; (801973c <xPortStartScheduler+0x13c>)
 80196f4:	2200      	movs	r2, #0
 80196f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80196f8:	f000 f8fc 	bl	80198f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80196fc:	4b10      	ldr	r3, [pc, #64]	; (8019740 <xPortStartScheduler+0x140>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	4a0f      	ldr	r2, [pc, #60]	; (8019740 <xPortStartScheduler+0x140>)
 8019702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019708:	f7ff ff66 	bl	80195d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801970c:	f7fe ff6c 	bl	80185e8 <vTaskSwitchContext>
	prvTaskExitError();
 8019710:	f7ff ff1c 	bl	801954c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019714:	2300      	movs	r3, #0
}
 8019716:	4618      	mov	r0, r3
 8019718:	3718      	adds	r7, #24
 801971a:	46bd      	mov	sp, r7
 801971c:	bd80      	pop	{r7, pc}
 801971e:	bf00      	nop
 8019720:	e000ed00 	.word	0xe000ed00
 8019724:	410fc271 	.word	0x410fc271
 8019728:	410fc270 	.word	0x410fc270
 801972c:	e000e400 	.word	0xe000e400
 8019730:	24002d84 	.word	0x24002d84
 8019734:	24002d88 	.word	0x24002d88
 8019738:	e000ed20 	.word	0xe000ed20
 801973c:	240000cc 	.word	0x240000cc
 8019740:	e000ef34 	.word	0xe000ef34

08019744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019744:	b480      	push	{r7}
 8019746:	b083      	sub	sp, #12
 8019748:	af00      	add	r7, sp, #0
	__asm volatile
 801974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801974e:	f383 8811 	msr	BASEPRI, r3
 8019752:	f3bf 8f6f 	isb	sy
 8019756:	f3bf 8f4f 	dsb	sy
 801975a:	607b      	str	r3, [r7, #4]
}
 801975c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801975e:	4b0f      	ldr	r3, [pc, #60]	; (801979c <vPortEnterCritical+0x58>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	3301      	adds	r3, #1
 8019764:	4a0d      	ldr	r2, [pc, #52]	; (801979c <vPortEnterCritical+0x58>)
 8019766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019768:	4b0c      	ldr	r3, [pc, #48]	; (801979c <vPortEnterCritical+0x58>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	2b01      	cmp	r3, #1
 801976e:	d10f      	bne.n	8019790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019770:	4b0b      	ldr	r3, [pc, #44]	; (80197a0 <vPortEnterCritical+0x5c>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	b2db      	uxtb	r3, r3
 8019776:	2b00      	cmp	r3, #0
 8019778:	d00a      	beq.n	8019790 <vPortEnterCritical+0x4c>
	__asm volatile
 801977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801977e:	f383 8811 	msr	BASEPRI, r3
 8019782:	f3bf 8f6f 	isb	sy
 8019786:	f3bf 8f4f 	dsb	sy
 801978a:	603b      	str	r3, [r7, #0]
}
 801978c:	bf00      	nop
 801978e:	e7fe      	b.n	801978e <vPortEnterCritical+0x4a>
	}
}
 8019790:	bf00      	nop
 8019792:	370c      	adds	r7, #12
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr
 801979c:	240000cc 	.word	0x240000cc
 80197a0:	e000ed04 	.word	0xe000ed04

080197a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80197a4:	b480      	push	{r7}
 80197a6:	b083      	sub	sp, #12
 80197a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80197aa:	4b12      	ldr	r3, [pc, #72]	; (80197f4 <vPortExitCritical+0x50>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d10a      	bne.n	80197c8 <vPortExitCritical+0x24>
	__asm volatile
 80197b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b6:	f383 8811 	msr	BASEPRI, r3
 80197ba:	f3bf 8f6f 	isb	sy
 80197be:	f3bf 8f4f 	dsb	sy
 80197c2:	607b      	str	r3, [r7, #4]
}
 80197c4:	bf00      	nop
 80197c6:	e7fe      	b.n	80197c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80197c8:	4b0a      	ldr	r3, [pc, #40]	; (80197f4 <vPortExitCritical+0x50>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	3b01      	subs	r3, #1
 80197ce:	4a09      	ldr	r2, [pc, #36]	; (80197f4 <vPortExitCritical+0x50>)
 80197d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80197d2:	4b08      	ldr	r3, [pc, #32]	; (80197f4 <vPortExitCritical+0x50>)
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d105      	bne.n	80197e6 <vPortExitCritical+0x42>
 80197da:	2300      	movs	r3, #0
 80197dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	f383 8811 	msr	BASEPRI, r3
}
 80197e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80197e6:	bf00      	nop
 80197e8:	370c      	adds	r7, #12
 80197ea:	46bd      	mov	sp, r7
 80197ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f0:	4770      	bx	lr
 80197f2:	bf00      	nop
 80197f4:	240000cc 	.word	0x240000cc
	...

08019800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019800:	f3ef 8009 	mrs	r0, PSP
 8019804:	f3bf 8f6f 	isb	sy
 8019808:	4b15      	ldr	r3, [pc, #84]	; (8019860 <pxCurrentTCBConst>)
 801980a:	681a      	ldr	r2, [r3, #0]
 801980c:	f01e 0f10 	tst.w	lr, #16
 8019810:	bf08      	it	eq
 8019812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801981a:	6010      	str	r0, [r2, #0]
 801981c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019824:	f380 8811 	msr	BASEPRI, r0
 8019828:	f3bf 8f4f 	dsb	sy
 801982c:	f3bf 8f6f 	isb	sy
 8019830:	f7fe feda 	bl	80185e8 <vTaskSwitchContext>
 8019834:	f04f 0000 	mov.w	r0, #0
 8019838:	f380 8811 	msr	BASEPRI, r0
 801983c:	bc09      	pop	{r0, r3}
 801983e:	6819      	ldr	r1, [r3, #0]
 8019840:	6808      	ldr	r0, [r1, #0]
 8019842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019846:	f01e 0f10 	tst.w	lr, #16
 801984a:	bf08      	it	eq
 801984c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019850:	f380 8809 	msr	PSP, r0
 8019854:	f3bf 8f6f 	isb	sy
 8019858:	4770      	bx	lr
 801985a:	bf00      	nop
 801985c:	f3af 8000 	nop.w

08019860 <pxCurrentTCBConst>:
 8019860:	24002758 	.word	0x24002758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019864:	bf00      	nop
 8019866:	bf00      	nop

08019868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b082      	sub	sp, #8
 801986c:	af00      	add	r7, sp, #0
	__asm volatile
 801986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019872:	f383 8811 	msr	BASEPRI, r3
 8019876:	f3bf 8f6f 	isb	sy
 801987a:	f3bf 8f4f 	dsb	sy
 801987e:	607b      	str	r3, [r7, #4]
}
 8019880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019882:	f7fe fdef 	bl	8018464 <xTaskIncrementTick>
 8019886:	4603      	mov	r3, r0
 8019888:	2b00      	cmp	r3, #0
 801988a:	d003      	beq.n	8019894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801988c:	4b06      	ldr	r3, [pc, #24]	; (80198a8 <xPortSysTickHandler+0x40>)
 801988e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019892:	601a      	str	r2, [r3, #0]
 8019894:	2300      	movs	r3, #0
 8019896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	f383 8811 	msr	BASEPRI, r3
}
 801989e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80198a0:	bf00      	nop
 80198a2:	3708      	adds	r7, #8
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	e000ed04 	.word	0xe000ed04

080198ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80198ac:	b480      	push	{r7}
 80198ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80198b0:	4b0b      	ldr	r3, [pc, #44]	; (80198e0 <vPortSetupTimerInterrupt+0x34>)
 80198b2:	2200      	movs	r2, #0
 80198b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80198b6:	4b0b      	ldr	r3, [pc, #44]	; (80198e4 <vPortSetupTimerInterrupt+0x38>)
 80198b8:	2200      	movs	r2, #0
 80198ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80198bc:	4b0a      	ldr	r3, [pc, #40]	; (80198e8 <vPortSetupTimerInterrupt+0x3c>)
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	4a0a      	ldr	r2, [pc, #40]	; (80198ec <vPortSetupTimerInterrupt+0x40>)
 80198c2:	fba2 2303 	umull	r2, r3, r2, r3
 80198c6:	099b      	lsrs	r3, r3, #6
 80198c8:	4a09      	ldr	r2, [pc, #36]	; (80198f0 <vPortSetupTimerInterrupt+0x44>)
 80198ca:	3b01      	subs	r3, #1
 80198cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80198ce:	4b04      	ldr	r3, [pc, #16]	; (80198e0 <vPortSetupTimerInterrupt+0x34>)
 80198d0:	2207      	movs	r2, #7
 80198d2:	601a      	str	r2, [r3, #0]
}
 80198d4:	bf00      	nop
 80198d6:	46bd      	mov	sp, r7
 80198d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198dc:	4770      	bx	lr
 80198de:	bf00      	nop
 80198e0:	e000e010 	.word	0xe000e010
 80198e4:	e000e018 	.word	0xe000e018
 80198e8:	240000bc 	.word	0x240000bc
 80198ec:	10624dd3 	.word	0x10624dd3
 80198f0:	e000e014 	.word	0xe000e014

080198f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80198f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019904 <vPortEnableVFP+0x10>
 80198f8:	6801      	ldr	r1, [r0, #0]
 80198fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80198fe:	6001      	str	r1, [r0, #0]
 8019900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019902:	bf00      	nop
 8019904:	e000ed88 	.word	0xe000ed88

08019908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019908:	b480      	push	{r7}
 801990a:	b085      	sub	sp, #20
 801990c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801990e:	f3ef 8305 	mrs	r3, IPSR
 8019912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	2b0f      	cmp	r3, #15
 8019918:	d914      	bls.n	8019944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801991a:	4a17      	ldr	r2, [pc, #92]	; (8019978 <vPortValidateInterruptPriority+0x70>)
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	4413      	add	r3, r2
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019924:	4b15      	ldr	r3, [pc, #84]	; (801997c <vPortValidateInterruptPriority+0x74>)
 8019926:	781b      	ldrb	r3, [r3, #0]
 8019928:	7afa      	ldrb	r2, [r7, #11]
 801992a:	429a      	cmp	r2, r3
 801992c:	d20a      	bcs.n	8019944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019932:	f383 8811 	msr	BASEPRI, r3
 8019936:	f3bf 8f6f 	isb	sy
 801993a:	f3bf 8f4f 	dsb	sy
 801993e:	607b      	str	r3, [r7, #4]
}
 8019940:	bf00      	nop
 8019942:	e7fe      	b.n	8019942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019944:	4b0e      	ldr	r3, [pc, #56]	; (8019980 <vPortValidateInterruptPriority+0x78>)
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801994c:	4b0d      	ldr	r3, [pc, #52]	; (8019984 <vPortValidateInterruptPriority+0x7c>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	429a      	cmp	r2, r3
 8019952:	d90a      	bls.n	801996a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019958:	f383 8811 	msr	BASEPRI, r3
 801995c:	f3bf 8f6f 	isb	sy
 8019960:	f3bf 8f4f 	dsb	sy
 8019964:	603b      	str	r3, [r7, #0]
}
 8019966:	bf00      	nop
 8019968:	e7fe      	b.n	8019968 <vPortValidateInterruptPriority+0x60>
	}
 801996a:	bf00      	nop
 801996c:	3714      	adds	r7, #20
 801996e:	46bd      	mov	sp, r7
 8019970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019974:	4770      	bx	lr
 8019976:	bf00      	nop
 8019978:	e000e3f0 	.word	0xe000e3f0
 801997c:	24002d84 	.word	0x24002d84
 8019980:	e000ed0c 	.word	0xe000ed0c
 8019984:	24002d88 	.word	0x24002d88

08019988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b08a      	sub	sp, #40	; 0x28
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019990:	2300      	movs	r3, #0
 8019992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019994:	f7fe fcaa 	bl	80182ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019998:	4b5b      	ldr	r3, [pc, #364]	; (8019b08 <pvPortMalloc+0x180>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d101      	bne.n	80199a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80199a0:	f000 f920 	bl	8019be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80199a4:	4b59      	ldr	r3, [pc, #356]	; (8019b0c <pvPortMalloc+0x184>)
 80199a6:	681a      	ldr	r2, [r3, #0]
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	4013      	ands	r3, r2
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	f040 8093 	bne.w	8019ad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d01d      	beq.n	80199f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80199b8:	2208      	movs	r2, #8
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	4413      	add	r3, r2
 80199be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	f003 0307 	and.w	r3, r3, #7
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d014      	beq.n	80199f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	f023 0307 	bic.w	r3, r3, #7
 80199d0:	3308      	adds	r3, #8
 80199d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	f003 0307 	and.w	r3, r3, #7
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d00a      	beq.n	80199f4 <pvPortMalloc+0x6c>
	__asm volatile
 80199de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e2:	f383 8811 	msr	BASEPRI, r3
 80199e6:	f3bf 8f6f 	isb	sy
 80199ea:	f3bf 8f4f 	dsb	sy
 80199ee:	617b      	str	r3, [r7, #20]
}
 80199f0:	bf00      	nop
 80199f2:	e7fe      	b.n	80199f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d06e      	beq.n	8019ad8 <pvPortMalloc+0x150>
 80199fa:	4b45      	ldr	r3, [pc, #276]	; (8019b10 <pvPortMalloc+0x188>)
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	687a      	ldr	r2, [r7, #4]
 8019a00:	429a      	cmp	r2, r3
 8019a02:	d869      	bhi.n	8019ad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019a04:	4b43      	ldr	r3, [pc, #268]	; (8019b14 <pvPortMalloc+0x18c>)
 8019a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019a08:	4b42      	ldr	r3, [pc, #264]	; (8019b14 <pvPortMalloc+0x18c>)
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019a0e:	e004      	b.n	8019a1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	687a      	ldr	r2, [r7, #4]
 8019a20:	429a      	cmp	r2, r3
 8019a22:	d903      	bls.n	8019a2c <pvPortMalloc+0xa4>
 8019a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d1f1      	bne.n	8019a10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019a2c:	4b36      	ldr	r3, [pc, #216]	; (8019b08 <pvPortMalloc+0x180>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d050      	beq.n	8019ad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019a36:	6a3b      	ldr	r3, [r7, #32]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	2208      	movs	r2, #8
 8019a3c:	4413      	add	r3, r2
 8019a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a42:	681a      	ldr	r2, [r3, #0]
 8019a44:	6a3b      	ldr	r3, [r7, #32]
 8019a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a4a:	685a      	ldr	r2, [r3, #4]
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	1ad2      	subs	r2, r2, r3
 8019a50:	2308      	movs	r3, #8
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	429a      	cmp	r2, r3
 8019a56:	d91f      	bls.n	8019a98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	4413      	add	r3, r2
 8019a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019a60:	69bb      	ldr	r3, [r7, #24]
 8019a62:	f003 0307 	and.w	r3, r3, #7
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d00a      	beq.n	8019a80 <pvPortMalloc+0xf8>
	__asm volatile
 8019a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a6e:	f383 8811 	msr	BASEPRI, r3
 8019a72:	f3bf 8f6f 	isb	sy
 8019a76:	f3bf 8f4f 	dsb	sy
 8019a7a:	613b      	str	r3, [r7, #16]
}
 8019a7c:	bf00      	nop
 8019a7e:	e7fe      	b.n	8019a7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a82:	685a      	ldr	r2, [r3, #4]
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	1ad2      	subs	r2, r2, r3
 8019a88:	69bb      	ldr	r3, [r7, #24]
 8019a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8e:	687a      	ldr	r2, [r7, #4]
 8019a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019a92:	69b8      	ldr	r0, [r7, #24]
 8019a94:	f000 f908 	bl	8019ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019a98:	4b1d      	ldr	r3, [pc, #116]	; (8019b10 <pvPortMalloc+0x188>)
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a9e:	685b      	ldr	r3, [r3, #4]
 8019aa0:	1ad3      	subs	r3, r2, r3
 8019aa2:	4a1b      	ldr	r2, [pc, #108]	; (8019b10 <pvPortMalloc+0x188>)
 8019aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019aa6:	4b1a      	ldr	r3, [pc, #104]	; (8019b10 <pvPortMalloc+0x188>)
 8019aa8:	681a      	ldr	r2, [r3, #0]
 8019aaa:	4b1b      	ldr	r3, [pc, #108]	; (8019b18 <pvPortMalloc+0x190>)
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d203      	bcs.n	8019aba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019ab2:	4b17      	ldr	r3, [pc, #92]	; (8019b10 <pvPortMalloc+0x188>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	4a18      	ldr	r2, [pc, #96]	; (8019b18 <pvPortMalloc+0x190>)
 8019ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019abc:	685a      	ldr	r2, [r3, #4]
 8019abe:	4b13      	ldr	r3, [pc, #76]	; (8019b0c <pvPortMalloc+0x184>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	431a      	orrs	r2, r3
 8019ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aca:	2200      	movs	r2, #0
 8019acc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019ace:	4b13      	ldr	r3, [pc, #76]	; (8019b1c <pvPortMalloc+0x194>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	3301      	adds	r3, #1
 8019ad4:	4a11      	ldr	r2, [pc, #68]	; (8019b1c <pvPortMalloc+0x194>)
 8019ad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019ad8:	f7fe fc16 	bl	8018308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019adc:	69fb      	ldr	r3, [r7, #28]
 8019ade:	f003 0307 	and.w	r3, r3, #7
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d00a      	beq.n	8019afc <pvPortMalloc+0x174>
	__asm volatile
 8019ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aea:	f383 8811 	msr	BASEPRI, r3
 8019aee:	f3bf 8f6f 	isb	sy
 8019af2:	f3bf 8f4f 	dsb	sy
 8019af6:	60fb      	str	r3, [r7, #12]
}
 8019af8:	bf00      	nop
 8019afa:	e7fe      	b.n	8019afa <pvPortMalloc+0x172>
	return pvReturn;
 8019afc:	69fb      	ldr	r3, [r7, #28]
}
 8019afe:	4618      	mov	r0, r3
 8019b00:	3728      	adds	r7, #40	; 0x28
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}
 8019b06:	bf00      	nop
 8019b08:	24006994 	.word	0x24006994
 8019b0c:	240069a8 	.word	0x240069a8
 8019b10:	24006998 	.word	0x24006998
 8019b14:	2400698c 	.word	0x2400698c
 8019b18:	2400699c 	.word	0x2400699c
 8019b1c:	240069a0 	.word	0x240069a0

08019b20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b086      	sub	sp, #24
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d04d      	beq.n	8019bce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019b32:	2308      	movs	r3, #8
 8019b34:	425b      	negs	r3, r3
 8019b36:	697a      	ldr	r2, [r7, #20]
 8019b38:	4413      	add	r3, r2
 8019b3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019b3c:	697b      	ldr	r3, [r7, #20]
 8019b3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019b40:	693b      	ldr	r3, [r7, #16]
 8019b42:	685a      	ldr	r2, [r3, #4]
 8019b44:	4b24      	ldr	r3, [pc, #144]	; (8019bd8 <vPortFree+0xb8>)
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	4013      	ands	r3, r2
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d10a      	bne.n	8019b64 <vPortFree+0x44>
	__asm volatile
 8019b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b52:	f383 8811 	msr	BASEPRI, r3
 8019b56:	f3bf 8f6f 	isb	sy
 8019b5a:	f3bf 8f4f 	dsb	sy
 8019b5e:	60fb      	str	r3, [r7, #12]
}
 8019b60:	bf00      	nop
 8019b62:	e7fe      	b.n	8019b62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d00a      	beq.n	8019b82 <vPortFree+0x62>
	__asm volatile
 8019b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b70:	f383 8811 	msr	BASEPRI, r3
 8019b74:	f3bf 8f6f 	isb	sy
 8019b78:	f3bf 8f4f 	dsb	sy
 8019b7c:	60bb      	str	r3, [r7, #8]
}
 8019b7e:	bf00      	nop
 8019b80:	e7fe      	b.n	8019b80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019b82:	693b      	ldr	r3, [r7, #16]
 8019b84:	685a      	ldr	r2, [r3, #4]
 8019b86:	4b14      	ldr	r3, [pc, #80]	; (8019bd8 <vPortFree+0xb8>)
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	4013      	ands	r3, r2
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d01e      	beq.n	8019bce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019b90:	693b      	ldr	r3, [r7, #16]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d11a      	bne.n	8019bce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019b98:	693b      	ldr	r3, [r7, #16]
 8019b9a:	685a      	ldr	r2, [r3, #4]
 8019b9c:	4b0e      	ldr	r3, [pc, #56]	; (8019bd8 <vPortFree+0xb8>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	43db      	mvns	r3, r3
 8019ba2:	401a      	ands	r2, r3
 8019ba4:	693b      	ldr	r3, [r7, #16]
 8019ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019ba8:	f7fe fba0 	bl	80182ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019bac:	693b      	ldr	r3, [r7, #16]
 8019bae:	685a      	ldr	r2, [r3, #4]
 8019bb0:	4b0a      	ldr	r3, [pc, #40]	; (8019bdc <vPortFree+0xbc>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	4413      	add	r3, r2
 8019bb6:	4a09      	ldr	r2, [pc, #36]	; (8019bdc <vPortFree+0xbc>)
 8019bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019bba:	6938      	ldr	r0, [r7, #16]
 8019bbc:	f000 f874 	bl	8019ca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019bc0:	4b07      	ldr	r3, [pc, #28]	; (8019be0 <vPortFree+0xc0>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	3301      	adds	r3, #1
 8019bc6:	4a06      	ldr	r2, [pc, #24]	; (8019be0 <vPortFree+0xc0>)
 8019bc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019bca:	f7fe fb9d 	bl	8018308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019bce:	bf00      	nop
 8019bd0:	3718      	adds	r7, #24
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bd80      	pop	{r7, pc}
 8019bd6:	bf00      	nop
 8019bd8:	240069a8 	.word	0x240069a8
 8019bdc:	24006998 	.word	0x24006998
 8019be0:	240069a4 	.word	0x240069a4

08019be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019be4:	b480      	push	{r7}
 8019be6:	b085      	sub	sp, #20
 8019be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019bea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019bf0:	4b27      	ldr	r3, [pc, #156]	; (8019c90 <prvHeapInit+0xac>)
 8019bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	f003 0307 	and.w	r3, r3, #7
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d00c      	beq.n	8019c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	3307      	adds	r3, #7
 8019c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	f023 0307 	bic.w	r3, r3, #7
 8019c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019c0c:	68ba      	ldr	r2, [r7, #8]
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	1ad3      	subs	r3, r2, r3
 8019c12:	4a1f      	ldr	r2, [pc, #124]	; (8019c90 <prvHeapInit+0xac>)
 8019c14:	4413      	add	r3, r2
 8019c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019c1c:	4a1d      	ldr	r2, [pc, #116]	; (8019c94 <prvHeapInit+0xb0>)
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019c22:	4b1c      	ldr	r3, [pc, #112]	; (8019c94 <prvHeapInit+0xb0>)
 8019c24:	2200      	movs	r2, #0
 8019c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	68ba      	ldr	r2, [r7, #8]
 8019c2c:	4413      	add	r3, r2
 8019c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019c30:	2208      	movs	r2, #8
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	1a9b      	subs	r3, r3, r2
 8019c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	f023 0307 	bic.w	r3, r3, #7
 8019c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	4a15      	ldr	r2, [pc, #84]	; (8019c98 <prvHeapInit+0xb4>)
 8019c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019c46:	4b14      	ldr	r3, [pc, #80]	; (8019c98 <prvHeapInit+0xb4>)
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019c4e:	4b12      	ldr	r3, [pc, #72]	; (8019c98 <prvHeapInit+0xb4>)
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	2200      	movs	r2, #0
 8019c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	68fa      	ldr	r2, [r7, #12]
 8019c5e:	1ad2      	subs	r2, r2, r3
 8019c60:	683b      	ldr	r3, [r7, #0]
 8019c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019c64:	4b0c      	ldr	r3, [pc, #48]	; (8019c98 <prvHeapInit+0xb4>)
 8019c66:	681a      	ldr	r2, [r3, #0]
 8019c68:	683b      	ldr	r3, [r7, #0]
 8019c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	685b      	ldr	r3, [r3, #4]
 8019c70:	4a0a      	ldr	r2, [pc, #40]	; (8019c9c <prvHeapInit+0xb8>)
 8019c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	685b      	ldr	r3, [r3, #4]
 8019c78:	4a09      	ldr	r2, [pc, #36]	; (8019ca0 <prvHeapInit+0xbc>)
 8019c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019c7c:	4b09      	ldr	r3, [pc, #36]	; (8019ca4 <prvHeapInit+0xc0>)
 8019c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019c82:	601a      	str	r2, [r3, #0]
}
 8019c84:	bf00      	nop
 8019c86:	3714      	adds	r7, #20
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8e:	4770      	bx	lr
 8019c90:	24002d8c 	.word	0x24002d8c
 8019c94:	2400698c 	.word	0x2400698c
 8019c98:	24006994 	.word	0x24006994
 8019c9c:	2400699c 	.word	0x2400699c
 8019ca0:	24006998 	.word	0x24006998
 8019ca4:	240069a8 	.word	0x240069a8

08019ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019ca8:	b480      	push	{r7}
 8019caa:	b085      	sub	sp, #20
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019cb0:	4b28      	ldr	r3, [pc, #160]	; (8019d54 <prvInsertBlockIntoFreeList+0xac>)
 8019cb2:	60fb      	str	r3, [r7, #12]
 8019cb4:	e002      	b.n	8019cbc <prvInsertBlockIntoFreeList+0x14>
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	60fb      	str	r3, [r7, #12]
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	687a      	ldr	r2, [r7, #4]
 8019cc2:	429a      	cmp	r2, r3
 8019cc4:	d8f7      	bhi.n	8019cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	685b      	ldr	r3, [r3, #4]
 8019cce:	68ba      	ldr	r2, [r7, #8]
 8019cd0:	4413      	add	r3, r2
 8019cd2:	687a      	ldr	r2, [r7, #4]
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	d108      	bne.n	8019cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	685a      	ldr	r2, [r3, #4]
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	441a      	add	r2, r3
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	68ba      	ldr	r2, [r7, #8]
 8019cf4:	441a      	add	r2, r3
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	429a      	cmp	r2, r3
 8019cfc:	d118      	bne.n	8019d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	681a      	ldr	r2, [r3, #0]
 8019d02:	4b15      	ldr	r3, [pc, #84]	; (8019d58 <prvInsertBlockIntoFreeList+0xb0>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d00d      	beq.n	8019d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	685a      	ldr	r2, [r3, #4]
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	685b      	ldr	r3, [r3, #4]
 8019d14:	441a      	add	r2, r3
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	681a      	ldr	r2, [r3, #0]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	601a      	str	r2, [r3, #0]
 8019d24:	e008      	b.n	8019d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019d26:	4b0c      	ldr	r3, [pc, #48]	; (8019d58 <prvInsertBlockIntoFreeList+0xb0>)
 8019d28:	681a      	ldr	r2, [r3, #0]
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	601a      	str	r2, [r3, #0]
 8019d2e:	e003      	b.n	8019d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	681a      	ldr	r2, [r3, #0]
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019d38:	68fa      	ldr	r2, [r7, #12]
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d002      	beq.n	8019d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	687a      	ldr	r2, [r7, #4]
 8019d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019d46:	bf00      	nop
 8019d48:	3714      	adds	r7, #20
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d50:	4770      	bx	lr
 8019d52:	bf00      	nop
 8019d54:	2400698c 	.word	0x2400698c
 8019d58:	24006994 	.word	0x24006994

08019d5c <__errno>:
 8019d5c:	4b01      	ldr	r3, [pc, #4]	; (8019d64 <__errno+0x8>)
 8019d5e:	6818      	ldr	r0, [r3, #0]
 8019d60:	4770      	bx	lr
 8019d62:	bf00      	nop
 8019d64:	240000d0 	.word	0x240000d0

08019d68 <__libc_init_array>:
 8019d68:	b570      	push	{r4, r5, r6, lr}
 8019d6a:	4d0d      	ldr	r5, [pc, #52]	; (8019da0 <__libc_init_array+0x38>)
 8019d6c:	4c0d      	ldr	r4, [pc, #52]	; (8019da4 <__libc_init_array+0x3c>)
 8019d6e:	1b64      	subs	r4, r4, r5
 8019d70:	10a4      	asrs	r4, r4, #2
 8019d72:	2600      	movs	r6, #0
 8019d74:	42a6      	cmp	r6, r4
 8019d76:	d109      	bne.n	8019d8c <__libc_init_array+0x24>
 8019d78:	4d0b      	ldr	r5, [pc, #44]	; (8019da8 <__libc_init_array+0x40>)
 8019d7a:	4c0c      	ldr	r4, [pc, #48]	; (8019dac <__libc_init_array+0x44>)
 8019d7c:	f000 fd2c 	bl	801a7d8 <_init>
 8019d80:	1b64      	subs	r4, r4, r5
 8019d82:	10a4      	asrs	r4, r4, #2
 8019d84:	2600      	movs	r6, #0
 8019d86:	42a6      	cmp	r6, r4
 8019d88:	d105      	bne.n	8019d96 <__libc_init_array+0x2e>
 8019d8a:	bd70      	pop	{r4, r5, r6, pc}
 8019d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d90:	4798      	blx	r3
 8019d92:	3601      	adds	r6, #1
 8019d94:	e7ee      	b.n	8019d74 <__libc_init_array+0xc>
 8019d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d9a:	4798      	blx	r3
 8019d9c:	3601      	adds	r6, #1
 8019d9e:	e7f2      	b.n	8019d86 <__libc_init_array+0x1e>
 8019da0:	0801ac90 	.word	0x0801ac90
 8019da4:	0801ac90 	.word	0x0801ac90
 8019da8:	0801ac90 	.word	0x0801ac90
 8019dac:	0801ac94 	.word	0x0801ac94

08019db0 <memcpy>:
 8019db0:	440a      	add	r2, r1
 8019db2:	4291      	cmp	r1, r2
 8019db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019db8:	d100      	bne.n	8019dbc <memcpy+0xc>
 8019dba:	4770      	bx	lr
 8019dbc:	b510      	push	{r4, lr}
 8019dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019dc6:	4291      	cmp	r1, r2
 8019dc8:	d1f9      	bne.n	8019dbe <memcpy+0xe>
 8019dca:	bd10      	pop	{r4, pc}

08019dcc <memset>:
 8019dcc:	4402      	add	r2, r0
 8019dce:	4603      	mov	r3, r0
 8019dd0:	4293      	cmp	r3, r2
 8019dd2:	d100      	bne.n	8019dd6 <memset+0xa>
 8019dd4:	4770      	bx	lr
 8019dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8019dda:	e7f9      	b.n	8019dd0 <memset+0x4>

08019ddc <_puts_r>:
 8019ddc:	b570      	push	{r4, r5, r6, lr}
 8019dde:	460e      	mov	r6, r1
 8019de0:	4605      	mov	r5, r0
 8019de2:	b118      	cbz	r0, 8019dec <_puts_r+0x10>
 8019de4:	6983      	ldr	r3, [r0, #24]
 8019de6:	b90b      	cbnz	r3, 8019dec <_puts_r+0x10>
 8019de8:	f000 fa48 	bl	801a27c <__sinit>
 8019dec:	69ab      	ldr	r3, [r5, #24]
 8019dee:	68ac      	ldr	r4, [r5, #8]
 8019df0:	b913      	cbnz	r3, 8019df8 <_puts_r+0x1c>
 8019df2:	4628      	mov	r0, r5
 8019df4:	f000 fa42 	bl	801a27c <__sinit>
 8019df8:	4b2c      	ldr	r3, [pc, #176]	; (8019eac <_puts_r+0xd0>)
 8019dfa:	429c      	cmp	r4, r3
 8019dfc:	d120      	bne.n	8019e40 <_puts_r+0x64>
 8019dfe:	686c      	ldr	r4, [r5, #4]
 8019e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e02:	07db      	lsls	r3, r3, #31
 8019e04:	d405      	bmi.n	8019e12 <_puts_r+0x36>
 8019e06:	89a3      	ldrh	r3, [r4, #12]
 8019e08:	0598      	lsls	r0, r3, #22
 8019e0a:	d402      	bmi.n	8019e12 <_puts_r+0x36>
 8019e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e0e:	f000 fad3 	bl	801a3b8 <__retarget_lock_acquire_recursive>
 8019e12:	89a3      	ldrh	r3, [r4, #12]
 8019e14:	0719      	lsls	r1, r3, #28
 8019e16:	d51d      	bpl.n	8019e54 <_puts_r+0x78>
 8019e18:	6923      	ldr	r3, [r4, #16]
 8019e1a:	b1db      	cbz	r3, 8019e54 <_puts_r+0x78>
 8019e1c:	3e01      	subs	r6, #1
 8019e1e:	68a3      	ldr	r3, [r4, #8]
 8019e20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019e24:	3b01      	subs	r3, #1
 8019e26:	60a3      	str	r3, [r4, #8]
 8019e28:	bb39      	cbnz	r1, 8019e7a <_puts_r+0x9e>
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	da38      	bge.n	8019ea0 <_puts_r+0xc4>
 8019e2e:	4622      	mov	r2, r4
 8019e30:	210a      	movs	r1, #10
 8019e32:	4628      	mov	r0, r5
 8019e34:	f000 f848 	bl	8019ec8 <__swbuf_r>
 8019e38:	3001      	adds	r0, #1
 8019e3a:	d011      	beq.n	8019e60 <_puts_r+0x84>
 8019e3c:	250a      	movs	r5, #10
 8019e3e:	e011      	b.n	8019e64 <_puts_r+0x88>
 8019e40:	4b1b      	ldr	r3, [pc, #108]	; (8019eb0 <_puts_r+0xd4>)
 8019e42:	429c      	cmp	r4, r3
 8019e44:	d101      	bne.n	8019e4a <_puts_r+0x6e>
 8019e46:	68ac      	ldr	r4, [r5, #8]
 8019e48:	e7da      	b.n	8019e00 <_puts_r+0x24>
 8019e4a:	4b1a      	ldr	r3, [pc, #104]	; (8019eb4 <_puts_r+0xd8>)
 8019e4c:	429c      	cmp	r4, r3
 8019e4e:	bf08      	it	eq
 8019e50:	68ec      	ldreq	r4, [r5, #12]
 8019e52:	e7d5      	b.n	8019e00 <_puts_r+0x24>
 8019e54:	4621      	mov	r1, r4
 8019e56:	4628      	mov	r0, r5
 8019e58:	f000 f888 	bl	8019f6c <__swsetup_r>
 8019e5c:	2800      	cmp	r0, #0
 8019e5e:	d0dd      	beq.n	8019e1c <_puts_r+0x40>
 8019e60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e66:	07da      	lsls	r2, r3, #31
 8019e68:	d405      	bmi.n	8019e76 <_puts_r+0x9a>
 8019e6a:	89a3      	ldrh	r3, [r4, #12]
 8019e6c:	059b      	lsls	r3, r3, #22
 8019e6e:	d402      	bmi.n	8019e76 <_puts_r+0x9a>
 8019e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e72:	f000 faa2 	bl	801a3ba <__retarget_lock_release_recursive>
 8019e76:	4628      	mov	r0, r5
 8019e78:	bd70      	pop	{r4, r5, r6, pc}
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	da04      	bge.n	8019e88 <_puts_r+0xac>
 8019e7e:	69a2      	ldr	r2, [r4, #24]
 8019e80:	429a      	cmp	r2, r3
 8019e82:	dc06      	bgt.n	8019e92 <_puts_r+0xb6>
 8019e84:	290a      	cmp	r1, #10
 8019e86:	d004      	beq.n	8019e92 <_puts_r+0xb6>
 8019e88:	6823      	ldr	r3, [r4, #0]
 8019e8a:	1c5a      	adds	r2, r3, #1
 8019e8c:	6022      	str	r2, [r4, #0]
 8019e8e:	7019      	strb	r1, [r3, #0]
 8019e90:	e7c5      	b.n	8019e1e <_puts_r+0x42>
 8019e92:	4622      	mov	r2, r4
 8019e94:	4628      	mov	r0, r5
 8019e96:	f000 f817 	bl	8019ec8 <__swbuf_r>
 8019e9a:	3001      	adds	r0, #1
 8019e9c:	d1bf      	bne.n	8019e1e <_puts_r+0x42>
 8019e9e:	e7df      	b.n	8019e60 <_puts_r+0x84>
 8019ea0:	6823      	ldr	r3, [r4, #0]
 8019ea2:	250a      	movs	r5, #10
 8019ea4:	1c5a      	adds	r2, r3, #1
 8019ea6:	6022      	str	r2, [r4, #0]
 8019ea8:	701d      	strb	r5, [r3, #0]
 8019eaa:	e7db      	b.n	8019e64 <_puts_r+0x88>
 8019eac:	0801ac48 	.word	0x0801ac48
 8019eb0:	0801ac68 	.word	0x0801ac68
 8019eb4:	0801ac28 	.word	0x0801ac28

08019eb8 <puts>:
 8019eb8:	4b02      	ldr	r3, [pc, #8]	; (8019ec4 <puts+0xc>)
 8019eba:	4601      	mov	r1, r0
 8019ebc:	6818      	ldr	r0, [r3, #0]
 8019ebe:	f7ff bf8d 	b.w	8019ddc <_puts_r>
 8019ec2:	bf00      	nop
 8019ec4:	240000d0 	.word	0x240000d0

08019ec8 <__swbuf_r>:
 8019ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eca:	460e      	mov	r6, r1
 8019ecc:	4614      	mov	r4, r2
 8019ece:	4605      	mov	r5, r0
 8019ed0:	b118      	cbz	r0, 8019eda <__swbuf_r+0x12>
 8019ed2:	6983      	ldr	r3, [r0, #24]
 8019ed4:	b90b      	cbnz	r3, 8019eda <__swbuf_r+0x12>
 8019ed6:	f000 f9d1 	bl	801a27c <__sinit>
 8019eda:	4b21      	ldr	r3, [pc, #132]	; (8019f60 <__swbuf_r+0x98>)
 8019edc:	429c      	cmp	r4, r3
 8019ede:	d12b      	bne.n	8019f38 <__swbuf_r+0x70>
 8019ee0:	686c      	ldr	r4, [r5, #4]
 8019ee2:	69a3      	ldr	r3, [r4, #24]
 8019ee4:	60a3      	str	r3, [r4, #8]
 8019ee6:	89a3      	ldrh	r3, [r4, #12]
 8019ee8:	071a      	lsls	r2, r3, #28
 8019eea:	d52f      	bpl.n	8019f4c <__swbuf_r+0x84>
 8019eec:	6923      	ldr	r3, [r4, #16]
 8019eee:	b36b      	cbz	r3, 8019f4c <__swbuf_r+0x84>
 8019ef0:	6923      	ldr	r3, [r4, #16]
 8019ef2:	6820      	ldr	r0, [r4, #0]
 8019ef4:	1ac0      	subs	r0, r0, r3
 8019ef6:	6963      	ldr	r3, [r4, #20]
 8019ef8:	b2f6      	uxtb	r6, r6
 8019efa:	4283      	cmp	r3, r0
 8019efc:	4637      	mov	r7, r6
 8019efe:	dc04      	bgt.n	8019f0a <__swbuf_r+0x42>
 8019f00:	4621      	mov	r1, r4
 8019f02:	4628      	mov	r0, r5
 8019f04:	f000 f926 	bl	801a154 <_fflush_r>
 8019f08:	bb30      	cbnz	r0, 8019f58 <__swbuf_r+0x90>
 8019f0a:	68a3      	ldr	r3, [r4, #8]
 8019f0c:	3b01      	subs	r3, #1
 8019f0e:	60a3      	str	r3, [r4, #8]
 8019f10:	6823      	ldr	r3, [r4, #0]
 8019f12:	1c5a      	adds	r2, r3, #1
 8019f14:	6022      	str	r2, [r4, #0]
 8019f16:	701e      	strb	r6, [r3, #0]
 8019f18:	6963      	ldr	r3, [r4, #20]
 8019f1a:	3001      	adds	r0, #1
 8019f1c:	4283      	cmp	r3, r0
 8019f1e:	d004      	beq.n	8019f2a <__swbuf_r+0x62>
 8019f20:	89a3      	ldrh	r3, [r4, #12]
 8019f22:	07db      	lsls	r3, r3, #31
 8019f24:	d506      	bpl.n	8019f34 <__swbuf_r+0x6c>
 8019f26:	2e0a      	cmp	r6, #10
 8019f28:	d104      	bne.n	8019f34 <__swbuf_r+0x6c>
 8019f2a:	4621      	mov	r1, r4
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	f000 f911 	bl	801a154 <_fflush_r>
 8019f32:	b988      	cbnz	r0, 8019f58 <__swbuf_r+0x90>
 8019f34:	4638      	mov	r0, r7
 8019f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f38:	4b0a      	ldr	r3, [pc, #40]	; (8019f64 <__swbuf_r+0x9c>)
 8019f3a:	429c      	cmp	r4, r3
 8019f3c:	d101      	bne.n	8019f42 <__swbuf_r+0x7a>
 8019f3e:	68ac      	ldr	r4, [r5, #8]
 8019f40:	e7cf      	b.n	8019ee2 <__swbuf_r+0x1a>
 8019f42:	4b09      	ldr	r3, [pc, #36]	; (8019f68 <__swbuf_r+0xa0>)
 8019f44:	429c      	cmp	r4, r3
 8019f46:	bf08      	it	eq
 8019f48:	68ec      	ldreq	r4, [r5, #12]
 8019f4a:	e7ca      	b.n	8019ee2 <__swbuf_r+0x1a>
 8019f4c:	4621      	mov	r1, r4
 8019f4e:	4628      	mov	r0, r5
 8019f50:	f000 f80c 	bl	8019f6c <__swsetup_r>
 8019f54:	2800      	cmp	r0, #0
 8019f56:	d0cb      	beq.n	8019ef0 <__swbuf_r+0x28>
 8019f58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019f5c:	e7ea      	b.n	8019f34 <__swbuf_r+0x6c>
 8019f5e:	bf00      	nop
 8019f60:	0801ac48 	.word	0x0801ac48
 8019f64:	0801ac68 	.word	0x0801ac68
 8019f68:	0801ac28 	.word	0x0801ac28

08019f6c <__swsetup_r>:
 8019f6c:	4b32      	ldr	r3, [pc, #200]	; (801a038 <__swsetup_r+0xcc>)
 8019f6e:	b570      	push	{r4, r5, r6, lr}
 8019f70:	681d      	ldr	r5, [r3, #0]
 8019f72:	4606      	mov	r6, r0
 8019f74:	460c      	mov	r4, r1
 8019f76:	b125      	cbz	r5, 8019f82 <__swsetup_r+0x16>
 8019f78:	69ab      	ldr	r3, [r5, #24]
 8019f7a:	b913      	cbnz	r3, 8019f82 <__swsetup_r+0x16>
 8019f7c:	4628      	mov	r0, r5
 8019f7e:	f000 f97d 	bl	801a27c <__sinit>
 8019f82:	4b2e      	ldr	r3, [pc, #184]	; (801a03c <__swsetup_r+0xd0>)
 8019f84:	429c      	cmp	r4, r3
 8019f86:	d10f      	bne.n	8019fa8 <__swsetup_r+0x3c>
 8019f88:	686c      	ldr	r4, [r5, #4]
 8019f8a:	89a3      	ldrh	r3, [r4, #12]
 8019f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f90:	0719      	lsls	r1, r3, #28
 8019f92:	d42c      	bmi.n	8019fee <__swsetup_r+0x82>
 8019f94:	06dd      	lsls	r5, r3, #27
 8019f96:	d411      	bmi.n	8019fbc <__swsetup_r+0x50>
 8019f98:	2309      	movs	r3, #9
 8019f9a:	6033      	str	r3, [r6, #0]
 8019f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019fa0:	81a3      	strh	r3, [r4, #12]
 8019fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fa6:	e03e      	b.n	801a026 <__swsetup_r+0xba>
 8019fa8:	4b25      	ldr	r3, [pc, #148]	; (801a040 <__swsetup_r+0xd4>)
 8019faa:	429c      	cmp	r4, r3
 8019fac:	d101      	bne.n	8019fb2 <__swsetup_r+0x46>
 8019fae:	68ac      	ldr	r4, [r5, #8]
 8019fb0:	e7eb      	b.n	8019f8a <__swsetup_r+0x1e>
 8019fb2:	4b24      	ldr	r3, [pc, #144]	; (801a044 <__swsetup_r+0xd8>)
 8019fb4:	429c      	cmp	r4, r3
 8019fb6:	bf08      	it	eq
 8019fb8:	68ec      	ldreq	r4, [r5, #12]
 8019fba:	e7e6      	b.n	8019f8a <__swsetup_r+0x1e>
 8019fbc:	0758      	lsls	r0, r3, #29
 8019fbe:	d512      	bpl.n	8019fe6 <__swsetup_r+0x7a>
 8019fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fc2:	b141      	cbz	r1, 8019fd6 <__swsetup_r+0x6a>
 8019fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fc8:	4299      	cmp	r1, r3
 8019fca:	d002      	beq.n	8019fd2 <__swsetup_r+0x66>
 8019fcc:	4630      	mov	r0, r6
 8019fce:	f000 fa5b 	bl	801a488 <_free_r>
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8019fd6:	89a3      	ldrh	r3, [r4, #12]
 8019fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019fdc:	81a3      	strh	r3, [r4, #12]
 8019fde:	2300      	movs	r3, #0
 8019fe0:	6063      	str	r3, [r4, #4]
 8019fe2:	6923      	ldr	r3, [r4, #16]
 8019fe4:	6023      	str	r3, [r4, #0]
 8019fe6:	89a3      	ldrh	r3, [r4, #12]
 8019fe8:	f043 0308 	orr.w	r3, r3, #8
 8019fec:	81a3      	strh	r3, [r4, #12]
 8019fee:	6923      	ldr	r3, [r4, #16]
 8019ff0:	b94b      	cbnz	r3, 801a006 <__swsetup_r+0x9a>
 8019ff2:	89a3      	ldrh	r3, [r4, #12]
 8019ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ffc:	d003      	beq.n	801a006 <__swsetup_r+0x9a>
 8019ffe:	4621      	mov	r1, r4
 801a000:	4630      	mov	r0, r6
 801a002:	f000 fa01 	bl	801a408 <__smakebuf_r>
 801a006:	89a0      	ldrh	r0, [r4, #12]
 801a008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a00c:	f010 0301 	ands.w	r3, r0, #1
 801a010:	d00a      	beq.n	801a028 <__swsetup_r+0xbc>
 801a012:	2300      	movs	r3, #0
 801a014:	60a3      	str	r3, [r4, #8]
 801a016:	6963      	ldr	r3, [r4, #20]
 801a018:	425b      	negs	r3, r3
 801a01a:	61a3      	str	r3, [r4, #24]
 801a01c:	6923      	ldr	r3, [r4, #16]
 801a01e:	b943      	cbnz	r3, 801a032 <__swsetup_r+0xc6>
 801a020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a024:	d1ba      	bne.n	8019f9c <__swsetup_r+0x30>
 801a026:	bd70      	pop	{r4, r5, r6, pc}
 801a028:	0781      	lsls	r1, r0, #30
 801a02a:	bf58      	it	pl
 801a02c:	6963      	ldrpl	r3, [r4, #20]
 801a02e:	60a3      	str	r3, [r4, #8]
 801a030:	e7f4      	b.n	801a01c <__swsetup_r+0xb0>
 801a032:	2000      	movs	r0, #0
 801a034:	e7f7      	b.n	801a026 <__swsetup_r+0xba>
 801a036:	bf00      	nop
 801a038:	240000d0 	.word	0x240000d0
 801a03c:	0801ac48 	.word	0x0801ac48
 801a040:	0801ac68 	.word	0x0801ac68
 801a044:	0801ac28 	.word	0x0801ac28

0801a048 <__sflush_r>:
 801a048:	898a      	ldrh	r2, [r1, #12]
 801a04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a04e:	4605      	mov	r5, r0
 801a050:	0710      	lsls	r0, r2, #28
 801a052:	460c      	mov	r4, r1
 801a054:	d458      	bmi.n	801a108 <__sflush_r+0xc0>
 801a056:	684b      	ldr	r3, [r1, #4]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	dc05      	bgt.n	801a068 <__sflush_r+0x20>
 801a05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a05e:	2b00      	cmp	r3, #0
 801a060:	dc02      	bgt.n	801a068 <__sflush_r+0x20>
 801a062:	2000      	movs	r0, #0
 801a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a06a:	2e00      	cmp	r6, #0
 801a06c:	d0f9      	beq.n	801a062 <__sflush_r+0x1a>
 801a06e:	2300      	movs	r3, #0
 801a070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a074:	682f      	ldr	r7, [r5, #0]
 801a076:	602b      	str	r3, [r5, #0]
 801a078:	d032      	beq.n	801a0e0 <__sflush_r+0x98>
 801a07a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a07c:	89a3      	ldrh	r3, [r4, #12]
 801a07e:	075a      	lsls	r2, r3, #29
 801a080:	d505      	bpl.n	801a08e <__sflush_r+0x46>
 801a082:	6863      	ldr	r3, [r4, #4]
 801a084:	1ac0      	subs	r0, r0, r3
 801a086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a088:	b10b      	cbz	r3, 801a08e <__sflush_r+0x46>
 801a08a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a08c:	1ac0      	subs	r0, r0, r3
 801a08e:	2300      	movs	r3, #0
 801a090:	4602      	mov	r2, r0
 801a092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a094:	6a21      	ldr	r1, [r4, #32]
 801a096:	4628      	mov	r0, r5
 801a098:	47b0      	blx	r6
 801a09a:	1c43      	adds	r3, r0, #1
 801a09c:	89a3      	ldrh	r3, [r4, #12]
 801a09e:	d106      	bne.n	801a0ae <__sflush_r+0x66>
 801a0a0:	6829      	ldr	r1, [r5, #0]
 801a0a2:	291d      	cmp	r1, #29
 801a0a4:	d82c      	bhi.n	801a100 <__sflush_r+0xb8>
 801a0a6:	4a2a      	ldr	r2, [pc, #168]	; (801a150 <__sflush_r+0x108>)
 801a0a8:	40ca      	lsrs	r2, r1
 801a0aa:	07d6      	lsls	r6, r2, #31
 801a0ac:	d528      	bpl.n	801a100 <__sflush_r+0xb8>
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	6062      	str	r2, [r4, #4]
 801a0b2:	04d9      	lsls	r1, r3, #19
 801a0b4:	6922      	ldr	r2, [r4, #16]
 801a0b6:	6022      	str	r2, [r4, #0]
 801a0b8:	d504      	bpl.n	801a0c4 <__sflush_r+0x7c>
 801a0ba:	1c42      	adds	r2, r0, #1
 801a0bc:	d101      	bne.n	801a0c2 <__sflush_r+0x7a>
 801a0be:	682b      	ldr	r3, [r5, #0]
 801a0c0:	b903      	cbnz	r3, 801a0c4 <__sflush_r+0x7c>
 801a0c2:	6560      	str	r0, [r4, #84]	; 0x54
 801a0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a0c6:	602f      	str	r7, [r5, #0]
 801a0c8:	2900      	cmp	r1, #0
 801a0ca:	d0ca      	beq.n	801a062 <__sflush_r+0x1a>
 801a0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0d0:	4299      	cmp	r1, r3
 801a0d2:	d002      	beq.n	801a0da <__sflush_r+0x92>
 801a0d4:	4628      	mov	r0, r5
 801a0d6:	f000 f9d7 	bl	801a488 <_free_r>
 801a0da:	2000      	movs	r0, #0
 801a0dc:	6360      	str	r0, [r4, #52]	; 0x34
 801a0de:	e7c1      	b.n	801a064 <__sflush_r+0x1c>
 801a0e0:	6a21      	ldr	r1, [r4, #32]
 801a0e2:	2301      	movs	r3, #1
 801a0e4:	4628      	mov	r0, r5
 801a0e6:	47b0      	blx	r6
 801a0e8:	1c41      	adds	r1, r0, #1
 801a0ea:	d1c7      	bne.n	801a07c <__sflush_r+0x34>
 801a0ec:	682b      	ldr	r3, [r5, #0]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d0c4      	beq.n	801a07c <__sflush_r+0x34>
 801a0f2:	2b1d      	cmp	r3, #29
 801a0f4:	d001      	beq.n	801a0fa <__sflush_r+0xb2>
 801a0f6:	2b16      	cmp	r3, #22
 801a0f8:	d101      	bne.n	801a0fe <__sflush_r+0xb6>
 801a0fa:	602f      	str	r7, [r5, #0]
 801a0fc:	e7b1      	b.n	801a062 <__sflush_r+0x1a>
 801a0fe:	89a3      	ldrh	r3, [r4, #12]
 801a100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a104:	81a3      	strh	r3, [r4, #12]
 801a106:	e7ad      	b.n	801a064 <__sflush_r+0x1c>
 801a108:	690f      	ldr	r7, [r1, #16]
 801a10a:	2f00      	cmp	r7, #0
 801a10c:	d0a9      	beq.n	801a062 <__sflush_r+0x1a>
 801a10e:	0793      	lsls	r3, r2, #30
 801a110:	680e      	ldr	r6, [r1, #0]
 801a112:	bf08      	it	eq
 801a114:	694b      	ldreq	r3, [r1, #20]
 801a116:	600f      	str	r7, [r1, #0]
 801a118:	bf18      	it	ne
 801a11a:	2300      	movne	r3, #0
 801a11c:	eba6 0807 	sub.w	r8, r6, r7
 801a120:	608b      	str	r3, [r1, #8]
 801a122:	f1b8 0f00 	cmp.w	r8, #0
 801a126:	dd9c      	ble.n	801a062 <__sflush_r+0x1a>
 801a128:	6a21      	ldr	r1, [r4, #32]
 801a12a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a12c:	4643      	mov	r3, r8
 801a12e:	463a      	mov	r2, r7
 801a130:	4628      	mov	r0, r5
 801a132:	47b0      	blx	r6
 801a134:	2800      	cmp	r0, #0
 801a136:	dc06      	bgt.n	801a146 <__sflush_r+0xfe>
 801a138:	89a3      	ldrh	r3, [r4, #12]
 801a13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a13e:	81a3      	strh	r3, [r4, #12]
 801a140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a144:	e78e      	b.n	801a064 <__sflush_r+0x1c>
 801a146:	4407      	add	r7, r0
 801a148:	eba8 0800 	sub.w	r8, r8, r0
 801a14c:	e7e9      	b.n	801a122 <__sflush_r+0xda>
 801a14e:	bf00      	nop
 801a150:	20400001 	.word	0x20400001

0801a154 <_fflush_r>:
 801a154:	b538      	push	{r3, r4, r5, lr}
 801a156:	690b      	ldr	r3, [r1, #16]
 801a158:	4605      	mov	r5, r0
 801a15a:	460c      	mov	r4, r1
 801a15c:	b913      	cbnz	r3, 801a164 <_fflush_r+0x10>
 801a15e:	2500      	movs	r5, #0
 801a160:	4628      	mov	r0, r5
 801a162:	bd38      	pop	{r3, r4, r5, pc}
 801a164:	b118      	cbz	r0, 801a16e <_fflush_r+0x1a>
 801a166:	6983      	ldr	r3, [r0, #24]
 801a168:	b90b      	cbnz	r3, 801a16e <_fflush_r+0x1a>
 801a16a:	f000 f887 	bl	801a27c <__sinit>
 801a16e:	4b14      	ldr	r3, [pc, #80]	; (801a1c0 <_fflush_r+0x6c>)
 801a170:	429c      	cmp	r4, r3
 801a172:	d11b      	bne.n	801a1ac <_fflush_r+0x58>
 801a174:	686c      	ldr	r4, [r5, #4]
 801a176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d0ef      	beq.n	801a15e <_fflush_r+0xa>
 801a17e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a180:	07d0      	lsls	r0, r2, #31
 801a182:	d404      	bmi.n	801a18e <_fflush_r+0x3a>
 801a184:	0599      	lsls	r1, r3, #22
 801a186:	d402      	bmi.n	801a18e <_fflush_r+0x3a>
 801a188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a18a:	f000 f915 	bl	801a3b8 <__retarget_lock_acquire_recursive>
 801a18e:	4628      	mov	r0, r5
 801a190:	4621      	mov	r1, r4
 801a192:	f7ff ff59 	bl	801a048 <__sflush_r>
 801a196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a198:	07da      	lsls	r2, r3, #31
 801a19a:	4605      	mov	r5, r0
 801a19c:	d4e0      	bmi.n	801a160 <_fflush_r+0xc>
 801a19e:	89a3      	ldrh	r3, [r4, #12]
 801a1a0:	059b      	lsls	r3, r3, #22
 801a1a2:	d4dd      	bmi.n	801a160 <_fflush_r+0xc>
 801a1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a1a6:	f000 f908 	bl	801a3ba <__retarget_lock_release_recursive>
 801a1aa:	e7d9      	b.n	801a160 <_fflush_r+0xc>
 801a1ac:	4b05      	ldr	r3, [pc, #20]	; (801a1c4 <_fflush_r+0x70>)
 801a1ae:	429c      	cmp	r4, r3
 801a1b0:	d101      	bne.n	801a1b6 <_fflush_r+0x62>
 801a1b2:	68ac      	ldr	r4, [r5, #8]
 801a1b4:	e7df      	b.n	801a176 <_fflush_r+0x22>
 801a1b6:	4b04      	ldr	r3, [pc, #16]	; (801a1c8 <_fflush_r+0x74>)
 801a1b8:	429c      	cmp	r4, r3
 801a1ba:	bf08      	it	eq
 801a1bc:	68ec      	ldreq	r4, [r5, #12]
 801a1be:	e7da      	b.n	801a176 <_fflush_r+0x22>
 801a1c0:	0801ac48 	.word	0x0801ac48
 801a1c4:	0801ac68 	.word	0x0801ac68
 801a1c8:	0801ac28 	.word	0x0801ac28

0801a1cc <std>:
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	b510      	push	{r4, lr}
 801a1d0:	4604      	mov	r4, r0
 801a1d2:	e9c0 3300 	strd	r3, r3, [r0]
 801a1d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a1da:	6083      	str	r3, [r0, #8]
 801a1dc:	8181      	strh	r1, [r0, #12]
 801a1de:	6643      	str	r3, [r0, #100]	; 0x64
 801a1e0:	81c2      	strh	r2, [r0, #14]
 801a1e2:	6183      	str	r3, [r0, #24]
 801a1e4:	4619      	mov	r1, r3
 801a1e6:	2208      	movs	r2, #8
 801a1e8:	305c      	adds	r0, #92	; 0x5c
 801a1ea:	f7ff fdef 	bl	8019dcc <memset>
 801a1ee:	4b05      	ldr	r3, [pc, #20]	; (801a204 <std+0x38>)
 801a1f0:	6263      	str	r3, [r4, #36]	; 0x24
 801a1f2:	4b05      	ldr	r3, [pc, #20]	; (801a208 <std+0x3c>)
 801a1f4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a1f6:	4b05      	ldr	r3, [pc, #20]	; (801a20c <std+0x40>)
 801a1f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a1fa:	4b05      	ldr	r3, [pc, #20]	; (801a210 <std+0x44>)
 801a1fc:	6224      	str	r4, [r4, #32]
 801a1fe:	6323      	str	r3, [r4, #48]	; 0x30
 801a200:	bd10      	pop	{r4, pc}
 801a202:	bf00      	nop
 801a204:	0801a669 	.word	0x0801a669
 801a208:	0801a68b 	.word	0x0801a68b
 801a20c:	0801a6c3 	.word	0x0801a6c3
 801a210:	0801a6e7 	.word	0x0801a6e7

0801a214 <_cleanup_r>:
 801a214:	4901      	ldr	r1, [pc, #4]	; (801a21c <_cleanup_r+0x8>)
 801a216:	f000 b8af 	b.w	801a378 <_fwalk_reent>
 801a21a:	bf00      	nop
 801a21c:	0801a155 	.word	0x0801a155

0801a220 <__sfmoreglue>:
 801a220:	b570      	push	{r4, r5, r6, lr}
 801a222:	2268      	movs	r2, #104	; 0x68
 801a224:	1e4d      	subs	r5, r1, #1
 801a226:	4355      	muls	r5, r2
 801a228:	460e      	mov	r6, r1
 801a22a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a22e:	f000 f997 	bl	801a560 <_malloc_r>
 801a232:	4604      	mov	r4, r0
 801a234:	b140      	cbz	r0, 801a248 <__sfmoreglue+0x28>
 801a236:	2100      	movs	r1, #0
 801a238:	e9c0 1600 	strd	r1, r6, [r0]
 801a23c:	300c      	adds	r0, #12
 801a23e:	60a0      	str	r0, [r4, #8]
 801a240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a244:	f7ff fdc2 	bl	8019dcc <memset>
 801a248:	4620      	mov	r0, r4
 801a24a:	bd70      	pop	{r4, r5, r6, pc}

0801a24c <__sfp_lock_acquire>:
 801a24c:	4801      	ldr	r0, [pc, #4]	; (801a254 <__sfp_lock_acquire+0x8>)
 801a24e:	f000 b8b3 	b.w	801a3b8 <__retarget_lock_acquire_recursive>
 801a252:	bf00      	nop
 801a254:	240069ad 	.word	0x240069ad

0801a258 <__sfp_lock_release>:
 801a258:	4801      	ldr	r0, [pc, #4]	; (801a260 <__sfp_lock_release+0x8>)
 801a25a:	f000 b8ae 	b.w	801a3ba <__retarget_lock_release_recursive>
 801a25e:	bf00      	nop
 801a260:	240069ad 	.word	0x240069ad

0801a264 <__sinit_lock_acquire>:
 801a264:	4801      	ldr	r0, [pc, #4]	; (801a26c <__sinit_lock_acquire+0x8>)
 801a266:	f000 b8a7 	b.w	801a3b8 <__retarget_lock_acquire_recursive>
 801a26a:	bf00      	nop
 801a26c:	240069ae 	.word	0x240069ae

0801a270 <__sinit_lock_release>:
 801a270:	4801      	ldr	r0, [pc, #4]	; (801a278 <__sinit_lock_release+0x8>)
 801a272:	f000 b8a2 	b.w	801a3ba <__retarget_lock_release_recursive>
 801a276:	bf00      	nop
 801a278:	240069ae 	.word	0x240069ae

0801a27c <__sinit>:
 801a27c:	b510      	push	{r4, lr}
 801a27e:	4604      	mov	r4, r0
 801a280:	f7ff fff0 	bl	801a264 <__sinit_lock_acquire>
 801a284:	69a3      	ldr	r3, [r4, #24]
 801a286:	b11b      	cbz	r3, 801a290 <__sinit+0x14>
 801a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a28c:	f7ff bff0 	b.w	801a270 <__sinit_lock_release>
 801a290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a294:	6523      	str	r3, [r4, #80]	; 0x50
 801a296:	4b13      	ldr	r3, [pc, #76]	; (801a2e4 <__sinit+0x68>)
 801a298:	4a13      	ldr	r2, [pc, #76]	; (801a2e8 <__sinit+0x6c>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a29e:	42a3      	cmp	r3, r4
 801a2a0:	bf04      	itt	eq
 801a2a2:	2301      	moveq	r3, #1
 801a2a4:	61a3      	streq	r3, [r4, #24]
 801a2a6:	4620      	mov	r0, r4
 801a2a8:	f000 f820 	bl	801a2ec <__sfp>
 801a2ac:	6060      	str	r0, [r4, #4]
 801a2ae:	4620      	mov	r0, r4
 801a2b0:	f000 f81c 	bl	801a2ec <__sfp>
 801a2b4:	60a0      	str	r0, [r4, #8]
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	f000 f818 	bl	801a2ec <__sfp>
 801a2bc:	2200      	movs	r2, #0
 801a2be:	60e0      	str	r0, [r4, #12]
 801a2c0:	2104      	movs	r1, #4
 801a2c2:	6860      	ldr	r0, [r4, #4]
 801a2c4:	f7ff ff82 	bl	801a1cc <std>
 801a2c8:	68a0      	ldr	r0, [r4, #8]
 801a2ca:	2201      	movs	r2, #1
 801a2cc:	2109      	movs	r1, #9
 801a2ce:	f7ff ff7d 	bl	801a1cc <std>
 801a2d2:	68e0      	ldr	r0, [r4, #12]
 801a2d4:	2202      	movs	r2, #2
 801a2d6:	2112      	movs	r1, #18
 801a2d8:	f7ff ff78 	bl	801a1cc <std>
 801a2dc:	2301      	movs	r3, #1
 801a2de:	61a3      	str	r3, [r4, #24]
 801a2e0:	e7d2      	b.n	801a288 <__sinit+0xc>
 801a2e2:	bf00      	nop
 801a2e4:	0801ac24 	.word	0x0801ac24
 801a2e8:	0801a215 	.word	0x0801a215

0801a2ec <__sfp>:
 801a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2ee:	4607      	mov	r7, r0
 801a2f0:	f7ff ffac 	bl	801a24c <__sfp_lock_acquire>
 801a2f4:	4b1e      	ldr	r3, [pc, #120]	; (801a370 <__sfp+0x84>)
 801a2f6:	681e      	ldr	r6, [r3, #0]
 801a2f8:	69b3      	ldr	r3, [r6, #24]
 801a2fa:	b913      	cbnz	r3, 801a302 <__sfp+0x16>
 801a2fc:	4630      	mov	r0, r6
 801a2fe:	f7ff ffbd 	bl	801a27c <__sinit>
 801a302:	3648      	adds	r6, #72	; 0x48
 801a304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a308:	3b01      	subs	r3, #1
 801a30a:	d503      	bpl.n	801a314 <__sfp+0x28>
 801a30c:	6833      	ldr	r3, [r6, #0]
 801a30e:	b30b      	cbz	r3, 801a354 <__sfp+0x68>
 801a310:	6836      	ldr	r6, [r6, #0]
 801a312:	e7f7      	b.n	801a304 <__sfp+0x18>
 801a314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a318:	b9d5      	cbnz	r5, 801a350 <__sfp+0x64>
 801a31a:	4b16      	ldr	r3, [pc, #88]	; (801a374 <__sfp+0x88>)
 801a31c:	60e3      	str	r3, [r4, #12]
 801a31e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a322:	6665      	str	r5, [r4, #100]	; 0x64
 801a324:	f000 f847 	bl	801a3b6 <__retarget_lock_init_recursive>
 801a328:	f7ff ff96 	bl	801a258 <__sfp_lock_release>
 801a32c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a334:	6025      	str	r5, [r4, #0]
 801a336:	61a5      	str	r5, [r4, #24]
 801a338:	2208      	movs	r2, #8
 801a33a:	4629      	mov	r1, r5
 801a33c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a340:	f7ff fd44 	bl	8019dcc <memset>
 801a344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a34c:	4620      	mov	r0, r4
 801a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a350:	3468      	adds	r4, #104	; 0x68
 801a352:	e7d9      	b.n	801a308 <__sfp+0x1c>
 801a354:	2104      	movs	r1, #4
 801a356:	4638      	mov	r0, r7
 801a358:	f7ff ff62 	bl	801a220 <__sfmoreglue>
 801a35c:	4604      	mov	r4, r0
 801a35e:	6030      	str	r0, [r6, #0]
 801a360:	2800      	cmp	r0, #0
 801a362:	d1d5      	bne.n	801a310 <__sfp+0x24>
 801a364:	f7ff ff78 	bl	801a258 <__sfp_lock_release>
 801a368:	230c      	movs	r3, #12
 801a36a:	603b      	str	r3, [r7, #0]
 801a36c:	e7ee      	b.n	801a34c <__sfp+0x60>
 801a36e:	bf00      	nop
 801a370:	0801ac24 	.word	0x0801ac24
 801a374:	ffff0001 	.word	0xffff0001

0801a378 <_fwalk_reent>:
 801a378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a37c:	4606      	mov	r6, r0
 801a37e:	4688      	mov	r8, r1
 801a380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a384:	2700      	movs	r7, #0
 801a386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a38a:	f1b9 0901 	subs.w	r9, r9, #1
 801a38e:	d505      	bpl.n	801a39c <_fwalk_reent+0x24>
 801a390:	6824      	ldr	r4, [r4, #0]
 801a392:	2c00      	cmp	r4, #0
 801a394:	d1f7      	bne.n	801a386 <_fwalk_reent+0xe>
 801a396:	4638      	mov	r0, r7
 801a398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a39c:	89ab      	ldrh	r3, [r5, #12]
 801a39e:	2b01      	cmp	r3, #1
 801a3a0:	d907      	bls.n	801a3b2 <_fwalk_reent+0x3a>
 801a3a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a3a6:	3301      	adds	r3, #1
 801a3a8:	d003      	beq.n	801a3b2 <_fwalk_reent+0x3a>
 801a3aa:	4629      	mov	r1, r5
 801a3ac:	4630      	mov	r0, r6
 801a3ae:	47c0      	blx	r8
 801a3b0:	4307      	orrs	r7, r0
 801a3b2:	3568      	adds	r5, #104	; 0x68
 801a3b4:	e7e9      	b.n	801a38a <_fwalk_reent+0x12>

0801a3b6 <__retarget_lock_init_recursive>:
 801a3b6:	4770      	bx	lr

0801a3b8 <__retarget_lock_acquire_recursive>:
 801a3b8:	4770      	bx	lr

0801a3ba <__retarget_lock_release_recursive>:
 801a3ba:	4770      	bx	lr

0801a3bc <__swhatbuf_r>:
 801a3bc:	b570      	push	{r4, r5, r6, lr}
 801a3be:	460e      	mov	r6, r1
 801a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3c4:	2900      	cmp	r1, #0
 801a3c6:	b096      	sub	sp, #88	; 0x58
 801a3c8:	4614      	mov	r4, r2
 801a3ca:	461d      	mov	r5, r3
 801a3cc:	da08      	bge.n	801a3e0 <__swhatbuf_r+0x24>
 801a3ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	602a      	str	r2, [r5, #0]
 801a3d6:	061a      	lsls	r2, r3, #24
 801a3d8:	d410      	bmi.n	801a3fc <__swhatbuf_r+0x40>
 801a3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a3de:	e00e      	b.n	801a3fe <__swhatbuf_r+0x42>
 801a3e0:	466a      	mov	r2, sp
 801a3e2:	f000 f9a7 	bl	801a734 <_fstat_r>
 801a3e6:	2800      	cmp	r0, #0
 801a3e8:	dbf1      	blt.n	801a3ce <__swhatbuf_r+0x12>
 801a3ea:	9a01      	ldr	r2, [sp, #4]
 801a3ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a3f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a3f4:	425a      	negs	r2, r3
 801a3f6:	415a      	adcs	r2, r3
 801a3f8:	602a      	str	r2, [r5, #0]
 801a3fa:	e7ee      	b.n	801a3da <__swhatbuf_r+0x1e>
 801a3fc:	2340      	movs	r3, #64	; 0x40
 801a3fe:	2000      	movs	r0, #0
 801a400:	6023      	str	r3, [r4, #0]
 801a402:	b016      	add	sp, #88	; 0x58
 801a404:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a408 <__smakebuf_r>:
 801a408:	898b      	ldrh	r3, [r1, #12]
 801a40a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a40c:	079d      	lsls	r5, r3, #30
 801a40e:	4606      	mov	r6, r0
 801a410:	460c      	mov	r4, r1
 801a412:	d507      	bpl.n	801a424 <__smakebuf_r+0x1c>
 801a414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a418:	6023      	str	r3, [r4, #0]
 801a41a:	6123      	str	r3, [r4, #16]
 801a41c:	2301      	movs	r3, #1
 801a41e:	6163      	str	r3, [r4, #20]
 801a420:	b002      	add	sp, #8
 801a422:	bd70      	pop	{r4, r5, r6, pc}
 801a424:	ab01      	add	r3, sp, #4
 801a426:	466a      	mov	r2, sp
 801a428:	f7ff ffc8 	bl	801a3bc <__swhatbuf_r>
 801a42c:	9900      	ldr	r1, [sp, #0]
 801a42e:	4605      	mov	r5, r0
 801a430:	4630      	mov	r0, r6
 801a432:	f000 f895 	bl	801a560 <_malloc_r>
 801a436:	b948      	cbnz	r0, 801a44c <__smakebuf_r+0x44>
 801a438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a43c:	059a      	lsls	r2, r3, #22
 801a43e:	d4ef      	bmi.n	801a420 <__smakebuf_r+0x18>
 801a440:	f023 0303 	bic.w	r3, r3, #3
 801a444:	f043 0302 	orr.w	r3, r3, #2
 801a448:	81a3      	strh	r3, [r4, #12]
 801a44a:	e7e3      	b.n	801a414 <__smakebuf_r+0xc>
 801a44c:	4b0d      	ldr	r3, [pc, #52]	; (801a484 <__smakebuf_r+0x7c>)
 801a44e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a450:	89a3      	ldrh	r3, [r4, #12]
 801a452:	6020      	str	r0, [r4, #0]
 801a454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a458:	81a3      	strh	r3, [r4, #12]
 801a45a:	9b00      	ldr	r3, [sp, #0]
 801a45c:	6163      	str	r3, [r4, #20]
 801a45e:	9b01      	ldr	r3, [sp, #4]
 801a460:	6120      	str	r0, [r4, #16]
 801a462:	b15b      	cbz	r3, 801a47c <__smakebuf_r+0x74>
 801a464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a468:	4630      	mov	r0, r6
 801a46a:	f000 f975 	bl	801a758 <_isatty_r>
 801a46e:	b128      	cbz	r0, 801a47c <__smakebuf_r+0x74>
 801a470:	89a3      	ldrh	r3, [r4, #12]
 801a472:	f023 0303 	bic.w	r3, r3, #3
 801a476:	f043 0301 	orr.w	r3, r3, #1
 801a47a:	81a3      	strh	r3, [r4, #12]
 801a47c:	89a0      	ldrh	r0, [r4, #12]
 801a47e:	4305      	orrs	r5, r0
 801a480:	81a5      	strh	r5, [r4, #12]
 801a482:	e7cd      	b.n	801a420 <__smakebuf_r+0x18>
 801a484:	0801a215 	.word	0x0801a215

0801a488 <_free_r>:
 801a488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a48a:	2900      	cmp	r1, #0
 801a48c:	d044      	beq.n	801a518 <_free_r+0x90>
 801a48e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a492:	9001      	str	r0, [sp, #4]
 801a494:	2b00      	cmp	r3, #0
 801a496:	f1a1 0404 	sub.w	r4, r1, #4
 801a49a:	bfb8      	it	lt
 801a49c:	18e4      	addlt	r4, r4, r3
 801a49e:	f000 f97d 	bl	801a79c <__malloc_lock>
 801a4a2:	4a1e      	ldr	r2, [pc, #120]	; (801a51c <_free_r+0x94>)
 801a4a4:	9801      	ldr	r0, [sp, #4]
 801a4a6:	6813      	ldr	r3, [r2, #0]
 801a4a8:	b933      	cbnz	r3, 801a4b8 <_free_r+0x30>
 801a4aa:	6063      	str	r3, [r4, #4]
 801a4ac:	6014      	str	r4, [r2, #0]
 801a4ae:	b003      	add	sp, #12
 801a4b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a4b4:	f000 b978 	b.w	801a7a8 <__malloc_unlock>
 801a4b8:	42a3      	cmp	r3, r4
 801a4ba:	d908      	bls.n	801a4ce <_free_r+0x46>
 801a4bc:	6825      	ldr	r5, [r4, #0]
 801a4be:	1961      	adds	r1, r4, r5
 801a4c0:	428b      	cmp	r3, r1
 801a4c2:	bf01      	itttt	eq
 801a4c4:	6819      	ldreq	r1, [r3, #0]
 801a4c6:	685b      	ldreq	r3, [r3, #4]
 801a4c8:	1949      	addeq	r1, r1, r5
 801a4ca:	6021      	streq	r1, [r4, #0]
 801a4cc:	e7ed      	b.n	801a4aa <_free_r+0x22>
 801a4ce:	461a      	mov	r2, r3
 801a4d0:	685b      	ldr	r3, [r3, #4]
 801a4d2:	b10b      	cbz	r3, 801a4d8 <_free_r+0x50>
 801a4d4:	42a3      	cmp	r3, r4
 801a4d6:	d9fa      	bls.n	801a4ce <_free_r+0x46>
 801a4d8:	6811      	ldr	r1, [r2, #0]
 801a4da:	1855      	adds	r5, r2, r1
 801a4dc:	42a5      	cmp	r5, r4
 801a4de:	d10b      	bne.n	801a4f8 <_free_r+0x70>
 801a4e0:	6824      	ldr	r4, [r4, #0]
 801a4e2:	4421      	add	r1, r4
 801a4e4:	1854      	adds	r4, r2, r1
 801a4e6:	42a3      	cmp	r3, r4
 801a4e8:	6011      	str	r1, [r2, #0]
 801a4ea:	d1e0      	bne.n	801a4ae <_free_r+0x26>
 801a4ec:	681c      	ldr	r4, [r3, #0]
 801a4ee:	685b      	ldr	r3, [r3, #4]
 801a4f0:	6053      	str	r3, [r2, #4]
 801a4f2:	4421      	add	r1, r4
 801a4f4:	6011      	str	r1, [r2, #0]
 801a4f6:	e7da      	b.n	801a4ae <_free_r+0x26>
 801a4f8:	d902      	bls.n	801a500 <_free_r+0x78>
 801a4fa:	230c      	movs	r3, #12
 801a4fc:	6003      	str	r3, [r0, #0]
 801a4fe:	e7d6      	b.n	801a4ae <_free_r+0x26>
 801a500:	6825      	ldr	r5, [r4, #0]
 801a502:	1961      	adds	r1, r4, r5
 801a504:	428b      	cmp	r3, r1
 801a506:	bf04      	itt	eq
 801a508:	6819      	ldreq	r1, [r3, #0]
 801a50a:	685b      	ldreq	r3, [r3, #4]
 801a50c:	6063      	str	r3, [r4, #4]
 801a50e:	bf04      	itt	eq
 801a510:	1949      	addeq	r1, r1, r5
 801a512:	6021      	streq	r1, [r4, #0]
 801a514:	6054      	str	r4, [r2, #4]
 801a516:	e7ca      	b.n	801a4ae <_free_r+0x26>
 801a518:	b003      	add	sp, #12
 801a51a:	bd30      	pop	{r4, r5, pc}
 801a51c:	240069b0 	.word	0x240069b0

0801a520 <sbrk_aligned>:
 801a520:	b570      	push	{r4, r5, r6, lr}
 801a522:	4e0e      	ldr	r6, [pc, #56]	; (801a55c <sbrk_aligned+0x3c>)
 801a524:	460c      	mov	r4, r1
 801a526:	6831      	ldr	r1, [r6, #0]
 801a528:	4605      	mov	r5, r0
 801a52a:	b911      	cbnz	r1, 801a532 <sbrk_aligned+0x12>
 801a52c:	f000 f88c 	bl	801a648 <_sbrk_r>
 801a530:	6030      	str	r0, [r6, #0]
 801a532:	4621      	mov	r1, r4
 801a534:	4628      	mov	r0, r5
 801a536:	f000 f887 	bl	801a648 <_sbrk_r>
 801a53a:	1c43      	adds	r3, r0, #1
 801a53c:	d00a      	beq.n	801a554 <sbrk_aligned+0x34>
 801a53e:	1cc4      	adds	r4, r0, #3
 801a540:	f024 0403 	bic.w	r4, r4, #3
 801a544:	42a0      	cmp	r0, r4
 801a546:	d007      	beq.n	801a558 <sbrk_aligned+0x38>
 801a548:	1a21      	subs	r1, r4, r0
 801a54a:	4628      	mov	r0, r5
 801a54c:	f000 f87c 	bl	801a648 <_sbrk_r>
 801a550:	3001      	adds	r0, #1
 801a552:	d101      	bne.n	801a558 <sbrk_aligned+0x38>
 801a554:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a558:	4620      	mov	r0, r4
 801a55a:	bd70      	pop	{r4, r5, r6, pc}
 801a55c:	240069b4 	.word	0x240069b4

0801a560 <_malloc_r>:
 801a560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a564:	1ccd      	adds	r5, r1, #3
 801a566:	f025 0503 	bic.w	r5, r5, #3
 801a56a:	3508      	adds	r5, #8
 801a56c:	2d0c      	cmp	r5, #12
 801a56e:	bf38      	it	cc
 801a570:	250c      	movcc	r5, #12
 801a572:	2d00      	cmp	r5, #0
 801a574:	4607      	mov	r7, r0
 801a576:	db01      	blt.n	801a57c <_malloc_r+0x1c>
 801a578:	42a9      	cmp	r1, r5
 801a57a:	d905      	bls.n	801a588 <_malloc_r+0x28>
 801a57c:	230c      	movs	r3, #12
 801a57e:	603b      	str	r3, [r7, #0]
 801a580:	2600      	movs	r6, #0
 801a582:	4630      	mov	r0, r6
 801a584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a588:	4e2e      	ldr	r6, [pc, #184]	; (801a644 <_malloc_r+0xe4>)
 801a58a:	f000 f907 	bl	801a79c <__malloc_lock>
 801a58e:	6833      	ldr	r3, [r6, #0]
 801a590:	461c      	mov	r4, r3
 801a592:	bb34      	cbnz	r4, 801a5e2 <_malloc_r+0x82>
 801a594:	4629      	mov	r1, r5
 801a596:	4638      	mov	r0, r7
 801a598:	f7ff ffc2 	bl	801a520 <sbrk_aligned>
 801a59c:	1c43      	adds	r3, r0, #1
 801a59e:	4604      	mov	r4, r0
 801a5a0:	d14d      	bne.n	801a63e <_malloc_r+0xde>
 801a5a2:	6834      	ldr	r4, [r6, #0]
 801a5a4:	4626      	mov	r6, r4
 801a5a6:	2e00      	cmp	r6, #0
 801a5a8:	d140      	bne.n	801a62c <_malloc_r+0xcc>
 801a5aa:	6823      	ldr	r3, [r4, #0]
 801a5ac:	4631      	mov	r1, r6
 801a5ae:	4638      	mov	r0, r7
 801a5b0:	eb04 0803 	add.w	r8, r4, r3
 801a5b4:	f000 f848 	bl	801a648 <_sbrk_r>
 801a5b8:	4580      	cmp	r8, r0
 801a5ba:	d13a      	bne.n	801a632 <_malloc_r+0xd2>
 801a5bc:	6821      	ldr	r1, [r4, #0]
 801a5be:	3503      	adds	r5, #3
 801a5c0:	1a6d      	subs	r5, r5, r1
 801a5c2:	f025 0503 	bic.w	r5, r5, #3
 801a5c6:	3508      	adds	r5, #8
 801a5c8:	2d0c      	cmp	r5, #12
 801a5ca:	bf38      	it	cc
 801a5cc:	250c      	movcc	r5, #12
 801a5ce:	4629      	mov	r1, r5
 801a5d0:	4638      	mov	r0, r7
 801a5d2:	f7ff ffa5 	bl	801a520 <sbrk_aligned>
 801a5d6:	3001      	adds	r0, #1
 801a5d8:	d02b      	beq.n	801a632 <_malloc_r+0xd2>
 801a5da:	6823      	ldr	r3, [r4, #0]
 801a5dc:	442b      	add	r3, r5
 801a5de:	6023      	str	r3, [r4, #0]
 801a5e0:	e00e      	b.n	801a600 <_malloc_r+0xa0>
 801a5e2:	6822      	ldr	r2, [r4, #0]
 801a5e4:	1b52      	subs	r2, r2, r5
 801a5e6:	d41e      	bmi.n	801a626 <_malloc_r+0xc6>
 801a5e8:	2a0b      	cmp	r2, #11
 801a5ea:	d916      	bls.n	801a61a <_malloc_r+0xba>
 801a5ec:	1961      	adds	r1, r4, r5
 801a5ee:	42a3      	cmp	r3, r4
 801a5f0:	6025      	str	r5, [r4, #0]
 801a5f2:	bf18      	it	ne
 801a5f4:	6059      	strne	r1, [r3, #4]
 801a5f6:	6863      	ldr	r3, [r4, #4]
 801a5f8:	bf08      	it	eq
 801a5fa:	6031      	streq	r1, [r6, #0]
 801a5fc:	5162      	str	r2, [r4, r5]
 801a5fe:	604b      	str	r3, [r1, #4]
 801a600:	4638      	mov	r0, r7
 801a602:	f104 060b 	add.w	r6, r4, #11
 801a606:	f000 f8cf 	bl	801a7a8 <__malloc_unlock>
 801a60a:	f026 0607 	bic.w	r6, r6, #7
 801a60e:	1d23      	adds	r3, r4, #4
 801a610:	1af2      	subs	r2, r6, r3
 801a612:	d0b6      	beq.n	801a582 <_malloc_r+0x22>
 801a614:	1b9b      	subs	r3, r3, r6
 801a616:	50a3      	str	r3, [r4, r2]
 801a618:	e7b3      	b.n	801a582 <_malloc_r+0x22>
 801a61a:	6862      	ldr	r2, [r4, #4]
 801a61c:	42a3      	cmp	r3, r4
 801a61e:	bf0c      	ite	eq
 801a620:	6032      	streq	r2, [r6, #0]
 801a622:	605a      	strne	r2, [r3, #4]
 801a624:	e7ec      	b.n	801a600 <_malloc_r+0xa0>
 801a626:	4623      	mov	r3, r4
 801a628:	6864      	ldr	r4, [r4, #4]
 801a62a:	e7b2      	b.n	801a592 <_malloc_r+0x32>
 801a62c:	4634      	mov	r4, r6
 801a62e:	6876      	ldr	r6, [r6, #4]
 801a630:	e7b9      	b.n	801a5a6 <_malloc_r+0x46>
 801a632:	230c      	movs	r3, #12
 801a634:	603b      	str	r3, [r7, #0]
 801a636:	4638      	mov	r0, r7
 801a638:	f000 f8b6 	bl	801a7a8 <__malloc_unlock>
 801a63c:	e7a1      	b.n	801a582 <_malloc_r+0x22>
 801a63e:	6025      	str	r5, [r4, #0]
 801a640:	e7de      	b.n	801a600 <_malloc_r+0xa0>
 801a642:	bf00      	nop
 801a644:	240069b0 	.word	0x240069b0

0801a648 <_sbrk_r>:
 801a648:	b538      	push	{r3, r4, r5, lr}
 801a64a:	4d06      	ldr	r5, [pc, #24]	; (801a664 <_sbrk_r+0x1c>)
 801a64c:	2300      	movs	r3, #0
 801a64e:	4604      	mov	r4, r0
 801a650:	4608      	mov	r0, r1
 801a652:	602b      	str	r3, [r5, #0]
 801a654:	f7ea f868 	bl	8004728 <_sbrk>
 801a658:	1c43      	adds	r3, r0, #1
 801a65a:	d102      	bne.n	801a662 <_sbrk_r+0x1a>
 801a65c:	682b      	ldr	r3, [r5, #0]
 801a65e:	b103      	cbz	r3, 801a662 <_sbrk_r+0x1a>
 801a660:	6023      	str	r3, [r4, #0]
 801a662:	bd38      	pop	{r3, r4, r5, pc}
 801a664:	240069b8 	.word	0x240069b8

0801a668 <__sread>:
 801a668:	b510      	push	{r4, lr}
 801a66a:	460c      	mov	r4, r1
 801a66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a670:	f000 f8a0 	bl	801a7b4 <_read_r>
 801a674:	2800      	cmp	r0, #0
 801a676:	bfab      	itete	ge
 801a678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a67a:	89a3      	ldrhlt	r3, [r4, #12]
 801a67c:	181b      	addge	r3, r3, r0
 801a67e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a682:	bfac      	ite	ge
 801a684:	6563      	strge	r3, [r4, #84]	; 0x54
 801a686:	81a3      	strhlt	r3, [r4, #12]
 801a688:	bd10      	pop	{r4, pc}

0801a68a <__swrite>:
 801a68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a68e:	461f      	mov	r7, r3
 801a690:	898b      	ldrh	r3, [r1, #12]
 801a692:	05db      	lsls	r3, r3, #23
 801a694:	4605      	mov	r5, r0
 801a696:	460c      	mov	r4, r1
 801a698:	4616      	mov	r6, r2
 801a69a:	d505      	bpl.n	801a6a8 <__swrite+0x1e>
 801a69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6a0:	2302      	movs	r3, #2
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	f000 f868 	bl	801a778 <_lseek_r>
 801a6a8:	89a3      	ldrh	r3, [r4, #12]
 801a6aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a6b2:	81a3      	strh	r3, [r4, #12]
 801a6b4:	4632      	mov	r2, r6
 801a6b6:	463b      	mov	r3, r7
 801a6b8:	4628      	mov	r0, r5
 801a6ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6be:	f000 b817 	b.w	801a6f0 <_write_r>

0801a6c2 <__sseek>:
 801a6c2:	b510      	push	{r4, lr}
 801a6c4:	460c      	mov	r4, r1
 801a6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6ca:	f000 f855 	bl	801a778 <_lseek_r>
 801a6ce:	1c43      	adds	r3, r0, #1
 801a6d0:	89a3      	ldrh	r3, [r4, #12]
 801a6d2:	bf15      	itete	ne
 801a6d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a6d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a6da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a6de:	81a3      	strheq	r3, [r4, #12]
 801a6e0:	bf18      	it	ne
 801a6e2:	81a3      	strhne	r3, [r4, #12]
 801a6e4:	bd10      	pop	{r4, pc}

0801a6e6 <__sclose>:
 801a6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6ea:	f000 b813 	b.w	801a714 <_close_r>
	...

0801a6f0 <_write_r>:
 801a6f0:	b538      	push	{r3, r4, r5, lr}
 801a6f2:	4d07      	ldr	r5, [pc, #28]	; (801a710 <_write_r+0x20>)
 801a6f4:	4604      	mov	r4, r0
 801a6f6:	4608      	mov	r0, r1
 801a6f8:	4611      	mov	r1, r2
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	602a      	str	r2, [r5, #0]
 801a6fe:	461a      	mov	r2, r3
 801a700:	f7e9 ffc1 	bl	8004686 <_write>
 801a704:	1c43      	adds	r3, r0, #1
 801a706:	d102      	bne.n	801a70e <_write_r+0x1e>
 801a708:	682b      	ldr	r3, [r5, #0]
 801a70a:	b103      	cbz	r3, 801a70e <_write_r+0x1e>
 801a70c:	6023      	str	r3, [r4, #0]
 801a70e:	bd38      	pop	{r3, r4, r5, pc}
 801a710:	240069b8 	.word	0x240069b8

0801a714 <_close_r>:
 801a714:	b538      	push	{r3, r4, r5, lr}
 801a716:	4d06      	ldr	r5, [pc, #24]	; (801a730 <_close_r+0x1c>)
 801a718:	2300      	movs	r3, #0
 801a71a:	4604      	mov	r4, r0
 801a71c:	4608      	mov	r0, r1
 801a71e:	602b      	str	r3, [r5, #0]
 801a720:	f7e9 ffcd 	bl	80046be <_close>
 801a724:	1c43      	adds	r3, r0, #1
 801a726:	d102      	bne.n	801a72e <_close_r+0x1a>
 801a728:	682b      	ldr	r3, [r5, #0]
 801a72a:	b103      	cbz	r3, 801a72e <_close_r+0x1a>
 801a72c:	6023      	str	r3, [r4, #0]
 801a72e:	bd38      	pop	{r3, r4, r5, pc}
 801a730:	240069b8 	.word	0x240069b8

0801a734 <_fstat_r>:
 801a734:	b538      	push	{r3, r4, r5, lr}
 801a736:	4d07      	ldr	r5, [pc, #28]	; (801a754 <_fstat_r+0x20>)
 801a738:	2300      	movs	r3, #0
 801a73a:	4604      	mov	r4, r0
 801a73c:	4608      	mov	r0, r1
 801a73e:	4611      	mov	r1, r2
 801a740:	602b      	str	r3, [r5, #0]
 801a742:	f7e9 ffc8 	bl	80046d6 <_fstat>
 801a746:	1c43      	adds	r3, r0, #1
 801a748:	d102      	bne.n	801a750 <_fstat_r+0x1c>
 801a74a:	682b      	ldr	r3, [r5, #0]
 801a74c:	b103      	cbz	r3, 801a750 <_fstat_r+0x1c>
 801a74e:	6023      	str	r3, [r4, #0]
 801a750:	bd38      	pop	{r3, r4, r5, pc}
 801a752:	bf00      	nop
 801a754:	240069b8 	.word	0x240069b8

0801a758 <_isatty_r>:
 801a758:	b538      	push	{r3, r4, r5, lr}
 801a75a:	4d06      	ldr	r5, [pc, #24]	; (801a774 <_isatty_r+0x1c>)
 801a75c:	2300      	movs	r3, #0
 801a75e:	4604      	mov	r4, r0
 801a760:	4608      	mov	r0, r1
 801a762:	602b      	str	r3, [r5, #0]
 801a764:	f7e9 ffc7 	bl	80046f6 <_isatty>
 801a768:	1c43      	adds	r3, r0, #1
 801a76a:	d102      	bne.n	801a772 <_isatty_r+0x1a>
 801a76c:	682b      	ldr	r3, [r5, #0]
 801a76e:	b103      	cbz	r3, 801a772 <_isatty_r+0x1a>
 801a770:	6023      	str	r3, [r4, #0]
 801a772:	bd38      	pop	{r3, r4, r5, pc}
 801a774:	240069b8 	.word	0x240069b8

0801a778 <_lseek_r>:
 801a778:	b538      	push	{r3, r4, r5, lr}
 801a77a:	4d07      	ldr	r5, [pc, #28]	; (801a798 <_lseek_r+0x20>)
 801a77c:	4604      	mov	r4, r0
 801a77e:	4608      	mov	r0, r1
 801a780:	4611      	mov	r1, r2
 801a782:	2200      	movs	r2, #0
 801a784:	602a      	str	r2, [r5, #0]
 801a786:	461a      	mov	r2, r3
 801a788:	f7e9 ffc0 	bl	800470c <_lseek>
 801a78c:	1c43      	adds	r3, r0, #1
 801a78e:	d102      	bne.n	801a796 <_lseek_r+0x1e>
 801a790:	682b      	ldr	r3, [r5, #0]
 801a792:	b103      	cbz	r3, 801a796 <_lseek_r+0x1e>
 801a794:	6023      	str	r3, [r4, #0]
 801a796:	bd38      	pop	{r3, r4, r5, pc}
 801a798:	240069b8 	.word	0x240069b8

0801a79c <__malloc_lock>:
 801a79c:	4801      	ldr	r0, [pc, #4]	; (801a7a4 <__malloc_lock+0x8>)
 801a79e:	f7ff be0b 	b.w	801a3b8 <__retarget_lock_acquire_recursive>
 801a7a2:	bf00      	nop
 801a7a4:	240069ac 	.word	0x240069ac

0801a7a8 <__malloc_unlock>:
 801a7a8:	4801      	ldr	r0, [pc, #4]	; (801a7b0 <__malloc_unlock+0x8>)
 801a7aa:	f7ff be06 	b.w	801a3ba <__retarget_lock_release_recursive>
 801a7ae:	bf00      	nop
 801a7b0:	240069ac 	.word	0x240069ac

0801a7b4 <_read_r>:
 801a7b4:	b538      	push	{r3, r4, r5, lr}
 801a7b6:	4d07      	ldr	r5, [pc, #28]	; (801a7d4 <_read_r+0x20>)
 801a7b8:	4604      	mov	r4, r0
 801a7ba:	4608      	mov	r0, r1
 801a7bc:	4611      	mov	r1, r2
 801a7be:	2200      	movs	r2, #0
 801a7c0:	602a      	str	r2, [r5, #0]
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	f7e9 ff42 	bl	800464c <_read>
 801a7c8:	1c43      	adds	r3, r0, #1
 801a7ca:	d102      	bne.n	801a7d2 <_read_r+0x1e>
 801a7cc:	682b      	ldr	r3, [r5, #0]
 801a7ce:	b103      	cbz	r3, 801a7d2 <_read_r+0x1e>
 801a7d0:	6023      	str	r3, [r4, #0]
 801a7d2:	bd38      	pop	{r3, r4, r5, pc}
 801a7d4:	240069b8 	.word	0x240069b8

0801a7d8 <_init>:
 801a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7da:	bf00      	nop
 801a7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7de:	bc08      	pop	{r3}
 801a7e0:	469e      	mov	lr, r3
 801a7e2:	4770      	bx	lr

0801a7e4 <_fini>:
 801a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7e6:	bf00      	nop
 801a7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7ea:	bc08      	pop	{r3}
 801a7ec:	469e      	mov	lr, r3
 801a7ee:	4770      	bx	lr
