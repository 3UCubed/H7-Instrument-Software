
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013eac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0801414c  0801414c  0002414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080144fc  080144fc  000244fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014504  08014504  00024504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014508  08014508  00024508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0801450c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f1c  24000080  08014584  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24004f9c  08014584  00034f9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030a6e  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000527a  00000000  00000000  00060b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002530  00000000  00000000  00065d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002348  00000000  00000000  000682c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000748b  00000000  00000000  0006a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002edca  00000000  00000000  00071a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d53f  00000000  00000000  000a085d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022dd9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a94c  00000000  00000000  0022ddec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014134 	.word	0x08014134

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08014134 	.word	0x08014134

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f00f fae8 	bl	800fc70 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f fadd 	bl	800fc70 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fad2 	bl	800fc70 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f012 fe92 	bl	80133f8 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240003bc 	.word	0x240003bc
 80006e0:	24000554 	.word	0x24000554
 80006e4:	24000408 	.word	0x24000408
 80006e8:	24000454 	.word	0x24000454
 80006ec:	0801418c 	.word	0x0801418c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49ae      	ldr	r1, [pc, #696]	; (80009b4 <HAL_UART_RxCpltCallback+0x2c4>)
 80006fc:	48ae      	ldr	r0, [pc, #696]	; (80009b8 <HAL_UART_RxCpltCallback+0x2c8>)
 80006fe:	f00c fdcd 	bl	800d29c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bac      	ldr	r3, [pc, #688]	; (80009b4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 814e 	bhi.w	80009ac <HAL_UART_RxCpltCallback+0x2bc>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000801 	.word	0x08000801
 800071c:	08000829 	.word	0x08000829
 8000720:	08000851 	.word	0x08000851
 8000724:	0800087d 	.word	0x0800087d
 8000728:	080008a9 	.word	0x080008a9
 800072c:	080008d1 	.word	0x080008d1
 8000730:	080008fd 	.word	0x080008fd
 8000734:	08000929 	.word	0x08000929
 8000738:	080009ad 	.word	0x080009ad
 800073c:	080009ad 	.word	0x080009ad
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000951 	.word	0x08000951
 800074c:	08000959 	.word	0x08000959
 8000750:	08000975 	.word	0x08000975
 8000754:	08000991 	.word	0x08000991
 8000758:	08000967 	.word	0x08000967
 800075c:	08000983 	.word	0x08000983
 8000760:	0800099f 	.word	0x0800099f
 8000764:	08000815 	.word	0x08000815
 8000768:	0800083d 	.word	0x0800083d
 800076c:	08000867 	.word	0x08000867
 8000770:	08000893 	.word	0x08000893
 8000774:	080008bd 	.word	0x080008bd
 8000778:	080008e7 	.word	0x080008e7
 800077c:	08000913 	.word	0x08000913
 8000780:	0800093d 	.word	0x0800093d
 8000784:	080007d9 	.word	0x080007d9
 8000788:	080007e1 	.word	0x080007e1
 800078c:	080007e9 	.word	0x080007e9
 8000790:	080009ad 	.word	0x080009ad
 8000794:	080009ad 	.word	0x080009ad
 8000798:	080009ad 	.word	0x080009ad
 800079c:	080009ad 	.word	0x080009ad
 80007a0:	080009ad 	.word	0x080009ad
 80007a4:	080009ad 	.word	0x080009ad
 80007a8:	080007f1 	.word	0x080007f1
 80007ac:	080007f9 	.word	0x080007f9
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4882      	ldr	r0, [pc, #520]	; (80009bc <HAL_UART_RxCpltCallback+0x2cc>)
 80007b2:	f012 fe21 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b82      	ldr	r3, [pc, #520]	; (80009c0 <HAL_UART_RxCpltCallback+0x2d0>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 f86d 	bl	800789c <HAL_GPIO_WritePin>
		break;
 80007c2:	e0f3      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	487f      	ldr	r0, [pc, #508]	; (80009c4 <HAL_UART_RxCpltCallback+0x2d4>)
 80007c6:	f012 fe17 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b7d      	ldr	r3, [pc, #500]	; (80009c0 <HAL_UART_RxCpltCallback+0x2d0>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 f863 	bl	800789c <HAL_GPIO_WritePin>
		break;
 80007d6:	e0e9      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	487b      	ldr	r0, [pc, #492]	; (80009c8 <HAL_UART_RxCpltCallback+0x2d8>)
 80007da:	f012 fe0d 	bl	80133f8 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 80007de:	e0e5      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x1C: {
		printf("Step Down\n");
 80007e0:	487a      	ldr	r0, [pc, #488]	; (80009cc <HAL_UART_RxCpltCallback+0x2dc>)
 80007e2:	f012 fe09 	bl	80133f8 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 80007e6:	e0e1      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 80007e8:	4879      	ldr	r0, [pc, #484]	; (80009d0 <HAL_UART_RxCpltCallback+0x2e0>)
 80007ea:	f012 fe05 	bl	80133f8 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 80007ee:	e0dd      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x24: {
		printf("Factor Up\n");
 80007f0:	4878      	ldr	r0, [pc, #480]	; (80009d4 <HAL_UART_RxCpltCallback+0x2e4>)
 80007f2:	f012 fe01 	bl	80133f8 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007f6:	e0d9      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x25: {
		printf("Factor Down\n");
 80007f8:	4877      	ldr	r0, [pc, #476]	; (80009d8 <HAL_UART_RxCpltCallback+0x2e8>)
 80007fa:	f012 fdfd 	bl	80133f8 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007fe:	e0d5      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000800:	4876      	ldr	r0, [pc, #472]	; (80009dc <HAL_UART_RxCpltCallback+0x2ec>)
 8000802:	f012 fdf9 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000806:	4b6e      	ldr	r3, [pc, #440]	; (80009c0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000808:	2120      	movs	r1, #32
 800080a:	2201      	movs	r2, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f007 f845 	bl	800789c <HAL_GPIO_WritePin>
		break;
 8000812:	e0cb      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000814:	4872      	ldr	r0, [pc, #456]	; (80009e0 <HAL_UART_RxCpltCallback+0x2f0>)
 8000816:	f012 fdef 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800081a:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <HAL_UART_RxCpltCallback+0x2d0>)
 800081c:	2120      	movs	r1, #32
 800081e:	2200      	movs	r2, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f007 f83b 	bl	800789c <HAL_GPIO_WritePin>
		break;
 8000826:	e0c1      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000828:	486e      	ldr	r0, [pc, #440]	; (80009e4 <HAL_UART_RxCpltCallback+0x2f4>)
 800082a:	f012 fde5 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800082e:	4b64      	ldr	r3, [pc, #400]	; (80009c0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	2201      	movs	r2, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f007 f831 	bl	800789c <HAL_GPIO_WritePin>
		break;
 800083a:	e0b7      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 800083c:	486a      	ldr	r0, [pc, #424]	; (80009e8 <HAL_UART_RxCpltCallback+0x2f8>)
 800083e:	f012 fddb 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000842:	4b5f      	ldr	r3, [pc, #380]	; (80009c0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	2200      	movs	r2, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f007 f827 	bl	800789c <HAL_GPIO_WritePin>
		break;
 800084e:	e0ad      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000850:	4866      	ldr	r0, [pc, #408]	; (80009ec <HAL_UART_RxCpltCallback+0x2fc>)
 8000852:	f012 fdd1 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000856:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	2201      	movs	r2, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f007 f81c 	bl	800789c <HAL_GPIO_WritePin>
		break;
 8000864:	e0a2      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000866:	4863      	ldr	r0, [pc, #396]	; (80009f4 <HAL_UART_RxCpltCallback+0x304>)
 8000868:	f012 fdc6 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 800086c:	4b60      	ldr	r3, [pc, #384]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	2200      	movs	r2, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f007 f811 	bl	800789c <HAL_GPIO_WritePin>
		break;
 800087a:	e097      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 800087c:	485e      	ldr	r0, [pc, #376]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 800087e:	f012 fdbb 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000882:	4b5b      	ldr	r3, [pc, #364]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	2201      	movs	r2, #1
 800088a:	4618      	mov	r0, r3
 800088c:	f007 f806 	bl	800789c <HAL_GPIO_WritePin>
		break;
 8000890:	e08c      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000892:	485a      	ldr	r0, [pc, #360]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 8000894:	f012 fdb0 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000898:	4b55      	ldr	r3, [pc, #340]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	2200      	movs	r2, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 fffb 	bl	800789c <HAL_GPIO_WritePin>
		break;
 80008a6:	e081      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 80008a8:	4855      	ldr	r0, [pc, #340]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80008aa:	f012 fda5 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80008ae:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	2201      	movs	r2, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f006 fff1 	bl	800789c <HAL_GPIO_WritePin>
		break;
 80008ba:	e077      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80008bc:	4851      	ldr	r0, [pc, #324]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008be:	f012 fd9b 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80008c2:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	2200      	movs	r2, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 ffe7 	bl	800789c <HAL_GPIO_WritePin>
		break;
 80008ce:	e06d      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80008d0:	484d      	ldr	r0, [pc, #308]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80008d2:	f012 fd91 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80008d6:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	2201      	movs	r2, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 ffdc 	bl	800789c <HAL_GPIO_WritePin>
		break;
 80008e4:	e062      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80008e6:	4849      	ldr	r0, [pc, #292]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80008e8:	f012 fd86 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80008ec:	4b40      	ldr	r3, [pc, #256]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 80008ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f2:	2200      	movs	r2, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f006 ffd1 	bl	800789c <HAL_GPIO_WritePin>
		break;
 80008fa:	e057      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80008fc:	4844      	ldr	r0, [pc, #272]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80008fe:	f012 fd7b 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000902:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	2201      	movs	r2, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f006 ffc6 	bl	800789c <HAL_GPIO_WritePin>
		break;
 8000910:	e04c      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000912:	4840      	ldr	r0, [pc, #256]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000914:	f012 fd70 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000918:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 800091a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091e:	2200      	movs	r2, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f006 ffbb 	bl	800789c <HAL_GPIO_WritePin>
		break;
 8000926:	e041      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000928:	483b      	ldr	r0, [pc, #236]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800092a:	f012 fd65 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	2201      	movs	r2, #1
 8000934:	4618      	mov	r0, r3
 8000936:	f006 ffb1 	bl	800789c <HAL_GPIO_WritePin>
		break;
 800093a:	e037      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 800093c:	4837      	ldr	r0, [pc, #220]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 800093e:	f012 fd5b 	bl	80133f8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <HAL_UART_RxCpltCallback+0x300>)
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	2200      	movs	r2, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f006 ffa7 	bl	800789c <HAL_GPIO_WritePin>
		break;
 800094e:	e02d      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000950:	4833      	ldr	r0, [pc, #204]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000952:	f012 fd51 	bl	80133f8 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000956:	e029      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000958:	4832      	ldr	r0, [pc, #200]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800095a:	f012 fd4d 	bl	80133f8 <puts>
		PMT_ON = 1;
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
		break;
 8000964:	e022      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000966:	4831      	ldr	r0, [pc, #196]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000968:	f012 fd46 	bl	80133f8 <puts>
		PMT_ON = 0;
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
		break;
 8000972:	e01b      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000974:	482e      	ldr	r0, [pc, #184]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 8000976:	f012 fd3f 	bl	80133f8 <puts>
		ERPA_ON = 1;
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
		break;
 8000980:	e014      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000982:	482d      	ldr	r0, [pc, #180]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 8000984:	f012 fd38 	bl	80133f8 <puts>
		ERPA_ON = 0;
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		break;
 800098e:	e00d      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000990:	482a      	ldr	r0, [pc, #168]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 8000992:	f012 fd31 	bl	80133f8 <puts>
		HK_ON = 1;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
		break;
 800099c:	e006      	b.n	80009ac <HAL_UART_RxCpltCallback+0x2bc>
	}
	case 0x12: {
		printf("HK OFF\n");
 800099e:	4829      	ldr	r0, [pc, #164]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 80009a0:	f012 fd2a 	bl	80133f8 <puts>
		HK_ON = 0;
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
		break;
 80009aa:	bf00      	nop
	}
	}
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24000558 	.word	0x24000558
 80009b8:	240004a0 	.word	0x240004a0
 80009bc:	080141a4 	.word	0x080141a4
 80009c0:	58020400 	.word	0x58020400
 80009c4:	080141ac 	.word	0x080141ac
 80009c8:	080141b8 	.word	0x080141b8
 80009cc:	080141c0 	.word	0x080141c0
 80009d0:	080141cc 	.word	0x080141cc
 80009d4:	080141e0 	.word	0x080141e0
 80009d8:	080141ec 	.word	0x080141ec
 80009dc:	080141f8 	.word	0x080141f8
 80009e0:	08014204 	.word	0x08014204
 80009e4:	08014210 	.word	0x08014210
 80009e8:	0801421c 	.word	0x0801421c
 80009ec:	0801422c 	.word	0x0801422c
 80009f0:	58020800 	.word	0x58020800
 80009f4:	08014238 	.word	0x08014238
 80009f8:	08014244 	.word	0x08014244
 80009fc:	08014254 	.word	0x08014254
 8000a00:	08014264 	.word	0x08014264
 8000a04:	08014270 	.word	0x08014270
 8000a08:	0801427c 	.word	0x0801427c
 8000a0c:	08014288 	.word	0x08014288
 8000a10:	08014294 	.word	0x08014294
 8000a14:	080142a0 	.word	0x080142a0
 8000a18:	080142ac 	.word	0x080142ac
 8000a1c:	080142b8 	.word	0x080142b8
 8000a20:	080142c8 	.word	0x080142c8
 8000a24:	080142d8 	.word	0x080142d8
 8000a28:	2400054f 	.word	0x2400054f
 8000a2c:	080142e0 	.word	0x080142e0
 8000a30:	080142e8 	.word	0x080142e8
 8000a34:	24000550 	.word	0x24000550
 8000a38:	080142f0 	.word	0x080142f0
 8000a3c:	080142fc 	.word	0x080142fc
 8000a40:	24000551 	.word	0x24000551
 8000a44:	08014304 	.word	0x08014304

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f001 fffa 	bl	8002a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f88e 	bl	8000b70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a54:	f000 f90a 	bl	8000c6c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f000 fda8 	bl	80015ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a5c:	f000 fd76 	bl	800154c <MX_DMA_Init>
  MX_TIM3_Init();
 8000a60:	f000 fcda 	bl	8001418 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a64:	f000 fd26 	bl	80014b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a68:	f000 fb1a 	bl	80010a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000a6c:	f000 fb58 	bl	8001120 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a70:	f000 fc5c 	bl	800132c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a74:	f000 fbac 	bl	80011d0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000a78:	f000 fa4e 	bl	8000f18 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000a7c:	f000 f926 	bl	8000ccc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000a80:	f000 fadc 	bl	800103c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4825      	ldr	r0, [pc, #148]	; (8000b1c <main+0xd4>)
 8000a88:	f00a ffc4 	bl	800ba14 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4824      	ldr	r0, [pc, #144]	; (8000b20 <main+0xd8>)
 8000a90:	f00a ffc0 	bl	800ba14 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000a94:	2100      	movs	r1, #0
 8000a96:	4823      	ldr	r0, [pc, #140]	; (8000b24 <main+0xdc>)
 8000a98:	f00a ffbc 	bl	800ba14 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a9c:	f00e ff92 	bl	800f9c4 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	2010      	movs	r0, #16
 8000aa6:	f00f f98d 	bl	800fdc4 <osMessageQueueNew>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <main+0xe0>)
 8000aae:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <main+0xe4>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	481e      	ldr	r0, [pc, #120]	; (8000b30 <main+0xe8>)
 8000ab6:	f00e ffcf 	bl	800fa58 <osThreadNew>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <main+0xec>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <main+0xf0>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <main+0xf4>)
 8000ac6:	f00e ffc7 	bl	800fa58 <osThreadNew>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <main+0xf8>)
 8000ace:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <main+0xfc>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <main+0x100>)
 8000ad6:	f00e ffbf 	bl	800fa58 <osThreadNew>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <main+0x104>)
 8000ade:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <main+0x108>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	481b      	ldr	r0, [pc, #108]	; (8000b54 <main+0x10c>)
 8000ae6:	f00e ffb7 	bl	800fa58 <osThreadNew>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <main+0x110>)
 8000aee:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <main+0x114>)
 8000af2:	2100      	movs	r1, #0
 8000af4:	481a      	ldr	r0, [pc, #104]	; (8000b60 <main+0x118>)
 8000af6:	f00e ffaf 	bl	800fa58 <osThreadNew>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <main+0x11c>)
 8000afe:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f00f f876 	bl	800fbf2 <osEventFlagsNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <main+0x120>)
 8000b0a:	6013      	str	r3, [r2, #0]
  system_setup();
 8000b0c:	f000 fdb8 	bl	8001680 <system_setup>
  printf("Starting kernal...\n");
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <main+0x124>)
 8000b12:	f012 fc71 	bl	80133f8 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b16:	f00e ff79 	bl	800fa0c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b1a:	e7fe      	b.n	8000b1a <main+0xd2>
 8000b1c:	240003bc 	.word	0x240003bc
 8000b20:	24000408 	.word	0x24000408
 8000b24:	24000454 	.word	0x24000454
 8000b28:	24000548 	.word	0x24000548
 8000b2c:	08014370 	.word	0x08014370
 8000b30:	08001c1d 	.word	0x08001c1d
 8000b34:	24000534 	.word	0x24000534
 8000b38:	08014394 	.word	0x08014394
 8000b3c:	08001c61 	.word	0x08001c61
 8000b40:	24000538 	.word	0x24000538
 8000b44:	080143b8 	.word	0x080143b8
 8000b48:	08001ca5 	.word	0x08001ca5
 8000b4c:	2400053c 	.word	0x2400053c
 8000b50:	080143dc 	.word	0x080143dc
 8000b54:	08001ce9 	.word	0x08001ce9
 8000b58:	24000540 	.word	0x24000540
 8000b5c:	08014400 	.word	0x08014400
 8000b60:	08001d0d 	.word	0x08001d0d
 8000b64:	24000544 	.word	0x24000544
 8000b68:	24000554 	.word	0x24000554
 8000b6c:	0801430c 	.word	0x0801430c

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b09c      	sub	sp, #112	; 0x70
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	224c      	movs	r2, #76	; 0x4c
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f012 facc 	bl	801311c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2220      	movs	r2, #32
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f012 fac6 	bl	801311c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b90:	2002      	movs	r0, #2
 8000b92:	f006 ffd1 	bl	8007b38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <SystemClock_Config+0xf4>)
 8000b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9e:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <SystemClock_Config+0xf4>)
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <SystemClock_Config+0xf4>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <SystemClock_Config+0xf8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb8:	4a2b      	ldr	r2, [pc, #172]	; (8000c68 <SystemClock_Config+0xf8>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <SystemClock_Config+0xf8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bcc:	bf00      	nop
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <SystemClock_Config+0xf8>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bda:	d1f8      	bne.n	8000bce <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000bf4:	2309      	movs	r3, #9
 8000bf6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c04:	230c      	movs	r3, #12
 8000c06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000c0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 ffc8 	bl	8007bac <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c22:	f001 f8b3 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	233f      	movs	r3, #63	; 0x3f
 8000c28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c3a:	2340      	movs	r3, #64	; 0x40
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f007 fc07 	bl	8008460 <HAL_RCC_ClockConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000c58:	f001 f898 	bl	8001d8c <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3770      	adds	r7, #112	; 0x70
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	58000400 	.word	0x58000400
 8000c68:	58024800 	.word	0x58024800

08000c6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0b0      	sub	sp, #192	; 0xc0
 8000c70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	22c0      	movs	r2, #192	; 0xc0
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f012 fa4f 	bl	801311c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c82:	f04f 0300 	mov.w	r3, #0
 8000c86:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000c8e:	2309      	movs	r3, #9
 8000c90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000c92:	2304      	movs	r3, #4
 8000c94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c9e:	23c0      	movs	r3, #192	; 0xc0
 8000ca0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000ca6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f007 ffa1 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000cc0:	f001 f864 	bl	8001d8c <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	37c0      	adds	r7, #192	; 0xc0
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf0:	4b7c      	ldr	r3, [pc, #496]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000cf2:	4a7d      	ldr	r2, [pc, #500]	; (8000ee8 <MX_ADC1_Init+0x21c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cf6:	4b7b      	ldr	r3, [pc, #492]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000cf8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cfe:	4b79      	ldr	r3, [pc, #484]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d00:	2208      	movs	r2, #8
 8000d02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d04:	4b77      	ldr	r3, [pc, #476]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0a:	4b76      	ldr	r3, [pc, #472]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d10:	4b74      	ldr	r3, [pc, #464]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d16:	4b73      	ldr	r3, [pc, #460]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000d1c:	4b71      	ldr	r3, [pc, #452]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d1e:	220b      	movs	r2, #11
 8000d20:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d22:	4b70      	ldr	r3, [pc, #448]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d28:	4b6e      	ldr	r3, [pc, #440]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d34:	4b6b      	ldr	r3, [pc, #428]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d42:	4b68      	ldr	r3, [pc, #416]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d48:	4b66      	ldr	r3, [pc, #408]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d50:	4864      	ldr	r0, [pc, #400]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d52:	f002 f903 	bl	8002f5c <HAL_ADC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f001 f816 	bl	8001d8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d6c:	f003 fa1e 	bl	80041ac <HAL_ADCEx_MultiModeConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d76:	f001 f809 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <MX_ADC1_Init+0x220>)
 8000d7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000d82:	2307      	movs	r3, #7
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4851      	ldr	r0, [pc, #324]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000d9e:	f002 fb61 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000da8:	f000 fff0 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dac:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <MX_ADC1_Init+0x224>)
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000db0:	230c      	movs	r3, #12
 8000db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	484a      	ldr	r0, [pc, #296]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000dba:	f002 fb53 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000dc4:	f000 ffe2 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dc8:	4b4a      	ldr	r3, [pc, #296]	; (8000ef4 <MX_ADC1_Init+0x228>)
 8000dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4843      	ldr	r0, [pc, #268]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000dd6:	f002 fb45 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000de0:	f000 ffd4 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000de4:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <MX_ADC1_Init+0x22c>)
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000de8:	2318      	movs	r3, #24
 8000dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000df2:	f002 fb37 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000dfc:	f000 ffc6 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e00:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <MX_ADC1_Init+0x230>)
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4835      	ldr	r0, [pc, #212]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000e10:	f002 fb28 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000e1a:	f000 ffb7 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_ADC1_Init+0x234>)
 8000e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e22:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000e26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000e2e:	f002 fb19 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000e38:	f000 ffa8 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e3c:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <MX_ADC1_Init+0x238>)
 8000e3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000e40:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000e44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000e4c:	f002 fb0a 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000e56:	f000 ff99 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_ADC1_Init+0x23c>)
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000e5e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000e6a:	f002 fafb 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000e74:	f000 ff8a 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_ADC1_Init+0x240>)
 8000e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000e7c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000e80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000e88:	f002 faec 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000e92:	f000 ff7b 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_ADC1_Init+0x244>)
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000eaa:	f002 fadb 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000eb4:	f000 ff6a 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_ADC1_Init+0x248>)
 8000eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ebc:	f240 2306 	movw	r3, #518	; 0x206
 8000ec0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_ADC1_Init+0x218>)
 8000ecc:	f002 faca 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000ed6:	f000 ff59 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2400009c 	.word	0x2400009c
 8000ee8:	40022000 	.word	0x40022000
 8000eec:	0c900008 	.word	0x0c900008
 8000ef0:	10c00010 	.word	0x10c00010
 8000ef4:	14f00020 	.word	0x14f00020
 8000ef8:	1d500080 	.word	0x1d500080
 8000efc:	21800100 	.word	0x21800100
 8000f00:	25b00200 	.word	0x25b00200
 8000f04:	2a000400 	.word	0x2a000400
 8000f08:	2e300800 	.word	0x2e300800
 8000f0c:	3ac04000 	.word	0x3ac04000
 8000f10:	3ef08000 	.word	0x3ef08000
 8000f14:	47520000 	.word	0x47520000

08000f18 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f32:	4a3e      	ldr	r2, [pc, #248]	; (800102c <MX_ADC3_Init+0x114>)
 8000f34:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f38:	2208      	movs	r2, #8
 8000f3a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f48:	4b37      	ldr	r3, [pc, #220]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000f54:	4b34      	ldr	r3, [pc, #208]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f60:	4b31      	ldr	r3, [pc, #196]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f6e:	2203      	movs	r2, #3
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f88:	4827      	ldr	r0, [pc, #156]	; (8001028 <MX_ADC3_Init+0x110>)
 8000f8a:	f001 ffe7 	bl	8002f5c <HAL_ADC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8000f94:	f000 fefa 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <MX_ADC3_Init+0x118>)
 8000f9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fa4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fa8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000faa:	2304      	movs	r3, #4
 8000fac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481b      	ldr	r0, [pc, #108]	; (8001028 <MX_ADC3_Init+0x110>)
 8000fbc:	f002 fa52 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000fc6:	f000 fee1 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_ADC3_Init+0x11c>)
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fce:	230c      	movs	r3, #12
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_ADC3_Init+0x110>)
 8000fd8:	f002 fa44 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000fe2:	f000 fed3 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fea:	2312      	movs	r3, #18
 8000fec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_ADC3_Init+0x110>)
 8000ff4:	f002 fa36 	bl	8003464 <HAL_ADC_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000ffe:	f000 fec5 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MX_ADC3_Init+0x120>)
 8001004:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001006:	2318      	movs	r3, #24
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_ADC3_Init+0x110>)
 8001010:	f002 fa28 	bl	8003464 <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800101a:	f000 feb7 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000100 	.word	0x24000100
 800102c:	58026000 	.word	0x58026000
 8001030:	cb840000 	.word	0xcb840000
 8001034:	cfb80000 	.word	0xcfb80000
 8001038:	04300002 	.word	0x04300002

0800103c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2224      	movs	r2, #36	; 0x24
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f012 f867 	bl	801311c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_DAC1_Init+0x5c>)
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_DAC1_Init+0x60>)
 8001052:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_DAC1_Init+0x5c>)
 8001056:	f003 fa67 	bl	8004528 <HAL_DAC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001060:	f000 fe94 	bl	8001d8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001068:	230a      	movs	r3, #10
 800106a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_DAC1_Init+0x5c>)
 8001080:	f003 fad4 	bl	800462c <HAL_DAC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800108a:	f000 fe7f 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	24000254 	.word	0x24000254
 800109c:	40007400 	.word	0x40007400

080010a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_I2C1_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <MX_I2C1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_I2C1_Init+0x74>)
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <MX_I2C1_Init+0x7c>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_I2C1_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_I2C1_Init+0x74>)
 80010dc:	f006 fbf8 	bl	80078d0 <HAL_I2C_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f000 fe51 	bl	8001d8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <MX_I2C1_Init+0x74>)
 80010ee:	f006 fc8b 	bl	8007a08 <HAL_I2CEx_ConfigAnalogFilter>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f000 fe48 	bl	8001d8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_I2C1_Init+0x74>)
 8001100:	f006 fccd 	bl	8007a9e <HAL_I2CEx_ConfigDigitalFilter>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 fe3f 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	240002e0 	.word	0x240002e0
 8001118:	40005400 	.word	0x40005400
 800111c:	00707cbb 	.word	0x00707cbb

08001120 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <MX_SPI2_Init+0xac>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800112c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001130:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001134:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001138:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800113c:	220f      	movs	r2, #15
 800113e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800114e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001152:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001156:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800115a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_SPI2_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_SPI2_Init+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_SPI2_Init+0xa8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_SPI2_Init+0xa8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_SPI2_Init+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_SPI2_Init+0xa8>)
 80011b4:	f00a fa20 	bl	800b5f8 <HAL_SPI_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80011be:	f000 fde5 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	24000334 	.word	0x24000334
 80011cc:	40003800 	.word	0x40003800

080011d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09a      	sub	sp, #104	; 0x68
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	222c      	movs	r2, #44	; 0x2c
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f011 ff86 	bl	801311c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001210:	4b44      	ldr	r3, [pc, #272]	; (8001324 <MX_TIM1_Init+0x154>)
 8001212:	4a45      	ldr	r2, [pc, #276]	; (8001328 <MX_TIM1_Init+0x158>)
 8001214:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <MX_TIM1_Init+0x154>)
 8001218:	227f      	movs	r2, #127	; 0x7f
 800121a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <MX_TIM1_Init+0x154>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001222:	4b40      	ldr	r3, [pc, #256]	; (8001324 <MX_TIM1_Init+0x154>)
 8001224:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001228:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <MX_TIM1_Init+0x154>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001230:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <MX_TIM1_Init+0x154>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <MX_TIM1_Init+0x154>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800123c:	4839      	ldr	r0, [pc, #228]	; (8001324 <MX_TIM1_Init+0x154>)
 800123e:	f00a fb1a 	bl	800b876 <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001248:	f000 fda0 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001256:	4619      	mov	r1, r3
 8001258:	4832      	ldr	r0, [pc, #200]	; (8001324 <MX_TIM1_Init+0x154>)
 800125a:	f00b f8c1 	bl	800c3e0 <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001264:	f000 fd92 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001268:	482e      	ldr	r0, [pc, #184]	; (8001324 <MX_TIM1_Init+0x154>)
 800126a:	f00a fd2d 	bl	800bcc8 <HAL_TIM_PWM_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001274:	f000 fd8a 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001284:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001288:	4619      	mov	r1, r3
 800128a:	4826      	ldr	r0, [pc, #152]	; (8001324 <MX_TIM1_Init+0x154>)
 800128c:	f00b fdfe 	bl	800ce8c <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001296:	f000 fd79 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129a:	2360      	movs	r3, #96	; 0x60
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800129e:	f240 13df 	movw	r3, #479	; 0x1df
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <MX_TIM1_Init+0x154>)
 80012c2:	f00a ff79 	bl	800c1b8 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012cc:	f000 fd5e 	bl	8001d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM1_Init+0x154>)
 8001306:	f00b fe4f 	bl	800cfa8 <HAL_TIMEx_ConfigBreakDeadTime>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001310:	f000 fd3c 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM1_Init+0x154>)
 8001316:	f001 f847 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3768      	adds	r7, #104	; 0x68
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	240003bc 	.word	0x240003bc
 8001328:	40010000 	.word	0x40010000

0800132c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <MX_TIM2_Init+0xe8>)
 8001360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <MX_TIM2_Init+0xe8>)
 8001368:	223f      	movs	r2, #63	; 0x3f
 800136a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <MX_TIM2_Init+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_TIM2_Init+0xe8>)
 8001374:	f640 4234 	movw	r2, #3124	; 0xc34
 8001378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_TIM2_Init+0xe8>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_TIM2_Init+0xe8>)
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001386:	4823      	ldr	r0, [pc, #140]	; (8001414 <MX_TIM2_Init+0xe8>)
 8001388:	f00a fa75 	bl	800b876 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 fcfb 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a0:	4619      	mov	r1, r3
 80013a2:	481c      	ldr	r0, [pc, #112]	; (8001414 <MX_TIM2_Init+0xe8>)
 80013a4:	f00b f81c 	bl	800c3e0 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013ae:	f000 fced 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_TIM2_Init+0xe8>)
 80013b4:	f00a fc88 	bl	800bcc8 <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013be:	f000 fce5 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013c2:	2320      	movs	r3, #32
 80013c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4810      	ldr	r0, [pc, #64]	; (8001414 <MX_TIM2_Init+0xe8>)
 80013d2:	f00b fd5b 	bl	800ce8c <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013dc:	f000 fcd6 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	; 0x60
 80013e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	220c      	movs	r2, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM2_Init+0xe8>)
 80013f8:	f00a fede 	bl	800c1b8 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001402:	f000 fcc3 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM2_Init+0xe8>)
 8001408:	f000 ffce 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3738      	adds	r7, #56	; 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24000408 	.word	0x24000408

08001418 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM3_Init+0x94>)
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <MX_TIM3_Init+0x98>)
 800143a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_TIM3_Init+0x94>)
 800143e:	223f      	movs	r2, #63	; 0x3f
 8001440:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM3_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM3_Init+0x94>)
 800144a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800144e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_TIM3_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM3_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <MX_TIM3_Init+0x94>)
 800145e:	f00a fa0a 	bl	800b876 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001468:	f000 fc90 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM3_Init+0x94>)
 800147a:	f00a ffb1 	bl	800c3e0 <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001484:	f000 fc82 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM3_Init+0x94>)
 8001496:	f00b fcf9 	bl	800ce8c <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f000 fc74 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	24000454 	.word	0x24000454
 80014b0:	40000400 	.word	0x40000400

080014b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <MX_USART1_UART_Init+0x94>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014c0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80014c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fc:	4811      	ldr	r0, [pc, #68]	; (8001544 <MX_USART1_UART_Init+0x90>)
 80014fe:	f00b fdef 	bl	800d0e0 <HAL_UART_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001508:	f000 fc40 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_USART1_UART_Init+0x90>)
 8001510:	f00e f949 	bl	800f7a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800151a:	f000 fc37 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4808      	ldr	r0, [pc, #32]	; (8001544 <MX_USART1_UART_Init+0x90>)
 8001522:	f00e f97e 	bl	800f822 <HAL_UARTEx_SetRxFifoThreshold>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800152c:	f000 fc2e 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_USART1_UART_Init+0x90>)
 8001532:	f00e f8ff 	bl	800f734 <HAL_UARTEx_DisableFifoMode>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800153c:	f000 fc26 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	240004a0 	.word	0x240004a0
 8001548:	40011000 	.word	0x40011000

0800154c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_DMA_Init+0x5c>)
 8001554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <MX_DMA_Init+0x5c>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_DMA_Init+0x5c>)
 8001564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2105      	movs	r1, #5
 8001574:	200b      	movs	r0, #11
 8001576:	f002 ffaf 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800157a:	200b      	movs	r0, #11
 800157c:	f002 ffc6 	bl	800450c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2105      	movs	r1, #5
 8001584:	200c      	movs	r0, #12
 8001586:	f002 ffa7 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800158a:	200c      	movs	r0, #12
 800158c:	f002 ffbe 	bl	800450c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2010      	movs	r0, #16
 8001596:	f002 ff9f 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800159a:	2010      	movs	r0, #16
 800159c:	f002 ffb6 	bl	800450c <HAL_NVIC_EnableIRQ>

}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <MX_GPIO_Init+0xc8>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c8:	4a2a      	ldr	r2, [pc, #168]	; (8001674 <MX_GPIO_Init+0xc8>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <MX_GPIO_Init+0xc8>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_GPIO_Init+0xc8>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	4a23      	ldr	r2, [pc, #140]	; (8001674 <MX_GPIO_Init+0xc8>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_GPIO_Init+0xc8>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_GPIO_Init+0xc8>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <MX_GPIO_Init+0xc8>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_GPIO_Init+0xc8>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <MX_GPIO_Init+0xcc>)
 8001624:	f006 f93a 	bl	800789c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2164      	movs	r1, #100	; 0x64
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_GPIO_Init+0xd0>)
 800162e:	f006 f935 	bl	800789c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001632:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001636:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <MX_GPIO_Init+0xcc>)
 800164c:	f005 ff76 	bl	800753c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_GPIO_Init+0xd0>)
 8001668:	f005 ff68 	bl	800753c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58024400 	.word	0x58024400
 8001678:	58020800 	.word	0x58020800
 800167c:	58020400 	.word	0x58020400

08001680 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001688:	f44f 729c 	mov.w	r2, #312	; 0x138
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800168e:	210c      	movs	r1, #12
 8001690:	4818      	ldr	r0, [pc, #96]	; (80016f4 <system_setup+0x74>)
 8001692:	f00a fb7b 	bl	800bd8c <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001696:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800169a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800169e:	4816      	ldr	r0, [pc, #88]	; (80016f8 <system_setup+0x78>)
 80016a0:	f002 fd20 	bl	80040e4 <HAL_ADCEx_Calibration_Start>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80016aa:	f000 fb6f 	bl	8001d8c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80016ae:	220b      	movs	r2, #11
 80016b0:	4912      	ldr	r1, [pc, #72]	; (80016fc <system_setup+0x7c>)
 80016b2:	4811      	ldr	r0, [pc, #68]	; (80016f8 <system_setup+0x78>)
 80016b4:	f001 fdf4 	bl	80032a0 <HAL_ADC_Start_DMA>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80016be:	f000 fb65 	bl	8001d8c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80016c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <system_setup+0x80>)
 80016cc:	f002 fd0a 	bl	80040e4 <HAL_ADCEx_Calibration_Start>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80016d6:	f000 fb59 	bl	8001d8c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80016da:	2204      	movs	r2, #4
 80016dc:	4909      	ldr	r1, [pc, #36]	; (8001704 <system_setup+0x84>)
 80016de:	4808      	ldr	r0, [pc, #32]	; (8001700 <system_setup+0x80>)
 80016e0:	f001 fdde 	bl	80032a0 <HAL_ADC_Start_DMA>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80016ea:	f000 fb4f 	bl	8001d8c <Error_Handler>
	  	}
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000408 	.word	0x24000408
 80016f8:	2400009c 	.word	0x2400009c
 80016fc:	240005c0 	.word	0x240005c0
 8001700:	24000100 	.word	0x24000100
 8001704:	240005e0 	.word	0x240005e0

08001708 <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4618      	mov	r0, r3
 800171a:	f011 fce1 	bl	80130e0 <malloc>
 800171e:	4603      	mov	r3, r0
 8001720:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	4618      	mov	r0, r3
 800172a:	f011 fce9 	bl	8013100 <memcpy>
    packet.size = size;
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	461a      	mov	r2, r3
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800173e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001752:	2006      	movs	r0, #6
 8001754:	f011 fcc4 	bl	80130e0 <malloc>
 8001758:	4603      	mov	r3, r0
 800175a:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800175c:	2002      	movs	r0, #2
 800175e:	f011 fcbf 	bl	80130e0 <malloc>
 8001762:	4603      	mov	r3, r0
 8001764:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	220e      	movs	r2, #14
 800176a:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3301      	adds	r3, #1
 8001770:	220d      	movs	r2, #13
 8001772:	701a      	strb	r2, [r3, #0]
#else
	receive_spi(hspi1, pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	22bb      	movs	r2, #187	; 0xbb
 8001778:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	22bb      	movs	r2, #187	; 0xbb
 8001780:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3302      	adds	r3, #2
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3303      	adds	r3, #3
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <sample_pmt+0x8c>)
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3304      	adds	r3, #4
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3305      	adds	r3, #5
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	7852      	ldrb	r2, [r2, #1]
 80017a6:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80017a8:	463b      	mov	r3, r7
 80017aa:	2206      	movs	r2, #6
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ffaa 	bl	8001708 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <sample_pmt+0x90>)
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	4639      	mov	r1, r7
 80017ba:	2300      	movs	r3, #0
 80017bc:	2200      	movs	r2, #0
 80017be:	f00e fb75 	bl	800feac <osMessageQueuePut>
	free(buffer);
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f011 fc94 	bl	80130f0 <free>
	free(pmt_spi);
 80017c8:	68b8      	ldr	r0, [r7, #8]
 80017ca:	f011 fc91 	bl	80130f0 <free>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2400054c 	.word	0x2400054c
 80017dc:	24000548 	.word	0x24000548

080017e0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80017e6:	200e      	movs	r0, #14
 80017e8:	f011 fc7a 	bl	80130e0 <malloc>
 80017ec:	4603      	mov	r3, r0
 80017ee:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80017f0:	2002      	movs	r0, #2
 80017f2:	f011 fc75 	bl	80130e0 <malloc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80017fa:	2004      	movs	r0, #4
 80017fc:	f011 fc70 	bl	80130e0 <malloc>
 8001800:	4603      	mov	r3, r0
 8001802:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	220e      	movs	r2, #14
 8001808:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3301      	adds	r3, #1
 800180e:	220d      	movs	r2, #13
 8001810:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	22ee      	movs	r2, #238	; 0xee
 8001816:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3302      	adds	r3, #2
 800181c:	22dd      	movs	r2, #221	; 0xdd
 800181e:	801a      	strh	r2, [r3, #0]
#else
	receive_spi(hspi2);
	reveice_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	22aa      	movs	r2, #170	; 0xaa
 8001824:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	22aa      	movs	r2, #170	; 0xaa
 800182c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3302      	adds	r3, #2
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3303      	adds	r3, #3
 800183a:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <sample_erpa+0x104>)
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3304      	adds	r3, #4
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3305      	adds	r3, #5
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3306      	adds	r3, #6
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3307      	adds	r3, #7
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3302      	adds	r3, #2
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b29a      	uxth	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3308      	adds	r3, #8
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3302      	adds	r3, #2
 8001882:	881a      	ldrh	r2, [r3, #0]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3309      	adds	r3, #9
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	330a      	adds	r3, #10
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	330b      	adds	r3, #11
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	330c      	adds	r3, #12
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	7812      	ldrb	r2, [r2, #0]
 80018a4:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	330d      	adds	r3, #13
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	7852      	ldrb	r2, [r2, #1]
 80018ae:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	220e      	movs	r2, #14
 80018b4:	6979      	ldr	r1, [r7, #20]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff26 	bl	8001708 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <sample_erpa+0x108>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	1d39      	adds	r1, r7, #4
 80018c2:	2300      	movs	r3, #0
 80018c4:	2200      	movs	r2, #0
 80018c6:	f00e faf1 	bl	800feac <osMessageQueuePut>
	free(buffer);
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f011 fc10 	bl	80130f0 <free>
	free(erpa_spi);
 80018d0:	6938      	ldr	r0, [r7, #16]
 80018d2:	f011 fc0d 	bl	80130f0 <free>
	free(erpa_adc);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f011 fc0a 	bl	80130f0 <free>
}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2400054d 	.word	0x2400054d
 80018e8:	24000548 	.word	0x24000548

080018ec <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80018f2:	2026      	movs	r0, #38	; 0x26
 80018f4:	f011 fbf4 	bl	80130e0 <malloc>
 80018f8:	4603      	mov	r3, r0
 80018fa:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80018fc:	2008      	movs	r0, #8
 80018fe:	f011 fbef 	bl	80130e0 <malloc>
 8001902:	4603      	mov	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001906:	2012      	movs	r0, #18
 8001908:	f011 fbea 	bl	80130e0 <malloc>
 800190c:	4603      	mov	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001910:	2008      	movs	r0, #8
 8001912:	f011 fbe5 	bl	80130e0 <malloc>
 8001916:	4603      	mov	r3, r0
 8001918:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2211      	movs	r2, #17
 800191e:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3302      	adds	r3, #2
 8001924:	2212      	movs	r2, #18
 8001926:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	3304      	adds	r3, #4
 800192c:	2213      	movs	r2, #19
 800192e:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3306      	adds	r3, #6
 8001934:	2214      	movs	r2, #20
 8001936:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	22a0      	movs	r2, #160	; 0xa0
 800193c:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3302      	adds	r3, #2
 8001942:	22a1      	movs	r2, #161	; 0xa1
 8001944:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3304      	adds	r3, #4
 800194a:	22a2      	movs	r2, #162	; 0xa2
 800194c:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3306      	adds	r3, #6
 8001952:	22a3      	movs	r2, #163	; 0xa3
 8001954:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3308      	adds	r3, #8
 800195a:	22a4      	movs	r2, #164	; 0xa4
 800195c:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	330a      	adds	r3, #10
 8001962:	22a5      	movs	r2, #165	; 0xa5
 8001964:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	330c      	adds	r3, #12
 800196a:	22a6      	movs	r2, #166	; 0xa6
 800196c:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	330e      	adds	r3, #14
 8001972:	22a7      	movs	r2, #167	; 0xa7
 8001974:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3310      	adds	r3, #16
 800197a:	22a8      	movs	r2, #168	; 0xa8
 800197c:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	22b0      	movs	r2, #176	; 0xb0
 8001982:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	3302      	adds	r3, #2
 8001988:	22b1      	movs	r2, #177	; 0xb1
 800198a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3304      	adds	r3, #4
 8001990:	22b2      	movs	r2, #178	; 0xb2
 8001992:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3306      	adds	r3, #6
 8001998:	22b3      	movs	r2, #179	; 0xb3
 800199a:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	22cc      	movs	r2, #204	; 0xcc
 80019a0:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	22cc      	movs	r2, #204	; 0xcc
 80019a8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3302      	adds	r3, #2
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3303      	adds	r3, #3
 80019b6:	4a97      	ldr	r2, [pc, #604]	; (8001c14 <sample_hk+0x328>)
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	3302      	adds	r3, #2
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3304      	adds	r3, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3302      	adds	r3, #2
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3305      	adds	r3, #5
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3306      	adds	r3, #6
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3307      	adds	r3, #7
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	121a      	asrs	r2, r3, #8
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3308      	adds	r3, #8
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3309      	adds	r3, #9
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	121a      	asrs	r2, r3, #8
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	330a      	adds	r3, #10
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	330b      	adds	r3, #11
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	121a      	asrs	r2, r3, #8
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	330c      	adds	r3, #12
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	330d      	adds	r3, #13
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3306      	adds	r3, #6
 8001a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a62:	121a      	asrs	r2, r3, #8
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	330e      	adds	r3, #14
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	3306      	adds	r3, #6
 8001a70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	330f      	adds	r3, #15
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3310      	adds	r3, #16
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3311      	adds	r3, #17
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3312      	adds	r3, #18
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3302      	adds	r3, #2
 8001aae:	881a      	ldrh	r2, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3313      	adds	r3, #19
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3304      	adds	r3, #4
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3314      	adds	r3, #20
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3304      	adds	r3, #4
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3315      	adds	r3, #21
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3306      	adds	r3, #6
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3316      	adds	r3, #22
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3306      	adds	r3, #6
 8001aee:	881a      	ldrh	r2, [r3, #0]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3317      	adds	r3, #23
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	330c      	adds	r3, #12
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3318      	adds	r3, #24
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3319      	adds	r3, #25
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	331a      	adds	r3, #26
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3306      	adds	r3, #6
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	331b      	adds	r3, #27
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	331c      	adds	r3, #28
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	881a      	ldrh	r2, [r3, #0]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	331d      	adds	r3, #29
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	330e      	adds	r3, #14
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	331e      	adds	r3, #30
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	330e      	adds	r3, #14
 8001b6e:	881a      	ldrh	r2, [r3, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	331f      	adds	r3, #31
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3310      	adds	r3, #16
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3320      	adds	r3, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	881a      	ldrh	r2, [r3, #0]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3321      	adds	r3, #33	; 0x21
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3322      	adds	r3, #34	; 0x22
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3308      	adds	r3, #8
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3323      	adds	r3, #35	; 0x23
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	330a      	adds	r3, #10
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3324      	adds	r3, #36	; 0x24
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	330a      	adds	r3, #10
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3325      	adds	r3, #37	; 0x25
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2226      	movs	r2, #38	; 0x26
 8001bdc:	6979      	ldr	r1, [r7, #20]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fd92 	bl	8001708 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <sample_hk+0x32c>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	4639      	mov	r1, r7
 8001bea:	2300      	movs	r3, #0
 8001bec:	2200      	movs	r2, #0
 8001bee:	f00e f95d 	bl	800feac <osMessageQueuePut>
	free(buffer);
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f011 fa7c 	bl	80130f0 <free>
	free(hk_i2c);
 8001bf8:	6938      	ldr	r0, [r7, #16]
 8001bfa:	f011 fa79 	bl	80130f0 <free>
	free(hk_adc1);
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f011 fa76 	bl	80130f0 <free>
	free(hk_adc3);
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f011 fa73 	bl	80130f0 <free>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2400054e 	.word	0x2400054e
 8001c18:	24000548 	.word	0x24000548

08001c1c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <PMT_init+0x38>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2101      	movs	r1, #1
 8001c30:	f00e f862 	bl	800fcf8 <osEventFlagsWait>
		if(PMT_ON){
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <PMT_init+0x3c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <PMT_init+0x30>
	    sample_pmt();
 8001c3c:	f7ff fd86 	bl	800174c <sample_pmt>
		pmt_seq++;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <PMT_init+0x40>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <PMT_init+0x40>)
 8001c4a:	701a      	strb	r2, [r3, #0]

		}
		osThreadYield();
 8001c4c:	f00d ff96 	bl	800fb7c <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001c50:	e7e8      	b.n	8001c24 <PMT_init+0x8>
 8001c52:	bf00      	nop
 8001c54:	24000554 	.word	0x24000554
 8001c58:	2400054f 	.word	0x2400054f
 8001c5c:	2400054c 	.word	0x2400054c

08001c60 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <ERPA_init+0x38>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c70:	2200      	movs	r2, #0
 8001c72:	2102      	movs	r1, #2
 8001c74:	f00e f840 	bl	800fcf8 <osEventFlagsWait>
	  if (ERPA_ON)
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <ERPA_init+0x3c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8001c80:	f7ff fdae 	bl	80017e0 <sample_erpa>
		erpa_seq++;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <ERPA_init+0x40>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <ERPA_init+0x40>)
 8001c8e:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8001c90:	f00d ff74 	bl	800fb7c <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001c94:	e7e8      	b.n	8001c68 <ERPA_init+0x8>
 8001c96:	bf00      	nop
 8001c98:	24000554 	.word	0x24000554
 8001c9c:	24000550 	.word	0x24000550
 8001ca0:	2400054d 	.word	0x2400054d

08001ca4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HK_init+0x38>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	f00e f81e 	bl	800fcf8 <osEventFlagsWait>
	  if(HK_ON)
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HK_init+0x3c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HK_init+0x30>
	  {
	    sample_hk();
 8001cc4:	f7ff fe12 	bl	80018ec <sample_hk>
		hk_seq++;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HK_init+0x40>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HK_init+0x40>)
 8001cd2:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8001cd4:	f00d ff52 	bl	800fb7c <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001cd8:	e7e8      	b.n	8001cac <HK_init+0x8>
 8001cda:	bf00      	nop
 8001cdc:	24000554 	.word	0x24000554
 8001ce0:	24000551 	.word	0x24000551
 8001ce4:	2400054e 	.word	0x2400054e

08001ce8 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4904      	ldr	r1, [pc, #16]	; (8001d04 <UART_RX_init+0x1c>)
 8001cf4:	4804      	ldr	r0, [pc, #16]	; (8001d08 <UART_RX_init+0x20>)
 8001cf6:	f00b fad1 	bl	800d29c <HAL_UART_Receive_IT>
		osDelay(5);
 8001cfa:	2005      	movs	r0, #5
 8001cfc:	f00d ff5e 	bl	800fbbc <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001d00:	e7f6      	b.n	8001cf0 <UART_RX_init+0x8>
 8001d02:	bf00      	nop
 8001d04:	24000558 	.word	0x24000558
 8001d08:	240004a0 	.word	0x240004a0

08001d0c <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <UART_TX_init+0x50>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	f107 010c 	add.w	r1, r7, #12
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d20:	2200      	movs	r2, #0
 8001d22:	f00e f923 	bl	800ff6c <osMessageQueueGet>
 8001d26:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d113      	bne.n	8001d56 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <UART_TX_init+0x50>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f00e f978 	bl	8010028 <osMessageQueueGetCount>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <UART_TX_init+0x54>)
 8001d3e:	f011 fad5 	bl	80132ec <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	8a3a      	ldrh	r2, [r7, #16]
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	4806      	ldr	r0, [pc, #24]	; (8001d64 <UART_TX_init+0x58>)
 8001d4a:	f00b fa19 	bl	800d180 <HAL_UART_Transmit>
	       free(msg.array);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f011 f9cd 	bl	80130f0 <free>
	   }
	   osThreadYield();
 8001d56:	f00d ff11 	bl	800fb7c <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001d5a:	e7db      	b.n	8001d14 <UART_TX_init+0x8>
 8001d5c:	24000548 	.word	0x24000548
 8001d60:	08014340 	.word	0x08014340
 8001d64:	240004a0 	.word	0x240004a0

08001d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d7a:	f000 fe9f 	bl	8002abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40001000 	.word	0x40001000

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d94:	e7fe      	b.n	8001d94 <Error_Handler+0x8>
	...

08001d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_MspInit+0x38>)
 8001da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_MspInit+0x38>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_MspInit+0x38>)
 8001db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f06f 0001 	mvn.w	r0, #1
 8001dc4:	f002 fb88 	bl	80044d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	58024400 	.word	0x58024400

08001dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a7b      	ldr	r2, [pc, #492]	; (8001fe0 <HAL_ADC_MspInit+0x20c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	f040 8091 	bne.w	8001f1a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001df8:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dfe:	4a79      	ldr	r2, [pc, #484]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e00:	f043 0320 	orr.w	r3, r3, #32
 8001e04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e08:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1c:	4a71      	ldr	r2, [pc, #452]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	4a6a      	ldr	r2, [pc, #424]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e44:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	4a62      	ldr	r2, [pc, #392]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e62:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e70:	2333      	movs	r3, #51	; 0x33
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	4859      	ldr	r0, [pc, #356]	; (8001fe8 <HAL_ADC_MspInit+0x214>)
 8001e84:	f005 fb5a 	bl	800753c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001e88:	23ce      	movs	r3, #206	; 0xce
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4854      	ldr	r0, [pc, #336]	; (8001fec <HAL_ADC_MspInit+0x218>)
 8001e9c:	f005 fb4e 	bl	800753c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	484f      	ldr	r0, [pc, #316]	; (8001ff0 <HAL_ADC_MspInit+0x21c>)
 8001eb4:	f005 fb42 	bl	800753c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001eba:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_ADC_MspInit+0x224>)
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ebe:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001ec0:	2209      	movs	r2, #9
 8001ec2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed8:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee0:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ee8:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001efc:	483d      	ldr	r0, [pc, #244]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001efe:	f002 fce1 	bl	80048c4 <HAL_DMA_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001f08:	f7ff ff40 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001f10:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f12:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <HAL_ADC_MspInit+0x220>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f18:	e05e      	b.n	8001fd8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <HAL_ADC_MspInit+0x228>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d159      	bne.n	8001fd8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2a:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f48:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_ADC_MspInit+0x210>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f60:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f64:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f68:	f000 fdd4 	bl	8002b14 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f70:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f74:	f000 fdce 	bl	8002b14 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_ADC_MspInit+0x230>)
 8001f7c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001f80:	2273      	movs	r2, #115	; 0x73
 8001f82:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f96:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fae:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fbc:	4810      	ldr	r0, [pc, #64]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001fbe:	f002 fc81 	bl	80048c4 <HAL_DMA_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001fc8:	f7ff fee0 	bl	8001d8c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001fd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <HAL_ADC_MspInit+0x22c>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fd8:	bf00      	nop
 8001fda:	3738      	adds	r7, #56	; 0x38
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58020800 	.word	0x58020800
 8001fec:	58020000 	.word	0x58020000
 8001ff0:	58020400 	.word	0x58020400
 8001ff4:	24000164 	.word	0x24000164
 8001ff8:	40020010 	.word	0x40020010
 8001ffc:	58026000 	.word	0x58026000
 8002000:	240001dc 	.word	0x240001dc
 8002004:	40020028 	.word	0x40020028

08002008 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_DAC_MspInit+0xf0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d161      	bne.n	80020ee <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800202a:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_DAC_MspInit+0xf4>)
 800202c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002030:	4a32      	ldr	r2, [pc, #200]	; (80020fc <HAL_DAC_MspInit+0xf4>)
 8002032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002036:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_DAC_MspInit+0xf4>)
 800203c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <HAL_DAC_MspInit+0xf4>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_DAC_MspInit+0xf4>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_DAC_MspInit+0xf4>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002066:	2310      	movs	r3, #16
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206a:	2303      	movs	r3, #3
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4821      	ldr	r0, [pc, #132]	; (8002100 <HAL_DAC_MspInit+0xf8>)
 800207a:	f005 fa5f 	bl	800753c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_DAC_MspInit+0x100>)
 8002082:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 8002086:	2243      	movs	r2, #67	; 0x43
 8002088:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 8002098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80020c2:	4810      	ldr	r0, [pc, #64]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020c4:	f002 fbfe 	bl	80048c4 <HAL_DMA_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80020ce:	f7ff fe5d 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_DAC_MspInit+0xfc>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2105      	movs	r1, #5
 80020e2:	2036      	movs	r0, #54	; 0x36
 80020e4:	f002 f9f8 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020e8:	2036      	movs	r0, #54	; 0x36
 80020ea:	f002 fa0f 	bl	800450c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40007400 	.word	0x40007400
 80020fc:	58024400 	.word	0x58024400
 8002100:	58020000 	.word	0x58020000
 8002104:	24000268 	.word	0x24000268
 8002108:	40020088 	.word	0x40020088

0800210c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0ba      	sub	sp, #232	; 0xe8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	22c0      	movs	r2, #192	; 0xc0
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f010 fff5 	bl	801311c <memset>
  if(hi2c->Instance==I2C1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_I2C_MspInit+0xc8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d146      	bne.n	80021ca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800213c:	f04f 0208 	mov.w	r2, #8
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4618      	mov	r0, r3
 8002154:	f006 fd52 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800215e:	f7ff fe15 	bl	8001d8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_I2C_MspInit+0xcc>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_I2C_MspInit+0xcc>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_I2C_MspInit+0xcc>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002180:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002188:	2312      	movs	r3, #18
 800218a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800219a:	2304      	movs	r3, #4
 800219c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021a4:	4619      	mov	r1, r3
 80021a6:	480d      	ldr	r0, [pc, #52]	; (80021dc <HAL_I2C_MspInit+0xd0>)
 80021a8:	f005 f9c8 	bl	800753c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_I2C_MspInit+0xcc>)
 80021ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_I2C_MspInit+0xcc>)
 80021b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_I2C_MspInit+0xcc>)
 80021be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	37e8      	adds	r7, #232	; 0xe8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40005400 	.word	0x40005400
 80021d8:	58024400 	.word	0x58024400
 80021dc:	58020400 	.word	0x58020400

080021e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0ba      	sub	sp, #232	; 0xe8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	22c0      	movs	r2, #192	; 0xc0
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f010 ff8b 	bl	801311c <memset>
  if(hspi->Instance==SPI2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <HAL_SPI_MspInit+0xc4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d145      	bne.n	800229c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800221c:	2300      	movs	r3, #0
 800221e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4618      	mov	r0, r3
 8002226:	f006 fce9 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002230:	f7ff fdac 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_SPI_MspInit+0xc8>)
 8002236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <HAL_SPI_MspInit+0xc8>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_SPI_MspInit+0xc8>)
 8002246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_SPI_MspInit+0xc8>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002258:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <HAL_SPI_MspInit+0xc8>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_SPI_MspInit+0xc8>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002270:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800228a:	2305      	movs	r3, #5
 800228c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002294:	4619      	mov	r1, r3
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <HAL_SPI_MspInit+0xcc>)
 8002298:	f005 f950 	bl	800753c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800229c:	bf00      	nop
 800229e:	37e8      	adds	r7, #232	; 0xe8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40003800 	.word	0x40003800
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58020400 	.word	0x58020400

080022b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a37      	ldr	r2, [pc, #220]	; (800239c <HAL_TIM_Base_MspInit+0xec>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12f      	bne.n	8002322 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 80022c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c8:	4a35      	ldr	r2, [pc, #212]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 80022d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2105      	movs	r1, #5
 80022e4:	2018      	movs	r0, #24
 80022e6:	f002 f8f7 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022ea:	2018      	movs	r0, #24
 80022ec:	f002 f90e 	bl	800450c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2105      	movs	r1, #5
 80022f4:	2019      	movs	r0, #25
 80022f6:	f002 f8ef 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022fa:	2019      	movs	r0, #25
 80022fc:	f002 f906 	bl	800450c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2105      	movs	r1, #5
 8002304:	201a      	movs	r0, #26
 8002306:	f002 f8e7 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800230a:	201a      	movs	r0, #26
 800230c:	f002 f8fe 	bl	800450c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2105      	movs	r1, #5
 8002314:	201b      	movs	r0, #27
 8002316:	f002 f8df 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800231a:	201b      	movs	r0, #27
 800231c:	f002 f8f6 	bl	800450c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002320:	e038      	b.n	8002394 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d117      	bne.n	800235c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232c:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 800232e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002332:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 800233e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2105      	movs	r1, #5
 800234e:	201c      	movs	r0, #28
 8002350:	f002 f8c2 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002354:	201c      	movs	r0, #28
 8002356:	f002 f8d9 	bl	800450c <HAL_NVIC_EnableIRQ>
}
 800235a:	e01b      	b.n	8002394 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_TIM_Base_MspInit+0xf4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d116      	bne.n	8002394 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 8002368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236c:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 8002378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2105      	movs	r1, #5
 8002388:	201d      	movs	r0, #29
 800238a:	f002 f8a5 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800238e:	201d      	movs	r0, #29
 8002390:	f002 f8bc 	bl	800450c <HAL_NVIC_EnableIRQ>
}
 8002394:	bf00      	nop
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010000 	.word	0x40010000
 80023a0:	58024400 	.word	0x58024400
 80023a4:	40000400 	.word	0x40000400

080023a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <HAL_TIM_MspPostInit+0xb8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d120      	bne.n	800240c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_TIM_MspPostInit+0xbc>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d0:	4a24      	ldr	r2, [pc, #144]	; (8002464 <HAL_TIM_MspPostInit+0xbc>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_TIM_MspPostInit+0xbc>)
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4818      	ldr	r0, [pc, #96]	; (8002468 <HAL_TIM_MspPostInit+0xc0>)
 8002406:	f005 f899 	bl	800753c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800240a:	e024      	b.n	8002456 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d11f      	bne.n	8002456 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_TIM_MspPostInit+0xbc>)
 8002418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_TIM_MspPostInit+0xbc>)
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_TIM_MspPostInit+0xbc>)
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002446:	2301      	movs	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	4806      	ldr	r0, [pc, #24]	; (800246c <HAL_TIM_MspPostInit+0xc4>)
 8002452:	f005 f873 	bl	800753c <HAL_GPIO_Init>
}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	; 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40010000 	.word	0x40010000
 8002464:	58024400 	.word	0x58024400
 8002468:	58020000 	.word	0x58020000
 800246c:	58020400 	.word	0x58020400

08002470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0ba      	sub	sp, #232	; 0xe8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	22c0      	movs	r2, #192	; 0xc0
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f010 fe43 	bl	801311c <memset>
  if(huart->Instance==USART1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2b      	ldr	r2, [pc, #172]	; (8002548 <HAL_UART_MspInit+0xd8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d14e      	bne.n	800253e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024a0:	f04f 0201 	mov.w	r2, #1
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	4618      	mov	r0, r3
 80024b8:	f006 fba0 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024c2:	f7ff fc63 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_UART_MspInit+0xdc>)
 80024c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_UART_MspInit+0xdc>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_UART_MspInit+0xdc>)
 80024d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_UART_MspInit+0xdc>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ea:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_UART_MspInit+0xdc>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_UART_MspInit+0xdc>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002502:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251c:	2307      	movs	r3, #7
 800251e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002526:	4619      	mov	r1, r3
 8002528:	4809      	ldr	r0, [pc, #36]	; (8002550 <HAL_UART_MspInit+0xe0>)
 800252a:	f005 f807 	bl	800753c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2105      	movs	r1, #5
 8002532:	2025      	movs	r0, #37	; 0x25
 8002534:	f001 ffd0 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002538:	2025      	movs	r0, #37	; 0x25
 800253a:	f001 ffe7 	bl	800450c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	37e8      	adds	r7, #232	; 0xe8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40011000 	.word	0x40011000
 800254c:	58024400 	.word	0x58024400
 8002550:	58020000 	.word	0x58020000

08002554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	d827      	bhi.n	80025b2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002562:	2200      	movs	r2, #0
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	2036      	movs	r0, #54	; 0x36
 8002568:	f001 ffb6 	bl	80044d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800256c:	2036      	movs	r0, #54	; 0x36
 800256e:	f001 ffcd 	bl	800450c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002572:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_InitTick+0xc4>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_InitTick+0xc8>)
 800257a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <HAL_InitTick+0xc8>)
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_InitTick+0xc8>)
 800258a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002596:	f107 0210 	add.w	r2, r7, #16
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f006 fae9 	bl	8008b78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <HAL_InitTick+0x6a>
 80025b0:	e001      	b.n	80025b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e02b      	b.n	800260e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025b6:	f006 fab3 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 80025ba:	63f8      	str	r0, [r7, #60]	; 0x3c
 80025bc:	e004      	b.n	80025c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025be:	f006 faaf 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 80025c2:	4603      	mov	r3, r0
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_InitTick+0xcc>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	3b01      	subs	r3, #1
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_InitTick+0xd0>)
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_InitTick+0xd4>)
 80025da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_InitTick+0xd0>)
 80025de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_InitTick+0xd0>)
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_InitTick+0xd0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_InitTick+0xd0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80025f6:	480b      	ldr	r0, [pc, #44]	; (8002624 <HAL_InitTick+0xd0>)
 80025f8:	f009 f93d 	bl	800b876 <HAL_TIM_Base_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002602:	4808      	ldr	r0, [pc, #32]	; (8002624 <HAL_InitTick+0xd0>)
 8002604:	f009 f98e 	bl	800b924 <HAL_TIM_Base_Start_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	e000      	b.n	800260e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	3740      	adds	r7, #64	; 0x40
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	24000008 	.word	0x24000008
 800261c:	58024400 	.word	0x58024400
 8002620:	431bde83 	.word	0x431bde83
 8002624:	240005e8 	.word	0x240005e8
 8002628:	40001000 	.word	0x40001000

0800262c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002630:	e7fe      	b.n	8002630 <NMI_Handler+0x4>

08002632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <HardFault_Handler+0x4>

08002638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <MemManage_Handler+0x4>

0800263e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <BusFault_Handler+0x4>

08002644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <UsageFault_Handler+0x4>

0800264a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <DMA1_Stream0_IRQHandler+0x10>)
 800265e:	f003 fc5b 	bl	8005f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	24000164 	.word	0x24000164

0800266c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <DMA1_Stream1_IRQHandler+0x10>)
 8002672:	f003 fc51 	bl	8005f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	240001dc 	.word	0x240001dc

08002680 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <DMA1_Stream5_IRQHandler+0x10>)
 8002686:	f003 fc47 	bl	8005f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	24000268 	.word	0x24000268

08002694 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <TIM1_BRK_IRQHandler+0x10>)
 800269a:	f009 fc85 	bl	800bfa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	240003bc 	.word	0x240003bc

080026a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <TIM1_UP_IRQHandler+0x10>)
 80026ae:	f009 fc7b 	bl	800bfa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	240003bc 	.word	0x240003bc

080026bc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <TIM1_TRG_COM_IRQHandler+0x10>)
 80026c2:	f009 fc71 	bl	800bfa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	240003bc 	.word	0x240003bc

080026d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <TIM1_CC_IRQHandler+0x10>)
 80026d6:	f009 fc67 	bl	800bfa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	240003bc 	.word	0x240003bc

080026e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <TIM2_IRQHandler+0x10>)
 80026ea:	f009 fc5d 	bl	800bfa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	24000408 	.word	0x24000408

080026f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <TIM3_IRQHandler+0x10>)
 80026fe:	f009 fc53 	bl	800bfa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	24000454 	.word	0x24000454

0800270c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <USART1_IRQHandler+0x10>)
 8002712:	f00a fe0f 	bl	800d334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	240004a0 	.word	0x240004a0

08002720 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <TIM6_DAC_IRQHandler+0x20>)
 8002726:	791b      	ldrb	r3, [r3, #4]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800272e:	4804      	ldr	r0, [pc, #16]	; (8002740 <TIM6_DAC_IRQHandler+0x20>)
 8002730:	f001 ff1c 	bl	800456c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002734:	4803      	ldr	r0, [pc, #12]	; (8002744 <TIM6_DAC_IRQHandler+0x24>)
 8002736:	f009 fc37 	bl	800bfa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	24000254 	.word	0x24000254
 8002744:	240005e8 	.word	0x240005e8

08002748 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <ITM_SendChar+0x48>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <ITM_SendChar+0x48>)
 8002758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <ITM_SendChar+0x4c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <ITM_SendChar+0x4c>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800276a:	bf00      	nop
 800276c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f8      	beq.n	800276c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800277a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000edfc 	.word	0xe000edfc
 8002794:	e0000e00 	.word	0xe0000e00

08002798 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e00a      	b.n	80027c0 <_read+0x28>
		*ptr++ = __io_getchar();
 80027aa:	f3af 8000 	nop.w
 80027ae:	4601      	mov	r1, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbf0      	blt.n	80027aa <_read+0x12>
	}

	return len;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e009      	b.n	80027f8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ffab 	bl	8002748 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dbf1      	blt.n	80027e4 <_write+0x12>
	}
	return len;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_close>:

int _close(int file) {
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002832:	605a      	str	r2, [r3, #4]
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <_isatty>:

int _isatty(int file) {
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <_sbrk+0x64>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <_sbrk+0x68>)
 8002894:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <_sbrk+0x40>
		errno = ENOMEM;
 80028a4:	f010 fbf2 	bl	801308c <__errno>
 80028a8:	4603      	mov	r3, r0
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b2:	e009      	b.n	80028c8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <_sbrk+0x64>)
 80028c4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	24080000 	.word	0x24080000
 80028d4:	00000400 	.word	0x00000400
 80028d8:	24000634 	.word	0x24000634
 80028dc:	24004fa0 	.word	0x24004fa0

080028e0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80028e4:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <SystemInit+0xe4>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	4a36      	ldr	r2, [pc, #216]	; (80029c4 <SystemInit+0xe4>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80028f4:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <SystemInit+0xe8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d807      	bhi.n	8002910 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <SystemInit+0xe8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 030f 	bic.w	r3, r3, #15
 8002908:	4a2f      	ldr	r2, [pc, #188]	; (80029c8 <SystemInit+0xe8>)
 800290a:	f043 0307 	orr.w	r3, r3, #7
 800290e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002910:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <SystemInit+0xec>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <SystemInit+0xec>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <SystemInit+0xec>)
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <SystemInit+0xec>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4929      	ldr	r1, [pc, #164]	; (80029cc <SystemInit+0xec>)
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <SystemInit+0xf0>)
 800292a:	4013      	ands	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <SystemInit+0xe8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <SystemInit+0xe8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 030f 	bic.w	r3, r3, #15
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <SystemInit+0xe8>)
 8002944:	f043 0307 	orr.w	r3, r3, #7
 8002948:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <SystemInit+0xec>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <SystemInit+0xec>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <SystemInit+0xec>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <SystemInit+0xec>)
 800295e:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <SystemInit+0xf4>)
 8002960:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <SystemInit+0xec>)
 8002964:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <SystemInit+0xf8>)
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <SystemInit+0xec>)
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <SystemInit+0xfc>)
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <SystemInit+0xec>)
 8002970:	2200      	movs	r2, #0
 8002972:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <SystemInit+0xec>)
 8002976:	4a19      	ldr	r2, [pc, #100]	; (80029dc <SystemInit+0xfc>)
 8002978:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <SystemInit+0xec>)
 800297c:	2200      	movs	r2, #0
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <SystemInit+0xec>)
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <SystemInit+0xfc>)
 8002984:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <SystemInit+0xec>)
 8002988:	2200      	movs	r2, #0
 800298a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <SystemInit+0xec>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <SystemInit+0xec>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002996:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <SystemInit+0xec>)
 800299a:	2200      	movs	r2, #0
 800299c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <SystemInit+0x100>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <SystemInit+0x104>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029aa:	d202      	bcs.n	80029b2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <SystemInit+0x108>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <SystemInit+0x10c>)
 80029b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80029b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	52002000 	.word	0x52002000
 80029cc:	58024400 	.word	0x58024400
 80029d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80029d4:	02020200 	.word	0x02020200
 80029d8:	01ff0000 	.word	0x01ff0000
 80029dc:	01010280 	.word	0x01010280
 80029e0:	5c001000 	.word	0x5c001000
 80029e4:	ffff0000 	.word	0xffff0000
 80029e8:	51008108 	.word	0x51008108
 80029ec:	52004000 	.word	0x52004000

080029f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029f4:	f7ff ff74 	bl	80028e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029f8:	480c      	ldr	r0, [pc, #48]	; (8002a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029fa:	490d      	ldr	r1, [pc, #52]	; (8002a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a00:	e002      	b.n	8002a08 <LoopCopyDataInit>

08002a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a06:	3304      	adds	r3, #4

08002a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a0c:	d3f9      	bcc.n	8002a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a10:	4c0a      	ldr	r4, [pc, #40]	; (8002a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a14:	e001      	b.n	8002a1a <LoopFillZerobss>

08002a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a18:	3204      	adds	r2, #4

08002a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a1c:	d3fb      	bcc.n	8002a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a1e:	f010 fb3b 	bl	8013098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a22:	f7fe f811 	bl	8000a48 <main>
  bx  lr
 8002a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a30:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002a34:	0801450c 	.word	0x0801450c
  ldr r2, =_sbss
 8002a38:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002a3c:	24004f9c 	.word	0x24004f9c

08002a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a40:	e7fe      	b.n	8002a40 <ADC3_IRQHandler>
	...

08002a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	f001 fd39 	bl	80044c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a50:	f005 febc 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_Init+0x68>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	4913      	ldr	r1, [pc, #76]	; (8002ab0 <HAL_Init+0x6c>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_Init+0x68>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <HAL_Init+0x6c>)
 8002a78:	5cd3      	ldrb	r3, [r2, r3]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
 8002a84:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <HAL_Init+0x70>)
 8002a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <HAL_Init+0x74>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a8e:	2005      	movs	r0, #5
 8002a90:	f7ff fd60 	bl	8002554 <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e002      	b.n	8002aa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a9e:	f7ff f97b 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	08014424 	.word	0x08014424
 8002ab4:	24000004 	.word	0x24000004
 8002ab8:	24000000 	.word	0x24000000

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2400000c 	.word	0x2400000c
 8002ae0:	24000638 	.word	0x24000638

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	24000638 	.word	0x24000638

08002afc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_GetREVID+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0c1b      	lsrs	r3, r3, #16
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	5c001000 	.word	0x5c001000

08002b14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	401a      	ands	r2, r3
 8002b28:	4904      	ldr	r1, [pc, #16]	; (8002b3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	58000400 	.word	0x58000400

08002b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3360      	adds	r3, #96	; 0x60
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	611a      	str	r2, [r3, #16]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3360      	adds	r3, #96	; 0x60
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]
  }
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3330      	adds	r3, #48	; 0x30
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	211f      	movs	r1, #31
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	f003 011f 	and.w	r1, r3, #31
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f023 0203 	bic.w	r2, r3, #3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3314      	adds	r3, #20
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0e5b      	lsrs	r3, r3, #25
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	4413      	add	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	0d1b      	lsrs	r3, r3, #20
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2107      	movs	r1, #7
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	0d1b      	lsrs	r3, r3, #20
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0318 	and.w	r3, r3, #24
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d70:	40d9      	lsrs	r1, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	400b      	ands	r3, r1
 8002d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	000fffff 	.word	0x000fffff

08002d94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 031f 	and.w	r3, r3, #31
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6093      	str	r3, [r2, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	5fffffc0 	.word	0x5fffffc0

08002dd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de8:	d101      	bne.n	8002dee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	6fffffc0 	.word	0x6fffffc0

08002e24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e38:	d101      	bne.n	8002e3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <LL_ADC_Enable+0x24>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	7fffffc0 	.word	0x7fffffc0

08002e74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <LL_ADC_Disable+0x24>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	f043 0202 	orr.w	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	7fffffc0 	.word	0x7fffffc0

08002e9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <LL_ADC_IsEnabled+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_ADC_IsEnabled+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d101      	bne.n	8002eda <LL_ADC_IsDisableOngoing+0x18>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_ADC_IsDisableOngoing+0x1a>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <LL_ADC_REG_StartConversion+0x24>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	f043 0204 	orr.w	r2, r3, #4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	7fffffc0 	.word	0x7fffffc0

08002f10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d101      	bne.n	8002f4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e18f      	b.n	8003296 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fe ff25 	bl	8001dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff19 	bl	8002dd4 <LL_ADC_IsDeepPowerDownEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff feff 	bl	8002db0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff34 	bl	8002e24 <LL_ADC_IsInternalRegulatorEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d114      	bne.n	8002fec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff18 	bl	8002dfc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fcc:	4b87      	ldr	r3, [pc, #540]	; (80031ec <HAL_ADC_Init+0x290>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	4a87      	ldr	r2, [pc, #540]	; (80031f0 <HAL_ADC_Init+0x294>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fde:	e002      	b.n	8002fe6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f9      	bne.n	8002fe0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff17 	bl	8002e24 <LL_ADC_IsInternalRegulatorEnabled>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10d      	bne.n	8003018 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0210 	orr.w	r2, r3, #16
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff77 	bl	8002f10 <LL_ADC_REG_IsConversionOngoing>
 8003022:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 8129 	bne.w	8003284 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f040 8125 	bne.w	8003284 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff24 	bl	8002e9c <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d136      	bne.n	80030c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <HAL_ADC_Init+0x298>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_ADC_Init+0x112>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a63      	ldr	r2, [pc, #396]	; (80031f8 <HAL_ADC_Init+0x29c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10e      	bne.n	800308c <HAL_ADC_Init+0x130>
 800306e:	4861      	ldr	r0, [pc, #388]	; (80031f4 <HAL_ADC_Init+0x298>)
 8003070:	f7ff ff14 	bl	8002e9c <LL_ADC_IsEnabled>
 8003074:	4604      	mov	r4, r0
 8003076:	4860      	ldr	r0, [pc, #384]	; (80031f8 <HAL_ADC_Init+0x29c>)
 8003078:	f7ff ff10 	bl	8002e9c <LL_ADC_IsEnabled>
 800307c:	4603      	mov	r3, r0
 800307e:	4323      	orrs	r3, r4
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e008      	b.n	800309e <HAL_ADC_Init+0x142>
 800308c:	485b      	ldr	r0, [pc, #364]	; (80031fc <HAL_ADC_Init+0x2a0>)
 800308e:	f7ff ff05 	bl	8002e9c <LL_ADC_IsEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a53      	ldr	r2, [pc, #332]	; (80031f4 <HAL_ADC_Init+0x298>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <HAL_ADC_Init+0x15a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a51      	ldr	r2, [pc, #324]	; (80031f8 <HAL_ADC_Init+0x29c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Init+0x15e>
 80030b6:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_ADC_Init+0x2a4>)
 80030b8:	e000      	b.n	80030bc <HAL_ADC_Init+0x160>
 80030ba:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_ADC_Init+0x2a8>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f7ff fd3c 	bl	8002b40 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030c8:	f7ff fd18 	bl	8002afc <HAL_GetREVID>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d914      	bls.n	8003100 <HAL_ADC_Init+0x1a4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d110      	bne.n	8003100 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7d5b      	ldrb	r3, [r3, #21]
 80030e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7f1b      	ldrb	r3, [r3, #28]
 80030f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f8:	f043 030c 	orr.w	r3, r3, #12
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e00d      	b.n	800311c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7d5b      	ldrb	r3, [r3, #21]
 8003104:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800310a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003110:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7f1b      	ldrb	r3, [r3, #28]
 8003116:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7f1b      	ldrb	r3, [r3, #28]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d106      	bne.n	8003132 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	3b01      	subs	r3, #1
 800312a:	045b      	lsls	r3, r3, #17
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_ADC_Init+0x2ac>)
 8003156:	4013      	ands	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	69b9      	ldr	r1, [r7, #24]
 800315e:	430b      	orrs	r3, r1
 8003160:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fed2 	bl	8002f10 <LL_ADC_REG_IsConversionOngoing>
 800316c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fedf 	bl	8002f36 <LL_ADC_INJ_IsConversionOngoing>
 8003178:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d15f      	bne.n	8003240 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d15c      	bne.n	8003240 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7d1b      	ldrb	r3, [r3, #20]
 800318a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <HAL_ADC_Init+0x2b0>)
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	69b9      	ldr	r1, [r7, #24]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d130      	bne.n	8003214 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_ADC_Init+0x2b4>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031c6:	3a01      	subs	r2, #1
 80031c8:	0411      	lsls	r1, r2, #16
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031da:	430a      	orrs	r2, r1
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	e01c      	b.n	8003224 <HAL_ADC_Init+0x2c8>
 80031ea:	bf00      	nop
 80031ec:	24000000 	.word	0x24000000
 80031f0:	053e2d63 	.word	0x053e2d63
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40022100 	.word	0x40022100
 80031fc:	58026000 	.word	0x58026000
 8003200:	40022300 	.word	0x40022300
 8003204:	58026300 	.word	0x58026300
 8003208:	fff0c003 	.word	0xfff0c003
 800320c:	ffffbffc 	.word	0xffffbffc
 8003210:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fdec 	bl	8003e18 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10c      	bne.n	8003262 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f023 010f 	bic.w	r1, r3, #15
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	1e5a      	subs	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
 8003260:	e007      	b.n	8003272 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 020f 	bic.w	r2, r2, #15
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
 8003282:	e007      	b.n	8003294 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0210 	orr.w	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003294:	7ffb      	ldrb	r3, [r7, #31]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop

080032a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a55      	ldr	r2, [pc, #340]	; (8003408 <HAL_ADC_Start_DMA+0x168>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_ADC_Start_DMA+0x20>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a54      	ldr	r2, [pc, #336]	; (800340c <HAL_ADC_Start_DMA+0x16c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_Start_DMA+0x24>
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_ADC_Start_DMA+0x170>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADC_Start_DMA+0x26>
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_ADC_Start_DMA+0x174>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fd64 	bl	8002d94 <LL_ADC_GetMultimode>
 80032cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fe1c 	bl	8002f10 <LL_ADC_REG_IsConversionOngoing>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 808c 	bne.w	80033f8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Start_DMA+0x4e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e087      	b.n	80033fe <HAL_ADC_Start_DMA+0x15e>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d002      	beq.n	8003308 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b09      	cmp	r3, #9
 8003306:	d170      	bne.n	80033ea <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fc07 	bl	8003b1c <ADC_Enable>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d163      	bne.n	80033e0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <HAL_ADC_Start_DMA+0x178>)
 800331e:	4013      	ands	r3, r2
 8003320:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a37      	ldr	r2, [pc, #220]	; (800340c <HAL_ADC_Start_DMA+0x16c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d002      	beq.n	8003338 <HAL_ADC_Start_DMA+0x98>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	e000      	b.n	800333a <HAL_ADC_Start_DMA+0x9a>
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_ADC_Start_DMA+0x168>)
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	4293      	cmp	r3, r2
 8003340:	d002      	beq.n	8003348 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f023 0206 	bic.w	r2, r3, #6
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	659a      	str	r2, [r3, #88]	; 0x58
 800336c:	e002      	b.n	8003374 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	4a28      	ldr	r2, [pc, #160]	; (800341c <HAL_ADC_Start_DMA+0x17c>)
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <HAL_ADC_Start_DMA+0x180>)
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	4a26      	ldr	r2, [pc, #152]	; (8003424 <HAL_ADC_Start_DMA+0x184>)
 800338a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	221c      	movs	r2, #28
 8003392:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0210 	orr.w	r2, r2, #16
 80033aa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f7ff fc89 	bl	8002cce <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3340      	adds	r3, #64	; 0x40
 80033c6:	4619      	mov	r1, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f001 fdd6 	bl	8004f7c <HAL_DMA_Start_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fd85 	bl	8002ee8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033de:	e00d      	b.n	80033fc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80033e8:	e008      	b.n	80033fc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033f6:	e001      	b.n	80033fc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
 80033fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40022000 	.word	0x40022000
 800340c:	40022100 	.word	0x40022100
 8003410:	40022300 	.word	0x40022300
 8003414:	58026300 	.word	0x58026300
 8003418:	fffff0fe 	.word	0xfffff0fe
 800341c:	08003cef 	.word	0x08003cef
 8003420:	08003dc7 	.word	0x08003dc7
 8003424:	08003de3 	.word	0x08003de3

08003428 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b0a1      	sub	sp, #132	; 0x84
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a65      	ldr	r2, [pc, #404]	; (8003614 <HAL_ADC_ConfigChannel+0x1b0>)
 800347e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_ADC_ConfigChannel+0x2a>
 800348a:	2302      	movs	r3, #2
 800348c:	e32e      	b.n	8003aec <HAL_ADC_ConfigChannel+0x688>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fd38 	bl	8002f10 <LL_ADC_REG_IsConversionOngoing>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8313 	bne.w	8003ace <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db2c      	blt.n	800350a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x6a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	2201      	movs	r2, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	e016      	b.n	80034fc <HAL_ADC_ConfigChannel+0x98>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80034e6:	2320      	movs	r3, #32
 80034e8:	e003      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80034ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2201      	movs	r2, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	69d1      	ldr	r1, [r2, #28]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	430b      	orrs	r3, r1
 8003508:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	f7ff fbad 	bl	8002c76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fcf5 	bl	8002f10 <LL_ADC_REG_IsConversionOngoing>
 8003526:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fd02 	bl	8002f36 <LL_ADC_INJ_IsConversionOngoing>
 8003532:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 80b8 	bne.w	80036ac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 80b4 	bne.w	80036ac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	461a      	mov	r2, r3
 8003552:	f7ff fbcf 	bl	8002cf4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003556:	4b30      	ldr	r3, [pc, #192]	; (8003618 <HAL_ADC_ConfigChannel+0x1b4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800355e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003562:	d10b      	bne.n	800357c <HAL_ADC_ConfigChannel+0x118>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	e01d      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x154>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x13e>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	e00a      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x154>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d02c      	beq.n	800361c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6919      	ldr	r1, [r3, #16]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d0:	f7ff faea 	bl	8002ba8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6919      	ldr	r1, [r3, #16]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	7e5b      	ldrb	r3, [r3, #25]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d102      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x186>
 80035e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035e8:	e000      	b.n	80035ec <HAL_ADC_ConfigChannel+0x188>
 80035ea:	2300      	movs	r3, #0
 80035ec:	461a      	mov	r2, r3
 80035ee:	f7ff fb14 	bl	8002c1a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	7e1b      	ldrb	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1a4>
 8003602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003606:	e000      	b.n	800360a <HAL_ADC_ConfigChannel+0x1a6>
 8003608:	2300      	movs	r3, #0
 800360a:	461a      	mov	r2, r3
 800360c:	f7ff faec 	bl	8002be8 <LL_ADC_SetDataRightShift>
 8003610:	e04c      	b.n	80036ac <HAL_ADC_ConfigChannel+0x248>
 8003612:	bf00      	nop
 8003614:	47ff0000 	.word	0x47ff0000
 8003618:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	069b      	lsls	r3, r3, #26
 800362c:	429a      	cmp	r2, r3
 800362e:	d107      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800363e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	069b      	lsls	r3, r3, #26
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003662:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800366a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	429a      	cmp	r2, r3
 8003676:	d107      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003686:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	069b      	lsls	r3, r3, #26
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fbf3 	bl	8002e9c <LL_ADC_IsEnabled>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 8211 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f7ff fb3e 	bl	8002d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4aa1      	ldr	r2, [pc, #644]	; (800395c <HAL_ADC_ConfigChannel+0x4f8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f040 812e 	bne.w	8003938 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x2a0>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	3301      	adds	r3, #1
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e019      	b.n	8003738 <HAL_ADC_ConfigChannel+0x2d4>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800371c:	2320      	movs	r3, #32
 800371e:	e003      	b.n	8003728 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2b09      	cmp	r3, #9
 8003730:	bf94      	ite	ls
 8003732:	2301      	movls	r3, #1
 8003734:	2300      	movhi	r3, #0
 8003736:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003738:	2b00      	cmp	r3, #0
 800373a:	d079      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x2f4>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	3301      	adds	r3, #1
 8003750:	069b      	lsls	r3, r3, #26
 8003752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003756:	e015      	b.n	8003784 <HAL_ADC_ConfigChannel+0x320>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003768:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e003      	b.n	800377c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	069b      	lsls	r3, r3, #26
 8003780:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x340>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	3301      	adds	r3, #1
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	e017      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x370>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80037b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	ea42 0103 	orr.w	r1, r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x396>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0e9b      	lsrs	r3, r3, #26
 80037ea:	3301      	adds	r3, #1
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	051b      	lsls	r3, r3, #20
 80037f8:	e018      	b.n	800382c <HAL_ADC_ConfigChannel+0x3c8>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003812:	2320      	movs	r3, #32
 8003814:	e003      	b.n	800381e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382c:	430b      	orrs	r3, r1
 800382e:	e07e      	b.n	800392e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003838:	2b00      	cmp	r3, #0
 800383a:	d107      	bne.n	800384c <HAL_ADC_ConfigChannel+0x3e8>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	3301      	adds	r3, #1
 8003844:	069b      	lsls	r3, r3, #26
 8003846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800384a:	e015      	b.n	8003878 <HAL_ADC_ConfigChannel+0x414>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003864:	2320      	movs	r3, #32
 8003866:	e003      	b.n	8003870 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	3301      	adds	r3, #1
 8003872:	069b      	lsls	r3, r3, #26
 8003874:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x434>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	3301      	adds	r3, #1
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	e017      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x464>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	61bb      	str	r3, [r7, #24]
  return result;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e003      	b.n	80038bc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	ea42 0103 	orr.w	r1, r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x490>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0e9b      	lsrs	r3, r3, #26
 80038de:	3301      	adds	r3, #1
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	3b1e      	subs	r3, #30
 80038ec:	051b      	lsls	r3, r3, #20
 80038ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038f2:	e01b      	b.n	800392c <HAL_ADC_ConfigChannel+0x4c8>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	60fb      	str	r3, [r7, #12]
  return result;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e003      	b.n	8003918 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f003 021f 	and.w	r2, r3, #31
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	3b1e      	subs	r3, #30
 8003926:	051b      	lsls	r3, r3, #20
 8003928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800392c:	430b      	orrs	r3, r1
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	6892      	ldr	r2, [r2, #8]
 8003932:	4619      	mov	r1, r3
 8003934:	f7ff f9de 	bl	8002cf4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f280 80cf 	bge.w	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a06      	ldr	r2, [pc, #24]	; (8003960 <HAL_ADC_ConfigChannel+0x4fc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x4f2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_ADC_ConfigChannel+0x500>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10a      	bne.n	800396c <HAL_ADC_ConfigChannel+0x508>
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <HAL_ADC_ConfigChannel+0x504>)
 8003958:	e009      	b.n	800396e <HAL_ADC_ConfigChannel+0x50a>
 800395a:	bf00      	nop
 800395c:	47ff0000 	.word	0x47ff0000
 8003960:	40022000 	.word	0x40022000
 8003964:	40022100 	.word	0x40022100
 8003968:	40022300 	.word	0x40022300
 800396c:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <HAL_ADC_ConfigChannel+0x690>)
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f90c 	bl	8002b8c <LL_ADC_GetCommonPathInternalCh>
 8003974:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a5f      	ldr	r2, [pc, #380]	; (8003af8 <HAL_ADC_ConfigChannel+0x694>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_ADC_ConfigChannel+0x526>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a5d      	ldr	r2, [pc, #372]	; (8003afc <HAL_ADC_ConfigChannel+0x698>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10e      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x544>
 800398a:	485b      	ldr	r0, [pc, #364]	; (8003af8 <HAL_ADC_ConfigChannel+0x694>)
 800398c:	f7ff fa86 	bl	8002e9c <LL_ADC_IsEnabled>
 8003990:	4604      	mov	r4, r0
 8003992:	485a      	ldr	r0, [pc, #360]	; (8003afc <HAL_ADC_ConfigChannel+0x698>)
 8003994:	f7ff fa82 	bl	8002e9c <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	4323      	orrs	r3, r4
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e008      	b.n	80039ba <HAL_ADC_ConfigChannel+0x556>
 80039a8:	4855      	ldr	r0, [pc, #340]	; (8003b00 <HAL_ADC_ConfigChannel+0x69c>)
 80039aa:	f7ff fa77 	bl	8002e9c <LL_ADC_IsEnabled>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d07d      	beq.n	8003aba <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a50      	ldr	r2, [pc, #320]	; (8003b04 <HAL_ADC_ConfigChannel+0x6a0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d130      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x5c6>
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d12b      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a4a      	ldr	r2, [pc, #296]	; (8003b00 <HAL_ADC_ConfigChannel+0x69c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	f040 8081 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a45      	ldr	r2, [pc, #276]	; (8003af8 <HAL_ADC_ConfigChannel+0x694>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_ADC_ConfigChannel+0x58e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a43      	ldr	r2, [pc, #268]	; (8003afc <HAL_ADC_ConfigChannel+0x698>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x592>
 80039f2:	4a45      	ldr	r2, [pc, #276]	; (8003b08 <HAL_ADC_ConfigChannel+0x6a4>)
 80039f4:	e000      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x594>
 80039f6:	4a3f      	ldr	r2, [pc, #252]	; (8003af4 <HAL_ADC_ConfigChannel+0x690>)
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7ff f8b0 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_ADC_ConfigChannel+0x6a8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	4a40      	ldr	r2, [pc, #256]	; (8003b10 <HAL_ADC_ConfigChannel+0x6ac>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	3301      	adds	r3, #1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a1a:	e002      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f9      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a28:	e05a      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a39      	ldr	r2, [pc, #228]	; (8003b14 <HAL_ADC_ConfigChannel+0x6b0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d11e      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x60e>
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d119      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <HAL_ADC_ConfigChannel+0x69c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d14b      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2a      	ldr	r2, [pc, #168]	; (8003af8 <HAL_ADC_ConfigChannel+0x694>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_ADC_ConfigChannel+0x5f8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_ADC_ConfigChannel+0x698>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x5fc>
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <HAL_ADC_ConfigChannel+0x6a4>)
 8003a5e:	e000      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x5fe>
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <HAL_ADC_ConfigChannel+0x690>)
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f7ff f87b 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a70:	e036      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <HAL_ADC_ConfigChannel+0x6b4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d131      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d12c      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_ADC_ConfigChannel+0x69c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d127      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_ADC_ConfigChannel+0x694>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x640>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_ADC_ConfigChannel+0x698>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x644>
 8003aa4:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <HAL_ADC_ConfigChannel+0x6a4>)
 8003aa6:	e000      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x646>
 8003aa8:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <HAL_ADC_ConfigChannel+0x690>)
 8003aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7ff f857 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
 8003ab8:	e012      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003acc:	e008      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ae8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3784      	adds	r7, #132	; 0x84
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}
 8003af4:	58026300 	.word	0x58026300
 8003af8:	40022000 	.word	0x40022000
 8003afc:	40022100 	.word	0x40022100
 8003b00:	58026000 	.word	0x58026000
 8003b04:	cb840000 	.word	0xcb840000
 8003b08:	40022300 	.word	0x40022300
 8003b0c:	24000000 	.word	0x24000000
 8003b10:	053e2d63 	.word	0x053e2d63
 8003b14:	c7520000 	.word	0xc7520000
 8003b18:	cfb80000 	.word	0xcfb80000

08003b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f9b7 	bl	8002e9c <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d16e      	bne.n	8003c12 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <ADC_Enable+0x100>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f043 0210 	orr.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e05a      	b.n	8003c14 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f972 	bl	8002e4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b68:	f7fe ffbc 	bl	8002ae4 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <ADC_Enable+0x104>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <ADC_Enable+0x66>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <ADC_Enable+0x108>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <ADC_Enable+0x6a>
 8003b82:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <ADC_Enable+0x10c>)
 8003b84:	e000      	b.n	8003b88 <ADC_Enable+0x6c>
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <ADC_Enable+0x110>)
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f903 	bl	8002d94 <LL_ADC_GetMultimode>
 8003b8e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <ADC_Enable+0x108>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d002      	beq.n	8003ba0 <ADC_Enable+0x84>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	e000      	b.n	8003ba2 <ADC_Enable+0x86>
 8003ba0:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <ADC_Enable+0x104>)
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02c      	beq.n	8003c04 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d130      	bne.n	8003c12 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bb0:	e028      	b.n	8003c04 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff f970 	bl	8002e9c <LL_ADC_IsEnabled>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f940 	bl	8002e4c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bcc:	f7fe ff8a 	bl	8002ae4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d914      	bls.n	8003c04 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d00d      	beq.n	8003c04 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f043 0210 	orr.w	r2, r3, #16
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e007      	b.n	8003c14 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d1cf      	bne.n	8003bb2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	8000003f 	.word	0x8000003f
 8003c20:	40022000 	.word	0x40022000
 8003c24:	40022100 	.word	0x40022100
 8003c28:	40022300 	.word	0x40022300
 8003c2c:	58026300 	.word	0x58026300

08003c30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff f940 	bl	8002ec2 <LL_ADC_IsDisableOngoing>
 8003c42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff f927 	bl	8002e9c <LL_ADC_IsEnabled>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d047      	beq.n	8003ce4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d144      	bne.n	8003ce4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030d 	and.w	r3, r3, #13
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10c      	bne.n	8003c82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff f901 	bl	8002e74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2203      	movs	r2, #3
 8003c78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c7a:	f7fe ff33 	bl	8002ae4 <HAL_GetTick>
 8003c7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c80:	e029      	b.n	8003cd6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e023      	b.n	8003ce6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c9e:	f7fe ff21 	bl	8002ae4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d914      	bls.n	8003cd6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1dc      	bne.n	8003c9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d14b      	bne.n	8003da0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d021      	beq.n	8003d66 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe ff92 	bl	8002c50 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d032      	beq.n	8003d98 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d12b      	bne.n	8003d98 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11f      	bne.n	8003d98 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
 8003d64:	e018      	b.n	8003d98 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d111      	bne.n	8003d98 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0201 	orr.w	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff fb45 	bl	8003428 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d9e:	e00e      	b.n	8003dbe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fb4f 	bl	8003450 <HAL_ADC_ErrorCallback>
}
 8003db2:	e004      	b.n	8003dbe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff fb31 	bl	800343c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f043 0204 	orr.w	r2, r3, #4
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff fb21 	bl	8003450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7a      	ldr	r2, [pc, #488]	; (8004010 <ADC_ConfigureBoostMode+0x1f8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <ADC_ConfigureBoostMode+0x1c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a79      	ldr	r2, [pc, #484]	; (8004014 <ADC_ConfigureBoostMode+0x1fc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d109      	bne.n	8003e48 <ADC_ConfigureBoostMode+0x30>
 8003e34:	4b78      	ldr	r3, [pc, #480]	; (8004018 <ADC_ConfigureBoostMode+0x200>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e008      	b.n	8003e5a <ADC_ConfigureBoostMode+0x42>
 8003e48:	4b74      	ldr	r3, [pc, #464]	; (800401c <ADC_ConfigureBoostMode+0x204>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01c      	beq.n	8003e98 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e5e:	f004 fe2f 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8003e62:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e6c:	d010      	beq.n	8003e90 <ADC_ConfigureBoostMode+0x78>
 8003e6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e72:	d873      	bhi.n	8003f5c <ADC_ConfigureBoostMode+0x144>
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d002      	beq.n	8003e80 <ADC_ConfigureBoostMode+0x68>
 8003e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e7e:	d16d      	bne.n	8003f5c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	60fb      	str	r3, [r7, #12]
        break;
 8003e8e:	e068      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	60fb      	str	r3, [r7, #12]
        break;
 8003e96:	e064      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	f006 f8b6 	bl	800a010 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ea4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003eae:	d051      	beq.n	8003f54 <ADC_ConfigureBoostMode+0x13c>
 8003eb0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003eb4:	d854      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003eb6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003eba:	d047      	beq.n	8003f4c <ADC_ConfigureBoostMode+0x134>
 8003ebc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ec0:	d84e      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003ec2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ec6:	d03d      	beq.n	8003f44 <ADC_ConfigureBoostMode+0x12c>
 8003ec8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ecc:	d848      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed2:	d033      	beq.n	8003f3c <ADC_ConfigureBoostMode+0x124>
 8003ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed8:	d842      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003eda:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ede:	d029      	beq.n	8003f34 <ADC_ConfigureBoostMode+0x11c>
 8003ee0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ee4:	d83c      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003ee6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003eea:	d01a      	beq.n	8003f22 <ADC_ConfigureBoostMode+0x10a>
 8003eec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ef0:	d836      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003ef2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ef6:	d014      	beq.n	8003f22 <ADC_ConfigureBoostMode+0x10a>
 8003ef8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003efc:	d830      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f02:	d00e      	beq.n	8003f22 <ADC_ConfigureBoostMode+0x10a>
 8003f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f08:	d82a      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003f0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f0e:	d008      	beq.n	8003f22 <ADC_ConfigureBoostMode+0x10a>
 8003f10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f14:	d824      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x148>
 8003f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f1a:	d002      	beq.n	8003f22 <ADC_ConfigureBoostMode+0x10a>
 8003f1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f20:	d11e      	bne.n	8003f60 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	0c9b      	lsrs	r3, r3, #18
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	60fb      	str	r3, [r7, #12]
        break;
 8003f32:	e016      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
        break;
 8003f3a:	e012      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	60fb      	str	r3, [r7, #12]
        break;
 8003f42:	e00e      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	60fb      	str	r3, [r7, #12]
        break;
 8003f4a:	e00a      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	09db      	lsrs	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]
        break;
 8003f52:	e006      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	60fb      	str	r3, [r7, #12]
        break;
 8003f5a:	e002      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f60:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f62:	f7fe fdcb 	bl	8002afc <HAL_GetREVID>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d815      	bhi.n	8003f9c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <ADC_ConfigureBoostMode+0x208>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d908      	bls.n	8003f8a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f86:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f88:	e03e      	b.n	8004008 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f98:	609a      	str	r2, [r3, #8]
}
 8003f9a:	e035      	b.n	8004008 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <ADC_ConfigureBoostMode+0x20c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d808      	bhi.n	8003fbc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fb8:	609a      	str	r2, [r3, #8]
}
 8003fba:	e025      	b.n	8004008 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <ADC_ConfigureBoostMode+0x210>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d80a      	bhi.n	8003fda <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	e016      	b.n	8004008 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <ADC_ConfigureBoostMode+0x214>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d80a      	bhi.n	8003ff8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff4:	609a      	str	r2, [r3, #8]
}
 8003ff6:	e007      	b.n	8004008 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40022000 	.word	0x40022000
 8004014:	40022100 	.word	0x40022100
 8004018:	40022300 	.word	0x40022300
 800401c:	58026300 	.word	0x58026300
 8004020:	01312d00 	.word	0x01312d00
 8004024:	005f5e10 	.word	0x005f5e10
 8004028:	00bebc20 	.word	0x00bebc20
 800402c:	017d7840 	.word	0x017d7840

08004030 <LL_ADC_IsEnabled>:
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <LL_ADC_IsEnabled+0x18>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <LL_ADC_IsEnabled+0x1a>
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <LL_ADC_StartCalibration>:
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <LL_ADC_StartCalibration+0x38>)
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004078:	430a      	orrs	r2, r1
 800407a:	4313      	orrs	r3, r2
 800407c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	3ffeffc0 	.word	0x3ffeffc0

08004094 <LL_ADC_IsCalibrationOnGoing>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a8:	d101      	bne.n	80040ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_ADC_REG_IsConversionOngoing>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d101      	bne.n	80040d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_ADCEx_Calibration_Start+0x1e>
 80040fe:	2302      	movs	r3, #2
 8004100:	e04c      	b.n	800419c <HAL_ADCEx_Calibration_Start+0xb8>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff fd90 	bl	8003c30 <ADC_Disable>
 8004110:	4603      	mov	r3, r0
 8004112:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d135      	bne.n	8004186 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800411e:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004120:	4013      	ands	r3, r2
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff90 	bl	8004058 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004138:	e014      	b.n	8004164 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d30d      	bcc.n	8004164 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f023 0312 	bic.w	r3, r3, #18
 8004150:	f043 0210 	orr.w	r2, r3, #16
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e01b      	b.n	800419c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff93 	bl	8004094 <LL_ADC_IsCalibrationOnGoing>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e2      	bne.n	800413a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f023 0303 	bic.w	r3, r3, #3
 800417c:	f043 0201 	orr.w	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
 8004184:	e005      	b.n	8004192 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f043 0210 	orr.w	r2, r3, #16
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800419a:	7dfb      	ldrb	r3, [r7, #23]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	ffffeefd 	.word	0xffffeefd
 80041a8:	25c3f800 	.word	0x25c3f800

080041ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b09f      	sub	sp, #124	; 0x7c
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e0be      	b.n	8004348 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a5c      	ldr	r2, [pc, #368]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d102      	bne.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041e4:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	e001      	b.n	80041ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e09d      	b.n	8004348 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff54 	bl	80040bc <LL_ADC_REG_IsConversionOngoing>
 8004214:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ff4e 	bl	80040bc <LL_ADC_REG_IsConversionOngoing>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d17f      	bne.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004228:	2b00      	cmp	r3, #0
 800422a:	d17c      	bne.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a47      	ldr	r2, [pc, #284]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a46      	ldr	r2, [pc, #280]	; (8004354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004240:	4b45      	ldr	r3, [pc, #276]	; (8004358 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004242:	e000      	b.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004246:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d039      	beq.n	80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	431a      	orrs	r2, r3
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3a      	ldr	r2, [pc, #232]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a38      	ldr	r2, [pc, #224]	; (8004354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10e      	bne.n	8004294 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004276:	4836      	ldr	r0, [pc, #216]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004278:	f7ff feda 	bl	8004030 <LL_ADC_IsEnabled>
 800427c:	4604      	mov	r4, r0
 800427e:	4835      	ldr	r0, [pc, #212]	; (8004354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004280:	f7ff fed6 	bl	8004030 <LL_ADC_IsEnabled>
 8004284:	4603      	mov	r3, r0
 8004286:	4323      	orrs	r3, r4
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e008      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004294:	4832      	ldr	r0, [pc, #200]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004296:	f7ff fecb 	bl	8004030 <LL_ADC_IsEnabled>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d047      	beq.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	6811      	ldr	r1, [r2, #0]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	6892      	ldr	r2, [r2, #8]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	431a      	orrs	r2, r3
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042c2:	e03a      	b.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10e      	bne.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80042e4:	481a      	ldr	r0, [pc, #104]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042e6:	f7ff fea3 	bl	8004030 <LL_ADC_IsEnabled>
 80042ea:	4604      	mov	r4, r0
 80042ec:	4819      	ldr	r0, [pc, #100]	; (8004354 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042ee:	f7ff fe9f 	bl	8004030 <LL_ADC_IsEnabled>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4323      	orrs	r3, r4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e008      	b.n	8004314 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004302:	4817      	ldr	r0, [pc, #92]	; (8004360 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004304:	f7ff fe94 	bl	8004030 <LL_ADC_IsEnabled>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d010      	beq.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800431e:	4013      	ands	r3, r2
 8004320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004322:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004324:	e009      	b.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004338:	e000      	b.n	800433c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800433a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004344:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004348:	4618      	mov	r0, r3
 800434a:	377c      	adds	r7, #124	; 0x7c
 800434c:	46bd      	mov	sp, r7
 800434e:	bd90      	pop	{r4, r7, pc}
 8004350:	40022000 	.word	0x40022000
 8004354:	40022100 	.word	0x40022100
 8004358:	40022300 	.word	0x40022300
 800435c:	58026300 	.word	0x58026300
 8004360:	58026000 	.word	0x58026000
 8004364:	fffff0e0 	.word	0xfffff0e0

08004368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <__NVIC_SetPriorityGrouping+0x40>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 8004392:	4313      	orrs	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004396:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <__NVIC_SetPriorityGrouping+0x40>)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	60d3      	str	r3, [r2, #12]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000ed00 	.word	0xe000ed00
 80043ac:	05fa0000 	.word	0x05fa0000

080043b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <__NVIC_GetPriorityGrouping+0x18>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	f003 0307 	and.w	r3, r3, #7
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	db0b      	blt.n	80043f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4907      	ldr	r1, [pc, #28]	; (8004404 <__NVIC_EnableIRQ+0x38>)
 80043e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2001      	movs	r0, #1
 80043ee:	fa00 f202 	lsl.w	r2, r0, r2
 80043f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	e000e100 	.word	0xe000e100

08004408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	db0a      	blt.n	8004432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	b2da      	uxtb	r2, r3
 8004420:	490c      	ldr	r1, [pc, #48]	; (8004454 <__NVIC_SetPriority+0x4c>)
 8004422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004426:	0112      	lsls	r2, r2, #4
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	440b      	add	r3, r1
 800442c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004430:	e00a      	b.n	8004448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	b2da      	uxtb	r2, r3
 8004436:	4908      	ldr	r1, [pc, #32]	; (8004458 <__NVIC_SetPriority+0x50>)
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	3b04      	subs	r3, #4
 8004440:	0112      	lsls	r2, r2, #4
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	440b      	add	r3, r1
 8004446:	761a      	strb	r2, [r3, #24]
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	e000e100 	.word	0xe000e100
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f1c3 0307 	rsb	r3, r3, #7
 8004476:	2b04      	cmp	r3, #4
 8004478:	bf28      	it	cs
 800447a:	2304      	movcs	r3, #4
 800447c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3304      	adds	r3, #4
 8004482:	2b06      	cmp	r3, #6
 8004484:	d902      	bls.n	800448c <NVIC_EncodePriority+0x30>
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3b03      	subs	r3, #3
 800448a:	e000      	b.n	800448e <NVIC_EncodePriority+0x32>
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43da      	mvns	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	401a      	ands	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	43d9      	mvns	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b4:	4313      	orrs	r3, r2
         );
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3724      	adds	r7, #36	; 0x24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff4c 	bl	8004368 <__NVIC_SetPriorityGrouping>
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044e6:	f7ff ff63 	bl	80043b0 <__NVIC_GetPriorityGrouping>
 80044ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	6978      	ldr	r0, [r7, #20]
 80044f2:	f7ff ffb3 	bl	800445c <NVIC_EncodePriority>
 80044f6:	4602      	mov	r2, r0
 80044f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff ff82 	bl	8004408 <__NVIC_SetPriority>
}
 8004504:	bf00      	nop
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff56 	bl	80043cc <__NVIC_EnableIRQ>
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e014      	b.n	8004564 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	791b      	ldrb	r3, [r3, #4]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fd fd5c 	bl	8002008 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01d      	beq.n	80045ca <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d018      	beq.n	80045ca <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f827 	bl	8004618 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01d      	beq.n	8004610 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2204      	movs	r2, #4
 80045e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f043 0202 	orr.w	r2, r3, #2
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004608:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f950 	bl	80048b0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_DAC_ConfigChannel+0x1e>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e12a      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	795b      	ldrb	r3, [r3, #5]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_DAC_ConfigChannel+0x2e>
 8004656:	2302      	movs	r3, #2
 8004658:	e124      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x278>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2202      	movs	r2, #2
 8004664:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d17a      	bne.n	8004764 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800466e:	f7fe fa39 	bl	8002ae4 <HAL_GetTick>
 8004672:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d13d      	bne.n	80046f6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800467a:	e018      	b.n	80046ae <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800467c:	f7fe fa32 	bl	8002ae4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d911      	bls.n	80046ae <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	4b86      	ldr	r3, [pc, #536]	; (80048ac <HAL_DAC_ConfigChannel+0x280>)
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f043 0208 	orr.w	r2, r3, #8
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2203      	movs	r2, #3
 80046a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0fa      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b4:	4b7d      	ldr	r3, [pc, #500]	; (80048ac <HAL_DAC_ConfigChannel+0x280>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1df      	bne.n	800467c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	6992      	ldr	r2, [r2, #24]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
 80046c6:	e020      	b.n	800470a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046c8:	f7fe fa0c 	bl	8002ae4 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d90f      	bls.n	80046f6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	2b00      	cmp	r3, #0
 80046de:	da0a      	bge.n	80046f6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f043 0208 	orr.w	r2, r3, #8
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2203      	movs	r2, #3
 80046f0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0d6      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dbe3      	blt.n	80046c8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	6992      	ldr	r2, [r2, #24]
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	ea02 0103 	and.w	r1, r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	21ff      	movs	r1, #255	; 0xff
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	ea02 0103 	and.w	r1, r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d11d      	bne.n	80047a8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	221f      	movs	r2, #31
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2207      	movs	r2, #7
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d102      	bne.n	80047d2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	e00f      	b.n	80047f2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d102      	bne.n	80047e0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80047da:	2301      	movs	r3, #1
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
 80047de:	e008      	b.n	80047f2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80047e8:	2301      	movs	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	e001      	b.n	80047f2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43da      	mvns	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	400a      	ands	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	f640 72fe 	movw	r2, #4094	; 0xffe
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	22c0      	movs	r2, #192	; 0xc0
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43da      	mvns	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	400a      	ands	r2, r1
 8004892:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80048a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	; 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20008000 	.word	0x20008000

080048b0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80048cc:	f7fe f90a 	bl	8002ae4 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e316      	b.n	8004f0a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a66      	ldr	r2, [pc, #408]	; (8004a7c <HAL_DMA_Init+0x1b8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_Init+0xb8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a65      	ldr	r2, [pc, #404]	; (8004a80 <HAL_DMA_Init+0x1bc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_Init+0xb8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a63      	ldr	r2, [pc, #396]	; (8004a84 <HAL_DMA_Init+0x1c0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_Init+0xb8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a62      	ldr	r2, [pc, #392]	; (8004a88 <HAL_DMA_Init+0x1c4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a60      	ldr	r2, [pc, #384]	; (8004a8c <HAL_DMA_Init+0x1c8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_Init+0xb8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a5f      	ldr	r2, [pc, #380]	; (8004a90 <HAL_DMA_Init+0x1cc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5d      	ldr	r2, [pc, #372]	; (8004a94 <HAL_DMA_Init+0x1d0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a5c      	ldr	r2, [pc, #368]	; (8004a98 <HAL_DMA_Init+0x1d4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_Init+0xb8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a5a      	ldr	r2, [pc, #360]	; (8004a9c <HAL_DMA_Init+0x1d8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a59      	ldr	r2, [pc, #356]	; (8004aa0 <HAL_DMA_Init+0x1dc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a57      	ldr	r2, [pc, #348]	; (8004aa4 <HAL_DMA_Init+0x1e0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_Init+0xb8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a56      	ldr	r2, [pc, #344]	; (8004aa8 <HAL_DMA_Init+0x1e4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a54      	ldr	r2, [pc, #336]	; (8004aac <HAL_DMA_Init+0x1e8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_Init+0xb8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a53      	ldr	r2, [pc, #332]	; (8004ab0 <HAL_DMA_Init+0x1ec>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a51      	ldr	r2, [pc, #324]	; (8004ab4 <HAL_DMA_Init+0x1f0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_Init+0xb8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a50      	ldr	r2, [pc, #320]	; (8004ab8 <HAL_DMA_Init+0x1f4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_DMA_Init+0xbc>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_DMA_Init+0xbe>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 813b 	beq.w	8004bfe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a37      	ldr	r2, [pc, #220]	; (8004a7c <HAL_DMA_Init+0x1b8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d04a      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <HAL_DMA_Init+0x1bc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d045      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a34      	ldr	r2, [pc, #208]	; (8004a84 <HAL_DMA_Init+0x1c0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d040      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a33      	ldr	r2, [pc, #204]	; (8004a88 <HAL_DMA_Init+0x1c4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d03b      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a31      	ldr	r2, [pc, #196]	; (8004a8c <HAL_DMA_Init+0x1c8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d036      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a30      	ldr	r2, [pc, #192]	; (8004a90 <HAL_DMA_Init+0x1cc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d031      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2e      	ldr	r2, [pc, #184]	; (8004a94 <HAL_DMA_Init+0x1d0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d02c      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2d      	ldr	r2, [pc, #180]	; (8004a98 <HAL_DMA_Init+0x1d4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d027      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2b      	ldr	r2, [pc, #172]	; (8004a9c <HAL_DMA_Init+0x1d8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d022      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2a      	ldr	r2, [pc, #168]	; (8004aa0 <HAL_DMA_Init+0x1dc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d01d      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a28      	ldr	r2, [pc, #160]	; (8004aa4 <HAL_DMA_Init+0x1e0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a27      	ldr	r2, [pc, #156]	; (8004aa8 <HAL_DMA_Init+0x1e4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a25      	ldr	r2, [pc, #148]	; (8004aac <HAL_DMA_Init+0x1e8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <HAL_DMA_Init+0x1ec>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a22      	ldr	r2, [pc, #136]	; (8004ab4 <HAL_DMA_Init+0x1f0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_DMA_Init+0x174>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <HAL_DMA_Init+0x1f4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d108      	bne.n	8004a4a <HAL_DMA_Init+0x186>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e007      	b.n	8004a5a <HAL_DMA_Init+0x196>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a5a:	e02f      	b.n	8004abc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a5c:	f7fe f842 	bl	8002ae4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d928      	bls.n	8004abc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2203      	movs	r2, #3
 8004a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e246      	b.n	8004f0a <HAL_DMA_Init+0x646>
 8004a7c:	40020010 	.word	0x40020010
 8004a80:	40020028 	.word	0x40020028
 8004a84:	40020040 	.word	0x40020040
 8004a88:	40020058 	.word	0x40020058
 8004a8c:	40020070 	.word	0x40020070
 8004a90:	40020088 	.word	0x40020088
 8004a94:	400200a0 	.word	0x400200a0
 8004a98:	400200b8 	.word	0x400200b8
 8004a9c:	40020410 	.word	0x40020410
 8004aa0:	40020428 	.word	0x40020428
 8004aa4:	40020440 	.word	0x40020440
 8004aa8:	40020458 	.word	0x40020458
 8004aac:	40020470 	.word	0x40020470
 8004ab0:	40020488 	.word	0x40020488
 8004ab4:	400204a0 	.word	0x400204a0
 8004ab8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1c8      	bne.n	8004a5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4b83      	ldr	r3, [pc, #524]	; (8004ce4 <HAL_DMA_Init+0x420>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ae2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d107      	bne.n	8004b20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b20:	4b71      	ldr	r3, [pc, #452]	; (8004ce8 <HAL_DMA_Init+0x424>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b71      	ldr	r3, [pc, #452]	; (8004cec <HAL_DMA_Init+0x428>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2c:	d328      	bcc.n	8004b80 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b28      	cmp	r3, #40	; 0x28
 8004b34:	d903      	bls.n	8004b3e <HAL_DMA_Init+0x27a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b3c:	d917      	bls.n	8004b6e <HAL_DMA_Init+0x2aa>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b3e      	cmp	r3, #62	; 0x3e
 8004b44:	d903      	bls.n	8004b4e <HAL_DMA_Init+0x28a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b42      	cmp	r3, #66	; 0x42
 8004b4c:	d90f      	bls.n	8004b6e <HAL_DMA_Init+0x2aa>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b46      	cmp	r3, #70	; 0x46
 8004b54:	d903      	bls.n	8004b5e <HAL_DMA_Init+0x29a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b48      	cmp	r3, #72	; 0x48
 8004b5c:	d907      	bls.n	8004b6e <HAL_DMA_Init+0x2aa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b4e      	cmp	r3, #78	; 0x4e
 8004b64:	d905      	bls.n	8004b72 <HAL_DMA_Init+0x2ae>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b52      	cmp	r3, #82	; 0x52
 8004b6c:	d801      	bhi.n	8004b72 <HAL_DMA_Init+0x2ae>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_DMA_Init+0x2b0>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b7e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0307 	bic.w	r3, r3, #7
 8004b96:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d117      	bne.n	8004bda <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00e      	beq.n	8004bda <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f002 fb33 	bl	8007228 <DMA_CheckFifoParam>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e197      	b.n	8004f0a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f002 fa6e 	bl	80070c4 <DMA_CalcBaseAndBitshift>
 8004be8:	4603      	mov	r3, r0
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	223f      	movs	r2, #63	; 0x3f
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	e0cd      	b.n	8004d9a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <HAL_DMA_Init+0x42c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <HAL_DMA_Init+0x38a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a39      	ldr	r2, [pc, #228]	; (8004cf4 <HAL_DMA_Init+0x430>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <HAL_DMA_Init+0x38a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a38      	ldr	r2, [pc, #224]	; (8004cf8 <HAL_DMA_Init+0x434>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <HAL_DMA_Init+0x38a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a36      	ldr	r2, [pc, #216]	; (8004cfc <HAL_DMA_Init+0x438>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_DMA_Init+0x38a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a35      	ldr	r2, [pc, #212]	; (8004d00 <HAL_DMA_Init+0x43c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_DMA_Init+0x38a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a33      	ldr	r2, [pc, #204]	; (8004d04 <HAL_DMA_Init+0x440>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_DMA_Init+0x38a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a32      	ldr	r2, [pc, #200]	; (8004d08 <HAL_DMA_Init+0x444>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_DMA_Init+0x38a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a30      	ldr	r2, [pc, #192]	; (8004d0c <HAL_DMA_Init+0x448>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_DMA_Init+0x38e>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_DMA_Init+0x390>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8097 	beq.w	8004d88 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <HAL_DMA_Init+0x42c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d021      	beq.n	8004ca8 <HAL_DMA_Init+0x3e4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a22      	ldr	r2, [pc, #136]	; (8004cf4 <HAL_DMA_Init+0x430>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01c      	beq.n	8004ca8 <HAL_DMA_Init+0x3e4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <HAL_DMA_Init+0x434>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d017      	beq.n	8004ca8 <HAL_DMA_Init+0x3e4>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <HAL_DMA_Init+0x438>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d012      	beq.n	8004ca8 <HAL_DMA_Init+0x3e4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <HAL_DMA_Init+0x43c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_DMA_Init+0x3e4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <HAL_DMA_Init+0x440>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d008      	beq.n	8004ca8 <HAL_DMA_Init+0x3e4>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_DMA_Init+0x444>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <HAL_DMA_Init+0x3e4>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <HAL_DMA_Init+0x448>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_DMA_Init+0x44c>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d020      	beq.n	8004d14 <HAL_DMA_Init+0x450>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d102      	bne.n	8004ce0 <HAL_DMA_Init+0x41c>
 8004cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cde:	e01a      	b.n	8004d16 <HAL_DMA_Init+0x452>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e018      	b.n	8004d16 <HAL_DMA_Init+0x452>
 8004ce4:	fe10803f 	.word	0xfe10803f
 8004ce8:	5c001000 	.word	0x5c001000
 8004cec:	ffff0000 	.word	0xffff0000
 8004cf0:	58025408 	.word	0x58025408
 8004cf4:	5802541c 	.word	0x5802541c
 8004cf8:	58025430 	.word	0x58025430
 8004cfc:	58025444 	.word	0x58025444
 8004d00:	58025458 	.word	0x58025458
 8004d04:	5802546c 	.word	0x5802546c
 8004d08:	58025480 	.word	0x58025480
 8004d0c:	58025494 	.word	0x58025494
 8004d10:	fffe000f 	.word	0xfffe000f
 8004d14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68d2      	ldr	r2, [r2, #12]
 8004d1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	; (8004f14 <HAL_DMA_Init+0x650>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	4a6e      	ldr	r2, [pc, #440]	; (8004f18 <HAL_DMA_Init+0x654>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	009a      	lsls	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f002 f9a9 	bl	80070c4 <DMA_CalcBaseAndBitshift>
 8004d72:	4603      	mov	r3, r0
 8004d74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	2201      	movs	r2, #1
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	e008      	b.n	8004d9a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2203      	movs	r2, #3
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e0b7      	b.n	8004f0a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5f      	ldr	r2, [pc, #380]	; (8004f1c <HAL_DMA_Init+0x658>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d072      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5d      	ldr	r2, [pc, #372]	; (8004f20 <HAL_DMA_Init+0x65c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d06d      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a5c      	ldr	r2, [pc, #368]	; (8004f24 <HAL_DMA_Init+0x660>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d068      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a5a      	ldr	r2, [pc, #360]	; (8004f28 <HAL_DMA_Init+0x664>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d063      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a59      	ldr	r2, [pc, #356]	; (8004f2c <HAL_DMA_Init+0x668>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d05e      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a57      	ldr	r2, [pc, #348]	; (8004f30 <HAL_DMA_Init+0x66c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d059      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a56      	ldr	r2, [pc, #344]	; (8004f34 <HAL_DMA_Init+0x670>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d054      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a54      	ldr	r2, [pc, #336]	; (8004f38 <HAL_DMA_Init+0x674>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d04f      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a53      	ldr	r2, [pc, #332]	; (8004f3c <HAL_DMA_Init+0x678>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d04a      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a51      	ldr	r2, [pc, #324]	; (8004f40 <HAL_DMA_Init+0x67c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d045      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a50      	ldr	r2, [pc, #320]	; (8004f44 <HAL_DMA_Init+0x680>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d040      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a4e      	ldr	r2, [pc, #312]	; (8004f48 <HAL_DMA_Init+0x684>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d03b      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4d      	ldr	r2, [pc, #308]	; (8004f4c <HAL_DMA_Init+0x688>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d036      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a4b      	ldr	r2, [pc, #300]	; (8004f50 <HAL_DMA_Init+0x68c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d031      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4a      	ldr	r2, [pc, #296]	; (8004f54 <HAL_DMA_Init+0x690>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d02c      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a48      	ldr	r2, [pc, #288]	; (8004f58 <HAL_DMA_Init+0x694>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d027      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a47      	ldr	r2, [pc, #284]	; (8004f5c <HAL_DMA_Init+0x698>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a45      	ldr	r2, [pc, #276]	; (8004f60 <HAL_DMA_Init+0x69c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a44      	ldr	r2, [pc, #272]	; (8004f64 <HAL_DMA_Init+0x6a0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a42      	ldr	r2, [pc, #264]	; (8004f68 <HAL_DMA_Init+0x6a4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a41      	ldr	r2, [pc, #260]	; (8004f6c <HAL_DMA_Init+0x6a8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a3f      	ldr	r2, [pc, #252]	; (8004f70 <HAL_DMA_Init+0x6ac>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3e      	ldr	r2, [pc, #248]	; (8004f74 <HAL_DMA_Init+0x6b0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_DMA_Init+0x5c6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a3c      	ldr	r2, [pc, #240]	; (8004f78 <HAL_DMA_Init+0x6b4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_DMA_Init+0x5ca>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_DMA_Init+0x5cc>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d032      	beq.n	8004efa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f002 fa43 	bl	8007320 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d102      	bne.n	8004ea8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ebc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d010      	beq.n	8004ee8 <HAL_DMA_Init+0x624>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d80c      	bhi.n	8004ee8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f002 fac0 	bl	8007454 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	e008      	b.n	8004efa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	a7fdabf8 	.word	0xa7fdabf8
 8004f18:	cccccccd 	.word	0xcccccccd
 8004f1c:	40020010 	.word	0x40020010
 8004f20:	40020028 	.word	0x40020028
 8004f24:	40020040 	.word	0x40020040
 8004f28:	40020058 	.word	0x40020058
 8004f2c:	40020070 	.word	0x40020070
 8004f30:	40020088 	.word	0x40020088
 8004f34:	400200a0 	.word	0x400200a0
 8004f38:	400200b8 	.word	0x400200b8
 8004f3c:	40020410 	.word	0x40020410
 8004f40:	40020428 	.word	0x40020428
 8004f44:	40020440 	.word	0x40020440
 8004f48:	40020458 	.word	0x40020458
 8004f4c:	40020470 	.word	0x40020470
 8004f50:	40020488 	.word	0x40020488
 8004f54:	400204a0 	.word	0x400204a0
 8004f58:	400204b8 	.word	0x400204b8
 8004f5c:	58025408 	.word	0x58025408
 8004f60:	5802541c 	.word	0x5802541c
 8004f64:	58025430 	.word	0x58025430
 8004f68:	58025444 	.word	0x58025444
 8004f6c:	58025458 	.word	0x58025458
 8004f70:	5802546c 	.word	0x5802546c
 8004f74:	58025480 	.word	0x58025480
 8004f78:	58025494 	.word	0x58025494

08004f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e226      	b.n	80053e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DMA_Start_IT+0x2a>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e21f      	b.n	80053e6 <HAL_DMA_Start_IT+0x46a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f040 820a 	bne.w	80053d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a68      	ldr	r2, [pc, #416]	; (8005170 <HAL_DMA_Start_IT+0x1f4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d04a      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a66      	ldr	r2, [pc, #408]	; (8005174 <HAL_DMA_Start_IT+0x1f8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d045      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a65      	ldr	r2, [pc, #404]	; (8005178 <HAL_DMA_Start_IT+0x1fc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d040      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a63      	ldr	r2, [pc, #396]	; (800517c <HAL_DMA_Start_IT+0x200>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d03b      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a62      	ldr	r2, [pc, #392]	; (8005180 <HAL_DMA_Start_IT+0x204>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d036      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a60      	ldr	r2, [pc, #384]	; (8005184 <HAL_DMA_Start_IT+0x208>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d031      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5f      	ldr	r2, [pc, #380]	; (8005188 <HAL_DMA_Start_IT+0x20c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d02c      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5d      	ldr	r2, [pc, #372]	; (800518c <HAL_DMA_Start_IT+0x210>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d027      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a5c      	ldr	r2, [pc, #368]	; (8005190 <HAL_DMA_Start_IT+0x214>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d022      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5a      	ldr	r2, [pc, #360]	; (8005194 <HAL_DMA_Start_IT+0x218>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01d      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a59      	ldr	r2, [pc, #356]	; (8005198 <HAL_DMA_Start_IT+0x21c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a57      	ldr	r2, [pc, #348]	; (800519c <HAL_DMA_Start_IT+0x220>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a56      	ldr	r2, [pc, #344]	; (80051a0 <HAL_DMA_Start_IT+0x224>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a54      	ldr	r2, [pc, #336]	; (80051a4 <HAL_DMA_Start_IT+0x228>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a53      	ldr	r2, [pc, #332]	; (80051a8 <HAL_DMA_Start_IT+0x22c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_DMA_Start_IT+0xee>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a51      	ldr	r2, [pc, #324]	; (80051ac <HAL_DMA_Start_IT+0x230>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d108      	bne.n	800507c <HAL_DMA_Start_IT+0x100>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e007      	b.n	800508c <HAL_DMA_Start_IT+0x110>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f001 fe6a 	bl	8006d6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a34      	ldr	r2, [pc, #208]	; (8005170 <HAL_DMA_Start_IT+0x1f4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d04a      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a33      	ldr	r2, [pc, #204]	; (8005174 <HAL_DMA_Start_IT+0x1f8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d045      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a31      	ldr	r2, [pc, #196]	; (8005178 <HAL_DMA_Start_IT+0x1fc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d040      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a30      	ldr	r2, [pc, #192]	; (800517c <HAL_DMA_Start_IT+0x200>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d03b      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2e      	ldr	r2, [pc, #184]	; (8005180 <HAL_DMA_Start_IT+0x204>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d036      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2d      	ldr	r2, [pc, #180]	; (8005184 <HAL_DMA_Start_IT+0x208>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d031      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2b      	ldr	r2, [pc, #172]	; (8005188 <HAL_DMA_Start_IT+0x20c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02c      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2a      	ldr	r2, [pc, #168]	; (800518c <HAL_DMA_Start_IT+0x210>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d027      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a28      	ldr	r2, [pc, #160]	; (8005190 <HAL_DMA_Start_IT+0x214>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a27      	ldr	r2, [pc, #156]	; (8005194 <HAL_DMA_Start_IT+0x218>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d01d      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a25      	ldr	r2, [pc, #148]	; (8005198 <HAL_DMA_Start_IT+0x21c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a24      	ldr	r2, [pc, #144]	; (800519c <HAL_DMA_Start_IT+0x220>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a22      	ldr	r2, [pc, #136]	; (80051a0 <HAL_DMA_Start_IT+0x224>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a21      	ldr	r2, [pc, #132]	; (80051a4 <HAL_DMA_Start_IT+0x228>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1f      	ldr	r2, [pc, #124]	; (80051a8 <HAL_DMA_Start_IT+0x22c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_DMA_Start_IT+0x1bc>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <HAL_DMA_Start_IT+0x230>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_DMA_Start_IT+0x1c0>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_DMA_Start_IT+0x1c2>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d036      	beq.n	80051b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f023 021e 	bic.w	r2, r3, #30
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0216 	orr.w	r2, r2, #22
 8005154:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d03e      	beq.n	80051dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0208 	orr.w	r2, r2, #8
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e035      	b.n	80051dc <HAL_DMA_Start_IT+0x260>
 8005170:	40020010 	.word	0x40020010
 8005174:	40020028 	.word	0x40020028
 8005178:	40020040 	.word	0x40020040
 800517c:	40020058 	.word	0x40020058
 8005180:	40020070 	.word	0x40020070
 8005184:	40020088 	.word	0x40020088
 8005188:	400200a0 	.word	0x400200a0
 800518c:	400200b8 	.word	0x400200b8
 8005190:	40020410 	.word	0x40020410
 8005194:	40020428 	.word	0x40020428
 8005198:	40020440 	.word	0x40020440
 800519c:	40020458 	.word	0x40020458
 80051a0:	40020470 	.word	0x40020470
 80051a4:	40020488 	.word	0x40020488
 80051a8:	400204a0 	.word	0x400204a0
 80051ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 020e 	bic.w	r2, r3, #14
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 020a 	orr.w	r2, r2, #10
 80051c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0204 	orr.w	r2, r2, #4
 80051da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a83      	ldr	r2, [pc, #524]	; (80053f0 <HAL_DMA_Start_IT+0x474>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d072      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a82      	ldr	r2, [pc, #520]	; (80053f4 <HAL_DMA_Start_IT+0x478>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d06d      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a80      	ldr	r2, [pc, #512]	; (80053f8 <HAL_DMA_Start_IT+0x47c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d068      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a7f      	ldr	r2, [pc, #508]	; (80053fc <HAL_DMA_Start_IT+0x480>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d063      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a7d      	ldr	r2, [pc, #500]	; (8005400 <HAL_DMA_Start_IT+0x484>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d05e      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <HAL_DMA_Start_IT+0x488>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d059      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7a      	ldr	r2, [pc, #488]	; (8005408 <HAL_DMA_Start_IT+0x48c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d054      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a79      	ldr	r2, [pc, #484]	; (800540c <HAL_DMA_Start_IT+0x490>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d04f      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a77      	ldr	r2, [pc, #476]	; (8005410 <HAL_DMA_Start_IT+0x494>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d04a      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a76      	ldr	r2, [pc, #472]	; (8005414 <HAL_DMA_Start_IT+0x498>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d045      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a74      	ldr	r2, [pc, #464]	; (8005418 <HAL_DMA_Start_IT+0x49c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d040      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a73      	ldr	r2, [pc, #460]	; (800541c <HAL_DMA_Start_IT+0x4a0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d03b      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a71      	ldr	r2, [pc, #452]	; (8005420 <HAL_DMA_Start_IT+0x4a4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d036      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a70      	ldr	r2, [pc, #448]	; (8005424 <HAL_DMA_Start_IT+0x4a8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d031      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a6e      	ldr	r2, [pc, #440]	; (8005428 <HAL_DMA_Start_IT+0x4ac>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d02c      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6d      	ldr	r2, [pc, #436]	; (800542c <HAL_DMA_Start_IT+0x4b0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d027      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a6b      	ldr	r2, [pc, #428]	; (8005430 <HAL_DMA_Start_IT+0x4b4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d022      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6a      	ldr	r2, [pc, #424]	; (8005434 <HAL_DMA_Start_IT+0x4b8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d01d      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a68      	ldr	r2, [pc, #416]	; (8005438 <HAL_DMA_Start_IT+0x4bc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a67      	ldr	r2, [pc, #412]	; (800543c <HAL_DMA_Start_IT+0x4c0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a65      	ldr	r2, [pc, #404]	; (8005440 <HAL_DMA_Start_IT+0x4c4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a64      	ldr	r2, [pc, #400]	; (8005444 <HAL_DMA_Start_IT+0x4c8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a62      	ldr	r2, [pc, #392]	; (8005448 <HAL_DMA_Start_IT+0x4cc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_DMA_Start_IT+0x350>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a61      	ldr	r2, [pc, #388]	; (800544c <HAL_DMA_Start_IT+0x4d0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <HAL_DMA_Start_IT+0x354>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_DMA_Start_IT+0x356>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01a      	beq.n	800530c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a37      	ldr	r2, [pc, #220]	; (80053f0 <HAL_DMA_Start_IT+0x474>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d04a      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a36      	ldr	r2, [pc, #216]	; (80053f4 <HAL_DMA_Start_IT+0x478>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d045      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a34      	ldr	r2, [pc, #208]	; (80053f8 <HAL_DMA_Start_IT+0x47c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d040      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a33      	ldr	r2, [pc, #204]	; (80053fc <HAL_DMA_Start_IT+0x480>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d03b      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a31      	ldr	r2, [pc, #196]	; (8005400 <HAL_DMA_Start_IT+0x484>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d036      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a30      	ldr	r2, [pc, #192]	; (8005404 <HAL_DMA_Start_IT+0x488>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d031      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2e      	ldr	r2, [pc, #184]	; (8005408 <HAL_DMA_Start_IT+0x48c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d02c      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2d      	ldr	r2, [pc, #180]	; (800540c <HAL_DMA_Start_IT+0x490>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d027      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <HAL_DMA_Start_IT+0x494>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d022      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <HAL_DMA_Start_IT+0x498>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d01d      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a28      	ldr	r2, [pc, #160]	; (8005418 <HAL_DMA_Start_IT+0x49c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d018      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a27      	ldr	r2, [pc, #156]	; (800541c <HAL_DMA_Start_IT+0x4a0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <HAL_DMA_Start_IT+0x4a4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00e      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a24      	ldr	r2, [pc, #144]	; (8005424 <HAL_DMA_Start_IT+0x4a8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a22      	ldr	r2, [pc, #136]	; (8005428 <HAL_DMA_Start_IT+0x4ac>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_DMA_Start_IT+0x430>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a21      	ldr	r2, [pc, #132]	; (800542c <HAL_DMA_Start_IT+0x4b0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <HAL_DMA_Start_IT+0x442>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e012      	b.n	80053e4 <HAL_DMA_Start_IT+0x468>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e009      	b.n	80053e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40020010 	.word	0x40020010
 80053f4:	40020028 	.word	0x40020028
 80053f8:	40020040 	.word	0x40020040
 80053fc:	40020058 	.word	0x40020058
 8005400:	40020070 	.word	0x40020070
 8005404:	40020088 	.word	0x40020088
 8005408:	400200a0 	.word	0x400200a0
 800540c:	400200b8 	.word	0x400200b8
 8005410:	40020410 	.word	0x40020410
 8005414:	40020428 	.word	0x40020428
 8005418:	40020440 	.word	0x40020440
 800541c:	40020458 	.word	0x40020458
 8005420:	40020470 	.word	0x40020470
 8005424:	40020488 	.word	0x40020488
 8005428:	400204a0 	.word	0x400204a0
 800542c:	400204b8 	.word	0x400204b8
 8005430:	58025408 	.word	0x58025408
 8005434:	5802541c 	.word	0x5802541c
 8005438:	58025430 	.word	0x58025430
 800543c:	58025444 	.word	0x58025444
 8005440:	58025458 	.word	0x58025458
 8005444:	5802546c 	.word	0x5802546c
 8005448:	58025480 	.word	0x58025480
 800544c:	58025494 	.word	0x58025494

08005450 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005458:	f7fd fb44 	bl	8002ae4 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e2dc      	b.n	8005a22 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d008      	beq.n	8005486 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2280      	movs	r2, #128	; 0x80
 8005478:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e2cd      	b.n	8005a22 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a76      	ldr	r2, [pc, #472]	; (8005664 <HAL_DMA_Abort+0x214>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d04a      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a74      	ldr	r2, [pc, #464]	; (8005668 <HAL_DMA_Abort+0x218>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d045      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a73      	ldr	r2, [pc, #460]	; (800566c <HAL_DMA_Abort+0x21c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d040      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a71      	ldr	r2, [pc, #452]	; (8005670 <HAL_DMA_Abort+0x220>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d03b      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a70      	ldr	r2, [pc, #448]	; (8005674 <HAL_DMA_Abort+0x224>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d036      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a6e      	ldr	r2, [pc, #440]	; (8005678 <HAL_DMA_Abort+0x228>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d031      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a6d      	ldr	r2, [pc, #436]	; (800567c <HAL_DMA_Abort+0x22c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d02c      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a6b      	ldr	r2, [pc, #428]	; (8005680 <HAL_DMA_Abort+0x230>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d027      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6a      	ldr	r2, [pc, #424]	; (8005684 <HAL_DMA_Abort+0x234>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a68      	ldr	r2, [pc, #416]	; (8005688 <HAL_DMA_Abort+0x238>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01d      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a67      	ldr	r2, [pc, #412]	; (800568c <HAL_DMA_Abort+0x23c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d018      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a65      	ldr	r2, [pc, #404]	; (8005690 <HAL_DMA_Abort+0x240>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a64      	ldr	r2, [pc, #400]	; (8005694 <HAL_DMA_Abort+0x244>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a62      	ldr	r2, [pc, #392]	; (8005698 <HAL_DMA_Abort+0x248>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a61      	ldr	r2, [pc, #388]	; (800569c <HAL_DMA_Abort+0x24c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_DMA_Abort+0xd6>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5f      	ldr	r2, [pc, #380]	; (80056a0 <HAL_DMA_Abort+0x250>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <HAL_DMA_Abort+0xda>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_DMA_Abort+0xdc>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 021e 	bic.w	r2, r2, #30
 800553e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800554e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e00a      	b.n	800556e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 020e 	bic.w	r2, r2, #14
 8005566:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3c      	ldr	r2, [pc, #240]	; (8005664 <HAL_DMA_Abort+0x214>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d072      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3a      	ldr	r2, [pc, #232]	; (8005668 <HAL_DMA_Abort+0x218>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d06d      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a39      	ldr	r2, [pc, #228]	; (800566c <HAL_DMA_Abort+0x21c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d068      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a37      	ldr	r2, [pc, #220]	; (8005670 <HAL_DMA_Abort+0x220>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d063      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a36      	ldr	r2, [pc, #216]	; (8005674 <HAL_DMA_Abort+0x224>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d05e      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a34      	ldr	r2, [pc, #208]	; (8005678 <HAL_DMA_Abort+0x228>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d059      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a33      	ldr	r2, [pc, #204]	; (800567c <HAL_DMA_Abort+0x22c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d054      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a31      	ldr	r2, [pc, #196]	; (8005680 <HAL_DMA_Abort+0x230>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04f      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a30      	ldr	r2, [pc, #192]	; (8005684 <HAL_DMA_Abort+0x234>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d04a      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <HAL_DMA_Abort+0x238>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d045      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2d      	ldr	r2, [pc, #180]	; (800568c <HAL_DMA_Abort+0x23c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d040      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <HAL_DMA_Abort+0x240>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d03b      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <HAL_DMA_Abort+0x244>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d036      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a28      	ldr	r2, [pc, #160]	; (8005698 <HAL_DMA_Abort+0x248>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d031      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a27      	ldr	r2, [pc, #156]	; (800569c <HAL_DMA_Abort+0x24c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d02c      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <HAL_DMA_Abort+0x250>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d027      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a24      	ldr	r2, [pc, #144]	; (80056a4 <HAL_DMA_Abort+0x254>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d022      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <HAL_DMA_Abort+0x258>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01d      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a21      	ldr	r2, [pc, #132]	; (80056ac <HAL_DMA_Abort+0x25c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d018      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <HAL_DMA_Abort+0x260>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <HAL_DMA_Abort+0x264>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1c      	ldr	r2, [pc, #112]	; (80056b8 <HAL_DMA_Abort+0x268>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d009      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_DMA_Abort+0x26c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_DMA_Abort+0x20e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <HAL_DMA_Abort+0x270>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d132      	bne.n	80056c4 <HAL_DMA_Abort+0x274>
 800565e:	2301      	movs	r3, #1
 8005660:	e031      	b.n	80056c6 <HAL_DMA_Abort+0x276>
 8005662:	bf00      	nop
 8005664:	40020010 	.word	0x40020010
 8005668:	40020028 	.word	0x40020028
 800566c:	40020040 	.word	0x40020040
 8005670:	40020058 	.word	0x40020058
 8005674:	40020070 	.word	0x40020070
 8005678:	40020088 	.word	0x40020088
 800567c:	400200a0 	.word	0x400200a0
 8005680:	400200b8 	.word	0x400200b8
 8005684:	40020410 	.word	0x40020410
 8005688:	40020428 	.word	0x40020428
 800568c:	40020440 	.word	0x40020440
 8005690:	40020458 	.word	0x40020458
 8005694:	40020470 	.word	0x40020470
 8005698:	40020488 	.word	0x40020488
 800569c:	400204a0 	.word	0x400204a0
 80056a0:	400204b8 	.word	0x400204b8
 80056a4:	58025408 	.word	0x58025408
 80056a8:	5802541c 	.word	0x5802541c
 80056ac:	58025430 	.word	0x58025430
 80056b0:	58025444 	.word	0x58025444
 80056b4:	58025458 	.word	0x58025458
 80056b8:	5802546c 	.word	0x5802546c
 80056bc:	58025480 	.word	0x58025480
 80056c0:	58025494 	.word	0x58025494
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6d      	ldr	r2, [pc, #436]	; (8005894 <HAL_DMA_Abort+0x444>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d04a      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6b      	ldr	r2, [pc, #428]	; (8005898 <HAL_DMA_Abort+0x448>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d045      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6a      	ldr	r2, [pc, #424]	; (800589c <HAL_DMA_Abort+0x44c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d040      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a68      	ldr	r2, [pc, #416]	; (80058a0 <HAL_DMA_Abort+0x450>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d03b      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a67      	ldr	r2, [pc, #412]	; (80058a4 <HAL_DMA_Abort+0x454>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d036      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a65      	ldr	r2, [pc, #404]	; (80058a8 <HAL_DMA_Abort+0x458>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d031      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a64      	ldr	r2, [pc, #400]	; (80058ac <HAL_DMA_Abort+0x45c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d02c      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a62      	ldr	r2, [pc, #392]	; (80058b0 <HAL_DMA_Abort+0x460>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d027      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a61      	ldr	r2, [pc, #388]	; (80058b4 <HAL_DMA_Abort+0x464>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d022      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5f      	ldr	r2, [pc, #380]	; (80058b8 <HAL_DMA_Abort+0x468>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01d      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a5e      	ldr	r2, [pc, #376]	; (80058bc <HAL_DMA_Abort+0x46c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d018      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a5c      	ldr	r2, [pc, #368]	; (80058c0 <HAL_DMA_Abort+0x470>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a5b      	ldr	r2, [pc, #364]	; (80058c4 <HAL_DMA_Abort+0x474>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a59      	ldr	r2, [pc, #356]	; (80058c8 <HAL_DMA_Abort+0x478>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a58      	ldr	r2, [pc, #352]	; (80058cc <HAL_DMA_Abort+0x47c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_DMA_Abort+0x32a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a56      	ldr	r2, [pc, #344]	; (80058d0 <HAL_DMA_Abort+0x480>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <HAL_DMA_Abort+0x33c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e007      	b.n	800579c <HAL_DMA_Abort+0x34c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800579c:	e013      	b.n	80057c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800579e:	f7fd f9a1 	bl	8002ae4 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d90c      	bls.n	80057c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2203      	movs	r2, #3
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e12d      	b.n	8005a22 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e5      	bne.n	800579e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <HAL_DMA_Abort+0x444>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d04a      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2d      	ldr	r2, [pc, #180]	; (8005898 <HAL_DMA_Abort+0x448>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d045      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2c      	ldr	r2, [pc, #176]	; (800589c <HAL_DMA_Abort+0x44c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d040      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <HAL_DMA_Abort+0x450>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d03b      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a29      	ldr	r2, [pc, #164]	; (80058a4 <HAL_DMA_Abort+0x454>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d036      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a27      	ldr	r2, [pc, #156]	; (80058a8 <HAL_DMA_Abort+0x458>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a26      	ldr	r2, [pc, #152]	; (80058ac <HAL_DMA_Abort+0x45c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d02c      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a24      	ldr	r2, [pc, #144]	; (80058b0 <HAL_DMA_Abort+0x460>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d027      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a23      	ldr	r2, [pc, #140]	; (80058b4 <HAL_DMA_Abort+0x464>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a21      	ldr	r2, [pc, #132]	; (80058b8 <HAL_DMA_Abort+0x468>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01d      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a20      	ldr	r2, [pc, #128]	; (80058bc <HAL_DMA_Abort+0x46c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_DMA_Abort+0x470>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <HAL_DMA_Abort+0x474>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_DMA_Abort+0x478>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <HAL_DMA_Abort+0x47c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_DMA_Abort+0x422>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_DMA_Abort+0x480>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <HAL_DMA_Abort+0x426>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_DMA_Abort+0x428>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d02b      	beq.n	80058d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005880:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	223f      	movs	r2, #63	; 0x3f
 800588c:	409a      	lsls	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	609a      	str	r2, [r3, #8]
 8005892:	e02a      	b.n	80058ea <HAL_DMA_Abort+0x49a>
 8005894:	40020010 	.word	0x40020010
 8005898:	40020028 	.word	0x40020028
 800589c:	40020040 	.word	0x40020040
 80058a0:	40020058 	.word	0x40020058
 80058a4:	40020070 	.word	0x40020070
 80058a8:	40020088 	.word	0x40020088
 80058ac:	400200a0 	.word	0x400200a0
 80058b0:	400200b8 	.word	0x400200b8
 80058b4:	40020410 	.word	0x40020410
 80058b8:	40020428 	.word	0x40020428
 80058bc:	40020440 	.word	0x40020440
 80058c0:	40020458 	.word	0x40020458
 80058c4:	40020470 	.word	0x40020470
 80058c8:	40020488 	.word	0x40020488
 80058cc:	400204a0 	.word	0x400204a0
 80058d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2201      	movs	r2, #1
 80058e4:	409a      	lsls	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a4f      	ldr	r2, [pc, #316]	; (8005a2c <HAL_DMA_Abort+0x5dc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d072      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a4d      	ldr	r2, [pc, #308]	; (8005a30 <HAL_DMA_Abort+0x5e0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d06d      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a4c      	ldr	r2, [pc, #304]	; (8005a34 <HAL_DMA_Abort+0x5e4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d068      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a4a      	ldr	r2, [pc, #296]	; (8005a38 <HAL_DMA_Abort+0x5e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d063      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a49      	ldr	r2, [pc, #292]	; (8005a3c <HAL_DMA_Abort+0x5ec>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d05e      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a47      	ldr	r2, [pc, #284]	; (8005a40 <HAL_DMA_Abort+0x5f0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d059      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a46      	ldr	r2, [pc, #280]	; (8005a44 <HAL_DMA_Abort+0x5f4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d054      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a44      	ldr	r2, [pc, #272]	; (8005a48 <HAL_DMA_Abort+0x5f8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d04f      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a43      	ldr	r2, [pc, #268]	; (8005a4c <HAL_DMA_Abort+0x5fc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d04a      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a41      	ldr	r2, [pc, #260]	; (8005a50 <HAL_DMA_Abort+0x600>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d045      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a40      	ldr	r2, [pc, #256]	; (8005a54 <HAL_DMA_Abort+0x604>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d040      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3e      	ldr	r2, [pc, #248]	; (8005a58 <HAL_DMA_Abort+0x608>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d03b      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a3d      	ldr	r2, [pc, #244]	; (8005a5c <HAL_DMA_Abort+0x60c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d036      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a3b      	ldr	r2, [pc, #236]	; (8005a60 <HAL_DMA_Abort+0x610>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d031      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <HAL_DMA_Abort+0x614>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d02c      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a38      	ldr	r2, [pc, #224]	; (8005a68 <HAL_DMA_Abort+0x618>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d027      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a37      	ldr	r2, [pc, #220]	; (8005a6c <HAL_DMA_Abort+0x61c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d022      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a35      	ldr	r2, [pc, #212]	; (8005a70 <HAL_DMA_Abort+0x620>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01d      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a34      	ldr	r2, [pc, #208]	; (8005a74 <HAL_DMA_Abort+0x624>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d018      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a32      	ldr	r2, [pc, #200]	; (8005a78 <HAL_DMA_Abort+0x628>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a31      	ldr	r2, [pc, #196]	; (8005a7c <HAL_DMA_Abort+0x62c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2f      	ldr	r2, [pc, #188]	; (8005a80 <HAL_DMA_Abort+0x630>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2e      	ldr	r2, [pc, #184]	; (8005a84 <HAL_DMA_Abort+0x634>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_DMA_Abort+0x58a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a2c      	ldr	r2, [pc, #176]	; (8005a88 <HAL_DMA_Abort+0x638>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d101      	bne.n	80059de <HAL_DMA_Abort+0x58e>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <HAL_DMA_Abort+0x590>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d015      	beq.n	8005a10 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a04:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a0e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40020010 	.word	0x40020010
 8005a30:	40020028 	.word	0x40020028
 8005a34:	40020040 	.word	0x40020040
 8005a38:	40020058 	.word	0x40020058
 8005a3c:	40020070 	.word	0x40020070
 8005a40:	40020088 	.word	0x40020088
 8005a44:	400200a0 	.word	0x400200a0
 8005a48:	400200b8 	.word	0x400200b8
 8005a4c:	40020410 	.word	0x40020410
 8005a50:	40020428 	.word	0x40020428
 8005a54:	40020440 	.word	0x40020440
 8005a58:	40020458 	.word	0x40020458
 8005a5c:	40020470 	.word	0x40020470
 8005a60:	40020488 	.word	0x40020488
 8005a64:	400204a0 	.word	0x400204a0
 8005a68:	400204b8 	.word	0x400204b8
 8005a6c:	58025408 	.word	0x58025408
 8005a70:	5802541c 	.word	0x5802541c
 8005a74:	58025430 	.word	0x58025430
 8005a78:	58025444 	.word	0x58025444
 8005a7c:	58025458 	.word	0x58025458
 8005a80:	5802546c 	.word	0x5802546c
 8005a84:	58025480 	.word	0x58025480
 8005a88:	58025494 	.word	0x58025494

08005a8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e237      	b.n	8005f0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e22c      	b.n	8005f0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a5c      	ldr	r2, [pc, #368]	; (8005c2c <HAL_DMA_Abort_IT+0x1a0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d04a      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a5b      	ldr	r2, [pc, #364]	; (8005c30 <HAL_DMA_Abort_IT+0x1a4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d045      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a59      	ldr	r2, [pc, #356]	; (8005c34 <HAL_DMA_Abort_IT+0x1a8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d040      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a58      	ldr	r2, [pc, #352]	; (8005c38 <HAL_DMA_Abort_IT+0x1ac>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d03b      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a56      	ldr	r2, [pc, #344]	; (8005c3c <HAL_DMA_Abort_IT+0x1b0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d036      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a55      	ldr	r2, [pc, #340]	; (8005c40 <HAL_DMA_Abort_IT+0x1b4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d031      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a53      	ldr	r2, [pc, #332]	; (8005c44 <HAL_DMA_Abort_IT+0x1b8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d02c      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a52      	ldr	r2, [pc, #328]	; (8005c48 <HAL_DMA_Abort_IT+0x1bc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d027      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a50      	ldr	r2, [pc, #320]	; (8005c4c <HAL_DMA_Abort_IT+0x1c0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d022      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4f      	ldr	r2, [pc, #316]	; (8005c50 <HAL_DMA_Abort_IT+0x1c4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01d      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a4d      	ldr	r2, [pc, #308]	; (8005c54 <HAL_DMA_Abort_IT+0x1c8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a4c      	ldr	r2, [pc, #304]	; (8005c58 <HAL_DMA_Abort_IT+0x1cc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a4a      	ldr	r2, [pc, #296]	; (8005c5c <HAL_DMA_Abort_IT+0x1d0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a49      	ldr	r2, [pc, #292]	; (8005c60 <HAL_DMA_Abort_IT+0x1d4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a47      	ldr	r2, [pc, #284]	; (8005c64 <HAL_DMA_Abort_IT+0x1d8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_DMA_Abort_IT+0xc8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a46      	ldr	r2, [pc, #280]	; (8005c68 <HAL_DMA_Abort_IT+0x1dc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d101      	bne.n	8005b58 <HAL_DMA_Abort_IT+0xcc>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <HAL_DMA_Abort_IT+0xce>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8086 	beq.w	8005c6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2204      	movs	r2, #4
 8005b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a2f      	ldr	r2, [pc, #188]	; (8005c2c <HAL_DMA_Abort_IT+0x1a0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d04a      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a2e      	ldr	r2, [pc, #184]	; (8005c30 <HAL_DMA_Abort_IT+0x1a4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d045      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2c      	ldr	r2, [pc, #176]	; (8005c34 <HAL_DMA_Abort_IT+0x1a8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d040      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2b      	ldr	r2, [pc, #172]	; (8005c38 <HAL_DMA_Abort_IT+0x1ac>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d03b      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a29      	ldr	r2, [pc, #164]	; (8005c3c <HAL_DMA_Abort_IT+0x1b0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d036      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <HAL_DMA_Abort_IT+0x1b4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d031      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <HAL_DMA_Abort_IT+0x1b8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d02c      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <HAL_DMA_Abort_IT+0x1bc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d027      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a23      	ldr	r2, [pc, #140]	; (8005c4c <HAL_DMA_Abort_IT+0x1c0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d022      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <HAL_DMA_Abort_IT+0x1c4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d01d      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	; (8005c54 <HAL_DMA_Abort_IT+0x1c8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d018      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <HAL_DMA_Abort_IT+0x1cc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <HAL_DMA_Abort_IT+0x1d0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00e      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <HAL_DMA_Abort_IT+0x1d4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d009      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <HAL_DMA_Abort_IT+0x1d8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x17c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <HAL_DMA_Abort_IT+0x1dc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <HAL_DMA_Abort_IT+0x18e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e178      	b.n	8005f0c <HAL_DMA_Abort_IT+0x480>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e16f      	b.n	8005f0c <HAL_DMA_Abort_IT+0x480>
 8005c2c:	40020010 	.word	0x40020010
 8005c30:	40020028 	.word	0x40020028
 8005c34:	40020040 	.word	0x40020040
 8005c38:	40020058 	.word	0x40020058
 8005c3c:	40020070 	.word	0x40020070
 8005c40:	40020088 	.word	0x40020088
 8005c44:	400200a0 	.word	0x400200a0
 8005c48:	400200b8 	.word	0x400200b8
 8005c4c:	40020410 	.word	0x40020410
 8005c50:	40020428 	.word	0x40020428
 8005c54:	40020440 	.word	0x40020440
 8005c58:	40020458 	.word	0x40020458
 8005c5c:	40020470 	.word	0x40020470
 8005c60:	40020488 	.word	0x40020488
 8005c64:	400204a0 	.word	0x400204a0
 8005c68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 020e 	bic.w	r2, r2, #14
 8005c7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6c      	ldr	r2, [pc, #432]	; (8005e34 <HAL_DMA_Abort_IT+0x3a8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d04a      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a6b      	ldr	r2, [pc, #428]	; (8005e38 <HAL_DMA_Abort_IT+0x3ac>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d045      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a69      	ldr	r2, [pc, #420]	; (8005e3c <HAL_DMA_Abort_IT+0x3b0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d040      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a68      	ldr	r2, [pc, #416]	; (8005e40 <HAL_DMA_Abort_IT+0x3b4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d03b      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a66      	ldr	r2, [pc, #408]	; (8005e44 <HAL_DMA_Abort_IT+0x3b8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d036      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a65      	ldr	r2, [pc, #404]	; (8005e48 <HAL_DMA_Abort_IT+0x3bc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d031      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a63      	ldr	r2, [pc, #396]	; (8005e4c <HAL_DMA_Abort_IT+0x3c0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02c      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a62      	ldr	r2, [pc, #392]	; (8005e50 <HAL_DMA_Abort_IT+0x3c4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d027      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a60      	ldr	r2, [pc, #384]	; (8005e54 <HAL_DMA_Abort_IT+0x3c8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a5f      	ldr	r2, [pc, #380]	; (8005e58 <HAL_DMA_Abort_IT+0x3cc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d01d      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a5d      	ldr	r2, [pc, #372]	; (8005e5c <HAL_DMA_Abort_IT+0x3d0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5c      	ldr	r2, [pc, #368]	; (8005e60 <HAL_DMA_Abort_IT+0x3d4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5a      	ldr	r2, [pc, #360]	; (8005e64 <HAL_DMA_Abort_IT+0x3d8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a59      	ldr	r2, [pc, #356]	; (8005e68 <HAL_DMA_Abort_IT+0x3dc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a57      	ldr	r2, [pc, #348]	; (8005e6c <HAL_DMA_Abort_IT+0x3e0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x290>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <HAL_DMA_Abort_IT+0x3e4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <HAL_DMA_Abort_IT+0x2a2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e007      	b.n	8005d3e <HAL_DMA_Abort_IT+0x2b2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0201 	bic.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3c      	ldr	r2, [pc, #240]	; (8005e34 <HAL_DMA_Abort_IT+0x3a8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d072      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a3a      	ldr	r2, [pc, #232]	; (8005e38 <HAL_DMA_Abort_IT+0x3ac>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d06d      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a39      	ldr	r2, [pc, #228]	; (8005e3c <HAL_DMA_Abort_IT+0x3b0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d068      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a37      	ldr	r2, [pc, #220]	; (8005e40 <HAL_DMA_Abort_IT+0x3b4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d063      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a36      	ldr	r2, [pc, #216]	; (8005e44 <HAL_DMA_Abort_IT+0x3b8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d05e      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a34      	ldr	r2, [pc, #208]	; (8005e48 <HAL_DMA_Abort_IT+0x3bc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d059      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a33      	ldr	r2, [pc, #204]	; (8005e4c <HAL_DMA_Abort_IT+0x3c0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d054      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a31      	ldr	r2, [pc, #196]	; (8005e50 <HAL_DMA_Abort_IT+0x3c4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d04f      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a30      	ldr	r2, [pc, #192]	; (8005e54 <HAL_DMA_Abort_IT+0x3c8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d04a      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a2e      	ldr	r2, [pc, #184]	; (8005e58 <HAL_DMA_Abort_IT+0x3cc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d045      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2d      	ldr	r2, [pc, #180]	; (8005e5c <HAL_DMA_Abort_IT+0x3d0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d040      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <HAL_DMA_Abort_IT+0x3d4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d03b      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a2a      	ldr	r2, [pc, #168]	; (8005e64 <HAL_DMA_Abort_IT+0x3d8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d036      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a28      	ldr	r2, [pc, #160]	; (8005e68 <HAL_DMA_Abort_IT+0x3dc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d031      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a27      	ldr	r2, [pc, #156]	; (8005e6c <HAL_DMA_Abort_IT+0x3e0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d02c      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a25      	ldr	r2, [pc, #148]	; (8005e70 <HAL_DMA_Abort_IT+0x3e4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d027      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a24      	ldr	r2, [pc, #144]	; (8005e74 <HAL_DMA_Abort_IT+0x3e8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d022      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <HAL_DMA_Abort_IT+0x3ec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01d      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_DMA_Abort_IT+0x3f0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d018      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <HAL_DMA_Abort_IT+0x3f4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <HAL_DMA_Abort_IT+0x3f8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <HAL_DMA_Abort_IT+0x3fc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1b      	ldr	r2, [pc, #108]	; (8005e8c <HAL_DMA_Abort_IT+0x400>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x3a2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <HAL_DMA_Abort_IT+0x404>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d132      	bne.n	8005e94 <HAL_DMA_Abort_IT+0x408>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e031      	b.n	8005e96 <HAL_DMA_Abort_IT+0x40a>
 8005e32:	bf00      	nop
 8005e34:	40020010 	.word	0x40020010
 8005e38:	40020028 	.word	0x40020028
 8005e3c:	40020040 	.word	0x40020040
 8005e40:	40020058 	.word	0x40020058
 8005e44:	40020070 	.word	0x40020070
 8005e48:	40020088 	.word	0x40020088
 8005e4c:	400200a0 	.word	0x400200a0
 8005e50:	400200b8 	.word	0x400200b8
 8005e54:	40020410 	.word	0x40020410
 8005e58:	40020428 	.word	0x40020428
 8005e5c:	40020440 	.word	0x40020440
 8005e60:	40020458 	.word	0x40020458
 8005e64:	40020470 	.word	0x40020470
 8005e68:	40020488 	.word	0x40020488
 8005e6c:	400204a0 	.word	0x400204a0
 8005e70:	400204b8 	.word	0x400204b8
 8005e74:	58025408 	.word	0x58025408
 8005e78:	5802541c 	.word	0x5802541c
 8005e7c:	58025430 	.word	0x58025430
 8005e80:	58025444 	.word	0x58025444
 8005e84:	58025458 	.word	0x58025458
 8005e88:	5802546c 	.word	0x5802546c
 8005e8c:	58025480 	.word	0x58025480
 8005e90:	58025494 	.word	0x58025494
 8005e94:	2300      	movs	r3, #0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d028      	beq.n	8005eec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ea8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	2201      	movs	r2, #1
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ec8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00c      	beq.n	8005eec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ee0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005eea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f24:	4b67      	ldr	r3, [pc, #412]	; (80060c4 <HAL_DMA_IRQHandler+0x1ac>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a67      	ldr	r2, [pc, #412]	; (80060c8 <HAL_DMA_IRQHandler+0x1b0>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0a9b      	lsrs	r3, r3, #10
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a5f      	ldr	r2, [pc, #380]	; (80060cc <HAL_DMA_IRQHandler+0x1b4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d04a      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a5d      	ldr	r2, [pc, #372]	; (80060d0 <HAL_DMA_IRQHandler+0x1b8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d045      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5c      	ldr	r2, [pc, #368]	; (80060d4 <HAL_DMA_IRQHandler+0x1bc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d040      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5a      	ldr	r2, [pc, #360]	; (80060d8 <HAL_DMA_IRQHandler+0x1c0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d03b      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a59      	ldr	r2, [pc, #356]	; (80060dc <HAL_DMA_IRQHandler+0x1c4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d036      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a57      	ldr	r2, [pc, #348]	; (80060e0 <HAL_DMA_IRQHandler+0x1c8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d031      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a56      	ldr	r2, [pc, #344]	; (80060e4 <HAL_DMA_IRQHandler+0x1cc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d02c      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <HAL_DMA_IRQHandler+0x1d0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d027      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a53      	ldr	r2, [pc, #332]	; (80060ec <HAL_DMA_IRQHandler+0x1d4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d022      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a51      	ldr	r2, [pc, #324]	; (80060f0 <HAL_DMA_IRQHandler+0x1d8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01d      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a50      	ldr	r2, [pc, #320]	; (80060f4 <HAL_DMA_IRQHandler+0x1dc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d018      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a4e      	ldr	r2, [pc, #312]	; (80060f8 <HAL_DMA_IRQHandler+0x1e0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a4d      	ldr	r2, [pc, #308]	; (80060fc <HAL_DMA_IRQHandler+0x1e4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00e      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a4b      	ldr	r2, [pc, #300]	; (8006100 <HAL_DMA_IRQHandler+0x1e8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d009      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a4a      	ldr	r2, [pc, #296]	; (8006104 <HAL_DMA_IRQHandler+0x1ec>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <HAL_DMA_IRQHandler+0xd2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a48      	ldr	r2, [pc, #288]	; (8006108 <HAL_DMA_IRQHandler+0x1f0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d101      	bne.n	8005fee <HAL_DMA_IRQHandler+0xd6>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <HAL_DMA_IRQHandler+0xd8>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 842b 	beq.w	800684c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2208      	movs	r2, #8
 8006000:	409a      	lsls	r2, r3
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80a2 	beq.w	8006150 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2e      	ldr	r2, [pc, #184]	; (80060cc <HAL_DMA_IRQHandler+0x1b4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <HAL_DMA_IRQHandler+0x1b8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <HAL_DMA_IRQHandler+0x1bc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <HAL_DMA_IRQHandler+0x1c0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a28      	ldr	r2, [pc, #160]	; (80060dc <HAL_DMA_IRQHandler+0x1c4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <HAL_DMA_IRQHandler+0x1c8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a25      	ldr	r2, [pc, #148]	; (80060e4 <HAL_DMA_IRQHandler+0x1cc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <HAL_DMA_IRQHandler+0x1d0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a22      	ldr	r2, [pc, #136]	; (80060ec <HAL_DMA_IRQHandler+0x1d4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_DMA_IRQHandler+0x1d8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <HAL_DMA_IRQHandler+0x1dc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <HAL_DMA_IRQHandler+0x1e0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <HAL_DMA_IRQHandler+0x1e4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <HAL_DMA_IRQHandler+0x1e8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a19      	ldr	r2, [pc, #100]	; (8006104 <HAL_DMA_IRQHandler+0x1ec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_IRQHandler+0x194>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <HAL_DMA_IRQHandler+0x1f0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d12f      	bne.n	800610c <HAL_DMA_IRQHandler+0x1f4>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf14      	ite	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	2300      	moveq	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	e02e      	b.n	8006120 <HAL_DMA_IRQHandler+0x208>
 80060c2:	bf00      	nop
 80060c4:	24000000 	.word	0x24000000
 80060c8:	1b4e81b5 	.word	0x1b4e81b5
 80060cc:	40020010 	.word	0x40020010
 80060d0:	40020028 	.word	0x40020028
 80060d4:	40020040 	.word	0x40020040
 80060d8:	40020058 	.word	0x40020058
 80060dc:	40020070 	.word	0x40020070
 80060e0:	40020088 	.word	0x40020088
 80060e4:	400200a0 	.word	0x400200a0
 80060e8:	400200b8 	.word	0x400200b8
 80060ec:	40020410 	.word	0x40020410
 80060f0:	40020428 	.word	0x40020428
 80060f4:	40020440 	.word	0x40020440
 80060f8:	40020458 	.word	0x40020458
 80060fc:	40020470 	.word	0x40020470
 8006100:	40020488 	.word	0x40020488
 8006104:	400204a0 	.word	0x400204a0
 8006108:	400204b8 	.word	0x400204b8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	bf14      	ite	ne
 800611a:	2301      	movne	r3, #1
 800611c:	2300      	moveq	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d015      	beq.n	8006150 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0204 	bic.w	r2, r2, #4
 8006132:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2208      	movs	r2, #8
 800613e:	409a      	lsls	r2, r3
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006148:	f043 0201 	orr.w	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	fa22 f303 	lsr.w	r3, r2, r3
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d06e      	beq.n	8006244 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a69      	ldr	r2, [pc, #420]	; (8006310 <HAL_DMA_IRQHandler+0x3f8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d04a      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a67      	ldr	r2, [pc, #412]	; (8006314 <HAL_DMA_IRQHandler+0x3fc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d045      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a66      	ldr	r2, [pc, #408]	; (8006318 <HAL_DMA_IRQHandler+0x400>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d040      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a64      	ldr	r2, [pc, #400]	; (800631c <HAL_DMA_IRQHandler+0x404>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d03b      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a63      	ldr	r2, [pc, #396]	; (8006320 <HAL_DMA_IRQHandler+0x408>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d036      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a61      	ldr	r2, [pc, #388]	; (8006324 <HAL_DMA_IRQHandler+0x40c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d031      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a60      	ldr	r2, [pc, #384]	; (8006328 <HAL_DMA_IRQHandler+0x410>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d02c      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a5e      	ldr	r2, [pc, #376]	; (800632c <HAL_DMA_IRQHandler+0x414>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d027      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a5d      	ldr	r2, [pc, #372]	; (8006330 <HAL_DMA_IRQHandler+0x418>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d022      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5b      	ldr	r2, [pc, #364]	; (8006334 <HAL_DMA_IRQHandler+0x41c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01d      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5a      	ldr	r2, [pc, #360]	; (8006338 <HAL_DMA_IRQHandler+0x420>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d018      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a58      	ldr	r2, [pc, #352]	; (800633c <HAL_DMA_IRQHandler+0x424>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a57      	ldr	r2, [pc, #348]	; (8006340 <HAL_DMA_IRQHandler+0x428>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00e      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a55      	ldr	r2, [pc, #340]	; (8006344 <HAL_DMA_IRQHandler+0x42c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d009      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a54      	ldr	r2, [pc, #336]	; (8006348 <HAL_DMA_IRQHandler+0x430>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_DMA_IRQHandler+0x2ee>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a52      	ldr	r2, [pc, #328]	; (800634c <HAL_DMA_IRQHandler+0x434>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d10a      	bne.n	800621c <HAL_DMA_IRQHandler+0x304>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e003      	b.n	8006224 <HAL_DMA_IRQHandler+0x30c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	2201      	movs	r2, #1
 8006232:	409a      	lsls	r2, r3
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623c:	f043 0202 	orr.w	r2, r3, #2
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	2204      	movs	r2, #4
 800624e:	409a      	lsls	r2, r3
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 808f 	beq.w	8006378 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <HAL_DMA_IRQHandler+0x3f8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d04a      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2a      	ldr	r2, [pc, #168]	; (8006314 <HAL_DMA_IRQHandler+0x3fc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d045      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a29      	ldr	r2, [pc, #164]	; (8006318 <HAL_DMA_IRQHandler+0x400>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d040      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a27      	ldr	r2, [pc, #156]	; (800631c <HAL_DMA_IRQHandler+0x404>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d03b      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a26      	ldr	r2, [pc, #152]	; (8006320 <HAL_DMA_IRQHandler+0x408>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d036      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a24      	ldr	r2, [pc, #144]	; (8006324 <HAL_DMA_IRQHandler+0x40c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d031      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a23      	ldr	r2, [pc, #140]	; (8006328 <HAL_DMA_IRQHandler+0x410>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d02c      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a21      	ldr	r2, [pc, #132]	; (800632c <HAL_DMA_IRQHandler+0x414>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d027      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a20      	ldr	r2, [pc, #128]	; (8006330 <HAL_DMA_IRQHandler+0x418>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d022      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1e      	ldr	r2, [pc, #120]	; (8006334 <HAL_DMA_IRQHandler+0x41c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01d      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1d      	ldr	r2, [pc, #116]	; (8006338 <HAL_DMA_IRQHandler+0x420>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d018      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1b      	ldr	r2, [pc, #108]	; (800633c <HAL_DMA_IRQHandler+0x424>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <HAL_DMA_IRQHandler+0x428>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_DMA_IRQHandler+0x42c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <HAL_DMA_IRQHandler+0x430>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_DMA_IRQHandler+0x3e2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a15      	ldr	r2, [pc, #84]	; (800634c <HAL_DMA_IRQHandler+0x434>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d12a      	bne.n	8006350 <HAL_DMA_IRQHandler+0x438>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	e023      	b.n	8006358 <HAL_DMA_IRQHandler+0x440>
 8006310:	40020010 	.word	0x40020010
 8006314:	40020028 	.word	0x40020028
 8006318:	40020040 	.word	0x40020040
 800631c:	40020058 	.word	0x40020058
 8006320:	40020070 	.word	0x40020070
 8006324:	40020088 	.word	0x40020088
 8006328:	400200a0 	.word	0x400200a0
 800632c:	400200b8 	.word	0x400200b8
 8006330:	40020410 	.word	0x40020410
 8006334:	40020428 	.word	0x40020428
 8006338:	40020440 	.word	0x40020440
 800633c:	40020458 	.word	0x40020458
 8006340:	40020470 	.word	0x40020470
 8006344:	40020488 	.word	0x40020488
 8006348:	400204a0 	.word	0x400204a0
 800634c:	400204b8 	.word	0x400204b8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	2204      	movs	r2, #4
 8006366:	409a      	lsls	r2, r3
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2210      	movs	r2, #16
 8006382:	409a      	lsls	r2, r3
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80a6 	beq.w	80064da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a85      	ldr	r2, [pc, #532]	; (80065a8 <HAL_DMA_IRQHandler+0x690>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d04a      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a83      	ldr	r2, [pc, #524]	; (80065ac <HAL_DMA_IRQHandler+0x694>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d045      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a82      	ldr	r2, [pc, #520]	; (80065b0 <HAL_DMA_IRQHandler+0x698>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d040      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a80      	ldr	r2, [pc, #512]	; (80065b4 <HAL_DMA_IRQHandler+0x69c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d03b      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7f      	ldr	r2, [pc, #508]	; (80065b8 <HAL_DMA_IRQHandler+0x6a0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d036      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a7d      	ldr	r2, [pc, #500]	; (80065bc <HAL_DMA_IRQHandler+0x6a4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d031      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a7c      	ldr	r2, [pc, #496]	; (80065c0 <HAL_DMA_IRQHandler+0x6a8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d02c      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a7a      	ldr	r2, [pc, #488]	; (80065c4 <HAL_DMA_IRQHandler+0x6ac>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d027      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a79      	ldr	r2, [pc, #484]	; (80065c8 <HAL_DMA_IRQHandler+0x6b0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d022      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a77      	ldr	r2, [pc, #476]	; (80065cc <HAL_DMA_IRQHandler+0x6b4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01d      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a76      	ldr	r2, [pc, #472]	; (80065d0 <HAL_DMA_IRQHandler+0x6b8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a74      	ldr	r2, [pc, #464]	; (80065d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a73      	ldr	r2, [pc, #460]	; (80065d8 <HAL_DMA_IRQHandler+0x6c0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a71      	ldr	r2, [pc, #452]	; (80065dc <HAL_DMA_IRQHandler+0x6c4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a70      	ldr	r2, [pc, #448]	; (80065e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_DMA_IRQHandler+0x516>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a6e      	ldr	r2, [pc, #440]	; (80065e4 <HAL_DMA_IRQHandler+0x6cc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10a      	bne.n	8006444 <HAL_DMA_IRQHandler+0x52c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e009      	b.n	8006458 <HAL_DMA_IRQHandler+0x540>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b00      	cmp	r3, #0
 8006450:	bf14      	ite	ne
 8006452:	2301      	movne	r3, #1
 8006454:	2300      	moveq	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d03e      	beq.n	80064da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2210      	movs	r2, #16
 8006466:	409a      	lsls	r2, r3
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d018      	beq.n	80064ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d108      	bne.n	800649a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d024      	beq.n	80064da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
 8006498:	e01f      	b.n	80064da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d01b      	beq.n	80064da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	e016      	b.n	80064da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d107      	bne.n	80064ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0208 	bic.w	r2, r2, #8
 80064c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2220      	movs	r2, #32
 80064e4:	409a      	lsls	r2, r3
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8110 	beq.w	8006710 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2c      	ldr	r2, [pc, #176]	; (80065a8 <HAL_DMA_IRQHandler+0x690>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d04a      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2b      	ldr	r2, [pc, #172]	; (80065ac <HAL_DMA_IRQHandler+0x694>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d045      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a29      	ldr	r2, [pc, #164]	; (80065b0 <HAL_DMA_IRQHandler+0x698>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d040      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a28      	ldr	r2, [pc, #160]	; (80065b4 <HAL_DMA_IRQHandler+0x69c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d03b      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a26      	ldr	r2, [pc, #152]	; (80065b8 <HAL_DMA_IRQHandler+0x6a0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d036      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a25      	ldr	r2, [pc, #148]	; (80065bc <HAL_DMA_IRQHandler+0x6a4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d031      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a23      	ldr	r2, [pc, #140]	; (80065c0 <HAL_DMA_IRQHandler+0x6a8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02c      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <HAL_DMA_IRQHandler+0x6ac>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d027      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a20      	ldr	r2, [pc, #128]	; (80065c8 <HAL_DMA_IRQHandler+0x6b0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d022      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <HAL_DMA_IRQHandler+0x6b4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01d      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <HAL_DMA_IRQHandler+0x6b8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d018      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <HAL_DMA_IRQHandler+0x6c0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a19      	ldr	r2, [pc, #100]	; (80065dc <HAL_DMA_IRQHandler+0x6c4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a17      	ldr	r2, [pc, #92]	; (80065e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_DMA_IRQHandler+0x678>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a16      	ldr	r2, [pc, #88]	; (80065e4 <HAL_DMA_IRQHandler+0x6cc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d12b      	bne.n	80065e8 <HAL_DMA_IRQHandler+0x6d0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	2b00      	cmp	r3, #0
 800659c:	bf14      	ite	ne
 800659e:	2301      	movne	r3, #1
 80065a0:	2300      	moveq	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	e02a      	b.n	80065fc <HAL_DMA_IRQHandler+0x6e4>
 80065a6:	bf00      	nop
 80065a8:	40020010 	.word	0x40020010
 80065ac:	40020028 	.word	0x40020028
 80065b0:	40020040 	.word	0x40020040
 80065b4:	40020058 	.word	0x40020058
 80065b8:	40020070 	.word	0x40020070
 80065bc:	40020088 	.word	0x40020088
 80065c0:	400200a0 	.word	0x400200a0
 80065c4:	400200b8 	.word	0x400200b8
 80065c8:	40020410 	.word	0x40020410
 80065cc:	40020428 	.word	0x40020428
 80065d0:	40020440 	.word	0x40020440
 80065d4:	40020458 	.word	0x40020458
 80065d8:	40020470 	.word	0x40020470
 80065dc:	40020488 	.word	0x40020488
 80065e0:	400204a0 	.word	0x400204a0
 80065e4:	400204b8 	.word	0x400204b8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8087 	beq.w	8006710 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2220      	movs	r2, #32
 800660c:	409a      	lsls	r2, r3
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b04      	cmp	r3, #4
 800661c:	d139      	bne.n	8006692 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0216 	bic.w	r2, r2, #22
 800662c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <HAL_DMA_IRQHandler+0x736>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0208 	bic.w	r2, r2, #8
 800665c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	223f      	movs	r2, #63	; 0x3f
 8006668:	409a      	lsls	r2, r3
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 834a 	beq.w	8006d1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
          }
          return;
 8006690:	e344      	b.n	8006d1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d018      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d02c      	beq.n	8006710 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	e027      	b.n	8006710 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d023      	beq.n	8006710 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
 80066d0:	e01e      	b.n	8006710 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10f      	bne.n	8006700 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0210 	bic.w	r2, r2, #16
 80066ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8306 	beq.w	8006d26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8088 	beq.w	8006838 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2204      	movs	r2, #4
 800672c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a7a      	ldr	r2, [pc, #488]	; (8006920 <HAL_DMA_IRQHandler+0xa08>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d04a      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a79      	ldr	r2, [pc, #484]	; (8006924 <HAL_DMA_IRQHandler+0xa0c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d045      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a77      	ldr	r2, [pc, #476]	; (8006928 <HAL_DMA_IRQHandler+0xa10>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d040      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a76      	ldr	r2, [pc, #472]	; (800692c <HAL_DMA_IRQHandler+0xa14>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d03b      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a74      	ldr	r2, [pc, #464]	; (8006930 <HAL_DMA_IRQHandler+0xa18>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d036      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a73      	ldr	r2, [pc, #460]	; (8006934 <HAL_DMA_IRQHandler+0xa1c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d031      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a71      	ldr	r2, [pc, #452]	; (8006938 <HAL_DMA_IRQHandler+0xa20>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d02c      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a70      	ldr	r2, [pc, #448]	; (800693c <HAL_DMA_IRQHandler+0xa24>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d027      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a6e      	ldr	r2, [pc, #440]	; (8006940 <HAL_DMA_IRQHandler+0xa28>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d022      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a6d      	ldr	r2, [pc, #436]	; (8006944 <HAL_DMA_IRQHandler+0xa2c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d01d      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a6b      	ldr	r2, [pc, #428]	; (8006948 <HAL_DMA_IRQHandler+0xa30>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d018      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a6a      	ldr	r2, [pc, #424]	; (800694c <HAL_DMA_IRQHandler+0xa34>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a68      	ldr	r2, [pc, #416]	; (8006950 <HAL_DMA_IRQHandler+0xa38>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00e      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a67      	ldr	r2, [pc, #412]	; (8006954 <HAL_DMA_IRQHandler+0xa3c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d009      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a65      	ldr	r2, [pc, #404]	; (8006958 <HAL_DMA_IRQHandler+0xa40>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x8b8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a64      	ldr	r2, [pc, #400]	; (800695c <HAL_DMA_IRQHandler+0xa44>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d108      	bne.n	80067e2 <HAL_DMA_IRQHandler+0x8ca>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e007      	b.n	80067f2 <HAL_DMA_IRQHandler+0x8da>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d307      	bcc.n	800680e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1f2      	bne.n	80067f2 <HAL_DMA_IRQHandler+0x8da>
 800680c:	e000      	b.n	8006810 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800680e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2203      	movs	r2, #3
 8006822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006826:	e003      	b.n	8006830 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8272 	beq.w	8006d26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
 800684a:	e26c      	b.n	8006d26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a43      	ldr	r2, [pc, #268]	; (8006960 <HAL_DMA_IRQHandler+0xa48>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d022      	beq.n	800689c <HAL_DMA_IRQHandler+0x984>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a42      	ldr	r2, [pc, #264]	; (8006964 <HAL_DMA_IRQHandler+0xa4c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d01d      	beq.n	800689c <HAL_DMA_IRQHandler+0x984>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a40      	ldr	r2, [pc, #256]	; (8006968 <HAL_DMA_IRQHandler+0xa50>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d018      	beq.n	800689c <HAL_DMA_IRQHandler+0x984>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a3f      	ldr	r2, [pc, #252]	; (800696c <HAL_DMA_IRQHandler+0xa54>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d013      	beq.n	800689c <HAL_DMA_IRQHandler+0x984>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3d      	ldr	r2, [pc, #244]	; (8006970 <HAL_DMA_IRQHandler+0xa58>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00e      	beq.n	800689c <HAL_DMA_IRQHandler+0x984>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a3c      	ldr	r2, [pc, #240]	; (8006974 <HAL_DMA_IRQHandler+0xa5c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_DMA_IRQHandler+0x984>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a3a      	ldr	r2, [pc, #232]	; (8006978 <HAL_DMA_IRQHandler+0xa60>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_DMA_IRQHandler+0x984>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a39      	ldr	r2, [pc, #228]	; (800697c <HAL_DMA_IRQHandler+0xa64>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d101      	bne.n	80068a0 <HAL_DMA_IRQHandler+0x988>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <HAL_DMA_IRQHandler+0x98a>
 80068a0:	2300      	movs	r3, #0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 823f 	beq.w	8006d26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	2204      	movs	r2, #4
 80068ba:	409a      	lsls	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80cd 	beq.w	8006a60 <HAL_DMA_IRQHandler+0xb48>
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80c7 	beq.w	8006a60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2204      	movs	r2, #4
 80068dc:	409a      	lsls	r2, r3
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d049      	beq.n	8006980 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8210 	beq.w	8006d20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006908:	e20a      	b.n	8006d20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8206 	beq.w	8006d20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800691c:	e200      	b.n	8006d20 <HAL_DMA_IRQHandler+0xe08>
 800691e:	bf00      	nop
 8006920:	40020010 	.word	0x40020010
 8006924:	40020028 	.word	0x40020028
 8006928:	40020040 	.word	0x40020040
 800692c:	40020058 	.word	0x40020058
 8006930:	40020070 	.word	0x40020070
 8006934:	40020088 	.word	0x40020088
 8006938:	400200a0 	.word	0x400200a0
 800693c:	400200b8 	.word	0x400200b8
 8006940:	40020410 	.word	0x40020410
 8006944:	40020428 	.word	0x40020428
 8006948:	40020440 	.word	0x40020440
 800694c:	40020458 	.word	0x40020458
 8006950:	40020470 	.word	0x40020470
 8006954:	40020488 	.word	0x40020488
 8006958:	400204a0 	.word	0x400204a0
 800695c:	400204b8 	.word	0x400204b8
 8006960:	58025408 	.word	0x58025408
 8006964:	5802541c 	.word	0x5802541c
 8006968:	58025430 	.word	0x58025430
 800696c:	58025444 	.word	0x58025444
 8006970:	58025458 	.word	0x58025458
 8006974:	5802546c 	.word	0x5802546c
 8006978:	58025480 	.word	0x58025480
 800697c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d160      	bne.n	8006a4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a7f      	ldr	r2, [pc, #508]	; (8006b8c <HAL_DMA_IRQHandler+0xc74>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d04a      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a7d      	ldr	r2, [pc, #500]	; (8006b90 <HAL_DMA_IRQHandler+0xc78>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d045      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a7c      	ldr	r2, [pc, #496]	; (8006b94 <HAL_DMA_IRQHandler+0xc7c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d040      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a7a      	ldr	r2, [pc, #488]	; (8006b98 <HAL_DMA_IRQHandler+0xc80>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d03b      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a79      	ldr	r2, [pc, #484]	; (8006b9c <HAL_DMA_IRQHandler+0xc84>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d036      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a77      	ldr	r2, [pc, #476]	; (8006ba0 <HAL_DMA_IRQHandler+0xc88>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d031      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a76      	ldr	r2, [pc, #472]	; (8006ba4 <HAL_DMA_IRQHandler+0xc8c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d02c      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a74      	ldr	r2, [pc, #464]	; (8006ba8 <HAL_DMA_IRQHandler+0xc90>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d027      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a73      	ldr	r2, [pc, #460]	; (8006bac <HAL_DMA_IRQHandler+0xc94>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d022      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a71      	ldr	r2, [pc, #452]	; (8006bb0 <HAL_DMA_IRQHandler+0xc98>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01d      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a70      	ldr	r2, [pc, #448]	; (8006bb4 <HAL_DMA_IRQHandler+0xc9c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a6e      	ldr	r2, [pc, #440]	; (8006bb8 <HAL_DMA_IRQHandler+0xca0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a6d      	ldr	r2, [pc, #436]	; (8006bbc <HAL_DMA_IRQHandler+0xca4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a6b      	ldr	r2, [pc, #428]	; (8006bc0 <HAL_DMA_IRQHandler+0xca8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a6a      	ldr	r2, [pc, #424]	; (8006bc4 <HAL_DMA_IRQHandler+0xcac>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xb12>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a68      	ldr	r2, [pc, #416]	; (8006bc8 <HAL_DMA_IRQHandler+0xcb0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d108      	bne.n	8006a3c <HAL_DMA_IRQHandler+0xb24>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0208 	bic.w	r2, r2, #8
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e007      	b.n	8006a4c <HAL_DMA_IRQHandler+0xb34>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0204 	bic.w	r2, r2, #4
 8006a4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8165 	beq.w	8006d20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a5e:	e15f      	b.n	8006d20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	2202      	movs	r2, #2
 8006a6a:	409a      	lsls	r2, r3
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80c5 	beq.w	8006c00 <HAL_DMA_IRQHandler+0xce8>
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80bf 	beq.w	8006c00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	409a      	lsls	r2, r3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d018      	beq.n	8006ace <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 813a 	beq.w	8006d24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab8:	e134      	b.n	8006d24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8130 	beq.w	8006d24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006acc:	e12a      	b.n	8006d24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 8089 	bne.w	8006bec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a2b      	ldr	r2, [pc, #172]	; (8006b8c <HAL_DMA_IRQHandler+0xc74>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04a      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a29      	ldr	r2, [pc, #164]	; (8006b90 <HAL_DMA_IRQHandler+0xc78>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d045      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a28      	ldr	r2, [pc, #160]	; (8006b94 <HAL_DMA_IRQHandler+0xc7c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d040      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a26      	ldr	r2, [pc, #152]	; (8006b98 <HAL_DMA_IRQHandler+0xc80>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d03b      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a25      	ldr	r2, [pc, #148]	; (8006b9c <HAL_DMA_IRQHandler+0xc84>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d036      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a23      	ldr	r2, [pc, #140]	; (8006ba0 <HAL_DMA_IRQHandler+0xc88>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d031      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a22      	ldr	r2, [pc, #136]	; (8006ba4 <HAL_DMA_IRQHandler+0xc8c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d02c      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <HAL_DMA_IRQHandler+0xc90>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d027      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1f      	ldr	r2, [pc, #124]	; (8006bac <HAL_DMA_IRQHandler+0xc94>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <HAL_DMA_IRQHandler+0xc98>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <HAL_DMA_IRQHandler+0xc9c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1a      	ldr	r2, [pc, #104]	; (8006bb8 <HAL_DMA_IRQHandler+0xca0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <HAL_DMA_IRQHandler+0xca4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a17      	ldr	r2, [pc, #92]	; (8006bc0 <HAL_DMA_IRQHandler+0xca8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <HAL_DMA_IRQHandler+0xcac>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xc62>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <HAL_DMA_IRQHandler+0xcb0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d128      	bne.n	8006bcc <HAL_DMA_IRQHandler+0xcb4>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0214 	bic.w	r2, r2, #20
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e027      	b.n	8006bdc <HAL_DMA_IRQHandler+0xcc4>
 8006b8c:	40020010 	.word	0x40020010
 8006b90:	40020028 	.word	0x40020028
 8006b94:	40020040 	.word	0x40020040
 8006b98:	40020058 	.word	0x40020058
 8006b9c:	40020070 	.word	0x40020070
 8006ba0:	40020088 	.word	0x40020088
 8006ba4:	400200a0 	.word	0x400200a0
 8006ba8:	400200b8 	.word	0x400200b8
 8006bac:	40020410 	.word	0x40020410
 8006bb0:	40020428 	.word	0x40020428
 8006bb4:	40020440 	.word	0x40020440
 8006bb8:	40020458 	.word	0x40020458
 8006bbc:	40020470 	.word	0x40020470
 8006bc0:	40020488 	.word	0x40020488
 8006bc4:	400204a0 	.word	0x400204a0
 8006bc8:	400204b8 	.word	0x400204b8
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 020a 	bic.w	r2, r2, #10
 8006bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8097 	beq.w	8006d24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfe:	e091      	b.n	8006d24 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	2208      	movs	r2, #8
 8006c0a:	409a      	lsls	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8088 	beq.w	8006d26 <HAL_DMA_IRQHandler+0xe0e>
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8082 	beq.w	8006d26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a41      	ldr	r2, [pc, #260]	; (8006d2c <HAL_DMA_IRQHandler+0xe14>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d04a      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a3f      	ldr	r2, [pc, #252]	; (8006d30 <HAL_DMA_IRQHandler+0xe18>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d045      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a3e      	ldr	r2, [pc, #248]	; (8006d34 <HAL_DMA_IRQHandler+0xe1c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d040      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a3c      	ldr	r2, [pc, #240]	; (8006d38 <HAL_DMA_IRQHandler+0xe20>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d03b      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a3b      	ldr	r2, [pc, #236]	; (8006d3c <HAL_DMA_IRQHandler+0xe24>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d036      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a39      	ldr	r2, [pc, #228]	; (8006d40 <HAL_DMA_IRQHandler+0xe28>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d031      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a38      	ldr	r2, [pc, #224]	; (8006d44 <HAL_DMA_IRQHandler+0xe2c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d02c      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a36      	ldr	r2, [pc, #216]	; (8006d48 <HAL_DMA_IRQHandler+0xe30>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d027      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a35      	ldr	r2, [pc, #212]	; (8006d4c <HAL_DMA_IRQHandler+0xe34>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d022      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a33      	ldr	r2, [pc, #204]	; (8006d50 <HAL_DMA_IRQHandler+0xe38>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01d      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a32      	ldr	r2, [pc, #200]	; (8006d54 <HAL_DMA_IRQHandler+0xe3c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d018      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a30      	ldr	r2, [pc, #192]	; (8006d58 <HAL_DMA_IRQHandler+0xe40>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2f      	ldr	r2, [pc, #188]	; (8006d5c <HAL_DMA_IRQHandler+0xe44>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a2d      	ldr	r2, [pc, #180]	; (8006d60 <HAL_DMA_IRQHandler+0xe48>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <HAL_DMA_IRQHandler+0xe4c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xdaa>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <HAL_DMA_IRQHandler+0xe50>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d108      	bne.n	8006cd4 <HAL_DMA_IRQHandler+0xdbc>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 021c 	bic.w	r2, r2, #28
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e007      	b.n	8006ce4 <HAL_DMA_IRQHandler+0xdcc>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 020e 	bic.w	r2, r2, #14
 8006ce2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	2201      	movs	r2, #1
 8006cee:	409a      	lsls	r2, r3
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	4798      	blx	r3
 8006d1a:	e004      	b.n	8006d26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d1c:	bf00      	nop
 8006d1e:	e002      	b.n	8006d26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d20:	bf00      	nop
 8006d22:	e000      	b.n	8006d26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d26:	3728      	adds	r7, #40	; 0x28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40020010 	.word	0x40020010
 8006d30:	40020028 	.word	0x40020028
 8006d34:	40020040 	.word	0x40020040
 8006d38:	40020058 	.word	0x40020058
 8006d3c:	40020070 	.word	0x40020070
 8006d40:	40020088 	.word	0x40020088
 8006d44:	400200a0 	.word	0x400200a0
 8006d48:	400200b8 	.word	0x400200b8
 8006d4c:	40020410 	.word	0x40020410
 8006d50:	40020428 	.word	0x40020428
 8006d54:	40020440 	.word	0x40020440
 8006d58:	40020458 	.word	0x40020458
 8006d5c:	40020470 	.word	0x40020470
 8006d60:	40020488 	.word	0x40020488
 8006d64:	400204a0 	.word	0x400204a0
 8006d68:	400204b8 	.word	0x400204b8

08006d6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a7f      	ldr	r2, [pc, #508]	; (8006f88 <DMA_SetConfig+0x21c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d072      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a7d      	ldr	r2, [pc, #500]	; (8006f8c <DMA_SetConfig+0x220>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d06d      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a7c      	ldr	r2, [pc, #496]	; (8006f90 <DMA_SetConfig+0x224>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d068      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a7a      	ldr	r2, [pc, #488]	; (8006f94 <DMA_SetConfig+0x228>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d063      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a79      	ldr	r2, [pc, #484]	; (8006f98 <DMA_SetConfig+0x22c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d05e      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a77      	ldr	r2, [pc, #476]	; (8006f9c <DMA_SetConfig+0x230>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d059      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a76      	ldr	r2, [pc, #472]	; (8006fa0 <DMA_SetConfig+0x234>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d054      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a74      	ldr	r2, [pc, #464]	; (8006fa4 <DMA_SetConfig+0x238>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04f      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a73      	ldr	r2, [pc, #460]	; (8006fa8 <DMA_SetConfig+0x23c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04a      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a71      	ldr	r2, [pc, #452]	; (8006fac <DMA_SetConfig+0x240>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d045      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a70      	ldr	r2, [pc, #448]	; (8006fb0 <DMA_SetConfig+0x244>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d040      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a6e      	ldr	r2, [pc, #440]	; (8006fb4 <DMA_SetConfig+0x248>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d03b      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a6d      	ldr	r2, [pc, #436]	; (8006fb8 <DMA_SetConfig+0x24c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d036      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a6b      	ldr	r2, [pc, #428]	; (8006fbc <DMA_SetConfig+0x250>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d031      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a6a      	ldr	r2, [pc, #424]	; (8006fc0 <DMA_SetConfig+0x254>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02c      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a68      	ldr	r2, [pc, #416]	; (8006fc4 <DMA_SetConfig+0x258>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d027      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a67      	ldr	r2, [pc, #412]	; (8006fc8 <DMA_SetConfig+0x25c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a65      	ldr	r2, [pc, #404]	; (8006fcc <DMA_SetConfig+0x260>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a64      	ldr	r2, [pc, #400]	; (8006fd0 <DMA_SetConfig+0x264>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a62      	ldr	r2, [pc, #392]	; (8006fd4 <DMA_SetConfig+0x268>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a61      	ldr	r2, [pc, #388]	; (8006fd8 <DMA_SetConfig+0x26c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a5f      	ldr	r2, [pc, #380]	; (8006fdc <DMA_SetConfig+0x270>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a5e      	ldr	r2, [pc, #376]	; (8006fe0 <DMA_SetConfig+0x274>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <DMA_SetConfig+0x10a>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5c      	ldr	r2, [pc, #368]	; (8006fe4 <DMA_SetConfig+0x278>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d101      	bne.n	8006e7a <DMA_SetConfig+0x10e>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <DMA_SetConfig+0x110>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00d      	beq.n	8006e9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a39      	ldr	r2, [pc, #228]	; (8006f88 <DMA_SetConfig+0x21c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d04a      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a38      	ldr	r2, [pc, #224]	; (8006f8c <DMA_SetConfig+0x220>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d045      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a36      	ldr	r2, [pc, #216]	; (8006f90 <DMA_SetConfig+0x224>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d040      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a35      	ldr	r2, [pc, #212]	; (8006f94 <DMA_SetConfig+0x228>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d03b      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a33      	ldr	r2, [pc, #204]	; (8006f98 <DMA_SetConfig+0x22c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d036      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a32      	ldr	r2, [pc, #200]	; (8006f9c <DMA_SetConfig+0x230>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d031      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a30      	ldr	r2, [pc, #192]	; (8006fa0 <DMA_SetConfig+0x234>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d02c      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2f      	ldr	r2, [pc, #188]	; (8006fa4 <DMA_SetConfig+0x238>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d027      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2d      	ldr	r2, [pc, #180]	; (8006fa8 <DMA_SetConfig+0x23c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d022      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <DMA_SetConfig+0x240>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d01d      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a2a      	ldr	r2, [pc, #168]	; (8006fb0 <DMA_SetConfig+0x244>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d018      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a29      	ldr	r2, [pc, #164]	; (8006fb4 <DMA_SetConfig+0x248>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a27      	ldr	r2, [pc, #156]	; (8006fb8 <DMA_SetConfig+0x24c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00e      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <DMA_SetConfig+0x250>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d009      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a24      	ldr	r2, [pc, #144]	; (8006fc0 <DMA_SetConfig+0x254>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d004      	beq.n	8006f3c <DMA_SetConfig+0x1d0>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a23      	ldr	r2, [pc, #140]	; (8006fc4 <DMA_SetConfig+0x258>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d101      	bne.n	8006f40 <DMA_SetConfig+0x1d4>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <DMA_SetConfig+0x1d6>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d059      	beq.n	8006ffa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	223f      	movs	r2, #63	; 0x3f
 8006f50:	409a      	lsls	r2, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d138      	bne.n	8006fe8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f86:	e086      	b.n	8007096 <DMA_SetConfig+0x32a>
 8006f88:	40020010 	.word	0x40020010
 8006f8c:	40020028 	.word	0x40020028
 8006f90:	40020040 	.word	0x40020040
 8006f94:	40020058 	.word	0x40020058
 8006f98:	40020070 	.word	0x40020070
 8006f9c:	40020088 	.word	0x40020088
 8006fa0:	400200a0 	.word	0x400200a0
 8006fa4:	400200b8 	.word	0x400200b8
 8006fa8:	40020410 	.word	0x40020410
 8006fac:	40020428 	.word	0x40020428
 8006fb0:	40020440 	.word	0x40020440
 8006fb4:	40020458 	.word	0x40020458
 8006fb8:	40020470 	.word	0x40020470
 8006fbc:	40020488 	.word	0x40020488
 8006fc0:	400204a0 	.word	0x400204a0
 8006fc4:	400204b8 	.word	0x400204b8
 8006fc8:	58025408 	.word	0x58025408
 8006fcc:	5802541c 	.word	0x5802541c
 8006fd0:	58025430 	.word	0x58025430
 8006fd4:	58025444 	.word	0x58025444
 8006fd8:	58025458 	.word	0x58025458
 8006fdc:	5802546c 	.word	0x5802546c
 8006fe0:	58025480 	.word	0x58025480
 8006fe4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	60da      	str	r2, [r3, #12]
}
 8006ff8:	e04d      	b.n	8007096 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a29      	ldr	r2, [pc, #164]	; (80070a4 <DMA_SetConfig+0x338>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d022      	beq.n	800704a <DMA_SetConfig+0x2de>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a27      	ldr	r2, [pc, #156]	; (80070a8 <DMA_SetConfig+0x33c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01d      	beq.n	800704a <DMA_SetConfig+0x2de>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a26      	ldr	r2, [pc, #152]	; (80070ac <DMA_SetConfig+0x340>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d018      	beq.n	800704a <DMA_SetConfig+0x2de>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a24      	ldr	r2, [pc, #144]	; (80070b0 <DMA_SetConfig+0x344>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <DMA_SetConfig+0x2de>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <DMA_SetConfig+0x348>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <DMA_SetConfig+0x2de>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a21      	ldr	r2, [pc, #132]	; (80070b8 <DMA_SetConfig+0x34c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d009      	beq.n	800704a <DMA_SetConfig+0x2de>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a20      	ldr	r2, [pc, #128]	; (80070bc <DMA_SetConfig+0x350>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <DMA_SetConfig+0x2de>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <DMA_SetConfig+0x354>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d101      	bne.n	800704e <DMA_SetConfig+0x2e2>
 800704a:	2301      	movs	r3, #1
 800704c:	e000      	b.n	8007050 <DMA_SetConfig+0x2e4>
 800704e:	2300      	movs	r3, #0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d020      	beq.n	8007096 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	2201      	movs	r2, #1
 800705e:	409a      	lsls	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d108      	bne.n	8007086 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	60da      	str	r2, [r3, #12]
}
 8007084:	e007      	b.n	8007096 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	60da      	str	r2, [r3, #12]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	58025408 	.word	0x58025408
 80070a8:	5802541c 	.word	0x5802541c
 80070ac:	58025430 	.word	0x58025430
 80070b0:	58025444 	.word	0x58025444
 80070b4:	58025458 	.word	0x58025458
 80070b8:	5802546c 	.word	0x5802546c
 80070bc:	58025480 	.word	0x58025480
 80070c0:	58025494 	.word	0x58025494

080070c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a42      	ldr	r2, [pc, #264]	; (80071dc <DMA_CalcBaseAndBitshift+0x118>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d04a      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a41      	ldr	r2, [pc, #260]	; (80071e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d045      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a3f      	ldr	r2, [pc, #252]	; (80071e4 <DMA_CalcBaseAndBitshift+0x120>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d040      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a3e      	ldr	r2, [pc, #248]	; (80071e8 <DMA_CalcBaseAndBitshift+0x124>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d03b      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3c      	ldr	r2, [pc, #240]	; (80071ec <DMA_CalcBaseAndBitshift+0x128>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d036      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a3b      	ldr	r2, [pc, #236]	; (80071f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d031      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a39      	ldr	r2, [pc, #228]	; (80071f4 <DMA_CalcBaseAndBitshift+0x130>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d02c      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a38      	ldr	r2, [pc, #224]	; (80071f8 <DMA_CalcBaseAndBitshift+0x134>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d027      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a36      	ldr	r2, [pc, #216]	; (80071fc <DMA_CalcBaseAndBitshift+0x138>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d022      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a35      	ldr	r2, [pc, #212]	; (8007200 <DMA_CalcBaseAndBitshift+0x13c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d01d      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a33      	ldr	r2, [pc, #204]	; (8007204 <DMA_CalcBaseAndBitshift+0x140>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d018      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a32      	ldr	r2, [pc, #200]	; (8007208 <DMA_CalcBaseAndBitshift+0x144>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d013      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <DMA_CalcBaseAndBitshift+0x148>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00e      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <DMA_CalcBaseAndBitshift+0x14c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a2d      	ldr	r2, [pc, #180]	; (8007214 <DMA_CalcBaseAndBitshift+0x150>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xa8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a2c      	ldr	r2, [pc, #176]	; (8007218 <DMA_CalcBaseAndBitshift+0x154>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d101      	bne.n	8007170 <DMA_CalcBaseAndBitshift+0xac>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <DMA_CalcBaseAndBitshift+0xae>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d024      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	3b10      	subs	r3, #16
 800717e:	4a27      	ldr	r2, [pc, #156]	; (800721c <DMA_CalcBaseAndBitshift+0x158>)
 8007180:	fba2 2303 	umull	r2, r3, r2, r3
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	4a24      	ldr	r2, [pc, #144]	; (8007220 <DMA_CalcBaseAndBitshift+0x15c>)
 8007190:	5cd3      	ldrb	r3, [r2, r3]
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d908      	bls.n	80071b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <DMA_CalcBaseAndBitshift+0x160>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	1d1a      	adds	r2, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	659a      	str	r2, [r3, #88]	; 0x58
 80071ae:	e00d      	b.n	80071cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <DMA_CalcBaseAndBitshift+0x160>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6593      	str	r3, [r2, #88]	; 0x58
 80071be:	e005      	b.n	80071cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	40020010 	.word	0x40020010
 80071e0:	40020028 	.word	0x40020028
 80071e4:	40020040 	.word	0x40020040
 80071e8:	40020058 	.word	0x40020058
 80071ec:	40020070 	.word	0x40020070
 80071f0:	40020088 	.word	0x40020088
 80071f4:	400200a0 	.word	0x400200a0
 80071f8:	400200b8 	.word	0x400200b8
 80071fc:	40020410 	.word	0x40020410
 8007200:	40020428 	.word	0x40020428
 8007204:	40020440 	.word	0x40020440
 8007208:	40020458 	.word	0x40020458
 800720c:	40020470 	.word	0x40020470
 8007210:	40020488 	.word	0x40020488
 8007214:	400204a0 	.word	0x400204a0
 8007218:	400204b8 	.word	0x400204b8
 800721c:	aaaaaaab 	.word	0xaaaaaaab
 8007220:	08014434 	.word	0x08014434
 8007224:	fffffc00 	.word	0xfffffc00

08007228 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d120      	bne.n	800727e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	2b03      	cmp	r3, #3
 8007242:	d858      	bhi.n	80072f6 <DMA_CheckFifoParam+0xce>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <DMA_CheckFifoParam+0x24>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	0800725d 	.word	0x0800725d
 8007250:	0800726f 	.word	0x0800726f
 8007254:	0800725d 	.word	0x0800725d
 8007258:	080072f7 	.word	0x080072f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d048      	beq.n	80072fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800726c:	e045      	b.n	80072fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007276:	d142      	bne.n	80072fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800727c:	e03f      	b.n	80072fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007286:	d123      	bne.n	80072d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	2b03      	cmp	r3, #3
 800728e:	d838      	bhi.n	8007302 <DMA_CheckFifoParam+0xda>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <DMA_CheckFifoParam+0x70>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072a9 	.word	0x080072a9
 800729c:	080072af 	.word	0x080072af
 80072a0:	080072a9 	.word	0x080072a9
 80072a4:	080072c1 	.word	0x080072c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
        break;
 80072ac:	e030      	b.n	8007310 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d025      	beq.n	8007306 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072be:	e022      	b.n	8007306 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072c8:	d11f      	bne.n	800730a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072ce:	e01c      	b.n	800730a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d902      	bls.n	80072de <DMA_CheckFifoParam+0xb6>
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d003      	beq.n	80072e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80072dc:	e018      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
        break;
 80072e2:	e015      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
    break;
 80072f4:	e00b      	b.n	800730e <DMA_CheckFifoParam+0xe6>
        break;
 80072f6:	bf00      	nop
 80072f8:	e00a      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
        break;
 80072fa:	bf00      	nop
 80072fc:	e008      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
        break;
 80072fe:	bf00      	nop
 8007300:	e006      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
        break;
 8007302:	bf00      	nop
 8007304:	e004      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
        break;
 8007306:	bf00      	nop
 8007308:	e002      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
        break;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <DMA_CheckFifoParam+0xe8>
    break;
 800730e:	bf00      	nop
    }
  }

  return status;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop

08007320 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a38      	ldr	r2, [pc, #224]	; (8007414 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d022      	beq.n	800737e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a36      	ldr	r2, [pc, #216]	; (8007418 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a35      	ldr	r2, [pc, #212]	; (800741c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d018      	beq.n	800737e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a33      	ldr	r2, [pc, #204]	; (8007420 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a32      	ldr	r2, [pc, #200]	; (8007424 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a30      	ldr	r2, [pc, #192]	; (8007428 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2f      	ldr	r2, [pc, #188]	; (800742c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2d      	ldr	r2, [pc, #180]	; (8007430 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d101      	bne.n	8007382 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01a      	beq.n	80073be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	3b08      	subs	r3, #8
 8007390:	4a28      	ldr	r2, [pc, #160]	; (8007434 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	091b      	lsrs	r3, r3, #4
 8007398:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4b26      	ldr	r3, [pc, #152]	; (8007438 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a24      	ldr	r2, [pc, #144]	; (800743c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80073ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2201      	movs	r2, #1
 80073b6:	409a      	lsls	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80073bc:	e024      	b.n	8007408 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	3b10      	subs	r3, #16
 80073c6:	4a1e      	ldr	r2, [pc, #120]	; (8007440 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80073c8:	fba2 2303 	umull	r2, r3, r2, r3
 80073cc:	091b      	lsrs	r3, r3, #4
 80073ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d806      	bhi.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4a1b      	ldr	r2, [pc, #108]	; (8007448 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d902      	bls.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3308      	adds	r3, #8
 80073e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4b18      	ldr	r3, [pc, #96]	; (800744c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a16      	ldr	r2, [pc, #88]	; (8007450 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	2201      	movs	r2, #1
 8007402:	409a      	lsls	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	58025408 	.word	0x58025408
 8007418:	5802541c 	.word	0x5802541c
 800741c:	58025430 	.word	0x58025430
 8007420:	58025444 	.word	0x58025444
 8007424:	58025458 	.word	0x58025458
 8007428:	5802546c 	.word	0x5802546c
 800742c:	58025480 	.word	0x58025480
 8007430:	58025494 	.word	0x58025494
 8007434:	cccccccd 	.word	0xcccccccd
 8007438:	16009600 	.word	0x16009600
 800743c:	58025880 	.word	0x58025880
 8007440:	aaaaaaab 	.word	0xaaaaaaab
 8007444:	400204b8 	.word	0x400204b8
 8007448:	4002040f 	.word	0x4002040f
 800744c:	10008200 	.word	0x10008200
 8007450:	40020880 	.word	0x40020880

08007454 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d04a      	beq.n	8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b08      	cmp	r3, #8
 800746e:	d847      	bhi.n	8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a25      	ldr	r2, [pc, #148]	; (800750c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d022      	beq.n	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a24      	ldr	r2, [pc, #144]	; (8007510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d01d      	beq.n	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a22      	ldr	r2, [pc, #136]	; (8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d018      	beq.n	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a21      	ldr	r2, [pc, #132]	; (8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d013      	beq.n	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1f      	ldr	r2, [pc, #124]	; (800751c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00e      	beq.n	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d009      	beq.n	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d101      	bne.n	80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80074c4:	2300      	movs	r3, #0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4b17      	ldr	r3, [pc, #92]	; (800752c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a15      	ldr	r2, [pc, #84]	; (8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80074dc:	671a      	str	r2, [r3, #112]	; 0x70
 80074de:	e009      	b.n	80074f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a11      	ldr	r2, [pc, #68]	; (8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	2201      	movs	r2, #1
 80074fa:	409a      	lsls	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	58025408 	.word	0x58025408
 8007510:	5802541c 	.word	0x5802541c
 8007514:	58025430 	.word	0x58025430
 8007518:	58025444 	.word	0x58025444
 800751c:	58025458 	.word	0x58025458
 8007520:	5802546c 	.word	0x5802546c
 8007524:	58025480 	.word	0x58025480
 8007528:	58025494 	.word	0x58025494
 800752c:	1600963f 	.word	0x1600963f
 8007530:	58025940 	.word	0x58025940
 8007534:	1000823f 	.word	0x1000823f
 8007538:	40020940 	.word	0x40020940

0800753c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800753c:	b480      	push	{r7}
 800753e:	b089      	sub	sp, #36	; 0x24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800754a:	4b89      	ldr	r3, [pc, #548]	; (8007770 <HAL_GPIO_Init+0x234>)
 800754c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800754e:	e194      	b.n	800787a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	2101      	movs	r1, #1
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	fa01 f303 	lsl.w	r3, r1, r3
 800755c:	4013      	ands	r3, r2
 800755e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8186 	beq.w	8007874 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d005      	beq.n	8007580 <HAL_GPIO_Init+0x44>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d130      	bne.n	80075e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	2203      	movs	r2, #3
 800758c:	fa02 f303 	lsl.w	r3, r2, r3
 8007590:	43db      	mvns	r3, r3
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	4013      	ands	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80075b6:	2201      	movs	r2, #1
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43db      	mvns	r3, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4013      	ands	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	091b      	lsrs	r3, r3, #4
 80075cc:	f003 0201 	and.w	r2, r3, #1
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	4313      	orrs	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d017      	beq.n	800761e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	2203      	movs	r2, #3
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43db      	mvns	r3, r3
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	4013      	ands	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	fa02 f303 	lsl.w	r3, r2, r3
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	4313      	orrs	r3, r2
 8007616:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d123      	bne.n	8007672 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	08da      	lsrs	r2, r3, #3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3208      	adds	r2, #8
 8007632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	220f      	movs	r2, #15
 8007642:	fa02 f303 	lsl.w	r3, r2, r3
 8007646:	43db      	mvns	r3, r3
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	4013      	ands	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	08da      	lsrs	r2, r3, #3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3208      	adds	r2, #8
 800766c:	69b9      	ldr	r1, [r7, #24]
 800766e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	2203      	movs	r2, #3
 800767e:	fa02 f303 	lsl.w	r3, r2, r3
 8007682:	43db      	mvns	r3, r3
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	4013      	ands	r3, r2
 8007688:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f003 0203 	and.w	r2, r3, #3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	4313      	orrs	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 80e0 	beq.w	8007874 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076b4:	4b2f      	ldr	r3, [pc, #188]	; (8007774 <HAL_GPIO_Init+0x238>)
 80076b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076ba:	4a2e      	ldr	r2, [pc, #184]	; (8007774 <HAL_GPIO_Init+0x238>)
 80076bc:	f043 0302 	orr.w	r3, r3, #2
 80076c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80076c4:	4b2b      	ldr	r3, [pc, #172]	; (8007774 <HAL_GPIO_Init+0x238>)
 80076c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076d2:	4a29      	ldr	r2, [pc, #164]	; (8007778 <HAL_GPIO_Init+0x23c>)
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	089b      	lsrs	r3, r3, #2
 80076d8:	3302      	adds	r3, #2
 80076da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	220f      	movs	r2, #15
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	43db      	mvns	r3, r3
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	4013      	ands	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a20      	ldr	r2, [pc, #128]	; (800777c <HAL_GPIO_Init+0x240>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d052      	beq.n	80077a4 <HAL_GPIO_Init+0x268>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <HAL_GPIO_Init+0x244>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d031      	beq.n	800776a <HAL_GPIO_Init+0x22e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <HAL_GPIO_Init+0x248>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d02b      	beq.n	8007766 <HAL_GPIO_Init+0x22a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a1d      	ldr	r2, [pc, #116]	; (8007788 <HAL_GPIO_Init+0x24c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d025      	beq.n	8007762 <HAL_GPIO_Init+0x226>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a1c      	ldr	r2, [pc, #112]	; (800778c <HAL_GPIO_Init+0x250>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d01f      	beq.n	800775e <HAL_GPIO_Init+0x222>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a1b      	ldr	r2, [pc, #108]	; (8007790 <HAL_GPIO_Init+0x254>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d019      	beq.n	800775a <HAL_GPIO_Init+0x21e>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a1a      	ldr	r2, [pc, #104]	; (8007794 <HAL_GPIO_Init+0x258>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <HAL_GPIO_Init+0x21a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a19      	ldr	r2, [pc, #100]	; (8007798 <HAL_GPIO_Init+0x25c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00d      	beq.n	8007752 <HAL_GPIO_Init+0x216>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a18      	ldr	r2, [pc, #96]	; (800779c <HAL_GPIO_Init+0x260>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d007      	beq.n	800774e <HAL_GPIO_Init+0x212>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <HAL_GPIO_Init+0x264>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d101      	bne.n	800774a <HAL_GPIO_Init+0x20e>
 8007746:	2309      	movs	r3, #9
 8007748:	e02d      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 800774a:	230a      	movs	r3, #10
 800774c:	e02b      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 800774e:	2308      	movs	r3, #8
 8007750:	e029      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 8007752:	2307      	movs	r3, #7
 8007754:	e027      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 8007756:	2306      	movs	r3, #6
 8007758:	e025      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 800775a:	2305      	movs	r3, #5
 800775c:	e023      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 800775e:	2304      	movs	r3, #4
 8007760:	e021      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 8007762:	2303      	movs	r3, #3
 8007764:	e01f      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 8007766:	2302      	movs	r3, #2
 8007768:	e01d      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 800776a:	2301      	movs	r3, #1
 800776c:	e01b      	b.n	80077a6 <HAL_GPIO_Init+0x26a>
 800776e:	bf00      	nop
 8007770:	58000080 	.word	0x58000080
 8007774:	58024400 	.word	0x58024400
 8007778:	58000400 	.word	0x58000400
 800777c:	58020000 	.word	0x58020000
 8007780:	58020400 	.word	0x58020400
 8007784:	58020800 	.word	0x58020800
 8007788:	58020c00 	.word	0x58020c00
 800778c:	58021000 	.word	0x58021000
 8007790:	58021400 	.word	0x58021400
 8007794:	58021800 	.word	0x58021800
 8007798:	58021c00 	.word	0x58021c00
 800779c:	58022000 	.word	0x58022000
 80077a0:	58022400 	.word	0x58022400
 80077a4:	2300      	movs	r3, #0
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	f002 0203 	and.w	r2, r2, #3
 80077ac:	0092      	lsls	r2, r2, #2
 80077ae:	4093      	lsls	r3, r2
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077b6:	4938      	ldr	r1, [pc, #224]	; (8007898 <HAL_GPIO_Init+0x35c>)
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	089b      	lsrs	r3, r3, #2
 80077bc:	3302      	adds	r3, #2
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	43db      	mvns	r3, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	4013      	ands	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80077ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80077f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	43db      	mvns	r3, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	4013      	ands	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	43db      	mvns	r3, r3
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	4013      	ands	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	43db      	mvns	r3, r3
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	4013      	ands	r3, r2
 8007858:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3301      	adds	r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	f47f ae63 	bne.w	8007550 <HAL_GPIO_Init+0x14>
  }
}
 800788a:	bf00      	nop
 800788c:	bf00      	nop
 800788e:	3724      	adds	r7, #36	; 0x24
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	58000400 	.word	0x58000400

0800789c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	807b      	strh	r3, [r7, #2]
 80078a8:	4613      	mov	r3, r2
 80078aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078ac:	787b      	ldrb	r3, [r7, #1]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078b2:	887a      	ldrh	r2, [r7, #2]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80078b8:	e003      	b.n	80078c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80078ba:	887b      	ldrh	r3, [r7, #2]
 80078bc:	041a      	lsls	r2, r3, #16
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	619a      	str	r2, [r3, #24]
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e08b      	b.n	80079fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fa fc08 	bl	800210c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2224      	movs	r2, #36	; 0x24
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007920:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007930:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d107      	bne.n	800794a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007946:	609a      	str	r2, [r3, #8]
 8007948:	e006      	b.n	8007958 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007956:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d108      	bne.n	8007972 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800796e:	605a      	str	r2, [r3, #4]
 8007970:	e007      	b.n	8007982 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007980:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6859      	ldr	r1, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	4b1d      	ldr	r3, [pc, #116]	; (8007a04 <HAL_I2C_Init+0x134>)
 800798e:	430b      	orrs	r3, r1
 8007990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69d9      	ldr	r1, [r3, #28]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	02008000 	.word	0x02008000

08007a08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d138      	bne.n	8007a90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e032      	b.n	8007a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2224      	movs	r2, #36	; 0x24
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6819      	ldr	r1, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e000      	b.n	8007a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
  }
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	d139      	bne.n	8007b28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e033      	b.n	8007b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2224      	movs	r2, #36	; 0x24
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0201 	bic.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007af0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	e000      	b.n	8007b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b28:	2302      	movs	r3, #2
  }
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007b40:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <HAL_PWREx_ConfigSupply+0x70>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d00a      	beq.n	8007b62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007b4c:	4b16      	ldr	r3, [pc, #88]	; (8007ba8 <HAL_PWREx_ConfigSupply+0x70>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d001      	beq.n	8007b5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e01f      	b.n	8007b9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e01d      	b.n	8007b9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007b62:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <HAL_PWREx_ConfigSupply+0x70>)
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f023 0207 	bic.w	r2, r3, #7
 8007b6a:	490f      	ldr	r1, [pc, #60]	; (8007ba8 <HAL_PWREx_ConfigSupply+0x70>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007b72:	f7fa ffb7 	bl	8002ae4 <HAL_GetTick>
 8007b76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b78:	e009      	b.n	8007b8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007b7a:	f7fa ffb3 	bl	8002ae4 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b88:	d901      	bls.n	8007b8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e007      	b.n	8007b9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b8e:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <HAL_PWREx_ConfigSupply+0x70>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9a:	d1ee      	bne.n	8007b7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	58024800 	.word	0x58024800

08007bac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08c      	sub	sp, #48	; 0x30
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f000 bc48 	b.w	8008450 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8088 	beq.w	8007cde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bce:	4b99      	ldr	r3, [pc, #612]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bd8:	4b96      	ldr	r3, [pc, #600]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2b10      	cmp	r3, #16
 8007be2:	d007      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x48>
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	2b18      	cmp	r3, #24
 8007be8:	d111      	bne.n	8007c0e <HAL_RCC_OscConfig+0x62>
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d10c      	bne.n	8007c0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf4:	4b8f      	ldr	r3, [pc, #572]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d06d      	beq.n	8007cdc <HAL_RCC_OscConfig+0x130>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d169      	bne.n	8007cdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f000 bc21 	b.w	8008450 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c16:	d106      	bne.n	8007c26 <HAL_RCC_OscConfig+0x7a>
 8007c18:	4b86      	ldr	r3, [pc, #536]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a85      	ldr	r2, [pc, #532]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	e02e      	b.n	8007c84 <HAL_RCC_OscConfig+0xd8>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCC_OscConfig+0x9c>
 8007c2e:	4b81      	ldr	r3, [pc, #516]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a80      	ldr	r2, [pc, #512]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	4b7e      	ldr	r3, [pc, #504]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a7d      	ldr	r2, [pc, #500]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	e01d      	b.n	8007c84 <HAL_RCC_OscConfig+0xd8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c50:	d10c      	bne.n	8007c6c <HAL_RCC_OscConfig+0xc0>
 8007c52:	4b78      	ldr	r3, [pc, #480]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a77      	ldr	r2, [pc, #476]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4b75      	ldr	r3, [pc, #468]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a74      	ldr	r2, [pc, #464]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	e00b      	b.n	8007c84 <HAL_RCC_OscConfig+0xd8>
 8007c6c:	4b71      	ldr	r3, [pc, #452]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a70      	ldr	r2, [pc, #448]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	4b6e      	ldr	r3, [pc, #440]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a6d      	ldr	r2, [pc, #436]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d013      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8c:	f7fa ff2a 	bl	8002ae4 <HAL_GetTick>
 8007c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c92:	e008      	b.n	8007ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c94:	f7fa ff26 	bl	8002ae4 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	2b64      	cmp	r3, #100	; 0x64
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e3d4      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ca6:	4b63      	ldr	r3, [pc, #396]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0f0      	beq.n	8007c94 <HAL_RCC_OscConfig+0xe8>
 8007cb2:	e014      	b.n	8007cde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb4:	f7fa ff16 	bl	8002ae4 <HAL_GetTick>
 8007cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cbc:	f7fa ff12 	bl	8002ae4 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b64      	cmp	r3, #100	; 0x64
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e3c0      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cce:	4b59      	ldr	r3, [pc, #356]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f0      	bne.n	8007cbc <HAL_RCC_OscConfig+0x110>
 8007cda:	e000      	b.n	8007cde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80ca 	beq.w	8007e80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cec:	4b51      	ldr	r3, [pc, #324]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cf6:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <HAL_RCC_OscConfig+0x166>
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	2b18      	cmp	r3, #24
 8007d06:	d156      	bne.n	8007db6 <HAL_RCC_OscConfig+0x20a>
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d151      	bne.n	8007db6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d12:	4b48      	ldr	r3, [pc, #288]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <HAL_RCC_OscConfig+0x17e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e392      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d2a:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f023 0219 	bic.w	r2, r3, #25
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	493f      	ldr	r1, [pc, #252]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fa fed2 	bl	8002ae4 <HAL_GetTick>
 8007d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d44:	f7fa fece 	bl	8002ae4 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e37c      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d56:	4b37      	ldr	r3, [pc, #220]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d62:	f7fa fecb 	bl	8002afc <HAL_GetREVID>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d817      	bhi.n	8007da0 <HAL_RCC_OscConfig+0x1f4>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d108      	bne.n	8007d8a <HAL_RCC_OscConfig+0x1de>
 8007d78:	4b2e      	ldr	r3, [pc, #184]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d80:	4a2c      	ldr	r2, [pc, #176]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d88:	e07a      	b.n	8007e80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d8a:	4b2a      	ldr	r3, [pc, #168]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	031b      	lsls	r3, r3, #12
 8007d98:	4926      	ldr	r1, [pc, #152]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d9e:	e06f      	b.n	8007e80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da0:	4b24      	ldr	r3, [pc, #144]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	061b      	lsls	r3, r3, #24
 8007dae:	4921      	ldr	r1, [pc, #132]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007db4:	e064      	b.n	8007e80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d047      	beq.n	8007e4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007dbe:	4b1d      	ldr	r3, [pc, #116]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f023 0219 	bic.w	r2, r3, #25
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	491a      	ldr	r1, [pc, #104]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fa fe88 	bl	8002ae4 <HAL_GetTick>
 8007dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dd8:	f7fa fe84 	bl	8002ae4 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e332      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f0      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df6:	f7fa fe81 	bl	8002afc <HAL_GetREVID>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d819      	bhi.n	8007e38 <HAL_RCC_OscConfig+0x28c>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b40      	cmp	r3, #64	; 0x40
 8007e0a:	d108      	bne.n	8007e1e <HAL_RCC_OscConfig+0x272>
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e14:	4a07      	ldr	r2, [pc, #28]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e1a:	6053      	str	r3, [r2, #4]
 8007e1c:	e030      	b.n	8007e80 <HAL_RCC_OscConfig+0x2d4>
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	031b      	lsls	r3, r3, #12
 8007e2c:	4901      	ldr	r1, [pc, #4]	; (8007e34 <HAL_RCC_OscConfig+0x288>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	604b      	str	r3, [r1, #4]
 8007e32:	e025      	b.n	8007e80 <HAL_RCC_OscConfig+0x2d4>
 8007e34:	58024400 	.word	0x58024400
 8007e38:	4b9a      	ldr	r3, [pc, #616]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	061b      	lsls	r3, r3, #24
 8007e46:	4997      	ldr	r1, [pc, #604]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	604b      	str	r3, [r1, #4]
 8007e4c:	e018      	b.n	8007e80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e4e:	4b95      	ldr	r3, [pc, #596]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a94      	ldr	r2, [pc, #592]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007e54:	f023 0301 	bic.w	r3, r3, #1
 8007e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5a:	f7fa fe43 	bl	8002ae4 <HAL_GetTick>
 8007e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e62:	f7fa fe3f 	bl	8002ae4 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e2ed      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e74:	4b8b      	ldr	r3, [pc, #556]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1f0      	bne.n	8007e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80a9 	beq.w	8007fe0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e8e:	4b85      	ldr	r3, [pc, #532]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e98:	4b82      	ldr	r3, [pc, #520]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d007      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x308>
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	2b18      	cmp	r3, #24
 8007ea8:	d13a      	bne.n	8007f20 <HAL_RCC_OscConfig+0x374>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d135      	bne.n	8007f20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007eb4:	4b7b      	ldr	r3, [pc, #492]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d005      	beq.n	8007ecc <HAL_RCC_OscConfig+0x320>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	2b80      	cmp	r3, #128	; 0x80
 8007ec6:	d001      	beq.n	8007ecc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e2c1      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ecc:	f7fa fe16 	bl	8002afc <HAL_GetREVID>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d817      	bhi.n	8007f0a <HAL_RCC_OscConfig+0x35e>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d108      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x348>
 8007ee2:	4b70      	ldr	r3, [pc, #448]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007eea:	4a6e      	ldr	r2, [pc, #440]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007eec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ef0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ef2:	e075      	b.n	8007fe0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ef4:	4b6b      	ldr	r3, [pc, #428]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	069b      	lsls	r3, r3, #26
 8007f02:	4968      	ldr	r1, [pc, #416]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f08:	e06a      	b.n	8007fe0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f0a:	4b66      	ldr	r3, [pc, #408]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	061b      	lsls	r3, r3, #24
 8007f18:	4962      	ldr	r1, [pc, #392]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f1e:	e05f      	b.n	8007fe0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d042      	beq.n	8007fae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f28:	4b5e      	ldr	r3, [pc, #376]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a5d      	ldr	r2, [pc, #372]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f34:	f7fa fdd6 	bl	8002ae4 <HAL_GetTick>
 8007f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007f3c:	f7fa fdd2 	bl	8002ae4 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e280      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f4e:	4b55      	ldr	r3, [pc, #340]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f0      	beq.n	8007f3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f5a:	f7fa fdcf 	bl	8002afc <HAL_GetREVID>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d817      	bhi.n	8007f98 <HAL_RCC_OscConfig+0x3ec>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d108      	bne.n	8007f82 <HAL_RCC_OscConfig+0x3d6>
 8007f70:	4b4c      	ldr	r3, [pc, #304]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007f78:	4a4a      	ldr	r2, [pc, #296]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f7e:	6053      	str	r3, [r2, #4]
 8007f80:	e02e      	b.n	8007fe0 <HAL_RCC_OscConfig+0x434>
 8007f82:	4b48      	ldr	r3, [pc, #288]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	069b      	lsls	r3, r3, #26
 8007f90:	4944      	ldr	r1, [pc, #272]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	604b      	str	r3, [r1, #4]
 8007f96:	e023      	b.n	8007fe0 <HAL_RCC_OscConfig+0x434>
 8007f98:	4b42      	ldr	r3, [pc, #264]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	493f      	ldr	r1, [pc, #252]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60cb      	str	r3, [r1, #12]
 8007fac:	e018      	b.n	8007fe0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007fae:	4b3d      	ldr	r3, [pc, #244]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a3c      	ldr	r2, [pc, #240]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fba:	f7fa fd93 	bl	8002ae4 <HAL_GetTick>
 8007fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007fc2:	f7fa fd8f 	bl	8002ae4 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e23d      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fd4:	4b33      	ldr	r3, [pc, #204]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1f0      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d036      	beq.n	800805a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d019      	beq.n	8008028 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ff4:	4b2b      	ldr	r3, [pc, #172]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff8:	4a2a      	ldr	r2, [pc, #168]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008000:	f7fa fd70 	bl	8002ae4 <HAL_GetTick>
 8008004:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008008:	f7fa fd6c 	bl	8002ae4 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e21a      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800801a:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 800801c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0x45c>
 8008026:	e018      	b.n	800805a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008028:	4b1e      	ldr	r3, [pc, #120]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 800802a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802c:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 800802e:	f023 0301 	bic.w	r3, r3, #1
 8008032:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008034:	f7fa fd56 	bl	8002ae4 <HAL_GetTick>
 8008038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800803c:	f7fa fd52 	bl	8002ae4 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e200      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800804e:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8008050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f0      	bne.n	800803c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d039      	beq.n	80080da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01c      	beq.n	80080a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800806e:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a0c      	ldr	r2, [pc, #48]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8008074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008078:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800807a:	f7fa fd33 	bl	8002ae4 <HAL_GetTick>
 800807e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008082:	f7fa fd2f 	bl	8002ae4 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e1dd      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008094:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <HAL_RCC_OscConfig+0x4f8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0f0      	beq.n	8008082 <HAL_RCC_OscConfig+0x4d6>
 80080a0:	e01b      	b.n	80080da <HAL_RCC_OscConfig+0x52e>
 80080a2:	bf00      	nop
 80080a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080a8:	4b9b      	ldr	r3, [pc, #620]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a9a      	ldr	r2, [pc, #616]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80080ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080b4:	f7fa fd16 	bl	8002ae4 <HAL_GetTick>
 80080b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080ba:	e008      	b.n	80080ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080bc:	f7fa fd12 	bl	8002ae4 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e1c0      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080ce:	4b92      	ldr	r3, [pc, #584]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f0      	bne.n	80080bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8081 	beq.w	80081ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080e8:	4b8c      	ldr	r3, [pc, #560]	; (800831c <HAL_RCC_OscConfig+0x770>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a8b      	ldr	r2, [pc, #556]	; (800831c <HAL_RCC_OscConfig+0x770>)
 80080ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080f4:	f7fa fcf6 	bl	8002ae4 <HAL_GetTick>
 80080f8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fc:	f7fa fcf2 	bl	8002ae4 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b64      	cmp	r3, #100	; 0x64
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e1a0      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800810e:	4b83      	ldr	r3, [pc, #524]	; (800831c <HAL_RCC_OscConfig+0x770>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d106      	bne.n	8008130 <HAL_RCC_OscConfig+0x584>
 8008122:	4b7d      	ldr	r3, [pc, #500]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	4a7c      	ldr	r2, [pc, #496]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008128:	f043 0301 	orr.w	r3, r3, #1
 800812c:	6713      	str	r3, [r2, #112]	; 0x70
 800812e:	e02d      	b.n	800818c <HAL_RCC_OscConfig+0x5e0>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10c      	bne.n	8008152 <HAL_RCC_OscConfig+0x5a6>
 8008138:	4b77      	ldr	r3, [pc, #476]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800813a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813c:	4a76      	ldr	r2, [pc, #472]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	6713      	str	r3, [r2, #112]	; 0x70
 8008144:	4b74      	ldr	r3, [pc, #464]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	4a73      	ldr	r2, [pc, #460]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800814a:	f023 0304 	bic.w	r3, r3, #4
 800814e:	6713      	str	r3, [r2, #112]	; 0x70
 8008150:	e01c      	b.n	800818c <HAL_RCC_OscConfig+0x5e0>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2b05      	cmp	r3, #5
 8008158:	d10c      	bne.n	8008174 <HAL_RCC_OscConfig+0x5c8>
 800815a:	4b6f      	ldr	r3, [pc, #444]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	4a6e      	ldr	r2, [pc, #440]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008160:	f043 0304 	orr.w	r3, r3, #4
 8008164:	6713      	str	r3, [r2, #112]	; 0x70
 8008166:	4b6c      	ldr	r3, [pc, #432]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816a:	4a6b      	ldr	r2, [pc, #428]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	6713      	str	r3, [r2, #112]	; 0x70
 8008172:	e00b      	b.n	800818c <HAL_RCC_OscConfig+0x5e0>
 8008174:	4b68      	ldr	r3, [pc, #416]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008178:	4a67      	ldr	r2, [pc, #412]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	6713      	str	r3, [r2, #112]	; 0x70
 8008180:	4b65      	ldr	r3, [pc, #404]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008184:	4a64      	ldr	r2, [pc, #400]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008186:	f023 0304 	bic.w	r3, r3, #4
 800818a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d015      	beq.n	80081c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008194:	f7fa fca6 	bl	8002ae4 <HAL_GetTick>
 8008198:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800819a:	e00a      	b.n	80081b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800819c:	f7fa fca2 	bl	8002ae4 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e14e      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081b2:	4b59      	ldr	r3, [pc, #356]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ee      	beq.n	800819c <HAL_RCC_OscConfig+0x5f0>
 80081be:	e014      	b.n	80081ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c0:	f7fa fc90 	bl	8002ae4 <HAL_GetTick>
 80081c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081c6:	e00a      	b.n	80081de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081c8:	f7fa fc8c 	bl	8002ae4 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e138      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081de:	4b4e      	ldr	r3, [pc, #312]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1ee      	bne.n	80081c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 812d 	beq.w	800844e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80081f4:	4b48      	ldr	r3, [pc, #288]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081fc:	2b18      	cmp	r3, #24
 80081fe:	f000 80bd 	beq.w	800837c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b02      	cmp	r3, #2
 8008208:	f040 809e 	bne.w	8008348 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800820c:	4b42      	ldr	r3, [pc, #264]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a41      	ldr	r2, [pc, #260]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008218:	f7fa fc64 	bl	8002ae4 <HAL_GetTick>
 800821c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800821e:	e008      	b.n	8008232 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008220:	f7fa fc60 	bl	8002ae4 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b02      	cmp	r3, #2
 800822c:	d901      	bls.n	8008232 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e10e      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008232:	4b39      	ldr	r3, [pc, #228]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1f0      	bne.n	8008220 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800823e:	4b36      	ldr	r3, [pc, #216]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008242:	4b37      	ldr	r3, [pc, #220]	; (8008320 <HAL_RCC_OscConfig+0x774>)
 8008244:	4013      	ands	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800824e:	0112      	lsls	r2, r2, #4
 8008250:	430a      	orrs	r2, r1
 8008252:	4931      	ldr	r1, [pc, #196]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008254:	4313      	orrs	r3, r2
 8008256:	628b      	str	r3, [r1, #40]	; 0x28
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825c:	3b01      	subs	r3, #1
 800825e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	3b01      	subs	r3, #1
 8008268:	025b      	lsls	r3, r3, #9
 800826a:	b29b      	uxth	r3, r3
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	3b01      	subs	r3, #1
 8008274:	041b      	lsls	r3, r3, #16
 8008276:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800827a:	431a      	orrs	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008280:	3b01      	subs	r3, #1
 8008282:	061b      	lsls	r3, r3, #24
 8008284:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008288:	4923      	ldr	r1, [pc, #140]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800828a:	4313      	orrs	r3, r2
 800828c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800828e:	4b22      	ldr	r3, [pc, #136]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	4a21      	ldr	r2, [pc, #132]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800829a:	4b1f      	ldr	r3, [pc, #124]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 800829c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800829e:	4b21      	ldr	r3, [pc, #132]	; (8008324 <HAL_RCC_OscConfig+0x778>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082a6:	00d2      	lsls	r2, r2, #3
 80082a8:	491b      	ldr	r1, [pc, #108]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80082ae:	4b1a      	ldr	r3, [pc, #104]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	f023 020c 	bic.w	r2, r3, #12
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	4917      	ldr	r1, [pc, #92]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80082c0:	4b15      	ldr	r3, [pc, #84]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	f023 0202 	bic.w	r2, r3, #2
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082cc:	4912      	ldr	r1, [pc, #72]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80082d2:	4b11      	ldr	r3, [pc, #68]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	4a10      	ldr	r2, [pc, #64]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082de:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	4a0d      	ldr	r2, [pc, #52]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80082ea:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	4a0a      	ldr	r2, [pc, #40]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80082f6:	4b08      	ldr	r3, [pc, #32]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	4a07      	ldr	r2, [pc, #28]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a04      	ldr	r2, [pc, #16]	; (8008318 <HAL_RCC_OscConfig+0x76c>)
 8008308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800830c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830e:	f7fa fbe9 	bl	8002ae4 <HAL_GetTick>
 8008312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008314:	e011      	b.n	800833a <HAL_RCC_OscConfig+0x78e>
 8008316:	bf00      	nop
 8008318:	58024400 	.word	0x58024400
 800831c:	58024800 	.word	0x58024800
 8008320:	fffffc0c 	.word	0xfffffc0c
 8008324:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008328:	f7fa fbdc 	bl	8002ae4 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e08a      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800833a:	4b47      	ldr	r3, [pc, #284]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0x77c>
 8008346:	e082      	b.n	800844e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008348:	4b43      	ldr	r3, [pc, #268]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a42      	ldr	r2, [pc, #264]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 800834e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008354:	f7fa fbc6 	bl	8002ae4 <HAL_GetTick>
 8008358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800835c:	f7fa fbc2 	bl	8002ae4 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e070      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800836e:	4b3a      	ldr	r3, [pc, #232]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f0      	bne.n	800835c <HAL_RCC_OscConfig+0x7b0>
 800837a:	e068      	b.n	800844e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800837c:	4b36      	ldr	r3, [pc, #216]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008382:	4b35      	ldr	r3, [pc, #212]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b01      	cmp	r3, #1
 800838e:	d031      	beq.n	80083f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f003 0203 	and.w	r2, r3, #3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800839a:	429a      	cmp	r2, r3
 800839c:	d12a      	bne.n	80083f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	091b      	lsrs	r3, r3, #4
 80083a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d122      	bne.n	80083f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d11a      	bne.n	80083f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	0a5b      	lsrs	r3, r3, #9
 80083c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d111      	bne.n	80083f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	0c1b      	lsrs	r3, r3, #16
 80083d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083de:	429a      	cmp	r2, r3
 80083e0:	d108      	bne.n	80083f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	0e1b      	lsrs	r3, r3, #24
 80083e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d001      	beq.n	80083f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e02b      	b.n	8008450 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80083f8:	4b17      	ldr	r3, [pc, #92]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008402:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	429a      	cmp	r2, r3
 800840c:	d01f      	beq.n	800844e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800840e:	4b12      	ldr	r3, [pc, #72]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	4a11      	ldr	r2, [pc, #68]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 8008414:	f023 0301 	bic.w	r3, r3, #1
 8008418:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800841a:	f7fa fb63 	bl	8002ae4 <HAL_GetTick>
 800841e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008420:	bf00      	nop
 8008422:	f7fa fb5f 	bl	8002ae4 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	4293      	cmp	r3, r2
 800842c:	d0f9      	beq.n	8008422 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 8008430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008432:	4b0a      	ldr	r3, [pc, #40]	; (800845c <HAL_RCC_OscConfig+0x8b0>)
 8008434:	4013      	ands	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800843a:	00d2      	lsls	r2, r2, #3
 800843c:	4906      	ldr	r1, [pc, #24]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 800843e:	4313      	orrs	r3, r2
 8008440:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	4a04      	ldr	r2, [pc, #16]	; (8008458 <HAL_RCC_OscConfig+0x8ac>)
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3730      	adds	r7, #48	; 0x30
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	58024400 	.word	0x58024400
 800845c:	ffff0007 	.word	0xffff0007

08008460 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e19c      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008474:	4b8a      	ldr	r3, [pc, #552]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d910      	bls.n	80084a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008482:	4b87      	ldr	r3, [pc, #540]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f023 020f 	bic.w	r2, r3, #15
 800848a:	4985      	ldr	r1, [pc, #532]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4313      	orrs	r3, r2
 8008490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b83      	ldr	r3, [pc, #524]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e184      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d010      	beq.n	80084d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	4b7b      	ldr	r3, [pc, #492]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084bc:	429a      	cmp	r2, r3
 80084be:	d908      	bls.n	80084d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084c0:	4b78      	ldr	r3, [pc, #480]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	4975      	ldr	r1, [pc, #468]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d010      	beq.n	8008500 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	695a      	ldr	r2, [r3, #20]
 80084e2:	4b70      	ldr	r3, [pc, #448]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d908      	bls.n	8008500 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084ee:	4b6d      	ldr	r3, [pc, #436]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	496a      	ldr	r1, [pc, #424]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	d010      	beq.n	800852e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	4b64      	ldr	r3, [pc, #400]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008518:	429a      	cmp	r2, r3
 800851a:	d908      	bls.n	800852e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800851c:	4b61      	ldr	r3, [pc, #388]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	495e      	ldr	r1, [pc, #376]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800852a:	4313      	orrs	r3, r2
 800852c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	d010      	beq.n	800855c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69da      	ldr	r2, [r3, #28]
 800853e:	4b59      	ldr	r3, [pc, #356]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008546:	429a      	cmp	r2, r3
 8008548:	d908      	bls.n	800855c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800854a:	4b56      	ldr	r3, [pc, #344]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	4953      	ldr	r1, [pc, #332]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008558:	4313      	orrs	r3, r2
 800855a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d010      	beq.n	800858a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	4b4d      	ldr	r3, [pc, #308]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	429a      	cmp	r2, r3
 8008576:	d908      	bls.n	800858a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008578:	4b4a      	ldr	r3, [pc, #296]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f023 020f 	bic.w	r2, r3, #15
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	4947      	ldr	r1, [pc, #284]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008586:	4313      	orrs	r3, r2
 8008588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d055      	beq.n	8008642 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008596:	4b43      	ldr	r3, [pc, #268]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	4940      	ldr	r1, [pc, #256]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d107      	bne.n	80085c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085b0:	4b3c      	ldr	r3, [pc, #240]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d121      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e0f6      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d107      	bne.n	80085d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085c8:	4b36      	ldr	r3, [pc, #216]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d115      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e0ea      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d107      	bne.n	80085f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085e0:	4b30      	ldr	r3, [pc, #192]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0de      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085f0:	4b2c      	ldr	r3, [pc, #176]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e0d6      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008600:	4b28      	ldr	r3, [pc, #160]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	f023 0207 	bic.w	r2, r3, #7
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4925      	ldr	r1, [pc, #148]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800860e:	4313      	orrs	r3, r2
 8008610:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008612:	f7fa fa67 	bl	8002ae4 <HAL_GetTick>
 8008616:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008618:	e00a      	b.n	8008630 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800861a:	f7fa fa63 	bl	8002ae4 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	f241 3288 	movw	r2, #5000	; 0x1388
 8008628:	4293      	cmp	r3, r2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e0be      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008630:	4b1c      	ldr	r3, [pc, #112]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	429a      	cmp	r2, r3
 8008640:	d1eb      	bne.n	800861a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	4b14      	ldr	r3, [pc, #80]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	429a      	cmp	r2, r3
 800865c:	d208      	bcs.n	8008670 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f023 020f 	bic.w	r2, r3, #15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	490e      	ldr	r1, [pc, #56]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800866c:	4313      	orrs	r3, r2
 800866e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008670:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d214      	bcs.n	80086a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f023 020f 	bic.w	r2, r3, #15
 8008686:	4906      	ldr	r1, [pc, #24]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	4313      	orrs	r3, r2
 800868c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800868e:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d005      	beq.n	80086a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e086      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
 80086a0:	52002000 	.word	0x52002000
 80086a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	4b3f      	ldr	r3, [pc, #252]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d208      	bcs.n	80086d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086c4:	4b3c      	ldr	r3, [pc, #240]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	4939      	ldr	r1, [pc, #228]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d010      	beq.n	8008704 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695a      	ldr	r2, [r3, #20]
 80086e6:	4b34      	ldr	r3, [pc, #208]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d208      	bcs.n	8008704 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086f2:	4b31      	ldr	r3, [pc, #196]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	492e      	ldr	r1, [pc, #184]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008700:	4313      	orrs	r3, r2
 8008702:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	4b28      	ldr	r3, [pc, #160]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800871c:	429a      	cmp	r2, r3
 800871e:	d208      	bcs.n	8008732 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008720:	4b25      	ldr	r3, [pc, #148]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	4922      	ldr	r1, [pc, #136]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 800872e:	4313      	orrs	r3, r2
 8008730:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d010      	beq.n	8008760 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800874a:	429a      	cmp	r2, r3
 800874c:	d208      	bcs.n	8008760 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800874e:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	4917      	ldr	r1, [pc, #92]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 800875c:	4313      	orrs	r3, r2
 800875e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008760:	f000 f834 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	4912      	ldr	r1, [pc, #72]	; (80087bc <HAL_RCC_ClockConfig+0x35c>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	fa22 f303 	lsr.w	r3, r2, r3
 800877c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800877e:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	4a0d      	ldr	r2, [pc, #52]	; (80087bc <HAL_RCC_ClockConfig+0x35c>)
 8008788:	5cd3      	ldrb	r3, [r2, r3]
 800878a:	f003 031f 	and.w	r3, r3, #31
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	4a0a      	ldr	r2, [pc, #40]	; (80087c0 <HAL_RCC_ClockConfig+0x360>)
 8008796:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008798:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <HAL_RCC_ClockConfig+0x364>)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800879e:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <HAL_RCC_ClockConfig+0x368>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7f9 fed6 	bl	8002554 <HAL_InitTick>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	58024400 	.word	0x58024400
 80087bc:	08014424 	.word	0x08014424
 80087c0:	24000004 	.word	0x24000004
 80087c4:	24000000 	.word	0x24000000
 80087c8:	24000008 	.word	0x24000008

080087cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b089      	sub	sp, #36	; 0x24
 80087d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087d2:	4bb3      	ldr	r3, [pc, #716]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087da:	2b18      	cmp	r3, #24
 80087dc:	f200 8155 	bhi.w	8008a8a <HAL_RCC_GetSysClockFreq+0x2be>
 80087e0:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	08008a8b 	.word	0x08008a8b
 80087f0:	08008a8b 	.word	0x08008a8b
 80087f4:	08008a8b 	.word	0x08008a8b
 80087f8:	08008a8b 	.word	0x08008a8b
 80087fc:	08008a8b 	.word	0x08008a8b
 8008800:	08008a8b 	.word	0x08008a8b
 8008804:	08008a8b 	.word	0x08008a8b
 8008808:	08008873 	.word	0x08008873
 800880c:	08008a8b 	.word	0x08008a8b
 8008810:	08008a8b 	.word	0x08008a8b
 8008814:	08008a8b 	.word	0x08008a8b
 8008818:	08008a8b 	.word	0x08008a8b
 800881c:	08008a8b 	.word	0x08008a8b
 8008820:	08008a8b 	.word	0x08008a8b
 8008824:	08008a8b 	.word	0x08008a8b
 8008828:	08008879 	.word	0x08008879
 800882c:	08008a8b 	.word	0x08008a8b
 8008830:	08008a8b 	.word	0x08008a8b
 8008834:	08008a8b 	.word	0x08008a8b
 8008838:	08008a8b 	.word	0x08008a8b
 800883c:	08008a8b 	.word	0x08008a8b
 8008840:	08008a8b 	.word	0x08008a8b
 8008844:	08008a8b 	.word	0x08008a8b
 8008848:	0800887f 	.word	0x0800887f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884c:	4b94      	ldr	r3, [pc, #592]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d009      	beq.n	800886c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008858:	4b91      	ldr	r3, [pc, #580]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	08db      	lsrs	r3, r3, #3
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	4a90      	ldr	r2, [pc, #576]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
 8008868:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800886a:	e111      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800886c:	4b8d      	ldr	r3, [pc, #564]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800886e:	61bb      	str	r3, [r7, #24]
      break;
 8008870:	e10e      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008872:	4b8d      	ldr	r3, [pc, #564]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008874:	61bb      	str	r3, [r7, #24]
      break;
 8008876:	e10b      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008878:	4b8c      	ldr	r3, [pc, #560]	; (8008aac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800887a:	61bb      	str	r3, [r7, #24]
      break;
 800887c:	e108      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800887e:	4b88      	ldr	r3, [pc, #544]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008888:	4b85      	ldr	r3, [pc, #532]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888c:	091b      	lsrs	r3, r3, #4
 800888e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008892:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008894:	4b82      	ldr	r3, [pc, #520]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800889e:	4b80      	ldr	r3, [pc, #512]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 80e1 	beq.w	8008a84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	f000 8083 	beq.w	80089d0 <HAL_RCC_GetSysClockFreq+0x204>
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	f200 80a1 	bhi.w	8008a14 <HAL_RCC_GetSysClockFreq+0x248>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_RCC_GetSysClockFreq+0x114>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d056      	beq.n	800898c <HAL_RCC_GetSysClockFreq+0x1c0>
 80088de:	e099      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e0:	4b6f      	ldr	r3, [pc, #444]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d02d      	beq.n	8008948 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088ec:	4b6c      	ldr	r3, [pc, #432]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	08db      	lsrs	r3, r3, #3
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	4a6b      	ldr	r2, [pc, #428]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088f8:	fa22 f303 	lsr.w	r3, r2, r3
 80088fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b62      	ldr	r3, [pc, #392]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a02 	vldr	s12, [r7, #8]
 800892a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008946:	e087      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ab4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895a:	4b51      	ldr	r3, [pc, #324]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	ed97 6a02 	vldr	s12, [r7, #8]
 800896e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800898a:	e065      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008996:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800899a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899e:	4b40      	ldr	r3, [pc, #256]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80089b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089ce:	e043      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008abc <HAL_RCC_GetSysClockFreq+0x2f0>
 80089de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e2:	4b2f      	ldr	r3, [pc, #188]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a12:	e021      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a26:	4b1e      	ldr	r3, [pc, #120]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008a58:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	0a5b      	lsrs	r3, r3, #9
 8008a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a62:	3301      	adds	r3, #1
 8008a64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	ee07 3a90 	vmov	s15, r3
 8008a6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a7c:	ee17 3a90 	vmov	r3, s15
 8008a80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008a82:	e005      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
      break;
 8008a88:	e002      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008a8a:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a8c:	61bb      	str	r3, [r7, #24]
      break;
 8008a8e:	bf00      	nop
  }

  return sysclockfreq;
 8008a90:	69bb      	ldr	r3, [r7, #24]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3724      	adds	r7, #36	; 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	003d0900 	.word	0x003d0900
 8008aac:	017d7840 	.word	0x017d7840
 8008ab0:	46000000 	.word	0x46000000
 8008ab4:	4c742400 	.word	0x4c742400
 8008ab8:	4a742400 	.word	0x4a742400
 8008abc:	4bbebc20 	.word	0x4bbebc20

08008ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ac6:	f7ff fe81 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	0a1b      	lsrs	r3, r3, #8
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	490f      	ldr	r1, [pc, #60]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ad8:	5ccb      	ldrb	r3, [r1, r3]
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	4a09      	ldr	r2, [pc, #36]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8008aee:	5cd3      	ldrb	r3, [r2, r3]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	fa22 f303 	lsr.w	r3, r2, r3
 8008afa:	4a07      	ldr	r2, [pc, #28]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8008afc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008afe:	4a07      	ldr	r2, [pc, #28]	; (8008b1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b04:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b06:	681b      	ldr	r3, [r3, #0]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	58024400 	.word	0x58024400
 8008b14:	08014424 	.word	0x08014424
 8008b18:	24000004 	.word	0x24000004
 8008b1c:	24000000 	.word	0x24000000

08008b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b24:	f7ff ffcc 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	4904      	ldr	r1, [pc, #16]	; (8008b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b36:	5ccb      	ldrb	r3, [r1, r3]
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	58024400 	.word	0x58024400
 8008b48:	08014424 	.word	0x08014424

08008b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b50:	f7ff ffb6 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8008b54:	4602      	mov	r2, r0
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	4904      	ldr	r1, [pc, #16]	; (8008b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b62:	5ccb      	ldrb	r3, [r1, r3]
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	58024400 	.word	0x58024400
 8008b74:	08014424 	.word	0x08014424

08008b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	223f      	movs	r2, #63	; 0x3f
 8008b86:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b88:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <HAL_RCC_GetClockConfig+0x7c>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f003 0207 	and.w	r2, r3, #7
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008b94:	4b17      	ldr	r3, [pc, #92]	; (8008bf4 <HAL_RCC_GetClockConfig+0x7c>)
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008ba0:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <HAL_RCC_GetClockConfig+0x7c>)
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f003 020f 	and.w	r2, r3, #15
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008bac:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <HAL_RCC_GetClockConfig+0x7c>)
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <HAL_RCC_GetClockConfig+0x7c>)
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <HAL_RCC_GetClockConfig+0x7c>)
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008bd0:	4b08      	ldr	r3, [pc, #32]	; (8008bf4 <HAL_RCC_GetClockConfig+0x7c>)
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008bdc:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <HAL_RCC_GetClockConfig+0x80>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	601a      	str	r2, [r3, #0]
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	52002000 	.word	0x52002000

08008bfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c00:	b0ca      	sub	sp, #296	; 0x128
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008c20:	2500      	movs	r5, #0
 8008c22:	ea54 0305 	orrs.w	r3, r4, r5
 8008c26:	d049      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c32:	d02f      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008c34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c38:	d828      	bhi.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c3e:	d01a      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c44:	d822      	bhi.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c4e:	d007      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c50:	e01c      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c52:	4bb8      	ldr	r3, [pc, #736]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	4ab7      	ldr	r2, [pc, #732]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c5e:	e01a      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c64:	3308      	adds	r3, #8
 8008c66:	2102      	movs	r1, #2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f002 fb61 	bl	800b330 <RCCEx_PLL2_Config>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c74:	e00f      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c7a:	3328      	adds	r3, #40	; 0x28
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f002 fc08 	bl	800b494 <RCCEx_PLL3_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c8a:	e004      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c92:	e000      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c9e:	4ba5      	ldr	r3, [pc, #660]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cac:	4aa1      	ldr	r2, [pc, #644]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	6513      	str	r3, [r2, #80]	; 0x50
 8008cb2:	e003      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008cc8:	f04f 0900 	mov.w	r9, #0
 8008ccc:	ea58 0309 	orrs.w	r3, r8, r9
 8008cd0:	d047      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d82a      	bhi.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008cdc:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008cf9 	.word	0x08008cf9
 8008ce8:	08008d07 	.word	0x08008d07
 8008cec:	08008d1d 	.word	0x08008d1d
 8008cf0:	08008d3b 	.word	0x08008d3b
 8008cf4:	08008d3b 	.word	0x08008d3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf8:	4b8e      	ldr	r3, [pc, #568]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4a8d      	ldr	r2, [pc, #564]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d04:	e01a      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f002 fb0e 	bl	800b330 <RCCEx_PLL2_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d1a:	e00f      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d20:	3328      	adds	r3, #40	; 0x28
 8008d22:	2100      	movs	r1, #0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f002 fbb5 	bl	800b494 <RCCEx_PLL3_Config>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d30:	e004      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d38:	e000      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d44:	4b7b      	ldr	r3, [pc, #492]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d48:	f023 0107 	bic.w	r1, r3, #7
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d52:	4a78      	ldr	r2, [pc, #480]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d54:	430b      	orrs	r3, r1
 8008d56:	6513      	str	r3, [r2, #80]	; 0x50
 8008d58:	e003      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008d6e:	f04f 0b00 	mov.w	fp, #0
 8008d72:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d76:	d04c      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d82:	d030      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d88:	d829      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8008d8c:	d02d      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d90:	d825      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d92:	2b80      	cmp	r3, #128	; 0x80
 8008d94:	d018      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008d96:	2b80      	cmp	r3, #128	; 0x80
 8008d98:	d821      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d007      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008da2:	e01c      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da4:	4b63      	ldr	r3, [pc, #396]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	4a62      	ldr	r2, [pc, #392]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008db0:	e01c      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db6:	3308      	adds	r3, #8
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 fab8 	bl	800b330 <RCCEx_PLL2_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008dc6:	e011      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dcc:	3328      	adds	r3, #40	; 0x28
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 fb5f 	bl	800b494 <RCCEx_PLL3_Config>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ddc:	e006      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008de4:	e002      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008de6:	bf00      	nop
 8008de8:	e000      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008df4:	4b4f      	ldr	r3, [pc, #316]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e02:	4a4c      	ldr	r2, [pc, #304]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e04:	430b      	orrs	r3, r1
 8008e06:	6513      	str	r3, [r2, #80]	; 0x50
 8008e08:	e003      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008e1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008e22:	2300      	movs	r3, #0
 8008e24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	d053      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e3e:	d035      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e44:	d82e      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e4a:	d031      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008e4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e50:	d828      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e56:	d01a      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e5c:	d822      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e66:	d007      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008e68:	e01c      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e6a:	4b32      	ldr	r3, [pc, #200]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a31      	ldr	r2, [pc, #196]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e76:	e01c      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f002 fa55 	bl	800b330 <RCCEx_PLL2_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e8c:	e011      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e92:	3328      	adds	r3, #40	; 0x28
 8008e94:	2100      	movs	r1, #0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f002 fafc 	bl	800b494 <RCCEx_PLL3_Config>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ea2:	e006      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008eaa:	e002      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008eac:	bf00      	nop
 8008eae:	e000      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008eba:	4b1e      	ldr	r3, [pc, #120]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008eca:	4a1a      	ldr	r2, [pc, #104]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ecc:	430b      	orrs	r3, r1
 8008ece:	6593      	str	r3, [r2, #88]	; 0x58
 8008ed0:	e003      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008ee6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008eea:	2300      	movs	r3, #0
 8008eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ef0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	d056      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f06:	d038      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f0c:	d831      	bhi.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f12:	d034      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008f14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f18:	d82b      	bhi.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f1e:	d01d      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f24:	d825      	bhi.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d006      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f2e:	d00a      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008f30:	e01f      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f32:	bf00      	nop
 8008f34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f38:	4ba2      	ldr	r3, [pc, #648]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	4aa1      	ldr	r2, [pc, #644]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f44:	e01c      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f002 f9ee 	bl	800b330 <RCCEx_PLL2_Config>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f5a:	e011      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f60:	3328      	adds	r3, #40	; 0x28
 8008f62:	2100      	movs	r1, #0
 8008f64:	4618      	mov	r0, r3
 8008f66:	f002 fa95 	bl	800b494 <RCCEx_PLL3_Config>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f70:	e006      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f78:	e002      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008f7a:	bf00      	nop
 8008f7c:	e000      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f88:	4b8e      	ldr	r3, [pc, #568]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f98:	4a8a      	ldr	r2, [pc, #552]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f9a:	430b      	orrs	r3, r1
 8008f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f9e:	e003      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	d03a      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fce:	2b30      	cmp	r3, #48	; 0x30
 8008fd0:	d01f      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008fd2:	2b30      	cmp	r3, #48	; 0x30
 8008fd4:	d819      	bhi.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008fd6:	2b20      	cmp	r3, #32
 8008fd8:	d00c      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	d815      	bhi.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d019      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008fe2:	2b10      	cmp	r3, #16
 8008fe4:	d111      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe6:	4b77      	ldr	r3, [pc, #476]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	4a76      	ldr	r2, [pc, #472]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ff2:	e011      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 f997 	bl	800b330 <RCCEx_PLL2_Config>
 8009002:	4603      	mov	r3, r0
 8009004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009008:	e006      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009010:	e002      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009012:	bf00      	nop
 8009014:	e000      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009020:	4b68      	ldr	r3, [pc, #416]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009024:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	4a65      	ldr	r2, [pc, #404]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009030:	430b      	orrs	r3, r1
 8009032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009034:	e003      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800904a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800904e:	2300      	movs	r3, #0
 8009050:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009054:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009058:	460b      	mov	r3, r1
 800905a:	4313      	orrs	r3, r2
 800905c:	d051      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009068:	d035      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800906a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800906e:	d82e      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009074:	d031      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800907a:	d828      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800907c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009080:	d01a      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009086:	d822      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800908c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009090:	d007      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009092:	e01c      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009094:	4b4b      	ldr	r3, [pc, #300]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	4a4a      	ldr	r2, [pc, #296]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800909a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800909e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090a0:	e01c      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a6:	3308      	adds	r3, #8
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 f940 	bl	800b330 <RCCEx_PLL2_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090b6:	e011      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090bc:	3328      	adds	r3, #40	; 0x28
 80090be:	2100      	movs	r1, #0
 80090c0:	4618      	mov	r0, r3
 80090c2:	f002 f9e7 	bl	800b494 <RCCEx_PLL3_Config>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090cc:	e006      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090d4:	e002      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80090d6:	bf00      	nop
 80090d8:	e000      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80090da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10a      	bne.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090e4:	4b37      	ldr	r3, [pc, #220]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80090ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f2:	4a34      	ldr	r2, [pc, #208]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090f4:	430b      	orrs	r3, r1
 80090f6:	6513      	str	r3, [r2, #80]	; 0x50
 80090f8:	e003      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800910e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009112:	2300      	movs	r3, #0
 8009114:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009118:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800911c:	460b      	mov	r3, r1
 800911e:	4313      	orrs	r3, r2
 8009120:	d056      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800912c:	d033      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800912e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009132:	d82c      	bhi.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009134:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009138:	d02f      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800913a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800913e:	d826      	bhi.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009140:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009144:	d02b      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009146:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800914a:	d820      	bhi.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800914c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009150:	d012      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009156:	d81a      	bhi.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d022      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800915c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009160:	d115      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009166:	3308      	adds	r3, #8
 8009168:	2101      	movs	r1, #1
 800916a:	4618      	mov	r0, r3
 800916c:	f002 f8e0 	bl	800b330 <RCCEx_PLL2_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009176:	e015      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800917c:	3328      	adds	r3, #40	; 0x28
 800917e:	2101      	movs	r1, #1
 8009180:	4618      	mov	r0, r3
 8009182:	f002 f987 	bl	800b494 <RCCEx_PLL3_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800918c:	e00a      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009194:	e006      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009196:	bf00      	nop
 8009198:	e004      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10d      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091ac:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80091b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ba:	4a02      	ldr	r2, [pc, #8]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091bc:	430b      	orrs	r3, r1
 80091be:	6513      	str	r3, [r2, #80]	; 0x50
 80091c0:	e006      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80091c2:	bf00      	nop
 80091c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80091dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091e0:	2300      	movs	r3, #0
 80091e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4313      	orrs	r3, r2
 80091ee:	d055      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091fc:	d033      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80091fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009202:	d82c      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009208:	d02f      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800920a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800920e:	d826      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009210:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009214:	d02b      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009216:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800921a:	d820      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800921c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009220:	d012      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009226:	d81a      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009228:	2b00      	cmp	r3, #0
 800922a:	d022      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800922c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009230:	d115      	bne.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009236:	3308      	adds	r3, #8
 8009238:	2101      	movs	r1, #1
 800923a:	4618      	mov	r0, r3
 800923c:	f002 f878 	bl	800b330 <RCCEx_PLL2_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009246:	e015      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924c:	3328      	adds	r3, #40	; 0x28
 800924e:	2101      	movs	r1, #1
 8009250:	4618      	mov	r0, r3
 8009252:	f002 f91f 	bl	800b494 <RCCEx_PLL3_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800925c:	e00a      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009264:	e006      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009266:	bf00      	nop
 8009268:	e004      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800926a:	bf00      	nop
 800926c:	e002      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800926e:	bf00      	nop
 8009270:	e000      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10b      	bne.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800927c:	4ba3      	ldr	r3, [pc, #652]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800928c:	4a9f      	ldr	r2, [pc, #636]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928e:	430b      	orrs	r3, r1
 8009290:	6593      	str	r3, [r2, #88]	; 0x58
 8009292:	e003      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009298:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800929c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80092a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80092b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092b6:	460b      	mov	r3, r1
 80092b8:	4313      	orrs	r3, r2
 80092ba:	d037      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c6:	d00e      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80092c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092cc:	d816      	bhi.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d018      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80092d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092d6:	d111      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d8:	4b8c      	ldr	r3, [pc, #560]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	4a8b      	ldr	r2, [pc, #556]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092e4:	e00f      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ea:	3308      	adds	r3, #8
 80092ec:	2101      	movs	r1, #1
 80092ee:	4618      	mov	r0, r3
 80092f0:	f002 f81e 	bl	800b330 <RCCEx_PLL2_Config>
 80092f4:	4603      	mov	r3, r0
 80092f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092fa:	e004      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009302:	e000      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800930e:	4b7f      	ldr	r3, [pc, #508]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009312:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800931a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931c:	4a7b      	ldr	r2, [pc, #492]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800931e:	430b      	orrs	r3, r1
 8009320:	6513      	str	r3, [r2, #80]	; 0x50
 8009322:	e003      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800932c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800933c:	2300      	movs	r3, #0
 800933e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009342:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009346:	460b      	mov	r3, r1
 8009348:	4313      	orrs	r3, r2
 800934a:	d039      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800934c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009352:	2b03      	cmp	r3, #3
 8009354:	d81c      	bhi.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009356:	a201      	add	r2, pc, #4	; (adr r2, 800935c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	08009399 	.word	0x08009399
 8009360:	0800936d 	.word	0x0800936d
 8009364:	0800937b 	.word	0x0800937b
 8009368:	08009399 	.word	0x08009399
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800936c:	4b67      	ldr	r3, [pc, #412]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	4a66      	ldr	r2, [pc, #408]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009378:	e00f      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800937e:	3308      	adds	r3, #8
 8009380:	2102      	movs	r1, #2
 8009382:	4618      	mov	r0, r3
 8009384:	f001 ffd4 	bl	800b330 <RCCEx_PLL2_Config>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800938e:	e004      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009396:	e000      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800939a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093a2:	4b5a      	ldr	r3, [pc, #360]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a6:	f023 0103 	bic.w	r1, r3, #3
 80093aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b0:	4a56      	ldr	r2, [pc, #344]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b2:	430b      	orrs	r3, r1
 80093b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093b6:	e003      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80093cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093d0:	2300      	movs	r3, #0
 80093d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80093da:	460b      	mov	r3, r1
 80093dc:	4313      	orrs	r3, r2
 80093de:	f000 809f 	beq.w	8009520 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093e2:	4b4b      	ldr	r3, [pc, #300]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a4a      	ldr	r2, [pc, #296]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80093e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093ee:	f7f9 fb79 	bl	8002ae4 <HAL_GetTick>
 80093f2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093f6:	e00b      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093f8:	f7f9 fb74 	bl	8002ae4 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	2b64      	cmp	r3, #100	; 0x64
 8009406:	d903      	bls.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800940e:	e005      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009410:	4b3f      	ldr	r3, [pc, #252]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0ed      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800941c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009420:	2b00      	cmp	r3, #0
 8009422:	d179      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009424:	4b39      	ldr	r3, [pc, #228]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800942c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009430:	4053      	eors	r3, r2
 8009432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009436:	2b00      	cmp	r3, #0
 8009438:	d015      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800943a:	4b34      	ldr	r3, [pc, #208]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800943c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009442:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009446:	4b31      	ldr	r3, [pc, #196]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944a:	4a30      	ldr	r2, [pc, #192]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800944c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009450:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009452:	4b2e      	ldr	r3, [pc, #184]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009456:	4a2d      	ldr	r2, [pc, #180]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800945c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800945e:	4a2b      	ldr	r2, [pc, #172]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009460:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009464:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800946e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009472:	d118      	bne.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009474:	f7f9 fb36 	bl	8002ae4 <HAL_GetTick>
 8009478:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800947c:	e00d      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800947e:	f7f9 fb31 	bl	8002ae4 <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009488:	1ad2      	subs	r2, r2, r3
 800948a:	f241 3388 	movw	r3, #5000	; 0x1388
 800948e:	429a      	cmp	r2, r3
 8009490:	d903      	bls.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009498:	e005      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800949a:	4b1c      	ldr	r3, [pc, #112]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0eb      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80094a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d129      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094be:	d10e      	bne.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80094c0:	4b12      	ldr	r3, [pc, #72]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80094c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094d0:	091a      	lsrs	r2, r3, #4
 80094d2:	4b10      	ldr	r3, [pc, #64]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80094d4:	4013      	ands	r3, r2
 80094d6:	4a0d      	ldr	r2, [pc, #52]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094d8:	430b      	orrs	r3, r1
 80094da:	6113      	str	r3, [r2, #16]
 80094dc:	e005      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80094de:	4b0b      	ldr	r3, [pc, #44]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	4a0a      	ldr	r2, [pc, #40]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80094e8:	6113      	str	r3, [r2, #16]
 80094ea:	4b08      	ldr	r3, [pc, #32]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80094ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094fa:	4a04      	ldr	r2, [pc, #16]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094fc:	430b      	orrs	r3, r1
 80094fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009500:	e00e      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800950a:	e009      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800950c:	58024400 	.word	0x58024400
 8009510:	58024800 	.word	0x58024800
 8009514:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800951c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f002 0301 	and.w	r3, r2, #1
 800952c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009530:	2300      	movs	r3, #0
 8009532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009536:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800953a:	460b      	mov	r3, r1
 800953c:	4313      	orrs	r3, r2
 800953e:	f000 8089 	beq.w	8009654 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009548:	2b28      	cmp	r3, #40	; 0x28
 800954a:	d86b      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800954c:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009552:	bf00      	nop
 8009554:	0800962d 	.word	0x0800962d
 8009558:	08009625 	.word	0x08009625
 800955c:	08009625 	.word	0x08009625
 8009560:	08009625 	.word	0x08009625
 8009564:	08009625 	.word	0x08009625
 8009568:	08009625 	.word	0x08009625
 800956c:	08009625 	.word	0x08009625
 8009570:	08009625 	.word	0x08009625
 8009574:	080095f9 	.word	0x080095f9
 8009578:	08009625 	.word	0x08009625
 800957c:	08009625 	.word	0x08009625
 8009580:	08009625 	.word	0x08009625
 8009584:	08009625 	.word	0x08009625
 8009588:	08009625 	.word	0x08009625
 800958c:	08009625 	.word	0x08009625
 8009590:	08009625 	.word	0x08009625
 8009594:	0800960f 	.word	0x0800960f
 8009598:	08009625 	.word	0x08009625
 800959c:	08009625 	.word	0x08009625
 80095a0:	08009625 	.word	0x08009625
 80095a4:	08009625 	.word	0x08009625
 80095a8:	08009625 	.word	0x08009625
 80095ac:	08009625 	.word	0x08009625
 80095b0:	08009625 	.word	0x08009625
 80095b4:	0800962d 	.word	0x0800962d
 80095b8:	08009625 	.word	0x08009625
 80095bc:	08009625 	.word	0x08009625
 80095c0:	08009625 	.word	0x08009625
 80095c4:	08009625 	.word	0x08009625
 80095c8:	08009625 	.word	0x08009625
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009625 	.word	0x08009625
 80095d4:	0800962d 	.word	0x0800962d
 80095d8:	08009625 	.word	0x08009625
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009625 	.word	0x08009625
 80095e4:	08009625 	.word	0x08009625
 80095e8:	08009625 	.word	0x08009625
 80095ec:	08009625 	.word	0x08009625
 80095f0:	08009625 	.word	0x08009625
 80095f4:	0800962d 	.word	0x0800962d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fc:	3308      	adds	r3, #8
 80095fe:	2101      	movs	r1, #1
 8009600:	4618      	mov	r0, r3
 8009602:	f001 fe95 	bl	800b330 <RCCEx_PLL2_Config>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800960c:	e00f      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009612:	3328      	adds	r3, #40	; 0x28
 8009614:	2101      	movs	r1, #1
 8009616:	4618      	mov	r0, r3
 8009618:	f001 ff3c 	bl	800b494 <RCCEx_PLL3_Config>
 800961c:	4603      	mov	r3, r0
 800961e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009622:	e004      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800962a:	e000      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800962c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800962e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009636:	4bbf      	ldr	r3, [pc, #764]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800963e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009644:	4abb      	ldr	r2, [pc, #748]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009646:	430b      	orrs	r3, r1
 8009648:	6553      	str	r3, [r2, #84]	; 0x54
 800964a:	e003      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f002 0302 	and.w	r3, r2, #2
 8009660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009664:	2300      	movs	r3, #0
 8009666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800966a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800966e:	460b      	mov	r3, r1
 8009670:	4313      	orrs	r3, r2
 8009672:	d041      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800967a:	2b05      	cmp	r3, #5
 800967c:	d824      	bhi.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800967e:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	080096d1 	.word	0x080096d1
 8009688:	0800969d 	.word	0x0800969d
 800968c:	080096b3 	.word	0x080096b3
 8009690:	080096d1 	.word	0x080096d1
 8009694:	080096d1 	.word	0x080096d1
 8009698:	080096d1 	.word	0x080096d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a0:	3308      	adds	r3, #8
 80096a2:	2101      	movs	r1, #1
 80096a4:	4618      	mov	r0, r3
 80096a6:	f001 fe43 	bl	800b330 <RCCEx_PLL2_Config>
 80096aa:	4603      	mov	r3, r0
 80096ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096b0:	e00f      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b6:	3328      	adds	r3, #40	; 0x28
 80096b8:	2101      	movs	r1, #1
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 feea 	bl	800b494 <RCCEx_PLL3_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096c6:	e004      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096ce:	e000      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80096d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096da:	4b96      	ldr	r3, [pc, #600]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096de:	f023 0107 	bic.w	r1, r3, #7
 80096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e8:	4a92      	ldr	r2, [pc, #584]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096ea:	430b      	orrs	r3, r1
 80096ec:	6553      	str	r3, [r2, #84]	; 0x54
 80096ee:	e003      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f002 0304 	and.w	r3, r2, #4
 8009704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009708:	2300      	movs	r3, #0
 800970a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800970e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009712:	460b      	mov	r3, r1
 8009714:	4313      	orrs	r3, r2
 8009716:	d044      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800971c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009720:	2b05      	cmp	r3, #5
 8009722:	d825      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009724:	a201      	add	r2, pc, #4	; (adr r2, 800972c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972a:	bf00      	nop
 800972c:	08009779 	.word	0x08009779
 8009730:	08009745 	.word	0x08009745
 8009734:	0800975b 	.word	0x0800975b
 8009738:	08009779 	.word	0x08009779
 800973c:	08009779 	.word	0x08009779
 8009740:	08009779 	.word	0x08009779
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009748:	3308      	adds	r3, #8
 800974a:	2101      	movs	r1, #1
 800974c:	4618      	mov	r0, r3
 800974e:	f001 fdef 	bl	800b330 <RCCEx_PLL2_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009758:	e00f      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975e:	3328      	adds	r3, #40	; 0x28
 8009760:	2101      	movs	r1, #1
 8009762:	4618      	mov	r0, r3
 8009764:	f001 fe96 	bl	800b494 <RCCEx_PLL3_Config>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800976e:	e004      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009776:	e000      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800977a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009782:	4b6c      	ldr	r3, [pc, #432]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009786:	f023 0107 	bic.w	r1, r3, #7
 800978a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009792:	4a68      	ldr	r2, [pc, #416]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009794:	430b      	orrs	r3, r1
 8009796:	6593      	str	r3, [r2, #88]	; 0x58
 8009798:	e003      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800979e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f002 0320 	and.w	r3, r2, #32
 80097ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80097b2:	2300      	movs	r3, #0
 80097b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80097bc:	460b      	mov	r3, r1
 80097be:	4313      	orrs	r3, r2
 80097c0:	d055      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ce:	d033      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80097d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d4:	d82c      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097da:	d02f      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80097dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e0:	d826      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097e6:	d02b      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80097e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097ec:	d820      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f2:	d012      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80097f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f8:	d81a      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d022      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80097fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009802:	d115      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009808:	3308      	adds	r3, #8
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f001 fd8f 	bl	800b330 <RCCEx_PLL2_Config>
 8009812:	4603      	mov	r3, r0
 8009814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009818:	e015      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981e:	3328      	adds	r3, #40	; 0x28
 8009820:	2102      	movs	r1, #2
 8009822:	4618      	mov	r0, r3
 8009824:	f001 fe36 	bl	800b494 <RCCEx_PLL3_Config>
 8009828:	4603      	mov	r3, r0
 800982a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800982e:	e00a      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009836:	e006      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009838:	bf00      	nop
 800983a:	e004      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800983c:	bf00      	nop
 800983e:	e002      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009840:	bf00      	nop
 8009842:	e000      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10b      	bne.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800984e:	4b39      	ldr	r3, [pc, #228]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009852:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800985e:	4a35      	ldr	r2, [pc, #212]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009860:	430b      	orrs	r3, r1
 8009862:	6553      	str	r3, [r2, #84]	; 0x54
 8009864:	e003      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800986a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800987a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800987e:	2300      	movs	r3, #0
 8009880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009884:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009888:	460b      	mov	r3, r1
 800988a:	4313      	orrs	r3, r2
 800988c:	d058      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009896:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800989a:	d033      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800989c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098a0:	d82c      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a6:	d02f      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80098a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ac:	d826      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098b2:	d02b      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80098b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098b8:	d820      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098be:	d012      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80098c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098c4:	d81a      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d022      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80098ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ce:	d115      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d4:	3308      	adds	r3, #8
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fd29 	bl	800b330 <RCCEx_PLL2_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098e4:	e015      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ea:	3328      	adds	r3, #40	; 0x28
 80098ec:	2102      	movs	r1, #2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 fdd0 	bl	800b494 <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098fa:	e00a      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009902:	e006      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009904:	bf00      	nop
 8009906:	e004      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009908:	bf00      	nop
 800990a:	e002      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800990c:	bf00      	nop
 800990e:	e000      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10e      	bne.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800991a:	4b06      	ldr	r3, [pc, #24]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800991c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800992a:	4a02      	ldr	r2, [pc, #8]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800992c:	430b      	orrs	r3, r1
 800992e:	6593      	str	r3, [r2, #88]	; 0x58
 8009930:	e006      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009932:	bf00      	nop
 8009934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800993c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800994c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009950:	2300      	movs	r3, #0
 8009952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009956:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800995a:	460b      	mov	r3, r1
 800995c:	4313      	orrs	r3, r2
 800995e:	d055      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009964:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009968:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800996c:	d033      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800996e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009972:	d82c      	bhi.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009978:	d02f      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800997a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800997e:	d826      	bhi.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009980:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009984:	d02b      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009986:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800998a:	d820      	bhi.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800998c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009990:	d012      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009996:	d81a      	bhi.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d022      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800999c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099a0:	d115      	bne.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a6:	3308      	adds	r3, #8
 80099a8:	2100      	movs	r1, #0
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 fcc0 	bl	800b330 <RCCEx_PLL2_Config>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099b6:	e015      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099bc:	3328      	adds	r3, #40	; 0x28
 80099be:	2102      	movs	r1, #2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 fd67 	bl	800b494 <RCCEx_PLL3_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099cc:	e00a      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099d4:	e006      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099d6:	bf00      	nop
 80099d8:	e004      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099da:	bf00      	nop
 80099dc:	e002      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099de:	bf00      	nop
 80099e0:	e000      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099ec:	4ba1      	ldr	r3, [pc, #644]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099fc:	4a9d      	ldr	r2, [pc, #628]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099fe:	430b      	orrs	r3, r1
 8009a00:	6593      	str	r3, [r2, #88]	; 0x58
 8009a02:	e003      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	f002 0308 	and.w	r3, r2, #8
 8009a18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009a26:	460b      	mov	r3, r1
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	d01e      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a38:	d10c      	bne.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3e:	3328      	adds	r3, #40	; 0x28
 8009a40:	2102      	movs	r1, #2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fd26 	bl	800b494 <RCCEx_PLL3_Config>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a54:	4b87      	ldr	r3, [pc, #540]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a64:	4a83      	ldr	r2, [pc, #524]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f002 0310 	and.w	r3, r2, #16
 8009a76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a80:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009a84:	460b      	mov	r3, r1
 8009a86:	4313      	orrs	r3, r2
 8009a88:	d01e      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a96:	d10c      	bne.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9c:	3328      	adds	r3, #40	; 0x28
 8009a9e:	2102      	movs	r1, #2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 fcf7 	bl	800b494 <RCCEx_PLL3_Config>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ab2:	4b70      	ldr	r3, [pc, #448]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ac2:	4a6c      	ldr	r2, [pc, #432]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ade:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	d03e      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af4:	d022      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009afa:	d81b      	bhi.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b04:	d00b      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009b06:	e015      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	2100      	movs	r1, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f001 fc0d 	bl	800b330 <RCCEx_PLL2_Config>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b1c:	e00f      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b22:	3328      	adds	r3, #40	; 0x28
 8009b24:	2102      	movs	r1, #2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f001 fcb4 	bl	800b494 <RCCEx_PLL3_Config>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b32:	e004      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b3a:	e000      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10b      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b46:	4b4b      	ldr	r3, [pc, #300]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b56:	4a47      	ldr	r2, [pc, #284]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b5c:	e003      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b74:	2300      	movs	r3, #0
 8009b76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b78:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	d03b      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b8e:	d01f      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b94:	d818      	bhi.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b9a:	d003      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ba0:	d007      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009ba2:	e011      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba4:	4b33      	ldr	r3, [pc, #204]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	4a32      	ldr	r2, [pc, #200]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bb0:	e00f      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb6:	3328      	adds	r3, #40	; 0x28
 8009bb8:	2101      	movs	r1, #1
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 fc6a 	bl	800b494 <RCCEx_PLL3_Config>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bc6:	e004      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bce:	e000      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bda:	4b26      	ldr	r3, [pc, #152]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bea:	4a22      	ldr	r2, [pc, #136]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bec:	430b      	orrs	r3, r1
 8009bee:	6553      	str	r3, [r2, #84]	; 0x54
 8009bf0:	e003      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009c06:	673b      	str	r3, [r7, #112]	; 0x70
 8009c08:	2300      	movs	r3, #0
 8009c0a:	677b      	str	r3, [r7, #116]	; 0x74
 8009c0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009c10:	460b      	mov	r3, r1
 8009c12:	4313      	orrs	r3, r2
 8009c14:	d034      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c24:	d007      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009c26:	e011      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c28:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a11      	ldr	r2, [pc, #68]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c34:	e00e      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	2102      	movs	r1, #2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 fb76 	bl	800b330 <RCCEx_PLL2_Config>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c4a:	e003      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10d      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c5c:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6a:	4a02      	ldr	r2, [pc, #8]	; (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c70:	e006      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009c72:	bf00      	nop
 8009c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009c8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c8e:	2300      	movs	r3, #0
 8009c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009c96:	460b      	mov	r3, r1
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	d00c      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca0:	3328      	adds	r3, #40	; 0x28
 8009ca2:	2102      	movs	r1, #2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 fbf5 	bl	800b494 <RCCEx_PLL3_Config>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	667b      	str	r3, [r7, #100]	; 0x64
 8009cc8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	d038      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cde:	d018      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ce4:	d811      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cea:	d014      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cf0:	d80b      	bhi.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d011      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfa:	d106      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cfc:	4bc3      	ldr	r3, [pc, #780]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	4ac2      	ldr	r2, [pc, #776]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d08:	e008      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d10:	e004      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d12:	bf00      	nop
 8009d14:	e002      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d16:	bf00      	nop
 8009d18:	e000      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d24:	4bb9      	ldr	r3, [pc, #740]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d34:	4ab5      	ldr	r2, [pc, #724]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d36:	430b      	orrs	r3, r1
 8009d38:	6553      	str	r3, [r2, #84]	; 0x54
 8009d3a:	e003      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009d50:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d52:	2300      	movs	r3, #0
 8009d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	d009      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d60:	4baa      	ldr	r3, [pc, #680]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d6e:	4aa7      	ldr	r2, [pc, #668]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d70:	430b      	orrs	r3, r1
 8009d72:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009d80:	653b      	str	r3, [r7, #80]	; 0x50
 8009d82:	2300      	movs	r3, #0
 8009d84:	657b      	str	r3, [r7, #84]	; 0x54
 8009d86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	d00a      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009d90:	4b9e      	ldr	r3, [pc, #632]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009da0:	4a9a      	ldr	r2, [pc, #616]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009da2:	430b      	orrs	r3, r1
 8009da4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009db4:	2300      	movs	r3, #0
 8009db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009db8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	d009      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009dc2:	4b92      	ldr	r3, [pc, #584]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd0:	4a8e      	ldr	r2, [pc, #568]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009de2:	643b      	str	r3, [r7, #64]	; 0x40
 8009de4:	2300      	movs	r3, #0
 8009de6:	647b      	str	r3, [r7, #68]	; 0x44
 8009de8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009dec:	460b      	mov	r3, r1
 8009dee:	4313      	orrs	r3, r2
 8009df0:	d00e      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009df2:	4b86      	ldr	r3, [pc, #536]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	4a85      	ldr	r2, [pc, #532]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009df8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dfc:	6113      	str	r3, [r2, #16]
 8009dfe:	4b83      	ldr	r3, [pc, #524]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e00:	6919      	ldr	r1, [r3, #16]
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009e0a:	4a80      	ldr	r2, [pc, #512]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e0c:	430b      	orrs	r3, r1
 8009e0e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e1e:	2300      	movs	r3, #0
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009e26:	460b      	mov	r3, r1
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	d009      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e2c:	4b77      	ldr	r3, [pc, #476]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e30:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3a:	4a74      	ldr	r2, [pc, #464]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8009e4e:	2300      	movs	r3, #0
 8009e50:	637b      	str	r3, [r7, #52]	; 0x34
 8009e52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009e56:	460b      	mov	r3, r1
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	d00a      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e5c:	4b6b      	ldr	r3, [pc, #428]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e60:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e6c:	4a67      	ldr	r2, [pc, #412]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e6e:	430b      	orrs	r3, r1
 8009e70:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	d011      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e92:	3308      	adds	r3, #8
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fa4a 	bl	800b330 <RCCEx_PLL2_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	2100      	movs	r1, #0
 8009ebc:	6239      	str	r1, [r7, #32]
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d011      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 fa2a 	bl	800b330 <RCCEx_PLL2_Config>
 8009edc:	4603      	mov	r3, r0
 8009ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	2100      	movs	r1, #0
 8009efc:	61b9      	str	r1, [r7, #24]
 8009efe:	f003 0304 	and.w	r3, r3, #4
 8009f02:	61fb      	str	r3, [r7, #28]
 8009f04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	d011      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f12:	3308      	adds	r3, #8
 8009f14:	2102      	movs	r1, #2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 fa0a 	bl	800b330 <RCCEx_PLL2_Config>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6139      	str	r1, [r7, #16]
 8009f3e:	f003 0308 	and.w	r3, r3, #8
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	d011      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f52:	3328      	adds	r3, #40	; 0x28
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 fa9c 	bl	800b494 <RCCEx_PLL3_Config>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	f003 0310 	and.w	r3, r3, #16
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	d011      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f92:	3328      	adds	r3, #40	; 0x28
 8009f94:	2101      	movs	r1, #1
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 fa7c 	bl	800b494 <RCCEx_PLL3_Config>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	2100      	movs	r1, #0
 8009fbc:	6039      	str	r1, [r7, #0]
 8009fbe:	f003 0320 	and.w	r3, r3, #32
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	d011      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd2:	3328      	adds	r3, #40	; 0x28
 8009fd4:	2102      	movs	r1, #2
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 fa5c 	bl	800b494 <RCCEx_PLL3_Config>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009ff2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e000      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
}
 800a000:	4618      	mov	r0, r3
 800a002:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a006:	46bd      	mov	sp, r7
 800a008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a00c:	58024400 	.word	0x58024400

0800a010 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b090      	sub	sp, #64	; 0x40
 800a014:	af00      	add	r7, sp, #0
 800a016:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a01e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a022:	430b      	orrs	r3, r1
 800a024:	f040 8094 	bne.w	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a028:	4b9e      	ldr	r3, [pc, #632]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a02c:	f003 0307 	and.w	r3, r3, #7
 800a030:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	2b04      	cmp	r3, #4
 800a036:	f200 8087 	bhi.w	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a03a:	a201      	add	r2, pc, #4	; (adr r2, 800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a040:	0800a055 	.word	0x0800a055
 800a044:	0800a07d 	.word	0x0800a07d
 800a048:	0800a0a5 	.word	0x0800a0a5
 800a04c:	0800a141 	.word	0x0800a141
 800a050:	0800a0cd 	.word	0x0800a0cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a054:	4b93      	ldr	r3, [pc, #588]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a05c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a060:	d108      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a066:	4618      	mov	r0, r3
 800a068:	f001 f810 	bl	800b08c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a070:	f000 bd45 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a078:	f000 bd41 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a07c:	4b89      	ldr	r3, [pc, #548]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a088:	d108      	bne.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a08a:	f107 0318 	add.w	r3, r7, #24
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fd54 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a098:	f000 bd31 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0a0:	f000 bd2d 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0a4:	4b7f      	ldr	r3, [pc, #508]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0b0:	d108      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0b2:	f107 030c 	add.w	r3, r7, #12
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fe94 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c0:	f000 bd1d 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0c8:	f000 bd19 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0cc:	4b75      	ldr	r3, [pc, #468]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0d6:	4b73      	ldr	r3, [pc, #460]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d10c      	bne.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0e8:	4b6e      	ldr	r3, [pc, #440]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	08db      	lsrs	r3, r3, #3
 800a0ee:	f003 0303 	and.w	r3, r3, #3
 800a0f2:	4a6d      	ldr	r2, [pc, #436]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0fa:	e01f      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0fc:	4b69      	ldr	r3, [pc, #420]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a108:	d106      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a110:	d102      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a112:	4b66      	ldr	r3, [pc, #408]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a114:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a116:	e011      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a118:	4b62      	ldr	r3, [pc, #392]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a124:	d106      	bne.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a12c:	d102      	bne.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a12e:	4b60      	ldr	r3, [pc, #384]	; (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a130:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a132:	e003      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a138:	f000 bce1 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a13c:	f000 bcdf 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a140:	4b5c      	ldr	r3, [pc, #368]	; (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a144:	f000 bcdb 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14c:	f000 bcd7 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a154:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a158:	430b      	orrs	r3, r1
 800a15a:	f040 80ad 	bne.w	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a15e:	4b51      	ldr	r3, [pc, #324]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a162:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a166:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16e:	d056      	beq.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a176:	f200 8090 	bhi.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	2bc0      	cmp	r3, #192	; 0xc0
 800a17e:	f000 8088 	beq.w	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	2bc0      	cmp	r3, #192	; 0xc0
 800a186:	f200 8088 	bhi.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	2b80      	cmp	r3, #128	; 0x80
 800a18e:	d032      	beq.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	2b80      	cmp	r3, #128	; 0x80
 800a194:	f200 8081 	bhi.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	2b40      	cmp	r3, #64	; 0x40
 800a1a2:	d014      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a1a4:	e079      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1a6:	4b3f      	ldr	r3, [pc, #252]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b2:	d108      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 ff67 	bl	800b08c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c2:	f000 bc9c 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ca:	f000 bc98 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1ce:	4b35      	ldr	r3, [pc, #212]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1da:	d108      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1dc:	f107 0318 	add.w	r3, r7, #24
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fcab 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ea:	f000 bc88 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1f2:	f000 bc84 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1f6:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a202:	d108      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a204:	f107 030c 	add.w	r3, r7, #12
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 fdeb 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a212:	f000 bc74 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a216:	2300      	movs	r3, #0
 800a218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a21a:	f000 bc70 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a21e:	4b21      	ldr	r3, [pc, #132]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a226:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a228:	4b1e      	ldr	r3, [pc, #120]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b04      	cmp	r3, #4
 800a232:	d10c      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a236:	2b00      	cmp	r3, #0
 800a238:	d109      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a23a:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a246:	fa22 f303 	lsr.w	r3, r2, r3
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24c:	e01f      	b.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a24e:	4b15      	ldr	r3, [pc, #84]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25a:	d106      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a262:	d102      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a264:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a268:	e011      	b.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a26a:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a276:	d106      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27e:	d102      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a280:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a282:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a284:	e003      	b.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a28a:	f000 bc38 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a28e:	f000 bc36 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a292:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a296:	f000 bc32 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a29e:	f000 bc2e 	b.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2a2:	bf00      	nop
 800a2a4:	58024400 	.word	0x58024400
 800a2a8:	03d09000 	.word	0x03d09000
 800a2ac:	003d0900 	.word	0x003d0900
 800a2b0:	017d7840 	.word	0x017d7840
 800a2b4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2bc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	f040 809c 	bne.w	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a2c6:	4b9e      	ldr	r3, [pc, #632]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a2ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2d6:	d054      	beq.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2de:	f200 808b 	bhi.w	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2e8:	f000 8083 	beq.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2f2:	f200 8081 	bhi.w	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2fc:	d02f      	beq.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a304:	d878      	bhi.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d004      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a312:	d012      	beq.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a314:	e070      	b.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a316:	4b8a      	ldr	r3, [pc, #552]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a322:	d107      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 feaf 	bl	800b08c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a332:	e3e4      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a338:	e3e1      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a33a:	4b81      	ldr	r3, [pc, #516]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a346:	d107      	bne.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a348:	f107 0318 	add.w	r3, r7, #24
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fbf5 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a356:	e3d2      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a35c:	e3cf      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a35e:	4b78      	ldr	r3, [pc, #480]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a36a:	d107      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a36c:	f107 030c 	add.w	r3, r7, #12
 800a370:	4618      	mov	r0, r3
 800a372:	f000 fd37 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a37a:	e3c0      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a380:	e3bd      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a382:	4b6f      	ldr	r3, [pc, #444]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a38a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a38c:	4b6c      	ldr	r3, [pc, #432]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b04      	cmp	r3, #4
 800a396:	d10c      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a39e:	4b68      	ldr	r3, [pc, #416]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	08db      	lsrs	r3, r3, #3
 800a3a4:	f003 0303 	and.w	r3, r3, #3
 800a3a8:	4a66      	ldr	r2, [pc, #408]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b0:	e01e      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3b2:	4b63      	ldr	r3, [pc, #396]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3be:	d106      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3c6:	d102      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3c8:	4b5f      	ldr	r3, [pc, #380]	; (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3cc:	e010      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3ce:	4b5c      	ldr	r3, [pc, #368]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3da:	d106      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3e2:	d102      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3e4:	4b59      	ldr	r3, [pc, #356]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e8:	e002      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a3ee:	e386      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3f0:	e385      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3f2:	4b57      	ldr	r3, [pc, #348]	; (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3f6:	e382      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3fc:	e37f      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a402:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a406:	430b      	orrs	r3, r1
 800a408:	f040 80a7 	bne.w	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a40c:	4b4c      	ldr	r3, [pc, #304]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a410:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a414:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a41c:	d055      	beq.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a424:	f200 8096 	bhi.w	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a42e:	f000 8084 	beq.w	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a438:	f200 808c 	bhi.w	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a442:	d030      	beq.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a44a:	f200 8083 	bhi.w	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	2b00      	cmp	r3, #0
 800a452:	d004      	beq.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a45a:	d012      	beq.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a45c:	e07a      	b.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a45e:	4b38      	ldr	r3, [pc, #224]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a46a:	d107      	bne.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a46c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fe0b 	bl	800b08c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a47a:	e340      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a47c:	2300      	movs	r3, #0
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a480:	e33d      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a482:	4b2f      	ldr	r3, [pc, #188]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a48a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a48e:	d107      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a490:	f107 0318 	add.w	r3, r7, #24
 800a494:	4618      	mov	r0, r3
 800a496:	f000 fb51 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a49e:	e32e      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a4:	e32b      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4a6:	4b26      	ldr	r3, [pc, #152]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b2:	d107      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b4:	f107 030c 	add.w	r3, r7, #12
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 fc93 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c2:	e31c      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c8:	e319      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4ca:	4b1d      	ldr	r3, [pc, #116]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4d4:	4b1a      	ldr	r3, [pc, #104]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d10c      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d109      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4e6:	4b16      	ldr	r3, [pc, #88]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	08db      	lsrs	r3, r3, #3
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	4a14      	ldr	r2, [pc, #80]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f8:	e01e      	b.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4fa:	4b11      	ldr	r3, [pc, #68]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a506:	d106      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a50e:	d102      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a510:	4b0d      	ldr	r3, [pc, #52]	; (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a514:	e010      	b.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a51e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a522:	d106      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52a:	d102      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a52c:	4b07      	ldr	r3, [pc, #28]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a52e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a530:	e002      	b.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a536:	e2e2      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a538:	e2e1      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a53a:	4b05      	ldr	r3, [pc, #20]	; (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a53e:	e2de      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a540:	58024400 	.word	0x58024400
 800a544:	03d09000 	.word	0x03d09000
 800a548:	003d0900 	.word	0x003d0900
 800a54c:	017d7840 	.word	0x017d7840
 800a550:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a558:	e2d1      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a55a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a55e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a562:	430b      	orrs	r3, r1
 800a564:	f040 809c 	bne.w	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a568:	4b93      	ldr	r3, [pc, #588]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a56a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a570:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a578:	d054      	beq.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a580:	f200 808b 	bhi.w	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a58a:	f000 8083 	beq.w	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a594:	f200 8081 	bhi.w	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a59e:	d02f      	beq.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a6:	d878      	bhi.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b4:	d012      	beq.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a5b6:	e070      	b.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5b8:	4b7f      	ldr	r3, [pc, #508]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5c4:	d107      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fd5e 	bl	800b08c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d4:	e293      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5da:	e290      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5dc:	4b76      	ldr	r3, [pc, #472]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5e8:	d107      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ea:	f107 0318 	add.w	r3, r7, #24
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 faa4 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f8:	e281      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5fe:	e27e      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a600:	4b6d      	ldr	r3, [pc, #436]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a60c:	d107      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a60e:	f107 030c 	add.w	r3, r7, #12
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fbe6 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61c:	e26f      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a622:	e26c      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a624:	4b64      	ldr	r3, [pc, #400]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a62c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a62e:	4b62      	ldr	r3, [pc, #392]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 0304 	and.w	r3, r3, #4
 800a636:	2b04      	cmp	r3, #4
 800a638:	d10c      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d109      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a640:	4b5d      	ldr	r3, [pc, #372]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	08db      	lsrs	r3, r3, #3
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	4a5c      	ldr	r2, [pc, #368]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a64c:	fa22 f303 	lsr.w	r3, r2, r3
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a652:	e01e      	b.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a654:	4b58      	ldr	r3, [pc, #352]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a660:	d106      	bne.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a668:	d102      	bne.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a66a:	4b55      	ldr	r3, [pc, #340]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a66c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a66e:	e010      	b.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a670:	4b51      	ldr	r3, [pc, #324]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a67c:	d106      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a684:	d102      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a686:	4b4f      	ldr	r3, [pc, #316]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a68a:	e002      	b.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a690:	e235      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a692:	e234      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a694:	4b4c      	ldr	r3, [pc, #304]	; (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a698:	e231      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a69e:	e22e      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	f040 808f 	bne.w	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a6ae:	4b42      	ldr	r3, [pc, #264]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a6b6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6be:	d06b      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6c6:	d874      	bhi.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6ce:	d056      	beq.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6d6:	d86c      	bhi.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6de:	d03b      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a6e6:	d864      	bhi.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6ee:	d021      	beq.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f6:	d85c      	bhi.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a704:	d004      	beq.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a706:	e054      	b.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a708:	f7fe fa0a 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800a70c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a70e:	e1f6      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a710:	4b29      	ldr	r3, [pc, #164]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a71c:	d107      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a71e:	f107 0318 	add.w	r3, r7, #24
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fa0a 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a72c:	e1e7      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a732:	e1e4      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a734:	4b20      	ldr	r3, [pc, #128]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a73c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a740:	d107      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a742:	f107 030c 	add.w	r3, r7, #12
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fb4c 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a750:	e1d5      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a756:	e1d2      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a758:	4b17      	ldr	r3, [pc, #92]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	d109      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a764:	4b14      	ldr	r3, [pc, #80]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	08db      	lsrs	r3, r3, #3
 800a76a:	f003 0303 	and.w	r3, r3, #3
 800a76e:	4a13      	ldr	r2, [pc, #76]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a770:	fa22 f303 	lsr.w	r3, r2, r3
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a776:	e1c2      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a77c:	e1bf      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a77e:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78a:	d102      	bne.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a78c:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a790:	e1b5      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a796:	e1b2      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a798:	4b07      	ldr	r3, [pc, #28]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7a4:	d102      	bne.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a7a6:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7aa:	e1a8      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7b0:	e1a5      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7b6:	e1a2      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7b8:	58024400 	.word	0x58024400
 800a7bc:	03d09000 	.word	0x03d09000
 800a7c0:	003d0900 	.word	0x003d0900
 800a7c4:	017d7840 	.word	0x017d7840
 800a7c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a7d4:	430b      	orrs	r3, r1
 800a7d6:	d173      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a7d8:	4b9c      	ldr	r3, [pc, #624]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7e8:	d02f      	beq.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7f0:	d863      	bhi.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d004      	beq.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7fe:	d012      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a800:	e05b      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a802:	4b92      	ldr	r3, [pc, #584]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a80e:	d107      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a810:	f107 0318 	add.w	r3, r7, #24
 800a814:	4618      	mov	r0, r3
 800a816:	f000 f991 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a81e:	e16e      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a824:	e16b      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a826:	4b89      	ldr	r3, [pc, #548]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a832:	d107      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a834:	f107 030c 	add.w	r3, r7, #12
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fad3 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a842:	e15c      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a848:	e159      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a84a:	4b80      	ldr	r3, [pc, #512]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a84e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a852:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a854:	4b7d      	ldr	r3, [pc, #500]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d10c      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a866:	4b79      	ldr	r3, [pc, #484]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	08db      	lsrs	r3, r3, #3
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	4a77      	ldr	r2, [pc, #476]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a872:	fa22 f303 	lsr.w	r3, r2, r3
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a878:	e01e      	b.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a87a:	4b74      	ldr	r3, [pc, #464]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a886:	d106      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a88e:	d102      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a890:	4b70      	ldr	r3, [pc, #448]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a894:	e010      	b.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a896:	4b6d      	ldr	r3, [pc, #436]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a89e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8a2:	d106      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8aa:	d102      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8ac:	4b6a      	ldr	r3, [pc, #424]	; (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b0:	e002      	b.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a8b6:	e122      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8b8:	e121      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8be:	e11e      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	d133      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a8cc:	4b5f      	ldr	r3, [pc, #380]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e2:	d012      	beq.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a8e4:	e023      	b.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8e6:	4b59      	ldr	r3, [pc, #356]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8f2:	d107      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fbc7 	bl	800b08c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a902:	e0fc      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a908:	e0f9      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a90a:	4b50      	ldr	r3, [pc, #320]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a916:	d107      	bne.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a918:	f107 0318 	add.w	r3, r7, #24
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 f90d 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a926:	e0ea      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a92c:	e0e7      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a932:	e0e4      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a934:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a938:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a93c:	430b      	orrs	r3, r1
 800a93e:	f040 808d 	bne.w	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a942:	4b42      	ldr	r3, [pc, #264]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a946:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a94a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a952:	d06b      	beq.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a95a:	d874      	bhi.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a962:	d056      	beq.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a96a:	d86c      	bhi.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a972:	d03b      	beq.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a97a:	d864      	bhi.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a982:	d021      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a98a:	d85c      	bhi.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a998:	d004      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a99a:	e054      	b.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a99c:	f000 f8b8 	bl	800ab10 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a9a2:	e0ac      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a4:	4b29      	ldr	r3, [pc, #164]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9b0:	d107      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b2:	f107 0318 	add.w	r3, r7, #24
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f8c0 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c0:	e09d      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9c6:	e09a      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9c8:	4b20      	ldr	r3, [pc, #128]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d4:	d107      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9d6:	f107 030c 	add.w	r3, r7, #12
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fa02 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e4:	e08b      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ea:	e088      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9ec:	4b17      	ldr	r3, [pc, #92]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b04      	cmp	r3, #4
 800a9f6:	d109      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9f8:	4b14      	ldr	r3, [pc, #80]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	08db      	lsrs	r3, r3, #3
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	4a13      	ldr	r2, [pc, #76]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa04:	fa22 f303 	lsr.w	r3, r2, r3
 800aa08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa0a:	e078      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa10:	e075      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa12:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa1e:	d102      	bne.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aa20:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa24:	e06b      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa2a:	e068      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa38:	d102      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aa3a:	4b07      	ldr	r3, [pc, #28]	; (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3e:	e05e      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa44:	e05b      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa4a:	e058      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa4c:	58024400 	.word	0x58024400
 800aa50:	03d09000 	.word	0x03d09000
 800aa54:	003d0900 	.word	0x003d0900
 800aa58:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa60:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800aa64:	430b      	orrs	r3, r1
 800aa66:	d148      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aa68:	4b27      	ldr	r3, [pc, #156]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa70:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa78:	d02a      	beq.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa80:	d838      	bhi.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa8e:	d00d      	beq.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aa90:	e030      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa92:	4b1d      	ldr	r3, [pc, #116]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa9e:	d102      	bne.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aaa0:	4b1a      	ldr	r3, [pc, #104]	; (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa4:	e02b      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaaa:	e028      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaac:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab8:	d107      	bne.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 fae4 	bl	800b08c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac8:	e019      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aace:	e016      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aad0:	4b0d      	ldr	r3, [pc, #52]	; (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aadc:	d107      	bne.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aade:	f107 0318 	add.w	r3, r7, #24
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 f82a 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaec:	e007      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf2:	e004      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf8:	e001      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3740      	adds	r7, #64	; 0x40
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	58024400 	.word	0x58024400
 800ab0c:	017d7840 	.word	0x017d7840

0800ab10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab14:	f7fd ffd4 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	4b06      	ldr	r3, [pc, #24]	; (800ab34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	091b      	lsrs	r3, r3, #4
 800ab20:	f003 0307 	and.w	r3, r3, #7
 800ab24:	4904      	ldr	r1, [pc, #16]	; (800ab38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab26:	5ccb      	ldrb	r3, [r1, r3]
 800ab28:	f003 031f 	and.w	r3, r3, #31
 800ab2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	58024400 	.word	0x58024400
 800ab38:	08014424 	.word	0x08014424

0800ab3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b089      	sub	sp, #36	; 0x24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab44:	4ba1      	ldr	r3, [pc, #644]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ab4e:	4b9f      	ldr	r3, [pc, #636]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab52:	0b1b      	lsrs	r3, r3, #12
 800ab54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab5a:	4b9c      	ldr	r3, [pc, #624]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	091b      	lsrs	r3, r3, #4
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ab66:	4b99      	ldr	r3, [pc, #612]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6a:	08db      	lsrs	r3, r3, #3
 800ab6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	fb02 f303 	mul.w	r3, r2, r3
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8111 	beq.w	800adac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	f000 8083 	beq.w	800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	f200 80a1 	bhi.w	800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d056      	beq.n	800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aba6:	e099      	b.n	800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba8:	4b88      	ldr	r3, [pc, #544]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0320 	and.w	r3, r3, #32
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d02d      	beq.n	800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abb4:	4b85      	ldr	r3, [pc, #532]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	08db      	lsrs	r3, r3, #3
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	4a84      	ldr	r2, [pc, #528]	; (800add0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abc0:	fa22 f303 	lsr.w	r3, r2, r3
 800abc4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abde:	4b7b      	ldr	r3, [pc, #492]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abee:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac0e:	e087      	b.n	800ad20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac22:	4b6a      	ldr	r3, [pc, #424]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac36:	eddf 5a67 	vldr	s11, [pc, #412]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac52:	e065      	b.n	800ad20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac66:	4b59      	ldr	r3, [pc, #356]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac96:	e043      	b.n	800ad20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acaa:	4b48      	ldr	r3, [pc, #288]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acba:	ed97 6a03 	vldr	s12, [r7, #12]
 800acbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acda:	e021      	b.n	800ad20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800addc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acee:	4b37      	ldr	r3, [pc, #220]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad02:	eddf 5a34 	vldr	s11, [pc, #208]	; 800add4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ad20:	4b2a      	ldr	r3, [pc, #168]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad24:	0a5b      	lsrs	r3, r3, #9
 800ad26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad46:	ee17 2a90 	vmov	r2, s15
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ad4e:	4b1f      	ldr	r3, [pc, #124]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad74:	ee17 2a90 	vmov	r2, s15
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ad7c:	4b13      	ldr	r3, [pc, #76]	; (800adcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad80:	0e1b      	lsrs	r3, r3, #24
 800ad82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ada2:	ee17 2a90 	vmov	r2, s15
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800adaa:	e008      	b.n	800adbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	609a      	str	r2, [r3, #8]
}
 800adbe:	bf00      	nop
 800adc0:	3724      	adds	r7, #36	; 0x24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	58024400 	.word	0x58024400
 800add0:	03d09000 	.word	0x03d09000
 800add4:	46000000 	.word	0x46000000
 800add8:	4c742400 	.word	0x4c742400
 800addc:	4a742400 	.word	0x4a742400
 800ade0:	4bbebc20 	.word	0x4bbebc20

0800ade4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b089      	sub	sp, #36	; 0x24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adec:	4ba1      	ldr	r3, [pc, #644]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf0:	f003 0303 	and.w	r3, r3, #3
 800adf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800adf6:	4b9f      	ldr	r3, [pc, #636]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfa:	0d1b      	lsrs	r3, r3, #20
 800adfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae02:	4b9c      	ldr	r3, [pc, #624]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae06:	0a1b      	lsrs	r3, r3, #8
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ae0e:	4b99      	ldr	r3, [pc, #612]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	08db      	lsrs	r3, r3, #3
 800ae14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8111 	beq.w	800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	f000 8083 	beq.w	800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f200 80a1 	bhi.w	800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d056      	beq.n	800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae4e:	e099      	b.n	800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae50:	4b88      	ldr	r3, [pc, #544]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0320 	and.w	r3, r3, #32
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d02d      	beq.n	800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae5c:	4b85      	ldr	r3, [pc, #532]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	08db      	lsrs	r3, r3, #3
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	4a84      	ldr	r2, [pc, #528]	; (800b078 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae68:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae86:	4b7b      	ldr	r3, [pc, #492]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aeb6:	e087      	b.n	800afc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeca:	4b6a      	ldr	r3, [pc, #424]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeda:	ed97 6a03 	vldr	s12, [r7, #12]
 800aede:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aefa:	e065      	b.n	800afc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0e:	4b59      	ldr	r3, [pc, #356]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af3e:	e043      	b.n	800afc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af52:	4b48      	ldr	r3, [pc, #288]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af62:	ed97 6a03 	vldr	s12, [r7, #12]
 800af66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af82:	e021      	b.n	800afc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b37      	ldr	r3, [pc, #220]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b07c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800afc8:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afcc:	0a5b      	lsrs	r3, r3, #9
 800afce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afee:	ee17 2a90 	vmov	r2, s15
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aff6:	4b1f      	ldr	r3, [pc, #124]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	0c1b      	lsrs	r3, r3, #16
 800affc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b000:	ee07 3a90 	vmov	s15, r3
 800b004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b00c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b010:	edd7 6a07 	vldr	s13, [r7, #28]
 800b014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01c:	ee17 2a90 	vmov	r2, s15
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b024:	4b13      	ldr	r3, [pc, #76]	; (800b074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b028:	0e1b      	lsrs	r3, r3, #24
 800b02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b03a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b03e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b04a:	ee17 2a90 	vmov	r2, s15
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b052:	e008      	b.n	800b066 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	609a      	str	r2, [r3, #8]
}
 800b066:	bf00      	nop
 800b068:	3724      	adds	r7, #36	; 0x24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	58024400 	.word	0x58024400
 800b078:	03d09000 	.word	0x03d09000
 800b07c:	46000000 	.word	0x46000000
 800b080:	4c742400 	.word	0x4c742400
 800b084:	4a742400 	.word	0x4a742400
 800b088:	4bbebc20 	.word	0x4bbebc20

0800b08c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b089      	sub	sp, #36	; 0x24
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b094:	4ba0      	ldr	r3, [pc, #640]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b098:	f003 0303 	and.w	r3, r3, #3
 800b09c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b09e:	4b9e      	ldr	r3, [pc, #632]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a2:	091b      	lsrs	r3, r3, #4
 800b0a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0aa:	4b9b      	ldr	r3, [pc, #620]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b0b4:	4b98      	ldr	r3, [pc, #608]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	08db      	lsrs	r3, r3, #3
 800b0ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	fb02 f303 	mul.w	r3, r2, r3
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 8111 	beq.w	800b2fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	f000 8083 	beq.w	800b1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	f200 80a1 	bhi.w	800b22a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d056      	beq.n	800b1a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0f4:	e099      	b.n	800b22a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0f6:	4b88      	ldr	r3, [pc, #544]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d02d      	beq.n	800b15e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b102:	4b85      	ldr	r3, [pc, #532]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	08db      	lsrs	r3, r3, #3
 800b108:	f003 0303 	and.w	r3, r3, #3
 800b10c:	4a83      	ldr	r2, [pc, #524]	; (800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b10e:	fa22 f303 	lsr.w	r3, r2, r3
 800b112:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b12c:	4b7a      	ldr	r3, [pc, #488]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b134:	ee07 3a90 	vmov	s15, r3
 800b138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b13c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b140:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b14c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b154:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b158:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b15c:	e087      	b.n	800b26e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	ee07 3a90 	vmov	s15, r3
 800b164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b168:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b16c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b170:	4b69      	ldr	r3, [pc, #420]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b178:	ee07 3a90 	vmov	s15, r3
 800b17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b180:	ed97 6a03 	vldr	s12, [r7, #12]
 800b184:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1a0:	e065      	b.n	800b26e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b4:	4b58      	ldr	r3, [pc, #352]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1bc:	ee07 3a90 	vmov	s15, r3
 800b1c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1e4:	e043      	b.n	800b26e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	ee07 3a90 	vmov	s15, r3
 800b1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f8:	4b47      	ldr	r3, [pc, #284]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b208:	ed97 6a03 	vldr	s12, [r7, #12]
 800b20c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b21c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b220:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b224:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b228:	e021      	b.n	800b26e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	ee07 3a90 	vmov	s15, r3
 800b230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b234:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23c:	4b36      	ldr	r3, [pc, #216]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b250:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b268:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b26c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b26e:	4b2a      	ldr	r3, [pc, #168]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b272:	0a5b      	lsrs	r3, r3, #9
 800b274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b278:	ee07 3a90 	vmov	s15, r3
 800b27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b284:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b288:	edd7 6a07 	vldr	s13, [r7, #28]
 800b28c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b294:	ee17 2a90 	vmov	r2, s15
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b29c:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a0:	0c1b      	lsrs	r3, r3, #16
 800b2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c2:	ee17 2a90 	vmov	r2, s15
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b2ca:	4b13      	ldr	r3, [pc, #76]	; (800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	0e1b      	lsrs	r3, r3, #24
 800b2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f0:	ee17 2a90 	vmov	r2, s15
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2f8:	e008      	b.n	800b30c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	609a      	str	r2, [r3, #8]
}
 800b30c:	bf00      	nop
 800b30e:	3724      	adds	r7, #36	; 0x24
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	58024400 	.word	0x58024400
 800b31c:	03d09000 	.word	0x03d09000
 800b320:	46000000 	.word	0x46000000
 800b324:	4c742400 	.word	0x4c742400
 800b328:	4a742400 	.word	0x4a742400
 800b32c:	4bbebc20 	.word	0x4bbebc20

0800b330 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b33e:	4b53      	ldr	r3, [pc, #332]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	2b03      	cmp	r3, #3
 800b348:	d101      	bne.n	800b34e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e099      	b.n	800b482 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b34e:	4b4f      	ldr	r3, [pc, #316]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a4e      	ldr	r2, [pc, #312]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b354:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b35a:	f7f7 fbc3 	bl	8002ae4 <HAL_GetTick>
 800b35e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b360:	e008      	b.n	800b374 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b362:	f7f7 fbbf 	bl	8002ae4 <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d901      	bls.n	800b374 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b370:	2303      	movs	r3, #3
 800b372:	e086      	b.n	800b482 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b374:	4b45      	ldr	r3, [pc, #276]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f0      	bne.n	800b362 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b380:	4b42      	ldr	r3, [pc, #264]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b384:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	031b      	lsls	r3, r3, #12
 800b38e:	493f      	ldr	r1, [pc, #252]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b390:	4313      	orrs	r3, r2
 800b392:	628b      	str	r3, [r1, #40]	; 0x28
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	3b01      	subs	r3, #1
 800b39a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	025b      	lsls	r3, r3, #9
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	431a      	orrs	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	061b      	lsls	r3, r3, #24
 800b3c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3c4:	4931      	ldr	r1, [pc, #196]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3ca:	4b30      	ldr	r3, [pc, #192]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	492d      	ldr	r1, [pc, #180]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3dc:	4b2b      	ldr	r3, [pc, #172]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	f023 0220 	bic.w	r2, r3, #32
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	4928      	ldr	r1, [pc, #160]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3ee:	4b27      	ldr	r3, [pc, #156]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	4a26      	ldr	r2, [pc, #152]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3f4:	f023 0310 	bic.w	r3, r3, #16
 800b3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3fa:	4b24      	ldr	r3, [pc, #144]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3fe:	4b24      	ldr	r3, [pc, #144]	; (800b490 <RCCEx_PLL2_Config+0x160>)
 800b400:	4013      	ands	r3, r2
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	69d2      	ldr	r2, [r2, #28]
 800b406:	00d2      	lsls	r2, r2, #3
 800b408:	4920      	ldr	r1, [pc, #128]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b40e:	4b1f      	ldr	r3, [pc, #124]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	4a1e      	ldr	r2, [pc, #120]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b414:	f043 0310 	orr.w	r3, r3, #16
 800b418:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d106      	bne.n	800b42e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b420:	4b1a      	ldr	r3, [pc, #104]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b424:	4a19      	ldr	r2, [pc, #100]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b42a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b42c:	e00f      	b.n	800b44e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d106      	bne.n	800b442 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b434:	4b15      	ldr	r3, [pc, #84]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	4a14      	ldr	r2, [pc, #80]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b43a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b43e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b440:	e005      	b.n	800b44e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b442:	4b12      	ldr	r3, [pc, #72]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b446:	4a11      	ldr	r2, [pc, #68]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b44c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a0e      	ldr	r2, [pc, #56]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b45a:	f7f7 fb43 	bl	8002ae4 <HAL_GetTick>
 800b45e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b460:	e008      	b.n	800b474 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b462:	f7f7 fb3f 	bl	8002ae4 <HAL_GetTick>
 800b466:	4602      	mov	r2, r0
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d901      	bls.n	800b474 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e006      	b.n	800b482 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b474:	4b05      	ldr	r3, [pc, #20]	; (800b48c <RCCEx_PLL2_Config+0x15c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d0f0      	beq.n	800b462 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b480:	7bfb      	ldrb	r3, [r7, #15]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	58024400 	.word	0x58024400
 800b490:	ffff0007 	.word	0xffff0007

0800b494 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4a2:	4b53      	ldr	r3, [pc, #332]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d101      	bne.n	800b4b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e099      	b.n	800b5e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4b2:	4b4f      	ldr	r3, [pc, #316]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a4e      	ldr	r2, [pc, #312]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b4b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4be:	f7f7 fb11 	bl	8002ae4 <HAL_GetTick>
 800b4c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4c4:	e008      	b.n	800b4d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4c6:	f7f7 fb0d 	bl	8002ae4 <HAL_GetTick>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d901      	bls.n	800b4d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e086      	b.n	800b5e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4d8:	4b45      	ldr	r3, [pc, #276]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1f0      	bne.n	800b4c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4e4:	4b42      	ldr	r3, [pc, #264]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	051b      	lsls	r3, r3, #20
 800b4f2:	493f      	ldr	r1, [pc, #252]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	628b      	str	r3, [r1, #40]	; 0x28
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	3b01      	subs	r3, #1
 800b508:	025b      	lsls	r3, r3, #9
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	3b01      	subs	r3, #1
 800b514:	041b      	lsls	r3, r3, #16
 800b516:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b51a:	431a      	orrs	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	3b01      	subs	r3, #1
 800b522:	061b      	lsls	r3, r3, #24
 800b524:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b528:	4931      	ldr	r1, [pc, #196]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b52e:	4b30      	ldr	r3, [pc, #192]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	492d      	ldr	r1, [pc, #180]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b540:	4b2b      	ldr	r3, [pc, #172]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b544:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	4928      	ldr	r1, [pc, #160]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b54e:	4313      	orrs	r3, r2
 800b550:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b552:	4b27      	ldr	r3, [pc, #156]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b556:	4a26      	ldr	r2, [pc, #152]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b55c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b55e:	4b24      	ldr	r3, [pc, #144]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b562:	4b24      	ldr	r3, [pc, #144]	; (800b5f4 <RCCEx_PLL3_Config+0x160>)
 800b564:	4013      	ands	r3, r2
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	69d2      	ldr	r2, [r2, #28]
 800b56a:	00d2      	lsls	r2, r2, #3
 800b56c:	4920      	ldr	r1, [pc, #128]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b56e:	4313      	orrs	r3, r2
 800b570:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b572:	4b1f      	ldr	r3, [pc, #124]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b576:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b57c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b584:	4b1a      	ldr	r3, [pc, #104]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	4a19      	ldr	r2, [pc, #100]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b58a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b58e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b590:	e00f      	b.n	800b5b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d106      	bne.n	800b5a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b598:	4b15      	ldr	r3, [pc, #84]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59c:	4a14      	ldr	r2, [pc, #80]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b59e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5a4:	e005      	b.n	800b5b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5a6:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5aa:	4a11      	ldr	r2, [pc, #68]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b5ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5b2:	4b0f      	ldr	r3, [pc, #60]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a0e      	ldr	r2, [pc, #56]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b5b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5be:	f7f7 fa91 	bl	8002ae4 <HAL_GetTick>
 800b5c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5c4:	e008      	b.n	800b5d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5c6:	f7f7 fa8d 	bl	8002ae4 <HAL_GetTick>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d901      	bls.n	800b5d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e006      	b.n	800b5e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5d8:	4b05      	ldr	r3, [pc, #20]	; (800b5f0 <RCCEx_PLL3_Config+0x15c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0f0      	beq.n	800b5c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	58024400 	.word	0x58024400
 800b5f4:	ffff0007 	.word	0xffff0007

0800b5f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e10f      	b.n	800b82a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a87      	ldr	r2, [pc, #540]	; (800b834 <HAL_SPI_Init+0x23c>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d00f      	beq.n	800b63a <HAL_SPI_Init+0x42>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a86      	ldr	r2, [pc, #536]	; (800b838 <HAL_SPI_Init+0x240>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d00a      	beq.n	800b63a <HAL_SPI_Init+0x42>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a84      	ldr	r2, [pc, #528]	; (800b83c <HAL_SPI_Init+0x244>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d005      	beq.n	800b63a <HAL_SPI_Init+0x42>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	2b0f      	cmp	r3, #15
 800b634:	d901      	bls.n	800b63a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e0f7      	b.n	800b82a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f900 	bl	800b840 <SPI_GetPacketSize>
 800b640:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a7b      	ldr	r2, [pc, #492]	; (800b834 <HAL_SPI_Init+0x23c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d00c      	beq.n	800b666 <HAL_SPI_Init+0x6e>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a79      	ldr	r2, [pc, #484]	; (800b838 <HAL_SPI_Init+0x240>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d007      	beq.n	800b666 <HAL_SPI_Init+0x6e>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a78      	ldr	r2, [pc, #480]	; (800b83c <HAL_SPI_Init+0x244>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d002      	beq.n	800b666 <HAL_SPI_Init+0x6e>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b08      	cmp	r3, #8
 800b664:	d811      	bhi.n	800b68a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b66a:	4a72      	ldr	r2, [pc, #456]	; (800b834 <HAL_SPI_Init+0x23c>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d009      	beq.n	800b684 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a70      	ldr	r2, [pc, #448]	; (800b838 <HAL_SPI_Init+0x240>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d004      	beq.n	800b684 <HAL_SPI_Init+0x8c>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a6f      	ldr	r2, [pc, #444]	; (800b83c <HAL_SPI_Init+0x244>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d104      	bne.n	800b68e <HAL_SPI_Init+0x96>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b10      	cmp	r3, #16
 800b688:	d901      	bls.n	800b68e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e0cd      	b.n	800b82a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7f6 fd9c 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 0201 	bic.w	r2, r2, #1
 800b6be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b6ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6d4:	d119      	bne.n	800b70a <HAL_SPI_Init+0x112>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6de:	d103      	bne.n	800b6e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d008      	beq.n	800b6fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10c      	bne.n	800b70a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6f8:	d107      	bne.n	800b70a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b708:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00f      	beq.n	800b736 <HAL_SPI_Init+0x13e>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	2b06      	cmp	r3, #6
 800b71c:	d90b      	bls.n	800b736 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	e007      	b.n	800b746 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b744:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	69da      	ldr	r2, [r3, #28]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74e:	431a      	orrs	r2, r3
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	431a      	orrs	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b758:	ea42 0103 	orr.w	r1, r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68da      	ldr	r2, [r3, #12]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	431a      	orrs	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b776:	431a      	orrs	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	431a      	orrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	431a      	orrs	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	431a      	orrs	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7a6:	ea42 0103 	orr.w	r1, r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	430a      	orrs	r2, r1
 800b7b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d113      	bne.n	800b7e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f022 0201 	bic.w	r2, r2, #1
 800b7f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	40013000 	.word	0x40013000
 800b838:	40003800 	.word	0x40003800
 800b83c:	40003c00 	.word	0x40003c00

0800b840 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84c:	095b      	lsrs	r3, r3, #5
 800b84e:	3301      	adds	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	3301      	adds	r3, #1
 800b858:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	3307      	adds	r3, #7
 800b85e:	08db      	lsrs	r3, r3, #3
 800b860:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	fb02 f303 	mul.w	r3, r2, r3
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b082      	sub	sp, #8
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e049      	b.n	800b91c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	d106      	bne.n	800b8a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7f6 fd07 	bl	80022b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	f000 fea9 	bl	800c60c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b01      	cmp	r3, #1
 800b936:	d001      	beq.n	800b93c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e054      	b.n	800b9e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2202      	movs	r2, #2
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68da      	ldr	r2, [r3, #12]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f042 0201 	orr.w	r2, r2, #1
 800b952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a26      	ldr	r2, [pc, #152]	; (800b9f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d022      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x80>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b966:	d01d      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x80>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a22      	ldr	r2, [pc, #136]	; (800b9f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d018      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x80>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a21      	ldr	r2, [pc, #132]	; (800b9fc <HAL_TIM_Base_Start_IT+0xd8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d013      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x80>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a1f      	ldr	r2, [pc, #124]	; (800ba00 <HAL_TIM_Base_Start_IT+0xdc>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d00e      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x80>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a1e      	ldr	r2, [pc, #120]	; (800ba04 <HAL_TIM_Base_Start_IT+0xe0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d009      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x80>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a1c      	ldr	r2, [pc, #112]	; (800ba08 <HAL_TIM_Base_Start_IT+0xe4>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d004      	beq.n	800b9a4 <HAL_TIM_Base_Start_IT+0x80>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a1b      	ldr	r2, [pc, #108]	; (800ba0c <HAL_TIM_Base_Start_IT+0xe8>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d115      	bne.n	800b9d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689a      	ldr	r2, [r3, #8]
 800b9aa:	4b19      	ldr	r3, [pc, #100]	; (800ba10 <HAL_TIM_Base_Start_IT+0xec>)
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b06      	cmp	r3, #6
 800b9b4:	d015      	beq.n	800b9e2 <HAL_TIM_Base_Start_IT+0xbe>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9bc:	d011      	beq.n	800b9e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f042 0201 	orr.w	r2, r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9ce:	e008      	b.n	800b9e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 0201 	orr.w	r2, r2, #1
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	e000      	b.n	800b9e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	40010000 	.word	0x40010000
 800b9f8:	40000400 	.word	0x40000400
 800b9fc:	40000800 	.word	0x40000800
 800ba00:	40000c00 	.word	0x40000c00
 800ba04:	40010400 	.word	0x40010400
 800ba08:	40001800 	.word	0x40001800
 800ba0c:	40014000 	.word	0x40014000
 800ba10:	00010007 	.word	0x00010007

0800ba14 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d109      	bne.n	800ba3c <HAL_TIM_OC_Start_IT+0x28>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	bf14      	ite	ne
 800ba34:	2301      	movne	r3, #1
 800ba36:	2300      	moveq	r3, #0
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	e03c      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0xa2>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d109      	bne.n	800ba56 <HAL_TIM_OC_Start_IT+0x42>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	bf14      	ite	ne
 800ba4e:	2301      	movne	r3, #1
 800ba50:	2300      	moveq	r3, #0
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	e02f      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0xa2>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d109      	bne.n	800ba70 <HAL_TIM_OC_Start_IT+0x5c>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	bf14      	ite	ne
 800ba68:	2301      	movne	r3, #1
 800ba6a:	2300      	moveq	r3, #0
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	e022      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0xa2>
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b0c      	cmp	r3, #12
 800ba74:	d109      	bne.n	800ba8a <HAL_TIM_OC_Start_IT+0x76>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	bf14      	ite	ne
 800ba82:	2301      	movne	r3, #1
 800ba84:	2300      	moveq	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	e015      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0xa2>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b10      	cmp	r3, #16
 800ba8e:	d109      	bne.n	800baa4 <HAL_TIM_OC_Start_IT+0x90>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	bf14      	ite	ne
 800ba9c:	2301      	movne	r3, #1
 800ba9e:	2300      	moveq	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	e008      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0xa2>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b01      	cmp	r3, #1
 800baae:	bf14      	ite	ne
 800bab0:	2301      	movne	r3, #1
 800bab2:	2300      	moveq	r3, #0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e0ec      	b.n	800bc98 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d104      	bne.n	800bace <HAL_TIM_OC_Start_IT+0xba>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2202      	movs	r2, #2
 800bac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bacc:	e023      	b.n	800bb16 <HAL_TIM_OC_Start_IT+0x102>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2b04      	cmp	r3, #4
 800bad2:	d104      	bne.n	800bade <HAL_TIM_OC_Start_IT+0xca>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2202      	movs	r2, #2
 800bad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800badc:	e01b      	b.n	800bb16 <HAL_TIM_OC_Start_IT+0x102>
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b08      	cmp	r3, #8
 800bae2:	d104      	bne.n	800baee <HAL_TIM_OC_Start_IT+0xda>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2202      	movs	r2, #2
 800bae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800baec:	e013      	b.n	800bb16 <HAL_TIM_OC_Start_IT+0x102>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b0c      	cmp	r3, #12
 800baf2:	d104      	bne.n	800bafe <HAL_TIM_OC_Start_IT+0xea>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bafc:	e00b      	b.n	800bb16 <HAL_TIM_OC_Start_IT+0x102>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b10      	cmp	r3, #16
 800bb02:	d104      	bne.n	800bb0e <HAL_TIM_OC_Start_IT+0xfa>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2202      	movs	r2, #2
 800bb08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb0c:	e003      	b.n	800bb16 <HAL_TIM_OC_Start_IT+0x102>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2202      	movs	r2, #2
 800bb12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b0c      	cmp	r3, #12
 800bb1a:	d841      	bhi.n	800bba0 <HAL_TIM_OC_Start_IT+0x18c>
 800bb1c:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <HAL_TIM_OC_Start_IT+0x110>)
 800bb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb22:	bf00      	nop
 800bb24:	0800bb59 	.word	0x0800bb59
 800bb28:	0800bba1 	.word	0x0800bba1
 800bb2c:	0800bba1 	.word	0x0800bba1
 800bb30:	0800bba1 	.word	0x0800bba1
 800bb34:	0800bb6b 	.word	0x0800bb6b
 800bb38:	0800bba1 	.word	0x0800bba1
 800bb3c:	0800bba1 	.word	0x0800bba1
 800bb40:	0800bba1 	.word	0x0800bba1
 800bb44:	0800bb7d 	.word	0x0800bb7d
 800bb48:	0800bba1 	.word	0x0800bba1
 800bb4c:	0800bba1 	.word	0x0800bba1
 800bb50:	0800bba1 	.word	0x0800bba1
 800bb54:	0800bb8f 	.word	0x0800bb8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0202 	orr.w	r2, r2, #2
 800bb66:	60da      	str	r2, [r3, #12]
      break;
 800bb68:	e01d      	b.n	800bba6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68da      	ldr	r2, [r3, #12]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0204 	orr.w	r2, r2, #4
 800bb78:	60da      	str	r2, [r3, #12]
      break;
 800bb7a:	e014      	b.n	800bba6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0208 	orr.w	r2, r2, #8
 800bb8a:	60da      	str	r2, [r3, #12]
      break;
 800bb8c:	e00b      	b.n	800bba6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f042 0210 	orr.w	r2, r2, #16
 800bb9c:	60da      	str	r2, [r3, #12]
      break;
 800bb9e:	e002      	b.n	800bba6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	73fb      	strb	r3, [r7, #15]
      break;
 800bba4:	bf00      	nop
  }

  if (status == HAL_OK)
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d174      	bne.n	800bc96 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f001 f943 	bl	800ce40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a38      	ldr	r2, [pc, #224]	; (800bca0 <HAL_TIM_OC_Start_IT+0x28c>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d013      	beq.n	800bbec <HAL_TIM_OC_Start_IT+0x1d8>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a36      	ldr	r2, [pc, #216]	; (800bca4 <HAL_TIM_OC_Start_IT+0x290>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d00e      	beq.n	800bbec <HAL_TIM_OC_Start_IT+0x1d8>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a35      	ldr	r2, [pc, #212]	; (800bca8 <HAL_TIM_OC_Start_IT+0x294>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d009      	beq.n	800bbec <HAL_TIM_OC_Start_IT+0x1d8>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a33      	ldr	r2, [pc, #204]	; (800bcac <HAL_TIM_OC_Start_IT+0x298>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d004      	beq.n	800bbec <HAL_TIM_OC_Start_IT+0x1d8>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a32      	ldr	r2, [pc, #200]	; (800bcb0 <HAL_TIM_OC_Start_IT+0x29c>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d101      	bne.n	800bbf0 <HAL_TIM_OC_Start_IT+0x1dc>
 800bbec:	2301      	movs	r3, #1
 800bbee:	e000      	b.n	800bbf2 <HAL_TIM_OC_Start_IT+0x1de>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a25      	ldr	r2, [pc, #148]	; (800bca0 <HAL_TIM_OC_Start_IT+0x28c>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d022      	beq.n	800bc56 <HAL_TIM_OC_Start_IT+0x242>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc18:	d01d      	beq.n	800bc56 <HAL_TIM_OC_Start_IT+0x242>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a25      	ldr	r2, [pc, #148]	; (800bcb4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d018      	beq.n	800bc56 <HAL_TIM_OC_Start_IT+0x242>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a23      	ldr	r2, [pc, #140]	; (800bcb8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d013      	beq.n	800bc56 <HAL_TIM_OC_Start_IT+0x242>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a22      	ldr	r2, [pc, #136]	; (800bcbc <HAL_TIM_OC_Start_IT+0x2a8>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d00e      	beq.n	800bc56 <HAL_TIM_OC_Start_IT+0x242>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a19      	ldr	r2, [pc, #100]	; (800bca4 <HAL_TIM_OC_Start_IT+0x290>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d009      	beq.n	800bc56 <HAL_TIM_OC_Start_IT+0x242>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a1e      	ldr	r2, [pc, #120]	; (800bcc0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d004      	beq.n	800bc56 <HAL_TIM_OC_Start_IT+0x242>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a15      	ldr	r2, [pc, #84]	; (800bca8 <HAL_TIM_OC_Start_IT+0x294>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d115      	bne.n	800bc82 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	4b19      	ldr	r3, [pc, #100]	; (800bcc4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800bc5e:	4013      	ands	r3, r2
 800bc60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b06      	cmp	r3, #6
 800bc66:	d015      	beq.n	800bc94 <HAL_TIM_OC_Start_IT+0x280>
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc6e:	d011      	beq.n	800bc94 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f042 0201 	orr.w	r2, r2, #1
 800bc7e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc80:	e008      	b.n	800bc94 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f042 0201 	orr.w	r2, r2, #1
 800bc90:	601a      	str	r2, [r3, #0]
 800bc92:	e000      	b.n	800bc96 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc94:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	40010000 	.word	0x40010000
 800bca4:	40010400 	.word	0x40010400
 800bca8:	40014000 	.word	0x40014000
 800bcac:	40014400 	.word	0x40014400
 800bcb0:	40014800 	.word	0x40014800
 800bcb4:	40000400 	.word	0x40000400
 800bcb8:	40000800 	.word	0x40000800
 800bcbc:	40000c00 	.word	0x40000c00
 800bcc0:	40001800 	.word	0x40001800
 800bcc4:	00010007 	.word	0x00010007

0800bcc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e049      	b.n	800bd6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d106      	bne.n	800bcf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f841 	bl	800bd76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3304      	adds	r3, #4
 800bd04:	4619      	mov	r1, r3
 800bd06:	4610      	mov	r0, r2
 800bd08:	f000 fc80 	bl	800c60c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b083      	sub	sp, #12
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd7e:	bf00      	nop
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
	...

0800bd8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d109      	bne.n	800bdb0 <HAL_TIM_PWM_Start+0x24>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	bf14      	ite	ne
 800bda8:	2301      	movne	r3, #1
 800bdaa:	2300      	moveq	r3, #0
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	e03c      	b.n	800be2a <HAL_TIM_PWM_Start+0x9e>
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	d109      	bne.n	800bdca <HAL_TIM_PWM_Start+0x3e>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	bf14      	ite	ne
 800bdc2:	2301      	movne	r3, #1
 800bdc4:	2300      	moveq	r3, #0
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	e02f      	b.n	800be2a <HAL_TIM_PWM_Start+0x9e>
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b08      	cmp	r3, #8
 800bdce:	d109      	bne.n	800bde4 <HAL_TIM_PWM_Start+0x58>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	bf14      	ite	ne
 800bddc:	2301      	movne	r3, #1
 800bdde:	2300      	moveq	r3, #0
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	e022      	b.n	800be2a <HAL_TIM_PWM_Start+0x9e>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	2b0c      	cmp	r3, #12
 800bde8:	d109      	bne.n	800bdfe <HAL_TIM_PWM_Start+0x72>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	bf14      	ite	ne
 800bdf6:	2301      	movne	r3, #1
 800bdf8:	2300      	moveq	r3, #0
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	e015      	b.n	800be2a <HAL_TIM_PWM_Start+0x9e>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b10      	cmp	r3, #16
 800be02:	d109      	bne.n	800be18 <HAL_TIM_PWM_Start+0x8c>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	bf14      	ite	ne
 800be10:	2301      	movne	r3, #1
 800be12:	2300      	moveq	r3, #0
 800be14:	b2db      	uxtb	r3, r3
 800be16:	e008      	b.n	800be2a <HAL_TIM_PWM_Start+0x9e>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b01      	cmp	r3, #1
 800be22:	bf14      	ite	ne
 800be24:	2301      	movne	r3, #1
 800be26:	2300      	moveq	r3, #0
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e0a1      	b.n	800bf76 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d104      	bne.n	800be42 <HAL_TIM_PWM_Start+0xb6>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2202      	movs	r2, #2
 800be3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be40:	e023      	b.n	800be8a <HAL_TIM_PWM_Start+0xfe>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b04      	cmp	r3, #4
 800be46:	d104      	bne.n	800be52 <HAL_TIM_PWM_Start+0xc6>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2202      	movs	r2, #2
 800be4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be50:	e01b      	b.n	800be8a <HAL_TIM_PWM_Start+0xfe>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b08      	cmp	r3, #8
 800be56:	d104      	bne.n	800be62 <HAL_TIM_PWM_Start+0xd6>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2202      	movs	r2, #2
 800be5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be60:	e013      	b.n	800be8a <HAL_TIM_PWM_Start+0xfe>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b0c      	cmp	r3, #12
 800be66:	d104      	bne.n	800be72 <HAL_TIM_PWM_Start+0xe6>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2202      	movs	r2, #2
 800be6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be70:	e00b      	b.n	800be8a <HAL_TIM_PWM_Start+0xfe>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b10      	cmp	r3, #16
 800be76:	d104      	bne.n	800be82 <HAL_TIM_PWM_Start+0xf6>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2202      	movs	r2, #2
 800be7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be80:	e003      	b.n	800be8a <HAL_TIM_PWM_Start+0xfe>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2202      	movs	r2, #2
 800be86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2201      	movs	r2, #1
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	4618      	mov	r0, r3
 800be94:	f000 ffd4 	bl	800ce40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a38      	ldr	r2, [pc, #224]	; (800bf80 <HAL_TIM_PWM_Start+0x1f4>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d013      	beq.n	800beca <HAL_TIM_PWM_Start+0x13e>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a37      	ldr	r2, [pc, #220]	; (800bf84 <HAL_TIM_PWM_Start+0x1f8>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d00e      	beq.n	800beca <HAL_TIM_PWM_Start+0x13e>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a35      	ldr	r2, [pc, #212]	; (800bf88 <HAL_TIM_PWM_Start+0x1fc>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d009      	beq.n	800beca <HAL_TIM_PWM_Start+0x13e>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a34      	ldr	r2, [pc, #208]	; (800bf8c <HAL_TIM_PWM_Start+0x200>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d004      	beq.n	800beca <HAL_TIM_PWM_Start+0x13e>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a32      	ldr	r2, [pc, #200]	; (800bf90 <HAL_TIM_PWM_Start+0x204>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d101      	bne.n	800bece <HAL_TIM_PWM_Start+0x142>
 800beca:	2301      	movs	r3, #1
 800becc:	e000      	b.n	800bed0 <HAL_TIM_PWM_Start+0x144>
 800bece:	2300      	movs	r3, #0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d007      	beq.n	800bee4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bee2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a25      	ldr	r2, [pc, #148]	; (800bf80 <HAL_TIM_PWM_Start+0x1f4>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d022      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x1a8>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef6:	d01d      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x1a8>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a25      	ldr	r2, [pc, #148]	; (800bf94 <HAL_TIM_PWM_Start+0x208>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d018      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x1a8>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a24      	ldr	r2, [pc, #144]	; (800bf98 <HAL_TIM_PWM_Start+0x20c>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d013      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x1a8>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a22      	ldr	r2, [pc, #136]	; (800bf9c <HAL_TIM_PWM_Start+0x210>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d00e      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x1a8>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a1a      	ldr	r2, [pc, #104]	; (800bf84 <HAL_TIM_PWM_Start+0x1f8>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d009      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x1a8>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a1e      	ldr	r2, [pc, #120]	; (800bfa0 <HAL_TIM_PWM_Start+0x214>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d004      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x1a8>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a16      	ldr	r2, [pc, #88]	; (800bf88 <HAL_TIM_PWM_Start+0x1fc>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d115      	bne.n	800bf60 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	4b1a      	ldr	r3, [pc, #104]	; (800bfa4 <HAL_TIM_PWM_Start+0x218>)
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b06      	cmp	r3, #6
 800bf44:	d015      	beq.n	800bf72 <HAL_TIM_PWM_Start+0x1e6>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf4c:	d011      	beq.n	800bf72 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f042 0201 	orr.w	r2, r2, #1
 800bf5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf5e:	e008      	b.n	800bf72 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f042 0201 	orr.w	r2, r2, #1
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	e000      	b.n	800bf74 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	40010000 	.word	0x40010000
 800bf84:	40010400 	.word	0x40010400
 800bf88:	40014000 	.word	0x40014000
 800bf8c:	40014400 	.word	0x40014400
 800bf90:	40014800 	.word	0x40014800
 800bf94:	40000400 	.word	0x40000400
 800bf98:	40000800 	.word	0x40000800
 800bf9c:	40000c00 	.word	0x40000c00
 800bfa0:	40001800 	.word	0x40001800
 800bfa4:	00010007 	.word	0x00010007

0800bfa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d020      	beq.n	800c00c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f003 0302 	and.w	r3, r3, #2
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d01b      	beq.n	800c00c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f06f 0202 	mvn.w	r2, #2
 800bfdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	f003 0303 	and.w	r3, r3, #3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 faec 	bl	800c5d0 <HAL_TIM_IC_CaptureCallback>
 800bff8:	e005      	b.n	800c006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7f4 fb42 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 faef 	bl	800c5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f003 0304 	and.w	r3, r3, #4
 800c012:	2b00      	cmp	r3, #0
 800c014:	d020      	beq.n	800c058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f003 0304 	and.w	r3, r3, #4
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d01b      	beq.n	800c058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f06f 0204 	mvn.w	r2, #4
 800c028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2202      	movs	r2, #2
 800c02e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fac6 	bl	800c5d0 <HAL_TIM_IC_CaptureCallback>
 800c044:	e005      	b.n	800c052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7f4 fb1c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fac9 	bl	800c5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f003 0308 	and.w	r3, r3, #8
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d020      	beq.n	800c0a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f003 0308 	and.w	r3, r3, #8
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d01b      	beq.n	800c0a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f06f 0208 	mvn.w	r2, #8
 800c074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2204      	movs	r2, #4
 800c07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	f003 0303 	and.w	r3, r3, #3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 faa0 	bl	800c5d0 <HAL_TIM_IC_CaptureCallback>
 800c090:	e005      	b.n	800c09e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7f4 faf6 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 faa3 	bl	800c5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f003 0310 	and.w	r3, r3, #16
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d020      	beq.n	800c0f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f003 0310 	and.w	r3, r3, #16
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d01b      	beq.n	800c0f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f06f 0210 	mvn.w	r2, #16
 800c0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fa7a 	bl	800c5d0 <HAL_TIM_IC_CaptureCallback>
 800c0dc:	e005      	b.n	800c0ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7f4 fad0 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fa7d 	bl	800c5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00c      	beq.n	800c114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d007      	beq.n	800c114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f06f 0201 	mvn.w	r2, #1
 800c10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f5 fe2a 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d104      	bne.n	800c128 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00c      	beq.n	800c142 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 ffbb 	bl	800d0b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00c      	beq.n	800c166 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c152:	2b00      	cmp	r3, #0
 800c154:	d007      	beq.n	800c166 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 ffb3 	bl	800d0cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00c      	beq.n	800c18a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fa37 	bl	800c5f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f003 0320 	and.w	r3, r3, #32
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00c      	beq.n	800c1ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f003 0320 	and.w	r3, r3, #32
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d007      	beq.n	800c1ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f06f 0220 	mvn.w	r2, #32
 800c1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 ff7b 	bl	800d0a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1ae:	bf00      	nop
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d101      	bne.n	800c1d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	e0ff      	b.n	800c3d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b14      	cmp	r3, #20
 800c1e2:	f200 80f0 	bhi.w	800c3c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c1e6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ec:	0800c241 	.word	0x0800c241
 800c1f0:	0800c3c7 	.word	0x0800c3c7
 800c1f4:	0800c3c7 	.word	0x0800c3c7
 800c1f8:	0800c3c7 	.word	0x0800c3c7
 800c1fc:	0800c281 	.word	0x0800c281
 800c200:	0800c3c7 	.word	0x0800c3c7
 800c204:	0800c3c7 	.word	0x0800c3c7
 800c208:	0800c3c7 	.word	0x0800c3c7
 800c20c:	0800c2c3 	.word	0x0800c2c3
 800c210:	0800c3c7 	.word	0x0800c3c7
 800c214:	0800c3c7 	.word	0x0800c3c7
 800c218:	0800c3c7 	.word	0x0800c3c7
 800c21c:	0800c303 	.word	0x0800c303
 800c220:	0800c3c7 	.word	0x0800c3c7
 800c224:	0800c3c7 	.word	0x0800c3c7
 800c228:	0800c3c7 	.word	0x0800c3c7
 800c22c:	0800c345 	.word	0x0800c345
 800c230:	0800c3c7 	.word	0x0800c3c7
 800c234:	0800c3c7 	.word	0x0800c3c7
 800c238:	0800c3c7 	.word	0x0800c3c7
 800c23c:	0800c385 	.word	0x0800c385
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fa86 	bl	800c758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	699a      	ldr	r2, [r3, #24]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f042 0208 	orr.w	r2, r2, #8
 800c25a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	699a      	ldr	r2, [r3, #24]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f022 0204 	bic.w	r2, r2, #4
 800c26a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6999      	ldr	r1, [r3, #24]
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	691a      	ldr	r2, [r3, #16]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	430a      	orrs	r2, r1
 800c27c:	619a      	str	r2, [r3, #24]
      break;
 800c27e:	e0a5      	b.n	800c3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	4618      	mov	r0, r3
 800c288:	f000 faf6 	bl	800c878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	699a      	ldr	r2, [r3, #24]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c29a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	699a      	ldr	r2, [r3, #24]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6999      	ldr	r1, [r3, #24]
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	021a      	lsls	r2, r3, #8
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	430a      	orrs	r2, r1
 800c2be:	619a      	str	r2, [r3, #24]
      break;
 800c2c0:	e084      	b.n	800c3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 fb5f 	bl	800c98c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	69da      	ldr	r2, [r3, #28]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f042 0208 	orr.w	r2, r2, #8
 800c2dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69da      	ldr	r2, [r3, #28]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 0204 	bic.w	r2, r2, #4
 800c2ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	69d9      	ldr	r1, [r3, #28]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	691a      	ldr	r2, [r3, #16]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	61da      	str	r2, [r3, #28]
      break;
 800c300:	e064      	b.n	800c3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68b9      	ldr	r1, [r7, #8]
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 fbc7 	bl	800ca9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69da      	ldr	r2, [r3, #28]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c31c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	69da      	ldr	r2, [r3, #28]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c32c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	69d9      	ldr	r1, [r3, #28]
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	021a      	lsls	r2, r3, #8
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	430a      	orrs	r2, r1
 800c340:	61da      	str	r2, [r3, #28]
      break;
 800c342:	e043      	b.n	800c3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68b9      	ldr	r1, [r7, #8]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 fc10 	bl	800cb70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f042 0208 	orr.w	r2, r2, #8
 800c35e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f022 0204 	bic.w	r2, r2, #4
 800c36e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	691a      	ldr	r2, [r3, #16]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c382:	e023      	b.n	800c3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68b9      	ldr	r1, [r7, #8]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 fc54 	bl	800cc38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c39e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	021a      	lsls	r2, r3, #8
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c3c4:	e002      	b.n	800c3cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop

0800c3e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d101      	bne.n	800c3fc <HAL_TIM_ConfigClockSource+0x1c>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e0dc      	b.n	800c5b6 <HAL_TIM_ConfigClockSource+0x1d6>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2202      	movs	r2, #2
 800c408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	4b6a      	ldr	r3, [pc, #424]	; (800c5c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c418:	4013      	ands	r3, r2
 800c41a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a64      	ldr	r2, [pc, #400]	; (800c5c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c432:	4293      	cmp	r3, r2
 800c434:	f000 80a9 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c438:	4a62      	ldr	r2, [pc, #392]	; (800c5c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	f200 80ae 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c440:	4a61      	ldr	r2, [pc, #388]	; (800c5c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c442:	4293      	cmp	r3, r2
 800c444:	f000 80a1 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c448:	4a5f      	ldr	r2, [pc, #380]	; (800c5c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	f200 80a6 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c450:	4a5e      	ldr	r2, [pc, #376]	; (800c5cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c452:	4293      	cmp	r3, r2
 800c454:	f000 8099 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c458:	4a5c      	ldr	r2, [pc, #368]	; (800c5cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	f200 809e 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c460:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c464:	f000 8091 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c468:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c46c:	f200 8096 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c474:	f000 8089 	beq.w	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c47c:	f200 808e 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c484:	d03e      	beq.n	800c504 <HAL_TIM_ConfigClockSource+0x124>
 800c486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c48a:	f200 8087 	bhi.w	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c492:	f000 8086 	beq.w	800c5a2 <HAL_TIM_ConfigClockSource+0x1c2>
 800c496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c49a:	d87f      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c49c:	2b70      	cmp	r3, #112	; 0x70
 800c49e:	d01a      	beq.n	800c4d6 <HAL_TIM_ConfigClockSource+0xf6>
 800c4a0:	2b70      	cmp	r3, #112	; 0x70
 800c4a2:	d87b      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4a4:	2b60      	cmp	r3, #96	; 0x60
 800c4a6:	d050      	beq.n	800c54a <HAL_TIM_ConfigClockSource+0x16a>
 800c4a8:	2b60      	cmp	r3, #96	; 0x60
 800c4aa:	d877      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4ac:	2b50      	cmp	r3, #80	; 0x50
 800c4ae:	d03c      	beq.n	800c52a <HAL_TIM_ConfigClockSource+0x14a>
 800c4b0:	2b50      	cmp	r3, #80	; 0x50
 800c4b2:	d873      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4b4:	2b40      	cmp	r3, #64	; 0x40
 800c4b6:	d058      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x18a>
 800c4b8:	2b40      	cmp	r3, #64	; 0x40
 800c4ba:	d86f      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4bc:	2b30      	cmp	r3, #48	; 0x30
 800c4be:	d064      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4c0:	2b30      	cmp	r3, #48	; 0x30
 800c4c2:	d86b      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4c4:	2b20      	cmp	r3, #32
 800c4c6:	d060      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4c8:	2b20      	cmp	r3, #32
 800c4ca:	d867      	bhi.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d05c      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4d0:	2b10      	cmp	r3, #16
 800c4d2:	d05a      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4d4:	e062      	b.n	800c59c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6818      	ldr	r0, [r3, #0]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	6899      	ldr	r1, [r3, #8]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f000 fc8b 	bl	800ce00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c4f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	609a      	str	r2, [r3, #8]
      break;
 800c502:	e04f      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6818      	ldr	r0, [r3, #0]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	6899      	ldr	r1, [r3, #8]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	f000 fc74 	bl	800ce00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689a      	ldr	r2, [r3, #8]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c526:	609a      	str	r2, [r3, #8]
      break;
 800c528:	e03c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	6859      	ldr	r1, [r3, #4]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	461a      	mov	r2, r3
 800c538:	f000 fbe4 	bl	800cd04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2150      	movs	r1, #80	; 0x50
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fc3e 	bl	800cdc4 <TIM_ITRx_SetConfig>
      break;
 800c548:	e02c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	6859      	ldr	r1, [r3, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	461a      	mov	r2, r3
 800c558:	f000 fc03 	bl	800cd62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2160      	movs	r1, #96	; 0x60
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fc2e 	bl	800cdc4 <TIM_ITRx_SetConfig>
      break;
 800c568:	e01c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6818      	ldr	r0, [r3, #0]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6859      	ldr	r1, [r3, #4]
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	461a      	mov	r2, r3
 800c578:	f000 fbc4 	bl	800cd04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2140      	movs	r1, #64	; 0x40
 800c582:	4618      	mov	r0, r3
 800c584:	f000 fc1e 	bl	800cdc4 <TIM_ITRx_SetConfig>
      break;
 800c588:	e00c      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f000 fc15 	bl	800cdc4 <TIM_ITRx_SetConfig>
      break;
 800c59a:	e003      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]
      break;
 800c5a0:	e000      	b.n	800c5a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c5a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	ffceff88 	.word	0xffceff88
 800c5c4:	00100040 	.word	0x00100040
 800c5c8:	00100030 	.word	0x00100030
 800c5cc:	00100020 	.word	0x00100020

0800c5d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a46      	ldr	r2, [pc, #280]	; (800c738 <TIM_Base_SetConfig+0x12c>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d013      	beq.n	800c64c <TIM_Base_SetConfig+0x40>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c62a:	d00f      	beq.n	800c64c <TIM_Base_SetConfig+0x40>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a43      	ldr	r2, [pc, #268]	; (800c73c <TIM_Base_SetConfig+0x130>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d00b      	beq.n	800c64c <TIM_Base_SetConfig+0x40>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a42      	ldr	r2, [pc, #264]	; (800c740 <TIM_Base_SetConfig+0x134>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d007      	beq.n	800c64c <TIM_Base_SetConfig+0x40>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a41      	ldr	r2, [pc, #260]	; (800c744 <TIM_Base_SetConfig+0x138>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d003      	beq.n	800c64c <TIM_Base_SetConfig+0x40>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a40      	ldr	r2, [pc, #256]	; (800c748 <TIM_Base_SetConfig+0x13c>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d108      	bne.n	800c65e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a35      	ldr	r2, [pc, #212]	; (800c738 <TIM_Base_SetConfig+0x12c>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d01f      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c66c:	d01b      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a32      	ldr	r2, [pc, #200]	; (800c73c <TIM_Base_SetConfig+0x130>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d017      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a31      	ldr	r2, [pc, #196]	; (800c740 <TIM_Base_SetConfig+0x134>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d013      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a30      	ldr	r2, [pc, #192]	; (800c744 <TIM_Base_SetConfig+0x138>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d00f      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a2f      	ldr	r2, [pc, #188]	; (800c748 <TIM_Base_SetConfig+0x13c>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d00b      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a2e      	ldr	r2, [pc, #184]	; (800c74c <TIM_Base_SetConfig+0x140>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d007      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a2d      	ldr	r2, [pc, #180]	; (800c750 <TIM_Base_SetConfig+0x144>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d003      	beq.n	800c6a6 <TIM_Base_SetConfig+0x9a>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a2c      	ldr	r2, [pc, #176]	; (800c754 <TIM_Base_SetConfig+0x148>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d108      	bne.n	800c6b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	689a      	ldr	r2, [r3, #8]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a16      	ldr	r2, [pc, #88]	; (800c738 <TIM_Base_SetConfig+0x12c>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d00f      	beq.n	800c704 <TIM_Base_SetConfig+0xf8>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a18      	ldr	r2, [pc, #96]	; (800c748 <TIM_Base_SetConfig+0x13c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d00b      	beq.n	800c704 <TIM_Base_SetConfig+0xf8>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a17      	ldr	r2, [pc, #92]	; (800c74c <TIM_Base_SetConfig+0x140>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d007      	beq.n	800c704 <TIM_Base_SetConfig+0xf8>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a16      	ldr	r2, [pc, #88]	; (800c750 <TIM_Base_SetConfig+0x144>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d003      	beq.n	800c704 <TIM_Base_SetConfig+0xf8>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a15      	ldr	r2, [pc, #84]	; (800c754 <TIM_Base_SetConfig+0x148>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d103      	bne.n	800c70c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	691a      	ldr	r2, [r3, #16]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d105      	bne.n	800c72a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	f023 0201 	bic.w	r2, r3, #1
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	611a      	str	r2, [r3, #16]
  }
}
 800c72a:	bf00      	nop
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	40010000 	.word	0x40010000
 800c73c:	40000400 	.word	0x40000400
 800c740:	40000800 	.word	0x40000800
 800c744:	40000c00 	.word	0x40000c00
 800c748:	40010400 	.word	0x40010400
 800c74c:	40014000 	.word	0x40014000
 800c750:	40014400 	.word	0x40014400
 800c754:	40014800 	.word	0x40014800

0800c758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	f023 0201 	bic.w	r2, r3, #1
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	4b37      	ldr	r3, [pc, #220]	; (800c860 <TIM_OC1_SetConfig+0x108>)
 800c784:	4013      	ands	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	4313      	orrs	r3, r2
 800c798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f023 0302 	bic.w	r3, r3, #2
 800c7a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4a2d      	ldr	r2, [pc, #180]	; (800c864 <TIM_OC1_SetConfig+0x10c>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d00f      	beq.n	800c7d4 <TIM_OC1_SetConfig+0x7c>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a2c      	ldr	r2, [pc, #176]	; (800c868 <TIM_OC1_SetConfig+0x110>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d00b      	beq.n	800c7d4 <TIM_OC1_SetConfig+0x7c>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a2b      	ldr	r2, [pc, #172]	; (800c86c <TIM_OC1_SetConfig+0x114>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d007      	beq.n	800c7d4 <TIM_OC1_SetConfig+0x7c>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a2a      	ldr	r2, [pc, #168]	; (800c870 <TIM_OC1_SetConfig+0x118>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d003      	beq.n	800c7d4 <TIM_OC1_SetConfig+0x7c>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a29      	ldr	r2, [pc, #164]	; (800c874 <TIM_OC1_SetConfig+0x11c>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d10c      	bne.n	800c7ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f023 0308 	bic.w	r3, r3, #8
 800c7da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f023 0304 	bic.w	r3, r3, #4
 800c7ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a1c      	ldr	r2, [pc, #112]	; (800c864 <TIM_OC1_SetConfig+0x10c>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00f      	beq.n	800c816 <TIM_OC1_SetConfig+0xbe>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a1b      	ldr	r2, [pc, #108]	; (800c868 <TIM_OC1_SetConfig+0x110>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d00b      	beq.n	800c816 <TIM_OC1_SetConfig+0xbe>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a1a      	ldr	r2, [pc, #104]	; (800c86c <TIM_OC1_SetConfig+0x114>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d007      	beq.n	800c816 <TIM_OC1_SetConfig+0xbe>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a19      	ldr	r2, [pc, #100]	; (800c870 <TIM_OC1_SetConfig+0x118>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d003      	beq.n	800c816 <TIM_OC1_SetConfig+0xbe>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a18      	ldr	r2, [pc, #96]	; (800c874 <TIM_OC1_SetConfig+0x11c>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d111      	bne.n	800c83a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c81c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	699b      	ldr	r3, [r3, #24]
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	4313      	orrs	r3, r2
 800c838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685a      	ldr	r2, [r3, #4]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	621a      	str	r2, [r3, #32]
}
 800c854:	bf00      	nop
 800c856:	371c      	adds	r7, #28
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	fffeff8f 	.word	0xfffeff8f
 800c864:	40010000 	.word	0x40010000
 800c868:	40010400 	.word	0x40010400
 800c86c:	40014000 	.word	0x40014000
 800c870:	40014400 	.word	0x40014400
 800c874:	40014800 	.word	0x40014800

0800c878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c878:	b480      	push	{r7}
 800c87a:	b087      	sub	sp, #28
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	f023 0210 	bic.w	r2, r3, #16
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	4b34      	ldr	r3, [pc, #208]	; (800c974 <TIM_OC2_SetConfig+0xfc>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	021b      	lsls	r3, r3, #8
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f023 0320 	bic.w	r3, r3, #32
 800c8c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	011b      	lsls	r3, r3, #4
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a29      	ldr	r2, [pc, #164]	; (800c978 <TIM_OC2_SetConfig+0x100>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d003      	beq.n	800c8e0 <TIM_OC2_SetConfig+0x68>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a28      	ldr	r2, [pc, #160]	; (800c97c <TIM_OC2_SetConfig+0x104>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d10d      	bne.n	800c8fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	011b      	lsls	r3, r3, #4
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a1e      	ldr	r2, [pc, #120]	; (800c978 <TIM_OC2_SetConfig+0x100>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d00f      	beq.n	800c924 <TIM_OC2_SetConfig+0xac>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a1d      	ldr	r2, [pc, #116]	; (800c97c <TIM_OC2_SetConfig+0x104>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d00b      	beq.n	800c924 <TIM_OC2_SetConfig+0xac>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a1c      	ldr	r2, [pc, #112]	; (800c980 <TIM_OC2_SetConfig+0x108>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d007      	beq.n	800c924 <TIM_OC2_SetConfig+0xac>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a1b      	ldr	r2, [pc, #108]	; (800c984 <TIM_OC2_SetConfig+0x10c>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d003      	beq.n	800c924 <TIM_OC2_SetConfig+0xac>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a1a      	ldr	r2, [pc, #104]	; (800c988 <TIM_OC2_SetConfig+0x110>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d113      	bne.n	800c94c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c92a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	693a      	ldr	r2, [r7, #16]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	4313      	orrs	r3, r2
 800c94a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	693a      	ldr	r2, [r7, #16]
 800c950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	621a      	str	r2, [r3, #32]
}
 800c966:	bf00      	nop
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	feff8fff 	.word	0xfeff8fff
 800c978:	40010000 	.word	0x40010000
 800c97c:	40010400 	.word	0x40010400
 800c980:	40014000 	.word	0x40014000
 800c984:	40014400 	.word	0x40014400
 800c988:	40014800 	.word	0x40014800

0800c98c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b087      	sub	sp, #28
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	4b33      	ldr	r3, [pc, #204]	; (800ca84 <TIM_OC3_SetConfig+0xf8>)
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f023 0303 	bic.w	r3, r3, #3
 800c9c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	021b      	lsls	r3, r3, #8
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a28      	ldr	r2, [pc, #160]	; (800ca88 <TIM_OC3_SetConfig+0xfc>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d003      	beq.n	800c9f2 <TIM_OC3_SetConfig+0x66>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a27      	ldr	r2, [pc, #156]	; (800ca8c <TIM_OC3_SetConfig+0x100>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d10d      	bne.n	800ca0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a1d      	ldr	r2, [pc, #116]	; (800ca88 <TIM_OC3_SetConfig+0xfc>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d00f      	beq.n	800ca36 <TIM_OC3_SetConfig+0xaa>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a1c      	ldr	r2, [pc, #112]	; (800ca8c <TIM_OC3_SetConfig+0x100>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d00b      	beq.n	800ca36 <TIM_OC3_SetConfig+0xaa>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a1b      	ldr	r2, [pc, #108]	; (800ca90 <TIM_OC3_SetConfig+0x104>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d007      	beq.n	800ca36 <TIM_OC3_SetConfig+0xaa>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a1a      	ldr	r2, [pc, #104]	; (800ca94 <TIM_OC3_SetConfig+0x108>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d003      	beq.n	800ca36 <TIM_OC3_SetConfig+0xaa>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a19      	ldr	r2, [pc, #100]	; (800ca98 <TIM_OC3_SetConfig+0x10c>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d113      	bne.n	800ca5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	011b      	lsls	r3, r3, #4
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	621a      	str	r2, [r3, #32]
}
 800ca78:	bf00      	nop
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	fffeff8f 	.word	0xfffeff8f
 800ca88:	40010000 	.word	0x40010000
 800ca8c:	40010400 	.word	0x40010400
 800ca90:	40014000 	.word	0x40014000
 800ca94:	40014400 	.word	0x40014400
 800ca98:	40014800 	.word	0x40014800

0800ca9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b087      	sub	sp, #28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a1b      	ldr	r3, [r3, #32]
 800caaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a1b      	ldr	r3, [r3, #32]
 800cab0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	69db      	ldr	r3, [r3, #28]
 800cac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	4b24      	ldr	r3, [pc, #144]	; (800cb58 <TIM_OC4_SetConfig+0xbc>)
 800cac8:	4013      	ands	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	021b      	lsls	r3, r3, #8
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	4313      	orrs	r3, r2
 800cade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	031b      	lsls	r3, r3, #12
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a19      	ldr	r2, [pc, #100]	; (800cb5c <TIM_OC4_SetConfig+0xc0>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d00f      	beq.n	800cb1c <TIM_OC4_SetConfig+0x80>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a18      	ldr	r2, [pc, #96]	; (800cb60 <TIM_OC4_SetConfig+0xc4>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d00b      	beq.n	800cb1c <TIM_OC4_SetConfig+0x80>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a17      	ldr	r2, [pc, #92]	; (800cb64 <TIM_OC4_SetConfig+0xc8>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d007      	beq.n	800cb1c <TIM_OC4_SetConfig+0x80>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a16      	ldr	r2, [pc, #88]	; (800cb68 <TIM_OC4_SetConfig+0xcc>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d003      	beq.n	800cb1c <TIM_OC4_SetConfig+0x80>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a15      	ldr	r2, [pc, #84]	; (800cb6c <TIM_OC4_SetConfig+0xd0>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d109      	bne.n	800cb30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	019b      	lsls	r3, r3, #6
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685a      	ldr	r2, [r3, #4]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	621a      	str	r2, [r3, #32]
}
 800cb4a:	bf00      	nop
 800cb4c:	371c      	adds	r7, #28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	feff8fff 	.word	0xfeff8fff
 800cb5c:	40010000 	.word	0x40010000
 800cb60:	40010400 	.word	0x40010400
 800cb64:	40014000 	.word	0x40014000
 800cb68:	40014400 	.word	0x40014400
 800cb6c:	40014800 	.word	0x40014800

0800cb70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b087      	sub	sp, #28
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a1b      	ldr	r3, [r3, #32]
 800cb84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	4b21      	ldr	r3, [pc, #132]	; (800cc20 <TIM_OC5_SetConfig+0xb0>)
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cbb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	041b      	lsls	r3, r3, #16
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a18      	ldr	r2, [pc, #96]	; (800cc24 <TIM_OC5_SetConfig+0xb4>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d00f      	beq.n	800cbe6 <TIM_OC5_SetConfig+0x76>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a17      	ldr	r2, [pc, #92]	; (800cc28 <TIM_OC5_SetConfig+0xb8>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d00b      	beq.n	800cbe6 <TIM_OC5_SetConfig+0x76>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a16      	ldr	r2, [pc, #88]	; (800cc2c <TIM_OC5_SetConfig+0xbc>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d007      	beq.n	800cbe6 <TIM_OC5_SetConfig+0x76>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a15      	ldr	r2, [pc, #84]	; (800cc30 <TIM_OC5_SetConfig+0xc0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d003      	beq.n	800cbe6 <TIM_OC5_SetConfig+0x76>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a14      	ldr	r2, [pc, #80]	; (800cc34 <TIM_OC5_SetConfig+0xc4>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d109      	bne.n	800cbfa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	021b      	lsls	r3, r3, #8
 800cbf4:	697a      	ldr	r2, [r7, #20]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	685a      	ldr	r2, [r3, #4]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	621a      	str	r2, [r3, #32]
}
 800cc14:	bf00      	nop
 800cc16:	371c      	adds	r7, #28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr
 800cc20:	fffeff8f 	.word	0xfffeff8f
 800cc24:	40010000 	.word	0x40010000
 800cc28:	40010400 	.word	0x40010400
 800cc2c:	40014000 	.word	0x40014000
 800cc30:	40014400 	.word	0x40014400
 800cc34:	40014800 	.word	0x40014800

0800cc38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b087      	sub	sp, #28
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	4b22      	ldr	r3, [pc, #136]	; (800ccec <TIM_OC6_SetConfig+0xb4>)
 800cc64:	4013      	ands	r3, r2
 800cc66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	021b      	lsls	r3, r3, #8
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	051b      	lsls	r3, r3, #20
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a19      	ldr	r2, [pc, #100]	; (800ccf0 <TIM_OC6_SetConfig+0xb8>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00f      	beq.n	800ccb0 <TIM_OC6_SetConfig+0x78>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a18      	ldr	r2, [pc, #96]	; (800ccf4 <TIM_OC6_SetConfig+0xbc>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d00b      	beq.n	800ccb0 <TIM_OC6_SetConfig+0x78>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a17      	ldr	r2, [pc, #92]	; (800ccf8 <TIM_OC6_SetConfig+0xc0>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d007      	beq.n	800ccb0 <TIM_OC6_SetConfig+0x78>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a16      	ldr	r2, [pc, #88]	; (800ccfc <TIM_OC6_SetConfig+0xc4>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d003      	beq.n	800ccb0 <TIM_OC6_SetConfig+0x78>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a15      	ldr	r2, [pc, #84]	; (800cd00 <TIM_OC6_SetConfig+0xc8>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d109      	bne.n	800ccc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ccb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	029b      	lsls	r3, r3, #10
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	697a      	ldr	r2, [r7, #20]
 800ccc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	685a      	ldr	r2, [r3, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	693a      	ldr	r2, [r7, #16]
 800ccdc:	621a      	str	r2, [r3, #32]
}
 800ccde:	bf00      	nop
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	feff8fff 	.word	0xfeff8fff
 800ccf0:	40010000 	.word	0x40010000
 800ccf4:	40010400 	.word	0x40010400
 800ccf8:	40014000 	.word	0x40014000
 800ccfc:	40014400 	.word	0x40014400
 800cd00:	40014800 	.word	0x40014800

0800cd04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6a1b      	ldr	r3, [r3, #32]
 800cd14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6a1b      	ldr	r3, [r3, #32]
 800cd1a:	f023 0201 	bic.w	r2, r3, #1
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	011b      	lsls	r3, r3, #4
 800cd34:	693a      	ldr	r2, [r7, #16]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	f023 030a 	bic.w	r3, r3, #10
 800cd40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	621a      	str	r2, [r3, #32]
}
 800cd56:	bf00      	nop
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd62:	b480      	push	{r7}
 800cd64:	b087      	sub	sp, #28
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	f023 0210 	bic.w	r2, r3, #16
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	031b      	lsls	r3, r3, #12
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	621a      	str	r2, [r3, #32]
}
 800cdb6:	bf00      	nop
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <TIM_ITRx_SetConfig+0x38>)
 800cdd8:	4013      	ands	r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	f043 0307 	orr.w	r3, r3, #7
 800cde6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	609a      	str	r2, [r3, #8]
}
 800cdee:	bf00      	nop
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	ffcfff8f 	.word	0xffcfff8f

0800ce00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b087      	sub	sp, #28
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	021a      	lsls	r2, r3, #8
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	431a      	orrs	r2, r3
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	609a      	str	r2, [r3, #8]
}
 800ce34:	bf00      	nop
 800ce36:	371c      	adds	r7, #28
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b087      	sub	sp, #28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f003 031f 	and.w	r3, r3, #31
 800ce52:	2201      	movs	r2, #1
 800ce54:	fa02 f303 	lsl.w	r3, r2, r3
 800ce58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6a1a      	ldr	r2, [r3, #32]
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	43db      	mvns	r3, r3
 800ce62:	401a      	ands	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6a1a      	ldr	r2, [r3, #32]
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	f003 031f 	and.w	r3, r3, #31
 800ce72:	6879      	ldr	r1, [r7, #4]
 800ce74:	fa01 f303 	lsl.w	r3, r1, r3
 800ce78:	431a      	orrs	r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	621a      	str	r2, [r3, #32]
}
 800ce7e:	bf00      	nop
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
	...

0800ce8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d101      	bne.n	800cea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cea0:	2302      	movs	r3, #2
 800cea2:	e06d      	b.n	800cf80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2202      	movs	r2, #2
 800ceb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a30      	ldr	r2, [pc, #192]	; (800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d004      	beq.n	800ced8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a2f      	ldr	r2, [pc, #188]	; (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d108      	bne.n	800ceea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a20      	ldr	r2, [pc, #128]	; (800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d022      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf16:	d01d      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a1d      	ldr	r2, [pc, #116]	; (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d018      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a1c      	ldr	r2, [pc, #112]	; (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d013      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a1a      	ldr	r2, [pc, #104]	; (800cf9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d00e      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a15      	ldr	r2, [pc, #84]	; (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d009      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a16      	ldr	r2, [pc, #88]	; (800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d004      	beq.n	800cf54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a15      	ldr	r2, [pc, #84]	; (800cfa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d10c      	bne.n	800cf6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	40010000 	.word	0x40010000
 800cf90:	40010400 	.word	0x40010400
 800cf94:	40000400 	.word	0x40000400
 800cf98:	40000800 	.word	0x40000800
 800cf9c:	40000c00 	.word	0x40000c00
 800cfa0:	40001800 	.word	0x40001800
 800cfa4:	40014000 	.word	0x40014000

0800cfa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d101      	bne.n	800cfc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cfc0:	2302      	movs	r3, #2
 800cfc2:	e065      	b.n	800d090 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4313      	orrs	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	691b      	ldr	r3, [r3, #16]
 800d00e:	4313      	orrs	r3, r2
 800d010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	695b      	ldr	r3, [r3, #20]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d02a:	4313      	orrs	r3, r2
 800d02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	041b      	lsls	r3, r3, #16
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a16      	ldr	r2, [pc, #88]	; (800d09c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d004      	beq.n	800d052 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a14      	ldr	r2, [pc, #80]	; (800d0a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d115      	bne.n	800d07e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	051b      	lsls	r3, r3, #20
 800d05e:	4313      	orrs	r3, r2
 800d060:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	69db      	ldr	r3, [r3, #28]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	40010000 	.word	0x40010000
 800d0a0:	40010400 	.word	0x40010400

0800d0a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0d4:	bf00      	nop
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e042      	b.n	800d178 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d106      	bne.n	800d10a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7f5 f9b3 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2224      	movs	r2, #36	; 0x24
 800d10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f022 0201 	bic.w	r2, r2, #1
 800d120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f001 fa44 	bl	800e5b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fcd9 	bl	800dae8 <UART_SetConfig>
 800d136:	4603      	mov	r3, r0
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d101      	bne.n	800d140 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d13c:	2301      	movs	r3, #1
 800d13e:	e01b      	b.n	800d178 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	685a      	ldr	r2, [r3, #4]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d14e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	689a      	ldr	r2, [r3, #8]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d15e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f042 0201 	orr.w	r2, r2, #1
 800d16e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 fac3 	bl	800e6fc <UART_CheckIdleState>
 800d176:	4603      	mov	r3, r0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08a      	sub	sp, #40	; 0x28
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	603b      	str	r3, [r7, #0]
 800d18c:	4613      	mov	r3, r2
 800d18e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d196:	2b20      	cmp	r3, #32
 800d198:	d17b      	bne.n	800d292 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d002      	beq.n	800d1a6 <HAL_UART_Transmit+0x26>
 800d1a0:	88fb      	ldrh	r3, [r7, #6]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e074      	b.n	800d294 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2221      	movs	r2, #33	; 0x21
 800d1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1ba:	f7f5 fc93 	bl	8002ae4 <HAL_GetTick>
 800d1be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	88fa      	ldrh	r2, [r7, #6]
 800d1c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	88fa      	ldrh	r2, [r7, #6]
 800d1cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1d8:	d108      	bne.n	800d1ec <HAL_UART_Transmit+0x6c>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d104      	bne.n	800d1ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	61bb      	str	r3, [r7, #24]
 800d1ea:	e003      	b.n	800d1f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d1f4:	e030      	b.n	800d258 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2180      	movs	r1, #128	; 0x80
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f001 fb25 	bl	800e850 <UART_WaitOnFlagUntilTimeout>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2220      	movs	r2, #32
 800d210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	e03d      	b.n	800d294 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d22c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	3302      	adds	r3, #2
 800d232:	61bb      	str	r3, [r7, #24]
 800d234:	e007      	b.n	800d246 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	781a      	ldrb	r2, [r3, #0]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	3301      	adds	r3, #1
 800d244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	b29a      	uxth	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d25e:	b29b      	uxth	r3, r3
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1c8      	bne.n	800d1f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2200      	movs	r2, #0
 800d26c:	2140      	movs	r1, #64	; 0x40
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f001 faee 	bl	800e850 <UART_WaitOnFlagUntilTimeout>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d005      	beq.n	800d286 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2220      	movs	r2, #32
 800d27e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d282:	2303      	movs	r3, #3
 800d284:	e006      	b.n	800d294 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2220      	movs	r2, #32
 800d28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	e000      	b.n	800d294 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d292:	2302      	movs	r3, #2
  }
}
 800d294:	4618      	mov	r0, r3
 800d296:	3720      	adds	r7, #32
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b08a      	sub	sp, #40	; 0x28
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2b0:	2b20      	cmp	r3, #32
 800d2b2:	d137      	bne.n	800d324 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <HAL_UART_Receive_IT+0x24>
 800d2ba:	88fb      	ldrh	r3, [r7, #6]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e030      	b.n	800d326 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a18      	ldr	r2, [pc, #96]	; (800d330 <HAL_UART_Receive_IT+0x94>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d01f      	beq.n	800d314 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d018      	beq.n	800d314 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	e853 3f00 	ldrex	r3, [r3]
 800d2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	623b      	str	r3, [r7, #32]
 800d302:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d304:	69f9      	ldr	r1, [r7, #28]
 800d306:	6a3a      	ldr	r2, [r7, #32]
 800d308:	e841 2300 	strex	r3, r2, [r1]
 800d30c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1e6      	bne.n	800d2e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d314:	88fb      	ldrh	r3, [r7, #6]
 800d316:	461a      	mov	r2, r3
 800d318:	68b9      	ldr	r1, [r7, #8]
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f001 fb06 	bl	800e92c <UART_Start_Receive_IT>
 800d320:	4603      	mov	r3, r0
 800d322:	e000      	b.n	800d326 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d324:	2302      	movs	r3, #2
  }
}
 800d326:	4618      	mov	r0, r3
 800d328:	3728      	adds	r7, #40	; 0x28
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	58000c00 	.word	0x58000c00

0800d334 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b0ba      	sub	sp, #232	; 0xe8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d35a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d35e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d362:	4013      	ands	r3, r2
 800d364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d11b      	bne.n	800d3a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d015      	beq.n	800d3a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d380:	f003 0320 	and.w	r3, r3, #32
 800d384:	2b00      	cmp	r3, #0
 800d386:	d105      	bne.n	800d394 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d38c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d390:	2b00      	cmp	r3, #0
 800d392:	d009      	beq.n	800d3a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f000 8377 	beq.w	800da8c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	4798      	blx	r3
      }
      return;
 800d3a6:	e371      	b.n	800da8c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d3a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 8123 	beq.w	800d5f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d3b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d3b6:	4b8d      	ldr	r3, [pc, #564]	; (800d5ec <HAL_UART_IRQHandler+0x2b8>)
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d3be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d3c2:	4b8b      	ldr	r3, [pc, #556]	; (800d5f0 <HAL_UART_IRQHandler+0x2bc>)
 800d3c4:	4013      	ands	r3, r2
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 8116 	beq.w	800d5f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d011      	beq.n	800d3fc <HAL_UART_IRQHandler+0xc8>
 800d3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00b      	beq.n	800d3fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3f2:	f043 0201 	orr.w	r2, r3, #1
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d400:	f003 0302 	and.w	r3, r3, #2
 800d404:	2b00      	cmp	r3, #0
 800d406:	d011      	beq.n	800d42c <HAL_UART_IRQHandler+0xf8>
 800d408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d40c:	f003 0301 	and.w	r3, r3, #1
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00b      	beq.n	800d42c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2202      	movs	r2, #2
 800d41a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d422:	f043 0204 	orr.w	r2, r3, #4
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d430:	f003 0304 	and.w	r3, r3, #4
 800d434:	2b00      	cmp	r3, #0
 800d436:	d011      	beq.n	800d45c <HAL_UART_IRQHandler+0x128>
 800d438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00b      	beq.n	800d45c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2204      	movs	r2, #4
 800d44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d452:	f043 0202 	orr.w	r2, r3, #2
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d460:	f003 0308 	and.w	r3, r3, #8
 800d464:	2b00      	cmp	r3, #0
 800d466:	d017      	beq.n	800d498 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d46c:	f003 0320 	and.w	r3, r3, #32
 800d470:	2b00      	cmp	r3, #0
 800d472:	d105      	bne.n	800d480 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d474:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d478:	4b5c      	ldr	r3, [pc, #368]	; (800d5ec <HAL_UART_IRQHandler+0x2b8>)
 800d47a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00b      	beq.n	800d498 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2208      	movs	r2, #8
 800d486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d48e:	f043 0208 	orr.w	r2, r3, #8
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d012      	beq.n	800d4ca <HAL_UART_IRQHandler+0x196>
 800d4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00c      	beq.n	800d4ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4c0:	f043 0220 	orr.w	r2, r3, #32
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 82dd 	beq.w	800da90 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4da:	f003 0320 	and.w	r3, r3, #32
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d013      	beq.n	800d50a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4e6:	f003 0320 	and.w	r3, r3, #32
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d105      	bne.n	800d4fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d007      	beq.n	800d50a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d003      	beq.n	800d50a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d510:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d51e:	2b40      	cmp	r3, #64	; 0x40
 800d520:	d005      	beq.n	800d52e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d526:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d054      	beq.n	800d5d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f001 fb1e 	bl	800eb70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d53e:	2b40      	cmp	r3, #64	; 0x40
 800d540:	d146      	bne.n	800d5d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3308      	adds	r3, #8
 800d548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d550:	e853 3f00 	ldrex	r3, [r3]
 800d554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d55c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3308      	adds	r3, #8
 800d56a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d56e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d57a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d57e:	e841 2300 	strex	r3, r2, [r1]
 800d582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1d9      	bne.n	800d542 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d594:	2b00      	cmp	r3, #0
 800d596:	d017      	beq.n	800d5c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d59e:	4a15      	ldr	r2, [pc, #84]	; (800d5f4 <HAL_UART_IRQHandler+0x2c0>)
 800d5a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7f8 fa6f 	bl	8005a8c <HAL_DMA_Abort_IT>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d019      	beq.n	800d5e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5c6:	e00f      	b.n	800d5e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fa77 	bl	800dabc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ce:	e00b      	b.n	800d5e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fa73 	bl	800dabc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5d6:	e007      	b.n	800d5e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 fa6f 	bl	800dabc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d5e6:	e253      	b.n	800da90 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5e8:	bf00      	nop
    return;
 800d5ea:	e251      	b.n	800da90 <HAL_UART_IRQHandler+0x75c>
 800d5ec:	10000001 	.word	0x10000001
 800d5f0:	04000120 	.word	0x04000120
 800d5f4:	0800ec3d 	.word	0x0800ec3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	f040 81e7 	bne.w	800d9d0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d606:	f003 0310 	and.w	r3, r3, #16
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 81e0 	beq.w	800d9d0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d614:	f003 0310 	and.w	r3, r3, #16
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f000 81d9 	beq.w	800d9d0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2210      	movs	r2, #16
 800d624:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d630:	2b40      	cmp	r3, #64	; 0x40
 800d632:	f040 8151 	bne.w	800d8d8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a96      	ldr	r2, [pc, #600]	; (800d898 <HAL_UART_IRQHandler+0x564>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d068      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a93      	ldr	r2, [pc, #588]	; (800d89c <HAL_UART_IRQHandler+0x568>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d061      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a91      	ldr	r2, [pc, #580]	; (800d8a0 <HAL_UART_IRQHandler+0x56c>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d05a      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a8e      	ldr	r2, [pc, #568]	; (800d8a4 <HAL_UART_IRQHandler+0x570>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d053      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a8c      	ldr	r2, [pc, #560]	; (800d8a8 <HAL_UART_IRQHandler+0x574>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d04c      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4a89      	ldr	r2, [pc, #548]	; (800d8ac <HAL_UART_IRQHandler+0x578>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d045      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a87      	ldr	r2, [pc, #540]	; (800d8b0 <HAL_UART_IRQHandler+0x57c>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d03e      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a84      	ldr	r2, [pc, #528]	; (800d8b4 <HAL_UART_IRQHandler+0x580>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d037      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a82      	ldr	r2, [pc, #520]	; (800d8b8 <HAL_UART_IRQHandler+0x584>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d030      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a7f      	ldr	r2, [pc, #508]	; (800d8bc <HAL_UART_IRQHandler+0x588>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d029      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a7d      	ldr	r2, [pc, #500]	; (800d8c0 <HAL_UART_IRQHandler+0x58c>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d022      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a7a      	ldr	r2, [pc, #488]	; (800d8c4 <HAL_UART_IRQHandler+0x590>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d01b      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a78      	ldr	r2, [pc, #480]	; (800d8c8 <HAL_UART_IRQHandler+0x594>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d014      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a75      	ldr	r2, [pc, #468]	; (800d8cc <HAL_UART_IRQHandler+0x598>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d00d      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a73      	ldr	r2, [pc, #460]	; (800d8d0 <HAL_UART_IRQHandler+0x59c>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d006      	beq.n	800d716 <HAL_UART_IRQHandler+0x3e2>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a70      	ldr	r2, [pc, #448]	; (800d8d4 <HAL_UART_IRQHandler+0x5a0>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d106      	bne.n	800d724 <HAL_UART_IRQHandler+0x3f0>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	b29b      	uxth	r3, r3
 800d722:	e005      	b.n	800d730 <HAL_UART_IRQHandler+0x3fc>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	b29b      	uxth	r3, r3
 800d730:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f000 81ab 	beq.w	800da94 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d744:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d748:	429a      	cmp	r2, r3
 800d74a:	f080 81a3 	bcs.w	800da94 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d75e:	69db      	ldr	r3, [r3, #28]
 800d760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d764:	f000 8087 	beq.w	800d876 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d774:	e853 3f00 	ldrex	r3, [r3]
 800d778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d77c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d796:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d79a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d79e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d7a2:	e841 2300 	strex	r3, r2, [r1]
 800d7a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d7aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1da      	bne.n	800d768 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3308      	adds	r3, #8
 800d7b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7bc:	e853 3f00 	ldrex	r3, [r3]
 800d7c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d7c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7c4:	f023 0301 	bic.w	r3, r3, #1
 800d7c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d7d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d7da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d7e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e1      	bne.n	800d7b2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3308      	adds	r3, #8
 800d7f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7f8:	e853 3f00 	ldrex	r3, [r3]
 800d7fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d7fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3308      	adds	r3, #8
 800d80e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d812:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d816:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d81a:	e841 2300 	strex	r3, r2, [r1]
 800d81e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1e3      	bne.n	800d7ee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2220      	movs	r2, #32
 800d82a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d83c:	e853 3f00 	ldrex	r3, [r3]
 800d840:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d844:	f023 0310 	bic.w	r3, r3, #16
 800d848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	461a      	mov	r2, r3
 800d852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d856:	65bb      	str	r3, [r7, #88]	; 0x58
 800d858:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d85c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d85e:	e841 2300 	strex	r3, r2, [r1]
 800d862:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e4      	bne.n	800d834 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d870:	4618      	mov	r0, r3
 800d872:	f7f7 fded 	bl	8005450 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2202      	movs	r2, #2
 800d87a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d888:	b29b      	uxth	r3, r3
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f91d 	bl	800dad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d896:	e0fd      	b.n	800da94 <HAL_UART_IRQHandler+0x760>
 800d898:	40020010 	.word	0x40020010
 800d89c:	40020028 	.word	0x40020028
 800d8a0:	40020040 	.word	0x40020040
 800d8a4:	40020058 	.word	0x40020058
 800d8a8:	40020070 	.word	0x40020070
 800d8ac:	40020088 	.word	0x40020088
 800d8b0:	400200a0 	.word	0x400200a0
 800d8b4:	400200b8 	.word	0x400200b8
 800d8b8:	40020410 	.word	0x40020410
 800d8bc:	40020428 	.word	0x40020428
 800d8c0:	40020440 	.word	0x40020440
 800d8c4:	40020458 	.word	0x40020458
 800d8c8:	40020470 	.word	0x40020470
 800d8cc:	40020488 	.word	0x40020488
 800d8d0:	400204a0 	.word	0x400204a0
 800d8d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 80cf 	beq.w	800da98 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d8fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f000 80ca 	beq.w	800da98 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90c:	e853 3f00 	ldrex	r3, [r3]
 800d910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	461a      	mov	r2, r3
 800d922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d926:	647b      	str	r3, [r7, #68]	; 0x44
 800d928:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d92c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d92e:	e841 2300 	strex	r3, r2, [r1]
 800d932:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1e4      	bne.n	800d904 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3308      	adds	r3, #8
 800d940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d944:	e853 3f00 	ldrex	r3, [r3]
 800d948:	623b      	str	r3, [r7, #32]
   return(result);
 800d94a:	6a3a      	ldr	r2, [r7, #32]
 800d94c:	4b55      	ldr	r3, [pc, #340]	; (800daa4 <HAL_UART_IRQHandler+0x770>)
 800d94e:	4013      	ands	r3, r2
 800d950:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3308      	adds	r3, #8
 800d95a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d95e:	633a      	str	r2, [r7, #48]	; 0x30
 800d960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d966:	e841 2300 	strex	r3, r2, [r1]
 800d96a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e3      	bne.n	800d93a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2220      	movs	r2, #32
 800d976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	60fb      	str	r3, [r7, #12]
   return(result);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f023 0310 	bic.w	r3, r3, #16
 800d99a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d9a8:	61fb      	str	r3, [r7, #28]
 800d9aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ac:	69b9      	ldr	r1, [r7, #24]
 800d9ae:	69fa      	ldr	r2, [r7, #28]
 800d9b0:	e841 2300 	strex	r3, r2, [r1]
 800d9b4:	617b      	str	r3, [r7, #20]
   return(result);
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1e4      	bne.n	800d986 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2202      	movs	r2, #2
 800d9c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d9c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 f881 	bl	800dad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d9ce:	e063      	b.n	800da98 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00e      	beq.n	800d9fa <HAL_UART_IRQHandler+0x6c6>
 800d9dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d008      	beq.n	800d9fa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d9f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f001 fe80 	bl	800f6f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9f8:	e051      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da02:	2b00      	cmp	r3, #0
 800da04:	d014      	beq.n	800da30 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800da06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d105      	bne.n	800da1e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800da12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d008      	beq.n	800da30 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da22:	2b00      	cmp	r3, #0
 800da24:	d03a      	beq.n	800da9c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	4798      	blx	r3
    }
    return;
 800da2e:	e035      	b.n	800da9c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800da30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d009      	beq.n	800da50 <HAL_UART_IRQHandler+0x71c>
 800da3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f001 f90d 	bl	800ec68 <UART_EndTransmit_IT>
    return;
 800da4e:	e026      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800da50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d009      	beq.n	800da70 <HAL_UART_IRQHandler+0x73c>
 800da5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da64:	2b00      	cmp	r3, #0
 800da66:	d003      	beq.n	800da70 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f001 fe59 	bl	800f720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da6e:	e016      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800da70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d010      	beq.n	800da9e <HAL_UART_IRQHandler+0x76a>
 800da7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da80:	2b00      	cmp	r3, #0
 800da82:	da0c      	bge.n	800da9e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f001 fe41 	bl	800f70c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da8a:	e008      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
      return;
 800da8c:	bf00      	nop
 800da8e:	e006      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
    return;
 800da90:	bf00      	nop
 800da92:	e004      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
      return;
 800da94:	bf00      	nop
 800da96:	e002      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
      return;
 800da98:	bf00      	nop
 800da9a:	e000      	b.n	800da9e <HAL_UART_IRQHandler+0x76a>
    return;
 800da9c:	bf00      	nop
  }
}
 800da9e:	37e8      	adds	r7, #232	; 0xe8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	effffffe 	.word	0xeffffffe

0800daa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800daec:	b092      	sub	sp, #72	; 0x48
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	689a      	ldr	r2, [r3, #8]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	431a      	orrs	r2, r3
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	431a      	orrs	r2, r3
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	69db      	ldr	r3, [r3, #28]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	4bbe      	ldr	r3, [pc, #760]	; (800de10 <UART_SetConfig+0x328>)
 800db18:	4013      	ands	r3, r2
 800db1a:	697a      	ldr	r2, [r7, #20]
 800db1c:	6812      	ldr	r2, [r2, #0]
 800db1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db20:	430b      	orrs	r3, r1
 800db22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	68da      	ldr	r2, [r3, #12]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	430a      	orrs	r2, r1
 800db38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4ab3      	ldr	r2, [pc, #716]	; (800de14 <UART_SetConfig+0x32c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d004      	beq.n	800db54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db50:	4313      	orrs	r3, r2
 800db52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	689a      	ldr	r2, [r3, #8]
 800db5a:	4baf      	ldr	r3, [pc, #700]	; (800de18 <UART_SetConfig+0x330>)
 800db5c:	4013      	ands	r3, r2
 800db5e:	697a      	ldr	r2, [r7, #20]
 800db60:	6812      	ldr	r2, [r2, #0]
 800db62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db64:	430b      	orrs	r3, r1
 800db66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	f023 010f 	bic.w	r1, r3, #15
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	430a      	orrs	r2, r1
 800db7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4aa6      	ldr	r2, [pc, #664]	; (800de1c <UART_SetConfig+0x334>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d177      	bne.n	800dc78 <UART_SetConfig+0x190>
 800db88:	4ba5      	ldr	r3, [pc, #660]	; (800de20 <UART_SetConfig+0x338>)
 800db8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db90:	2b28      	cmp	r3, #40	; 0x28
 800db92:	d86d      	bhi.n	800dc70 <UART_SetConfig+0x188>
 800db94:	a201      	add	r2, pc, #4	; (adr r2, 800db9c <UART_SetConfig+0xb4>)
 800db96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db9a:	bf00      	nop
 800db9c:	0800dc41 	.word	0x0800dc41
 800dba0:	0800dc71 	.word	0x0800dc71
 800dba4:	0800dc71 	.word	0x0800dc71
 800dba8:	0800dc71 	.word	0x0800dc71
 800dbac:	0800dc71 	.word	0x0800dc71
 800dbb0:	0800dc71 	.word	0x0800dc71
 800dbb4:	0800dc71 	.word	0x0800dc71
 800dbb8:	0800dc71 	.word	0x0800dc71
 800dbbc:	0800dc49 	.word	0x0800dc49
 800dbc0:	0800dc71 	.word	0x0800dc71
 800dbc4:	0800dc71 	.word	0x0800dc71
 800dbc8:	0800dc71 	.word	0x0800dc71
 800dbcc:	0800dc71 	.word	0x0800dc71
 800dbd0:	0800dc71 	.word	0x0800dc71
 800dbd4:	0800dc71 	.word	0x0800dc71
 800dbd8:	0800dc71 	.word	0x0800dc71
 800dbdc:	0800dc51 	.word	0x0800dc51
 800dbe0:	0800dc71 	.word	0x0800dc71
 800dbe4:	0800dc71 	.word	0x0800dc71
 800dbe8:	0800dc71 	.word	0x0800dc71
 800dbec:	0800dc71 	.word	0x0800dc71
 800dbf0:	0800dc71 	.word	0x0800dc71
 800dbf4:	0800dc71 	.word	0x0800dc71
 800dbf8:	0800dc71 	.word	0x0800dc71
 800dbfc:	0800dc59 	.word	0x0800dc59
 800dc00:	0800dc71 	.word	0x0800dc71
 800dc04:	0800dc71 	.word	0x0800dc71
 800dc08:	0800dc71 	.word	0x0800dc71
 800dc0c:	0800dc71 	.word	0x0800dc71
 800dc10:	0800dc71 	.word	0x0800dc71
 800dc14:	0800dc71 	.word	0x0800dc71
 800dc18:	0800dc71 	.word	0x0800dc71
 800dc1c:	0800dc61 	.word	0x0800dc61
 800dc20:	0800dc71 	.word	0x0800dc71
 800dc24:	0800dc71 	.word	0x0800dc71
 800dc28:	0800dc71 	.word	0x0800dc71
 800dc2c:	0800dc71 	.word	0x0800dc71
 800dc30:	0800dc71 	.word	0x0800dc71
 800dc34:	0800dc71 	.word	0x0800dc71
 800dc38:	0800dc71 	.word	0x0800dc71
 800dc3c:	0800dc69 	.word	0x0800dc69
 800dc40:	2301      	movs	r3, #1
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e222      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dc48:	2304      	movs	r3, #4
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e21e      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dc50:	2308      	movs	r3, #8
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e21a      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dc58:	2310      	movs	r3, #16
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e216      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dc60:	2320      	movs	r3, #32
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc66:	e212      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dc68:	2340      	movs	r3, #64	; 0x40
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e20e      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dc70:	2380      	movs	r3, #128	; 0x80
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e20a      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a69      	ldr	r2, [pc, #420]	; (800de24 <UART_SetConfig+0x33c>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d130      	bne.n	800dce4 <UART_SetConfig+0x1fc>
 800dc82:	4b67      	ldr	r3, [pc, #412]	; (800de20 <UART_SetConfig+0x338>)
 800dc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc86:	f003 0307 	and.w	r3, r3, #7
 800dc8a:	2b05      	cmp	r3, #5
 800dc8c:	d826      	bhi.n	800dcdc <UART_SetConfig+0x1f4>
 800dc8e:	a201      	add	r2, pc, #4	; (adr r2, 800dc94 <UART_SetConfig+0x1ac>)
 800dc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc94:	0800dcad 	.word	0x0800dcad
 800dc98:	0800dcb5 	.word	0x0800dcb5
 800dc9c:	0800dcbd 	.word	0x0800dcbd
 800dca0:	0800dcc5 	.word	0x0800dcc5
 800dca4:	0800dccd 	.word	0x0800dccd
 800dca8:	0800dcd5 	.word	0x0800dcd5
 800dcac:	2300      	movs	r3, #0
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb2:	e1ec      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dcb4:	2304      	movs	r3, #4
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcba:	e1e8      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dcbc:	2308      	movs	r3, #8
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc2:	e1e4      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dcc4:	2310      	movs	r3, #16
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcca:	e1e0      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dccc:	2320      	movs	r3, #32
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd2:	e1dc      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dcd4:	2340      	movs	r3, #64	; 0x40
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcda:	e1d8      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dcdc:	2380      	movs	r3, #128	; 0x80
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e1d4      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a4f      	ldr	r2, [pc, #316]	; (800de28 <UART_SetConfig+0x340>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d130      	bne.n	800dd50 <UART_SetConfig+0x268>
 800dcee:	4b4c      	ldr	r3, [pc, #304]	; (800de20 <UART_SetConfig+0x338>)
 800dcf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcf2:	f003 0307 	and.w	r3, r3, #7
 800dcf6:	2b05      	cmp	r3, #5
 800dcf8:	d826      	bhi.n	800dd48 <UART_SetConfig+0x260>
 800dcfa:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <UART_SetConfig+0x218>)
 800dcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd00:	0800dd19 	.word	0x0800dd19
 800dd04:	0800dd21 	.word	0x0800dd21
 800dd08:	0800dd29 	.word	0x0800dd29
 800dd0c:	0800dd31 	.word	0x0800dd31
 800dd10:	0800dd39 	.word	0x0800dd39
 800dd14:	0800dd41 	.word	0x0800dd41
 800dd18:	2300      	movs	r3, #0
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1e:	e1b6      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd20:	2304      	movs	r3, #4
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd26:	e1b2      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd28:	2308      	movs	r3, #8
 800dd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2e:	e1ae      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd30:	2310      	movs	r3, #16
 800dd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd36:	e1aa      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd38:	2320      	movs	r3, #32
 800dd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3e:	e1a6      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd40:	2340      	movs	r3, #64	; 0x40
 800dd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd46:	e1a2      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd48:	2380      	movs	r3, #128	; 0x80
 800dd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4e:	e19e      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a35      	ldr	r2, [pc, #212]	; (800de2c <UART_SetConfig+0x344>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d130      	bne.n	800ddbc <UART_SetConfig+0x2d4>
 800dd5a:	4b31      	ldr	r3, [pc, #196]	; (800de20 <UART_SetConfig+0x338>)
 800dd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd5e:	f003 0307 	and.w	r3, r3, #7
 800dd62:	2b05      	cmp	r3, #5
 800dd64:	d826      	bhi.n	800ddb4 <UART_SetConfig+0x2cc>
 800dd66:	a201      	add	r2, pc, #4	; (adr r2, 800dd6c <UART_SetConfig+0x284>)
 800dd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd6c:	0800dd85 	.word	0x0800dd85
 800dd70:	0800dd8d 	.word	0x0800dd8d
 800dd74:	0800dd95 	.word	0x0800dd95
 800dd78:	0800dd9d 	.word	0x0800dd9d
 800dd7c:	0800dda5 	.word	0x0800dda5
 800dd80:	0800ddad 	.word	0x0800ddad
 800dd84:	2300      	movs	r3, #0
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8a:	e180      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd8c:	2304      	movs	r3, #4
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd92:	e17c      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd94:	2308      	movs	r3, #8
 800dd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9a:	e178      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dd9c:	2310      	movs	r3, #16
 800dd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda2:	e174      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dda4:	2320      	movs	r3, #32
 800dda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddaa:	e170      	b.n	800e08e <UART_SetConfig+0x5a6>
 800ddac:	2340      	movs	r3, #64	; 0x40
 800ddae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb2:	e16c      	b.n	800e08e <UART_SetConfig+0x5a6>
 800ddb4:	2380      	movs	r3, #128	; 0x80
 800ddb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddba:	e168      	b.n	800e08e <UART_SetConfig+0x5a6>
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a1b      	ldr	r2, [pc, #108]	; (800de30 <UART_SetConfig+0x348>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d142      	bne.n	800de4c <UART_SetConfig+0x364>
 800ddc6:	4b16      	ldr	r3, [pc, #88]	; (800de20 <UART_SetConfig+0x338>)
 800ddc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddca:	f003 0307 	and.w	r3, r3, #7
 800ddce:	2b05      	cmp	r3, #5
 800ddd0:	d838      	bhi.n	800de44 <UART_SetConfig+0x35c>
 800ddd2:	a201      	add	r2, pc, #4	; (adr r2, 800ddd8 <UART_SetConfig+0x2f0>)
 800ddd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd8:	0800ddf1 	.word	0x0800ddf1
 800dddc:	0800ddf9 	.word	0x0800ddf9
 800dde0:	0800de01 	.word	0x0800de01
 800dde4:	0800de09 	.word	0x0800de09
 800dde8:	0800de35 	.word	0x0800de35
 800ddec:	0800de3d 	.word	0x0800de3d
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf6:	e14a      	b.n	800e08e <UART_SetConfig+0x5a6>
 800ddf8:	2304      	movs	r3, #4
 800ddfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfe:	e146      	b.n	800e08e <UART_SetConfig+0x5a6>
 800de00:	2308      	movs	r3, #8
 800de02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de06:	e142      	b.n	800e08e <UART_SetConfig+0x5a6>
 800de08:	2310      	movs	r3, #16
 800de0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0e:	e13e      	b.n	800e08e <UART_SetConfig+0x5a6>
 800de10:	cfff69f3 	.word	0xcfff69f3
 800de14:	58000c00 	.word	0x58000c00
 800de18:	11fff4ff 	.word	0x11fff4ff
 800de1c:	40011000 	.word	0x40011000
 800de20:	58024400 	.word	0x58024400
 800de24:	40004400 	.word	0x40004400
 800de28:	40004800 	.word	0x40004800
 800de2c:	40004c00 	.word	0x40004c00
 800de30:	40005000 	.word	0x40005000
 800de34:	2320      	movs	r3, #32
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e128      	b.n	800e08e <UART_SetConfig+0x5a6>
 800de3c:	2340      	movs	r3, #64	; 0x40
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e124      	b.n	800e08e <UART_SetConfig+0x5a6>
 800de44:	2380      	movs	r3, #128	; 0x80
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e120      	b.n	800e08e <UART_SetConfig+0x5a6>
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4acb      	ldr	r2, [pc, #812]	; (800e180 <UART_SetConfig+0x698>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d176      	bne.n	800df44 <UART_SetConfig+0x45c>
 800de56:	4bcb      	ldr	r3, [pc, #812]	; (800e184 <UART_SetConfig+0x69c>)
 800de58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de5e:	2b28      	cmp	r3, #40	; 0x28
 800de60:	d86c      	bhi.n	800df3c <UART_SetConfig+0x454>
 800de62:	a201      	add	r2, pc, #4	; (adr r2, 800de68 <UART_SetConfig+0x380>)
 800de64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de68:	0800df0d 	.word	0x0800df0d
 800de6c:	0800df3d 	.word	0x0800df3d
 800de70:	0800df3d 	.word	0x0800df3d
 800de74:	0800df3d 	.word	0x0800df3d
 800de78:	0800df3d 	.word	0x0800df3d
 800de7c:	0800df3d 	.word	0x0800df3d
 800de80:	0800df3d 	.word	0x0800df3d
 800de84:	0800df3d 	.word	0x0800df3d
 800de88:	0800df15 	.word	0x0800df15
 800de8c:	0800df3d 	.word	0x0800df3d
 800de90:	0800df3d 	.word	0x0800df3d
 800de94:	0800df3d 	.word	0x0800df3d
 800de98:	0800df3d 	.word	0x0800df3d
 800de9c:	0800df3d 	.word	0x0800df3d
 800dea0:	0800df3d 	.word	0x0800df3d
 800dea4:	0800df3d 	.word	0x0800df3d
 800dea8:	0800df1d 	.word	0x0800df1d
 800deac:	0800df3d 	.word	0x0800df3d
 800deb0:	0800df3d 	.word	0x0800df3d
 800deb4:	0800df3d 	.word	0x0800df3d
 800deb8:	0800df3d 	.word	0x0800df3d
 800debc:	0800df3d 	.word	0x0800df3d
 800dec0:	0800df3d 	.word	0x0800df3d
 800dec4:	0800df3d 	.word	0x0800df3d
 800dec8:	0800df25 	.word	0x0800df25
 800decc:	0800df3d 	.word	0x0800df3d
 800ded0:	0800df3d 	.word	0x0800df3d
 800ded4:	0800df3d 	.word	0x0800df3d
 800ded8:	0800df3d 	.word	0x0800df3d
 800dedc:	0800df3d 	.word	0x0800df3d
 800dee0:	0800df3d 	.word	0x0800df3d
 800dee4:	0800df3d 	.word	0x0800df3d
 800dee8:	0800df2d 	.word	0x0800df2d
 800deec:	0800df3d 	.word	0x0800df3d
 800def0:	0800df3d 	.word	0x0800df3d
 800def4:	0800df3d 	.word	0x0800df3d
 800def8:	0800df3d 	.word	0x0800df3d
 800defc:	0800df3d 	.word	0x0800df3d
 800df00:	0800df3d 	.word	0x0800df3d
 800df04:	0800df3d 	.word	0x0800df3d
 800df08:	0800df35 	.word	0x0800df35
 800df0c:	2301      	movs	r3, #1
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df12:	e0bc      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df14:	2304      	movs	r3, #4
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e0b8      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df1c:	2308      	movs	r3, #8
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e0b4      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df24:	2310      	movs	r3, #16
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2a:	e0b0      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df2c:	2320      	movs	r3, #32
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df32:	e0ac      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df34:	2340      	movs	r3, #64	; 0x40
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3a:	e0a8      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df3c:	2380      	movs	r3, #128	; 0x80
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df42:	e0a4      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a8f      	ldr	r2, [pc, #572]	; (800e188 <UART_SetConfig+0x6a0>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d130      	bne.n	800dfb0 <UART_SetConfig+0x4c8>
 800df4e:	4b8d      	ldr	r3, [pc, #564]	; (800e184 <UART_SetConfig+0x69c>)
 800df50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df52:	f003 0307 	and.w	r3, r3, #7
 800df56:	2b05      	cmp	r3, #5
 800df58:	d826      	bhi.n	800dfa8 <UART_SetConfig+0x4c0>
 800df5a:	a201      	add	r2, pc, #4	; (adr r2, 800df60 <UART_SetConfig+0x478>)
 800df5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df60:	0800df79 	.word	0x0800df79
 800df64:	0800df81 	.word	0x0800df81
 800df68:	0800df89 	.word	0x0800df89
 800df6c:	0800df91 	.word	0x0800df91
 800df70:	0800df99 	.word	0x0800df99
 800df74:	0800dfa1 	.word	0x0800dfa1
 800df78:	2300      	movs	r3, #0
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7e:	e086      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df80:	2304      	movs	r3, #4
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df86:	e082      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df88:	2308      	movs	r3, #8
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8e:	e07e      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df90:	2310      	movs	r3, #16
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df96:	e07a      	b.n	800e08e <UART_SetConfig+0x5a6>
 800df98:	2320      	movs	r3, #32
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9e:	e076      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dfa0:	2340      	movs	r3, #64	; 0x40
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa6:	e072      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dfa8:	2380      	movs	r3, #128	; 0x80
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfae:	e06e      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a75      	ldr	r2, [pc, #468]	; (800e18c <UART_SetConfig+0x6a4>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d130      	bne.n	800e01c <UART_SetConfig+0x534>
 800dfba:	4b72      	ldr	r3, [pc, #456]	; (800e184 <UART_SetConfig+0x69c>)
 800dfbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfbe:	f003 0307 	and.w	r3, r3, #7
 800dfc2:	2b05      	cmp	r3, #5
 800dfc4:	d826      	bhi.n	800e014 <UART_SetConfig+0x52c>
 800dfc6:	a201      	add	r2, pc, #4	; (adr r2, 800dfcc <UART_SetConfig+0x4e4>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800dfe5 	.word	0x0800dfe5
 800dfd0:	0800dfed 	.word	0x0800dfed
 800dfd4:	0800dff5 	.word	0x0800dff5
 800dfd8:	0800dffd 	.word	0x0800dffd
 800dfdc:	0800e005 	.word	0x0800e005
 800dfe0:	0800e00d 	.word	0x0800e00d
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfea:	e050      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dfec:	2304      	movs	r3, #4
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff2:	e04c      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dff4:	2308      	movs	r3, #8
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffa:	e048      	b.n	800e08e <UART_SetConfig+0x5a6>
 800dffc:	2310      	movs	r3, #16
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e002:	e044      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e004:	2320      	movs	r3, #32
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00a:	e040      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e00c:	2340      	movs	r3, #64	; 0x40
 800e00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e012:	e03c      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e014:	2380      	movs	r3, #128	; 0x80
 800e016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01a:	e038      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a5b      	ldr	r2, [pc, #364]	; (800e190 <UART_SetConfig+0x6a8>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d130      	bne.n	800e088 <UART_SetConfig+0x5a0>
 800e026:	4b57      	ldr	r3, [pc, #348]	; (800e184 <UART_SetConfig+0x69c>)
 800e028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e02a:	f003 0307 	and.w	r3, r3, #7
 800e02e:	2b05      	cmp	r3, #5
 800e030:	d826      	bhi.n	800e080 <UART_SetConfig+0x598>
 800e032:	a201      	add	r2, pc, #4	; (adr r2, 800e038 <UART_SetConfig+0x550>)
 800e034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e038:	0800e051 	.word	0x0800e051
 800e03c:	0800e059 	.word	0x0800e059
 800e040:	0800e061 	.word	0x0800e061
 800e044:	0800e069 	.word	0x0800e069
 800e048:	0800e071 	.word	0x0800e071
 800e04c:	0800e079 	.word	0x0800e079
 800e050:	2302      	movs	r3, #2
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e056:	e01a      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e058:	2304      	movs	r3, #4
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05e:	e016      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e060:	2308      	movs	r3, #8
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e066:	e012      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e068:	2310      	movs	r3, #16
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06e:	e00e      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e070:	2320      	movs	r3, #32
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e076:	e00a      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e078:	2340      	movs	r3, #64	; 0x40
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07e:	e006      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e080:	2380      	movs	r3, #128	; 0x80
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e086:	e002      	b.n	800e08e <UART_SetConfig+0x5a6>
 800e088:	2380      	movs	r3, #128	; 0x80
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a3f      	ldr	r2, [pc, #252]	; (800e190 <UART_SetConfig+0x6a8>)
 800e094:	4293      	cmp	r3, r2
 800e096:	f040 80f8 	bne.w	800e28a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e09a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e09e:	2b20      	cmp	r3, #32
 800e0a0:	dc46      	bgt.n	800e130 <UART_SetConfig+0x648>
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	f2c0 8082 	blt.w	800e1ac <UART_SetConfig+0x6c4>
 800e0a8:	3b02      	subs	r3, #2
 800e0aa:	2b1e      	cmp	r3, #30
 800e0ac:	d87e      	bhi.n	800e1ac <UART_SetConfig+0x6c4>
 800e0ae:	a201      	add	r2, pc, #4	; (adr r2, 800e0b4 <UART_SetConfig+0x5cc>)
 800e0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b4:	0800e137 	.word	0x0800e137
 800e0b8:	0800e1ad 	.word	0x0800e1ad
 800e0bc:	0800e13f 	.word	0x0800e13f
 800e0c0:	0800e1ad 	.word	0x0800e1ad
 800e0c4:	0800e1ad 	.word	0x0800e1ad
 800e0c8:	0800e1ad 	.word	0x0800e1ad
 800e0cc:	0800e14f 	.word	0x0800e14f
 800e0d0:	0800e1ad 	.word	0x0800e1ad
 800e0d4:	0800e1ad 	.word	0x0800e1ad
 800e0d8:	0800e1ad 	.word	0x0800e1ad
 800e0dc:	0800e1ad 	.word	0x0800e1ad
 800e0e0:	0800e1ad 	.word	0x0800e1ad
 800e0e4:	0800e1ad 	.word	0x0800e1ad
 800e0e8:	0800e1ad 	.word	0x0800e1ad
 800e0ec:	0800e15f 	.word	0x0800e15f
 800e0f0:	0800e1ad 	.word	0x0800e1ad
 800e0f4:	0800e1ad 	.word	0x0800e1ad
 800e0f8:	0800e1ad 	.word	0x0800e1ad
 800e0fc:	0800e1ad 	.word	0x0800e1ad
 800e100:	0800e1ad 	.word	0x0800e1ad
 800e104:	0800e1ad 	.word	0x0800e1ad
 800e108:	0800e1ad 	.word	0x0800e1ad
 800e10c:	0800e1ad 	.word	0x0800e1ad
 800e110:	0800e1ad 	.word	0x0800e1ad
 800e114:	0800e1ad 	.word	0x0800e1ad
 800e118:	0800e1ad 	.word	0x0800e1ad
 800e11c:	0800e1ad 	.word	0x0800e1ad
 800e120:	0800e1ad 	.word	0x0800e1ad
 800e124:	0800e1ad 	.word	0x0800e1ad
 800e128:	0800e1ad 	.word	0x0800e1ad
 800e12c:	0800e19f 	.word	0x0800e19f
 800e130:	2b40      	cmp	r3, #64	; 0x40
 800e132:	d037      	beq.n	800e1a4 <UART_SetConfig+0x6bc>
 800e134:	e03a      	b.n	800e1ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e136:	f7fc fceb 	bl	800ab10 <HAL_RCCEx_GetD3PCLK1Freq>
 800e13a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e13c:	e03c      	b.n	800e1b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e13e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e142:	4618      	mov	r0, r3
 800e144:	f7fc fcfa 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e14c:	e034      	b.n	800e1b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e14e:	f107 0318 	add.w	r3, r7, #24
 800e152:	4618      	mov	r0, r3
 800e154:	f7fc fe46 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e15c:	e02c      	b.n	800e1b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e15e:	4b09      	ldr	r3, [pc, #36]	; (800e184 <UART_SetConfig+0x69c>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f003 0320 	and.w	r3, r3, #32
 800e166:	2b00      	cmp	r3, #0
 800e168:	d016      	beq.n	800e198 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e16a:	4b06      	ldr	r3, [pc, #24]	; (800e184 <UART_SetConfig+0x69c>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	08db      	lsrs	r3, r3, #3
 800e170:	f003 0303 	and.w	r3, r3, #3
 800e174:	4a07      	ldr	r2, [pc, #28]	; (800e194 <UART_SetConfig+0x6ac>)
 800e176:	fa22 f303 	lsr.w	r3, r2, r3
 800e17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e17c:	e01c      	b.n	800e1b8 <UART_SetConfig+0x6d0>
 800e17e:	bf00      	nop
 800e180:	40011400 	.word	0x40011400
 800e184:	58024400 	.word	0x58024400
 800e188:	40007800 	.word	0x40007800
 800e18c:	40007c00 	.word	0x40007c00
 800e190:	58000c00 	.word	0x58000c00
 800e194:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e198:	4b9d      	ldr	r3, [pc, #628]	; (800e410 <UART_SetConfig+0x928>)
 800e19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e19c:	e00c      	b.n	800e1b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e19e:	4b9d      	ldr	r3, [pc, #628]	; (800e414 <UART_SetConfig+0x92c>)
 800e1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1a2:	e009      	b.n	800e1b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1aa:	e005      	b.n	800e1b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e1b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f000 81de 	beq.w	800e57c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c4:	4a94      	ldr	r2, [pc, #592]	; (800e418 <UART_SetConfig+0x930>)
 800e1c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	685a      	ldr	r2, [r3, #4]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	005b      	lsls	r3, r3, #1
 800e1dc:	4413      	add	r3, r2
 800e1de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d305      	bcc.n	800e1f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d903      	bls.n	800e1f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e1f6:	e1c1      	b.n	800e57c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	60bb      	str	r3, [r7, #8]
 800e1fe:	60fa      	str	r2, [r7, #12]
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e204:	4a84      	ldr	r2, [pc, #528]	; (800e418 <UART_SetConfig+0x930>)
 800e206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	2200      	movs	r2, #0
 800e20e:	603b      	str	r3, [r7, #0]
 800e210:	607a      	str	r2, [r7, #4]
 800e212:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e21a:	f7f2 f8b1 	bl	8000380 <__aeabi_uldivmod>
 800e21e:	4602      	mov	r2, r0
 800e220:	460b      	mov	r3, r1
 800e222:	4610      	mov	r0, r2
 800e224:	4619      	mov	r1, r3
 800e226:	f04f 0200 	mov.w	r2, #0
 800e22a:	f04f 0300 	mov.w	r3, #0
 800e22e:	020b      	lsls	r3, r1, #8
 800e230:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e234:	0202      	lsls	r2, r0, #8
 800e236:	6979      	ldr	r1, [r7, #20]
 800e238:	6849      	ldr	r1, [r1, #4]
 800e23a:	0849      	lsrs	r1, r1, #1
 800e23c:	2000      	movs	r0, #0
 800e23e:	460c      	mov	r4, r1
 800e240:	4605      	mov	r5, r0
 800e242:	eb12 0804 	adds.w	r8, r2, r4
 800e246:	eb43 0905 	adc.w	r9, r3, r5
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	469a      	mov	sl, r3
 800e252:	4693      	mov	fp, r2
 800e254:	4652      	mov	r2, sl
 800e256:	465b      	mov	r3, fp
 800e258:	4640      	mov	r0, r8
 800e25a:	4649      	mov	r1, r9
 800e25c:	f7f2 f890 	bl	8000380 <__aeabi_uldivmod>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4613      	mov	r3, r2
 800e266:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e26e:	d308      	bcc.n	800e282 <UART_SetConfig+0x79a>
 800e270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e276:	d204      	bcs.n	800e282 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e27e:	60da      	str	r2, [r3, #12]
 800e280:	e17c      	b.n	800e57c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e288:	e178      	b.n	800e57c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e292:	f040 80c5 	bne.w	800e420 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e29a:	2b20      	cmp	r3, #32
 800e29c:	dc48      	bgt.n	800e330 <UART_SetConfig+0x848>
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	db7b      	blt.n	800e39a <UART_SetConfig+0x8b2>
 800e2a2:	2b20      	cmp	r3, #32
 800e2a4:	d879      	bhi.n	800e39a <UART_SetConfig+0x8b2>
 800e2a6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ac <UART_SetConfig+0x7c4>)
 800e2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ac:	0800e337 	.word	0x0800e337
 800e2b0:	0800e33f 	.word	0x0800e33f
 800e2b4:	0800e39b 	.word	0x0800e39b
 800e2b8:	0800e39b 	.word	0x0800e39b
 800e2bc:	0800e347 	.word	0x0800e347
 800e2c0:	0800e39b 	.word	0x0800e39b
 800e2c4:	0800e39b 	.word	0x0800e39b
 800e2c8:	0800e39b 	.word	0x0800e39b
 800e2cc:	0800e357 	.word	0x0800e357
 800e2d0:	0800e39b 	.word	0x0800e39b
 800e2d4:	0800e39b 	.word	0x0800e39b
 800e2d8:	0800e39b 	.word	0x0800e39b
 800e2dc:	0800e39b 	.word	0x0800e39b
 800e2e0:	0800e39b 	.word	0x0800e39b
 800e2e4:	0800e39b 	.word	0x0800e39b
 800e2e8:	0800e39b 	.word	0x0800e39b
 800e2ec:	0800e367 	.word	0x0800e367
 800e2f0:	0800e39b 	.word	0x0800e39b
 800e2f4:	0800e39b 	.word	0x0800e39b
 800e2f8:	0800e39b 	.word	0x0800e39b
 800e2fc:	0800e39b 	.word	0x0800e39b
 800e300:	0800e39b 	.word	0x0800e39b
 800e304:	0800e39b 	.word	0x0800e39b
 800e308:	0800e39b 	.word	0x0800e39b
 800e30c:	0800e39b 	.word	0x0800e39b
 800e310:	0800e39b 	.word	0x0800e39b
 800e314:	0800e39b 	.word	0x0800e39b
 800e318:	0800e39b 	.word	0x0800e39b
 800e31c:	0800e39b 	.word	0x0800e39b
 800e320:	0800e39b 	.word	0x0800e39b
 800e324:	0800e39b 	.word	0x0800e39b
 800e328:	0800e39b 	.word	0x0800e39b
 800e32c:	0800e38d 	.word	0x0800e38d
 800e330:	2b40      	cmp	r3, #64	; 0x40
 800e332:	d02e      	beq.n	800e392 <UART_SetConfig+0x8aa>
 800e334:	e031      	b.n	800e39a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e336:	f7fa fbf3 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800e33a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e33c:	e033      	b.n	800e3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e33e:	f7fa fc05 	bl	8008b4c <HAL_RCC_GetPCLK2Freq>
 800e342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e344:	e02f      	b.n	800e3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fc fbf6 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e354:	e027      	b.n	800e3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e356:	f107 0318 	add.w	r3, r7, #24
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fc fd42 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e364:	e01f      	b.n	800e3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e366:	4b2d      	ldr	r3, [pc, #180]	; (800e41c <UART_SetConfig+0x934>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f003 0320 	and.w	r3, r3, #32
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d009      	beq.n	800e386 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e372:	4b2a      	ldr	r3, [pc, #168]	; (800e41c <UART_SetConfig+0x934>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	08db      	lsrs	r3, r3, #3
 800e378:	f003 0303 	and.w	r3, r3, #3
 800e37c:	4a24      	ldr	r2, [pc, #144]	; (800e410 <UART_SetConfig+0x928>)
 800e37e:	fa22 f303 	lsr.w	r3, r2, r3
 800e382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e384:	e00f      	b.n	800e3a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e386:	4b22      	ldr	r3, [pc, #136]	; (800e410 <UART_SetConfig+0x928>)
 800e388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e38a:	e00c      	b.n	800e3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e38c:	4b21      	ldr	r3, [pc, #132]	; (800e414 <UART_SetConfig+0x92c>)
 800e38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e390:	e009      	b.n	800e3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e398:	e005      	b.n	800e3a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e39a:	2300      	movs	r3, #0
 800e39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 80e7 	beq.w	800e57c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b2:	4a19      	ldr	r2, [pc, #100]	; (800e418 <UART_SetConfig+0x930>)
 800e3b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3c0:	005a      	lsls	r2, r3, #1
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	085b      	lsrs	r3, r3, #1
 800e3c8:	441a      	add	r2, r3
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	2b0f      	cmp	r3, #15
 800e3d8:	d916      	bls.n	800e408 <UART_SetConfig+0x920>
 800e3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3e0:	d212      	bcs.n	800e408 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	f023 030f 	bic.w	r3, r3, #15
 800e3ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	085b      	lsrs	r3, r3, #1
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	f003 0307 	and.w	r3, r3, #7
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e404:	60da      	str	r2, [r3, #12]
 800e406:	e0b9      	b.n	800e57c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e408:	2301      	movs	r3, #1
 800e40a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e40e:	e0b5      	b.n	800e57c <UART_SetConfig+0xa94>
 800e410:	03d09000 	.word	0x03d09000
 800e414:	003d0900 	.word	0x003d0900
 800e418:	0801443c 	.word	0x0801443c
 800e41c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e420:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e424:	2b20      	cmp	r3, #32
 800e426:	dc49      	bgt.n	800e4bc <UART_SetConfig+0x9d4>
 800e428:	2b00      	cmp	r3, #0
 800e42a:	db7c      	blt.n	800e526 <UART_SetConfig+0xa3e>
 800e42c:	2b20      	cmp	r3, #32
 800e42e:	d87a      	bhi.n	800e526 <UART_SetConfig+0xa3e>
 800e430:	a201      	add	r2, pc, #4	; (adr r2, 800e438 <UART_SetConfig+0x950>)
 800e432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e436:	bf00      	nop
 800e438:	0800e4c3 	.word	0x0800e4c3
 800e43c:	0800e4cb 	.word	0x0800e4cb
 800e440:	0800e527 	.word	0x0800e527
 800e444:	0800e527 	.word	0x0800e527
 800e448:	0800e4d3 	.word	0x0800e4d3
 800e44c:	0800e527 	.word	0x0800e527
 800e450:	0800e527 	.word	0x0800e527
 800e454:	0800e527 	.word	0x0800e527
 800e458:	0800e4e3 	.word	0x0800e4e3
 800e45c:	0800e527 	.word	0x0800e527
 800e460:	0800e527 	.word	0x0800e527
 800e464:	0800e527 	.word	0x0800e527
 800e468:	0800e527 	.word	0x0800e527
 800e46c:	0800e527 	.word	0x0800e527
 800e470:	0800e527 	.word	0x0800e527
 800e474:	0800e527 	.word	0x0800e527
 800e478:	0800e4f3 	.word	0x0800e4f3
 800e47c:	0800e527 	.word	0x0800e527
 800e480:	0800e527 	.word	0x0800e527
 800e484:	0800e527 	.word	0x0800e527
 800e488:	0800e527 	.word	0x0800e527
 800e48c:	0800e527 	.word	0x0800e527
 800e490:	0800e527 	.word	0x0800e527
 800e494:	0800e527 	.word	0x0800e527
 800e498:	0800e527 	.word	0x0800e527
 800e49c:	0800e527 	.word	0x0800e527
 800e4a0:	0800e527 	.word	0x0800e527
 800e4a4:	0800e527 	.word	0x0800e527
 800e4a8:	0800e527 	.word	0x0800e527
 800e4ac:	0800e527 	.word	0x0800e527
 800e4b0:	0800e527 	.word	0x0800e527
 800e4b4:	0800e527 	.word	0x0800e527
 800e4b8:	0800e519 	.word	0x0800e519
 800e4bc:	2b40      	cmp	r3, #64	; 0x40
 800e4be:	d02e      	beq.n	800e51e <UART_SetConfig+0xa36>
 800e4c0:	e031      	b.n	800e526 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4c2:	f7fa fb2d 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800e4c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4c8:	e033      	b.n	800e532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4ca:	f7fa fb3f 	bl	8008b4c <HAL_RCC_GetPCLK2Freq>
 800e4ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4d0:	e02f      	b.n	800e532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fc fb30 	bl	800ab3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4e0:	e027      	b.n	800e532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4e2:	f107 0318 	add.w	r3, r7, #24
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fc fc7c 	bl	800ade4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4f0:	e01f      	b.n	800e532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4f2:	4b2d      	ldr	r3, [pc, #180]	; (800e5a8 <UART_SetConfig+0xac0>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f003 0320 	and.w	r3, r3, #32
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d009      	beq.n	800e512 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4fe:	4b2a      	ldr	r3, [pc, #168]	; (800e5a8 <UART_SetConfig+0xac0>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	08db      	lsrs	r3, r3, #3
 800e504:	f003 0303 	and.w	r3, r3, #3
 800e508:	4a28      	ldr	r2, [pc, #160]	; (800e5ac <UART_SetConfig+0xac4>)
 800e50a:	fa22 f303 	lsr.w	r3, r2, r3
 800e50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e510:	e00f      	b.n	800e532 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e512:	4b26      	ldr	r3, [pc, #152]	; (800e5ac <UART_SetConfig+0xac4>)
 800e514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e516:	e00c      	b.n	800e532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e518:	4b25      	ldr	r3, [pc, #148]	; (800e5b0 <UART_SetConfig+0xac8>)
 800e51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e51c:	e009      	b.n	800e532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e51e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e524:	e005      	b.n	800e532 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e526:	2300      	movs	r3, #0
 800e528:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e530:	bf00      	nop
    }

    if (pclk != 0U)
 800e532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e534:	2b00      	cmp	r3, #0
 800e536:	d021      	beq.n	800e57c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e53c:	4a1d      	ldr	r2, [pc, #116]	; (800e5b4 <UART_SetConfig+0xacc>)
 800e53e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e542:	461a      	mov	r2, r3
 800e544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e546:	fbb3 f2f2 	udiv	r2, r3, r2
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	085b      	lsrs	r3, r3, #1
 800e550:	441a      	add	r2, r3
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	fbb2 f3f3 	udiv	r3, r2, r3
 800e55a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	2b0f      	cmp	r3, #15
 800e560:	d909      	bls.n	800e576 <UART_SetConfig+0xa8e>
 800e562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e568:	d205      	bcs.n	800e576 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	b29a      	uxth	r2, r3
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	60da      	str	r2, [r3, #12]
 800e574:	e002      	b.n	800e57c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2201      	movs	r2, #1
 800e580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	2201      	movs	r2, #1
 800e588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2200      	movs	r2, #0
 800e590:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	2200      	movs	r2, #0
 800e596:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e598:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3748      	adds	r7, #72	; 0x48
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e5a6:	bf00      	nop
 800e5a8:	58024400 	.word	0x58024400
 800e5ac:	03d09000 	.word	0x03d09000
 800e5b0:	003d0900 	.word	0x003d0900
 800e5b4:	0801443c 	.word	0x0801443c

0800e5b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c4:	f003 0308 	and.w	r3, r3, #8
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00a      	beq.n	800e5e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	430a      	orrs	r2, r1
 800e5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00a      	beq.n	800e604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	430a      	orrs	r2, r1
 800e602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e608:	f003 0302 	and.w	r3, r3, #2
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00a      	beq.n	800e626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	430a      	orrs	r2, r1
 800e624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62a:	f003 0304 	and.w	r3, r3, #4
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00a      	beq.n	800e648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	430a      	orrs	r2, r1
 800e646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e64c:	f003 0310 	and.w	r3, r3, #16
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00a      	beq.n	800e66a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	430a      	orrs	r2, r1
 800e668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e66e:	f003 0320 	and.w	r3, r3, #32
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00a      	beq.n	800e68c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	430a      	orrs	r2, r1
 800e68a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e694:	2b00      	cmp	r3, #0
 800e696:	d01a      	beq.n	800e6ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	430a      	orrs	r2, r1
 800e6ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6b6:	d10a      	bne.n	800e6ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d00a      	beq.n	800e6f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	430a      	orrs	r2, r1
 800e6ee:	605a      	str	r2, [r3, #4]
  }
}
 800e6f0:	bf00      	nop
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b098      	sub	sp, #96	; 0x60
 800e700:	af02      	add	r7, sp, #8
 800e702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e70c:	f7f4 f9ea 	bl	8002ae4 <HAL_GetTick>
 800e710:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f003 0308 	and.w	r3, r3, #8
 800e71c:	2b08      	cmp	r3, #8
 800e71e:	d12f      	bne.n	800e780 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e728:	2200      	movs	r2, #0
 800e72a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f88e 	bl	800e850 <UART_WaitOnFlagUntilTimeout>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d022      	beq.n	800e780 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e742:	e853 3f00 	ldrex	r3, [r3]
 800e746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e74a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e74e:	653b      	str	r3, [r7, #80]	; 0x50
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	461a      	mov	r2, r3
 800e756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e758:	647b      	str	r3, [r7, #68]	; 0x44
 800e75a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e75e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e760:	e841 2300 	strex	r3, r2, [r1]
 800e764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1e6      	bne.n	800e73a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2220      	movs	r2, #32
 800e770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e77c:	2303      	movs	r3, #3
 800e77e:	e063      	b.n	800e848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f003 0304 	and.w	r3, r3, #4
 800e78a:	2b04      	cmp	r3, #4
 800e78c:	d149      	bne.n	800e822 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e78e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e796:	2200      	movs	r2, #0
 800e798:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f857 	bl	800e850 <UART_WaitOnFlagUntilTimeout>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d03c      	beq.n	800e822 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b0:	e853 3f00 	ldrex	r3, [r3]
 800e7b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7c6:	633b      	str	r3, [r7, #48]	; 0x30
 800e7c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ce:	e841 2300 	strex	r3, r2, [r1]
 800e7d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1e6      	bne.n	800e7a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3308      	adds	r3, #8
 800e7e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	e853 3f00 	ldrex	r3, [r3]
 800e7e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f023 0301 	bic.w	r3, r3, #1
 800e7f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	3308      	adds	r3, #8
 800e7f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7fa:	61fa      	str	r2, [r7, #28]
 800e7fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fe:	69b9      	ldr	r1, [r7, #24]
 800e800:	69fa      	ldr	r2, [r7, #28]
 800e802:	e841 2300 	strex	r3, r2, [r1]
 800e806:	617b      	str	r3, [r7, #20]
   return(result);
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1e5      	bne.n	800e7da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2220      	movs	r2, #32
 800e812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e81e:	2303      	movs	r3, #3
 800e820:	e012      	b.n	800e848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2220      	movs	r2, #32
 800e826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2220      	movs	r2, #32
 800e82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3758      	adds	r7, #88	; 0x58
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	603b      	str	r3, [r7, #0]
 800e85c:	4613      	mov	r3, r2
 800e85e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e860:	e04f      	b.n	800e902 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e868:	d04b      	beq.n	800e902 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e86a:	f7f4 f93b 	bl	8002ae4 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	69ba      	ldr	r2, [r7, #24]
 800e876:	429a      	cmp	r2, r3
 800e878:	d302      	bcc.n	800e880 <UART_WaitOnFlagUntilTimeout+0x30>
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e880:	2303      	movs	r3, #3
 800e882:	e04e      	b.n	800e922 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f003 0304 	and.w	r3, r3, #4
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d037      	beq.n	800e902 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b80      	cmp	r3, #128	; 0x80
 800e896:	d034      	beq.n	800e902 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2b40      	cmp	r3, #64	; 0x40
 800e89c:	d031      	beq.n	800e902 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69db      	ldr	r3, [r3, #28]
 800e8a4:	f003 0308 	and.w	r3, r3, #8
 800e8a8:	2b08      	cmp	r3, #8
 800e8aa:	d110      	bne.n	800e8ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2208      	movs	r2, #8
 800e8b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 f95b 	bl	800eb70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2208      	movs	r2, #8
 800e8be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e029      	b.n	800e922 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	69db      	ldr	r3, [r3, #28]
 800e8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8dc:	d111      	bne.n	800e902 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 f941 	bl	800eb70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2220      	movs	r2, #32
 800e8f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e8fe:	2303      	movs	r3, #3
 800e900:	e00f      	b.n	800e922 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	69da      	ldr	r2, [r3, #28]
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	4013      	ands	r3, r2
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	429a      	cmp	r2, r3
 800e910:	bf0c      	ite	eq
 800e912:	2301      	moveq	r3, #1
 800e914:	2300      	movne	r3, #0
 800e916:	b2db      	uxtb	r3, r3
 800e918:	461a      	mov	r2, r3
 800e91a:	79fb      	ldrb	r3, [r7, #7]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d0a0      	beq.n	800e862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
	...

0800e92c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b0a3      	sub	sp, #140	; 0x8c
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	4613      	mov	r3, r2
 800e938:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	88fa      	ldrh	r2, [r7, #6]
 800e944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	88fa      	ldrh	r2, [r7, #6]
 800e94c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2200      	movs	r2, #0
 800e954:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e95e:	d10e      	bne.n	800e97e <UART_Start_Receive_IT+0x52>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d105      	bne.n	800e974 <UART_Start_Receive_IT+0x48>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e96e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e972:	e02d      	b.n	800e9d0 <UART_Start_Receive_IT+0xa4>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	22ff      	movs	r2, #255	; 0xff
 800e978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e97c:	e028      	b.n	800e9d0 <UART_Start_Receive_IT+0xa4>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10d      	bne.n	800e9a2 <UART_Start_Receive_IT+0x76>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d104      	bne.n	800e998 <UART_Start_Receive_IT+0x6c>
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	22ff      	movs	r2, #255	; 0xff
 800e992:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e996:	e01b      	b.n	800e9d0 <UART_Start_Receive_IT+0xa4>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	227f      	movs	r2, #127	; 0x7f
 800e99c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9a0:	e016      	b.n	800e9d0 <UART_Start_Receive_IT+0xa4>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9aa:	d10d      	bne.n	800e9c8 <UART_Start_Receive_IT+0x9c>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	691b      	ldr	r3, [r3, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d104      	bne.n	800e9be <UART_Start_Receive_IT+0x92>
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	227f      	movs	r2, #127	; 0x7f
 800e9b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9bc:	e008      	b.n	800e9d0 <UART_Start_Receive_IT+0xa4>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	223f      	movs	r2, #63	; 0x3f
 800e9c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9c6:	e003      	b.n	800e9d0 <UART_Start_Receive_IT+0xa4>
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2222      	movs	r2, #34	; 0x22
 800e9dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9ea:	e853 3f00 	ldrex	r3, [r3]
 800e9ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e9f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9f2:	f043 0301 	orr.w	r3, r3, #1
 800e9f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3308      	adds	r3, #8
 800ea00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ea04:	673a      	str	r2, [r7, #112]	; 0x70
 800ea06:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ea0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ea12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e3      	bne.n	800e9e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea20:	d14f      	bne.n	800eac2 <UART_Start_Receive_IT+0x196>
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ea28:	88fa      	ldrh	r2, [r7, #6]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d349      	bcc.n	800eac2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea36:	d107      	bne.n	800ea48 <UART_Start_Receive_IT+0x11c>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	691b      	ldr	r3, [r3, #16]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d103      	bne.n	800ea48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	4a47      	ldr	r2, [pc, #284]	; (800eb60 <UART_Start_Receive_IT+0x234>)
 800ea44:	675a      	str	r2, [r3, #116]	; 0x74
 800ea46:	e002      	b.n	800ea4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	4a46      	ldr	r2, [pc, #280]	; (800eb64 <UART_Start_Receive_IT+0x238>)
 800ea4c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d01a      	beq.n	800ea8c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea5e:	e853 3f00 	ldrex	r3, [r3]
 800ea62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ea64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea7a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea80:	e841 2300 	strex	r3, r2, [r1]
 800ea84:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ea86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1e4      	bne.n	800ea56 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	3308      	adds	r3, #8
 800ea92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea96:	e853 3f00 	ldrex	r3, [r3]
 800ea9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eaa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	3308      	adds	r3, #8
 800eaaa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eaac:	64ba      	str	r2, [r7, #72]	; 0x48
 800eaae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eab4:	e841 2300 	strex	r3, r2, [r1]
 800eab8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eaba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1e5      	bne.n	800ea8c <UART_Start_Receive_IT+0x160>
 800eac0:	e046      	b.n	800eb50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaca:	d107      	bne.n	800eadc <UART_Start_Receive_IT+0x1b0>
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	691b      	ldr	r3, [r3, #16]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d103      	bne.n	800eadc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	4a24      	ldr	r2, [pc, #144]	; (800eb68 <UART_Start_Receive_IT+0x23c>)
 800ead8:	675a      	str	r2, [r3, #116]	; 0x74
 800eada:	e002      	b.n	800eae2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	4a23      	ldr	r2, [pc, #140]	; (800eb6c <UART_Start_Receive_IT+0x240>)
 800eae0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	691b      	ldr	r3, [r3, #16]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d019      	beq.n	800eb1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	e853 3f00 	ldrex	r3, [r3]
 800eaf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eafe:	677b      	str	r3, [r7, #116]	; 0x74
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	461a      	mov	r2, r3
 800eb06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb08:	637b      	str	r3, [r7, #52]	; 0x34
 800eb0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb10:	e841 2300 	strex	r3, r2, [r1]
 800eb14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1e6      	bne.n	800eaea <UART_Start_Receive_IT+0x1be>
 800eb1c:	e018      	b.n	800eb50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	e853 3f00 	ldrex	r3, [r3]
 800eb2a:	613b      	str	r3, [r7, #16]
   return(result);
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	f043 0320 	orr.w	r3, r3, #32
 800eb32:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	461a      	mov	r2, r3
 800eb3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb3c:	623b      	str	r3, [r7, #32]
 800eb3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb40:	69f9      	ldr	r1, [r7, #28]
 800eb42:	6a3a      	ldr	r2, [r7, #32]
 800eb44:	e841 2300 	strex	r3, r2, [r1]
 800eb48:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d1e6      	bne.n	800eb1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	378c      	adds	r7, #140	; 0x8c
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	0800f391 	.word	0x0800f391
 800eb64:	0800f031 	.word	0x0800f031
 800eb68:	0800ee79 	.word	0x0800ee79
 800eb6c:	0800ecc1 	.word	0x0800ecc1

0800eb70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b095      	sub	sp, #84	; 0x54
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb80:	e853 3f00 	ldrex	r3, [r3]
 800eb84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	461a      	mov	r2, r3
 800eb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb96:	643b      	str	r3, [r7, #64]	; 0x40
 800eb98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb9e:	e841 2300 	strex	r3, r2, [r1]
 800eba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e6      	bne.n	800eb78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	3308      	adds	r3, #8
 800ebb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebba:	69fa      	ldr	r2, [r7, #28]
 800ebbc:	4b1e      	ldr	r3, [pc, #120]	; (800ec38 <UART_EndRxTransfer+0xc8>)
 800ebbe:	4013      	ands	r3, r2
 800ebc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	3308      	adds	r3, #8
 800ebc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebd2:	e841 2300 	strex	r3, r2, [r1]
 800ebd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e5      	bne.n	800ebaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d118      	bne.n	800ec18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	e853 3f00 	ldrex	r3, [r3]
 800ebf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	f023 0310 	bic.w	r3, r3, #16
 800ebfa:	647b      	str	r3, [r7, #68]	; 0x44
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	461a      	mov	r2, r3
 800ec02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec04:	61bb      	str	r3, [r7, #24]
 800ec06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec08:	6979      	ldr	r1, [r7, #20]
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	e841 2300 	strex	r3, r2, [r1]
 800ec10:	613b      	str	r3, [r7, #16]
   return(result);
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1e6      	bne.n	800ebe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2220      	movs	r2, #32
 800ec1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ec2c:	bf00      	nop
 800ec2e:	3754      	adds	r7, #84	; 0x54
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	effffffe 	.word	0xeffffffe

0800ec3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f7fe ff2e 	bl	800dabc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec60:	bf00      	nop
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	e853 3f00 	ldrex	r3, [r3]
 800ec7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	61bb      	str	r3, [r7, #24]
 800ec90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	6979      	ldr	r1, [r7, #20]
 800ec94:	69ba      	ldr	r2, [r7, #24]
 800ec96:	e841 2300 	strex	r3, r2, [r1]
 800ec9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e6      	bne.n	800ec70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2220      	movs	r2, #32
 800eca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7fe fef9 	bl	800daa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecb6:	bf00      	nop
 800ecb8:	3720      	adds	r7, #32
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
	...

0800ecc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b09c      	sub	sp, #112	; 0x70
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecd8:	2b22      	cmp	r3, #34	; 0x22
 800ecda:	f040 80be 	bne.w	800ee5a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ece8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ecec:	b2d9      	uxtb	r1, r3
 800ecee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecf8:	400a      	ands	r2, r1
 800ecfa:	b2d2      	uxtb	r2, r2
 800ecfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed02:	1c5a      	adds	r2, r3, #1
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	3b01      	subs	r3, #1
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f040 80a1 	bne.w	800ee6a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed30:	e853 3f00 	ldrex	r3, [r3]
 800ed34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	461a      	mov	r2, r3
 800ed44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed46:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed4e:	e841 2300 	strex	r3, r2, [r1]
 800ed52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1e6      	bne.n	800ed28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3308      	adds	r3, #8
 800ed60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed64:	e853 3f00 	ldrex	r3, [r3]
 800ed68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6c:	f023 0301 	bic.w	r3, r3, #1
 800ed70:	667b      	str	r3, [r7, #100]	; 0x64
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	3308      	adds	r3, #8
 800ed78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed7a:	647a      	str	r2, [r7, #68]	; 0x44
 800ed7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed82:	e841 2300 	strex	r3, r2, [r1]
 800ed86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1e5      	bne.n	800ed5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2220      	movs	r2, #32
 800ed92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a33      	ldr	r2, [pc, #204]	; (800ee74 <UART_RxISR_8BIT+0x1b4>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d01f      	beq.n	800edec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d018      	beq.n	800edec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	e853 3f00 	ldrex	r3, [r3]
 800edc6:	623b      	str	r3, [r7, #32]
   return(result);
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800edce:	663b      	str	r3, [r7, #96]	; 0x60
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	461a      	mov	r2, r3
 800edd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edd8:	633b      	str	r3, [r7, #48]	; 0x30
 800edda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede0:	e841 2300 	strex	r3, r2, [r1]
 800ede4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1e6      	bne.n	800edba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d12e      	bne.n	800ee52 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	e853 3f00 	ldrex	r3, [r3]
 800ee06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f023 0310 	bic.w	r3, r3, #16
 800ee0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	461a      	mov	r2, r3
 800ee16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee18:	61fb      	str	r3, [r7, #28]
 800ee1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1c:	69b9      	ldr	r1, [r7, #24]
 800ee1e:	69fa      	ldr	r2, [r7, #28]
 800ee20:	e841 2300 	strex	r3, r2, [r1]
 800ee24:	617b      	str	r3, [r7, #20]
   return(result);
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1e6      	bne.n	800edfa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	69db      	ldr	r3, [r3, #28]
 800ee32:	f003 0310 	and.w	r3, r3, #16
 800ee36:	2b10      	cmp	r3, #16
 800ee38:	d103      	bne.n	800ee42 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2210      	movs	r2, #16
 800ee40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee48:	4619      	mov	r1, r3
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7fe fe40 	bl	800dad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee50:	e00b      	b.n	800ee6a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f7f1 fc4c 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800ee58:	e007      	b.n	800ee6a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	699a      	ldr	r2, [r3, #24]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f042 0208 	orr.w	r2, r2, #8
 800ee68:	619a      	str	r2, [r3, #24]
}
 800ee6a:	bf00      	nop
 800ee6c:	3770      	adds	r7, #112	; 0x70
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	58000c00 	.word	0x58000c00

0800ee78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b09c      	sub	sp, #112	; 0x70
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee90:	2b22      	cmp	r3, #34	; 0x22
 800ee92:	f040 80be 	bne.w	800f012 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eea4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800eea6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800eeaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800eeae:	4013      	ands	r3, r2
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eeb4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeba:	1c9a      	adds	r2, r3, #2
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	3b01      	subs	r3, #1
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f040 80a1 	bne.w	800f022 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eee8:	e853 3f00 	ldrex	r3, [r3]
 800eeec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800eeee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eef4:	667b      	str	r3, [r7, #100]	; 0x64
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eefe:	657b      	str	r3, [r7, #84]	; 0x54
 800ef00:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef06:	e841 2300 	strex	r3, r2, [r1]
 800ef0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ef0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e6      	bne.n	800eee0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3308      	adds	r3, #8
 800ef18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef1c:	e853 3f00 	ldrex	r3, [r3]
 800ef20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef24:	f023 0301 	bic.w	r3, r3, #1
 800ef28:	663b      	str	r3, [r7, #96]	; 0x60
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3308      	adds	r3, #8
 800ef30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef32:	643a      	str	r2, [r7, #64]	; 0x40
 800ef34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1e5      	bne.n	800ef12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2220      	movs	r2, #32
 800ef4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a33      	ldr	r2, [pc, #204]	; (800f02c <UART_RxISR_16BIT+0x1b4>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d01f      	beq.n	800efa4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d018      	beq.n	800efa4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	e853 3f00 	ldrex	r3, [r3]
 800ef7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef98:	e841 2300 	strex	r3, r2, [r1]
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1e6      	bne.n	800ef72 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d12e      	bne.n	800f00a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	e853 3f00 	ldrex	r3, [r3]
 800efbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	f023 0310 	bic.w	r3, r3, #16
 800efc6:	65bb      	str	r3, [r7, #88]	; 0x58
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	461a      	mov	r2, r3
 800efce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efd0:	61bb      	str	r3, [r7, #24]
 800efd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd4:	6979      	ldr	r1, [r7, #20]
 800efd6:	69ba      	ldr	r2, [r7, #24]
 800efd8:	e841 2300 	strex	r3, r2, [r1]
 800efdc:	613b      	str	r3, [r7, #16]
   return(result);
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1e6      	bne.n	800efb2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	69db      	ldr	r3, [r3, #28]
 800efea:	f003 0310 	and.w	r3, r3, #16
 800efee:	2b10      	cmp	r3, #16
 800eff0:	d103      	bne.n	800effa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2210      	movs	r2, #16
 800eff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f000:	4619      	mov	r1, r3
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7fe fd64 	bl	800dad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f008:	e00b      	b.n	800f022 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7f1 fb70 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800f010:	e007      	b.n	800f022 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	699a      	ldr	r2, [r3, #24]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f042 0208 	orr.w	r2, r2, #8
 800f020:	619a      	str	r2, [r3, #24]
}
 800f022:	bf00      	nop
 800f024:	3770      	adds	r7, #112	; 0x70
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	58000c00 	.word	0x58000c00

0800f030 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b0ac      	sub	sp, #176	; 0xb0
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f03e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	69db      	ldr	r3, [r3, #28]
 800f048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f066:	2b22      	cmp	r3, #34	; 0x22
 800f068:	f040 8180 	bne.w	800f36c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f072:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f076:	e123      	b.n	800f2c0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f082:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f086:	b2d9      	uxtb	r1, r3
 800f088:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f092:	400a      	ands	r2, r1
 800f094:	b2d2      	uxtb	r2, r2
 800f096:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f09c:	1c5a      	adds	r2, r3, #1
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	69db      	ldr	r3, [r3, #28]
 800f0ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d053      	beq.n	800f172 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f0ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d011      	beq.n	800f0fa <UART_RxISR_8BIT_FIFOEN+0xca>
 800f0d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00b      	beq.n	800f0fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0f0:	f043 0201 	orr.w	r2, r3, #1
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0fe:	f003 0302 	and.w	r3, r3, #2
 800f102:	2b00      	cmp	r3, #0
 800f104:	d011      	beq.n	800f12a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f10a:	f003 0301 	and.w	r3, r3, #1
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00b      	beq.n	800f12a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2202      	movs	r2, #2
 800f118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f120:	f043 0204 	orr.w	r2, r3, #4
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f12a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f12e:	f003 0304 	and.w	r3, r3, #4
 800f132:	2b00      	cmp	r3, #0
 800f134:	d011      	beq.n	800f15a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00b      	beq.n	800f15a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2204      	movs	r2, #4
 800f148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f150:	f043 0202 	orr.w	r2, r3, #2
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f160:	2b00      	cmp	r3, #0
 800f162:	d006      	beq.n	800f172 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7fe fca9 	bl	800dabc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f178:	b29b      	uxth	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f040 80a0 	bne.w	800f2c0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f188:	e853 3f00 	ldrex	r3, [r3]
 800f18c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f18e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	461a      	mov	r2, r3
 800f19e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f1a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f1a4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f1a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f1aa:	e841 2300 	strex	r3, r2, [r1]
 800f1ae:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f1b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e4      	bne.n	800f180 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1c0:	e853 3f00 	ldrex	r3, [r3]
 800f1c4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f1c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1c8:	4b6e      	ldr	r3, [pc, #440]	; (800f384 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	3308      	adds	r3, #8
 800f1d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f1da:	66ba      	str	r2, [r7, #104]	; 0x68
 800f1dc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1de:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f1e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f1e2:	e841 2300 	strex	r3, r2, [r1]
 800f1e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f1e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1e3      	bne.n	800f1b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2220      	movs	r2, #32
 800f1f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a60      	ldr	r2, [pc, #384]	; (800f388 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d021      	beq.n	800f250 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f216:	2b00      	cmp	r3, #0
 800f218:	d01a      	beq.n	800f250 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f222:	e853 3f00 	ldrex	r3, [r3]
 800f226:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f22a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f22e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	461a      	mov	r2, r3
 800f238:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f23c:	657b      	str	r3, [r7, #84]	; 0x54
 800f23e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f240:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f242:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f244:	e841 2300 	strex	r3, r2, [r1]
 800f248:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1e4      	bne.n	800f21a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f254:	2b01      	cmp	r3, #1
 800f256:	d130      	bne.n	800f2ba <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f266:	e853 3f00 	ldrex	r3, [r3]
 800f26a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26e:	f023 0310 	bic.w	r3, r3, #16
 800f272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	461a      	mov	r2, r3
 800f27c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f280:	643b      	str	r3, [r7, #64]	; 0x40
 800f282:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f288:	e841 2300 	strex	r3, r2, [r1]
 800f28c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1e4      	bne.n	800f25e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	69db      	ldr	r3, [r3, #28]
 800f29a:	f003 0310 	and.w	r3, r3, #16
 800f29e:	2b10      	cmp	r3, #16
 800f2a0:	d103      	bne.n	800f2aa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2210      	movs	r2, #16
 800f2a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7fe fc0c 	bl	800dad0 <HAL_UARTEx_RxEventCallback>
 800f2b8:	e002      	b.n	800f2c0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7f1 fa18 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f2c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d006      	beq.n	800f2d6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f2c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2cc:	f003 0320 	and.w	r3, r3, #32
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f47f aed1 	bne.w	800f078 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f2e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d049      	beq.n	800f37c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f2ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d242      	bcs.n	800f37c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	e853 3f00 	ldrex	r3, [r3]
 800f304:	61fb      	str	r3, [r7, #28]
   return(result);
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f30c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	3308      	adds	r3, #8
 800f316:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f31a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f31c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f322:	e841 2300 	strex	r3, r2, [r1]
 800f326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1e3      	bne.n	800f2f6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a16      	ldr	r2, [pc, #88]	; (800f38c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f332:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	e853 3f00 	ldrex	r3, [r3]
 800f340:	60bb      	str	r3, [r7, #8]
   return(result);
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	f043 0320 	orr.w	r3, r3, #32
 800f348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	461a      	mov	r2, r3
 800f352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f356:	61bb      	str	r3, [r7, #24]
 800f358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35a:	6979      	ldr	r1, [r7, #20]
 800f35c:	69ba      	ldr	r2, [r7, #24]
 800f35e:	e841 2300 	strex	r3, r2, [r1]
 800f362:	613b      	str	r3, [r7, #16]
   return(result);
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1e4      	bne.n	800f334 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f36a:	e007      	b.n	800f37c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	699a      	ldr	r2, [r3, #24]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f042 0208 	orr.w	r2, r2, #8
 800f37a:	619a      	str	r2, [r3, #24]
}
 800f37c:	bf00      	nop
 800f37e:	37b0      	adds	r7, #176	; 0xb0
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	effffffe 	.word	0xeffffffe
 800f388:	58000c00 	.word	0x58000c00
 800f38c:	0800ecc1 	.word	0x0800ecc1

0800f390 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b0ae      	sub	sp, #184	; 0xb8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f39e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	69db      	ldr	r3, [r3, #28]
 800f3a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3c6:	2b22      	cmp	r3, #34	; 0x22
 800f3c8:	f040 8184 	bne.w	800f6d4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f3d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f3d6:	e127      	b.n	800f628 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3de:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f3ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f3ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f3f2:	4013      	ands	r3, r2
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f400:	1c9a      	adds	r2, r3, #2
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	3b01      	subs	r3, #1
 800f410:	b29a      	uxth	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	69db      	ldr	r3, [r3, #28]
 800f41e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f426:	f003 0307 	and.w	r3, r3, #7
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d053      	beq.n	800f4d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f42e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	2b00      	cmp	r3, #0
 800f438:	d011      	beq.n	800f45e <UART_RxISR_16BIT_FIFOEN+0xce>
 800f43a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f442:	2b00      	cmp	r3, #0
 800f444:	d00b      	beq.n	800f45e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2201      	movs	r2, #1
 800f44c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f454:	f043 0201 	orr.w	r2, r3, #1
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f45e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f462:	f003 0302 	and.w	r3, r3, #2
 800f466:	2b00      	cmp	r3, #0
 800f468:	d011      	beq.n	800f48e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f46a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f46e:	f003 0301 	and.w	r3, r3, #1
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00b      	beq.n	800f48e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2202      	movs	r2, #2
 800f47c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f484:	f043 0204 	orr.w	r2, r3, #4
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f48e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f492:	f003 0304 	and.w	r3, r3, #4
 800f496:	2b00      	cmp	r3, #0
 800f498:	d011      	beq.n	800f4be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f49a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f49e:	f003 0301 	and.w	r3, r3, #1
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00b      	beq.n	800f4be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2204      	movs	r2, #4
 800f4ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4b4:	f043 0202 	orr.w	r2, r3, #2
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d006      	beq.n	800f4d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7fe faf7 	bl	800dabc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f040 80a2 	bne.w	800f628 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4ec:	e853 3f00 	ldrex	r3, [r3]
 800f4f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f4f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	461a      	mov	r2, r3
 800f502:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f50a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f50e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f512:	e841 2300 	strex	r3, r2, [r1]
 800f516:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1e2      	bne.n	800f4e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3308      	adds	r3, #8
 800f524:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f528:	e853 3f00 	ldrex	r3, [r3]
 800f52c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f52e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f530:	4b6e      	ldr	r3, [pc, #440]	; (800f6ec <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f532:	4013      	ands	r3, r2
 800f534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3308      	adds	r3, #8
 800f53e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f542:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f544:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f546:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f548:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f54a:	e841 2300 	strex	r3, r2, [r1]
 800f54e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e3      	bne.n	800f51e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2220      	movs	r2, #32
 800f55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4a60      	ldr	r2, [pc, #384]	; (800f6f0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d021      	beq.n	800f5b8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d01a      	beq.n	800f5b8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f58a:	e853 3f00 	ldrex	r3, [r3]
 800f58e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5ac:	e841 2300 	strex	r3, r2, [r1]
 800f5b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1e4      	bne.n	800f582 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d130      	bne.n	800f622 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ce:	e853 3f00 	ldrex	r3, [r3]
 800f5d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d6:	f023 0310 	bic.w	r3, r3, #16
 800f5da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5e8:	647b      	str	r3, [r7, #68]	; 0x44
 800f5ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e4      	bne.n	800f5c6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	69db      	ldr	r3, [r3, #28]
 800f602:	f003 0310 	and.w	r3, r3, #16
 800f606:	2b10      	cmp	r3, #16
 800f608:	d103      	bne.n	800f612 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2210      	movs	r2, #16
 800f610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f618:	4619      	mov	r1, r3
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f7fe fa58 	bl	800dad0 <HAL_UARTEx_RxEventCallback>
 800f620:	e002      	b.n	800f628 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7f1 f864 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f628:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d006      	beq.n	800f63e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f634:	f003 0320 	and.w	r3, r3, #32
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f47f aecd 	bne.w	800f3d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f644:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f648:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d049      	beq.n	800f6e4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f656:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d242      	bcs.n	800f6e4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3308      	adds	r3, #8
 800f664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	e853 3f00 	ldrex	r3, [r3]
 800f66c:	623b      	str	r3, [r7, #32]
   return(result);
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	3308      	adds	r3, #8
 800f67e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f682:	633a      	str	r2, [r7, #48]	; 0x30
 800f684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f68a:	e841 2300 	strex	r3, r2, [r1]
 800f68e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1e3      	bne.n	800f65e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a16      	ldr	r2, [pc, #88]	; (800f6f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f69a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	e853 3f00 	ldrex	r3, [r3]
 800f6a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f043 0320 	orr.w	r3, r3, #32
 800f6b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f6be:	61fb      	str	r3, [r7, #28]
 800f6c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c2:	69b9      	ldr	r1, [r7, #24]
 800f6c4:	69fa      	ldr	r2, [r7, #28]
 800f6c6:	e841 2300 	strex	r3, r2, [r1]
 800f6ca:	617b      	str	r3, [r7, #20]
   return(result);
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1e4      	bne.n	800f69c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6d2:	e007      	b.n	800f6e4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	699a      	ldr	r2, [r3, #24]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f042 0208 	orr.w	r2, r2, #8
 800f6e2:	619a      	str	r2, [r3, #24]
}
 800f6e4:	bf00      	nop
 800f6e6:	37b8      	adds	r7, #184	; 0xb8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	effffffe 	.word	0xeffffffe
 800f6f0:	58000c00 	.word	0x58000c00
 800f6f4:	0800ee79 	.word	0x0800ee79

0800f6f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f700:	bf00      	nop
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f714:	bf00      	nop
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f728:	bf00      	nop
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f742:	2b01      	cmp	r3, #1
 800f744:	d101      	bne.n	800f74a <HAL_UARTEx_DisableFifoMode+0x16>
 800f746:	2302      	movs	r3, #2
 800f748:	e027      	b.n	800f79a <HAL_UARTEx_DisableFifoMode+0x66>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2224      	movs	r2, #36	; 0x24
 800f756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f022 0201 	bic.w	r2, r2, #1
 800f770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2220      	movs	r2, #32
 800f78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b084      	sub	sp, #16
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d101      	bne.n	800f7be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f7ba:	2302      	movs	r3, #2
 800f7bc:	e02d      	b.n	800f81a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2224      	movs	r2, #36	; 0x24
 800f7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f022 0201 	bic.w	r2, r2, #1
 800f7e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	683a      	ldr	r2, [r7, #0]
 800f7f6:	430a      	orrs	r2, r1
 800f7f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 f850 	bl	800f8a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2220      	movs	r2, #32
 800f80c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b084      	sub	sp, #16
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
 800f82a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f832:	2b01      	cmp	r3, #1
 800f834:	d101      	bne.n	800f83a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f836:	2302      	movs	r3, #2
 800f838:	e02d      	b.n	800f896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2201      	movs	r2, #1
 800f83e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2224      	movs	r2, #36	; 0x24
 800f846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f022 0201 	bic.w	r2, r2, #1
 800f860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	683a      	ldr	r2, [r7, #0]
 800f872:	430a      	orrs	r2, r1
 800f874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 f812 	bl	800f8a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2220      	movs	r2, #32
 800f888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
	...

0800f8a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d108      	bne.n	800f8c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f8c0:	e031      	b.n	800f926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f8c2:	2310      	movs	r3, #16
 800f8c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f8c6:	2310      	movs	r3, #16
 800f8c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	0e5b      	lsrs	r3, r3, #25
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	f003 0307 	and.w	r3, r3, #7
 800f8d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	0f5b      	lsrs	r3, r3, #29
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	f003 0307 	and.w	r3, r3, #7
 800f8e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8ea:	7bbb      	ldrb	r3, [r7, #14]
 800f8ec:	7b3a      	ldrb	r2, [r7, #12]
 800f8ee:	4911      	ldr	r1, [pc, #68]	; (800f934 <UARTEx_SetNbDataToProcess+0x94>)
 800f8f0:	5c8a      	ldrb	r2, [r1, r2]
 800f8f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8f6:	7b3a      	ldrb	r2, [r7, #12]
 800f8f8:	490f      	ldr	r1, [pc, #60]	; (800f938 <UARTEx_SetNbDataToProcess+0x98>)
 800f8fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f900:	b29a      	uxth	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f908:	7bfb      	ldrb	r3, [r7, #15]
 800f90a:	7b7a      	ldrb	r2, [r7, #13]
 800f90c:	4909      	ldr	r1, [pc, #36]	; (800f934 <UARTEx_SetNbDataToProcess+0x94>)
 800f90e:	5c8a      	ldrb	r2, [r1, r2]
 800f910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f914:	7b7a      	ldrb	r2, [r7, #13]
 800f916:	4908      	ldr	r1, [pc, #32]	; (800f938 <UARTEx_SetNbDataToProcess+0x98>)
 800f918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f91a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f91e:	b29a      	uxth	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f926:	bf00      	nop
 800f928:	3714      	adds	r7, #20
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	08014454 	.word	0x08014454
 800f938:	0801445c 	.word	0x0801445c

0800f93c <__NVIC_SetPriority>:
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	4603      	mov	r3, r0
 800f944:	6039      	str	r1, [r7, #0]
 800f946:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	db0a      	blt.n	800f966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	b2da      	uxtb	r2, r3
 800f954:	490c      	ldr	r1, [pc, #48]	; (800f988 <__NVIC_SetPriority+0x4c>)
 800f956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f95a:	0112      	lsls	r2, r2, #4
 800f95c:	b2d2      	uxtb	r2, r2
 800f95e:	440b      	add	r3, r1
 800f960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f964:	e00a      	b.n	800f97c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	4908      	ldr	r1, [pc, #32]	; (800f98c <__NVIC_SetPriority+0x50>)
 800f96c:	88fb      	ldrh	r3, [r7, #6]
 800f96e:	f003 030f 	and.w	r3, r3, #15
 800f972:	3b04      	subs	r3, #4
 800f974:	0112      	lsls	r2, r2, #4
 800f976:	b2d2      	uxtb	r2, r2
 800f978:	440b      	add	r3, r1
 800f97a:	761a      	strb	r2, [r3, #24]
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	e000e100 	.word	0xe000e100
 800f98c:	e000ed00 	.word	0xe000ed00

0800f990 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f994:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <SysTick_Handler+0x1c>)
 800f996:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f998:	f002 fada 	bl	8011f50 <xTaskGetSchedulerState>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d001      	beq.n	800f9a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f9a2:	f003 f8f9 	bl	8012b98 <xPortSysTickHandler>
  }
}
 800f9a6:	bf00      	nop
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	e000e010 	.word	0xe000e010

0800f9b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	f06f 0004 	mvn.w	r0, #4
 800f9ba:	f7ff ffbf 	bl	800f93c <__NVIC_SetPriority>
#endif
}
 800f9be:	bf00      	nop
 800f9c0:	bd80      	pop	{r7, pc}
	...

0800f9c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9ca:	f3ef 8305 	mrs	r3, IPSR
 800f9ce:	603b      	str	r3, [r7, #0]
  return(result);
 800f9d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d003      	beq.n	800f9de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f9d6:	f06f 0305 	mvn.w	r3, #5
 800f9da:	607b      	str	r3, [r7, #4]
 800f9dc:	e00c      	b.n	800f9f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f9de:	4b0a      	ldr	r3, [pc, #40]	; (800fa08 <osKernelInitialize+0x44>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d105      	bne.n	800f9f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f9e6:	4b08      	ldr	r3, [pc, #32]	; (800fa08 <osKernelInitialize+0x44>)
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	607b      	str	r3, [r7, #4]
 800f9f0:	e002      	b.n	800f9f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f9f8:	687b      	ldr	r3, [r7, #4]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	370c      	adds	r7, #12
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop
 800fa08:	2400063c 	.word	0x2400063c

0800fa0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa12:	f3ef 8305 	mrs	r3, IPSR
 800fa16:	603b      	str	r3, [r7, #0]
  return(result);
 800fa18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d003      	beq.n	800fa26 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fa1e:	f06f 0305 	mvn.w	r3, #5
 800fa22:	607b      	str	r3, [r7, #4]
 800fa24:	e010      	b.n	800fa48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fa26:	4b0b      	ldr	r3, [pc, #44]	; (800fa54 <osKernelStart+0x48>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d109      	bne.n	800fa42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fa2e:	f7ff ffbf 	bl	800f9b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fa32:	4b08      	ldr	r3, [pc, #32]	; (800fa54 <osKernelStart+0x48>)
 800fa34:	2202      	movs	r2, #2
 800fa36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fa38:	f001 fda4 	bl	8011584 <vTaskStartScheduler>
      stat = osOK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	607b      	str	r3, [r7, #4]
 800fa40:	e002      	b.n	800fa48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fa42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fa48:	687b      	ldr	r3, [r7, #4]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	2400063c 	.word	0x2400063c

0800fa58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b08e      	sub	sp, #56	; 0x38
 800fa5c:	af04      	add	r7, sp, #16
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fa64:	2300      	movs	r3, #0
 800fa66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa68:	f3ef 8305 	mrs	r3, IPSR
 800fa6c:	617b      	str	r3, [r7, #20]
  return(result);
 800fa6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d17e      	bne.n	800fb72 <osThreadNew+0x11a>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d07b      	beq.n	800fb72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fa7a:	2380      	movs	r3, #128	; 0x80
 800fa7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fa7e:	2318      	movs	r3, #24
 800fa80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fa86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d045      	beq.n	800fb1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d002      	beq.n	800faa0 <osThreadNew+0x48>
        name = attr->name;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d002      	beq.n	800faae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	699b      	ldr	r3, [r3, #24]
 800faac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d008      	beq.n	800fac6 <osThreadNew+0x6e>
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	2b38      	cmp	r3, #56	; 0x38
 800fab8:	d805      	bhi.n	800fac6 <osThreadNew+0x6e>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	f003 0301 	and.w	r3, r3, #1
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d001      	beq.n	800faca <osThreadNew+0x72>
        return (NULL);
 800fac6:	2300      	movs	r3, #0
 800fac8:	e054      	b.n	800fb74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	695b      	ldr	r3, [r3, #20]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d003      	beq.n	800fada <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	695b      	ldr	r3, [r3, #20]
 800fad6:	089b      	lsrs	r3, r3, #2
 800fad8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00e      	beq.n	800fb00 <osThreadNew+0xa8>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	68db      	ldr	r3, [r3, #12]
 800fae6:	2b5b      	cmp	r3, #91	; 0x5b
 800fae8:	d90a      	bls.n	800fb00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d006      	beq.n	800fb00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d002      	beq.n	800fb00 <osThreadNew+0xa8>
        mem = 1;
 800fafa:	2301      	movs	r3, #1
 800fafc:	61bb      	str	r3, [r7, #24]
 800fafe:	e010      	b.n	800fb22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	689b      	ldr	r3, [r3, #8]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d10c      	bne.n	800fb22 <osThreadNew+0xca>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d108      	bne.n	800fb22 <osThreadNew+0xca>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	691b      	ldr	r3, [r3, #16]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d104      	bne.n	800fb22 <osThreadNew+0xca>
          mem = 0;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	61bb      	str	r3, [r7, #24]
 800fb1c:	e001      	b.n	800fb22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fb22:	69bb      	ldr	r3, [r7, #24]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d110      	bne.n	800fb4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fb30:	9202      	str	r2, [sp, #8]
 800fb32:	9301      	str	r3, [sp, #4]
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	9300      	str	r3, [sp, #0]
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	6a3a      	ldr	r2, [r7, #32]
 800fb3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f001 fb4a 	bl	80111d8 <xTaskCreateStatic>
 800fb44:	4603      	mov	r3, r0
 800fb46:	613b      	str	r3, [r7, #16]
 800fb48:	e013      	b.n	800fb72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d110      	bne.n	800fb72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fb50:	6a3b      	ldr	r3, [r7, #32]
 800fb52:	b29a      	uxth	r2, r3
 800fb54:	f107 0310 	add.w	r3, r7, #16
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	9300      	str	r3, [sp, #0]
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	f001 fb95 	bl	8011292 <xTaskCreate>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d001      	beq.n	800fb72 <osThreadNew+0x11a>
            hTask = NULL;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fb72:	693b      	ldr	r3, [r7, #16]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3728      	adds	r7, #40	; 0x28
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb82:	f3ef 8305 	mrs	r3, IPSR
 800fb86:	603b      	str	r3, [r7, #0]
  return(result);
 800fb88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <osThreadYield+0x1a>
    stat = osErrorISR;
 800fb8e:	f06f 0305 	mvn.w	r3, #5
 800fb92:	607b      	str	r3, [r7, #4]
 800fb94:	e009      	b.n	800fbaa <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800fb96:	2300      	movs	r3, #0
 800fb98:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800fb9a:	4b07      	ldr	r3, [pc, #28]	; (800fbb8 <osThreadYield+0x3c>)
 800fb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba0:	601a      	str	r2, [r3, #0]
 800fba2:	f3bf 8f4f 	dsb	sy
 800fba6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800fbaa:	687b      	ldr	r3, [r7, #4]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	370c      	adds	r7, #12
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr
 800fbb8:	e000ed04 	.word	0xe000ed04

0800fbbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbc4:	f3ef 8305 	mrs	r3, IPSR
 800fbc8:	60bb      	str	r3, [r7, #8]
  return(result);
 800fbca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d003      	beq.n	800fbd8 <osDelay+0x1c>
    stat = osErrorISR;
 800fbd0:	f06f 0305 	mvn.w	r3, #5
 800fbd4:	60fb      	str	r3, [r7, #12]
 800fbd6:	e007      	b.n	800fbe8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d002      	beq.n	800fbe8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f001 fc9a 	bl	801151c <vTaskDelay>
    }
  }

  return (stat);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b086      	sub	sp, #24
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbfe:	f3ef 8305 	mrs	r3, IPSR
 800fc02:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc04:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d12d      	bne.n	800fc66 <osEventFlagsNew+0x74>
    mem = -1;
 800fc0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc0e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d015      	beq.n	800fc42 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d006      	beq.n	800fc2c <osEventFlagsNew+0x3a>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	2b1f      	cmp	r3, #31
 800fc24:	d902      	bls.n	800fc2c <osEventFlagsNew+0x3a>
        mem = 1;
 800fc26:	2301      	movs	r3, #1
 800fc28:	613b      	str	r3, [r7, #16]
 800fc2a:	e00c      	b.n	800fc46 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d108      	bne.n	800fc46 <osEventFlagsNew+0x54>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d104      	bne.n	800fc46 <osEventFlagsNew+0x54>
          mem = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	613b      	str	r3, [r7, #16]
 800fc40:	e001      	b.n	800fc46 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d106      	bne.n	800fc5a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	4618      	mov	r0, r3
 800fc52:	f000 fa3d 	bl	80100d0 <xEventGroupCreateStatic>
 800fc56:	6178      	str	r0, [r7, #20]
 800fc58:	e005      	b.n	800fc66 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d102      	bne.n	800fc66 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800fc60:	f000 fa6d 	bl	801013e <xEventGroupCreate>
 800fc64:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800fc66:	697b      	ldr	r3, [r7, #20]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d004      	beq.n	800fc8e <osEventFlagsSet+0x1e>
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d003      	beq.n	800fc96 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800fc8e:	f06f 0303 	mvn.w	r3, #3
 800fc92:	617b      	str	r3, [r7, #20]
 800fc94:	e028      	b.n	800fce8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc96:	f3ef 8305 	mrs	r3, IPSR
 800fc9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d01d      	beq.n	800fcde <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800fca2:	2300      	movs	r3, #0
 800fca4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800fca6:	f107 0308 	add.w	r3, r7, #8
 800fcaa:	461a      	mov	r2, r3
 800fcac:	6839      	ldr	r1, [r7, #0]
 800fcae:	6938      	ldr	r0, [r7, #16]
 800fcb0:	f000 fbe8 	bl	8010484 <xEventGroupSetBitsFromISR>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d103      	bne.n	800fcc2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800fcba:	f06f 0302 	mvn.w	r3, #2
 800fcbe:	617b      	str	r3, [r7, #20]
 800fcc0:	e012      	b.n	800fce8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d00d      	beq.n	800fce8 <osEventFlagsSet+0x78>
 800fccc:	4b09      	ldr	r3, [pc, #36]	; (800fcf4 <osEventFlagsSet+0x84>)
 800fcce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcd2:	601a      	str	r2, [r3, #0]
 800fcd4:	f3bf 8f4f 	dsb	sy
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	e004      	b.n	800fce8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6938      	ldr	r0, [r7, #16]
 800fce2:	f000 fb15 	bl	8010310 <xEventGroupSetBits>
 800fce6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800fce8:	697b      	ldr	r3, [r7, #20]
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3718      	adds	r7, #24
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	e000ed04 	.word	0xe000ed04

0800fcf8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08c      	sub	sp, #48	; 0x30
 800fcfc:	af02      	add	r7, sp, #8
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
 800fd04:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fd0a:	69bb      	ldr	r3, [r7, #24]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d004      	beq.n	800fd1a <osEventFlagsWait+0x22>
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d003      	beq.n	800fd22 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800fd1a:	f06f 0303 	mvn.w	r3, #3
 800fd1e:	61fb      	str	r3, [r7, #28]
 800fd20:	e04b      	b.n	800fdba <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd22:	f3ef 8305 	mrs	r3, IPSR
 800fd26:	617b      	str	r3, [r7, #20]
  return(result);
 800fd28:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d003      	beq.n	800fd36 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800fd2e:	f06f 0305 	mvn.w	r3, #5
 800fd32:	61fb      	str	r3, [r7, #28]
 800fd34:	e041      	b.n	800fdba <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f003 0301 	and.w	r3, r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800fd40:	2301      	movs	r3, #1
 800fd42:	627b      	str	r3, [r7, #36]	; 0x24
 800fd44:	e001      	b.n	800fd4a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800fd46:	2300      	movs	r3, #0
 800fd48:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f003 0302 	and.w	r3, r3, #2
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d002      	beq.n	800fd5a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800fd54:	2300      	movs	r3, #0
 800fd56:	623b      	str	r3, [r7, #32]
 800fd58:	e001      	b.n	800fd5e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd64:	6a3a      	ldr	r2, [r7, #32]
 800fd66:	68b9      	ldr	r1, [r7, #8]
 800fd68:	69b8      	ldr	r0, [r7, #24]
 800fd6a:	f000 fa03 	bl	8010174 <xEventGroupWaitBits>
 800fd6e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d010      	beq.n	800fd9c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	4013      	ands	r3, r2
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d019      	beq.n	800fdba <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800fd8c:	f06f 0301 	mvn.w	r3, #1
 800fd90:	61fb      	str	r3, [r7, #28]
 800fd92:	e012      	b.n	800fdba <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fd94:	f06f 0302 	mvn.w	r3, #2
 800fd98:	61fb      	str	r3, [r7, #28]
 800fd9a:	e00e      	b.n	800fdba <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	4013      	ands	r3, r2
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d109      	bne.n	800fdba <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d003      	beq.n	800fdb4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800fdac:	f06f 0301 	mvn.w	r3, #1
 800fdb0:	61fb      	str	r3, [r7, #28]
 800fdb2:	e002      	b.n	800fdba <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fdb4:	f06f 0302 	mvn.w	r3, #2
 800fdb8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800fdba:	69fb      	ldr	r3, [r7, #28]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3728      	adds	r7, #40	; 0x28
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b08a      	sub	sp, #40	; 0x28
 800fdc8:	af02      	add	r7, sp, #8
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdd4:	f3ef 8305 	mrs	r3, IPSR
 800fdd8:	613b      	str	r3, [r7, #16]
  return(result);
 800fdda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d15f      	bne.n	800fea0 <osMessageQueueNew+0xdc>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d05c      	beq.n	800fea0 <osMessageQueueNew+0xdc>
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d059      	beq.n	800fea0 <osMessageQueueNew+0xdc>
    mem = -1;
 800fdec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d029      	beq.n	800fe4c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d012      	beq.n	800fe26 <osMessageQueueNew+0x62>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	2b4f      	cmp	r3, #79	; 0x4f
 800fe06:	d90e      	bls.n	800fe26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d00a      	beq.n	800fe26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	695a      	ldr	r2, [r3, #20]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	68b9      	ldr	r1, [r7, #8]
 800fe18:	fb01 f303 	mul.w	r3, r1, r3
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d302      	bcc.n	800fe26 <osMessageQueueNew+0x62>
        mem = 1;
 800fe20:	2301      	movs	r3, #1
 800fe22:	61bb      	str	r3, [r7, #24]
 800fe24:	e014      	b.n	800fe50 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d110      	bne.n	800fe50 <osMessageQueueNew+0x8c>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10c      	bne.n	800fe50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d108      	bne.n	800fe50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	695b      	ldr	r3, [r3, #20]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d104      	bne.n	800fe50 <osMessageQueueNew+0x8c>
          mem = 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	61bb      	str	r3, [r7, #24]
 800fe4a:	e001      	b.n	800fe50 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d10b      	bne.n	800fe6e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	691a      	ldr	r2, [r3, #16]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	2100      	movs	r1, #0
 800fe60:	9100      	str	r1, [sp, #0]
 800fe62:	68b9      	ldr	r1, [r7, #8]
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f000 fc3d 	bl	80106e4 <xQueueGenericCreateStatic>
 800fe6a:	61f8      	str	r0, [r7, #28]
 800fe6c:	e008      	b.n	800fe80 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d105      	bne.n	800fe80 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fe74:	2200      	movs	r2, #0
 800fe76:	68b9      	ldr	r1, [r7, #8]
 800fe78:	68f8      	ldr	r0, [r7, #12]
 800fe7a:	f000 fcab 	bl	80107d4 <xQueueGenericCreate>
 800fe7e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00c      	beq.n	800fea0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d003      	beq.n	800fe94 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	617b      	str	r3, [r7, #20]
 800fe92:	e001      	b.n	800fe98 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fe94:	2300      	movs	r3, #0
 800fe96:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fe98:	6979      	ldr	r1, [r7, #20]
 800fe9a:	69f8      	ldr	r0, [r7, #28]
 800fe9c:	f001 f93e 	bl	801111c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fea0:	69fb      	ldr	r3, [r7, #28]
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3720      	adds	r7, #32
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
	...

0800feac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	603b      	str	r3, [r7, #0]
 800feb8:	4613      	mov	r3, r2
 800feba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fec0:	2300      	movs	r3, #0
 800fec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fec4:	f3ef 8305 	mrs	r3, IPSR
 800fec8:	617b      	str	r3, [r7, #20]
  return(result);
 800feca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d028      	beq.n	800ff22 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d005      	beq.n	800fee2 <osMessageQueuePut+0x36>
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <osMessageQueuePut+0x36>
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d003      	beq.n	800feea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fee2:	f06f 0303 	mvn.w	r3, #3
 800fee6:	61fb      	str	r3, [r7, #28]
 800fee8:	e038      	b.n	800ff5c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800feea:	2300      	movs	r3, #0
 800feec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800feee:	f107 0210 	add.w	r2, r7, #16
 800fef2:	2300      	movs	r3, #0
 800fef4:	68b9      	ldr	r1, [r7, #8]
 800fef6:	69b8      	ldr	r0, [r7, #24]
 800fef8:	f000 fdc8 	bl	8010a8c <xQueueGenericSendFromISR>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d003      	beq.n	800ff0a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ff02:	f06f 0302 	mvn.w	r3, #2
 800ff06:	61fb      	str	r3, [r7, #28]
 800ff08:	e028      	b.n	800ff5c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d025      	beq.n	800ff5c <osMessageQueuePut+0xb0>
 800ff10:	4b15      	ldr	r3, [pc, #84]	; (800ff68 <osMessageQueuePut+0xbc>)
 800ff12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff16:	601a      	str	r2, [r3, #0]
 800ff18:	f3bf 8f4f 	dsb	sy
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	e01c      	b.n	800ff5c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d002      	beq.n	800ff2e <osMessageQueuePut+0x82>
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d103      	bne.n	800ff36 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ff2e:	f06f 0303 	mvn.w	r3, #3
 800ff32:	61fb      	str	r3, [r7, #28]
 800ff34:	e012      	b.n	800ff5c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ff36:	2300      	movs	r3, #0
 800ff38:	683a      	ldr	r2, [r7, #0]
 800ff3a:	68b9      	ldr	r1, [r7, #8]
 800ff3c:	69b8      	ldr	r0, [r7, #24]
 800ff3e:	f000 fca7 	bl	8010890 <xQueueGenericSend>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d009      	beq.n	800ff5c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d003      	beq.n	800ff56 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ff4e:	f06f 0301 	mvn.w	r3, #1
 800ff52:	61fb      	str	r3, [r7, #28]
 800ff54:	e002      	b.n	800ff5c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ff56:	f06f 0302 	mvn.w	r3, #2
 800ff5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ff5c:	69fb      	ldr	r3, [r7, #28]
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3720      	adds	r7, #32
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	e000ed04 	.word	0xe000ed04

0800ff6c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b088      	sub	sp, #32
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
 800ff78:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff82:	f3ef 8305 	mrs	r3, IPSR
 800ff86:	617b      	str	r3, [r7, #20]
  return(result);
 800ff88:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d028      	beq.n	800ffe0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d005      	beq.n	800ffa0 <osMessageQueueGet+0x34>
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d002      	beq.n	800ffa0 <osMessageQueueGet+0x34>
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d003      	beq.n	800ffa8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ffa0:	f06f 0303 	mvn.w	r3, #3
 800ffa4:	61fb      	str	r3, [r7, #28]
 800ffa6:	e037      	b.n	8010018 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ffac:	f107 0310 	add.w	r3, r7, #16
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	68b9      	ldr	r1, [r7, #8]
 800ffb4:	69b8      	ldr	r0, [r7, #24]
 800ffb6:	f000 fee5 	bl	8010d84 <xQueueReceiveFromISR>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d003      	beq.n	800ffc8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ffc0:	f06f 0302 	mvn.w	r3, #2
 800ffc4:	61fb      	str	r3, [r7, #28]
 800ffc6:	e027      	b.n	8010018 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d024      	beq.n	8010018 <osMessageQueueGet+0xac>
 800ffce:	4b15      	ldr	r3, [pc, #84]	; (8010024 <osMessageQueueGet+0xb8>)
 800ffd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	f3bf 8f4f 	dsb	sy
 800ffda:	f3bf 8f6f 	isb	sy
 800ffde:	e01b      	b.n	8010018 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d002      	beq.n	800ffec <osMessageQueueGet+0x80>
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d103      	bne.n	800fff4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ffec:	f06f 0303 	mvn.w	r3, #3
 800fff0:	61fb      	str	r3, [r7, #28]
 800fff2:	e011      	b.n	8010018 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fff4:	683a      	ldr	r2, [r7, #0]
 800fff6:	68b9      	ldr	r1, [r7, #8]
 800fff8:	69b8      	ldr	r0, [r7, #24]
 800fffa:	f000 fde3 	bl	8010bc4 <xQueueReceive>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b01      	cmp	r3, #1
 8010002:	d009      	beq.n	8010018 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d003      	beq.n	8010012 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801000a:	f06f 0301 	mvn.w	r3, #1
 801000e:	61fb      	str	r3, [r7, #28]
 8010010:	e002      	b.n	8010018 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010012:	f06f 0302 	mvn.w	r3, #2
 8010016:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010018:	69fb      	ldr	r3, [r7, #28]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3720      	adds	r7, #32
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	e000ed04 	.word	0xe000ed04

08010028 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8010028:	b580      	push	{r7, lr}
 801002a:	b086      	sub	sp, #24
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d102      	bne.n	8010040 <osMessageQueueGetCount+0x18>
    count = 0U;
 801003a:	2300      	movs	r3, #0
 801003c:	617b      	str	r3, [r7, #20]
 801003e:	e00e      	b.n	801005e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010040:	f3ef 8305 	mrs	r3, IPSR
 8010044:	60fb      	str	r3, [r7, #12]
  return(result);
 8010046:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010048:	2b00      	cmp	r3, #0
 801004a:	d004      	beq.n	8010056 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801004c:	6938      	ldr	r0, [r7, #16]
 801004e:	f000 ff37 	bl	8010ec0 <uxQueueMessagesWaitingFromISR>
 8010052:	6178      	str	r0, [r7, #20]
 8010054:	e003      	b.n	801005e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8010056:	6938      	ldr	r0, [r7, #16]
 8010058:	f000 ff14 	bl	8010e84 <uxQueueMessagesWaiting>
 801005c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 801005e:	697b      	ldr	r3, [r7, #20]
}
 8010060:	4618      	mov	r0, r3
 8010062:	3718      	adds	r7, #24
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010068:	b480      	push	{r7}
 801006a:	b085      	sub	sp, #20
 801006c:	af00      	add	r7, sp, #0
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	4a07      	ldr	r2, [pc, #28]	; (8010094 <vApplicationGetIdleTaskMemory+0x2c>)
 8010078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	4a06      	ldr	r2, [pc, #24]	; (8010098 <vApplicationGetIdleTaskMemory+0x30>)
 801007e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2280      	movs	r2, #128	; 0x80
 8010084:	601a      	str	r2, [r3, #0]
}
 8010086:	bf00      	nop
 8010088:	3714      	adds	r7, #20
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	24000640 	.word	0x24000640
 8010098:	2400069c 	.word	0x2400069c

0801009c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	4a07      	ldr	r2, [pc, #28]	; (80100c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80100ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	4a06      	ldr	r2, [pc, #24]	; (80100cc <vApplicationGetTimerTaskMemory+0x30>)
 80100b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100ba:	601a      	str	r2, [r3, #0]
}
 80100bc:	bf00      	nop
 80100be:	3714      	adds	r7, #20
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	2400089c 	.word	0x2400089c
 80100cc:	240008f8 	.word	0x240008f8

080100d0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d10a      	bne.n	80100f4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80100de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e2:	f383 8811 	msr	BASEPRI, r3
 80100e6:	f3bf 8f6f 	isb	sy
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80100f0:	bf00      	nop
 80100f2:	e7fe      	b.n	80100f2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80100f4:	2320      	movs	r3, #32
 80100f6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	2b20      	cmp	r3, #32
 80100fc:	d00a      	beq.n	8010114 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80100fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010102:	f383 8811 	msr	BASEPRI, r3
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	f3bf 8f4f 	dsb	sy
 801010e:	60fb      	str	r3, [r7, #12]
}
 8010110:	bf00      	nop
 8010112:	e7fe      	b.n	8010112 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00a      	beq.n	8010134 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	3304      	adds	r3, #4
 8010128:	4618      	mov	r0, r3
 801012a:	f000 f9bf 	bl	80104ac <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2201      	movs	r2, #1
 8010132:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8010134:	697b      	ldr	r3, [r7, #20]
	}
 8010136:	4618      	mov	r0, r3
 8010138:	3718      	adds	r7, #24
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8010144:	2020      	movs	r0, #32
 8010146:	f002 fdb7 	bl	8012cb8 <pvPortMalloc>
 801014a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00a      	beq.n	8010168 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	3304      	adds	r3, #4
 801015c:	4618      	mov	r0, r3
 801015e:	f000 f9a5 	bl	80104ac <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2200      	movs	r2, #0
 8010166:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010168:	687b      	ldr	r3, [r7, #4]
	}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
	...

08010174 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b090      	sub	sp, #64	; 0x40
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
 8010180:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801018a:	2300      	movs	r3, #0
 801018c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d10a      	bne.n	80101aa <xEventGroupWaitBits+0x36>
	__asm volatile
 8010194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	623b      	str	r3, [r7, #32]
}
 80101a6:	bf00      	nop
 80101a8:	e7fe      	b.n	80101a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00a      	beq.n	80101ca <xEventGroupWaitBits+0x56>
	__asm volatile
 80101b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	61fb      	str	r3, [r7, #28]
}
 80101c6:	bf00      	nop
 80101c8:	e7fe      	b.n	80101c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10a      	bne.n	80101e6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80101d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	61bb      	str	r3, [r7, #24]
}
 80101e2:	bf00      	nop
 80101e4:	e7fe      	b.n	80101e4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101e6:	f001 feb3 	bl	8011f50 <xTaskGetSchedulerState>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d102      	bne.n	80101f6 <xEventGroupWaitBits+0x82>
 80101f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d101      	bne.n	80101fa <xEventGroupWaitBits+0x86>
 80101f6:	2301      	movs	r3, #1
 80101f8:	e000      	b.n	80101fc <xEventGroupWaitBits+0x88>
 80101fa:	2300      	movs	r3, #0
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d10a      	bne.n	8010216 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010204:	f383 8811 	msr	BASEPRI, r3
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	f3bf 8f4f 	dsb	sy
 8010210:	617b      	str	r3, [r7, #20]
}
 8010212:	bf00      	nop
 8010214:	e7fe      	b.n	8010214 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8010216:	f001 fa1b 	bl	8011650 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801021a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8010220:	683a      	ldr	r2, [r7, #0]
 8010222:	68b9      	ldr	r1, [r7, #8]
 8010224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010226:	f000 f90b 	bl	8010440 <prvTestWaitCondition>
 801022a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801022c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00e      	beq.n	8010250 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8010232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010234:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8010236:	2300      	movs	r3, #0
 8010238:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d028      	beq.n	8010292 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	43db      	mvns	r3, r3
 8010248:	401a      	ands	r2, r3
 801024a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801024c:	601a      	str	r2, [r3, #0]
 801024e:	e020      	b.n	8010292 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010252:	2b00      	cmp	r3, #0
 8010254:	d104      	bne.n	8010260 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8010256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010258:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801025a:	2301      	movs	r3, #1
 801025c:	633b      	str	r3, [r7, #48]	; 0x30
 801025e:	e018      	b.n	8010292 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d003      	beq.n	801026e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801026c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d003      	beq.n	801027c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8010274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801027a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801027c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801027e:	1d18      	adds	r0, r3, #4
 8010280:	68ba      	ldr	r2, [r7, #8]
 8010282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010284:	4313      	orrs	r3, r2
 8010286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010288:	4619      	mov	r1, r3
 801028a:	f001 fbd9 	bl	8011a40 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8010292:	f001 f9eb 	bl	801166c <xTaskResumeAll>
 8010296:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801029a:	2b00      	cmp	r3, #0
 801029c:	d031      	beq.n	8010302 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d107      	bne.n	80102b4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80102a4:	4b19      	ldr	r3, [pc, #100]	; (801030c <xEventGroupWaitBits+0x198>)
 80102a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	f3bf 8f4f 	dsb	sy
 80102b0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80102b4:	f001 fed8 	bl	8012068 <uxTaskResetEventItemValue>
 80102b8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80102ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d11a      	bne.n	80102fa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80102c4:	f002 fbd6 	bl	8012a74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80102c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	68b9      	ldr	r1, [r7, #8]
 80102d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80102d4:	f000 f8b4 	bl	8010440 <prvTestWaitCondition>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d009      	beq.n	80102f2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d006      	beq.n	80102f2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80102e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	43db      	mvns	r3, r3
 80102ec:	401a      	ands	r2, r3
 80102ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80102f2:	2301      	movs	r3, #1
 80102f4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80102f6:	f002 fbed 	bl	8012ad4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80102fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010300:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8010302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010304:	4618      	mov	r0, r3
 8010306:	3740      	adds	r7, #64	; 0x40
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	e000ed04 	.word	0xe000ed04

08010310 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b08e      	sub	sp, #56	; 0x38
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801031a:	2300      	movs	r3, #0
 801031c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8010322:	2300      	movs	r3, #0
 8010324:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10a      	bne.n	8010342 <xEventGroupSetBits+0x32>
	__asm volatile
 801032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010330:	f383 8811 	msr	BASEPRI, r3
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	613b      	str	r3, [r7, #16]
}
 801033e:	bf00      	nop
 8010340:	e7fe      	b.n	8010340 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00a      	beq.n	8010362 <xEventGroupSetBits+0x52>
	__asm volatile
 801034c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010350:	f383 8811 	msr	BASEPRI, r3
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	60fb      	str	r3, [r7, #12]
}
 801035e:	bf00      	nop
 8010360:	e7fe      	b.n	8010360 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010364:	3304      	adds	r3, #4
 8010366:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036a:	3308      	adds	r3, #8
 801036c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801036e:	f001 f96f 	bl	8011650 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	431a      	orrs	r2, r3
 8010380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010382:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010384:	e03c      	b.n	8010400 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801038c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010392:	2300      	movs	r3, #0
 8010394:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801039c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80103a4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d108      	bne.n	80103c2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80103b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	4013      	ands	r3, r2
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00b      	beq.n	80103d4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80103bc:	2301      	movs	r3, #1
 80103be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103c0:	e008      	b.n	80103d4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80103c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	4013      	ands	r3, r2
 80103ca:	69ba      	ldr	r2, [r7, #24]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d101      	bne.n	80103d4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80103d0:	2301      	movs	r3, #1
 80103d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80103d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d010      	beq.n	80103fc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d003      	beq.n	80103ec <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80103e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	4313      	orrs	r3, r2
 80103ea:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80103ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80103f4:	4619      	mov	r1, r3
 80103f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103f8:	f001 fbee 	bl	8011bd8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010402:	6a3b      	ldr	r3, [r7, #32]
 8010404:	429a      	cmp	r2, r3
 8010406:	d1be      	bne.n	8010386 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040e:	43db      	mvns	r3, r3
 8010410:	401a      	ands	r2, r3
 8010412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010414:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010416:	f001 f929 	bl	801166c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041c:	681b      	ldr	r3, [r3, #0]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3738      	adds	r7, #56	; 0x38
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b082      	sub	sp, #8
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010430:	6839      	ldr	r1, [r7, #0]
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff ff6c 	bl	8010310 <xEventGroupSetBits>
}
 8010438:	bf00      	nop
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010440:	b480      	push	{r7}
 8010442:	b087      	sub	sp, #28
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801044c:	2300      	movs	r3, #0
 801044e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d107      	bne.n	8010466 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	4013      	ands	r3, r2
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00a      	beq.n	8010476 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010460:	2301      	movs	r3, #1
 8010462:	617b      	str	r3, [r7, #20]
 8010464:	e007      	b.n	8010476 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	4013      	ands	r3, r2
 801046c:	68ba      	ldr	r2, [r7, #8]
 801046e:	429a      	cmp	r2, r3
 8010470:	d101      	bne.n	8010476 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010472:	2301      	movs	r3, #1
 8010474:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010476:	697b      	ldr	r3, [r7, #20]
}
 8010478:	4618      	mov	r0, r3
 801047a:	371c      	adds	r7, #28
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010484:	b580      	push	{r7, lr}
 8010486:	b086      	sub	sp, #24
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	68f9      	ldr	r1, [r7, #12]
 8010496:	4804      	ldr	r0, [pc, #16]	; (80104a8 <xEventGroupSetBitsFromISR+0x24>)
 8010498:	f002 f9a0 	bl	80127dc <xTimerPendFunctionCallFromISR>
 801049c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801049e:	697b      	ldr	r3, [r7, #20]
	}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3718      	adds	r7, #24
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	08010427 	.word	0x08010427

080104ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f103 0208 	add.w	r2, r3, #8
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f103 0208 	add.w	r2, r3, #8
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f103 0208 	add.w	r2, r3, #8
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2200      	movs	r2, #0
 80104de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80104e0:	bf00      	nop
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80104fa:	bf00      	nop
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr

08010506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010506:	b480      	push	{r7}
 8010508:	b085      	sub	sp, #20
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
 801050e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	689a      	ldr	r2, [r3, #8]
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	683a      	ldr	r2, [r7, #0]
 801052a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	1c5a      	adds	r2, r3, #1
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	601a      	str	r2, [r3, #0]
}
 8010542:	bf00      	nop
 8010544:	3714      	adds	r7, #20
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr

0801054e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801054e:	b480      	push	{r7}
 8010550:	b085      	sub	sp, #20
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
 8010556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010564:	d103      	bne.n	801056e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	691b      	ldr	r3, [r3, #16]
 801056a:	60fb      	str	r3, [r7, #12]
 801056c:	e00c      	b.n	8010588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	3308      	adds	r3, #8
 8010572:	60fb      	str	r3, [r7, #12]
 8010574:	e002      	b.n	801057c <vListInsert+0x2e>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	60fb      	str	r3, [r7, #12]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	68ba      	ldr	r2, [r7, #8]
 8010584:	429a      	cmp	r2, r3
 8010586:	d2f6      	bcs.n	8010576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	683a      	ldr	r2, [r7, #0]
 80105a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	1c5a      	adds	r2, r3, #1
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	601a      	str	r2, [r3, #0]
}
 80105b4:	bf00      	nop
 80105b6:	3714      	adds	r7, #20
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr

080105c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80105c0:	b480      	push	{r7}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	691b      	ldr	r3, [r3, #16]
 80105cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	6892      	ldr	r2, [r2, #8]
 80105d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	6852      	ldr	r2, [r2, #4]
 80105e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d103      	bne.n	80105f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	689a      	ldr	r2, [r3, #8]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	1e5a      	subs	r2, r3, #1
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	681b      	ldr	r3, [r3, #0]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3714      	adds	r7, #20
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d10a      	bne.n	801063e <xQueueGenericReset+0x2a>
	__asm volatile
 8010628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062c:	f383 8811 	msr	BASEPRI, r3
 8010630:	f3bf 8f6f 	isb	sy
 8010634:	f3bf 8f4f 	dsb	sy
 8010638:	60bb      	str	r3, [r7, #8]
}
 801063a:	bf00      	nop
 801063c:	e7fe      	b.n	801063c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801063e:	f002 fa19 	bl	8012a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801064a:	68f9      	ldr	r1, [r7, #12]
 801064c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801064e:	fb01 f303 	mul.w	r3, r1, r3
 8010652:	441a      	add	r2, r3
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2200      	movs	r2, #0
 801065c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801066e:	3b01      	subs	r3, #1
 8010670:	68f9      	ldr	r1, [r7, #12]
 8010672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010674:	fb01 f303 	mul.w	r3, r1, r3
 8010678:	441a      	add	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	22ff      	movs	r2, #255	; 0xff
 8010682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	22ff      	movs	r2, #255	; 0xff
 801068a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d114      	bne.n	80106be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d01a      	beq.n	80106d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	3310      	adds	r3, #16
 80106a0:	4618      	mov	r0, r3
 80106a2:	f001 fa35 	bl	8011b10 <xTaskRemoveFromEventList>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d012      	beq.n	80106d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80106ac:	4b0c      	ldr	r3, [pc, #48]	; (80106e0 <xQueueGenericReset+0xcc>)
 80106ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	f3bf 8f4f 	dsb	sy
 80106b8:	f3bf 8f6f 	isb	sy
 80106bc:	e009      	b.n	80106d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3310      	adds	r3, #16
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7ff fef2 	bl	80104ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	3324      	adds	r3, #36	; 0x24
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7ff feed 	bl	80104ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80106d2:	f002 f9ff 	bl	8012ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80106d6:	2301      	movs	r3, #1
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	e000ed04 	.word	0xe000ed04

080106e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08e      	sub	sp, #56	; 0x38
 80106e8:	af02      	add	r7, sp, #8
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
 80106f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d10a      	bne.n	801070e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801070a:	bf00      	nop
 801070c:	e7fe      	b.n	801070c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10a      	bne.n	801072a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010718:	f383 8811 	msr	BASEPRI, r3
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010726:	bf00      	nop
 8010728:	e7fe      	b.n	8010728 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <xQueueGenericCreateStatic+0x52>
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <xQueueGenericCreateStatic+0x56>
 8010736:	2301      	movs	r3, #1
 8010738:	e000      	b.n	801073c <xQueueGenericCreateStatic+0x58>
 801073a:	2300      	movs	r3, #0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d10a      	bne.n	8010756 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010744:	f383 8811 	msr	BASEPRI, r3
 8010748:	f3bf 8f6f 	isb	sy
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	623b      	str	r3, [r7, #32]
}
 8010752:	bf00      	nop
 8010754:	e7fe      	b.n	8010754 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d102      	bne.n	8010762 <xQueueGenericCreateStatic+0x7e>
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <xQueueGenericCreateStatic+0x82>
 8010762:	2301      	movs	r3, #1
 8010764:	e000      	b.n	8010768 <xQueueGenericCreateStatic+0x84>
 8010766:	2300      	movs	r3, #0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d10a      	bne.n	8010782 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801076c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010770:	f383 8811 	msr	BASEPRI, r3
 8010774:	f3bf 8f6f 	isb	sy
 8010778:	f3bf 8f4f 	dsb	sy
 801077c:	61fb      	str	r3, [r7, #28]
}
 801077e:	bf00      	nop
 8010780:	e7fe      	b.n	8010780 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010782:	2350      	movs	r3, #80	; 0x50
 8010784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	2b50      	cmp	r3, #80	; 0x50
 801078a:	d00a      	beq.n	80107a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010790:	f383 8811 	msr	BASEPRI, r3
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	f3bf 8f4f 	dsb	sy
 801079c:	61bb      	str	r3, [r7, #24]
}
 801079e:	bf00      	nop
 80107a0:	e7fe      	b.n	80107a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80107a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80107a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00d      	beq.n	80107ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80107ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b0:	2201      	movs	r2, #1
 80107b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80107b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80107ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	4613      	mov	r3, r2
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	68b9      	ldr	r1, [r7, #8]
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f000 f83f 	bl	8010848 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80107ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3730      	adds	r7, #48	; 0x30
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b08a      	sub	sp, #40	; 0x28
 80107d8:	af02      	add	r7, sp, #8
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	4613      	mov	r3, r2
 80107e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10a      	bne.n	80107fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	f383 8811 	msr	BASEPRI, r3
 80107f0:	f3bf 8f6f 	isb	sy
 80107f4:	f3bf 8f4f 	dsb	sy
 80107f8:	613b      	str	r3, [r7, #16]
}
 80107fa:	bf00      	nop
 80107fc:	e7fe      	b.n	80107fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	fb02 f303 	mul.w	r3, r2, r3
 8010806:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	3350      	adds	r3, #80	; 0x50
 801080c:	4618      	mov	r0, r3
 801080e:	f002 fa53 	bl	8012cb8 <pvPortMalloc>
 8010812:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d011      	beq.n	801083e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	3350      	adds	r3, #80	; 0x50
 8010822:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801082c:	79fa      	ldrb	r2, [r7, #7]
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	4613      	mov	r3, r2
 8010834:	697a      	ldr	r2, [r7, #20]
 8010836:	68b9      	ldr	r1, [r7, #8]
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f000 f805 	bl	8010848 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801083e:	69bb      	ldr	r3, [r7, #24]
	}
 8010840:	4618      	mov	r0, r3
 8010842:	3720      	adds	r7, #32
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d103      	bne.n	8010864 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801085c:	69bb      	ldr	r3, [r7, #24]
 801085e:	69ba      	ldr	r2, [r7, #24]
 8010860:	601a      	str	r2, [r3, #0]
 8010862:	e002      	b.n	801086a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010876:	2101      	movs	r1, #1
 8010878:	69b8      	ldr	r0, [r7, #24]
 801087a:	f7ff fecb 	bl	8010614 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	78fa      	ldrb	r2, [r7, #3]
 8010882:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010886:	bf00      	nop
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
	...

08010890 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b08e      	sub	sp, #56	; 0x38
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801089e:	2300      	movs	r3, #0
 80108a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80108a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10a      	bne.n	80108c2 <xQueueGenericSend+0x32>
	__asm volatile
 80108ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b0:	f383 8811 	msr	BASEPRI, r3
 80108b4:	f3bf 8f6f 	isb	sy
 80108b8:	f3bf 8f4f 	dsb	sy
 80108bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80108be:	bf00      	nop
 80108c0:	e7fe      	b.n	80108c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d103      	bne.n	80108d0 <xQueueGenericSend+0x40>
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d101      	bne.n	80108d4 <xQueueGenericSend+0x44>
 80108d0:	2301      	movs	r3, #1
 80108d2:	e000      	b.n	80108d6 <xQueueGenericSend+0x46>
 80108d4:	2300      	movs	r3, #0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d10a      	bne.n	80108f0 <xQueueGenericSend+0x60>
	__asm volatile
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80108ec:	bf00      	nop
 80108ee:	e7fe      	b.n	80108ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	2b02      	cmp	r3, #2
 80108f4:	d103      	bne.n	80108fe <xQueueGenericSend+0x6e>
 80108f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d101      	bne.n	8010902 <xQueueGenericSend+0x72>
 80108fe:	2301      	movs	r3, #1
 8010900:	e000      	b.n	8010904 <xQueueGenericSend+0x74>
 8010902:	2300      	movs	r3, #0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d10a      	bne.n	801091e <xQueueGenericSend+0x8e>
	__asm volatile
 8010908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090c:	f383 8811 	msr	BASEPRI, r3
 8010910:	f3bf 8f6f 	isb	sy
 8010914:	f3bf 8f4f 	dsb	sy
 8010918:	623b      	str	r3, [r7, #32]
}
 801091a:	bf00      	nop
 801091c:	e7fe      	b.n	801091c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801091e:	f001 fb17 	bl	8011f50 <xTaskGetSchedulerState>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d102      	bne.n	801092e <xQueueGenericSend+0x9e>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d101      	bne.n	8010932 <xQueueGenericSend+0xa2>
 801092e:	2301      	movs	r3, #1
 8010930:	e000      	b.n	8010934 <xQueueGenericSend+0xa4>
 8010932:	2300      	movs	r3, #0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d10a      	bne.n	801094e <xQueueGenericSend+0xbe>
	__asm volatile
 8010938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801093c:	f383 8811 	msr	BASEPRI, r3
 8010940:	f3bf 8f6f 	isb	sy
 8010944:	f3bf 8f4f 	dsb	sy
 8010948:	61fb      	str	r3, [r7, #28]
}
 801094a:	bf00      	nop
 801094c:	e7fe      	b.n	801094c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801094e:	f002 f891 	bl	8012a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801095a:	429a      	cmp	r2, r3
 801095c:	d302      	bcc.n	8010964 <xQueueGenericSend+0xd4>
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	2b02      	cmp	r3, #2
 8010962:	d129      	bne.n	80109b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010964:	683a      	ldr	r2, [r7, #0]
 8010966:	68b9      	ldr	r1, [r7, #8]
 8010968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801096a:	f000 fac7 	bl	8010efc <prvCopyDataToQueue>
 801096e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010974:	2b00      	cmp	r3, #0
 8010976:	d010      	beq.n	801099a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097a:	3324      	adds	r3, #36	; 0x24
 801097c:	4618      	mov	r0, r3
 801097e:	f001 f8c7 	bl	8011b10 <xTaskRemoveFromEventList>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d013      	beq.n	80109b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010988:	4b3f      	ldr	r3, [pc, #252]	; (8010a88 <xQueueGenericSend+0x1f8>)
 801098a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801098e:	601a      	str	r2, [r3, #0]
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	f3bf 8f6f 	isb	sy
 8010998:	e00a      	b.n	80109b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099c:	2b00      	cmp	r3, #0
 801099e:	d007      	beq.n	80109b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80109a0:	4b39      	ldr	r3, [pc, #228]	; (8010a88 <xQueueGenericSend+0x1f8>)
 80109a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109a6:	601a      	str	r2, [r3, #0]
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80109b0:	f002 f890 	bl	8012ad4 <vPortExitCritical>
				return pdPASS;
 80109b4:	2301      	movs	r3, #1
 80109b6:	e063      	b.n	8010a80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d103      	bne.n	80109c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80109be:	f002 f889 	bl	8012ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	e05c      	b.n	8010a80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d106      	bne.n	80109da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109cc:	f107 0314 	add.w	r3, r7, #20
 80109d0:	4618      	mov	r0, r3
 80109d2:	f001 f963 	bl	8011c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109d6:	2301      	movs	r3, #1
 80109d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109da:	f002 f87b 	bl	8012ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80109de:	f000 fe37 	bl	8011650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80109e2:	f002 f847 	bl	8012a74 <vPortEnterCritical>
 80109e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109ec:	b25b      	sxtb	r3, r3
 80109ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109f2:	d103      	bne.n	80109fc <xQueueGenericSend+0x16c>
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a02:	b25b      	sxtb	r3, r3
 8010a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a08:	d103      	bne.n	8010a12 <xQueueGenericSend+0x182>
 8010a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a12:	f002 f85f 	bl	8012ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a16:	1d3a      	adds	r2, r7, #4
 8010a18:	f107 0314 	add.w	r3, r7, #20
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f001 f952 	bl	8011cc8 <xTaskCheckForTimeOut>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d124      	bne.n	8010a74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a2c:	f000 fb5e 	bl	80110ec <prvIsQueueFull>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d018      	beq.n	8010a68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	3310      	adds	r3, #16
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 ffda 	bl	80119f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a46:	f000 fae9 	bl	801101c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010a4a:	f000 fe0f 	bl	801166c <xTaskResumeAll>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f47f af7c 	bne.w	801094e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010a56:	4b0c      	ldr	r3, [pc, #48]	; (8010a88 <xQueueGenericSend+0x1f8>)
 8010a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a5c:	601a      	str	r2, [r3, #0]
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	e772      	b.n	801094e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a6a:	f000 fad7 	bl	801101c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a6e:	f000 fdfd 	bl	801166c <xTaskResumeAll>
 8010a72:	e76c      	b.n	801094e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a76:	f000 fad1 	bl	801101c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a7a:	f000 fdf7 	bl	801166c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010a7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3738      	adds	r7, #56	; 0x38
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	e000ed04 	.word	0xe000ed04

08010a8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b090      	sub	sp, #64	; 0x40
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	60b9      	str	r1, [r7, #8]
 8010a96:	607a      	str	r2, [r7, #4]
 8010a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10a      	bne.n	8010aba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa8:	f383 8811 	msr	BASEPRI, r3
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f3bf 8f4f 	dsb	sy
 8010ab4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010ab6:	bf00      	nop
 8010ab8:	e7fe      	b.n	8010ab8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d103      	bne.n	8010ac8 <xQueueGenericSendFromISR+0x3c>
 8010ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d101      	bne.n	8010acc <xQueueGenericSendFromISR+0x40>
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e000      	b.n	8010ace <xQueueGenericSendFromISR+0x42>
 8010acc:	2300      	movs	r3, #0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10a      	bne.n	8010ae8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad6:	f383 8811 	msr	BASEPRI, r3
 8010ada:	f3bf 8f6f 	isb	sy
 8010ade:	f3bf 8f4f 	dsb	sy
 8010ae2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ae4:	bf00      	nop
 8010ae6:	e7fe      	b.n	8010ae6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	2b02      	cmp	r3, #2
 8010aec:	d103      	bne.n	8010af6 <xQueueGenericSendFromISR+0x6a>
 8010aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d101      	bne.n	8010afa <xQueueGenericSendFromISR+0x6e>
 8010af6:	2301      	movs	r3, #1
 8010af8:	e000      	b.n	8010afc <xQueueGenericSendFromISR+0x70>
 8010afa:	2300      	movs	r3, #0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d10a      	bne.n	8010b16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	623b      	str	r3, [r7, #32]
}
 8010b12:	bf00      	nop
 8010b14:	e7fe      	b.n	8010b14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b16:	f002 f88f 	bl	8012c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8010b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
 8010b2e:	61fa      	str	r2, [r7, #28]
 8010b30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010b32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d302      	bcc.n	8010b48 <xQueueGenericSendFromISR+0xbc>
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	d12f      	bne.n	8010ba8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b58:	683a      	ldr	r2, [r7, #0]
 8010b5a:	68b9      	ldr	r1, [r7, #8]
 8010b5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b5e:	f000 f9cd 	bl	8010efc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010b62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b6a:	d112      	bne.n	8010b92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d016      	beq.n	8010ba2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b76:	3324      	adds	r3, #36	; 0x24
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f000 ffc9 	bl	8011b10 <xTaskRemoveFromEventList>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d00e      	beq.n	8010ba2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00b      	beq.n	8010ba2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	601a      	str	r2, [r3, #0]
 8010b90:	e007      	b.n	8010ba2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010b96:	3301      	adds	r3, #1
 8010b98:	b2db      	uxtb	r3, r3
 8010b9a:	b25a      	sxtb	r2, r3
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010ba6:	e001      	b.n	8010bac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010bb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3740      	adds	r7, #64	; 0x40
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
	...

08010bc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b08c      	sub	sp, #48	; 0x30
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10a      	bne.n	8010bf4 <xQueueReceive+0x30>
	__asm volatile
 8010bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be2:	f383 8811 	msr	BASEPRI, r3
 8010be6:	f3bf 8f6f 	isb	sy
 8010bea:	f3bf 8f4f 	dsb	sy
 8010bee:	623b      	str	r3, [r7, #32]
}
 8010bf0:	bf00      	nop
 8010bf2:	e7fe      	b.n	8010bf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d103      	bne.n	8010c02 <xQueueReceive+0x3e>
 8010bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <xQueueReceive+0x42>
 8010c02:	2301      	movs	r3, #1
 8010c04:	e000      	b.n	8010c08 <xQueueReceive+0x44>
 8010c06:	2300      	movs	r3, #0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d10a      	bne.n	8010c22 <xQueueReceive+0x5e>
	__asm volatile
 8010c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	61fb      	str	r3, [r7, #28]
}
 8010c1e:	bf00      	nop
 8010c20:	e7fe      	b.n	8010c20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c22:	f001 f995 	bl	8011f50 <xTaskGetSchedulerState>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d102      	bne.n	8010c32 <xQueueReceive+0x6e>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d101      	bne.n	8010c36 <xQueueReceive+0x72>
 8010c32:	2301      	movs	r3, #1
 8010c34:	e000      	b.n	8010c38 <xQueueReceive+0x74>
 8010c36:	2300      	movs	r3, #0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d10a      	bne.n	8010c52 <xQueueReceive+0x8e>
	__asm volatile
 8010c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	61bb      	str	r3, [r7, #24]
}
 8010c4e:	bf00      	nop
 8010c50:	e7fe      	b.n	8010c50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010c52:	f001 ff0f 	bl	8012a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d01f      	beq.n	8010ca2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010c62:	68b9      	ldr	r1, [r7, #8]
 8010c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c66:	f000 f9b3 	bl	8010fd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	1e5a      	subs	r2, r3, #1
 8010c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c74:	691b      	ldr	r3, [r3, #16]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00f      	beq.n	8010c9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7c:	3310      	adds	r3, #16
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f000 ff46 	bl	8011b10 <xTaskRemoveFromEventList>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d007      	beq.n	8010c9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010c8a:	4b3d      	ldr	r3, [pc, #244]	; (8010d80 <xQueueReceive+0x1bc>)
 8010c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c90:	601a      	str	r2, [r3, #0]
 8010c92:	f3bf 8f4f 	dsb	sy
 8010c96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010c9a:	f001 ff1b 	bl	8012ad4 <vPortExitCritical>
				return pdPASS;
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	e069      	b.n	8010d76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d103      	bne.n	8010cb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ca8:	f001 ff14 	bl	8012ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010cac:	2300      	movs	r3, #0
 8010cae:	e062      	b.n	8010d76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d106      	bne.n	8010cc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010cb6:	f107 0310 	add.w	r3, r7, #16
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 ffee 	bl	8011c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010cc4:	f001 ff06 	bl	8012ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010cc8:	f000 fcc2 	bl	8011650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ccc:	f001 fed2 	bl	8012a74 <vPortEnterCritical>
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cd6:	b25b      	sxtb	r3, r3
 8010cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cdc:	d103      	bne.n	8010ce6 <xQueueReceive+0x122>
 8010cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cec:	b25b      	sxtb	r3, r3
 8010cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cf2:	d103      	bne.n	8010cfc <xQueueReceive+0x138>
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010cfc:	f001 feea 	bl	8012ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d00:	1d3a      	adds	r2, r7, #4
 8010d02:	f107 0310 	add.w	r3, r7, #16
 8010d06:	4611      	mov	r1, r2
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 ffdd 	bl	8011cc8 <xTaskCheckForTimeOut>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d123      	bne.n	8010d5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d16:	f000 f9d3 	bl	80110c0 <prvIsQueueEmpty>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d017      	beq.n	8010d50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d22:	3324      	adds	r3, #36	; 0x24
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	4611      	mov	r1, r2
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f000 fe65 	bl	80119f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d30:	f000 f974 	bl	801101c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010d34:	f000 fc9a 	bl	801166c <xTaskResumeAll>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d189      	bne.n	8010c52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010d3e:	4b10      	ldr	r3, [pc, #64]	; (8010d80 <xQueueReceive+0x1bc>)
 8010d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d44:	601a      	str	r2, [r3, #0]
 8010d46:	f3bf 8f4f 	dsb	sy
 8010d4a:	f3bf 8f6f 	isb	sy
 8010d4e:	e780      	b.n	8010c52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d52:	f000 f963 	bl	801101c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d56:	f000 fc89 	bl	801166c <xTaskResumeAll>
 8010d5a:	e77a      	b.n	8010c52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d5e:	f000 f95d 	bl	801101c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d62:	f000 fc83 	bl	801166c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d68:	f000 f9aa 	bl	80110c0 <prvIsQueueEmpty>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f43f af6f 	beq.w	8010c52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010d74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3730      	adds	r7, #48	; 0x30
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	e000ed04 	.word	0xe000ed04

08010d84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b08e      	sub	sp, #56	; 0x38
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d10a      	bne.n	8010db0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9e:	f383 8811 	msr	BASEPRI, r3
 8010da2:	f3bf 8f6f 	isb	sy
 8010da6:	f3bf 8f4f 	dsb	sy
 8010daa:	623b      	str	r3, [r7, #32]
}
 8010dac:	bf00      	nop
 8010dae:	e7fe      	b.n	8010dae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d103      	bne.n	8010dbe <xQueueReceiveFromISR+0x3a>
 8010db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d101      	bne.n	8010dc2 <xQueueReceiveFromISR+0x3e>
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e000      	b.n	8010dc4 <xQueueReceiveFromISR+0x40>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d10a      	bne.n	8010dde <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dcc:	f383 8811 	msr	BASEPRI, r3
 8010dd0:	f3bf 8f6f 	isb	sy
 8010dd4:	f3bf 8f4f 	dsb	sy
 8010dd8:	61fb      	str	r3, [r7, #28]
}
 8010dda:	bf00      	nop
 8010ddc:	e7fe      	b.n	8010ddc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dde:	f001 ff2b 	bl	8012c38 <vPortValidateInterruptPriority>
	__asm volatile
 8010de2:	f3ef 8211 	mrs	r2, BASEPRI
 8010de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dea:	f383 8811 	msr	BASEPRI, r3
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f3bf 8f4f 	dsb	sy
 8010df6:	61ba      	str	r2, [r7, #24]
 8010df8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010dfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d02f      	beq.n	8010e6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e14:	68b9      	ldr	r1, [r7, #8]
 8010e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e18:	f000 f8da 	bl	8010fd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1e:	1e5a      	subs	r2, r3, #1
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e2c:	d112      	bne.n	8010e54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e30:	691b      	ldr	r3, [r3, #16]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d016      	beq.n	8010e64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e38:	3310      	adds	r3, #16
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 fe68 	bl	8011b10 <xTaskRemoveFromEventList>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d00e      	beq.n	8010e64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00b      	beq.n	8010e64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2201      	movs	r2, #1
 8010e50:	601a      	str	r2, [r3, #0]
 8010e52:	e007      	b.n	8010e64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e58:	3301      	adds	r3, #1
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	b25a      	sxtb	r2, r3
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010e64:	2301      	movs	r3, #1
 8010e66:	637b      	str	r3, [r7, #52]	; 0x34
 8010e68:	e001      	b.n	8010e6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	f383 8811 	msr	BASEPRI, r3
}
 8010e78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3738      	adds	r7, #56	; 0x38
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10a      	bne.n	8010ea8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e96:	f383 8811 	msr	BASEPRI, r3
 8010e9a:	f3bf 8f6f 	isb	sy
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	60bb      	str	r3, [r7, #8]
}
 8010ea4:	bf00      	nop
 8010ea6:	e7fe      	b.n	8010ea6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010ea8:	f001 fde4 	bl	8012a74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010eb2:	f001 fe0f 	bl	8012ad4 <vPortExitCritical>

	return uxReturn;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3710      	adds	r7, #16
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b087      	sub	sp, #28
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d10a      	bne.n	8010ee8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	60fb      	str	r3, [r7, #12]
}
 8010ee4:	bf00      	nop
 8010ee6:	e7fe      	b.n	8010ee6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010eee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	371c      	adds	r7, #28
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b086      	sub	sp, #24
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d10d      	bne.n	8010f36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d14d      	bne.n	8010fbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	689b      	ldr	r3, [r3, #8]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f001 f830 	bl	8011f8c <xTaskPriorityDisinherit>
 8010f2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2200      	movs	r2, #0
 8010f32:	609a      	str	r2, [r3, #8]
 8010f34:	e043      	b.n	8010fbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d119      	bne.n	8010f70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6858      	ldr	r0, [r3, #4]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f44:	461a      	mov	r2, r3
 8010f46:	68b9      	ldr	r1, [r7, #8]
 8010f48:	f002 f8da 	bl	8013100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f54:	441a      	add	r2, r3
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	685a      	ldr	r2, [r3, #4]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d32b      	bcc.n	8010fbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	605a      	str	r2, [r3, #4]
 8010f6e:	e026      	b.n	8010fbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	68d8      	ldr	r0, [r3, #12]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f78:	461a      	mov	r2, r3
 8010f7a:	68b9      	ldr	r1, [r7, #8]
 8010f7c:	f002 f8c0 	bl	8013100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	68da      	ldr	r2, [r3, #12]
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f88:	425b      	negs	r3, r3
 8010f8a:	441a      	add	r2, r3
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	68da      	ldr	r2, [r3, #12]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d207      	bcs.n	8010fac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	689a      	ldr	r2, [r3, #8]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa4:	425b      	negs	r3, r3
 8010fa6:	441a      	add	r2, r3
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b02      	cmp	r3, #2
 8010fb0:	d105      	bne.n	8010fbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d002      	beq.n	8010fbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	1c5a      	adds	r2, r3, #1
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010fc6:	697b      	ldr	r3, [r7, #20]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3718      	adds	r7, #24
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d018      	beq.n	8011014 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	68da      	ldr	r2, [r3, #12]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fea:	441a      	add	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	68da      	ldr	r2, [r3, #12]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	689b      	ldr	r3, [r3, #8]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d303      	bcc.n	8011004 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68d9      	ldr	r1, [r3, #12]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100c:	461a      	mov	r2, r3
 801100e:	6838      	ldr	r0, [r7, #0]
 8011010:	f002 f876 	bl	8013100 <memcpy>
	}
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011024:	f001 fd26 	bl	8012a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801102e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011030:	e011      	b.n	8011056 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011036:	2b00      	cmp	r3, #0
 8011038:	d012      	beq.n	8011060 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	3324      	adds	r3, #36	; 0x24
 801103e:	4618      	mov	r0, r3
 8011040:	f000 fd66 	bl	8011b10 <xTaskRemoveFromEventList>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d001      	beq.n	801104e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801104a:	f000 fe9f 	bl	8011d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801104e:	7bfb      	ldrb	r3, [r7, #15]
 8011050:	3b01      	subs	r3, #1
 8011052:	b2db      	uxtb	r3, r3
 8011054:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801105a:	2b00      	cmp	r3, #0
 801105c:	dce9      	bgt.n	8011032 <prvUnlockQueue+0x16>
 801105e:	e000      	b.n	8011062 <prvUnlockQueue+0x46>
					break;
 8011060:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	22ff      	movs	r2, #255	; 0xff
 8011066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801106a:	f001 fd33 	bl	8012ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801106e:	f001 fd01 	bl	8012a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011078:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801107a:	e011      	b.n	80110a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	691b      	ldr	r3, [r3, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d012      	beq.n	80110aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3310      	adds	r3, #16
 8011088:	4618      	mov	r0, r3
 801108a:	f000 fd41 	bl	8011b10 <xTaskRemoveFromEventList>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d001      	beq.n	8011098 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011094:	f000 fe7a 	bl	8011d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011098:	7bbb      	ldrb	r3, [r7, #14]
 801109a:	3b01      	subs	r3, #1
 801109c:	b2db      	uxtb	r3, r3
 801109e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80110a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	dce9      	bgt.n	801107c <prvUnlockQueue+0x60>
 80110a8:	e000      	b.n	80110ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80110aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	22ff      	movs	r2, #255	; 0xff
 80110b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80110b4:	f001 fd0e 	bl	8012ad4 <vPortExitCritical>
}
 80110b8:	bf00      	nop
 80110ba:	3710      	adds	r7, #16
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80110c8:	f001 fcd4 	bl	8012a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80110d4:	2301      	movs	r3, #1
 80110d6:	60fb      	str	r3, [r7, #12]
 80110d8:	e001      	b.n	80110de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80110da:	2300      	movs	r3, #0
 80110dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80110de:	f001 fcf9 	bl	8012ad4 <vPortExitCritical>

	return xReturn;
 80110e2:	68fb      	ldr	r3, [r7, #12]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80110f4:	f001 fcbe 	bl	8012a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011100:	429a      	cmp	r2, r3
 8011102:	d102      	bne.n	801110a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011104:	2301      	movs	r3, #1
 8011106:	60fb      	str	r3, [r7, #12]
 8011108:	e001      	b.n	801110e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801110a:	2300      	movs	r3, #0
 801110c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801110e:	f001 fce1 	bl	8012ad4 <vPortExitCritical>

	return xReturn;
 8011112:	68fb      	ldr	r3, [r7, #12]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011126:	2300      	movs	r3, #0
 8011128:	60fb      	str	r3, [r7, #12]
 801112a:	e014      	b.n	8011156 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801112c:	4a0f      	ldr	r2, [pc, #60]	; (801116c <vQueueAddToRegistry+0x50>)
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d10b      	bne.n	8011150 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011138:	490c      	ldr	r1, [pc, #48]	; (801116c <vQueueAddToRegistry+0x50>)
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011142:	4a0a      	ldr	r2, [pc, #40]	; (801116c <vQueueAddToRegistry+0x50>)
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	00db      	lsls	r3, r3, #3
 8011148:	4413      	add	r3, r2
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801114e:	e006      	b.n	801115e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	3301      	adds	r3, #1
 8011154:	60fb      	str	r3, [r7, #12]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b07      	cmp	r3, #7
 801115a:	d9e7      	bls.n	801112c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801115c:	bf00      	nop
 801115e:	bf00      	nop
 8011160:	3714      	adds	r7, #20
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop
 801116c:	24000cf8 	.word	0x24000cf8

08011170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011170:	b580      	push	{r7, lr}
 8011172:	b086      	sub	sp, #24
 8011174:	af00      	add	r7, sp, #0
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011180:	f001 fc78 	bl	8012a74 <vPortEnterCritical>
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801118a:	b25b      	sxtb	r3, r3
 801118c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011190:	d103      	bne.n	801119a <vQueueWaitForMessageRestricted+0x2a>
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	2200      	movs	r2, #0
 8011196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111a0:	b25b      	sxtb	r3, r3
 80111a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111a6:	d103      	bne.n	80111b0 <vQueueWaitForMessageRestricted+0x40>
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111b0:	f001 fc90 	bl	8012ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d106      	bne.n	80111ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	3324      	adds	r3, #36	; 0x24
 80111c0:	687a      	ldr	r2, [r7, #4]
 80111c2:	68b9      	ldr	r1, [r7, #8]
 80111c4:	4618      	mov	r0, r3
 80111c6:	f000 fc77 	bl	8011ab8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80111ca:	6978      	ldr	r0, [r7, #20]
 80111cc:	f7ff ff26 	bl	801101c <prvUnlockQueue>
	}
 80111d0:	bf00      	nop
 80111d2:	3718      	adds	r7, #24
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08e      	sub	sp, #56	; 0x38
 80111dc:	af04      	add	r7, sp, #16
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
 80111e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80111e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10a      	bne.n	8011202 <xTaskCreateStatic+0x2a>
	__asm volatile
 80111ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f0:	f383 8811 	msr	BASEPRI, r3
 80111f4:	f3bf 8f6f 	isb	sy
 80111f8:	f3bf 8f4f 	dsb	sy
 80111fc:	623b      	str	r3, [r7, #32]
}
 80111fe:	bf00      	nop
 8011200:	e7fe      	b.n	8011200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011204:	2b00      	cmp	r3, #0
 8011206:	d10a      	bne.n	801121e <xTaskCreateStatic+0x46>
	__asm volatile
 8011208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120c:	f383 8811 	msr	BASEPRI, r3
 8011210:	f3bf 8f6f 	isb	sy
 8011214:	f3bf 8f4f 	dsb	sy
 8011218:	61fb      	str	r3, [r7, #28]
}
 801121a:	bf00      	nop
 801121c:	e7fe      	b.n	801121c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801121e:	235c      	movs	r3, #92	; 0x5c
 8011220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	2b5c      	cmp	r3, #92	; 0x5c
 8011226:	d00a      	beq.n	801123e <xTaskCreateStatic+0x66>
	__asm volatile
 8011228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122c:	f383 8811 	msr	BASEPRI, r3
 8011230:	f3bf 8f6f 	isb	sy
 8011234:	f3bf 8f4f 	dsb	sy
 8011238:	61bb      	str	r3, [r7, #24]
}
 801123a:	bf00      	nop
 801123c:	e7fe      	b.n	801123c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801123e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011242:	2b00      	cmp	r3, #0
 8011244:	d01e      	beq.n	8011284 <xTaskCreateStatic+0xac>
 8011246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011248:	2b00      	cmp	r3, #0
 801124a:	d01b      	beq.n	8011284 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011254:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	2202      	movs	r2, #2
 801125a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801125e:	2300      	movs	r3, #0
 8011260:	9303      	str	r3, [sp, #12]
 8011262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011264:	9302      	str	r3, [sp, #8]
 8011266:	f107 0314 	add.w	r3, r7, #20
 801126a:	9301      	str	r3, [sp, #4]
 801126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	68b9      	ldr	r1, [r7, #8]
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f000 f850 	bl	801131c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801127c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801127e:	f000 f8dd 	bl	801143c <prvAddNewTaskToReadyList>
 8011282:	e001      	b.n	8011288 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011284:	2300      	movs	r3, #0
 8011286:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011288:	697b      	ldr	r3, [r7, #20]
	}
 801128a:	4618      	mov	r0, r3
 801128c:	3728      	adds	r7, #40	; 0x28
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}

08011292 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011292:	b580      	push	{r7, lr}
 8011294:	b08c      	sub	sp, #48	; 0x30
 8011296:	af04      	add	r7, sp, #16
 8011298:	60f8      	str	r0, [r7, #12]
 801129a:	60b9      	str	r1, [r7, #8]
 801129c:	603b      	str	r3, [r7, #0]
 801129e:	4613      	mov	r3, r2
 80112a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80112a2:	88fb      	ldrh	r3, [r7, #6]
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	4618      	mov	r0, r3
 80112a8:	f001 fd06 	bl	8012cb8 <pvPortMalloc>
 80112ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d00e      	beq.n	80112d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80112b4:	205c      	movs	r0, #92	; 0x5c
 80112b6:	f001 fcff 	bl	8012cb8 <pvPortMalloc>
 80112ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d003      	beq.n	80112ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	697a      	ldr	r2, [r7, #20]
 80112c6:	631a      	str	r2, [r3, #48]	; 0x30
 80112c8:	e005      	b.n	80112d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80112ca:	6978      	ldr	r0, [r7, #20]
 80112cc:	f001 fdc0 	bl	8012e50 <vPortFree>
 80112d0:	e001      	b.n	80112d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80112d2:	2300      	movs	r3, #0
 80112d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d017      	beq.n	801130c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	2200      	movs	r2, #0
 80112e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80112e4:	88fa      	ldrh	r2, [r7, #6]
 80112e6:	2300      	movs	r3, #0
 80112e8:	9303      	str	r3, [sp, #12]
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	9302      	str	r3, [sp, #8]
 80112ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f0:	9301      	str	r3, [sp, #4]
 80112f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	68b9      	ldr	r1, [r7, #8]
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f000 f80e 	bl	801131c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011300:	69f8      	ldr	r0, [r7, #28]
 8011302:	f000 f89b 	bl	801143c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011306:	2301      	movs	r3, #1
 8011308:	61bb      	str	r3, [r7, #24]
 801130a:	e002      	b.n	8011312 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801130c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011310:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011312:	69bb      	ldr	r3, [r7, #24]
	}
 8011314:	4618      	mov	r0, r3
 8011316:	3720      	adds	r7, #32
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b088      	sub	sp, #32
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
 8011328:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	461a      	mov	r2, r3
 8011334:	21a5      	movs	r1, #165	; 0xa5
 8011336:	f001 fef1 	bl	801311c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801133e:	6879      	ldr	r1, [r7, #4]
 8011340:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011344:	440b      	add	r3, r1
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4413      	add	r3, r2
 801134a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	f023 0307 	bic.w	r3, r3, #7
 8011352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	f003 0307 	and.w	r3, r3, #7
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00a      	beq.n	8011374 <prvInitialiseNewTask+0x58>
	__asm volatile
 801135e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011362:	f383 8811 	msr	BASEPRI, r3
 8011366:	f3bf 8f6f 	isb	sy
 801136a:	f3bf 8f4f 	dsb	sy
 801136e:	617b      	str	r3, [r7, #20]
}
 8011370:	bf00      	nop
 8011372:	e7fe      	b.n	8011372 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d01f      	beq.n	80113ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801137a:	2300      	movs	r3, #0
 801137c:	61fb      	str	r3, [r7, #28]
 801137e:	e012      	b.n	80113a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	4413      	add	r3, r2
 8011386:	7819      	ldrb	r1, [r3, #0]
 8011388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801138a:	69fb      	ldr	r3, [r7, #28]
 801138c:	4413      	add	r3, r2
 801138e:	3334      	adds	r3, #52	; 0x34
 8011390:	460a      	mov	r2, r1
 8011392:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	4413      	add	r3, r2
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d006      	beq.n	80113ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	3301      	adds	r3, #1
 80113a4:	61fb      	str	r3, [r7, #28]
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	2b0f      	cmp	r3, #15
 80113aa:	d9e9      	bls.n	8011380 <prvInitialiseNewTask+0x64>
 80113ac:	e000      	b.n	80113b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80113ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80113b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b2:	2200      	movs	r2, #0
 80113b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80113b8:	e003      	b.n	80113c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80113ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80113c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c4:	2b37      	cmp	r3, #55	; 0x37
 80113c6:	d901      	bls.n	80113cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80113c8:	2337      	movs	r3, #55	; 0x37
 80113ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80113cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80113d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80113d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113da:	2200      	movs	r2, #0
 80113dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80113de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e0:	3304      	adds	r3, #4
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7ff f882 	bl	80104ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80113e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ea:	3318      	adds	r3, #24
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff f87d 	bl	80104ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80113f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80113fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011400:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011406:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140a:	2200      	movs	r2, #0
 801140c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	2200      	movs	r2, #0
 8011412:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011416:	683a      	ldr	r2, [r7, #0]
 8011418:	68f9      	ldr	r1, [r7, #12]
 801141a:	69b8      	ldr	r0, [r7, #24]
 801141c:	f001 f9fe 	bl	801281c <pxPortInitialiseStack>
 8011420:	4602      	mov	r2, r0
 8011422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011424:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011428:	2b00      	cmp	r3, #0
 801142a:	d002      	beq.n	8011432 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011432:	bf00      	nop
 8011434:	3720      	adds	r7, #32
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
	...

0801143c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011444:	f001 fb16 	bl	8012a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011448:	4b2d      	ldr	r3, [pc, #180]	; (8011500 <prvAddNewTaskToReadyList+0xc4>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	3301      	adds	r3, #1
 801144e:	4a2c      	ldr	r2, [pc, #176]	; (8011500 <prvAddNewTaskToReadyList+0xc4>)
 8011450:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011452:	4b2c      	ldr	r3, [pc, #176]	; (8011504 <prvAddNewTaskToReadyList+0xc8>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d109      	bne.n	801146e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801145a:	4a2a      	ldr	r2, [pc, #168]	; (8011504 <prvAddNewTaskToReadyList+0xc8>)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011460:	4b27      	ldr	r3, [pc, #156]	; (8011500 <prvAddNewTaskToReadyList+0xc4>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d110      	bne.n	801148a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011468:	f000 fcb4 	bl	8011dd4 <prvInitialiseTaskLists>
 801146c:	e00d      	b.n	801148a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801146e:	4b26      	ldr	r3, [pc, #152]	; (8011508 <prvAddNewTaskToReadyList+0xcc>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d109      	bne.n	801148a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011476:	4b23      	ldr	r3, [pc, #140]	; (8011504 <prvAddNewTaskToReadyList+0xc8>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011480:	429a      	cmp	r2, r3
 8011482:	d802      	bhi.n	801148a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011484:	4a1f      	ldr	r2, [pc, #124]	; (8011504 <prvAddNewTaskToReadyList+0xc8>)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801148a:	4b20      	ldr	r3, [pc, #128]	; (801150c <prvAddNewTaskToReadyList+0xd0>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	3301      	adds	r3, #1
 8011490:	4a1e      	ldr	r2, [pc, #120]	; (801150c <prvAddNewTaskToReadyList+0xd0>)
 8011492:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011494:	4b1d      	ldr	r3, [pc, #116]	; (801150c <prvAddNewTaskToReadyList+0xd0>)
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a0:	4b1b      	ldr	r3, [pc, #108]	; (8011510 <prvAddNewTaskToReadyList+0xd4>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d903      	bls.n	80114b0 <prvAddNewTaskToReadyList+0x74>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ac:	4a18      	ldr	r2, [pc, #96]	; (8011510 <prvAddNewTaskToReadyList+0xd4>)
 80114ae:	6013      	str	r3, [r2, #0]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114b4:	4613      	mov	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	4413      	add	r3, r2
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	4a15      	ldr	r2, [pc, #84]	; (8011514 <prvAddNewTaskToReadyList+0xd8>)
 80114be:	441a      	add	r2, r3
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	3304      	adds	r3, #4
 80114c4:	4619      	mov	r1, r3
 80114c6:	4610      	mov	r0, r2
 80114c8:	f7ff f81d 	bl	8010506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80114cc:	f001 fb02 	bl	8012ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80114d0:	4b0d      	ldr	r3, [pc, #52]	; (8011508 <prvAddNewTaskToReadyList+0xcc>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00e      	beq.n	80114f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80114d8:	4b0a      	ldr	r3, [pc, #40]	; (8011504 <prvAddNewTaskToReadyList+0xc8>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d207      	bcs.n	80114f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80114e6:	4b0c      	ldr	r3, [pc, #48]	; (8011518 <prvAddNewTaskToReadyList+0xdc>)
 80114e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114ec:	601a      	str	r2, [r3, #0]
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114f6:	bf00      	nop
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	2400120c 	.word	0x2400120c
 8011504:	24000d38 	.word	0x24000d38
 8011508:	24001218 	.word	0x24001218
 801150c:	24001228 	.word	0x24001228
 8011510:	24001214 	.word	0x24001214
 8011514:	24000d3c 	.word	0x24000d3c
 8011518:	e000ed04 	.word	0xe000ed04

0801151c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011524:	2300      	movs	r3, #0
 8011526:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d017      	beq.n	801155e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801152e:	4b13      	ldr	r3, [pc, #76]	; (801157c <vTaskDelay+0x60>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d00a      	beq.n	801154c <vTaskDelay+0x30>
	__asm volatile
 8011536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153a:	f383 8811 	msr	BASEPRI, r3
 801153e:	f3bf 8f6f 	isb	sy
 8011542:	f3bf 8f4f 	dsb	sy
 8011546:	60bb      	str	r3, [r7, #8]
}
 8011548:	bf00      	nop
 801154a:	e7fe      	b.n	801154a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801154c:	f000 f880 	bl	8011650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011550:	2100      	movs	r1, #0
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 fda0 	bl	8012098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011558:	f000 f888 	bl	801166c <xTaskResumeAll>
 801155c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d107      	bne.n	8011574 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011564:	4b06      	ldr	r3, [pc, #24]	; (8011580 <vTaskDelay+0x64>)
 8011566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801156a:	601a      	str	r2, [r3, #0]
 801156c:	f3bf 8f4f 	dsb	sy
 8011570:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011574:	bf00      	nop
 8011576:	3710      	adds	r7, #16
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	24001234 	.word	0x24001234
 8011580:	e000ed04 	.word	0xe000ed04

08011584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b08a      	sub	sp, #40	; 0x28
 8011588:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801158a:	2300      	movs	r3, #0
 801158c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801158e:	2300      	movs	r3, #0
 8011590:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011592:	463a      	mov	r2, r7
 8011594:	1d39      	adds	r1, r7, #4
 8011596:	f107 0308 	add.w	r3, r7, #8
 801159a:	4618      	mov	r0, r3
 801159c:	f7fe fd64 	bl	8010068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	9202      	str	r2, [sp, #8]
 80115a8:	9301      	str	r3, [sp, #4]
 80115aa:	2300      	movs	r3, #0
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	2300      	movs	r3, #0
 80115b0:	460a      	mov	r2, r1
 80115b2:	4921      	ldr	r1, [pc, #132]	; (8011638 <vTaskStartScheduler+0xb4>)
 80115b4:	4821      	ldr	r0, [pc, #132]	; (801163c <vTaskStartScheduler+0xb8>)
 80115b6:	f7ff fe0f 	bl	80111d8 <xTaskCreateStatic>
 80115ba:	4603      	mov	r3, r0
 80115bc:	4a20      	ldr	r2, [pc, #128]	; (8011640 <vTaskStartScheduler+0xbc>)
 80115be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80115c0:	4b1f      	ldr	r3, [pc, #124]	; (8011640 <vTaskStartScheduler+0xbc>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80115c8:	2301      	movs	r3, #1
 80115ca:	617b      	str	r3, [r7, #20]
 80115cc:	e001      	b.n	80115d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80115ce:	2300      	movs	r3, #0
 80115d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d102      	bne.n	80115de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80115d8:	f000 fdb2 	bl	8012140 <xTimerCreateTimerTask>
 80115dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d116      	bne.n	8011612 <vTaskStartScheduler+0x8e>
	__asm volatile
 80115e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e8:	f383 8811 	msr	BASEPRI, r3
 80115ec:	f3bf 8f6f 	isb	sy
 80115f0:	f3bf 8f4f 	dsb	sy
 80115f4:	613b      	str	r3, [r7, #16]
}
 80115f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80115f8:	4b12      	ldr	r3, [pc, #72]	; (8011644 <vTaskStartScheduler+0xc0>)
 80115fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011600:	4b11      	ldr	r3, [pc, #68]	; (8011648 <vTaskStartScheduler+0xc4>)
 8011602:	2201      	movs	r2, #1
 8011604:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011606:	4b11      	ldr	r3, [pc, #68]	; (801164c <vTaskStartScheduler+0xc8>)
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801160c:	f001 f990 	bl	8012930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011610:	e00e      	b.n	8011630 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011618:	d10a      	bne.n	8011630 <vTaskStartScheduler+0xac>
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	60fb      	str	r3, [r7, #12]
}
 801162c:	bf00      	nop
 801162e:	e7fe      	b.n	801162e <vTaskStartScheduler+0xaa>
}
 8011630:	bf00      	nop
 8011632:	3718      	adds	r7, #24
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}
 8011638:	08014358 	.word	0x08014358
 801163c:	08011da5 	.word	0x08011da5
 8011640:	24001230 	.word	0x24001230
 8011644:	2400122c 	.word	0x2400122c
 8011648:	24001218 	.word	0x24001218
 801164c:	24001210 	.word	0x24001210

08011650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011650:	b480      	push	{r7}
 8011652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011654:	4b04      	ldr	r3, [pc, #16]	; (8011668 <vTaskSuspendAll+0x18>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	3301      	adds	r3, #1
 801165a:	4a03      	ldr	r2, [pc, #12]	; (8011668 <vTaskSuspendAll+0x18>)
 801165c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801165e:	bf00      	nop
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr
 8011668:	24001234 	.word	0x24001234

0801166c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011672:	2300      	movs	r3, #0
 8011674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011676:	2300      	movs	r3, #0
 8011678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801167a:	4b42      	ldr	r3, [pc, #264]	; (8011784 <xTaskResumeAll+0x118>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10a      	bne.n	8011698 <xTaskResumeAll+0x2c>
	__asm volatile
 8011682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011686:	f383 8811 	msr	BASEPRI, r3
 801168a:	f3bf 8f6f 	isb	sy
 801168e:	f3bf 8f4f 	dsb	sy
 8011692:	603b      	str	r3, [r7, #0]
}
 8011694:	bf00      	nop
 8011696:	e7fe      	b.n	8011696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011698:	f001 f9ec 	bl	8012a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801169c:	4b39      	ldr	r3, [pc, #228]	; (8011784 <xTaskResumeAll+0x118>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	3b01      	subs	r3, #1
 80116a2:	4a38      	ldr	r2, [pc, #224]	; (8011784 <xTaskResumeAll+0x118>)
 80116a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116a6:	4b37      	ldr	r3, [pc, #220]	; (8011784 <xTaskResumeAll+0x118>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d162      	bne.n	8011774 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80116ae:	4b36      	ldr	r3, [pc, #216]	; (8011788 <xTaskResumeAll+0x11c>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d05e      	beq.n	8011774 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116b6:	e02f      	b.n	8011718 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116b8:	4b34      	ldr	r3, [pc, #208]	; (801178c <xTaskResumeAll+0x120>)
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	3318      	adds	r3, #24
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fe ff7b 	bl	80105c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	3304      	adds	r3, #4
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fe ff76 	bl	80105c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d8:	4b2d      	ldr	r3, [pc, #180]	; (8011790 <xTaskResumeAll+0x124>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d903      	bls.n	80116e8 <xTaskResumeAll+0x7c>
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e4:	4a2a      	ldr	r2, [pc, #168]	; (8011790 <xTaskResumeAll+0x124>)
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ec:	4613      	mov	r3, r2
 80116ee:	009b      	lsls	r3, r3, #2
 80116f0:	4413      	add	r3, r2
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4a27      	ldr	r2, [pc, #156]	; (8011794 <xTaskResumeAll+0x128>)
 80116f6:	441a      	add	r2, r3
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	3304      	adds	r3, #4
 80116fc:	4619      	mov	r1, r3
 80116fe:	4610      	mov	r0, r2
 8011700:	f7fe ff01 	bl	8010506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011708:	4b23      	ldr	r3, [pc, #140]	; (8011798 <xTaskResumeAll+0x12c>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170e:	429a      	cmp	r2, r3
 8011710:	d302      	bcc.n	8011718 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011712:	4b22      	ldr	r3, [pc, #136]	; (801179c <xTaskResumeAll+0x130>)
 8011714:	2201      	movs	r2, #1
 8011716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011718:	4b1c      	ldr	r3, [pc, #112]	; (801178c <xTaskResumeAll+0x120>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d1cb      	bne.n	80116b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d001      	beq.n	801172a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011726:	f000 fbf3 	bl	8011f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801172a:	4b1d      	ldr	r3, [pc, #116]	; (80117a0 <xTaskResumeAll+0x134>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d010      	beq.n	8011758 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011736:	f000 f847 	bl	80117c8 <xTaskIncrementTick>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011740:	4b16      	ldr	r3, [pc, #88]	; (801179c <xTaskResumeAll+0x130>)
 8011742:	2201      	movs	r2, #1
 8011744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	3b01      	subs	r3, #1
 801174a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d1f1      	bne.n	8011736 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011752:	4b13      	ldr	r3, [pc, #76]	; (80117a0 <xTaskResumeAll+0x134>)
 8011754:	2200      	movs	r2, #0
 8011756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011758:	4b10      	ldr	r3, [pc, #64]	; (801179c <xTaskResumeAll+0x130>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d009      	beq.n	8011774 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011760:	2301      	movs	r3, #1
 8011762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011764:	4b0f      	ldr	r3, [pc, #60]	; (80117a4 <xTaskResumeAll+0x138>)
 8011766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801176a:	601a      	str	r2, [r3, #0]
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011774:	f001 f9ae 	bl	8012ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8011778:	68bb      	ldr	r3, [r7, #8]
}
 801177a:	4618      	mov	r0, r3
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	24001234 	.word	0x24001234
 8011788:	2400120c 	.word	0x2400120c
 801178c:	240011cc 	.word	0x240011cc
 8011790:	24001214 	.word	0x24001214
 8011794:	24000d3c 	.word	0x24000d3c
 8011798:	24000d38 	.word	0x24000d38
 801179c:	24001220 	.word	0x24001220
 80117a0:	2400121c 	.word	0x2400121c
 80117a4:	e000ed04 	.word	0xe000ed04

080117a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80117ae:	4b05      	ldr	r3, [pc, #20]	; (80117c4 <xTaskGetTickCount+0x1c>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80117b4:	687b      	ldr	r3, [r7, #4]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	370c      	adds	r7, #12
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	24001210 	.word	0x24001210

080117c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b086      	sub	sp, #24
 80117cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80117ce:	2300      	movs	r3, #0
 80117d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117d2:	4b4f      	ldr	r3, [pc, #316]	; (8011910 <xTaskIncrementTick+0x148>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f040 808f 	bne.w	80118fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80117dc:	4b4d      	ldr	r3, [pc, #308]	; (8011914 <xTaskIncrementTick+0x14c>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	3301      	adds	r3, #1
 80117e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80117e4:	4a4b      	ldr	r2, [pc, #300]	; (8011914 <xTaskIncrementTick+0x14c>)
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d120      	bne.n	8011832 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80117f0:	4b49      	ldr	r3, [pc, #292]	; (8011918 <xTaskIncrementTick+0x150>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00a      	beq.n	8011810 <xTaskIncrementTick+0x48>
	__asm volatile
 80117fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fe:	f383 8811 	msr	BASEPRI, r3
 8011802:	f3bf 8f6f 	isb	sy
 8011806:	f3bf 8f4f 	dsb	sy
 801180a:	603b      	str	r3, [r7, #0]
}
 801180c:	bf00      	nop
 801180e:	e7fe      	b.n	801180e <xTaskIncrementTick+0x46>
 8011810:	4b41      	ldr	r3, [pc, #260]	; (8011918 <xTaskIncrementTick+0x150>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	60fb      	str	r3, [r7, #12]
 8011816:	4b41      	ldr	r3, [pc, #260]	; (801191c <xTaskIncrementTick+0x154>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	4a3f      	ldr	r2, [pc, #252]	; (8011918 <xTaskIncrementTick+0x150>)
 801181c:	6013      	str	r3, [r2, #0]
 801181e:	4a3f      	ldr	r2, [pc, #252]	; (801191c <xTaskIncrementTick+0x154>)
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	6013      	str	r3, [r2, #0]
 8011824:	4b3e      	ldr	r3, [pc, #248]	; (8011920 <xTaskIncrementTick+0x158>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	3301      	adds	r3, #1
 801182a:	4a3d      	ldr	r2, [pc, #244]	; (8011920 <xTaskIncrementTick+0x158>)
 801182c:	6013      	str	r3, [r2, #0]
 801182e:	f000 fb6f 	bl	8011f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011832:	4b3c      	ldr	r3, [pc, #240]	; (8011924 <xTaskIncrementTick+0x15c>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	693a      	ldr	r2, [r7, #16]
 8011838:	429a      	cmp	r2, r3
 801183a:	d349      	bcc.n	80118d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801183c:	4b36      	ldr	r3, [pc, #216]	; (8011918 <xTaskIncrementTick+0x150>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d104      	bne.n	8011850 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011846:	4b37      	ldr	r3, [pc, #220]	; (8011924 <xTaskIncrementTick+0x15c>)
 8011848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801184c:	601a      	str	r2, [r3, #0]
					break;
 801184e:	e03f      	b.n	80118d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011850:	4b31      	ldr	r3, [pc, #196]	; (8011918 <xTaskIncrementTick+0x150>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	68db      	ldr	r3, [r3, #12]
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011860:	693a      	ldr	r2, [r7, #16]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	429a      	cmp	r2, r3
 8011866:	d203      	bcs.n	8011870 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011868:	4a2e      	ldr	r2, [pc, #184]	; (8011924 <xTaskIncrementTick+0x15c>)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801186e:	e02f      	b.n	80118d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	3304      	adds	r3, #4
 8011874:	4618      	mov	r0, r3
 8011876:	f7fe fea3 	bl	80105c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801187e:	2b00      	cmp	r3, #0
 8011880:	d004      	beq.n	801188c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	3318      	adds	r3, #24
 8011886:	4618      	mov	r0, r3
 8011888:	f7fe fe9a 	bl	80105c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011890:	4b25      	ldr	r3, [pc, #148]	; (8011928 <xTaskIncrementTick+0x160>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	429a      	cmp	r2, r3
 8011896:	d903      	bls.n	80118a0 <xTaskIncrementTick+0xd8>
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801189c:	4a22      	ldr	r2, [pc, #136]	; (8011928 <xTaskIncrementTick+0x160>)
 801189e:	6013      	str	r3, [r2, #0]
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a4:	4613      	mov	r3, r2
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4413      	add	r3, r2
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	4a1f      	ldr	r2, [pc, #124]	; (801192c <xTaskIncrementTick+0x164>)
 80118ae:	441a      	add	r2, r3
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	3304      	adds	r3, #4
 80118b4:	4619      	mov	r1, r3
 80118b6:	4610      	mov	r0, r2
 80118b8:	f7fe fe25 	bl	8010506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c0:	4b1b      	ldr	r3, [pc, #108]	; (8011930 <xTaskIncrementTick+0x168>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d3b8      	bcc.n	801183c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80118ca:	2301      	movs	r3, #1
 80118cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118ce:	e7b5      	b.n	801183c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80118d0:	4b17      	ldr	r3, [pc, #92]	; (8011930 <xTaskIncrementTick+0x168>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d6:	4915      	ldr	r1, [pc, #84]	; (801192c <xTaskIncrementTick+0x164>)
 80118d8:	4613      	mov	r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	4413      	add	r3, r2
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	440b      	add	r3, r1
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d901      	bls.n	80118ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80118e8:	2301      	movs	r3, #1
 80118ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80118ec:	4b11      	ldr	r3, [pc, #68]	; (8011934 <xTaskIncrementTick+0x16c>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d007      	beq.n	8011904 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80118f4:	2301      	movs	r3, #1
 80118f6:	617b      	str	r3, [r7, #20]
 80118f8:	e004      	b.n	8011904 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80118fa:	4b0f      	ldr	r3, [pc, #60]	; (8011938 <xTaskIncrementTick+0x170>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3301      	adds	r3, #1
 8011900:	4a0d      	ldr	r2, [pc, #52]	; (8011938 <xTaskIncrementTick+0x170>)
 8011902:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011904:	697b      	ldr	r3, [r7, #20]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3718      	adds	r7, #24
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	24001234 	.word	0x24001234
 8011914:	24001210 	.word	0x24001210
 8011918:	240011c4 	.word	0x240011c4
 801191c:	240011c8 	.word	0x240011c8
 8011920:	24001224 	.word	0x24001224
 8011924:	2400122c 	.word	0x2400122c
 8011928:	24001214 	.word	0x24001214
 801192c:	24000d3c 	.word	0x24000d3c
 8011930:	24000d38 	.word	0x24000d38
 8011934:	24001220 	.word	0x24001220
 8011938:	2400121c 	.word	0x2400121c

0801193c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011942:	4b28      	ldr	r3, [pc, #160]	; (80119e4 <vTaskSwitchContext+0xa8>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d003      	beq.n	8011952 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801194a:	4b27      	ldr	r3, [pc, #156]	; (80119e8 <vTaskSwitchContext+0xac>)
 801194c:	2201      	movs	r2, #1
 801194e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011950:	e041      	b.n	80119d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8011952:	4b25      	ldr	r3, [pc, #148]	; (80119e8 <vTaskSwitchContext+0xac>)
 8011954:	2200      	movs	r2, #0
 8011956:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011958:	4b24      	ldr	r3, [pc, #144]	; (80119ec <vTaskSwitchContext+0xb0>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	60fb      	str	r3, [r7, #12]
 801195e:	e010      	b.n	8011982 <vTaskSwitchContext+0x46>
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10a      	bne.n	801197c <vTaskSwitchContext+0x40>
	__asm volatile
 8011966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196a:	f383 8811 	msr	BASEPRI, r3
 801196e:	f3bf 8f6f 	isb	sy
 8011972:	f3bf 8f4f 	dsb	sy
 8011976:	607b      	str	r3, [r7, #4]
}
 8011978:	bf00      	nop
 801197a:	e7fe      	b.n	801197a <vTaskSwitchContext+0x3e>
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	3b01      	subs	r3, #1
 8011980:	60fb      	str	r3, [r7, #12]
 8011982:	491b      	ldr	r1, [pc, #108]	; (80119f0 <vTaskSwitchContext+0xb4>)
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	4613      	mov	r3, r2
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	4413      	add	r3, r2
 801198c:	009b      	lsls	r3, r3, #2
 801198e:	440b      	add	r3, r1
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0e4      	beq.n	8011960 <vTaskSwitchContext+0x24>
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	4613      	mov	r3, r2
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	4413      	add	r3, r2
 801199e:	009b      	lsls	r3, r3, #2
 80119a0:	4a13      	ldr	r2, [pc, #76]	; (80119f0 <vTaskSwitchContext+0xb4>)
 80119a2:	4413      	add	r3, r2
 80119a4:	60bb      	str	r3, [r7, #8]
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	685a      	ldr	r2, [r3, #4]
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	605a      	str	r2, [r3, #4]
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	685a      	ldr	r2, [r3, #4]
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	3308      	adds	r3, #8
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d104      	bne.n	80119c6 <vTaskSwitchContext+0x8a>
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	685a      	ldr	r2, [r3, #4]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	605a      	str	r2, [r3, #4]
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	4a09      	ldr	r2, [pc, #36]	; (80119f4 <vTaskSwitchContext+0xb8>)
 80119ce:	6013      	str	r3, [r2, #0]
 80119d0:	4a06      	ldr	r2, [pc, #24]	; (80119ec <vTaskSwitchContext+0xb0>)
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	6013      	str	r3, [r2, #0]
}
 80119d6:	bf00      	nop
 80119d8:	3714      	adds	r7, #20
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	24001234 	.word	0x24001234
 80119e8:	24001220 	.word	0x24001220
 80119ec:	24001214 	.word	0x24001214
 80119f0:	24000d3c 	.word	0x24000d3c
 80119f4:	24000d38 	.word	0x24000d38

080119f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10a      	bne.n	8011a1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0c:	f383 8811 	msr	BASEPRI, r3
 8011a10:	f3bf 8f6f 	isb	sy
 8011a14:	f3bf 8f4f 	dsb	sy
 8011a18:	60fb      	str	r3, [r7, #12]
}
 8011a1a:	bf00      	nop
 8011a1c:	e7fe      	b.n	8011a1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a1e:	4b07      	ldr	r3, [pc, #28]	; (8011a3c <vTaskPlaceOnEventList+0x44>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	3318      	adds	r3, #24
 8011a24:	4619      	mov	r1, r3
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7fe fd91 	bl	801054e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011a2c:	2101      	movs	r1, #1
 8011a2e:	6838      	ldr	r0, [r7, #0]
 8011a30:	f000 fb32 	bl	8012098 <prvAddCurrentTaskToDelayedList>
}
 8011a34:	bf00      	nop
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	24000d38 	.word	0x24000d38

08011a40 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b086      	sub	sp, #24
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d10a      	bne.n	8011a68 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8011a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a56:	f383 8811 	msr	BASEPRI, r3
 8011a5a:	f3bf 8f6f 	isb	sy
 8011a5e:	f3bf 8f4f 	dsb	sy
 8011a62:	617b      	str	r3, [r7, #20]
}
 8011a64:	bf00      	nop
 8011a66:	e7fe      	b.n	8011a66 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011a68:	4b11      	ldr	r3, [pc, #68]	; (8011ab0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d10a      	bne.n	8011a86 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a74:	f383 8811 	msr	BASEPRI, r3
 8011a78:	f3bf 8f6f 	isb	sy
 8011a7c:	f3bf 8f4f 	dsb	sy
 8011a80:	613b      	str	r3, [r7, #16]
}
 8011a82:	bf00      	nop
 8011a84:	e7fe      	b.n	8011a84 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011a86:	4b0b      	ldr	r3, [pc, #44]	; (8011ab4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	68ba      	ldr	r2, [r7, #8]
 8011a8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011a90:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a92:	4b08      	ldr	r3, [pc, #32]	; (8011ab4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3318      	adds	r3, #24
 8011a98:	4619      	mov	r1, r3
 8011a9a:	68f8      	ldr	r0, [r7, #12]
 8011a9c:	f7fe fd33 	bl	8010506 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 faf8 	bl	8012098 <prvAddCurrentTaskToDelayedList>
}
 8011aa8:	bf00      	nop
 8011aaa:	3718      	adds	r7, #24
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	24001234 	.word	0x24001234
 8011ab4:	24000d38 	.word	0x24000d38

08011ab8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b086      	sub	sp, #24
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10a      	bne.n	8011ae0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ace:	f383 8811 	msr	BASEPRI, r3
 8011ad2:	f3bf 8f6f 	isb	sy
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	617b      	str	r3, [r7, #20]
}
 8011adc:	bf00      	nop
 8011ade:	e7fe      	b.n	8011ade <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ae0:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <vTaskPlaceOnEventListRestricted+0x54>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	3318      	adds	r3, #24
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	68f8      	ldr	r0, [r7, #12]
 8011aea:	f7fe fd0c 	bl	8010506 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d002      	beq.n	8011afa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011af8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011afa:	6879      	ldr	r1, [r7, #4]
 8011afc:	68b8      	ldr	r0, [r7, #8]
 8011afe:	f000 facb 	bl	8012098 <prvAddCurrentTaskToDelayedList>
	}
 8011b02:	bf00      	nop
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	24000d38 	.word	0x24000d38

08011b10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d10a      	bne.n	8011b3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2a:	f383 8811 	msr	BASEPRI, r3
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	60fb      	str	r3, [r7, #12]
}
 8011b38:	bf00      	nop
 8011b3a:	e7fe      	b.n	8011b3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	3318      	adds	r3, #24
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7fe fd3d 	bl	80105c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b46:	4b1e      	ldr	r3, [pc, #120]	; (8011bc0 <xTaskRemoveFromEventList+0xb0>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d11d      	bne.n	8011b8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	3304      	adds	r3, #4
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fe fd34 	bl	80105c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b5c:	4b19      	ldr	r3, [pc, #100]	; (8011bc4 <xTaskRemoveFromEventList+0xb4>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d903      	bls.n	8011b6c <xTaskRemoveFromEventList+0x5c>
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b68:	4a16      	ldr	r2, [pc, #88]	; (8011bc4 <xTaskRemoveFromEventList+0xb4>)
 8011b6a:	6013      	str	r3, [r2, #0]
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b70:	4613      	mov	r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4413      	add	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4a13      	ldr	r2, [pc, #76]	; (8011bc8 <xTaskRemoveFromEventList+0xb8>)
 8011b7a:	441a      	add	r2, r3
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	3304      	adds	r3, #4
 8011b80:	4619      	mov	r1, r3
 8011b82:	4610      	mov	r0, r2
 8011b84:	f7fe fcbf 	bl	8010506 <vListInsertEnd>
 8011b88:	e005      	b.n	8011b96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	3318      	adds	r3, #24
 8011b8e:	4619      	mov	r1, r3
 8011b90:	480e      	ldr	r0, [pc, #56]	; (8011bcc <xTaskRemoveFromEventList+0xbc>)
 8011b92:	f7fe fcb8 	bl	8010506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b9a:	4b0d      	ldr	r3, [pc, #52]	; (8011bd0 <xTaskRemoveFromEventList+0xc0>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d905      	bls.n	8011bb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011ba8:	4b0a      	ldr	r3, [pc, #40]	; (8011bd4 <xTaskRemoveFromEventList+0xc4>)
 8011baa:	2201      	movs	r2, #1
 8011bac:	601a      	str	r2, [r3, #0]
 8011bae:	e001      	b.n	8011bb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011bb4:	697b      	ldr	r3, [r7, #20]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3718      	adds	r7, #24
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	24001234 	.word	0x24001234
 8011bc4:	24001214 	.word	0x24001214
 8011bc8:	24000d3c 	.word	0x24000d3c
 8011bcc:	240011cc 	.word	0x240011cc
 8011bd0:	24000d38 	.word	0x24000d38
 8011bd4:	24001220 	.word	0x24001220

08011bd8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b086      	sub	sp, #24
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011be2:	4b29      	ldr	r3, [pc, #164]	; (8011c88 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d10a      	bne.n	8011c00 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bee:	f383 8811 	msr	BASEPRI, r3
 8011bf2:	f3bf 8f6f 	isb	sy
 8011bf6:	f3bf 8f4f 	dsb	sy
 8011bfa:	613b      	str	r3, [r7, #16]
}
 8011bfc:	bf00      	nop
 8011bfe:	e7fe      	b.n	8011bfe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d10a      	bne.n	8011c2c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1a:	f383 8811 	msr	BASEPRI, r3
 8011c1e:	f3bf 8f6f 	isb	sy
 8011c22:	f3bf 8f4f 	dsb	sy
 8011c26:	60fb      	str	r3, [r7, #12]
}
 8011c28:	bf00      	nop
 8011c2a:	e7fe      	b.n	8011c2a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7fe fcc7 	bl	80105c0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	3304      	adds	r3, #4
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fcc2 	bl	80105c0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c40:	4b12      	ldr	r3, [pc, #72]	; (8011c8c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d903      	bls.n	8011c50 <vTaskRemoveFromUnorderedEventList+0x78>
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4c:	4a0f      	ldr	r2, [pc, #60]	; (8011c8c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011c4e:	6013      	str	r3, [r2, #0]
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c54:	4613      	mov	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4413      	add	r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4a0c      	ldr	r2, [pc, #48]	; (8011c90 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011c5e:	441a      	add	r2, r3
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4619      	mov	r1, r3
 8011c66:	4610      	mov	r0, r2
 8011c68:	f7fe fc4d 	bl	8010506 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c70:	4b08      	ldr	r3, [pc, #32]	; (8011c94 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d902      	bls.n	8011c80 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011c7a:	4b07      	ldr	r3, [pc, #28]	; (8011c98 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	601a      	str	r2, [r3, #0]
	}
}
 8011c80:	bf00      	nop
 8011c82:	3718      	adds	r7, #24
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	24001234 	.word	0x24001234
 8011c8c:	24001214 	.word	0x24001214
 8011c90:	24000d3c 	.word	0x24000d3c
 8011c94:	24000d38 	.word	0x24000d38
 8011c98:	24001220 	.word	0x24001220

08011c9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011ca4:	4b06      	ldr	r3, [pc, #24]	; (8011cc0 <vTaskInternalSetTimeOutState+0x24>)
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011cac:	4b05      	ldr	r3, [pc, #20]	; (8011cc4 <vTaskInternalSetTimeOutState+0x28>)
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	605a      	str	r2, [r3, #4]
}
 8011cb4:	bf00      	nop
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr
 8011cc0:	24001224 	.word	0x24001224
 8011cc4:	24001210 	.word	0x24001210

08011cc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b088      	sub	sp, #32
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d10a      	bne.n	8011cee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cdc:	f383 8811 	msr	BASEPRI, r3
 8011ce0:	f3bf 8f6f 	isb	sy
 8011ce4:	f3bf 8f4f 	dsb	sy
 8011ce8:	613b      	str	r3, [r7, #16]
}
 8011cea:	bf00      	nop
 8011cec:	e7fe      	b.n	8011cec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d10a      	bne.n	8011d0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf8:	f383 8811 	msr	BASEPRI, r3
 8011cfc:	f3bf 8f6f 	isb	sy
 8011d00:	f3bf 8f4f 	dsb	sy
 8011d04:	60fb      	str	r3, [r7, #12]
}
 8011d06:	bf00      	nop
 8011d08:	e7fe      	b.n	8011d08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011d0a:	f000 feb3 	bl	8012a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d0e:	4b1d      	ldr	r3, [pc, #116]	; (8011d84 <xTaskCheckForTimeOut+0xbc>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	69ba      	ldr	r2, [r7, #24]
 8011d1a:	1ad3      	subs	r3, r2, r3
 8011d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d26:	d102      	bne.n	8011d2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	61fb      	str	r3, [r7, #28]
 8011d2c:	e023      	b.n	8011d76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <xTaskCheckForTimeOut+0xc0>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d007      	beq.n	8011d4a <xTaskCheckForTimeOut+0x82>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	69ba      	ldr	r2, [r7, #24]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d302      	bcc.n	8011d4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011d44:	2301      	movs	r3, #1
 8011d46:	61fb      	str	r3, [r7, #28]
 8011d48:	e015      	b.n	8011d76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	697a      	ldr	r2, [r7, #20]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d20b      	bcs.n	8011d6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	1ad2      	subs	r2, r2, r3
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f7ff ff9b 	bl	8011c9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011d66:	2300      	movs	r3, #0
 8011d68:	61fb      	str	r3, [r7, #28]
 8011d6a:	e004      	b.n	8011d76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d72:	2301      	movs	r3, #1
 8011d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d76:	f000 fead 	bl	8012ad4 <vPortExitCritical>

	return xReturn;
 8011d7a:	69fb      	ldr	r3, [r7, #28]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3720      	adds	r7, #32
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	24001210 	.word	0x24001210
 8011d88:	24001224 	.word	0x24001224

08011d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011d90:	4b03      	ldr	r3, [pc, #12]	; (8011da0 <vTaskMissedYield+0x14>)
 8011d92:	2201      	movs	r2, #1
 8011d94:	601a      	str	r2, [r3, #0]
}
 8011d96:	bf00      	nop
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	24001220 	.word	0x24001220

08011da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011dac:	f000 f852 	bl	8011e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011db0:	4b06      	ldr	r3, [pc, #24]	; (8011dcc <prvIdleTask+0x28>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	2b01      	cmp	r3, #1
 8011db6:	d9f9      	bls.n	8011dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8011db8:	4b05      	ldr	r3, [pc, #20]	; (8011dd0 <prvIdleTask+0x2c>)
 8011dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dbe:	601a      	str	r2, [r3, #0]
 8011dc0:	f3bf 8f4f 	dsb	sy
 8011dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011dc8:	e7f0      	b.n	8011dac <prvIdleTask+0x8>
 8011dca:	bf00      	nop
 8011dcc:	24000d3c 	.word	0x24000d3c
 8011dd0:	e000ed04 	.word	0xe000ed04

08011dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011dda:	2300      	movs	r3, #0
 8011ddc:	607b      	str	r3, [r7, #4]
 8011dde:	e00c      	b.n	8011dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	4613      	mov	r3, r2
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4413      	add	r3, r2
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	4a12      	ldr	r2, [pc, #72]	; (8011e34 <prvInitialiseTaskLists+0x60>)
 8011dec:	4413      	add	r3, r2
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7fe fb5c 	bl	80104ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3301      	adds	r3, #1
 8011df8:	607b      	str	r3, [r7, #4]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b37      	cmp	r3, #55	; 0x37
 8011dfe:	d9ef      	bls.n	8011de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e00:	480d      	ldr	r0, [pc, #52]	; (8011e38 <prvInitialiseTaskLists+0x64>)
 8011e02:	f7fe fb53 	bl	80104ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e06:	480d      	ldr	r0, [pc, #52]	; (8011e3c <prvInitialiseTaskLists+0x68>)
 8011e08:	f7fe fb50 	bl	80104ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e0c:	480c      	ldr	r0, [pc, #48]	; (8011e40 <prvInitialiseTaskLists+0x6c>)
 8011e0e:	f7fe fb4d 	bl	80104ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e12:	480c      	ldr	r0, [pc, #48]	; (8011e44 <prvInitialiseTaskLists+0x70>)
 8011e14:	f7fe fb4a 	bl	80104ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e18:	480b      	ldr	r0, [pc, #44]	; (8011e48 <prvInitialiseTaskLists+0x74>)
 8011e1a:	f7fe fb47 	bl	80104ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e1e:	4b0b      	ldr	r3, [pc, #44]	; (8011e4c <prvInitialiseTaskLists+0x78>)
 8011e20:	4a05      	ldr	r2, [pc, #20]	; (8011e38 <prvInitialiseTaskLists+0x64>)
 8011e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e24:	4b0a      	ldr	r3, [pc, #40]	; (8011e50 <prvInitialiseTaskLists+0x7c>)
 8011e26:	4a05      	ldr	r2, [pc, #20]	; (8011e3c <prvInitialiseTaskLists+0x68>)
 8011e28:	601a      	str	r2, [r3, #0]
}
 8011e2a:	bf00      	nop
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	24000d3c 	.word	0x24000d3c
 8011e38:	2400119c 	.word	0x2400119c
 8011e3c:	240011b0 	.word	0x240011b0
 8011e40:	240011cc 	.word	0x240011cc
 8011e44:	240011e0 	.word	0x240011e0
 8011e48:	240011f8 	.word	0x240011f8
 8011e4c:	240011c4 	.word	0x240011c4
 8011e50:	240011c8 	.word	0x240011c8

08011e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e5a:	e019      	b.n	8011e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011e5c:	f000 fe0a 	bl	8012a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e60:	4b10      	ldr	r3, [pc, #64]	; (8011ea4 <prvCheckTasksWaitingTermination+0x50>)
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	3304      	adds	r3, #4
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7fe fba7 	bl	80105c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e72:	4b0d      	ldr	r3, [pc, #52]	; (8011ea8 <prvCheckTasksWaitingTermination+0x54>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	3b01      	subs	r3, #1
 8011e78:	4a0b      	ldr	r2, [pc, #44]	; (8011ea8 <prvCheckTasksWaitingTermination+0x54>)
 8011e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011e7c:	4b0b      	ldr	r3, [pc, #44]	; (8011eac <prvCheckTasksWaitingTermination+0x58>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	3b01      	subs	r3, #1
 8011e82:	4a0a      	ldr	r2, [pc, #40]	; (8011eac <prvCheckTasksWaitingTermination+0x58>)
 8011e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e86:	f000 fe25 	bl	8012ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 f810 	bl	8011eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e90:	4b06      	ldr	r3, [pc, #24]	; (8011eac <prvCheckTasksWaitingTermination+0x58>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d1e1      	bne.n	8011e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011e98:	bf00      	nop
 8011e9a:	bf00      	nop
 8011e9c:	3708      	adds	r7, #8
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	240011e0 	.word	0x240011e0
 8011ea8:	2400120c 	.word	0x2400120c
 8011eac:	240011f4 	.word	0x240011f4

08011eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d108      	bne.n	8011ed4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f000 ffc2 	bl	8012e50 <vPortFree>
				vPortFree( pxTCB );
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 ffbf 	bl	8012e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011ed2:	e018      	b.n	8011f06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d103      	bne.n	8011ee6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f000 ffb6 	bl	8012e50 <vPortFree>
	}
 8011ee4:	e00f      	b.n	8011f06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011eec:	2b02      	cmp	r3, #2
 8011eee:	d00a      	beq.n	8011f06 <prvDeleteTCB+0x56>
	__asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	f383 8811 	msr	BASEPRI, r3
 8011ef8:	f3bf 8f6f 	isb	sy
 8011efc:	f3bf 8f4f 	dsb	sy
 8011f00:	60fb      	str	r3, [r7, #12]
}
 8011f02:	bf00      	nop
 8011f04:	e7fe      	b.n	8011f04 <prvDeleteTCB+0x54>
	}
 8011f06:	bf00      	nop
 8011f08:	3710      	adds	r7, #16
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
	...

08011f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f10:	b480      	push	{r7}
 8011f12:	b083      	sub	sp, #12
 8011f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f16:	4b0c      	ldr	r3, [pc, #48]	; (8011f48 <prvResetNextTaskUnblockTime+0x38>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d104      	bne.n	8011f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011f20:	4b0a      	ldr	r3, [pc, #40]	; (8011f4c <prvResetNextTaskUnblockTime+0x3c>)
 8011f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011f28:	e008      	b.n	8011f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f2a:	4b07      	ldr	r3, [pc, #28]	; (8011f48 <prvResetNextTaskUnblockTime+0x38>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	4a04      	ldr	r2, [pc, #16]	; (8011f4c <prvResetNextTaskUnblockTime+0x3c>)
 8011f3a:	6013      	str	r3, [r2, #0]
}
 8011f3c:	bf00      	nop
 8011f3e:	370c      	adds	r7, #12
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr
 8011f48:	240011c4 	.word	0x240011c4
 8011f4c:	2400122c 	.word	0x2400122c

08011f50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011f50:	b480      	push	{r7}
 8011f52:	b083      	sub	sp, #12
 8011f54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011f56:	4b0b      	ldr	r3, [pc, #44]	; (8011f84 <xTaskGetSchedulerState+0x34>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d102      	bne.n	8011f64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	607b      	str	r3, [r7, #4]
 8011f62:	e008      	b.n	8011f76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f64:	4b08      	ldr	r3, [pc, #32]	; (8011f88 <xTaskGetSchedulerState+0x38>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d102      	bne.n	8011f72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	607b      	str	r3, [r7, #4]
 8011f70:	e001      	b.n	8011f76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011f72:	2300      	movs	r3, #0
 8011f74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011f76:	687b      	ldr	r3, [r7, #4]
	}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	24001218 	.word	0x24001218
 8011f88:	24001234 	.word	0x24001234

08011f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d056      	beq.n	8012050 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011fa2:	4b2e      	ldr	r3, [pc, #184]	; (801205c <xTaskPriorityDisinherit+0xd0>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	693a      	ldr	r2, [r7, #16]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d00a      	beq.n	8011fc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb0:	f383 8811 	msr	BASEPRI, r3
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	60fb      	str	r3, [r7, #12]
}
 8011fbe:	bf00      	nop
 8011fc0:	e7fe      	b.n	8011fc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10a      	bne.n	8011fe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	60bb      	str	r3, [r7, #8]
}
 8011fdc:	bf00      	nop
 8011fde:	e7fe      	b.n	8011fde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fe4:	1e5a      	subs	r2, r3, #1
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d02c      	beq.n	8012050 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d128      	bne.n	8012050 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	3304      	adds	r3, #4
 8012002:	4618      	mov	r0, r3
 8012004:	f7fe fadc 	bl	80105c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012014:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012020:	4b0f      	ldr	r3, [pc, #60]	; (8012060 <xTaskPriorityDisinherit+0xd4>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	429a      	cmp	r2, r3
 8012026:	d903      	bls.n	8012030 <xTaskPriorityDisinherit+0xa4>
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202c:	4a0c      	ldr	r2, [pc, #48]	; (8012060 <xTaskPriorityDisinherit+0xd4>)
 801202e:	6013      	str	r3, [r2, #0]
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012034:	4613      	mov	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	4413      	add	r3, r2
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	4a09      	ldr	r2, [pc, #36]	; (8012064 <xTaskPriorityDisinherit+0xd8>)
 801203e:	441a      	add	r2, r3
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	3304      	adds	r3, #4
 8012044:	4619      	mov	r1, r3
 8012046:	4610      	mov	r0, r2
 8012048:	f7fe fa5d 	bl	8010506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801204c:	2301      	movs	r3, #1
 801204e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012050:	697b      	ldr	r3, [r7, #20]
	}
 8012052:	4618      	mov	r0, r3
 8012054:	3718      	adds	r7, #24
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
 801205a:	bf00      	nop
 801205c:	24000d38 	.word	0x24000d38
 8012060:	24001214 	.word	0x24001214
 8012064:	24000d3c 	.word	0x24000d3c

08012068 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801206e:	4b09      	ldr	r3, [pc, #36]	; (8012094 <uxTaskResetEventItemValue+0x2c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	699b      	ldr	r3, [r3, #24]
 8012074:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012076:	4b07      	ldr	r3, [pc, #28]	; (8012094 <uxTaskResetEventItemValue+0x2c>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801207c:	4b05      	ldr	r3, [pc, #20]	; (8012094 <uxTaskResetEventItemValue+0x2c>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012084:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8012086:	687b      	ldr	r3, [r7, #4]
}
 8012088:	4618      	mov	r0, r3
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr
 8012094:	24000d38 	.word	0x24000d38

08012098 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80120a2:	4b21      	ldr	r3, [pc, #132]	; (8012128 <prvAddCurrentTaskToDelayedList+0x90>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120a8:	4b20      	ldr	r3, [pc, #128]	; (801212c <prvAddCurrentTaskToDelayedList+0x94>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	3304      	adds	r3, #4
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fa86 	bl	80105c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120ba:	d10a      	bne.n	80120d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d007      	beq.n	80120d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120c2:	4b1a      	ldr	r3, [pc, #104]	; (801212c <prvAddCurrentTaskToDelayedList+0x94>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	3304      	adds	r3, #4
 80120c8:	4619      	mov	r1, r3
 80120ca:	4819      	ldr	r0, [pc, #100]	; (8012130 <prvAddCurrentTaskToDelayedList+0x98>)
 80120cc:	f7fe fa1b 	bl	8010506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80120d0:	e026      	b.n	8012120 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80120d2:	68fa      	ldr	r2, [r7, #12]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	4413      	add	r3, r2
 80120d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80120da:	4b14      	ldr	r3, [pc, #80]	; (801212c <prvAddCurrentTaskToDelayedList+0x94>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	68ba      	ldr	r2, [r7, #8]
 80120e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80120e2:	68ba      	ldr	r2, [r7, #8]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d209      	bcs.n	80120fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120ea:	4b12      	ldr	r3, [pc, #72]	; (8012134 <prvAddCurrentTaskToDelayedList+0x9c>)
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	4b0f      	ldr	r3, [pc, #60]	; (801212c <prvAddCurrentTaskToDelayedList+0x94>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	3304      	adds	r3, #4
 80120f4:	4619      	mov	r1, r3
 80120f6:	4610      	mov	r0, r2
 80120f8:	f7fe fa29 	bl	801054e <vListInsert>
}
 80120fc:	e010      	b.n	8012120 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120fe:	4b0e      	ldr	r3, [pc, #56]	; (8012138 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	4b0a      	ldr	r3, [pc, #40]	; (801212c <prvAddCurrentTaskToDelayedList+0x94>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	3304      	adds	r3, #4
 8012108:	4619      	mov	r1, r3
 801210a:	4610      	mov	r0, r2
 801210c:	f7fe fa1f 	bl	801054e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012110:	4b0a      	ldr	r3, [pc, #40]	; (801213c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	68ba      	ldr	r2, [r7, #8]
 8012116:	429a      	cmp	r2, r3
 8012118:	d202      	bcs.n	8012120 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801211a:	4a08      	ldr	r2, [pc, #32]	; (801213c <prvAddCurrentTaskToDelayedList+0xa4>)
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	6013      	str	r3, [r2, #0]
}
 8012120:	bf00      	nop
 8012122:	3710      	adds	r7, #16
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	24001210 	.word	0x24001210
 801212c:	24000d38 	.word	0x24000d38
 8012130:	240011f8 	.word	0x240011f8
 8012134:	240011c8 	.word	0x240011c8
 8012138:	240011c4 	.word	0x240011c4
 801213c:	2400122c 	.word	0x2400122c

08012140 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b08a      	sub	sp, #40	; 0x28
 8012144:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012146:	2300      	movs	r3, #0
 8012148:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801214a:	f000 fb07 	bl	801275c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801214e:	4b1c      	ldr	r3, [pc, #112]	; (80121c0 <xTimerCreateTimerTask+0x80>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d021      	beq.n	801219a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012156:	2300      	movs	r3, #0
 8012158:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801215a:	2300      	movs	r3, #0
 801215c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801215e:	1d3a      	adds	r2, r7, #4
 8012160:	f107 0108 	add.w	r1, r7, #8
 8012164:	f107 030c 	add.w	r3, r7, #12
 8012168:	4618      	mov	r0, r3
 801216a:	f7fd ff97 	bl	801009c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801216e:	6879      	ldr	r1, [r7, #4]
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	9202      	str	r2, [sp, #8]
 8012176:	9301      	str	r3, [sp, #4]
 8012178:	2302      	movs	r3, #2
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	2300      	movs	r3, #0
 801217e:	460a      	mov	r2, r1
 8012180:	4910      	ldr	r1, [pc, #64]	; (80121c4 <xTimerCreateTimerTask+0x84>)
 8012182:	4811      	ldr	r0, [pc, #68]	; (80121c8 <xTimerCreateTimerTask+0x88>)
 8012184:	f7ff f828 	bl	80111d8 <xTaskCreateStatic>
 8012188:	4603      	mov	r3, r0
 801218a:	4a10      	ldr	r2, [pc, #64]	; (80121cc <xTimerCreateTimerTask+0x8c>)
 801218c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801218e:	4b0f      	ldr	r3, [pc, #60]	; (80121cc <xTimerCreateTimerTask+0x8c>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d001      	beq.n	801219a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012196:	2301      	movs	r3, #1
 8012198:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d10a      	bne.n	80121b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80121a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a4:	f383 8811 	msr	BASEPRI, r3
 80121a8:	f3bf 8f6f 	isb	sy
 80121ac:	f3bf 8f4f 	dsb	sy
 80121b0:	613b      	str	r3, [r7, #16]
}
 80121b2:	bf00      	nop
 80121b4:	e7fe      	b.n	80121b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80121b6:	697b      	ldr	r3, [r7, #20]
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3718      	adds	r7, #24
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	24001268 	.word	0x24001268
 80121c4:	08014360 	.word	0x08014360
 80121c8:	08012305 	.word	0x08012305
 80121cc:	2400126c 	.word	0x2400126c

080121d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b08a      	sub	sp, #40	; 0x28
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
 80121dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80121de:	2300      	movs	r3, #0
 80121e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d10a      	bne.n	80121fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80121e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ec:	f383 8811 	msr	BASEPRI, r3
 80121f0:	f3bf 8f6f 	isb	sy
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	623b      	str	r3, [r7, #32]
}
 80121fa:	bf00      	nop
 80121fc:	e7fe      	b.n	80121fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80121fe:	4b1a      	ldr	r3, [pc, #104]	; (8012268 <xTimerGenericCommand+0x98>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d02a      	beq.n	801225c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	2b05      	cmp	r3, #5
 8012216:	dc18      	bgt.n	801224a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012218:	f7ff fe9a 	bl	8011f50 <xTaskGetSchedulerState>
 801221c:	4603      	mov	r3, r0
 801221e:	2b02      	cmp	r3, #2
 8012220:	d109      	bne.n	8012236 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012222:	4b11      	ldr	r3, [pc, #68]	; (8012268 <xTimerGenericCommand+0x98>)
 8012224:	6818      	ldr	r0, [r3, #0]
 8012226:	f107 0110 	add.w	r1, r7, #16
 801222a:	2300      	movs	r3, #0
 801222c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801222e:	f7fe fb2f 	bl	8010890 <xQueueGenericSend>
 8012232:	6278      	str	r0, [r7, #36]	; 0x24
 8012234:	e012      	b.n	801225c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012236:	4b0c      	ldr	r3, [pc, #48]	; (8012268 <xTimerGenericCommand+0x98>)
 8012238:	6818      	ldr	r0, [r3, #0]
 801223a:	f107 0110 	add.w	r1, r7, #16
 801223e:	2300      	movs	r3, #0
 8012240:	2200      	movs	r2, #0
 8012242:	f7fe fb25 	bl	8010890 <xQueueGenericSend>
 8012246:	6278      	str	r0, [r7, #36]	; 0x24
 8012248:	e008      	b.n	801225c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801224a:	4b07      	ldr	r3, [pc, #28]	; (8012268 <xTimerGenericCommand+0x98>)
 801224c:	6818      	ldr	r0, [r3, #0]
 801224e:	f107 0110 	add.w	r1, r7, #16
 8012252:	2300      	movs	r3, #0
 8012254:	683a      	ldr	r2, [r7, #0]
 8012256:	f7fe fc19 	bl	8010a8c <xQueueGenericSendFromISR>
 801225a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801225e:	4618      	mov	r0, r3
 8012260:	3728      	adds	r7, #40	; 0x28
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	24001268 	.word	0x24001268

0801226c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b088      	sub	sp, #32
 8012270:	af02      	add	r7, sp, #8
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012276:	4b22      	ldr	r3, [pc, #136]	; (8012300 <prvProcessExpiredTimer+0x94>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	68db      	ldr	r3, [r3, #12]
 801227e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	3304      	adds	r3, #4
 8012284:	4618      	mov	r0, r3
 8012286:	f7fe f99b 	bl	80105c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012290:	f003 0304 	and.w	r3, r3, #4
 8012294:	2b00      	cmp	r3, #0
 8012296:	d022      	beq.n	80122de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	699a      	ldr	r2, [r3, #24]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	18d1      	adds	r1, r2, r3
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	6978      	ldr	r0, [r7, #20]
 80122a6:	f000 f8d1 	bl	801244c <prvInsertTimerInActiveList>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d01f      	beq.n	80122f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80122b0:	2300      	movs	r3, #0
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	2300      	movs	r3, #0
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	2100      	movs	r1, #0
 80122ba:	6978      	ldr	r0, [r7, #20]
 80122bc:	f7ff ff88 	bl	80121d0 <xTimerGenericCommand>
 80122c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d113      	bne.n	80122f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80122c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122cc:	f383 8811 	msr	BASEPRI, r3
 80122d0:	f3bf 8f6f 	isb	sy
 80122d4:	f3bf 8f4f 	dsb	sy
 80122d8:	60fb      	str	r3, [r7, #12]
}
 80122da:	bf00      	nop
 80122dc:	e7fe      	b.n	80122dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122e4:	f023 0301 	bic.w	r3, r3, #1
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	6a1b      	ldr	r3, [r3, #32]
 80122f4:	6978      	ldr	r0, [r7, #20]
 80122f6:	4798      	blx	r3
}
 80122f8:	bf00      	nop
 80122fa:	3718      	adds	r7, #24
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	24001260 	.word	0x24001260

08012304 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801230c:	f107 0308 	add.w	r3, r7, #8
 8012310:	4618      	mov	r0, r3
 8012312:	f000 f857 	bl	80123c4 <prvGetNextExpireTime>
 8012316:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	4619      	mov	r1, r3
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f000 f803 	bl	8012328 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012322:	f000 f8d5 	bl	80124d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012326:	e7f1      	b.n	801230c <prvTimerTask+0x8>

08012328 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012332:	f7ff f98d 	bl	8011650 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012336:	f107 0308 	add.w	r3, r7, #8
 801233a:	4618      	mov	r0, r3
 801233c:	f000 f866 	bl	801240c <prvSampleTimeNow>
 8012340:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d130      	bne.n	80123aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10a      	bne.n	8012364 <prvProcessTimerOrBlockTask+0x3c>
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	429a      	cmp	r2, r3
 8012354:	d806      	bhi.n	8012364 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012356:	f7ff f989 	bl	801166c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801235a:	68f9      	ldr	r1, [r7, #12]
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f7ff ff85 	bl	801226c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012362:	e024      	b.n	80123ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d008      	beq.n	801237c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801236a:	4b13      	ldr	r3, [pc, #76]	; (80123b8 <prvProcessTimerOrBlockTask+0x90>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d101      	bne.n	8012378 <prvProcessTimerOrBlockTask+0x50>
 8012374:	2301      	movs	r3, #1
 8012376:	e000      	b.n	801237a <prvProcessTimerOrBlockTask+0x52>
 8012378:	2300      	movs	r3, #0
 801237a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801237c:	4b0f      	ldr	r3, [pc, #60]	; (80123bc <prvProcessTimerOrBlockTask+0x94>)
 801237e:	6818      	ldr	r0, [r3, #0]
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	1ad3      	subs	r3, r2, r3
 8012386:	683a      	ldr	r2, [r7, #0]
 8012388:	4619      	mov	r1, r3
 801238a:	f7fe fef1 	bl	8011170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801238e:	f7ff f96d 	bl	801166c <xTaskResumeAll>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d10a      	bne.n	80123ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012398:	4b09      	ldr	r3, [pc, #36]	; (80123c0 <prvProcessTimerOrBlockTask+0x98>)
 801239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801239e:	601a      	str	r2, [r3, #0]
 80123a0:	f3bf 8f4f 	dsb	sy
 80123a4:	f3bf 8f6f 	isb	sy
}
 80123a8:	e001      	b.n	80123ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80123aa:	f7ff f95f 	bl	801166c <xTaskResumeAll>
}
 80123ae:	bf00      	nop
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	24001264 	.word	0x24001264
 80123bc:	24001268 	.word	0x24001268
 80123c0:	e000ed04 	.word	0xe000ed04

080123c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80123c4:	b480      	push	{r7}
 80123c6:	b085      	sub	sp, #20
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80123cc:	4b0e      	ldr	r3, [pc, #56]	; (8012408 <prvGetNextExpireTime+0x44>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d101      	bne.n	80123da <prvGetNextExpireTime+0x16>
 80123d6:	2201      	movs	r2, #1
 80123d8:	e000      	b.n	80123dc <prvGetNextExpireTime+0x18>
 80123da:	2200      	movs	r2, #0
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d105      	bne.n	80123f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123e8:	4b07      	ldr	r3, [pc, #28]	; (8012408 <prvGetNextExpireTime+0x44>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	60fb      	str	r3, [r7, #12]
 80123f2:	e001      	b.n	80123f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80123f4:	2300      	movs	r3, #0
 80123f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80123f8:	68fb      	ldr	r3, [r7, #12]
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3714      	adds	r7, #20
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop
 8012408:	24001260 	.word	0x24001260

0801240c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012414:	f7ff f9c8 	bl	80117a8 <xTaskGetTickCount>
 8012418:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801241a:	4b0b      	ldr	r3, [pc, #44]	; (8012448 <prvSampleTimeNow+0x3c>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	68fa      	ldr	r2, [r7, #12]
 8012420:	429a      	cmp	r2, r3
 8012422:	d205      	bcs.n	8012430 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012424:	f000 f936 	bl	8012694 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2201      	movs	r2, #1
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	e002      	b.n	8012436 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2200      	movs	r2, #0
 8012434:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012436:	4a04      	ldr	r2, [pc, #16]	; (8012448 <prvSampleTimeNow+0x3c>)
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801243c:	68fb      	ldr	r3, [r7, #12]
}
 801243e:	4618      	mov	r0, r3
 8012440:	3710      	adds	r7, #16
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop
 8012448:	24001270 	.word	0x24001270

0801244c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
 8012458:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801245a:	2300      	movs	r3, #0
 801245c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	429a      	cmp	r2, r3
 8012470:	d812      	bhi.n	8012498 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	1ad2      	subs	r2, r2, r3
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	699b      	ldr	r3, [r3, #24]
 801247c:	429a      	cmp	r2, r3
 801247e:	d302      	bcc.n	8012486 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012480:	2301      	movs	r3, #1
 8012482:	617b      	str	r3, [r7, #20]
 8012484:	e01b      	b.n	80124be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012486:	4b10      	ldr	r3, [pc, #64]	; (80124c8 <prvInsertTimerInActiveList+0x7c>)
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	3304      	adds	r3, #4
 801248e:	4619      	mov	r1, r3
 8012490:	4610      	mov	r0, r2
 8012492:	f7fe f85c 	bl	801054e <vListInsert>
 8012496:	e012      	b.n	80124be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012498:	687a      	ldr	r2, [r7, #4]
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	429a      	cmp	r2, r3
 801249e:	d206      	bcs.n	80124ae <prvInsertTimerInActiveList+0x62>
 80124a0:	68ba      	ldr	r2, [r7, #8]
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d302      	bcc.n	80124ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80124a8:	2301      	movs	r3, #1
 80124aa:	617b      	str	r3, [r7, #20]
 80124ac:	e007      	b.n	80124be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80124ae:	4b07      	ldr	r3, [pc, #28]	; (80124cc <prvInsertTimerInActiveList+0x80>)
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3304      	adds	r3, #4
 80124b6:	4619      	mov	r1, r3
 80124b8:	4610      	mov	r0, r2
 80124ba:	f7fe f848 	bl	801054e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80124be:	697b      	ldr	r3, [r7, #20]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3718      	adds	r7, #24
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	24001264 	.word	0x24001264
 80124cc:	24001260 	.word	0x24001260

080124d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b08e      	sub	sp, #56	; 0x38
 80124d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80124d6:	e0ca      	b.n	801266e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	da18      	bge.n	8012510 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80124de:	1d3b      	adds	r3, r7, #4
 80124e0:	3304      	adds	r3, #4
 80124e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80124e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10a      	bne.n	8012500 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80124ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ee:	f383 8811 	msr	BASEPRI, r3
 80124f2:	f3bf 8f6f 	isb	sy
 80124f6:	f3bf 8f4f 	dsb	sy
 80124fa:	61fb      	str	r3, [r7, #28]
}
 80124fc:	bf00      	nop
 80124fe:	e7fe      	b.n	80124fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012506:	6850      	ldr	r0, [r2, #4]
 8012508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801250a:	6892      	ldr	r2, [r2, #8]
 801250c:	4611      	mov	r1, r2
 801250e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	f2c0 80aa 	blt.w	801266c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251e:	695b      	ldr	r3, [r3, #20]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d004      	beq.n	801252e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012526:	3304      	adds	r3, #4
 8012528:	4618      	mov	r0, r3
 801252a:	f7fe f849 	bl	80105c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801252e:	463b      	mov	r3, r7
 8012530:	4618      	mov	r0, r3
 8012532:	f7ff ff6b 	bl	801240c <prvSampleTimeNow>
 8012536:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2b09      	cmp	r3, #9
 801253c:	f200 8097 	bhi.w	801266e <prvProcessReceivedCommands+0x19e>
 8012540:	a201      	add	r2, pc, #4	; (adr r2, 8012548 <prvProcessReceivedCommands+0x78>)
 8012542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012546:	bf00      	nop
 8012548:	08012571 	.word	0x08012571
 801254c:	08012571 	.word	0x08012571
 8012550:	08012571 	.word	0x08012571
 8012554:	080125e5 	.word	0x080125e5
 8012558:	080125f9 	.word	0x080125f9
 801255c:	08012643 	.word	0x08012643
 8012560:	08012571 	.word	0x08012571
 8012564:	08012571 	.word	0x08012571
 8012568:	080125e5 	.word	0x080125e5
 801256c:	080125f9 	.word	0x080125f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012576:	f043 0301 	orr.w	r3, r3, #1
 801257a:	b2da      	uxtb	r2, r3
 801257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012582:	68ba      	ldr	r2, [r7, #8]
 8012584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012586:	699b      	ldr	r3, [r3, #24]
 8012588:	18d1      	adds	r1, r2, r3
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801258e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012590:	f7ff ff5c 	bl	801244c <prvInsertTimerInActiveList>
 8012594:	4603      	mov	r3, r0
 8012596:	2b00      	cmp	r3, #0
 8012598:	d069      	beq.n	801266e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259c:	6a1b      	ldr	r3, [r3, #32]
 801259e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80125a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125a8:	f003 0304 	and.w	r3, r3, #4
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d05e      	beq.n	801266e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80125b0:	68ba      	ldr	r2, [r7, #8]
 80125b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125b4:	699b      	ldr	r3, [r3, #24]
 80125b6:	441a      	add	r2, r3
 80125b8:	2300      	movs	r3, #0
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	2300      	movs	r3, #0
 80125be:	2100      	movs	r1, #0
 80125c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125c2:	f7ff fe05 	bl	80121d0 <xTimerGenericCommand>
 80125c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80125c8:	6a3b      	ldr	r3, [r7, #32]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d14f      	bne.n	801266e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80125ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d2:	f383 8811 	msr	BASEPRI, r3
 80125d6:	f3bf 8f6f 	isb	sy
 80125da:	f3bf 8f4f 	dsb	sy
 80125de:	61bb      	str	r3, [r7, #24]
}
 80125e0:	bf00      	nop
 80125e2:	e7fe      	b.n	80125e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80125e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125ea:	f023 0301 	bic.w	r3, r3, #1
 80125ee:	b2da      	uxtb	r2, r3
 80125f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80125f6:	e03a      	b.n	801266e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80125f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125fe:	f043 0301 	orr.w	r3, r3, #1
 8012602:	b2da      	uxtb	r2, r3
 8012604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801260a:	68ba      	ldr	r2, [r7, #8]
 801260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012612:	699b      	ldr	r3, [r3, #24]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d10a      	bne.n	801262e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261c:	f383 8811 	msr	BASEPRI, r3
 8012620:	f3bf 8f6f 	isb	sy
 8012624:	f3bf 8f4f 	dsb	sy
 8012628:	617b      	str	r3, [r7, #20]
}
 801262a:	bf00      	nop
 801262c:	e7fe      	b.n	801262c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012630:	699a      	ldr	r2, [r3, #24]
 8012632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012634:	18d1      	adds	r1, r2, r3
 8012636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801263a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801263c:	f7ff ff06 	bl	801244c <prvInsertTimerInActiveList>
					break;
 8012640:	e015      	b.n	801266e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012648:	f003 0302 	and.w	r3, r3, #2
 801264c:	2b00      	cmp	r3, #0
 801264e:	d103      	bne.n	8012658 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012652:	f000 fbfd 	bl	8012e50 <vPortFree>
 8012656:	e00a      	b.n	801266e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801265e:	f023 0301 	bic.w	r3, r3, #1
 8012662:	b2da      	uxtb	r2, r3
 8012664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801266a:	e000      	b.n	801266e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801266c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801266e:	4b08      	ldr	r3, [pc, #32]	; (8012690 <prvProcessReceivedCommands+0x1c0>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	1d39      	adds	r1, r7, #4
 8012674:	2200      	movs	r2, #0
 8012676:	4618      	mov	r0, r3
 8012678:	f7fe faa4 	bl	8010bc4 <xQueueReceive>
 801267c:	4603      	mov	r3, r0
 801267e:	2b00      	cmp	r3, #0
 8012680:	f47f af2a 	bne.w	80124d8 <prvProcessReceivedCommands+0x8>
	}
}
 8012684:	bf00      	nop
 8012686:	bf00      	nop
 8012688:	3730      	adds	r7, #48	; 0x30
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	24001268 	.word	0x24001268

08012694 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b088      	sub	sp, #32
 8012698:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801269a:	e048      	b.n	801272e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801269c:	4b2d      	ldr	r3, [pc, #180]	; (8012754 <prvSwitchTimerLists+0xc0>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126a6:	4b2b      	ldr	r3, [pc, #172]	; (8012754 <prvSwitchTimerLists+0xc0>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	3304      	adds	r3, #4
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fd ff83 	bl	80105c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6a1b      	ldr	r3, [r3, #32]
 80126be:	68f8      	ldr	r0, [r7, #12]
 80126c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126c8:	f003 0304 	and.w	r3, r3, #4
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d02e      	beq.n	801272e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	699b      	ldr	r3, [r3, #24]
 80126d4:	693a      	ldr	r2, [r7, #16]
 80126d6:	4413      	add	r3, r2
 80126d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80126da:	68ba      	ldr	r2, [r7, #8]
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d90e      	bls.n	8012700 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	68ba      	ldr	r2, [r7, #8]
 80126e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80126ee:	4b19      	ldr	r3, [pc, #100]	; (8012754 <prvSwitchTimerLists+0xc0>)
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	3304      	adds	r3, #4
 80126f6:	4619      	mov	r1, r3
 80126f8:	4610      	mov	r0, r2
 80126fa:	f7fd ff28 	bl	801054e <vListInsert>
 80126fe:	e016      	b.n	801272e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012700:	2300      	movs	r3, #0
 8012702:	9300      	str	r3, [sp, #0]
 8012704:	2300      	movs	r3, #0
 8012706:	693a      	ldr	r2, [r7, #16]
 8012708:	2100      	movs	r1, #0
 801270a:	68f8      	ldr	r0, [r7, #12]
 801270c:	f7ff fd60 	bl	80121d0 <xTimerGenericCommand>
 8012710:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d10a      	bne.n	801272e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271c:	f383 8811 	msr	BASEPRI, r3
 8012720:	f3bf 8f6f 	isb	sy
 8012724:	f3bf 8f4f 	dsb	sy
 8012728:	603b      	str	r3, [r7, #0]
}
 801272a:	bf00      	nop
 801272c:	e7fe      	b.n	801272c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801272e:	4b09      	ldr	r3, [pc, #36]	; (8012754 <prvSwitchTimerLists+0xc0>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d1b1      	bne.n	801269c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012738:	4b06      	ldr	r3, [pc, #24]	; (8012754 <prvSwitchTimerLists+0xc0>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801273e:	4b06      	ldr	r3, [pc, #24]	; (8012758 <prvSwitchTimerLists+0xc4>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	4a04      	ldr	r2, [pc, #16]	; (8012754 <prvSwitchTimerLists+0xc0>)
 8012744:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012746:	4a04      	ldr	r2, [pc, #16]	; (8012758 <prvSwitchTimerLists+0xc4>)
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	6013      	str	r3, [r2, #0]
}
 801274c:	bf00      	nop
 801274e:	3718      	adds	r7, #24
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	24001260 	.word	0x24001260
 8012758:	24001264 	.word	0x24001264

0801275c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012762:	f000 f987 	bl	8012a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012766:	4b15      	ldr	r3, [pc, #84]	; (80127bc <prvCheckForValidListAndQueue+0x60>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d120      	bne.n	80127b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801276e:	4814      	ldr	r0, [pc, #80]	; (80127c0 <prvCheckForValidListAndQueue+0x64>)
 8012770:	f7fd fe9c 	bl	80104ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012774:	4813      	ldr	r0, [pc, #76]	; (80127c4 <prvCheckForValidListAndQueue+0x68>)
 8012776:	f7fd fe99 	bl	80104ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801277a:	4b13      	ldr	r3, [pc, #76]	; (80127c8 <prvCheckForValidListAndQueue+0x6c>)
 801277c:	4a10      	ldr	r2, [pc, #64]	; (80127c0 <prvCheckForValidListAndQueue+0x64>)
 801277e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012780:	4b12      	ldr	r3, [pc, #72]	; (80127cc <prvCheckForValidListAndQueue+0x70>)
 8012782:	4a10      	ldr	r2, [pc, #64]	; (80127c4 <prvCheckForValidListAndQueue+0x68>)
 8012784:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012786:	2300      	movs	r3, #0
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	4b11      	ldr	r3, [pc, #68]	; (80127d0 <prvCheckForValidListAndQueue+0x74>)
 801278c:	4a11      	ldr	r2, [pc, #68]	; (80127d4 <prvCheckForValidListAndQueue+0x78>)
 801278e:	2110      	movs	r1, #16
 8012790:	200a      	movs	r0, #10
 8012792:	f7fd ffa7 	bl	80106e4 <xQueueGenericCreateStatic>
 8012796:	4603      	mov	r3, r0
 8012798:	4a08      	ldr	r2, [pc, #32]	; (80127bc <prvCheckForValidListAndQueue+0x60>)
 801279a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801279c:	4b07      	ldr	r3, [pc, #28]	; (80127bc <prvCheckForValidListAndQueue+0x60>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d005      	beq.n	80127b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80127a4:	4b05      	ldr	r3, [pc, #20]	; (80127bc <prvCheckForValidListAndQueue+0x60>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	490b      	ldr	r1, [pc, #44]	; (80127d8 <prvCheckForValidListAndQueue+0x7c>)
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe fcb6 	bl	801111c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127b0:	f000 f990 	bl	8012ad4 <vPortExitCritical>
}
 80127b4:	bf00      	nop
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}
 80127ba:	bf00      	nop
 80127bc:	24001268 	.word	0x24001268
 80127c0:	24001238 	.word	0x24001238
 80127c4:	2400124c 	.word	0x2400124c
 80127c8:	24001260 	.word	0x24001260
 80127cc:	24001264 	.word	0x24001264
 80127d0:	24001314 	.word	0x24001314
 80127d4:	24001274 	.word	0x24001274
 80127d8:	08014368 	.word	0x08014368

080127dc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b08a      	sub	sp, #40	; 0x28
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
 80127e8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80127ea:	f06f 0301 	mvn.w	r3, #1
 80127ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80127fc:	4b06      	ldr	r3, [pc, #24]	; (8012818 <xTimerPendFunctionCallFromISR+0x3c>)
 80127fe:	6818      	ldr	r0, [r3, #0]
 8012800:	f107 0114 	add.w	r1, r7, #20
 8012804:	2300      	movs	r3, #0
 8012806:	683a      	ldr	r2, [r7, #0]
 8012808:	f7fe f940 	bl	8010a8c <xQueueGenericSendFromISR>
 801280c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012810:	4618      	mov	r0, r3
 8012812:	3728      	adds	r7, #40	; 0x28
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	24001268 	.word	0x24001268

0801281c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801281c:	b480      	push	{r7}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	3b04      	subs	r3, #4
 801282c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	3b04      	subs	r3, #4
 801283a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	f023 0201 	bic.w	r2, r3, #1
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	3b04      	subs	r3, #4
 801284a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801284c:	4a0c      	ldr	r2, [pc, #48]	; (8012880 <pxPortInitialiseStack+0x64>)
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	3b14      	subs	r3, #20
 8012856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	3b04      	subs	r3, #4
 8012862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f06f 0202 	mvn.w	r2, #2
 801286a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	3b20      	subs	r3, #32
 8012870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012872:	68fb      	ldr	r3, [r7, #12]
}
 8012874:	4618      	mov	r0, r3
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	08012885 	.word	0x08012885

08012884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801288e:	4b12      	ldr	r3, [pc, #72]	; (80128d8 <prvTaskExitError+0x54>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012896:	d00a      	beq.n	80128ae <prvTaskExitError+0x2a>
	__asm volatile
 8012898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289c:	f383 8811 	msr	BASEPRI, r3
 80128a0:	f3bf 8f6f 	isb	sy
 80128a4:	f3bf 8f4f 	dsb	sy
 80128a8:	60fb      	str	r3, [r7, #12]
}
 80128aa:	bf00      	nop
 80128ac:	e7fe      	b.n	80128ac <prvTaskExitError+0x28>
	__asm volatile
 80128ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	60bb      	str	r3, [r7, #8]
}
 80128c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80128c2:	bf00      	nop
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d0fc      	beq.n	80128c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80128ca:	bf00      	nop
 80128cc:	bf00      	nop
 80128ce:	3714      	adds	r7, #20
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr
 80128d8:	24000010 	.word	0x24000010
 80128dc:	00000000 	.word	0x00000000

080128e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80128e0:	4b07      	ldr	r3, [pc, #28]	; (8012900 <pxCurrentTCBConst2>)
 80128e2:	6819      	ldr	r1, [r3, #0]
 80128e4:	6808      	ldr	r0, [r1, #0]
 80128e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ea:	f380 8809 	msr	PSP, r0
 80128ee:	f3bf 8f6f 	isb	sy
 80128f2:	f04f 0000 	mov.w	r0, #0
 80128f6:	f380 8811 	msr	BASEPRI, r0
 80128fa:	4770      	bx	lr
 80128fc:	f3af 8000 	nop.w

08012900 <pxCurrentTCBConst2>:
 8012900:	24000d38 	.word	0x24000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012904:	bf00      	nop
 8012906:	bf00      	nop

08012908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012908:	4808      	ldr	r0, [pc, #32]	; (801292c <prvPortStartFirstTask+0x24>)
 801290a:	6800      	ldr	r0, [r0, #0]
 801290c:	6800      	ldr	r0, [r0, #0]
 801290e:	f380 8808 	msr	MSP, r0
 8012912:	f04f 0000 	mov.w	r0, #0
 8012916:	f380 8814 	msr	CONTROL, r0
 801291a:	b662      	cpsie	i
 801291c:	b661      	cpsie	f
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	df00      	svc	0
 8012928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801292a:	bf00      	nop
 801292c:	e000ed08 	.word	0xe000ed08

08012930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b086      	sub	sp, #24
 8012934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012936:	4b46      	ldr	r3, [pc, #280]	; (8012a50 <xPortStartScheduler+0x120>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4a46      	ldr	r2, [pc, #280]	; (8012a54 <xPortStartScheduler+0x124>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d10a      	bne.n	8012956 <xPortStartScheduler+0x26>
	__asm volatile
 8012940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012944:	f383 8811 	msr	BASEPRI, r3
 8012948:	f3bf 8f6f 	isb	sy
 801294c:	f3bf 8f4f 	dsb	sy
 8012950:	613b      	str	r3, [r7, #16]
}
 8012952:	bf00      	nop
 8012954:	e7fe      	b.n	8012954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012956:	4b3e      	ldr	r3, [pc, #248]	; (8012a50 <xPortStartScheduler+0x120>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4a3f      	ldr	r2, [pc, #252]	; (8012a58 <xPortStartScheduler+0x128>)
 801295c:	4293      	cmp	r3, r2
 801295e:	d10a      	bne.n	8012976 <xPortStartScheduler+0x46>
	__asm volatile
 8012960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012964:	f383 8811 	msr	BASEPRI, r3
 8012968:	f3bf 8f6f 	isb	sy
 801296c:	f3bf 8f4f 	dsb	sy
 8012970:	60fb      	str	r3, [r7, #12]
}
 8012972:	bf00      	nop
 8012974:	e7fe      	b.n	8012974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012976:	4b39      	ldr	r3, [pc, #228]	; (8012a5c <xPortStartScheduler+0x12c>)
 8012978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	b2db      	uxtb	r3, r3
 8012980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	22ff      	movs	r2, #255	; 0xff
 8012986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	b2db      	uxtb	r3, r3
 801298e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012990:	78fb      	ldrb	r3, [r7, #3]
 8012992:	b2db      	uxtb	r3, r3
 8012994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012998:	b2da      	uxtb	r2, r3
 801299a:	4b31      	ldr	r3, [pc, #196]	; (8012a60 <xPortStartScheduler+0x130>)
 801299c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801299e:	4b31      	ldr	r3, [pc, #196]	; (8012a64 <xPortStartScheduler+0x134>)
 80129a0:	2207      	movs	r2, #7
 80129a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129a4:	e009      	b.n	80129ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80129a6:	4b2f      	ldr	r3, [pc, #188]	; (8012a64 <xPortStartScheduler+0x134>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	3b01      	subs	r3, #1
 80129ac:	4a2d      	ldr	r2, [pc, #180]	; (8012a64 <xPortStartScheduler+0x134>)
 80129ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80129b0:	78fb      	ldrb	r3, [r7, #3]
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	005b      	lsls	r3, r3, #1
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129ba:	78fb      	ldrb	r3, [r7, #3]
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129c2:	2b80      	cmp	r3, #128	; 0x80
 80129c4:	d0ef      	beq.n	80129a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80129c6:	4b27      	ldr	r3, [pc, #156]	; (8012a64 <xPortStartScheduler+0x134>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f1c3 0307 	rsb	r3, r3, #7
 80129ce:	2b04      	cmp	r3, #4
 80129d0:	d00a      	beq.n	80129e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80129d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d6:	f383 8811 	msr	BASEPRI, r3
 80129da:	f3bf 8f6f 	isb	sy
 80129de:	f3bf 8f4f 	dsb	sy
 80129e2:	60bb      	str	r3, [r7, #8]
}
 80129e4:	bf00      	nop
 80129e6:	e7fe      	b.n	80129e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80129e8:	4b1e      	ldr	r3, [pc, #120]	; (8012a64 <xPortStartScheduler+0x134>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	021b      	lsls	r3, r3, #8
 80129ee:	4a1d      	ldr	r2, [pc, #116]	; (8012a64 <xPortStartScheduler+0x134>)
 80129f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80129f2:	4b1c      	ldr	r3, [pc, #112]	; (8012a64 <xPortStartScheduler+0x134>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80129fa:	4a1a      	ldr	r2, [pc, #104]	; (8012a64 <xPortStartScheduler+0x134>)
 80129fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	b2da      	uxtb	r2, r3
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a06:	4b18      	ldr	r3, [pc, #96]	; (8012a68 <xPortStartScheduler+0x138>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4a17      	ldr	r2, [pc, #92]	; (8012a68 <xPortStartScheduler+0x138>)
 8012a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a12:	4b15      	ldr	r3, [pc, #84]	; (8012a68 <xPortStartScheduler+0x138>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	4a14      	ldr	r2, [pc, #80]	; (8012a68 <xPortStartScheduler+0x138>)
 8012a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012a1e:	f000 f8dd 	bl	8012bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012a22:	4b12      	ldr	r3, [pc, #72]	; (8012a6c <xPortStartScheduler+0x13c>)
 8012a24:	2200      	movs	r2, #0
 8012a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012a28:	f000 f8fc 	bl	8012c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a2c:	4b10      	ldr	r3, [pc, #64]	; (8012a70 <xPortStartScheduler+0x140>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4a0f      	ldr	r2, [pc, #60]	; (8012a70 <xPortStartScheduler+0x140>)
 8012a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012a38:	f7ff ff66 	bl	8012908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012a3c:	f7fe ff7e 	bl	801193c <vTaskSwitchContext>
	prvTaskExitError();
 8012a40:	f7ff ff20 	bl	8012884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012a44:	2300      	movs	r3, #0
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	3718      	adds	r7, #24
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	e000ed00 	.word	0xe000ed00
 8012a54:	410fc271 	.word	0x410fc271
 8012a58:	410fc270 	.word	0x410fc270
 8012a5c:	e000e400 	.word	0xe000e400
 8012a60:	24001364 	.word	0x24001364
 8012a64:	24001368 	.word	0x24001368
 8012a68:	e000ed20 	.word	0xe000ed20
 8012a6c:	24000010 	.word	0x24000010
 8012a70:	e000ef34 	.word	0xe000ef34

08012a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
	__asm volatile
 8012a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7e:	f383 8811 	msr	BASEPRI, r3
 8012a82:	f3bf 8f6f 	isb	sy
 8012a86:	f3bf 8f4f 	dsb	sy
 8012a8a:	607b      	str	r3, [r7, #4]
}
 8012a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012a8e:	4b0f      	ldr	r3, [pc, #60]	; (8012acc <vPortEnterCritical+0x58>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	3301      	adds	r3, #1
 8012a94:	4a0d      	ldr	r2, [pc, #52]	; (8012acc <vPortEnterCritical+0x58>)
 8012a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012a98:	4b0c      	ldr	r3, [pc, #48]	; (8012acc <vPortEnterCritical+0x58>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2b01      	cmp	r3, #1
 8012a9e:	d10f      	bne.n	8012ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012aa0:	4b0b      	ldr	r3, [pc, #44]	; (8012ad0 <vPortEnterCritical+0x5c>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d00a      	beq.n	8012ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aae:	f383 8811 	msr	BASEPRI, r3
 8012ab2:	f3bf 8f6f 	isb	sy
 8012ab6:	f3bf 8f4f 	dsb	sy
 8012aba:	603b      	str	r3, [r7, #0]
}
 8012abc:	bf00      	nop
 8012abe:	e7fe      	b.n	8012abe <vPortEnterCritical+0x4a>
	}
}
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	24000010 	.word	0x24000010
 8012ad0:	e000ed04 	.word	0xe000ed04

08012ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012ada:	4b12      	ldr	r3, [pc, #72]	; (8012b24 <vPortExitCritical+0x50>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d10a      	bne.n	8012af8 <vPortExitCritical+0x24>
	__asm volatile
 8012ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae6:	f383 8811 	msr	BASEPRI, r3
 8012aea:	f3bf 8f6f 	isb	sy
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	607b      	str	r3, [r7, #4]
}
 8012af4:	bf00      	nop
 8012af6:	e7fe      	b.n	8012af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012af8:	4b0a      	ldr	r3, [pc, #40]	; (8012b24 <vPortExitCritical+0x50>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	3b01      	subs	r3, #1
 8012afe:	4a09      	ldr	r2, [pc, #36]	; (8012b24 <vPortExitCritical+0x50>)
 8012b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012b02:	4b08      	ldr	r3, [pc, #32]	; (8012b24 <vPortExitCritical+0x50>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d105      	bne.n	8012b16 <vPortExitCritical+0x42>
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	f383 8811 	msr	BASEPRI, r3
}
 8012b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012b16:	bf00      	nop
 8012b18:	370c      	adds	r7, #12
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	24000010 	.word	0x24000010
	...

08012b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012b30:	f3ef 8009 	mrs	r0, PSP
 8012b34:	f3bf 8f6f 	isb	sy
 8012b38:	4b15      	ldr	r3, [pc, #84]	; (8012b90 <pxCurrentTCBConst>)
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	f01e 0f10 	tst.w	lr, #16
 8012b40:	bf08      	it	eq
 8012b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4a:	6010      	str	r0, [r2, #0]
 8012b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012b54:	f380 8811 	msr	BASEPRI, r0
 8012b58:	f3bf 8f4f 	dsb	sy
 8012b5c:	f3bf 8f6f 	isb	sy
 8012b60:	f7fe feec 	bl	801193c <vTaskSwitchContext>
 8012b64:	f04f 0000 	mov.w	r0, #0
 8012b68:	f380 8811 	msr	BASEPRI, r0
 8012b6c:	bc09      	pop	{r0, r3}
 8012b6e:	6819      	ldr	r1, [r3, #0]
 8012b70:	6808      	ldr	r0, [r1, #0]
 8012b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b76:	f01e 0f10 	tst.w	lr, #16
 8012b7a:	bf08      	it	eq
 8012b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012b80:	f380 8809 	msr	PSP, r0
 8012b84:	f3bf 8f6f 	isb	sy
 8012b88:	4770      	bx	lr
 8012b8a:	bf00      	nop
 8012b8c:	f3af 8000 	nop.w

08012b90 <pxCurrentTCBConst>:
 8012b90:	24000d38 	.word	0x24000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012b94:	bf00      	nop
 8012b96:	bf00      	nop

08012b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8012b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	607b      	str	r3, [r7, #4]
}
 8012bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012bb2:	f7fe fe09 	bl	80117c8 <xTaskIncrementTick>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d003      	beq.n	8012bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012bbc:	4b06      	ldr	r3, [pc, #24]	; (8012bd8 <xPortSysTickHandler+0x40>)
 8012bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bc2:	601a      	str	r2, [r3, #0]
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	f383 8811 	msr	BASEPRI, r3
}
 8012bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012bd0:	bf00      	nop
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	e000ed04 	.word	0xe000ed04

08012bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012bdc:	b480      	push	{r7}
 8012bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012be0:	4b0b      	ldr	r3, [pc, #44]	; (8012c10 <vPortSetupTimerInterrupt+0x34>)
 8012be2:	2200      	movs	r2, #0
 8012be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012be6:	4b0b      	ldr	r3, [pc, #44]	; (8012c14 <vPortSetupTimerInterrupt+0x38>)
 8012be8:	2200      	movs	r2, #0
 8012bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012bec:	4b0a      	ldr	r3, [pc, #40]	; (8012c18 <vPortSetupTimerInterrupt+0x3c>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4a0a      	ldr	r2, [pc, #40]	; (8012c1c <vPortSetupTimerInterrupt+0x40>)
 8012bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8012bf6:	099b      	lsrs	r3, r3, #6
 8012bf8:	4a09      	ldr	r2, [pc, #36]	; (8012c20 <vPortSetupTimerInterrupt+0x44>)
 8012bfa:	3b01      	subs	r3, #1
 8012bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012bfe:	4b04      	ldr	r3, [pc, #16]	; (8012c10 <vPortSetupTimerInterrupt+0x34>)
 8012c00:	2207      	movs	r2, #7
 8012c02:	601a      	str	r2, [r3, #0]
}
 8012c04:	bf00      	nop
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr
 8012c0e:	bf00      	nop
 8012c10:	e000e010 	.word	0xe000e010
 8012c14:	e000e018 	.word	0xe000e018
 8012c18:	24000000 	.word	0x24000000
 8012c1c:	10624dd3 	.word	0x10624dd3
 8012c20:	e000e014 	.word	0xe000e014

08012c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012c34 <vPortEnableVFP+0x10>
 8012c28:	6801      	ldr	r1, [r0, #0]
 8012c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012c2e:	6001      	str	r1, [r0, #0]
 8012c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012c32:	bf00      	nop
 8012c34:	e000ed88 	.word	0xe000ed88

08012c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012c38:	b480      	push	{r7}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012c3e:	f3ef 8305 	mrs	r3, IPSR
 8012c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2b0f      	cmp	r3, #15
 8012c48:	d914      	bls.n	8012c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012c4a:	4a17      	ldr	r2, [pc, #92]	; (8012ca8 <vPortValidateInterruptPriority+0x70>)
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	4413      	add	r3, r2
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012c54:	4b15      	ldr	r3, [pc, #84]	; (8012cac <vPortValidateInterruptPriority+0x74>)
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	7afa      	ldrb	r2, [r7, #11]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d20a      	bcs.n	8012c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c62:	f383 8811 	msr	BASEPRI, r3
 8012c66:	f3bf 8f6f 	isb	sy
 8012c6a:	f3bf 8f4f 	dsb	sy
 8012c6e:	607b      	str	r3, [r7, #4]
}
 8012c70:	bf00      	nop
 8012c72:	e7fe      	b.n	8012c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012c74:	4b0e      	ldr	r3, [pc, #56]	; (8012cb0 <vPortValidateInterruptPriority+0x78>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012c7c:	4b0d      	ldr	r3, [pc, #52]	; (8012cb4 <vPortValidateInterruptPriority+0x7c>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d90a      	bls.n	8012c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c88:	f383 8811 	msr	BASEPRI, r3
 8012c8c:	f3bf 8f6f 	isb	sy
 8012c90:	f3bf 8f4f 	dsb	sy
 8012c94:	603b      	str	r3, [r7, #0]
}
 8012c96:	bf00      	nop
 8012c98:	e7fe      	b.n	8012c98 <vPortValidateInterruptPriority+0x60>
	}
 8012c9a:	bf00      	nop
 8012c9c:	3714      	adds	r7, #20
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca4:	4770      	bx	lr
 8012ca6:	bf00      	nop
 8012ca8:	e000e3f0 	.word	0xe000e3f0
 8012cac:	24001364 	.word	0x24001364
 8012cb0:	e000ed0c 	.word	0xe000ed0c
 8012cb4:	24001368 	.word	0x24001368

08012cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b08a      	sub	sp, #40	; 0x28
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012cc4:	f7fe fcc4 	bl	8011650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012cc8:	4b5b      	ldr	r3, [pc, #364]	; (8012e38 <pvPortMalloc+0x180>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d101      	bne.n	8012cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012cd0:	f000 f920 	bl	8012f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012cd4:	4b59      	ldr	r3, [pc, #356]	; (8012e3c <pvPortMalloc+0x184>)
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	4013      	ands	r3, r2
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f040 8093 	bne.w	8012e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d01d      	beq.n	8012d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012ce8:	2208      	movs	r2, #8
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4413      	add	r3, r2
 8012cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f003 0307 	and.w	r3, r3, #7
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d014      	beq.n	8012d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f023 0307 	bic.w	r3, r3, #7
 8012d00:	3308      	adds	r3, #8
 8012d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f003 0307 	and.w	r3, r3, #7
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00a      	beq.n	8012d24 <pvPortMalloc+0x6c>
	__asm volatile
 8012d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d12:	f383 8811 	msr	BASEPRI, r3
 8012d16:	f3bf 8f6f 	isb	sy
 8012d1a:	f3bf 8f4f 	dsb	sy
 8012d1e:	617b      	str	r3, [r7, #20]
}
 8012d20:	bf00      	nop
 8012d22:	e7fe      	b.n	8012d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d06e      	beq.n	8012e08 <pvPortMalloc+0x150>
 8012d2a:	4b45      	ldr	r3, [pc, #276]	; (8012e40 <pvPortMalloc+0x188>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d869      	bhi.n	8012e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012d34:	4b43      	ldr	r3, [pc, #268]	; (8012e44 <pvPortMalloc+0x18c>)
 8012d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012d38:	4b42      	ldr	r3, [pc, #264]	; (8012e44 <pvPortMalloc+0x18c>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d3e:	e004      	b.n	8012d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d903      	bls.n	8012d5c <pvPortMalloc+0xa4>
 8012d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d1f1      	bne.n	8012d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012d5c:	4b36      	ldr	r3, [pc, #216]	; (8012e38 <pvPortMalloc+0x180>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d050      	beq.n	8012e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012d66:	6a3b      	ldr	r3, [r7, #32]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2208      	movs	r2, #8
 8012d6c:	4413      	add	r3, r2
 8012d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	6a3b      	ldr	r3, [r7, #32]
 8012d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7a:	685a      	ldr	r2, [r3, #4]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	1ad2      	subs	r2, r2, r3
 8012d80:	2308      	movs	r3, #8
 8012d82:	005b      	lsls	r3, r3, #1
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d91f      	bls.n	8012dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d90:	69bb      	ldr	r3, [r7, #24]
 8012d92:	f003 0307 	and.w	r3, r3, #7
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d00a      	beq.n	8012db0 <pvPortMalloc+0xf8>
	__asm volatile
 8012d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9e:	f383 8811 	msr	BASEPRI, r3
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	613b      	str	r3, [r7, #16]
}
 8012dac:	bf00      	nop
 8012dae:	e7fe      	b.n	8012dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db2:	685a      	ldr	r2, [r3, #4]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	1ad2      	subs	r2, r2, r3
 8012db8:	69bb      	ldr	r3, [r7, #24]
 8012dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012dc2:	69b8      	ldr	r0, [r7, #24]
 8012dc4:	f000 f908 	bl	8012fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012dc8:	4b1d      	ldr	r3, [pc, #116]	; (8012e40 <pvPortMalloc+0x188>)
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	1ad3      	subs	r3, r2, r3
 8012dd2:	4a1b      	ldr	r2, [pc, #108]	; (8012e40 <pvPortMalloc+0x188>)
 8012dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012dd6:	4b1a      	ldr	r3, [pc, #104]	; (8012e40 <pvPortMalloc+0x188>)
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	4b1b      	ldr	r3, [pc, #108]	; (8012e48 <pvPortMalloc+0x190>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d203      	bcs.n	8012dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012de2:	4b17      	ldr	r3, [pc, #92]	; (8012e40 <pvPortMalloc+0x188>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	4a18      	ldr	r2, [pc, #96]	; (8012e48 <pvPortMalloc+0x190>)
 8012de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dec:	685a      	ldr	r2, [r3, #4]
 8012dee:	4b13      	ldr	r3, [pc, #76]	; (8012e3c <pvPortMalloc+0x184>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	431a      	orrs	r2, r3
 8012df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012dfe:	4b13      	ldr	r3, [pc, #76]	; (8012e4c <pvPortMalloc+0x194>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	3301      	adds	r3, #1
 8012e04:	4a11      	ldr	r2, [pc, #68]	; (8012e4c <pvPortMalloc+0x194>)
 8012e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012e08:	f7fe fc30 	bl	801166c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e0c:	69fb      	ldr	r3, [r7, #28]
 8012e0e:	f003 0307 	and.w	r3, r3, #7
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00a      	beq.n	8012e2c <pvPortMalloc+0x174>
	__asm volatile
 8012e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e1a:	f383 8811 	msr	BASEPRI, r3
 8012e1e:	f3bf 8f6f 	isb	sy
 8012e22:	f3bf 8f4f 	dsb	sy
 8012e26:	60fb      	str	r3, [r7, #12]
}
 8012e28:	bf00      	nop
 8012e2a:	e7fe      	b.n	8012e2a <pvPortMalloc+0x172>
	return pvReturn;
 8012e2c:	69fb      	ldr	r3, [r7, #28]
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3728      	adds	r7, #40	; 0x28
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	24004f74 	.word	0x24004f74
 8012e3c:	24004f88 	.word	0x24004f88
 8012e40:	24004f78 	.word	0x24004f78
 8012e44:	24004f6c 	.word	0x24004f6c
 8012e48:	24004f7c 	.word	0x24004f7c
 8012e4c:	24004f80 	.word	0x24004f80

08012e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d04d      	beq.n	8012efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012e62:	2308      	movs	r3, #8
 8012e64:	425b      	negs	r3, r3
 8012e66:	697a      	ldr	r2, [r7, #20]
 8012e68:	4413      	add	r3, r2
 8012e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	4b24      	ldr	r3, [pc, #144]	; (8012f08 <vPortFree+0xb8>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4013      	ands	r3, r2
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d10a      	bne.n	8012e94 <vPortFree+0x44>
	__asm volatile
 8012e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e82:	f383 8811 	msr	BASEPRI, r3
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	f3bf 8f4f 	dsb	sy
 8012e8e:	60fb      	str	r3, [r7, #12]
}
 8012e90:	bf00      	nop
 8012e92:	e7fe      	b.n	8012e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d00a      	beq.n	8012eb2 <vPortFree+0x62>
	__asm volatile
 8012e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea0:	f383 8811 	msr	BASEPRI, r3
 8012ea4:	f3bf 8f6f 	isb	sy
 8012ea8:	f3bf 8f4f 	dsb	sy
 8012eac:	60bb      	str	r3, [r7, #8]
}
 8012eae:	bf00      	nop
 8012eb0:	e7fe      	b.n	8012eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	685a      	ldr	r2, [r3, #4]
 8012eb6:	4b14      	ldr	r3, [pc, #80]	; (8012f08 <vPortFree+0xb8>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	4013      	ands	r3, r2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d01e      	beq.n	8012efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d11a      	bne.n	8012efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	685a      	ldr	r2, [r3, #4]
 8012ecc:	4b0e      	ldr	r3, [pc, #56]	; (8012f08 <vPortFree+0xb8>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	43db      	mvns	r3, r3
 8012ed2:	401a      	ands	r2, r3
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012ed8:	f7fe fbba 	bl	8011650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	685a      	ldr	r2, [r3, #4]
 8012ee0:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <vPortFree+0xbc>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	4a09      	ldr	r2, [pc, #36]	; (8012f0c <vPortFree+0xbc>)
 8012ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012eea:	6938      	ldr	r0, [r7, #16]
 8012eec:	f000 f874 	bl	8012fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012ef0:	4b07      	ldr	r3, [pc, #28]	; (8012f10 <vPortFree+0xc0>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	4a06      	ldr	r2, [pc, #24]	; (8012f10 <vPortFree+0xc0>)
 8012ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012efa:	f7fe fbb7 	bl	801166c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012efe:	bf00      	nop
 8012f00:	3718      	adds	r7, #24
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	24004f88 	.word	0x24004f88
 8012f0c:	24004f78 	.word	0x24004f78
 8012f10:	24004f84 	.word	0x24004f84

08012f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012f14:	b480      	push	{r7}
 8012f16:	b085      	sub	sp, #20
 8012f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012f20:	4b27      	ldr	r3, [pc, #156]	; (8012fc0 <prvHeapInit+0xac>)
 8012f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f003 0307 	and.w	r3, r3, #7
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00c      	beq.n	8012f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	3307      	adds	r3, #7
 8012f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f023 0307 	bic.w	r3, r3, #7
 8012f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012f3c:	68ba      	ldr	r2, [r7, #8]
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	1ad3      	subs	r3, r2, r3
 8012f42:	4a1f      	ldr	r2, [pc, #124]	; (8012fc0 <prvHeapInit+0xac>)
 8012f44:	4413      	add	r3, r2
 8012f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012f4c:	4a1d      	ldr	r2, [pc, #116]	; (8012fc4 <prvHeapInit+0xb0>)
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012f52:	4b1c      	ldr	r3, [pc, #112]	; (8012fc4 <prvHeapInit+0xb0>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	68ba      	ldr	r2, [r7, #8]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012f60:	2208      	movs	r2, #8
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	1a9b      	subs	r3, r3, r2
 8012f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	f023 0307 	bic.w	r3, r3, #7
 8012f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	4a15      	ldr	r2, [pc, #84]	; (8012fc8 <prvHeapInit+0xb4>)
 8012f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012f76:	4b14      	ldr	r3, [pc, #80]	; (8012fc8 <prvHeapInit+0xb4>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012f7e:	4b12      	ldr	r3, [pc, #72]	; (8012fc8 <prvHeapInit+0xb4>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2200      	movs	r2, #0
 8012f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	1ad2      	subs	r2, r2, r3
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012f94:	4b0c      	ldr	r3, [pc, #48]	; (8012fc8 <prvHeapInit+0xb4>)
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	4a0a      	ldr	r2, [pc, #40]	; (8012fcc <prvHeapInit+0xb8>)
 8012fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	4a09      	ldr	r2, [pc, #36]	; (8012fd0 <prvHeapInit+0xbc>)
 8012faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012fac:	4b09      	ldr	r3, [pc, #36]	; (8012fd4 <prvHeapInit+0xc0>)
 8012fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012fb2:	601a      	str	r2, [r3, #0]
}
 8012fb4:	bf00      	nop
 8012fb6:	3714      	adds	r7, #20
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr
 8012fc0:	2400136c 	.word	0x2400136c
 8012fc4:	24004f6c 	.word	0x24004f6c
 8012fc8:	24004f74 	.word	0x24004f74
 8012fcc:	24004f7c 	.word	0x24004f7c
 8012fd0:	24004f78 	.word	0x24004f78
 8012fd4:	24004f88 	.word	0x24004f88

08012fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012fe0:	4b28      	ldr	r3, [pc, #160]	; (8013084 <prvInsertBlockIntoFreeList+0xac>)
 8012fe2:	60fb      	str	r3, [r7, #12]
 8012fe4:	e002      	b.n	8012fec <prvInsertBlockIntoFreeList+0x14>
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	60fb      	str	r3, [r7, #12]
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d8f7      	bhi.n	8012fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	68ba      	ldr	r2, [r7, #8]
 8013000:	4413      	add	r3, r2
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	429a      	cmp	r2, r3
 8013006:	d108      	bne.n	801301a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	685a      	ldr	r2, [r3, #4]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	685b      	ldr	r3, [r3, #4]
 8013010:	441a      	add	r2, r3
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	441a      	add	r2, r3
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	429a      	cmp	r2, r3
 801302c:	d118      	bne.n	8013060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	4b15      	ldr	r3, [pc, #84]	; (8013088 <prvInsertBlockIntoFreeList+0xb0>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	429a      	cmp	r2, r3
 8013038:	d00d      	beq.n	8013056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	685a      	ldr	r2, [r3, #4]
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	685b      	ldr	r3, [r3, #4]
 8013044:	441a      	add	r2, r3
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	601a      	str	r2, [r3, #0]
 8013054:	e008      	b.n	8013068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013056:	4b0c      	ldr	r3, [pc, #48]	; (8013088 <prvInsertBlockIntoFreeList+0xb0>)
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	601a      	str	r2, [r3, #0]
 801305e:	e003      	b.n	8013068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	681a      	ldr	r2, [r3, #0]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013068:	68fa      	ldr	r2, [r7, #12]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	429a      	cmp	r2, r3
 801306e:	d002      	beq.n	8013076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013076:	bf00      	nop
 8013078:	3714      	adds	r7, #20
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	24004f6c 	.word	0x24004f6c
 8013088:	24004f74 	.word	0x24004f74

0801308c <__errno>:
 801308c:	4b01      	ldr	r3, [pc, #4]	; (8013094 <__errno+0x8>)
 801308e:	6818      	ldr	r0, [r3, #0]
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop
 8013094:	24000014 	.word	0x24000014

08013098 <__libc_init_array>:
 8013098:	b570      	push	{r4, r5, r6, lr}
 801309a:	4d0d      	ldr	r5, [pc, #52]	; (80130d0 <__libc_init_array+0x38>)
 801309c:	4c0d      	ldr	r4, [pc, #52]	; (80130d4 <__libc_init_array+0x3c>)
 801309e:	1b64      	subs	r4, r4, r5
 80130a0:	10a4      	asrs	r4, r4, #2
 80130a2:	2600      	movs	r6, #0
 80130a4:	42a6      	cmp	r6, r4
 80130a6:	d109      	bne.n	80130bc <__libc_init_array+0x24>
 80130a8:	4d0b      	ldr	r5, [pc, #44]	; (80130d8 <__libc_init_array+0x40>)
 80130aa:	4c0c      	ldr	r4, [pc, #48]	; (80130dc <__libc_init_array+0x44>)
 80130ac:	f001 f842 	bl	8014134 <_init>
 80130b0:	1b64      	subs	r4, r4, r5
 80130b2:	10a4      	asrs	r4, r4, #2
 80130b4:	2600      	movs	r6, #0
 80130b6:	42a6      	cmp	r6, r4
 80130b8:	d105      	bne.n	80130c6 <__libc_init_array+0x2e>
 80130ba:	bd70      	pop	{r4, r5, r6, pc}
 80130bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80130c0:	4798      	blx	r3
 80130c2:	3601      	adds	r6, #1
 80130c4:	e7ee      	b.n	80130a4 <__libc_init_array+0xc>
 80130c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ca:	4798      	blx	r3
 80130cc:	3601      	adds	r6, #1
 80130ce:	e7f2      	b.n	80130b6 <__libc_init_array+0x1e>
 80130d0:	08014504 	.word	0x08014504
 80130d4:	08014504 	.word	0x08014504
 80130d8:	08014504 	.word	0x08014504
 80130dc:	08014508 	.word	0x08014508

080130e0 <malloc>:
 80130e0:	4b02      	ldr	r3, [pc, #8]	; (80130ec <malloc+0xc>)
 80130e2:	4601      	mov	r1, r0
 80130e4:	6818      	ldr	r0, [r3, #0]
 80130e6:	f000 b88d 	b.w	8013204 <_malloc_r>
 80130ea:	bf00      	nop
 80130ec:	24000014 	.word	0x24000014

080130f0 <free>:
 80130f0:	4b02      	ldr	r3, [pc, #8]	; (80130fc <free+0xc>)
 80130f2:	4601      	mov	r1, r0
 80130f4:	6818      	ldr	r0, [r3, #0]
 80130f6:	f000 b819 	b.w	801312c <_free_r>
 80130fa:	bf00      	nop
 80130fc:	24000014 	.word	0x24000014

08013100 <memcpy>:
 8013100:	440a      	add	r2, r1
 8013102:	4291      	cmp	r1, r2
 8013104:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013108:	d100      	bne.n	801310c <memcpy+0xc>
 801310a:	4770      	bx	lr
 801310c:	b510      	push	{r4, lr}
 801310e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013116:	4291      	cmp	r1, r2
 8013118:	d1f9      	bne.n	801310e <memcpy+0xe>
 801311a:	bd10      	pop	{r4, pc}

0801311c <memset>:
 801311c:	4402      	add	r2, r0
 801311e:	4603      	mov	r3, r0
 8013120:	4293      	cmp	r3, r2
 8013122:	d100      	bne.n	8013126 <memset+0xa>
 8013124:	4770      	bx	lr
 8013126:	f803 1b01 	strb.w	r1, [r3], #1
 801312a:	e7f9      	b.n	8013120 <memset+0x4>

0801312c <_free_r>:
 801312c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801312e:	2900      	cmp	r1, #0
 8013130:	d044      	beq.n	80131bc <_free_r+0x90>
 8013132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013136:	9001      	str	r0, [sp, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	f1a1 0404 	sub.w	r4, r1, #4
 801313e:	bfb8      	it	lt
 8013140:	18e4      	addlt	r4, r4, r3
 8013142:	f000 fc51 	bl	80139e8 <__malloc_lock>
 8013146:	4a1e      	ldr	r2, [pc, #120]	; (80131c0 <_free_r+0x94>)
 8013148:	9801      	ldr	r0, [sp, #4]
 801314a:	6813      	ldr	r3, [r2, #0]
 801314c:	b933      	cbnz	r3, 801315c <_free_r+0x30>
 801314e:	6063      	str	r3, [r4, #4]
 8013150:	6014      	str	r4, [r2, #0]
 8013152:	b003      	add	sp, #12
 8013154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013158:	f000 bc4c 	b.w	80139f4 <__malloc_unlock>
 801315c:	42a3      	cmp	r3, r4
 801315e:	d908      	bls.n	8013172 <_free_r+0x46>
 8013160:	6825      	ldr	r5, [r4, #0]
 8013162:	1961      	adds	r1, r4, r5
 8013164:	428b      	cmp	r3, r1
 8013166:	bf01      	itttt	eq
 8013168:	6819      	ldreq	r1, [r3, #0]
 801316a:	685b      	ldreq	r3, [r3, #4]
 801316c:	1949      	addeq	r1, r1, r5
 801316e:	6021      	streq	r1, [r4, #0]
 8013170:	e7ed      	b.n	801314e <_free_r+0x22>
 8013172:	461a      	mov	r2, r3
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	b10b      	cbz	r3, 801317c <_free_r+0x50>
 8013178:	42a3      	cmp	r3, r4
 801317a:	d9fa      	bls.n	8013172 <_free_r+0x46>
 801317c:	6811      	ldr	r1, [r2, #0]
 801317e:	1855      	adds	r5, r2, r1
 8013180:	42a5      	cmp	r5, r4
 8013182:	d10b      	bne.n	801319c <_free_r+0x70>
 8013184:	6824      	ldr	r4, [r4, #0]
 8013186:	4421      	add	r1, r4
 8013188:	1854      	adds	r4, r2, r1
 801318a:	42a3      	cmp	r3, r4
 801318c:	6011      	str	r1, [r2, #0]
 801318e:	d1e0      	bne.n	8013152 <_free_r+0x26>
 8013190:	681c      	ldr	r4, [r3, #0]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	6053      	str	r3, [r2, #4]
 8013196:	4421      	add	r1, r4
 8013198:	6011      	str	r1, [r2, #0]
 801319a:	e7da      	b.n	8013152 <_free_r+0x26>
 801319c:	d902      	bls.n	80131a4 <_free_r+0x78>
 801319e:	230c      	movs	r3, #12
 80131a0:	6003      	str	r3, [r0, #0]
 80131a2:	e7d6      	b.n	8013152 <_free_r+0x26>
 80131a4:	6825      	ldr	r5, [r4, #0]
 80131a6:	1961      	adds	r1, r4, r5
 80131a8:	428b      	cmp	r3, r1
 80131aa:	bf04      	itt	eq
 80131ac:	6819      	ldreq	r1, [r3, #0]
 80131ae:	685b      	ldreq	r3, [r3, #4]
 80131b0:	6063      	str	r3, [r4, #4]
 80131b2:	bf04      	itt	eq
 80131b4:	1949      	addeq	r1, r1, r5
 80131b6:	6021      	streq	r1, [r4, #0]
 80131b8:	6054      	str	r4, [r2, #4]
 80131ba:	e7ca      	b.n	8013152 <_free_r+0x26>
 80131bc:	b003      	add	sp, #12
 80131be:	bd30      	pop	{r4, r5, pc}
 80131c0:	24004f8c 	.word	0x24004f8c

080131c4 <sbrk_aligned>:
 80131c4:	b570      	push	{r4, r5, r6, lr}
 80131c6:	4e0e      	ldr	r6, [pc, #56]	; (8013200 <sbrk_aligned+0x3c>)
 80131c8:	460c      	mov	r4, r1
 80131ca:	6831      	ldr	r1, [r6, #0]
 80131cc:	4605      	mov	r5, r0
 80131ce:	b911      	cbnz	r1, 80131d6 <sbrk_aligned+0x12>
 80131d0:	f000 f91a 	bl	8013408 <_sbrk_r>
 80131d4:	6030      	str	r0, [r6, #0]
 80131d6:	4621      	mov	r1, r4
 80131d8:	4628      	mov	r0, r5
 80131da:	f000 f915 	bl	8013408 <_sbrk_r>
 80131de:	1c43      	adds	r3, r0, #1
 80131e0:	d00a      	beq.n	80131f8 <sbrk_aligned+0x34>
 80131e2:	1cc4      	adds	r4, r0, #3
 80131e4:	f024 0403 	bic.w	r4, r4, #3
 80131e8:	42a0      	cmp	r0, r4
 80131ea:	d007      	beq.n	80131fc <sbrk_aligned+0x38>
 80131ec:	1a21      	subs	r1, r4, r0
 80131ee:	4628      	mov	r0, r5
 80131f0:	f000 f90a 	bl	8013408 <_sbrk_r>
 80131f4:	3001      	adds	r0, #1
 80131f6:	d101      	bne.n	80131fc <sbrk_aligned+0x38>
 80131f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80131fc:	4620      	mov	r0, r4
 80131fe:	bd70      	pop	{r4, r5, r6, pc}
 8013200:	24004f90 	.word	0x24004f90

08013204 <_malloc_r>:
 8013204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013208:	1ccd      	adds	r5, r1, #3
 801320a:	f025 0503 	bic.w	r5, r5, #3
 801320e:	3508      	adds	r5, #8
 8013210:	2d0c      	cmp	r5, #12
 8013212:	bf38      	it	cc
 8013214:	250c      	movcc	r5, #12
 8013216:	2d00      	cmp	r5, #0
 8013218:	4607      	mov	r7, r0
 801321a:	db01      	blt.n	8013220 <_malloc_r+0x1c>
 801321c:	42a9      	cmp	r1, r5
 801321e:	d905      	bls.n	801322c <_malloc_r+0x28>
 8013220:	230c      	movs	r3, #12
 8013222:	603b      	str	r3, [r7, #0]
 8013224:	2600      	movs	r6, #0
 8013226:	4630      	mov	r0, r6
 8013228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801322c:	4e2e      	ldr	r6, [pc, #184]	; (80132e8 <_malloc_r+0xe4>)
 801322e:	f000 fbdb 	bl	80139e8 <__malloc_lock>
 8013232:	6833      	ldr	r3, [r6, #0]
 8013234:	461c      	mov	r4, r3
 8013236:	bb34      	cbnz	r4, 8013286 <_malloc_r+0x82>
 8013238:	4629      	mov	r1, r5
 801323a:	4638      	mov	r0, r7
 801323c:	f7ff ffc2 	bl	80131c4 <sbrk_aligned>
 8013240:	1c43      	adds	r3, r0, #1
 8013242:	4604      	mov	r4, r0
 8013244:	d14d      	bne.n	80132e2 <_malloc_r+0xde>
 8013246:	6834      	ldr	r4, [r6, #0]
 8013248:	4626      	mov	r6, r4
 801324a:	2e00      	cmp	r6, #0
 801324c:	d140      	bne.n	80132d0 <_malloc_r+0xcc>
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	4631      	mov	r1, r6
 8013252:	4638      	mov	r0, r7
 8013254:	eb04 0803 	add.w	r8, r4, r3
 8013258:	f000 f8d6 	bl	8013408 <_sbrk_r>
 801325c:	4580      	cmp	r8, r0
 801325e:	d13a      	bne.n	80132d6 <_malloc_r+0xd2>
 8013260:	6821      	ldr	r1, [r4, #0]
 8013262:	3503      	adds	r5, #3
 8013264:	1a6d      	subs	r5, r5, r1
 8013266:	f025 0503 	bic.w	r5, r5, #3
 801326a:	3508      	adds	r5, #8
 801326c:	2d0c      	cmp	r5, #12
 801326e:	bf38      	it	cc
 8013270:	250c      	movcc	r5, #12
 8013272:	4629      	mov	r1, r5
 8013274:	4638      	mov	r0, r7
 8013276:	f7ff ffa5 	bl	80131c4 <sbrk_aligned>
 801327a:	3001      	adds	r0, #1
 801327c:	d02b      	beq.n	80132d6 <_malloc_r+0xd2>
 801327e:	6823      	ldr	r3, [r4, #0]
 8013280:	442b      	add	r3, r5
 8013282:	6023      	str	r3, [r4, #0]
 8013284:	e00e      	b.n	80132a4 <_malloc_r+0xa0>
 8013286:	6822      	ldr	r2, [r4, #0]
 8013288:	1b52      	subs	r2, r2, r5
 801328a:	d41e      	bmi.n	80132ca <_malloc_r+0xc6>
 801328c:	2a0b      	cmp	r2, #11
 801328e:	d916      	bls.n	80132be <_malloc_r+0xba>
 8013290:	1961      	adds	r1, r4, r5
 8013292:	42a3      	cmp	r3, r4
 8013294:	6025      	str	r5, [r4, #0]
 8013296:	bf18      	it	ne
 8013298:	6059      	strne	r1, [r3, #4]
 801329a:	6863      	ldr	r3, [r4, #4]
 801329c:	bf08      	it	eq
 801329e:	6031      	streq	r1, [r6, #0]
 80132a0:	5162      	str	r2, [r4, r5]
 80132a2:	604b      	str	r3, [r1, #4]
 80132a4:	4638      	mov	r0, r7
 80132a6:	f104 060b 	add.w	r6, r4, #11
 80132aa:	f000 fba3 	bl	80139f4 <__malloc_unlock>
 80132ae:	f026 0607 	bic.w	r6, r6, #7
 80132b2:	1d23      	adds	r3, r4, #4
 80132b4:	1af2      	subs	r2, r6, r3
 80132b6:	d0b6      	beq.n	8013226 <_malloc_r+0x22>
 80132b8:	1b9b      	subs	r3, r3, r6
 80132ba:	50a3      	str	r3, [r4, r2]
 80132bc:	e7b3      	b.n	8013226 <_malloc_r+0x22>
 80132be:	6862      	ldr	r2, [r4, #4]
 80132c0:	42a3      	cmp	r3, r4
 80132c2:	bf0c      	ite	eq
 80132c4:	6032      	streq	r2, [r6, #0]
 80132c6:	605a      	strne	r2, [r3, #4]
 80132c8:	e7ec      	b.n	80132a4 <_malloc_r+0xa0>
 80132ca:	4623      	mov	r3, r4
 80132cc:	6864      	ldr	r4, [r4, #4]
 80132ce:	e7b2      	b.n	8013236 <_malloc_r+0x32>
 80132d0:	4634      	mov	r4, r6
 80132d2:	6876      	ldr	r6, [r6, #4]
 80132d4:	e7b9      	b.n	801324a <_malloc_r+0x46>
 80132d6:	230c      	movs	r3, #12
 80132d8:	603b      	str	r3, [r7, #0]
 80132da:	4638      	mov	r0, r7
 80132dc:	f000 fb8a 	bl	80139f4 <__malloc_unlock>
 80132e0:	e7a1      	b.n	8013226 <_malloc_r+0x22>
 80132e2:	6025      	str	r5, [r4, #0]
 80132e4:	e7de      	b.n	80132a4 <_malloc_r+0xa0>
 80132e6:	bf00      	nop
 80132e8:	24004f8c 	.word	0x24004f8c

080132ec <iprintf>:
 80132ec:	b40f      	push	{r0, r1, r2, r3}
 80132ee:	4b0a      	ldr	r3, [pc, #40]	; (8013318 <iprintf+0x2c>)
 80132f0:	b513      	push	{r0, r1, r4, lr}
 80132f2:	681c      	ldr	r4, [r3, #0]
 80132f4:	b124      	cbz	r4, 8013300 <iprintf+0x14>
 80132f6:	69a3      	ldr	r3, [r4, #24]
 80132f8:	b913      	cbnz	r3, 8013300 <iprintf+0x14>
 80132fa:	4620      	mov	r0, r4
 80132fc:	f000 fa6e 	bl	80137dc <__sinit>
 8013300:	ab05      	add	r3, sp, #20
 8013302:	9a04      	ldr	r2, [sp, #16]
 8013304:	68a1      	ldr	r1, [r4, #8]
 8013306:	9301      	str	r3, [sp, #4]
 8013308:	4620      	mov	r0, r4
 801330a:	f000 fba3 	bl	8013a54 <_vfiprintf_r>
 801330e:	b002      	add	sp, #8
 8013310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013314:	b004      	add	sp, #16
 8013316:	4770      	bx	lr
 8013318:	24000014 	.word	0x24000014

0801331c <_puts_r>:
 801331c:	b570      	push	{r4, r5, r6, lr}
 801331e:	460e      	mov	r6, r1
 8013320:	4605      	mov	r5, r0
 8013322:	b118      	cbz	r0, 801332c <_puts_r+0x10>
 8013324:	6983      	ldr	r3, [r0, #24]
 8013326:	b90b      	cbnz	r3, 801332c <_puts_r+0x10>
 8013328:	f000 fa58 	bl	80137dc <__sinit>
 801332c:	69ab      	ldr	r3, [r5, #24]
 801332e:	68ac      	ldr	r4, [r5, #8]
 8013330:	b913      	cbnz	r3, 8013338 <_puts_r+0x1c>
 8013332:	4628      	mov	r0, r5
 8013334:	f000 fa52 	bl	80137dc <__sinit>
 8013338:	4b2c      	ldr	r3, [pc, #176]	; (80133ec <_puts_r+0xd0>)
 801333a:	429c      	cmp	r4, r3
 801333c:	d120      	bne.n	8013380 <_puts_r+0x64>
 801333e:	686c      	ldr	r4, [r5, #4]
 8013340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013342:	07db      	lsls	r3, r3, #31
 8013344:	d405      	bmi.n	8013352 <_puts_r+0x36>
 8013346:	89a3      	ldrh	r3, [r4, #12]
 8013348:	0598      	lsls	r0, r3, #22
 801334a:	d402      	bmi.n	8013352 <_puts_r+0x36>
 801334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801334e:	f000 fae3 	bl	8013918 <__retarget_lock_acquire_recursive>
 8013352:	89a3      	ldrh	r3, [r4, #12]
 8013354:	0719      	lsls	r1, r3, #28
 8013356:	d51d      	bpl.n	8013394 <_puts_r+0x78>
 8013358:	6923      	ldr	r3, [r4, #16]
 801335a:	b1db      	cbz	r3, 8013394 <_puts_r+0x78>
 801335c:	3e01      	subs	r6, #1
 801335e:	68a3      	ldr	r3, [r4, #8]
 8013360:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013364:	3b01      	subs	r3, #1
 8013366:	60a3      	str	r3, [r4, #8]
 8013368:	bb39      	cbnz	r1, 80133ba <_puts_r+0x9e>
 801336a:	2b00      	cmp	r3, #0
 801336c:	da38      	bge.n	80133e0 <_puts_r+0xc4>
 801336e:	4622      	mov	r2, r4
 8013370:	210a      	movs	r1, #10
 8013372:	4628      	mov	r0, r5
 8013374:	f000 f858 	bl	8013428 <__swbuf_r>
 8013378:	3001      	adds	r0, #1
 801337a:	d011      	beq.n	80133a0 <_puts_r+0x84>
 801337c:	250a      	movs	r5, #10
 801337e:	e011      	b.n	80133a4 <_puts_r+0x88>
 8013380:	4b1b      	ldr	r3, [pc, #108]	; (80133f0 <_puts_r+0xd4>)
 8013382:	429c      	cmp	r4, r3
 8013384:	d101      	bne.n	801338a <_puts_r+0x6e>
 8013386:	68ac      	ldr	r4, [r5, #8]
 8013388:	e7da      	b.n	8013340 <_puts_r+0x24>
 801338a:	4b1a      	ldr	r3, [pc, #104]	; (80133f4 <_puts_r+0xd8>)
 801338c:	429c      	cmp	r4, r3
 801338e:	bf08      	it	eq
 8013390:	68ec      	ldreq	r4, [r5, #12]
 8013392:	e7d5      	b.n	8013340 <_puts_r+0x24>
 8013394:	4621      	mov	r1, r4
 8013396:	4628      	mov	r0, r5
 8013398:	f000 f898 	bl	80134cc <__swsetup_r>
 801339c:	2800      	cmp	r0, #0
 801339e:	d0dd      	beq.n	801335c <_puts_r+0x40>
 80133a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80133a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133a6:	07da      	lsls	r2, r3, #31
 80133a8:	d405      	bmi.n	80133b6 <_puts_r+0x9a>
 80133aa:	89a3      	ldrh	r3, [r4, #12]
 80133ac:	059b      	lsls	r3, r3, #22
 80133ae:	d402      	bmi.n	80133b6 <_puts_r+0x9a>
 80133b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133b2:	f000 fab2 	bl	801391a <__retarget_lock_release_recursive>
 80133b6:	4628      	mov	r0, r5
 80133b8:	bd70      	pop	{r4, r5, r6, pc}
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	da04      	bge.n	80133c8 <_puts_r+0xac>
 80133be:	69a2      	ldr	r2, [r4, #24]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	dc06      	bgt.n	80133d2 <_puts_r+0xb6>
 80133c4:	290a      	cmp	r1, #10
 80133c6:	d004      	beq.n	80133d2 <_puts_r+0xb6>
 80133c8:	6823      	ldr	r3, [r4, #0]
 80133ca:	1c5a      	adds	r2, r3, #1
 80133cc:	6022      	str	r2, [r4, #0]
 80133ce:	7019      	strb	r1, [r3, #0]
 80133d0:	e7c5      	b.n	801335e <_puts_r+0x42>
 80133d2:	4622      	mov	r2, r4
 80133d4:	4628      	mov	r0, r5
 80133d6:	f000 f827 	bl	8013428 <__swbuf_r>
 80133da:	3001      	adds	r0, #1
 80133dc:	d1bf      	bne.n	801335e <_puts_r+0x42>
 80133de:	e7df      	b.n	80133a0 <_puts_r+0x84>
 80133e0:	6823      	ldr	r3, [r4, #0]
 80133e2:	250a      	movs	r5, #10
 80133e4:	1c5a      	adds	r2, r3, #1
 80133e6:	6022      	str	r2, [r4, #0]
 80133e8:	701d      	strb	r5, [r3, #0]
 80133ea:	e7db      	b.n	80133a4 <_puts_r+0x88>
 80133ec:	08014488 	.word	0x08014488
 80133f0:	080144a8 	.word	0x080144a8
 80133f4:	08014468 	.word	0x08014468

080133f8 <puts>:
 80133f8:	4b02      	ldr	r3, [pc, #8]	; (8013404 <puts+0xc>)
 80133fa:	4601      	mov	r1, r0
 80133fc:	6818      	ldr	r0, [r3, #0]
 80133fe:	f7ff bf8d 	b.w	801331c <_puts_r>
 8013402:	bf00      	nop
 8013404:	24000014 	.word	0x24000014

08013408 <_sbrk_r>:
 8013408:	b538      	push	{r3, r4, r5, lr}
 801340a:	4d06      	ldr	r5, [pc, #24]	; (8013424 <_sbrk_r+0x1c>)
 801340c:	2300      	movs	r3, #0
 801340e:	4604      	mov	r4, r0
 8013410:	4608      	mov	r0, r1
 8013412:	602b      	str	r3, [r5, #0]
 8013414:	f7ef fa2e 	bl	8002874 <_sbrk>
 8013418:	1c43      	adds	r3, r0, #1
 801341a:	d102      	bne.n	8013422 <_sbrk_r+0x1a>
 801341c:	682b      	ldr	r3, [r5, #0]
 801341e:	b103      	cbz	r3, 8013422 <_sbrk_r+0x1a>
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	bd38      	pop	{r3, r4, r5, pc}
 8013424:	24004f98 	.word	0x24004f98

08013428 <__swbuf_r>:
 8013428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801342a:	460e      	mov	r6, r1
 801342c:	4614      	mov	r4, r2
 801342e:	4605      	mov	r5, r0
 8013430:	b118      	cbz	r0, 801343a <__swbuf_r+0x12>
 8013432:	6983      	ldr	r3, [r0, #24]
 8013434:	b90b      	cbnz	r3, 801343a <__swbuf_r+0x12>
 8013436:	f000 f9d1 	bl	80137dc <__sinit>
 801343a:	4b21      	ldr	r3, [pc, #132]	; (80134c0 <__swbuf_r+0x98>)
 801343c:	429c      	cmp	r4, r3
 801343e:	d12b      	bne.n	8013498 <__swbuf_r+0x70>
 8013440:	686c      	ldr	r4, [r5, #4]
 8013442:	69a3      	ldr	r3, [r4, #24]
 8013444:	60a3      	str	r3, [r4, #8]
 8013446:	89a3      	ldrh	r3, [r4, #12]
 8013448:	071a      	lsls	r2, r3, #28
 801344a:	d52f      	bpl.n	80134ac <__swbuf_r+0x84>
 801344c:	6923      	ldr	r3, [r4, #16]
 801344e:	b36b      	cbz	r3, 80134ac <__swbuf_r+0x84>
 8013450:	6923      	ldr	r3, [r4, #16]
 8013452:	6820      	ldr	r0, [r4, #0]
 8013454:	1ac0      	subs	r0, r0, r3
 8013456:	6963      	ldr	r3, [r4, #20]
 8013458:	b2f6      	uxtb	r6, r6
 801345a:	4283      	cmp	r3, r0
 801345c:	4637      	mov	r7, r6
 801345e:	dc04      	bgt.n	801346a <__swbuf_r+0x42>
 8013460:	4621      	mov	r1, r4
 8013462:	4628      	mov	r0, r5
 8013464:	f000 f926 	bl	80136b4 <_fflush_r>
 8013468:	bb30      	cbnz	r0, 80134b8 <__swbuf_r+0x90>
 801346a:	68a3      	ldr	r3, [r4, #8]
 801346c:	3b01      	subs	r3, #1
 801346e:	60a3      	str	r3, [r4, #8]
 8013470:	6823      	ldr	r3, [r4, #0]
 8013472:	1c5a      	adds	r2, r3, #1
 8013474:	6022      	str	r2, [r4, #0]
 8013476:	701e      	strb	r6, [r3, #0]
 8013478:	6963      	ldr	r3, [r4, #20]
 801347a:	3001      	adds	r0, #1
 801347c:	4283      	cmp	r3, r0
 801347e:	d004      	beq.n	801348a <__swbuf_r+0x62>
 8013480:	89a3      	ldrh	r3, [r4, #12]
 8013482:	07db      	lsls	r3, r3, #31
 8013484:	d506      	bpl.n	8013494 <__swbuf_r+0x6c>
 8013486:	2e0a      	cmp	r6, #10
 8013488:	d104      	bne.n	8013494 <__swbuf_r+0x6c>
 801348a:	4621      	mov	r1, r4
 801348c:	4628      	mov	r0, r5
 801348e:	f000 f911 	bl	80136b4 <_fflush_r>
 8013492:	b988      	cbnz	r0, 80134b8 <__swbuf_r+0x90>
 8013494:	4638      	mov	r0, r7
 8013496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013498:	4b0a      	ldr	r3, [pc, #40]	; (80134c4 <__swbuf_r+0x9c>)
 801349a:	429c      	cmp	r4, r3
 801349c:	d101      	bne.n	80134a2 <__swbuf_r+0x7a>
 801349e:	68ac      	ldr	r4, [r5, #8]
 80134a0:	e7cf      	b.n	8013442 <__swbuf_r+0x1a>
 80134a2:	4b09      	ldr	r3, [pc, #36]	; (80134c8 <__swbuf_r+0xa0>)
 80134a4:	429c      	cmp	r4, r3
 80134a6:	bf08      	it	eq
 80134a8:	68ec      	ldreq	r4, [r5, #12]
 80134aa:	e7ca      	b.n	8013442 <__swbuf_r+0x1a>
 80134ac:	4621      	mov	r1, r4
 80134ae:	4628      	mov	r0, r5
 80134b0:	f000 f80c 	bl	80134cc <__swsetup_r>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d0cb      	beq.n	8013450 <__swbuf_r+0x28>
 80134b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80134bc:	e7ea      	b.n	8013494 <__swbuf_r+0x6c>
 80134be:	bf00      	nop
 80134c0:	08014488 	.word	0x08014488
 80134c4:	080144a8 	.word	0x080144a8
 80134c8:	08014468 	.word	0x08014468

080134cc <__swsetup_r>:
 80134cc:	4b32      	ldr	r3, [pc, #200]	; (8013598 <__swsetup_r+0xcc>)
 80134ce:	b570      	push	{r4, r5, r6, lr}
 80134d0:	681d      	ldr	r5, [r3, #0]
 80134d2:	4606      	mov	r6, r0
 80134d4:	460c      	mov	r4, r1
 80134d6:	b125      	cbz	r5, 80134e2 <__swsetup_r+0x16>
 80134d8:	69ab      	ldr	r3, [r5, #24]
 80134da:	b913      	cbnz	r3, 80134e2 <__swsetup_r+0x16>
 80134dc:	4628      	mov	r0, r5
 80134de:	f000 f97d 	bl	80137dc <__sinit>
 80134e2:	4b2e      	ldr	r3, [pc, #184]	; (801359c <__swsetup_r+0xd0>)
 80134e4:	429c      	cmp	r4, r3
 80134e6:	d10f      	bne.n	8013508 <__swsetup_r+0x3c>
 80134e8:	686c      	ldr	r4, [r5, #4]
 80134ea:	89a3      	ldrh	r3, [r4, #12]
 80134ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134f0:	0719      	lsls	r1, r3, #28
 80134f2:	d42c      	bmi.n	801354e <__swsetup_r+0x82>
 80134f4:	06dd      	lsls	r5, r3, #27
 80134f6:	d411      	bmi.n	801351c <__swsetup_r+0x50>
 80134f8:	2309      	movs	r3, #9
 80134fa:	6033      	str	r3, [r6, #0]
 80134fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013500:	81a3      	strh	r3, [r4, #12]
 8013502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013506:	e03e      	b.n	8013586 <__swsetup_r+0xba>
 8013508:	4b25      	ldr	r3, [pc, #148]	; (80135a0 <__swsetup_r+0xd4>)
 801350a:	429c      	cmp	r4, r3
 801350c:	d101      	bne.n	8013512 <__swsetup_r+0x46>
 801350e:	68ac      	ldr	r4, [r5, #8]
 8013510:	e7eb      	b.n	80134ea <__swsetup_r+0x1e>
 8013512:	4b24      	ldr	r3, [pc, #144]	; (80135a4 <__swsetup_r+0xd8>)
 8013514:	429c      	cmp	r4, r3
 8013516:	bf08      	it	eq
 8013518:	68ec      	ldreq	r4, [r5, #12]
 801351a:	e7e6      	b.n	80134ea <__swsetup_r+0x1e>
 801351c:	0758      	lsls	r0, r3, #29
 801351e:	d512      	bpl.n	8013546 <__swsetup_r+0x7a>
 8013520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013522:	b141      	cbz	r1, 8013536 <__swsetup_r+0x6a>
 8013524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013528:	4299      	cmp	r1, r3
 801352a:	d002      	beq.n	8013532 <__swsetup_r+0x66>
 801352c:	4630      	mov	r0, r6
 801352e:	f7ff fdfd 	bl	801312c <_free_r>
 8013532:	2300      	movs	r3, #0
 8013534:	6363      	str	r3, [r4, #52]	; 0x34
 8013536:	89a3      	ldrh	r3, [r4, #12]
 8013538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801353c:	81a3      	strh	r3, [r4, #12]
 801353e:	2300      	movs	r3, #0
 8013540:	6063      	str	r3, [r4, #4]
 8013542:	6923      	ldr	r3, [r4, #16]
 8013544:	6023      	str	r3, [r4, #0]
 8013546:	89a3      	ldrh	r3, [r4, #12]
 8013548:	f043 0308 	orr.w	r3, r3, #8
 801354c:	81a3      	strh	r3, [r4, #12]
 801354e:	6923      	ldr	r3, [r4, #16]
 8013550:	b94b      	cbnz	r3, 8013566 <__swsetup_r+0x9a>
 8013552:	89a3      	ldrh	r3, [r4, #12]
 8013554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801355c:	d003      	beq.n	8013566 <__swsetup_r+0x9a>
 801355e:	4621      	mov	r1, r4
 8013560:	4630      	mov	r0, r6
 8013562:	f000 fa01 	bl	8013968 <__smakebuf_r>
 8013566:	89a0      	ldrh	r0, [r4, #12]
 8013568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801356c:	f010 0301 	ands.w	r3, r0, #1
 8013570:	d00a      	beq.n	8013588 <__swsetup_r+0xbc>
 8013572:	2300      	movs	r3, #0
 8013574:	60a3      	str	r3, [r4, #8]
 8013576:	6963      	ldr	r3, [r4, #20]
 8013578:	425b      	negs	r3, r3
 801357a:	61a3      	str	r3, [r4, #24]
 801357c:	6923      	ldr	r3, [r4, #16]
 801357e:	b943      	cbnz	r3, 8013592 <__swsetup_r+0xc6>
 8013580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013584:	d1ba      	bne.n	80134fc <__swsetup_r+0x30>
 8013586:	bd70      	pop	{r4, r5, r6, pc}
 8013588:	0781      	lsls	r1, r0, #30
 801358a:	bf58      	it	pl
 801358c:	6963      	ldrpl	r3, [r4, #20]
 801358e:	60a3      	str	r3, [r4, #8]
 8013590:	e7f4      	b.n	801357c <__swsetup_r+0xb0>
 8013592:	2000      	movs	r0, #0
 8013594:	e7f7      	b.n	8013586 <__swsetup_r+0xba>
 8013596:	bf00      	nop
 8013598:	24000014 	.word	0x24000014
 801359c:	08014488 	.word	0x08014488
 80135a0:	080144a8 	.word	0x080144a8
 80135a4:	08014468 	.word	0x08014468

080135a8 <__sflush_r>:
 80135a8:	898a      	ldrh	r2, [r1, #12]
 80135aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ae:	4605      	mov	r5, r0
 80135b0:	0710      	lsls	r0, r2, #28
 80135b2:	460c      	mov	r4, r1
 80135b4:	d458      	bmi.n	8013668 <__sflush_r+0xc0>
 80135b6:	684b      	ldr	r3, [r1, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	dc05      	bgt.n	80135c8 <__sflush_r+0x20>
 80135bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80135be:	2b00      	cmp	r3, #0
 80135c0:	dc02      	bgt.n	80135c8 <__sflush_r+0x20>
 80135c2:	2000      	movs	r0, #0
 80135c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135ca:	2e00      	cmp	r6, #0
 80135cc:	d0f9      	beq.n	80135c2 <__sflush_r+0x1a>
 80135ce:	2300      	movs	r3, #0
 80135d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80135d4:	682f      	ldr	r7, [r5, #0]
 80135d6:	602b      	str	r3, [r5, #0]
 80135d8:	d032      	beq.n	8013640 <__sflush_r+0x98>
 80135da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135dc:	89a3      	ldrh	r3, [r4, #12]
 80135de:	075a      	lsls	r2, r3, #29
 80135e0:	d505      	bpl.n	80135ee <__sflush_r+0x46>
 80135e2:	6863      	ldr	r3, [r4, #4]
 80135e4:	1ac0      	subs	r0, r0, r3
 80135e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80135e8:	b10b      	cbz	r3, 80135ee <__sflush_r+0x46>
 80135ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135ec:	1ac0      	subs	r0, r0, r3
 80135ee:	2300      	movs	r3, #0
 80135f0:	4602      	mov	r2, r0
 80135f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135f4:	6a21      	ldr	r1, [r4, #32]
 80135f6:	4628      	mov	r0, r5
 80135f8:	47b0      	blx	r6
 80135fa:	1c43      	adds	r3, r0, #1
 80135fc:	89a3      	ldrh	r3, [r4, #12]
 80135fe:	d106      	bne.n	801360e <__sflush_r+0x66>
 8013600:	6829      	ldr	r1, [r5, #0]
 8013602:	291d      	cmp	r1, #29
 8013604:	d82c      	bhi.n	8013660 <__sflush_r+0xb8>
 8013606:	4a2a      	ldr	r2, [pc, #168]	; (80136b0 <__sflush_r+0x108>)
 8013608:	40ca      	lsrs	r2, r1
 801360a:	07d6      	lsls	r6, r2, #31
 801360c:	d528      	bpl.n	8013660 <__sflush_r+0xb8>
 801360e:	2200      	movs	r2, #0
 8013610:	6062      	str	r2, [r4, #4]
 8013612:	04d9      	lsls	r1, r3, #19
 8013614:	6922      	ldr	r2, [r4, #16]
 8013616:	6022      	str	r2, [r4, #0]
 8013618:	d504      	bpl.n	8013624 <__sflush_r+0x7c>
 801361a:	1c42      	adds	r2, r0, #1
 801361c:	d101      	bne.n	8013622 <__sflush_r+0x7a>
 801361e:	682b      	ldr	r3, [r5, #0]
 8013620:	b903      	cbnz	r3, 8013624 <__sflush_r+0x7c>
 8013622:	6560      	str	r0, [r4, #84]	; 0x54
 8013624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013626:	602f      	str	r7, [r5, #0]
 8013628:	2900      	cmp	r1, #0
 801362a:	d0ca      	beq.n	80135c2 <__sflush_r+0x1a>
 801362c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013630:	4299      	cmp	r1, r3
 8013632:	d002      	beq.n	801363a <__sflush_r+0x92>
 8013634:	4628      	mov	r0, r5
 8013636:	f7ff fd79 	bl	801312c <_free_r>
 801363a:	2000      	movs	r0, #0
 801363c:	6360      	str	r0, [r4, #52]	; 0x34
 801363e:	e7c1      	b.n	80135c4 <__sflush_r+0x1c>
 8013640:	6a21      	ldr	r1, [r4, #32]
 8013642:	2301      	movs	r3, #1
 8013644:	4628      	mov	r0, r5
 8013646:	47b0      	blx	r6
 8013648:	1c41      	adds	r1, r0, #1
 801364a:	d1c7      	bne.n	80135dc <__sflush_r+0x34>
 801364c:	682b      	ldr	r3, [r5, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d0c4      	beq.n	80135dc <__sflush_r+0x34>
 8013652:	2b1d      	cmp	r3, #29
 8013654:	d001      	beq.n	801365a <__sflush_r+0xb2>
 8013656:	2b16      	cmp	r3, #22
 8013658:	d101      	bne.n	801365e <__sflush_r+0xb6>
 801365a:	602f      	str	r7, [r5, #0]
 801365c:	e7b1      	b.n	80135c2 <__sflush_r+0x1a>
 801365e:	89a3      	ldrh	r3, [r4, #12]
 8013660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013664:	81a3      	strh	r3, [r4, #12]
 8013666:	e7ad      	b.n	80135c4 <__sflush_r+0x1c>
 8013668:	690f      	ldr	r7, [r1, #16]
 801366a:	2f00      	cmp	r7, #0
 801366c:	d0a9      	beq.n	80135c2 <__sflush_r+0x1a>
 801366e:	0793      	lsls	r3, r2, #30
 8013670:	680e      	ldr	r6, [r1, #0]
 8013672:	bf08      	it	eq
 8013674:	694b      	ldreq	r3, [r1, #20]
 8013676:	600f      	str	r7, [r1, #0]
 8013678:	bf18      	it	ne
 801367a:	2300      	movne	r3, #0
 801367c:	eba6 0807 	sub.w	r8, r6, r7
 8013680:	608b      	str	r3, [r1, #8]
 8013682:	f1b8 0f00 	cmp.w	r8, #0
 8013686:	dd9c      	ble.n	80135c2 <__sflush_r+0x1a>
 8013688:	6a21      	ldr	r1, [r4, #32]
 801368a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801368c:	4643      	mov	r3, r8
 801368e:	463a      	mov	r2, r7
 8013690:	4628      	mov	r0, r5
 8013692:	47b0      	blx	r6
 8013694:	2800      	cmp	r0, #0
 8013696:	dc06      	bgt.n	80136a6 <__sflush_r+0xfe>
 8013698:	89a3      	ldrh	r3, [r4, #12]
 801369a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801369e:	81a3      	strh	r3, [r4, #12]
 80136a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136a4:	e78e      	b.n	80135c4 <__sflush_r+0x1c>
 80136a6:	4407      	add	r7, r0
 80136a8:	eba8 0800 	sub.w	r8, r8, r0
 80136ac:	e7e9      	b.n	8013682 <__sflush_r+0xda>
 80136ae:	bf00      	nop
 80136b0:	20400001 	.word	0x20400001

080136b4 <_fflush_r>:
 80136b4:	b538      	push	{r3, r4, r5, lr}
 80136b6:	690b      	ldr	r3, [r1, #16]
 80136b8:	4605      	mov	r5, r0
 80136ba:	460c      	mov	r4, r1
 80136bc:	b913      	cbnz	r3, 80136c4 <_fflush_r+0x10>
 80136be:	2500      	movs	r5, #0
 80136c0:	4628      	mov	r0, r5
 80136c2:	bd38      	pop	{r3, r4, r5, pc}
 80136c4:	b118      	cbz	r0, 80136ce <_fflush_r+0x1a>
 80136c6:	6983      	ldr	r3, [r0, #24]
 80136c8:	b90b      	cbnz	r3, 80136ce <_fflush_r+0x1a>
 80136ca:	f000 f887 	bl	80137dc <__sinit>
 80136ce:	4b14      	ldr	r3, [pc, #80]	; (8013720 <_fflush_r+0x6c>)
 80136d0:	429c      	cmp	r4, r3
 80136d2:	d11b      	bne.n	801370c <_fflush_r+0x58>
 80136d4:	686c      	ldr	r4, [r5, #4]
 80136d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d0ef      	beq.n	80136be <_fflush_r+0xa>
 80136de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80136e0:	07d0      	lsls	r0, r2, #31
 80136e2:	d404      	bmi.n	80136ee <_fflush_r+0x3a>
 80136e4:	0599      	lsls	r1, r3, #22
 80136e6:	d402      	bmi.n	80136ee <_fflush_r+0x3a>
 80136e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136ea:	f000 f915 	bl	8013918 <__retarget_lock_acquire_recursive>
 80136ee:	4628      	mov	r0, r5
 80136f0:	4621      	mov	r1, r4
 80136f2:	f7ff ff59 	bl	80135a8 <__sflush_r>
 80136f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80136f8:	07da      	lsls	r2, r3, #31
 80136fa:	4605      	mov	r5, r0
 80136fc:	d4e0      	bmi.n	80136c0 <_fflush_r+0xc>
 80136fe:	89a3      	ldrh	r3, [r4, #12]
 8013700:	059b      	lsls	r3, r3, #22
 8013702:	d4dd      	bmi.n	80136c0 <_fflush_r+0xc>
 8013704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013706:	f000 f908 	bl	801391a <__retarget_lock_release_recursive>
 801370a:	e7d9      	b.n	80136c0 <_fflush_r+0xc>
 801370c:	4b05      	ldr	r3, [pc, #20]	; (8013724 <_fflush_r+0x70>)
 801370e:	429c      	cmp	r4, r3
 8013710:	d101      	bne.n	8013716 <_fflush_r+0x62>
 8013712:	68ac      	ldr	r4, [r5, #8]
 8013714:	e7df      	b.n	80136d6 <_fflush_r+0x22>
 8013716:	4b04      	ldr	r3, [pc, #16]	; (8013728 <_fflush_r+0x74>)
 8013718:	429c      	cmp	r4, r3
 801371a:	bf08      	it	eq
 801371c:	68ec      	ldreq	r4, [r5, #12]
 801371e:	e7da      	b.n	80136d6 <_fflush_r+0x22>
 8013720:	08014488 	.word	0x08014488
 8013724:	080144a8 	.word	0x080144a8
 8013728:	08014468 	.word	0x08014468

0801372c <std>:
 801372c:	2300      	movs	r3, #0
 801372e:	b510      	push	{r4, lr}
 8013730:	4604      	mov	r4, r0
 8013732:	e9c0 3300 	strd	r3, r3, [r0]
 8013736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801373a:	6083      	str	r3, [r0, #8]
 801373c:	8181      	strh	r1, [r0, #12]
 801373e:	6643      	str	r3, [r0, #100]	; 0x64
 8013740:	81c2      	strh	r2, [r0, #14]
 8013742:	6183      	str	r3, [r0, #24]
 8013744:	4619      	mov	r1, r3
 8013746:	2208      	movs	r2, #8
 8013748:	305c      	adds	r0, #92	; 0x5c
 801374a:	f7ff fce7 	bl	801311c <memset>
 801374e:	4b05      	ldr	r3, [pc, #20]	; (8013764 <std+0x38>)
 8013750:	6263      	str	r3, [r4, #36]	; 0x24
 8013752:	4b05      	ldr	r3, [pc, #20]	; (8013768 <std+0x3c>)
 8013754:	62a3      	str	r3, [r4, #40]	; 0x28
 8013756:	4b05      	ldr	r3, [pc, #20]	; (801376c <std+0x40>)
 8013758:	62e3      	str	r3, [r4, #44]	; 0x2c
 801375a:	4b05      	ldr	r3, [pc, #20]	; (8013770 <std+0x44>)
 801375c:	6224      	str	r4, [r4, #32]
 801375e:	6323      	str	r3, [r4, #48]	; 0x30
 8013760:	bd10      	pop	{r4, pc}
 8013762:	bf00      	nop
 8013764:	08013fdd 	.word	0x08013fdd
 8013768:	08013fff 	.word	0x08013fff
 801376c:	08014037 	.word	0x08014037
 8013770:	0801405b 	.word	0x0801405b

08013774 <_cleanup_r>:
 8013774:	4901      	ldr	r1, [pc, #4]	; (801377c <_cleanup_r+0x8>)
 8013776:	f000 b8af 	b.w	80138d8 <_fwalk_reent>
 801377a:	bf00      	nop
 801377c:	080136b5 	.word	0x080136b5

08013780 <__sfmoreglue>:
 8013780:	b570      	push	{r4, r5, r6, lr}
 8013782:	2268      	movs	r2, #104	; 0x68
 8013784:	1e4d      	subs	r5, r1, #1
 8013786:	4355      	muls	r5, r2
 8013788:	460e      	mov	r6, r1
 801378a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801378e:	f7ff fd39 	bl	8013204 <_malloc_r>
 8013792:	4604      	mov	r4, r0
 8013794:	b140      	cbz	r0, 80137a8 <__sfmoreglue+0x28>
 8013796:	2100      	movs	r1, #0
 8013798:	e9c0 1600 	strd	r1, r6, [r0]
 801379c:	300c      	adds	r0, #12
 801379e:	60a0      	str	r0, [r4, #8]
 80137a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80137a4:	f7ff fcba 	bl	801311c <memset>
 80137a8:	4620      	mov	r0, r4
 80137aa:	bd70      	pop	{r4, r5, r6, pc}

080137ac <__sfp_lock_acquire>:
 80137ac:	4801      	ldr	r0, [pc, #4]	; (80137b4 <__sfp_lock_acquire+0x8>)
 80137ae:	f000 b8b3 	b.w	8013918 <__retarget_lock_acquire_recursive>
 80137b2:	bf00      	nop
 80137b4:	24004f95 	.word	0x24004f95

080137b8 <__sfp_lock_release>:
 80137b8:	4801      	ldr	r0, [pc, #4]	; (80137c0 <__sfp_lock_release+0x8>)
 80137ba:	f000 b8ae 	b.w	801391a <__retarget_lock_release_recursive>
 80137be:	bf00      	nop
 80137c0:	24004f95 	.word	0x24004f95

080137c4 <__sinit_lock_acquire>:
 80137c4:	4801      	ldr	r0, [pc, #4]	; (80137cc <__sinit_lock_acquire+0x8>)
 80137c6:	f000 b8a7 	b.w	8013918 <__retarget_lock_acquire_recursive>
 80137ca:	bf00      	nop
 80137cc:	24004f96 	.word	0x24004f96

080137d0 <__sinit_lock_release>:
 80137d0:	4801      	ldr	r0, [pc, #4]	; (80137d8 <__sinit_lock_release+0x8>)
 80137d2:	f000 b8a2 	b.w	801391a <__retarget_lock_release_recursive>
 80137d6:	bf00      	nop
 80137d8:	24004f96 	.word	0x24004f96

080137dc <__sinit>:
 80137dc:	b510      	push	{r4, lr}
 80137de:	4604      	mov	r4, r0
 80137e0:	f7ff fff0 	bl	80137c4 <__sinit_lock_acquire>
 80137e4:	69a3      	ldr	r3, [r4, #24]
 80137e6:	b11b      	cbz	r3, 80137f0 <__sinit+0x14>
 80137e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137ec:	f7ff bff0 	b.w	80137d0 <__sinit_lock_release>
 80137f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80137f4:	6523      	str	r3, [r4, #80]	; 0x50
 80137f6:	4b13      	ldr	r3, [pc, #76]	; (8013844 <__sinit+0x68>)
 80137f8:	4a13      	ldr	r2, [pc, #76]	; (8013848 <__sinit+0x6c>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80137fe:	42a3      	cmp	r3, r4
 8013800:	bf04      	itt	eq
 8013802:	2301      	moveq	r3, #1
 8013804:	61a3      	streq	r3, [r4, #24]
 8013806:	4620      	mov	r0, r4
 8013808:	f000 f820 	bl	801384c <__sfp>
 801380c:	6060      	str	r0, [r4, #4]
 801380e:	4620      	mov	r0, r4
 8013810:	f000 f81c 	bl	801384c <__sfp>
 8013814:	60a0      	str	r0, [r4, #8]
 8013816:	4620      	mov	r0, r4
 8013818:	f000 f818 	bl	801384c <__sfp>
 801381c:	2200      	movs	r2, #0
 801381e:	60e0      	str	r0, [r4, #12]
 8013820:	2104      	movs	r1, #4
 8013822:	6860      	ldr	r0, [r4, #4]
 8013824:	f7ff ff82 	bl	801372c <std>
 8013828:	68a0      	ldr	r0, [r4, #8]
 801382a:	2201      	movs	r2, #1
 801382c:	2109      	movs	r1, #9
 801382e:	f7ff ff7d 	bl	801372c <std>
 8013832:	68e0      	ldr	r0, [r4, #12]
 8013834:	2202      	movs	r2, #2
 8013836:	2112      	movs	r1, #18
 8013838:	f7ff ff78 	bl	801372c <std>
 801383c:	2301      	movs	r3, #1
 801383e:	61a3      	str	r3, [r4, #24]
 8013840:	e7d2      	b.n	80137e8 <__sinit+0xc>
 8013842:	bf00      	nop
 8013844:	08014464 	.word	0x08014464
 8013848:	08013775 	.word	0x08013775

0801384c <__sfp>:
 801384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801384e:	4607      	mov	r7, r0
 8013850:	f7ff ffac 	bl	80137ac <__sfp_lock_acquire>
 8013854:	4b1e      	ldr	r3, [pc, #120]	; (80138d0 <__sfp+0x84>)
 8013856:	681e      	ldr	r6, [r3, #0]
 8013858:	69b3      	ldr	r3, [r6, #24]
 801385a:	b913      	cbnz	r3, 8013862 <__sfp+0x16>
 801385c:	4630      	mov	r0, r6
 801385e:	f7ff ffbd 	bl	80137dc <__sinit>
 8013862:	3648      	adds	r6, #72	; 0x48
 8013864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013868:	3b01      	subs	r3, #1
 801386a:	d503      	bpl.n	8013874 <__sfp+0x28>
 801386c:	6833      	ldr	r3, [r6, #0]
 801386e:	b30b      	cbz	r3, 80138b4 <__sfp+0x68>
 8013870:	6836      	ldr	r6, [r6, #0]
 8013872:	e7f7      	b.n	8013864 <__sfp+0x18>
 8013874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013878:	b9d5      	cbnz	r5, 80138b0 <__sfp+0x64>
 801387a:	4b16      	ldr	r3, [pc, #88]	; (80138d4 <__sfp+0x88>)
 801387c:	60e3      	str	r3, [r4, #12]
 801387e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013882:	6665      	str	r5, [r4, #100]	; 0x64
 8013884:	f000 f847 	bl	8013916 <__retarget_lock_init_recursive>
 8013888:	f7ff ff96 	bl	80137b8 <__sfp_lock_release>
 801388c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013894:	6025      	str	r5, [r4, #0]
 8013896:	61a5      	str	r5, [r4, #24]
 8013898:	2208      	movs	r2, #8
 801389a:	4629      	mov	r1, r5
 801389c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80138a0:	f7ff fc3c 	bl	801311c <memset>
 80138a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80138a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80138ac:	4620      	mov	r0, r4
 80138ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138b0:	3468      	adds	r4, #104	; 0x68
 80138b2:	e7d9      	b.n	8013868 <__sfp+0x1c>
 80138b4:	2104      	movs	r1, #4
 80138b6:	4638      	mov	r0, r7
 80138b8:	f7ff ff62 	bl	8013780 <__sfmoreglue>
 80138bc:	4604      	mov	r4, r0
 80138be:	6030      	str	r0, [r6, #0]
 80138c0:	2800      	cmp	r0, #0
 80138c2:	d1d5      	bne.n	8013870 <__sfp+0x24>
 80138c4:	f7ff ff78 	bl	80137b8 <__sfp_lock_release>
 80138c8:	230c      	movs	r3, #12
 80138ca:	603b      	str	r3, [r7, #0]
 80138cc:	e7ee      	b.n	80138ac <__sfp+0x60>
 80138ce:	bf00      	nop
 80138d0:	08014464 	.word	0x08014464
 80138d4:	ffff0001 	.word	0xffff0001

080138d8 <_fwalk_reent>:
 80138d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138dc:	4606      	mov	r6, r0
 80138de:	4688      	mov	r8, r1
 80138e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80138e4:	2700      	movs	r7, #0
 80138e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138ea:	f1b9 0901 	subs.w	r9, r9, #1
 80138ee:	d505      	bpl.n	80138fc <_fwalk_reent+0x24>
 80138f0:	6824      	ldr	r4, [r4, #0]
 80138f2:	2c00      	cmp	r4, #0
 80138f4:	d1f7      	bne.n	80138e6 <_fwalk_reent+0xe>
 80138f6:	4638      	mov	r0, r7
 80138f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138fc:	89ab      	ldrh	r3, [r5, #12]
 80138fe:	2b01      	cmp	r3, #1
 8013900:	d907      	bls.n	8013912 <_fwalk_reent+0x3a>
 8013902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013906:	3301      	adds	r3, #1
 8013908:	d003      	beq.n	8013912 <_fwalk_reent+0x3a>
 801390a:	4629      	mov	r1, r5
 801390c:	4630      	mov	r0, r6
 801390e:	47c0      	blx	r8
 8013910:	4307      	orrs	r7, r0
 8013912:	3568      	adds	r5, #104	; 0x68
 8013914:	e7e9      	b.n	80138ea <_fwalk_reent+0x12>

08013916 <__retarget_lock_init_recursive>:
 8013916:	4770      	bx	lr

08013918 <__retarget_lock_acquire_recursive>:
 8013918:	4770      	bx	lr

0801391a <__retarget_lock_release_recursive>:
 801391a:	4770      	bx	lr

0801391c <__swhatbuf_r>:
 801391c:	b570      	push	{r4, r5, r6, lr}
 801391e:	460e      	mov	r6, r1
 8013920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013924:	2900      	cmp	r1, #0
 8013926:	b096      	sub	sp, #88	; 0x58
 8013928:	4614      	mov	r4, r2
 801392a:	461d      	mov	r5, r3
 801392c:	da08      	bge.n	8013940 <__swhatbuf_r+0x24>
 801392e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013932:	2200      	movs	r2, #0
 8013934:	602a      	str	r2, [r5, #0]
 8013936:	061a      	lsls	r2, r3, #24
 8013938:	d410      	bmi.n	801395c <__swhatbuf_r+0x40>
 801393a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801393e:	e00e      	b.n	801395e <__swhatbuf_r+0x42>
 8013940:	466a      	mov	r2, sp
 8013942:	f000 fbb1 	bl	80140a8 <_fstat_r>
 8013946:	2800      	cmp	r0, #0
 8013948:	dbf1      	blt.n	801392e <__swhatbuf_r+0x12>
 801394a:	9a01      	ldr	r2, [sp, #4]
 801394c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013954:	425a      	negs	r2, r3
 8013956:	415a      	adcs	r2, r3
 8013958:	602a      	str	r2, [r5, #0]
 801395a:	e7ee      	b.n	801393a <__swhatbuf_r+0x1e>
 801395c:	2340      	movs	r3, #64	; 0x40
 801395e:	2000      	movs	r0, #0
 8013960:	6023      	str	r3, [r4, #0]
 8013962:	b016      	add	sp, #88	; 0x58
 8013964:	bd70      	pop	{r4, r5, r6, pc}
	...

08013968 <__smakebuf_r>:
 8013968:	898b      	ldrh	r3, [r1, #12]
 801396a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801396c:	079d      	lsls	r5, r3, #30
 801396e:	4606      	mov	r6, r0
 8013970:	460c      	mov	r4, r1
 8013972:	d507      	bpl.n	8013984 <__smakebuf_r+0x1c>
 8013974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013978:	6023      	str	r3, [r4, #0]
 801397a:	6123      	str	r3, [r4, #16]
 801397c:	2301      	movs	r3, #1
 801397e:	6163      	str	r3, [r4, #20]
 8013980:	b002      	add	sp, #8
 8013982:	bd70      	pop	{r4, r5, r6, pc}
 8013984:	ab01      	add	r3, sp, #4
 8013986:	466a      	mov	r2, sp
 8013988:	f7ff ffc8 	bl	801391c <__swhatbuf_r>
 801398c:	9900      	ldr	r1, [sp, #0]
 801398e:	4605      	mov	r5, r0
 8013990:	4630      	mov	r0, r6
 8013992:	f7ff fc37 	bl	8013204 <_malloc_r>
 8013996:	b948      	cbnz	r0, 80139ac <__smakebuf_r+0x44>
 8013998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801399c:	059a      	lsls	r2, r3, #22
 801399e:	d4ef      	bmi.n	8013980 <__smakebuf_r+0x18>
 80139a0:	f023 0303 	bic.w	r3, r3, #3
 80139a4:	f043 0302 	orr.w	r3, r3, #2
 80139a8:	81a3      	strh	r3, [r4, #12]
 80139aa:	e7e3      	b.n	8013974 <__smakebuf_r+0xc>
 80139ac:	4b0d      	ldr	r3, [pc, #52]	; (80139e4 <__smakebuf_r+0x7c>)
 80139ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80139b0:	89a3      	ldrh	r3, [r4, #12]
 80139b2:	6020      	str	r0, [r4, #0]
 80139b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139b8:	81a3      	strh	r3, [r4, #12]
 80139ba:	9b00      	ldr	r3, [sp, #0]
 80139bc:	6163      	str	r3, [r4, #20]
 80139be:	9b01      	ldr	r3, [sp, #4]
 80139c0:	6120      	str	r0, [r4, #16]
 80139c2:	b15b      	cbz	r3, 80139dc <__smakebuf_r+0x74>
 80139c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139c8:	4630      	mov	r0, r6
 80139ca:	f000 fb7f 	bl	80140cc <_isatty_r>
 80139ce:	b128      	cbz	r0, 80139dc <__smakebuf_r+0x74>
 80139d0:	89a3      	ldrh	r3, [r4, #12]
 80139d2:	f023 0303 	bic.w	r3, r3, #3
 80139d6:	f043 0301 	orr.w	r3, r3, #1
 80139da:	81a3      	strh	r3, [r4, #12]
 80139dc:	89a0      	ldrh	r0, [r4, #12]
 80139de:	4305      	orrs	r5, r0
 80139e0:	81a5      	strh	r5, [r4, #12]
 80139e2:	e7cd      	b.n	8013980 <__smakebuf_r+0x18>
 80139e4:	08013775 	.word	0x08013775

080139e8 <__malloc_lock>:
 80139e8:	4801      	ldr	r0, [pc, #4]	; (80139f0 <__malloc_lock+0x8>)
 80139ea:	f7ff bf95 	b.w	8013918 <__retarget_lock_acquire_recursive>
 80139ee:	bf00      	nop
 80139f0:	24004f94 	.word	0x24004f94

080139f4 <__malloc_unlock>:
 80139f4:	4801      	ldr	r0, [pc, #4]	; (80139fc <__malloc_unlock+0x8>)
 80139f6:	f7ff bf90 	b.w	801391a <__retarget_lock_release_recursive>
 80139fa:	bf00      	nop
 80139fc:	24004f94 	.word	0x24004f94

08013a00 <__sfputc_r>:
 8013a00:	6893      	ldr	r3, [r2, #8]
 8013a02:	3b01      	subs	r3, #1
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	b410      	push	{r4}
 8013a08:	6093      	str	r3, [r2, #8]
 8013a0a:	da08      	bge.n	8013a1e <__sfputc_r+0x1e>
 8013a0c:	6994      	ldr	r4, [r2, #24]
 8013a0e:	42a3      	cmp	r3, r4
 8013a10:	db01      	blt.n	8013a16 <__sfputc_r+0x16>
 8013a12:	290a      	cmp	r1, #10
 8013a14:	d103      	bne.n	8013a1e <__sfputc_r+0x1e>
 8013a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a1a:	f7ff bd05 	b.w	8013428 <__swbuf_r>
 8013a1e:	6813      	ldr	r3, [r2, #0]
 8013a20:	1c58      	adds	r0, r3, #1
 8013a22:	6010      	str	r0, [r2, #0]
 8013a24:	7019      	strb	r1, [r3, #0]
 8013a26:	4608      	mov	r0, r1
 8013a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a2c:	4770      	bx	lr

08013a2e <__sfputs_r>:
 8013a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a30:	4606      	mov	r6, r0
 8013a32:	460f      	mov	r7, r1
 8013a34:	4614      	mov	r4, r2
 8013a36:	18d5      	adds	r5, r2, r3
 8013a38:	42ac      	cmp	r4, r5
 8013a3a:	d101      	bne.n	8013a40 <__sfputs_r+0x12>
 8013a3c:	2000      	movs	r0, #0
 8013a3e:	e007      	b.n	8013a50 <__sfputs_r+0x22>
 8013a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a44:	463a      	mov	r2, r7
 8013a46:	4630      	mov	r0, r6
 8013a48:	f7ff ffda 	bl	8013a00 <__sfputc_r>
 8013a4c:	1c43      	adds	r3, r0, #1
 8013a4e:	d1f3      	bne.n	8013a38 <__sfputs_r+0xa>
 8013a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013a54 <_vfiprintf_r>:
 8013a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a58:	460d      	mov	r5, r1
 8013a5a:	b09d      	sub	sp, #116	; 0x74
 8013a5c:	4614      	mov	r4, r2
 8013a5e:	4698      	mov	r8, r3
 8013a60:	4606      	mov	r6, r0
 8013a62:	b118      	cbz	r0, 8013a6c <_vfiprintf_r+0x18>
 8013a64:	6983      	ldr	r3, [r0, #24]
 8013a66:	b90b      	cbnz	r3, 8013a6c <_vfiprintf_r+0x18>
 8013a68:	f7ff feb8 	bl	80137dc <__sinit>
 8013a6c:	4b89      	ldr	r3, [pc, #548]	; (8013c94 <_vfiprintf_r+0x240>)
 8013a6e:	429d      	cmp	r5, r3
 8013a70:	d11b      	bne.n	8013aaa <_vfiprintf_r+0x56>
 8013a72:	6875      	ldr	r5, [r6, #4]
 8013a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a76:	07d9      	lsls	r1, r3, #31
 8013a78:	d405      	bmi.n	8013a86 <_vfiprintf_r+0x32>
 8013a7a:	89ab      	ldrh	r3, [r5, #12]
 8013a7c:	059a      	lsls	r2, r3, #22
 8013a7e:	d402      	bmi.n	8013a86 <_vfiprintf_r+0x32>
 8013a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a82:	f7ff ff49 	bl	8013918 <__retarget_lock_acquire_recursive>
 8013a86:	89ab      	ldrh	r3, [r5, #12]
 8013a88:	071b      	lsls	r3, r3, #28
 8013a8a:	d501      	bpl.n	8013a90 <_vfiprintf_r+0x3c>
 8013a8c:	692b      	ldr	r3, [r5, #16]
 8013a8e:	b9eb      	cbnz	r3, 8013acc <_vfiprintf_r+0x78>
 8013a90:	4629      	mov	r1, r5
 8013a92:	4630      	mov	r0, r6
 8013a94:	f7ff fd1a 	bl	80134cc <__swsetup_r>
 8013a98:	b1c0      	cbz	r0, 8013acc <_vfiprintf_r+0x78>
 8013a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a9c:	07dc      	lsls	r4, r3, #31
 8013a9e:	d50e      	bpl.n	8013abe <_vfiprintf_r+0x6a>
 8013aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013aa4:	b01d      	add	sp, #116	; 0x74
 8013aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aaa:	4b7b      	ldr	r3, [pc, #492]	; (8013c98 <_vfiprintf_r+0x244>)
 8013aac:	429d      	cmp	r5, r3
 8013aae:	d101      	bne.n	8013ab4 <_vfiprintf_r+0x60>
 8013ab0:	68b5      	ldr	r5, [r6, #8]
 8013ab2:	e7df      	b.n	8013a74 <_vfiprintf_r+0x20>
 8013ab4:	4b79      	ldr	r3, [pc, #484]	; (8013c9c <_vfiprintf_r+0x248>)
 8013ab6:	429d      	cmp	r5, r3
 8013ab8:	bf08      	it	eq
 8013aba:	68f5      	ldreq	r5, [r6, #12]
 8013abc:	e7da      	b.n	8013a74 <_vfiprintf_r+0x20>
 8013abe:	89ab      	ldrh	r3, [r5, #12]
 8013ac0:	0598      	lsls	r0, r3, #22
 8013ac2:	d4ed      	bmi.n	8013aa0 <_vfiprintf_r+0x4c>
 8013ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ac6:	f7ff ff28 	bl	801391a <__retarget_lock_release_recursive>
 8013aca:	e7e9      	b.n	8013aa0 <_vfiprintf_r+0x4c>
 8013acc:	2300      	movs	r3, #0
 8013ace:	9309      	str	r3, [sp, #36]	; 0x24
 8013ad0:	2320      	movs	r3, #32
 8013ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ada:	2330      	movs	r3, #48	; 0x30
 8013adc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013ca0 <_vfiprintf_r+0x24c>
 8013ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ae4:	f04f 0901 	mov.w	r9, #1
 8013ae8:	4623      	mov	r3, r4
 8013aea:	469a      	mov	sl, r3
 8013aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013af0:	b10a      	cbz	r2, 8013af6 <_vfiprintf_r+0xa2>
 8013af2:	2a25      	cmp	r2, #37	; 0x25
 8013af4:	d1f9      	bne.n	8013aea <_vfiprintf_r+0x96>
 8013af6:	ebba 0b04 	subs.w	fp, sl, r4
 8013afa:	d00b      	beq.n	8013b14 <_vfiprintf_r+0xc0>
 8013afc:	465b      	mov	r3, fp
 8013afe:	4622      	mov	r2, r4
 8013b00:	4629      	mov	r1, r5
 8013b02:	4630      	mov	r0, r6
 8013b04:	f7ff ff93 	bl	8013a2e <__sfputs_r>
 8013b08:	3001      	adds	r0, #1
 8013b0a:	f000 80aa 	beq.w	8013c62 <_vfiprintf_r+0x20e>
 8013b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b10:	445a      	add	r2, fp
 8013b12:	9209      	str	r2, [sp, #36]	; 0x24
 8013b14:	f89a 3000 	ldrb.w	r3, [sl]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	f000 80a2 	beq.w	8013c62 <_vfiprintf_r+0x20e>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b28:	f10a 0a01 	add.w	sl, sl, #1
 8013b2c:	9304      	str	r3, [sp, #16]
 8013b2e:	9307      	str	r3, [sp, #28]
 8013b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b34:	931a      	str	r3, [sp, #104]	; 0x68
 8013b36:	4654      	mov	r4, sl
 8013b38:	2205      	movs	r2, #5
 8013b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b3e:	4858      	ldr	r0, [pc, #352]	; (8013ca0 <_vfiprintf_r+0x24c>)
 8013b40:	f7ec fbce 	bl	80002e0 <memchr>
 8013b44:	9a04      	ldr	r2, [sp, #16]
 8013b46:	b9d8      	cbnz	r0, 8013b80 <_vfiprintf_r+0x12c>
 8013b48:	06d1      	lsls	r1, r2, #27
 8013b4a:	bf44      	itt	mi
 8013b4c:	2320      	movmi	r3, #32
 8013b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b52:	0713      	lsls	r3, r2, #28
 8013b54:	bf44      	itt	mi
 8013b56:	232b      	movmi	r3, #43	; 0x2b
 8013b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8013b60:	2b2a      	cmp	r3, #42	; 0x2a
 8013b62:	d015      	beq.n	8013b90 <_vfiprintf_r+0x13c>
 8013b64:	9a07      	ldr	r2, [sp, #28]
 8013b66:	4654      	mov	r4, sl
 8013b68:	2000      	movs	r0, #0
 8013b6a:	f04f 0c0a 	mov.w	ip, #10
 8013b6e:	4621      	mov	r1, r4
 8013b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b74:	3b30      	subs	r3, #48	; 0x30
 8013b76:	2b09      	cmp	r3, #9
 8013b78:	d94e      	bls.n	8013c18 <_vfiprintf_r+0x1c4>
 8013b7a:	b1b0      	cbz	r0, 8013baa <_vfiprintf_r+0x156>
 8013b7c:	9207      	str	r2, [sp, #28]
 8013b7e:	e014      	b.n	8013baa <_vfiprintf_r+0x156>
 8013b80:	eba0 0308 	sub.w	r3, r0, r8
 8013b84:	fa09 f303 	lsl.w	r3, r9, r3
 8013b88:	4313      	orrs	r3, r2
 8013b8a:	9304      	str	r3, [sp, #16]
 8013b8c:	46a2      	mov	sl, r4
 8013b8e:	e7d2      	b.n	8013b36 <_vfiprintf_r+0xe2>
 8013b90:	9b03      	ldr	r3, [sp, #12]
 8013b92:	1d19      	adds	r1, r3, #4
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	9103      	str	r1, [sp, #12]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	bfbb      	ittet	lt
 8013b9c:	425b      	neglt	r3, r3
 8013b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8013ba2:	9307      	strge	r3, [sp, #28]
 8013ba4:	9307      	strlt	r3, [sp, #28]
 8013ba6:	bfb8      	it	lt
 8013ba8:	9204      	strlt	r2, [sp, #16]
 8013baa:	7823      	ldrb	r3, [r4, #0]
 8013bac:	2b2e      	cmp	r3, #46	; 0x2e
 8013bae:	d10c      	bne.n	8013bca <_vfiprintf_r+0x176>
 8013bb0:	7863      	ldrb	r3, [r4, #1]
 8013bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb4:	d135      	bne.n	8013c22 <_vfiprintf_r+0x1ce>
 8013bb6:	9b03      	ldr	r3, [sp, #12]
 8013bb8:	1d1a      	adds	r2, r3, #4
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	9203      	str	r2, [sp, #12]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	bfb8      	it	lt
 8013bc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013bc6:	3402      	adds	r4, #2
 8013bc8:	9305      	str	r3, [sp, #20]
 8013bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013cb0 <_vfiprintf_r+0x25c>
 8013bce:	7821      	ldrb	r1, [r4, #0]
 8013bd0:	2203      	movs	r2, #3
 8013bd2:	4650      	mov	r0, sl
 8013bd4:	f7ec fb84 	bl	80002e0 <memchr>
 8013bd8:	b140      	cbz	r0, 8013bec <_vfiprintf_r+0x198>
 8013bda:	2340      	movs	r3, #64	; 0x40
 8013bdc:	eba0 000a 	sub.w	r0, r0, sl
 8013be0:	fa03 f000 	lsl.w	r0, r3, r0
 8013be4:	9b04      	ldr	r3, [sp, #16]
 8013be6:	4303      	orrs	r3, r0
 8013be8:	3401      	adds	r4, #1
 8013bea:	9304      	str	r3, [sp, #16]
 8013bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bf0:	482c      	ldr	r0, [pc, #176]	; (8013ca4 <_vfiprintf_r+0x250>)
 8013bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013bf6:	2206      	movs	r2, #6
 8013bf8:	f7ec fb72 	bl	80002e0 <memchr>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d03f      	beq.n	8013c80 <_vfiprintf_r+0x22c>
 8013c00:	4b29      	ldr	r3, [pc, #164]	; (8013ca8 <_vfiprintf_r+0x254>)
 8013c02:	bb1b      	cbnz	r3, 8013c4c <_vfiprintf_r+0x1f8>
 8013c04:	9b03      	ldr	r3, [sp, #12]
 8013c06:	3307      	adds	r3, #7
 8013c08:	f023 0307 	bic.w	r3, r3, #7
 8013c0c:	3308      	adds	r3, #8
 8013c0e:	9303      	str	r3, [sp, #12]
 8013c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c12:	443b      	add	r3, r7
 8013c14:	9309      	str	r3, [sp, #36]	; 0x24
 8013c16:	e767      	b.n	8013ae8 <_vfiprintf_r+0x94>
 8013c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c1c:	460c      	mov	r4, r1
 8013c1e:	2001      	movs	r0, #1
 8013c20:	e7a5      	b.n	8013b6e <_vfiprintf_r+0x11a>
 8013c22:	2300      	movs	r3, #0
 8013c24:	3401      	adds	r4, #1
 8013c26:	9305      	str	r3, [sp, #20]
 8013c28:	4619      	mov	r1, r3
 8013c2a:	f04f 0c0a 	mov.w	ip, #10
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c34:	3a30      	subs	r2, #48	; 0x30
 8013c36:	2a09      	cmp	r2, #9
 8013c38:	d903      	bls.n	8013c42 <_vfiprintf_r+0x1ee>
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d0c5      	beq.n	8013bca <_vfiprintf_r+0x176>
 8013c3e:	9105      	str	r1, [sp, #20]
 8013c40:	e7c3      	b.n	8013bca <_vfiprintf_r+0x176>
 8013c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c46:	4604      	mov	r4, r0
 8013c48:	2301      	movs	r3, #1
 8013c4a:	e7f0      	b.n	8013c2e <_vfiprintf_r+0x1da>
 8013c4c:	ab03      	add	r3, sp, #12
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	462a      	mov	r2, r5
 8013c52:	4b16      	ldr	r3, [pc, #88]	; (8013cac <_vfiprintf_r+0x258>)
 8013c54:	a904      	add	r1, sp, #16
 8013c56:	4630      	mov	r0, r6
 8013c58:	f3af 8000 	nop.w
 8013c5c:	4607      	mov	r7, r0
 8013c5e:	1c78      	adds	r0, r7, #1
 8013c60:	d1d6      	bne.n	8013c10 <_vfiprintf_r+0x1bc>
 8013c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c64:	07d9      	lsls	r1, r3, #31
 8013c66:	d405      	bmi.n	8013c74 <_vfiprintf_r+0x220>
 8013c68:	89ab      	ldrh	r3, [r5, #12]
 8013c6a:	059a      	lsls	r2, r3, #22
 8013c6c:	d402      	bmi.n	8013c74 <_vfiprintf_r+0x220>
 8013c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c70:	f7ff fe53 	bl	801391a <__retarget_lock_release_recursive>
 8013c74:	89ab      	ldrh	r3, [r5, #12]
 8013c76:	065b      	lsls	r3, r3, #25
 8013c78:	f53f af12 	bmi.w	8013aa0 <_vfiprintf_r+0x4c>
 8013c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c7e:	e711      	b.n	8013aa4 <_vfiprintf_r+0x50>
 8013c80:	ab03      	add	r3, sp, #12
 8013c82:	9300      	str	r3, [sp, #0]
 8013c84:	462a      	mov	r2, r5
 8013c86:	4b09      	ldr	r3, [pc, #36]	; (8013cac <_vfiprintf_r+0x258>)
 8013c88:	a904      	add	r1, sp, #16
 8013c8a:	4630      	mov	r0, r6
 8013c8c:	f000 f880 	bl	8013d90 <_printf_i>
 8013c90:	e7e4      	b.n	8013c5c <_vfiprintf_r+0x208>
 8013c92:	bf00      	nop
 8013c94:	08014488 	.word	0x08014488
 8013c98:	080144a8 	.word	0x080144a8
 8013c9c:	08014468 	.word	0x08014468
 8013ca0:	080144c8 	.word	0x080144c8
 8013ca4:	080144d2 	.word	0x080144d2
 8013ca8:	00000000 	.word	0x00000000
 8013cac:	08013a2f 	.word	0x08013a2f
 8013cb0:	080144ce 	.word	0x080144ce

08013cb4 <_printf_common>:
 8013cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb8:	4616      	mov	r6, r2
 8013cba:	4699      	mov	r9, r3
 8013cbc:	688a      	ldr	r2, [r1, #8]
 8013cbe:	690b      	ldr	r3, [r1, #16]
 8013cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	bfb8      	it	lt
 8013cc8:	4613      	movlt	r3, r2
 8013cca:	6033      	str	r3, [r6, #0]
 8013ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013cd0:	4607      	mov	r7, r0
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	b10a      	cbz	r2, 8013cda <_printf_common+0x26>
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	6033      	str	r3, [r6, #0]
 8013cda:	6823      	ldr	r3, [r4, #0]
 8013cdc:	0699      	lsls	r1, r3, #26
 8013cde:	bf42      	ittt	mi
 8013ce0:	6833      	ldrmi	r3, [r6, #0]
 8013ce2:	3302      	addmi	r3, #2
 8013ce4:	6033      	strmi	r3, [r6, #0]
 8013ce6:	6825      	ldr	r5, [r4, #0]
 8013ce8:	f015 0506 	ands.w	r5, r5, #6
 8013cec:	d106      	bne.n	8013cfc <_printf_common+0x48>
 8013cee:	f104 0a19 	add.w	sl, r4, #25
 8013cf2:	68e3      	ldr	r3, [r4, #12]
 8013cf4:	6832      	ldr	r2, [r6, #0]
 8013cf6:	1a9b      	subs	r3, r3, r2
 8013cf8:	42ab      	cmp	r3, r5
 8013cfa:	dc26      	bgt.n	8013d4a <_printf_common+0x96>
 8013cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d00:	1e13      	subs	r3, r2, #0
 8013d02:	6822      	ldr	r2, [r4, #0]
 8013d04:	bf18      	it	ne
 8013d06:	2301      	movne	r3, #1
 8013d08:	0692      	lsls	r2, r2, #26
 8013d0a:	d42b      	bmi.n	8013d64 <_printf_common+0xb0>
 8013d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d10:	4649      	mov	r1, r9
 8013d12:	4638      	mov	r0, r7
 8013d14:	47c0      	blx	r8
 8013d16:	3001      	adds	r0, #1
 8013d18:	d01e      	beq.n	8013d58 <_printf_common+0xa4>
 8013d1a:	6823      	ldr	r3, [r4, #0]
 8013d1c:	68e5      	ldr	r5, [r4, #12]
 8013d1e:	6832      	ldr	r2, [r6, #0]
 8013d20:	f003 0306 	and.w	r3, r3, #6
 8013d24:	2b04      	cmp	r3, #4
 8013d26:	bf08      	it	eq
 8013d28:	1aad      	subeq	r5, r5, r2
 8013d2a:	68a3      	ldr	r3, [r4, #8]
 8013d2c:	6922      	ldr	r2, [r4, #16]
 8013d2e:	bf0c      	ite	eq
 8013d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d34:	2500      	movne	r5, #0
 8013d36:	4293      	cmp	r3, r2
 8013d38:	bfc4      	itt	gt
 8013d3a:	1a9b      	subgt	r3, r3, r2
 8013d3c:	18ed      	addgt	r5, r5, r3
 8013d3e:	2600      	movs	r6, #0
 8013d40:	341a      	adds	r4, #26
 8013d42:	42b5      	cmp	r5, r6
 8013d44:	d11a      	bne.n	8013d7c <_printf_common+0xc8>
 8013d46:	2000      	movs	r0, #0
 8013d48:	e008      	b.n	8013d5c <_printf_common+0xa8>
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	4652      	mov	r2, sl
 8013d4e:	4649      	mov	r1, r9
 8013d50:	4638      	mov	r0, r7
 8013d52:	47c0      	blx	r8
 8013d54:	3001      	adds	r0, #1
 8013d56:	d103      	bne.n	8013d60 <_printf_common+0xac>
 8013d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d60:	3501      	adds	r5, #1
 8013d62:	e7c6      	b.n	8013cf2 <_printf_common+0x3e>
 8013d64:	18e1      	adds	r1, r4, r3
 8013d66:	1c5a      	adds	r2, r3, #1
 8013d68:	2030      	movs	r0, #48	; 0x30
 8013d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013d6e:	4422      	add	r2, r4
 8013d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013d78:	3302      	adds	r3, #2
 8013d7a:	e7c7      	b.n	8013d0c <_printf_common+0x58>
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	4622      	mov	r2, r4
 8013d80:	4649      	mov	r1, r9
 8013d82:	4638      	mov	r0, r7
 8013d84:	47c0      	blx	r8
 8013d86:	3001      	adds	r0, #1
 8013d88:	d0e6      	beq.n	8013d58 <_printf_common+0xa4>
 8013d8a:	3601      	adds	r6, #1
 8013d8c:	e7d9      	b.n	8013d42 <_printf_common+0x8e>
	...

08013d90 <_printf_i>:
 8013d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d94:	7e0f      	ldrb	r7, [r1, #24]
 8013d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013d98:	2f78      	cmp	r7, #120	; 0x78
 8013d9a:	4691      	mov	r9, r2
 8013d9c:	4680      	mov	r8, r0
 8013d9e:	460c      	mov	r4, r1
 8013da0:	469a      	mov	sl, r3
 8013da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013da6:	d807      	bhi.n	8013db8 <_printf_i+0x28>
 8013da8:	2f62      	cmp	r7, #98	; 0x62
 8013daa:	d80a      	bhi.n	8013dc2 <_printf_i+0x32>
 8013dac:	2f00      	cmp	r7, #0
 8013dae:	f000 80d8 	beq.w	8013f62 <_printf_i+0x1d2>
 8013db2:	2f58      	cmp	r7, #88	; 0x58
 8013db4:	f000 80a3 	beq.w	8013efe <_printf_i+0x16e>
 8013db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013dc0:	e03a      	b.n	8013e38 <_printf_i+0xa8>
 8013dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013dc6:	2b15      	cmp	r3, #21
 8013dc8:	d8f6      	bhi.n	8013db8 <_printf_i+0x28>
 8013dca:	a101      	add	r1, pc, #4	; (adr r1, 8013dd0 <_printf_i+0x40>)
 8013dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013dd0:	08013e29 	.word	0x08013e29
 8013dd4:	08013e3d 	.word	0x08013e3d
 8013dd8:	08013db9 	.word	0x08013db9
 8013ddc:	08013db9 	.word	0x08013db9
 8013de0:	08013db9 	.word	0x08013db9
 8013de4:	08013db9 	.word	0x08013db9
 8013de8:	08013e3d 	.word	0x08013e3d
 8013dec:	08013db9 	.word	0x08013db9
 8013df0:	08013db9 	.word	0x08013db9
 8013df4:	08013db9 	.word	0x08013db9
 8013df8:	08013db9 	.word	0x08013db9
 8013dfc:	08013f49 	.word	0x08013f49
 8013e00:	08013e6d 	.word	0x08013e6d
 8013e04:	08013f2b 	.word	0x08013f2b
 8013e08:	08013db9 	.word	0x08013db9
 8013e0c:	08013db9 	.word	0x08013db9
 8013e10:	08013f6b 	.word	0x08013f6b
 8013e14:	08013db9 	.word	0x08013db9
 8013e18:	08013e6d 	.word	0x08013e6d
 8013e1c:	08013db9 	.word	0x08013db9
 8013e20:	08013db9 	.word	0x08013db9
 8013e24:	08013f33 	.word	0x08013f33
 8013e28:	682b      	ldr	r3, [r5, #0]
 8013e2a:	1d1a      	adds	r2, r3, #4
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	602a      	str	r2, [r5, #0]
 8013e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e38:	2301      	movs	r3, #1
 8013e3a:	e0a3      	b.n	8013f84 <_printf_i+0x1f4>
 8013e3c:	6820      	ldr	r0, [r4, #0]
 8013e3e:	6829      	ldr	r1, [r5, #0]
 8013e40:	0606      	lsls	r6, r0, #24
 8013e42:	f101 0304 	add.w	r3, r1, #4
 8013e46:	d50a      	bpl.n	8013e5e <_printf_i+0xce>
 8013e48:	680e      	ldr	r6, [r1, #0]
 8013e4a:	602b      	str	r3, [r5, #0]
 8013e4c:	2e00      	cmp	r6, #0
 8013e4e:	da03      	bge.n	8013e58 <_printf_i+0xc8>
 8013e50:	232d      	movs	r3, #45	; 0x2d
 8013e52:	4276      	negs	r6, r6
 8013e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e58:	485e      	ldr	r0, [pc, #376]	; (8013fd4 <_printf_i+0x244>)
 8013e5a:	230a      	movs	r3, #10
 8013e5c:	e019      	b.n	8013e92 <_printf_i+0x102>
 8013e5e:	680e      	ldr	r6, [r1, #0]
 8013e60:	602b      	str	r3, [r5, #0]
 8013e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013e66:	bf18      	it	ne
 8013e68:	b236      	sxthne	r6, r6
 8013e6a:	e7ef      	b.n	8013e4c <_printf_i+0xbc>
 8013e6c:	682b      	ldr	r3, [r5, #0]
 8013e6e:	6820      	ldr	r0, [r4, #0]
 8013e70:	1d19      	adds	r1, r3, #4
 8013e72:	6029      	str	r1, [r5, #0]
 8013e74:	0601      	lsls	r1, r0, #24
 8013e76:	d501      	bpl.n	8013e7c <_printf_i+0xec>
 8013e78:	681e      	ldr	r6, [r3, #0]
 8013e7a:	e002      	b.n	8013e82 <_printf_i+0xf2>
 8013e7c:	0646      	lsls	r6, r0, #25
 8013e7e:	d5fb      	bpl.n	8013e78 <_printf_i+0xe8>
 8013e80:	881e      	ldrh	r6, [r3, #0]
 8013e82:	4854      	ldr	r0, [pc, #336]	; (8013fd4 <_printf_i+0x244>)
 8013e84:	2f6f      	cmp	r7, #111	; 0x6f
 8013e86:	bf0c      	ite	eq
 8013e88:	2308      	moveq	r3, #8
 8013e8a:	230a      	movne	r3, #10
 8013e8c:	2100      	movs	r1, #0
 8013e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013e92:	6865      	ldr	r5, [r4, #4]
 8013e94:	60a5      	str	r5, [r4, #8]
 8013e96:	2d00      	cmp	r5, #0
 8013e98:	bfa2      	ittt	ge
 8013e9a:	6821      	ldrge	r1, [r4, #0]
 8013e9c:	f021 0104 	bicge.w	r1, r1, #4
 8013ea0:	6021      	strge	r1, [r4, #0]
 8013ea2:	b90e      	cbnz	r6, 8013ea8 <_printf_i+0x118>
 8013ea4:	2d00      	cmp	r5, #0
 8013ea6:	d04d      	beq.n	8013f44 <_printf_i+0x1b4>
 8013ea8:	4615      	mov	r5, r2
 8013eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8013eae:	fb03 6711 	mls	r7, r3, r1, r6
 8013eb2:	5dc7      	ldrb	r7, [r0, r7]
 8013eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013eb8:	4637      	mov	r7, r6
 8013eba:	42bb      	cmp	r3, r7
 8013ebc:	460e      	mov	r6, r1
 8013ebe:	d9f4      	bls.n	8013eaa <_printf_i+0x11a>
 8013ec0:	2b08      	cmp	r3, #8
 8013ec2:	d10b      	bne.n	8013edc <_printf_i+0x14c>
 8013ec4:	6823      	ldr	r3, [r4, #0]
 8013ec6:	07de      	lsls	r6, r3, #31
 8013ec8:	d508      	bpl.n	8013edc <_printf_i+0x14c>
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	6861      	ldr	r1, [r4, #4]
 8013ece:	4299      	cmp	r1, r3
 8013ed0:	bfde      	ittt	le
 8013ed2:	2330      	movle	r3, #48	; 0x30
 8013ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013ed8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013edc:	1b52      	subs	r2, r2, r5
 8013ede:	6122      	str	r2, [r4, #16]
 8013ee0:	f8cd a000 	str.w	sl, [sp]
 8013ee4:	464b      	mov	r3, r9
 8013ee6:	aa03      	add	r2, sp, #12
 8013ee8:	4621      	mov	r1, r4
 8013eea:	4640      	mov	r0, r8
 8013eec:	f7ff fee2 	bl	8013cb4 <_printf_common>
 8013ef0:	3001      	adds	r0, #1
 8013ef2:	d14c      	bne.n	8013f8e <_printf_i+0x1fe>
 8013ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ef8:	b004      	add	sp, #16
 8013efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013efe:	4835      	ldr	r0, [pc, #212]	; (8013fd4 <_printf_i+0x244>)
 8013f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013f04:	6829      	ldr	r1, [r5, #0]
 8013f06:	6823      	ldr	r3, [r4, #0]
 8013f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f0c:	6029      	str	r1, [r5, #0]
 8013f0e:	061d      	lsls	r5, r3, #24
 8013f10:	d514      	bpl.n	8013f3c <_printf_i+0x1ac>
 8013f12:	07df      	lsls	r7, r3, #31
 8013f14:	bf44      	itt	mi
 8013f16:	f043 0320 	orrmi.w	r3, r3, #32
 8013f1a:	6023      	strmi	r3, [r4, #0]
 8013f1c:	b91e      	cbnz	r6, 8013f26 <_printf_i+0x196>
 8013f1e:	6823      	ldr	r3, [r4, #0]
 8013f20:	f023 0320 	bic.w	r3, r3, #32
 8013f24:	6023      	str	r3, [r4, #0]
 8013f26:	2310      	movs	r3, #16
 8013f28:	e7b0      	b.n	8013e8c <_printf_i+0xfc>
 8013f2a:	6823      	ldr	r3, [r4, #0]
 8013f2c:	f043 0320 	orr.w	r3, r3, #32
 8013f30:	6023      	str	r3, [r4, #0]
 8013f32:	2378      	movs	r3, #120	; 0x78
 8013f34:	4828      	ldr	r0, [pc, #160]	; (8013fd8 <_printf_i+0x248>)
 8013f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f3a:	e7e3      	b.n	8013f04 <_printf_i+0x174>
 8013f3c:	0659      	lsls	r1, r3, #25
 8013f3e:	bf48      	it	mi
 8013f40:	b2b6      	uxthmi	r6, r6
 8013f42:	e7e6      	b.n	8013f12 <_printf_i+0x182>
 8013f44:	4615      	mov	r5, r2
 8013f46:	e7bb      	b.n	8013ec0 <_printf_i+0x130>
 8013f48:	682b      	ldr	r3, [r5, #0]
 8013f4a:	6826      	ldr	r6, [r4, #0]
 8013f4c:	6961      	ldr	r1, [r4, #20]
 8013f4e:	1d18      	adds	r0, r3, #4
 8013f50:	6028      	str	r0, [r5, #0]
 8013f52:	0635      	lsls	r5, r6, #24
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	d501      	bpl.n	8013f5c <_printf_i+0x1cc>
 8013f58:	6019      	str	r1, [r3, #0]
 8013f5a:	e002      	b.n	8013f62 <_printf_i+0x1d2>
 8013f5c:	0670      	lsls	r0, r6, #25
 8013f5e:	d5fb      	bpl.n	8013f58 <_printf_i+0x1c8>
 8013f60:	8019      	strh	r1, [r3, #0]
 8013f62:	2300      	movs	r3, #0
 8013f64:	6123      	str	r3, [r4, #16]
 8013f66:	4615      	mov	r5, r2
 8013f68:	e7ba      	b.n	8013ee0 <_printf_i+0x150>
 8013f6a:	682b      	ldr	r3, [r5, #0]
 8013f6c:	1d1a      	adds	r2, r3, #4
 8013f6e:	602a      	str	r2, [r5, #0]
 8013f70:	681d      	ldr	r5, [r3, #0]
 8013f72:	6862      	ldr	r2, [r4, #4]
 8013f74:	2100      	movs	r1, #0
 8013f76:	4628      	mov	r0, r5
 8013f78:	f7ec f9b2 	bl	80002e0 <memchr>
 8013f7c:	b108      	cbz	r0, 8013f82 <_printf_i+0x1f2>
 8013f7e:	1b40      	subs	r0, r0, r5
 8013f80:	6060      	str	r0, [r4, #4]
 8013f82:	6863      	ldr	r3, [r4, #4]
 8013f84:	6123      	str	r3, [r4, #16]
 8013f86:	2300      	movs	r3, #0
 8013f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f8c:	e7a8      	b.n	8013ee0 <_printf_i+0x150>
 8013f8e:	6923      	ldr	r3, [r4, #16]
 8013f90:	462a      	mov	r2, r5
 8013f92:	4649      	mov	r1, r9
 8013f94:	4640      	mov	r0, r8
 8013f96:	47d0      	blx	sl
 8013f98:	3001      	adds	r0, #1
 8013f9a:	d0ab      	beq.n	8013ef4 <_printf_i+0x164>
 8013f9c:	6823      	ldr	r3, [r4, #0]
 8013f9e:	079b      	lsls	r3, r3, #30
 8013fa0:	d413      	bmi.n	8013fca <_printf_i+0x23a>
 8013fa2:	68e0      	ldr	r0, [r4, #12]
 8013fa4:	9b03      	ldr	r3, [sp, #12]
 8013fa6:	4298      	cmp	r0, r3
 8013fa8:	bfb8      	it	lt
 8013faa:	4618      	movlt	r0, r3
 8013fac:	e7a4      	b.n	8013ef8 <_printf_i+0x168>
 8013fae:	2301      	movs	r3, #1
 8013fb0:	4632      	mov	r2, r6
 8013fb2:	4649      	mov	r1, r9
 8013fb4:	4640      	mov	r0, r8
 8013fb6:	47d0      	blx	sl
 8013fb8:	3001      	adds	r0, #1
 8013fba:	d09b      	beq.n	8013ef4 <_printf_i+0x164>
 8013fbc:	3501      	adds	r5, #1
 8013fbe:	68e3      	ldr	r3, [r4, #12]
 8013fc0:	9903      	ldr	r1, [sp, #12]
 8013fc2:	1a5b      	subs	r3, r3, r1
 8013fc4:	42ab      	cmp	r3, r5
 8013fc6:	dcf2      	bgt.n	8013fae <_printf_i+0x21e>
 8013fc8:	e7eb      	b.n	8013fa2 <_printf_i+0x212>
 8013fca:	2500      	movs	r5, #0
 8013fcc:	f104 0619 	add.w	r6, r4, #25
 8013fd0:	e7f5      	b.n	8013fbe <_printf_i+0x22e>
 8013fd2:	bf00      	nop
 8013fd4:	080144d9 	.word	0x080144d9
 8013fd8:	080144ea 	.word	0x080144ea

08013fdc <__sread>:
 8013fdc:	b510      	push	{r4, lr}
 8013fde:	460c      	mov	r4, r1
 8013fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe4:	f000 f894 	bl	8014110 <_read_r>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	bfab      	itete	ge
 8013fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013fee:	89a3      	ldrhlt	r3, [r4, #12]
 8013ff0:	181b      	addge	r3, r3, r0
 8013ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ff6:	bfac      	ite	ge
 8013ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ffa:	81a3      	strhlt	r3, [r4, #12]
 8013ffc:	bd10      	pop	{r4, pc}

08013ffe <__swrite>:
 8013ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014002:	461f      	mov	r7, r3
 8014004:	898b      	ldrh	r3, [r1, #12]
 8014006:	05db      	lsls	r3, r3, #23
 8014008:	4605      	mov	r5, r0
 801400a:	460c      	mov	r4, r1
 801400c:	4616      	mov	r6, r2
 801400e:	d505      	bpl.n	801401c <__swrite+0x1e>
 8014010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014014:	2302      	movs	r3, #2
 8014016:	2200      	movs	r2, #0
 8014018:	f000 f868 	bl	80140ec <_lseek_r>
 801401c:	89a3      	ldrh	r3, [r4, #12]
 801401e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014026:	81a3      	strh	r3, [r4, #12]
 8014028:	4632      	mov	r2, r6
 801402a:	463b      	mov	r3, r7
 801402c:	4628      	mov	r0, r5
 801402e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014032:	f000 b817 	b.w	8014064 <_write_r>

08014036 <__sseek>:
 8014036:	b510      	push	{r4, lr}
 8014038:	460c      	mov	r4, r1
 801403a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801403e:	f000 f855 	bl	80140ec <_lseek_r>
 8014042:	1c43      	adds	r3, r0, #1
 8014044:	89a3      	ldrh	r3, [r4, #12]
 8014046:	bf15      	itete	ne
 8014048:	6560      	strne	r0, [r4, #84]	; 0x54
 801404a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801404e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014052:	81a3      	strheq	r3, [r4, #12]
 8014054:	bf18      	it	ne
 8014056:	81a3      	strhne	r3, [r4, #12]
 8014058:	bd10      	pop	{r4, pc}

0801405a <__sclose>:
 801405a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801405e:	f000 b813 	b.w	8014088 <_close_r>
	...

08014064 <_write_r>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	4d07      	ldr	r5, [pc, #28]	; (8014084 <_write_r+0x20>)
 8014068:	4604      	mov	r4, r0
 801406a:	4608      	mov	r0, r1
 801406c:	4611      	mov	r1, r2
 801406e:	2200      	movs	r2, #0
 8014070:	602a      	str	r2, [r5, #0]
 8014072:	461a      	mov	r2, r3
 8014074:	f7ee fbad 	bl	80027d2 <_write>
 8014078:	1c43      	adds	r3, r0, #1
 801407a:	d102      	bne.n	8014082 <_write_r+0x1e>
 801407c:	682b      	ldr	r3, [r5, #0]
 801407e:	b103      	cbz	r3, 8014082 <_write_r+0x1e>
 8014080:	6023      	str	r3, [r4, #0]
 8014082:	bd38      	pop	{r3, r4, r5, pc}
 8014084:	24004f98 	.word	0x24004f98

08014088 <_close_r>:
 8014088:	b538      	push	{r3, r4, r5, lr}
 801408a:	4d06      	ldr	r5, [pc, #24]	; (80140a4 <_close_r+0x1c>)
 801408c:	2300      	movs	r3, #0
 801408e:	4604      	mov	r4, r0
 8014090:	4608      	mov	r0, r1
 8014092:	602b      	str	r3, [r5, #0]
 8014094:	f7ee fbb9 	bl	800280a <_close>
 8014098:	1c43      	adds	r3, r0, #1
 801409a:	d102      	bne.n	80140a2 <_close_r+0x1a>
 801409c:	682b      	ldr	r3, [r5, #0]
 801409e:	b103      	cbz	r3, 80140a2 <_close_r+0x1a>
 80140a0:	6023      	str	r3, [r4, #0]
 80140a2:	bd38      	pop	{r3, r4, r5, pc}
 80140a4:	24004f98 	.word	0x24004f98

080140a8 <_fstat_r>:
 80140a8:	b538      	push	{r3, r4, r5, lr}
 80140aa:	4d07      	ldr	r5, [pc, #28]	; (80140c8 <_fstat_r+0x20>)
 80140ac:	2300      	movs	r3, #0
 80140ae:	4604      	mov	r4, r0
 80140b0:	4608      	mov	r0, r1
 80140b2:	4611      	mov	r1, r2
 80140b4:	602b      	str	r3, [r5, #0]
 80140b6:	f7ee fbb4 	bl	8002822 <_fstat>
 80140ba:	1c43      	adds	r3, r0, #1
 80140bc:	d102      	bne.n	80140c4 <_fstat_r+0x1c>
 80140be:	682b      	ldr	r3, [r5, #0]
 80140c0:	b103      	cbz	r3, 80140c4 <_fstat_r+0x1c>
 80140c2:	6023      	str	r3, [r4, #0]
 80140c4:	bd38      	pop	{r3, r4, r5, pc}
 80140c6:	bf00      	nop
 80140c8:	24004f98 	.word	0x24004f98

080140cc <_isatty_r>:
 80140cc:	b538      	push	{r3, r4, r5, lr}
 80140ce:	4d06      	ldr	r5, [pc, #24]	; (80140e8 <_isatty_r+0x1c>)
 80140d0:	2300      	movs	r3, #0
 80140d2:	4604      	mov	r4, r0
 80140d4:	4608      	mov	r0, r1
 80140d6:	602b      	str	r3, [r5, #0]
 80140d8:	f7ee fbb3 	bl	8002842 <_isatty>
 80140dc:	1c43      	adds	r3, r0, #1
 80140de:	d102      	bne.n	80140e6 <_isatty_r+0x1a>
 80140e0:	682b      	ldr	r3, [r5, #0]
 80140e2:	b103      	cbz	r3, 80140e6 <_isatty_r+0x1a>
 80140e4:	6023      	str	r3, [r4, #0]
 80140e6:	bd38      	pop	{r3, r4, r5, pc}
 80140e8:	24004f98 	.word	0x24004f98

080140ec <_lseek_r>:
 80140ec:	b538      	push	{r3, r4, r5, lr}
 80140ee:	4d07      	ldr	r5, [pc, #28]	; (801410c <_lseek_r+0x20>)
 80140f0:	4604      	mov	r4, r0
 80140f2:	4608      	mov	r0, r1
 80140f4:	4611      	mov	r1, r2
 80140f6:	2200      	movs	r2, #0
 80140f8:	602a      	str	r2, [r5, #0]
 80140fa:	461a      	mov	r2, r3
 80140fc:	f7ee fbac 	bl	8002858 <_lseek>
 8014100:	1c43      	adds	r3, r0, #1
 8014102:	d102      	bne.n	801410a <_lseek_r+0x1e>
 8014104:	682b      	ldr	r3, [r5, #0]
 8014106:	b103      	cbz	r3, 801410a <_lseek_r+0x1e>
 8014108:	6023      	str	r3, [r4, #0]
 801410a:	bd38      	pop	{r3, r4, r5, pc}
 801410c:	24004f98 	.word	0x24004f98

08014110 <_read_r>:
 8014110:	b538      	push	{r3, r4, r5, lr}
 8014112:	4d07      	ldr	r5, [pc, #28]	; (8014130 <_read_r+0x20>)
 8014114:	4604      	mov	r4, r0
 8014116:	4608      	mov	r0, r1
 8014118:	4611      	mov	r1, r2
 801411a:	2200      	movs	r2, #0
 801411c:	602a      	str	r2, [r5, #0]
 801411e:	461a      	mov	r2, r3
 8014120:	f7ee fb3a 	bl	8002798 <_read>
 8014124:	1c43      	adds	r3, r0, #1
 8014126:	d102      	bne.n	801412e <_read_r+0x1e>
 8014128:	682b      	ldr	r3, [r5, #0]
 801412a:	b103      	cbz	r3, 801412e <_read_r+0x1e>
 801412c:	6023      	str	r3, [r4, #0]
 801412e:	bd38      	pop	{r3, r4, r5, pc}
 8014130:	24004f98 	.word	0x24004f98

08014134 <_init>:
 8014134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014136:	bf00      	nop
 8014138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801413a:	bc08      	pop	{r3}
 801413c:	469e      	mov	lr, r3
 801413e:	4770      	bx	lr

08014140 <_fini>:
 8014140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014142:	bf00      	nop
 8014144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014146:	bc08      	pop	{r3}
 8014148:	469e      	mov	lr, r3
 801414a:	4770      	bx	lr
